
sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d15c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  0800d220  0800d220  0000e220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d738  0800d738  0000f1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800d738  0800d738  0000f1ec  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800d738  0800d738  0000f1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d738  0800d738  0000e738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d73c  0800d73c  0000e73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800d740  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000125c  200001ec  0800d92c  0000f1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001448  0800d92c  0000f448  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000f1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110f6  00000000  00000000  0000f214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026fa  00000000  00000000  0002030a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00022a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ccc  00000000  00000000  00023a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011f9b  00000000  00000000  000246dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144f2  00000000  00000000  00036677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068fa5  00000000  00000000  0004ab69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3b0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050a4  00000000  00000000  000b3b54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000b8bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001ec 	.word	0x200001ec
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d204 	.word	0x0800d204

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f0 	.word	0x200001f0
 8000104:	0800d204 	.word	0x0800d204

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			@ (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	@ 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	@ 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	@ 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			@ (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 facf 	bl	80019f4 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 fa13 	bl	800188c <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fac1 	bl	80019f4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fab7 	bl	80019f4 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa3d 	bl	8001914 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fa33 	bl	8001914 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_cfrcmple>:
 80004bc:	4684      	mov	ip, r0
 80004be:	0008      	movs	r0, r1
 80004c0:	4661      	mov	r1, ip
 80004c2:	e7ff      	b.n	80004c4 <__aeabi_cfcmpeq>

080004c4 <__aeabi_cfcmpeq>:
 80004c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c6:	f000 f911 	bl	80006ec <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	d401      	bmi.n	80004d2 <__aeabi_cfcmpeq+0xe>
 80004ce:	2100      	movs	r1, #0
 80004d0:	42c8      	cmn	r0, r1
 80004d2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d4 <__aeabi_fcmpeq>:
 80004d4:	b510      	push	{r4, lr}
 80004d6:	f000 f899 	bl	800060c <__eqsf2>
 80004da:	4240      	negs	r0, r0
 80004dc:	3001      	adds	r0, #1
 80004de:	bd10      	pop	{r4, pc}

080004e0 <__aeabi_fcmplt>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f903 	bl	80006ec <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	db01      	blt.n	80004ee <__aeabi_fcmplt+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmple>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f8f9 	bl	80006ec <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dd01      	ble.n	8000502 <__aeabi_fcmple+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpgt>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f8a7 	bl	800065c <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dc01      	bgt.n	8000516 <__aeabi_fcmpgt+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_fcmpge>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 f89d 	bl	800065c <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	da01      	bge.n	800052a <__aeabi_fcmpge+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_d2uiz>:
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	2200      	movs	r2, #0
 8000534:	4b0c      	ldr	r3, [pc, #48]	@ (8000568 <__aeabi_d2uiz+0x38>)
 8000536:	0004      	movs	r4, r0
 8000538:	000d      	movs	r5, r1
 800053a:	f7ff ffb5 	bl	80004a8 <__aeabi_dcmpge>
 800053e:	2800      	cmp	r0, #0
 8000540:	d104      	bne.n	800054c <__aeabi_d2uiz+0x1c>
 8000542:	0020      	movs	r0, r4
 8000544:	0029      	movs	r1, r5
 8000546:	f002 f9d5 	bl	80028f4 <__aeabi_d2iz>
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <__aeabi_d2uiz+0x38>)
 800054e:	2200      	movs	r2, #0
 8000550:	0020      	movs	r0, r4
 8000552:	0029      	movs	r1, r5
 8000554:	f001 fda2 	bl	800209c <__aeabi_dsub>
 8000558:	f002 f9cc 	bl	80028f4 <__aeabi_d2iz>
 800055c:	2380      	movs	r3, #128	@ 0x80
 800055e:	061b      	lsls	r3, r3, #24
 8000560:	469c      	mov	ip, r3
 8000562:	4460      	add	r0, ip
 8000564:	e7f1      	b.n	800054a <__aeabi_d2uiz+0x1a>
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	41e00000 	.word	0x41e00000

0800056c <__aeabi_d2lz>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	2200      	movs	r2, #0
 8000570:	2300      	movs	r3, #0
 8000572:	0004      	movs	r4, r0
 8000574:	000d      	movs	r5, r1
 8000576:	f7ff ff79 	bl	800046c <__aeabi_dcmplt>
 800057a:	2800      	cmp	r0, #0
 800057c:	d108      	bne.n	8000590 <__aeabi_d2lz+0x24>
 800057e:	0020      	movs	r0, r4
 8000580:	0029      	movs	r1, r5
 8000582:	f000 f80f 	bl	80005a4 <__aeabi_d2ulz>
 8000586:	0002      	movs	r2, r0
 8000588:	000b      	movs	r3, r1
 800058a:	0010      	movs	r0, r2
 800058c:	0019      	movs	r1, r3
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	061b      	lsls	r3, r3, #24
 8000594:	18e9      	adds	r1, r5, r3
 8000596:	0020      	movs	r0, r4
 8000598:	f000 f804 	bl	80005a4 <__aeabi_d2ulz>
 800059c:	2300      	movs	r3, #0
 800059e:	4242      	negs	r2, r0
 80005a0:	418b      	sbcs	r3, r1
 80005a2:	e7f2      	b.n	800058a <__aeabi_d2lz+0x1e>

080005a4 <__aeabi_d2ulz>:
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	2200      	movs	r2, #0
 80005a8:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <__aeabi_d2ulz+0x34>)
 80005aa:	000d      	movs	r5, r1
 80005ac:	0004      	movs	r4, r0
 80005ae:	f001 fa8f 	bl	8001ad0 <__aeabi_dmul>
 80005b2:	f7ff ffbd 	bl	8000530 <__aeabi_d2uiz>
 80005b6:	0006      	movs	r6, r0
 80005b8:	f002 fa06 	bl	80029c8 <__aeabi_ui2d>
 80005bc:	2200      	movs	r2, #0
 80005be:	4b07      	ldr	r3, [pc, #28]	@ (80005dc <__aeabi_d2ulz+0x38>)
 80005c0:	f001 fa86 	bl	8001ad0 <__aeabi_dmul>
 80005c4:	0002      	movs	r2, r0
 80005c6:	000b      	movs	r3, r1
 80005c8:	0020      	movs	r0, r4
 80005ca:	0029      	movs	r1, r5
 80005cc:	f001 fd66 	bl	800209c <__aeabi_dsub>
 80005d0:	f7ff ffae 	bl	8000530 <__aeabi_d2uiz>
 80005d4:	0031      	movs	r1, r6
 80005d6:	bd70      	pop	{r4, r5, r6, pc}
 80005d8:	3df00000 	.word	0x3df00000
 80005dc:	41f00000 	.word	0x41f00000

080005e0 <__aeabi_l2d>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	0006      	movs	r6, r0
 80005e4:	0008      	movs	r0, r1
 80005e6:	f002 f9c1 	bl	800296c <__aeabi_i2d>
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b06      	ldr	r3, [pc, #24]	@ (8000608 <__aeabi_l2d+0x28>)
 80005ee:	f001 fa6f 	bl	8001ad0 <__aeabi_dmul>
 80005f2:	000d      	movs	r5, r1
 80005f4:	0004      	movs	r4, r0
 80005f6:	0030      	movs	r0, r6
 80005f8:	f002 f9e6 	bl	80029c8 <__aeabi_ui2d>
 80005fc:	002b      	movs	r3, r5
 80005fe:	0022      	movs	r2, r4
 8000600:	f000 fa66 	bl	8000ad0 <__aeabi_dadd>
 8000604:	bd70      	pop	{r4, r5, r6, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	41f00000 	.word	0x41f00000

0800060c <__eqsf2>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	0042      	lsls	r2, r0, #1
 8000610:	024e      	lsls	r6, r1, #9
 8000612:	004c      	lsls	r4, r1, #1
 8000614:	0245      	lsls	r5, r0, #9
 8000616:	0a6d      	lsrs	r5, r5, #9
 8000618:	0e12      	lsrs	r2, r2, #24
 800061a:	0fc3      	lsrs	r3, r0, #31
 800061c:	0a76      	lsrs	r6, r6, #9
 800061e:	0e24      	lsrs	r4, r4, #24
 8000620:	0fc9      	lsrs	r1, r1, #31
 8000622:	2aff      	cmp	r2, #255	@ 0xff
 8000624:	d010      	beq.n	8000648 <__eqsf2+0x3c>
 8000626:	2cff      	cmp	r4, #255	@ 0xff
 8000628:	d00c      	beq.n	8000644 <__eqsf2+0x38>
 800062a:	2001      	movs	r0, #1
 800062c:	42a2      	cmp	r2, r4
 800062e:	d10a      	bne.n	8000646 <__eqsf2+0x3a>
 8000630:	42b5      	cmp	r5, r6
 8000632:	d108      	bne.n	8000646 <__eqsf2+0x3a>
 8000634:	428b      	cmp	r3, r1
 8000636:	d00f      	beq.n	8000658 <__eqsf2+0x4c>
 8000638:	2a00      	cmp	r2, #0
 800063a:	d104      	bne.n	8000646 <__eqsf2+0x3a>
 800063c:	0028      	movs	r0, r5
 800063e:	1e43      	subs	r3, r0, #1
 8000640:	4198      	sbcs	r0, r3
 8000642:	e000      	b.n	8000646 <__eqsf2+0x3a>
 8000644:	2001      	movs	r0, #1
 8000646:	bd70      	pop	{r4, r5, r6, pc}
 8000648:	2001      	movs	r0, #1
 800064a:	2cff      	cmp	r4, #255	@ 0xff
 800064c:	d1fb      	bne.n	8000646 <__eqsf2+0x3a>
 800064e:	4335      	orrs	r5, r6
 8000650:	d1f9      	bne.n	8000646 <__eqsf2+0x3a>
 8000652:	404b      	eors	r3, r1
 8000654:	0018      	movs	r0, r3
 8000656:	e7f6      	b.n	8000646 <__eqsf2+0x3a>
 8000658:	2000      	movs	r0, #0
 800065a:	e7f4      	b.n	8000646 <__eqsf2+0x3a>

0800065c <__gesf2>:
 800065c:	b530      	push	{r4, r5, lr}
 800065e:	0042      	lsls	r2, r0, #1
 8000660:	0244      	lsls	r4, r0, #9
 8000662:	024d      	lsls	r5, r1, #9
 8000664:	0fc3      	lsrs	r3, r0, #31
 8000666:	0048      	lsls	r0, r1, #1
 8000668:	0a64      	lsrs	r4, r4, #9
 800066a:	0e12      	lsrs	r2, r2, #24
 800066c:	0a6d      	lsrs	r5, r5, #9
 800066e:	0e00      	lsrs	r0, r0, #24
 8000670:	0fc9      	lsrs	r1, r1, #31
 8000672:	2aff      	cmp	r2, #255	@ 0xff
 8000674:	d018      	beq.n	80006a8 <__gesf2+0x4c>
 8000676:	28ff      	cmp	r0, #255	@ 0xff
 8000678:	d00a      	beq.n	8000690 <__gesf2+0x34>
 800067a:	2a00      	cmp	r2, #0
 800067c:	d11e      	bne.n	80006bc <__gesf2+0x60>
 800067e:	2800      	cmp	r0, #0
 8000680:	d10a      	bne.n	8000698 <__gesf2+0x3c>
 8000682:	2d00      	cmp	r5, #0
 8000684:	d029      	beq.n	80006da <__gesf2+0x7e>
 8000686:	2c00      	cmp	r4, #0
 8000688:	d12d      	bne.n	80006e6 <__gesf2+0x8a>
 800068a:	0048      	lsls	r0, r1, #1
 800068c:	3801      	subs	r0, #1
 800068e:	bd30      	pop	{r4, r5, pc}
 8000690:	2d00      	cmp	r5, #0
 8000692:	d125      	bne.n	80006e0 <__gesf2+0x84>
 8000694:	2a00      	cmp	r2, #0
 8000696:	d101      	bne.n	800069c <__gesf2+0x40>
 8000698:	2c00      	cmp	r4, #0
 800069a:	d0f6      	beq.n	800068a <__gesf2+0x2e>
 800069c:	428b      	cmp	r3, r1
 800069e:	d019      	beq.n	80006d4 <__gesf2+0x78>
 80006a0:	2001      	movs	r0, #1
 80006a2:	425b      	negs	r3, r3
 80006a4:	4318      	orrs	r0, r3
 80006a6:	e7f2      	b.n	800068e <__gesf2+0x32>
 80006a8:	2c00      	cmp	r4, #0
 80006aa:	d119      	bne.n	80006e0 <__gesf2+0x84>
 80006ac:	28ff      	cmp	r0, #255	@ 0xff
 80006ae:	d1f7      	bne.n	80006a0 <__gesf2+0x44>
 80006b0:	2d00      	cmp	r5, #0
 80006b2:	d115      	bne.n	80006e0 <__gesf2+0x84>
 80006b4:	2000      	movs	r0, #0
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d1f2      	bne.n	80006a0 <__gesf2+0x44>
 80006ba:	e7e8      	b.n	800068e <__gesf2+0x32>
 80006bc:	2800      	cmp	r0, #0
 80006be:	d0ef      	beq.n	80006a0 <__gesf2+0x44>
 80006c0:	428b      	cmp	r3, r1
 80006c2:	d1ed      	bne.n	80006a0 <__gesf2+0x44>
 80006c4:	4282      	cmp	r2, r0
 80006c6:	dceb      	bgt.n	80006a0 <__gesf2+0x44>
 80006c8:	db04      	blt.n	80006d4 <__gesf2+0x78>
 80006ca:	42ac      	cmp	r4, r5
 80006cc:	d8e8      	bhi.n	80006a0 <__gesf2+0x44>
 80006ce:	2000      	movs	r0, #0
 80006d0:	42ac      	cmp	r4, r5
 80006d2:	d2dc      	bcs.n	800068e <__gesf2+0x32>
 80006d4:	0058      	lsls	r0, r3, #1
 80006d6:	3801      	subs	r0, #1
 80006d8:	e7d9      	b.n	800068e <__gesf2+0x32>
 80006da:	2c00      	cmp	r4, #0
 80006dc:	d0d7      	beq.n	800068e <__gesf2+0x32>
 80006de:	e7df      	b.n	80006a0 <__gesf2+0x44>
 80006e0:	2002      	movs	r0, #2
 80006e2:	4240      	negs	r0, r0
 80006e4:	e7d3      	b.n	800068e <__gesf2+0x32>
 80006e6:	428b      	cmp	r3, r1
 80006e8:	d1da      	bne.n	80006a0 <__gesf2+0x44>
 80006ea:	e7ee      	b.n	80006ca <__gesf2+0x6e>

080006ec <__lesf2>:
 80006ec:	b530      	push	{r4, r5, lr}
 80006ee:	0042      	lsls	r2, r0, #1
 80006f0:	0244      	lsls	r4, r0, #9
 80006f2:	024d      	lsls	r5, r1, #9
 80006f4:	0fc3      	lsrs	r3, r0, #31
 80006f6:	0048      	lsls	r0, r1, #1
 80006f8:	0a64      	lsrs	r4, r4, #9
 80006fa:	0e12      	lsrs	r2, r2, #24
 80006fc:	0a6d      	lsrs	r5, r5, #9
 80006fe:	0e00      	lsrs	r0, r0, #24
 8000700:	0fc9      	lsrs	r1, r1, #31
 8000702:	2aff      	cmp	r2, #255	@ 0xff
 8000704:	d017      	beq.n	8000736 <__lesf2+0x4a>
 8000706:	28ff      	cmp	r0, #255	@ 0xff
 8000708:	d00a      	beq.n	8000720 <__lesf2+0x34>
 800070a:	2a00      	cmp	r2, #0
 800070c:	d11b      	bne.n	8000746 <__lesf2+0x5a>
 800070e:	2800      	cmp	r0, #0
 8000710:	d10a      	bne.n	8000728 <__lesf2+0x3c>
 8000712:	2d00      	cmp	r5, #0
 8000714:	d01d      	beq.n	8000752 <__lesf2+0x66>
 8000716:	2c00      	cmp	r4, #0
 8000718:	d12d      	bne.n	8000776 <__lesf2+0x8a>
 800071a:	0048      	lsls	r0, r1, #1
 800071c:	3801      	subs	r0, #1
 800071e:	e011      	b.n	8000744 <__lesf2+0x58>
 8000720:	2d00      	cmp	r5, #0
 8000722:	d10e      	bne.n	8000742 <__lesf2+0x56>
 8000724:	2a00      	cmp	r2, #0
 8000726:	d101      	bne.n	800072c <__lesf2+0x40>
 8000728:	2c00      	cmp	r4, #0
 800072a:	d0f6      	beq.n	800071a <__lesf2+0x2e>
 800072c:	428b      	cmp	r3, r1
 800072e:	d10c      	bne.n	800074a <__lesf2+0x5e>
 8000730:	0058      	lsls	r0, r3, #1
 8000732:	3801      	subs	r0, #1
 8000734:	e006      	b.n	8000744 <__lesf2+0x58>
 8000736:	2c00      	cmp	r4, #0
 8000738:	d103      	bne.n	8000742 <__lesf2+0x56>
 800073a:	28ff      	cmp	r0, #255	@ 0xff
 800073c:	d105      	bne.n	800074a <__lesf2+0x5e>
 800073e:	2d00      	cmp	r5, #0
 8000740:	d015      	beq.n	800076e <__lesf2+0x82>
 8000742:	2002      	movs	r0, #2
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	2800      	cmp	r0, #0
 8000748:	d106      	bne.n	8000758 <__lesf2+0x6c>
 800074a:	2001      	movs	r0, #1
 800074c:	425b      	negs	r3, r3
 800074e:	4318      	orrs	r0, r3
 8000750:	e7f8      	b.n	8000744 <__lesf2+0x58>
 8000752:	2c00      	cmp	r4, #0
 8000754:	d0f6      	beq.n	8000744 <__lesf2+0x58>
 8000756:	e7f8      	b.n	800074a <__lesf2+0x5e>
 8000758:	428b      	cmp	r3, r1
 800075a:	d1f6      	bne.n	800074a <__lesf2+0x5e>
 800075c:	4282      	cmp	r2, r0
 800075e:	dcf4      	bgt.n	800074a <__lesf2+0x5e>
 8000760:	dbe6      	blt.n	8000730 <__lesf2+0x44>
 8000762:	42ac      	cmp	r4, r5
 8000764:	d8f1      	bhi.n	800074a <__lesf2+0x5e>
 8000766:	2000      	movs	r0, #0
 8000768:	42ac      	cmp	r4, r5
 800076a:	d2eb      	bcs.n	8000744 <__lesf2+0x58>
 800076c:	e7e0      	b.n	8000730 <__lesf2+0x44>
 800076e:	2000      	movs	r0, #0
 8000770:	428b      	cmp	r3, r1
 8000772:	d1ea      	bne.n	800074a <__lesf2+0x5e>
 8000774:	e7e6      	b.n	8000744 <__lesf2+0x58>
 8000776:	428b      	cmp	r3, r1
 8000778:	d1e7      	bne.n	800074a <__lesf2+0x5e>
 800077a:	e7f2      	b.n	8000762 <__lesf2+0x76>

0800077c <__aeabi_fmul>:
 800077c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800077e:	464f      	mov	r7, r9
 8000780:	4646      	mov	r6, r8
 8000782:	46d6      	mov	lr, sl
 8000784:	0044      	lsls	r4, r0, #1
 8000786:	b5c0      	push	{r6, r7, lr}
 8000788:	0246      	lsls	r6, r0, #9
 800078a:	1c0f      	adds	r7, r1, #0
 800078c:	0a76      	lsrs	r6, r6, #9
 800078e:	0e24      	lsrs	r4, r4, #24
 8000790:	0fc5      	lsrs	r5, r0, #31
 8000792:	2c00      	cmp	r4, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_fmul+0x1c>
 8000796:	e0da      	b.n	800094e <__aeabi_fmul+0x1d2>
 8000798:	2cff      	cmp	r4, #255	@ 0xff
 800079a:	d074      	beq.n	8000886 <__aeabi_fmul+0x10a>
 800079c:	2380      	movs	r3, #128	@ 0x80
 800079e:	00f6      	lsls	r6, r6, #3
 80007a0:	04db      	lsls	r3, r3, #19
 80007a2:	431e      	orrs	r6, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	4699      	mov	r9, r3
 80007a8:	469a      	mov	sl, r3
 80007aa:	3c7f      	subs	r4, #127	@ 0x7f
 80007ac:	027b      	lsls	r3, r7, #9
 80007ae:	0a5b      	lsrs	r3, r3, #9
 80007b0:	4698      	mov	r8, r3
 80007b2:	007b      	lsls	r3, r7, #1
 80007b4:	0e1b      	lsrs	r3, r3, #24
 80007b6:	0fff      	lsrs	r7, r7, #31
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d074      	beq.n	80008a6 <__aeabi_fmul+0x12a>
 80007bc:	2bff      	cmp	r3, #255	@ 0xff
 80007be:	d100      	bne.n	80007c2 <__aeabi_fmul+0x46>
 80007c0:	e08e      	b.n	80008e0 <__aeabi_fmul+0x164>
 80007c2:	4642      	mov	r2, r8
 80007c4:	2180      	movs	r1, #128	@ 0x80
 80007c6:	00d2      	lsls	r2, r2, #3
 80007c8:	04c9      	lsls	r1, r1, #19
 80007ca:	4311      	orrs	r1, r2
 80007cc:	3b7f      	subs	r3, #127	@ 0x7f
 80007ce:	002a      	movs	r2, r5
 80007d0:	18e4      	adds	r4, r4, r3
 80007d2:	464b      	mov	r3, r9
 80007d4:	407a      	eors	r2, r7
 80007d6:	4688      	mov	r8, r1
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	2b0a      	cmp	r3, #10
 80007dc:	dc75      	bgt.n	80008ca <__aeabi_fmul+0x14e>
 80007de:	464b      	mov	r3, r9
 80007e0:	2000      	movs	r0, #0
 80007e2:	2b02      	cmp	r3, #2
 80007e4:	dd0f      	ble.n	8000806 <__aeabi_fmul+0x8a>
 80007e6:	4649      	mov	r1, r9
 80007e8:	2301      	movs	r3, #1
 80007ea:	408b      	lsls	r3, r1
 80007ec:	21a6      	movs	r1, #166	@ 0xa6
 80007ee:	00c9      	lsls	r1, r1, #3
 80007f0:	420b      	tst	r3, r1
 80007f2:	d169      	bne.n	80008c8 <__aeabi_fmul+0x14c>
 80007f4:	2190      	movs	r1, #144	@ 0x90
 80007f6:	0089      	lsls	r1, r1, #2
 80007f8:	420b      	tst	r3, r1
 80007fa:	d000      	beq.n	80007fe <__aeabi_fmul+0x82>
 80007fc:	e100      	b.n	8000a00 <__aeabi_fmul+0x284>
 80007fe:	2188      	movs	r1, #136	@ 0x88
 8000800:	4219      	tst	r1, r3
 8000802:	d000      	beq.n	8000806 <__aeabi_fmul+0x8a>
 8000804:	e0f5      	b.n	80009f2 <__aeabi_fmul+0x276>
 8000806:	4641      	mov	r1, r8
 8000808:	0409      	lsls	r1, r1, #16
 800080a:	0c09      	lsrs	r1, r1, #16
 800080c:	4643      	mov	r3, r8
 800080e:	0008      	movs	r0, r1
 8000810:	0c35      	lsrs	r5, r6, #16
 8000812:	0436      	lsls	r6, r6, #16
 8000814:	0c1b      	lsrs	r3, r3, #16
 8000816:	0c36      	lsrs	r6, r6, #16
 8000818:	4370      	muls	r0, r6
 800081a:	4369      	muls	r1, r5
 800081c:	435e      	muls	r6, r3
 800081e:	435d      	muls	r5, r3
 8000820:	1876      	adds	r6, r6, r1
 8000822:	0c03      	lsrs	r3, r0, #16
 8000824:	199b      	adds	r3, r3, r6
 8000826:	4299      	cmp	r1, r3
 8000828:	d903      	bls.n	8000832 <__aeabi_fmul+0xb6>
 800082a:	2180      	movs	r1, #128	@ 0x80
 800082c:	0249      	lsls	r1, r1, #9
 800082e:	468c      	mov	ip, r1
 8000830:	4465      	add	r5, ip
 8000832:	0400      	lsls	r0, r0, #16
 8000834:	0419      	lsls	r1, r3, #16
 8000836:	0c00      	lsrs	r0, r0, #16
 8000838:	1809      	adds	r1, r1, r0
 800083a:	018e      	lsls	r6, r1, #6
 800083c:	1e70      	subs	r0, r6, #1
 800083e:	4186      	sbcs	r6, r0
 8000840:	0c1b      	lsrs	r3, r3, #16
 8000842:	0e89      	lsrs	r1, r1, #26
 8000844:	195b      	adds	r3, r3, r5
 8000846:	430e      	orrs	r6, r1
 8000848:	019b      	lsls	r3, r3, #6
 800084a:	431e      	orrs	r6, r3
 800084c:	011b      	lsls	r3, r3, #4
 800084e:	d46c      	bmi.n	800092a <__aeabi_fmul+0x1ae>
 8000850:	0023      	movs	r3, r4
 8000852:	337f      	adds	r3, #127	@ 0x7f
 8000854:	2b00      	cmp	r3, #0
 8000856:	dc00      	bgt.n	800085a <__aeabi_fmul+0xde>
 8000858:	e0b1      	b.n	80009be <__aeabi_fmul+0x242>
 800085a:	0015      	movs	r5, r2
 800085c:	0771      	lsls	r1, r6, #29
 800085e:	d00b      	beq.n	8000878 <__aeabi_fmul+0xfc>
 8000860:	200f      	movs	r0, #15
 8000862:	0021      	movs	r1, r4
 8000864:	4030      	ands	r0, r6
 8000866:	2804      	cmp	r0, #4
 8000868:	d006      	beq.n	8000878 <__aeabi_fmul+0xfc>
 800086a:	3604      	adds	r6, #4
 800086c:	0132      	lsls	r2, r6, #4
 800086e:	d503      	bpl.n	8000878 <__aeabi_fmul+0xfc>
 8000870:	4b6e      	ldr	r3, [pc, #440]	@ (8000a2c <__aeabi_fmul+0x2b0>)
 8000872:	401e      	ands	r6, r3
 8000874:	000b      	movs	r3, r1
 8000876:	3380      	adds	r3, #128	@ 0x80
 8000878:	2bfe      	cmp	r3, #254	@ 0xfe
 800087a:	dd00      	ble.n	800087e <__aeabi_fmul+0x102>
 800087c:	e0bd      	b.n	80009fa <__aeabi_fmul+0x27e>
 800087e:	01b2      	lsls	r2, r6, #6
 8000880:	0a52      	lsrs	r2, r2, #9
 8000882:	b2db      	uxtb	r3, r3
 8000884:	e048      	b.n	8000918 <__aeabi_fmul+0x19c>
 8000886:	2e00      	cmp	r6, #0
 8000888:	d000      	beq.n	800088c <__aeabi_fmul+0x110>
 800088a:	e092      	b.n	80009b2 <__aeabi_fmul+0x236>
 800088c:	2308      	movs	r3, #8
 800088e:	4699      	mov	r9, r3
 8000890:	3b06      	subs	r3, #6
 8000892:	469a      	mov	sl, r3
 8000894:	027b      	lsls	r3, r7, #9
 8000896:	0a5b      	lsrs	r3, r3, #9
 8000898:	4698      	mov	r8, r3
 800089a:	007b      	lsls	r3, r7, #1
 800089c:	24ff      	movs	r4, #255	@ 0xff
 800089e:	0e1b      	lsrs	r3, r3, #24
 80008a0:	0fff      	lsrs	r7, r7, #31
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d18a      	bne.n	80007bc <__aeabi_fmul+0x40>
 80008a6:	4642      	mov	r2, r8
 80008a8:	2a00      	cmp	r2, #0
 80008aa:	d164      	bne.n	8000976 <__aeabi_fmul+0x1fa>
 80008ac:	4649      	mov	r1, r9
 80008ae:	3201      	adds	r2, #1
 80008b0:	4311      	orrs	r1, r2
 80008b2:	4689      	mov	r9, r1
 80008b4:	290a      	cmp	r1, #10
 80008b6:	dc08      	bgt.n	80008ca <__aeabi_fmul+0x14e>
 80008b8:	407d      	eors	r5, r7
 80008ba:	2001      	movs	r0, #1
 80008bc:	b2ea      	uxtb	r2, r5
 80008be:	2902      	cmp	r1, #2
 80008c0:	dc91      	bgt.n	80007e6 <__aeabi_fmul+0x6a>
 80008c2:	0015      	movs	r5, r2
 80008c4:	2200      	movs	r2, #0
 80008c6:	e027      	b.n	8000918 <__aeabi_fmul+0x19c>
 80008c8:	0015      	movs	r5, r2
 80008ca:	4653      	mov	r3, sl
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d100      	bne.n	80008d2 <__aeabi_fmul+0x156>
 80008d0:	e093      	b.n	80009fa <__aeabi_fmul+0x27e>
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d01a      	beq.n	800090c <__aeabi_fmul+0x190>
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d12c      	bne.n	8000934 <__aeabi_fmul+0x1b8>
 80008da:	2300      	movs	r3, #0
 80008dc:	2200      	movs	r2, #0
 80008de:	e01b      	b.n	8000918 <__aeabi_fmul+0x19c>
 80008e0:	4643      	mov	r3, r8
 80008e2:	34ff      	adds	r4, #255	@ 0xff
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d055      	beq.n	8000994 <__aeabi_fmul+0x218>
 80008e8:	2103      	movs	r1, #3
 80008ea:	464b      	mov	r3, r9
 80008ec:	430b      	orrs	r3, r1
 80008ee:	0019      	movs	r1, r3
 80008f0:	2b0a      	cmp	r3, #10
 80008f2:	dc00      	bgt.n	80008f6 <__aeabi_fmul+0x17a>
 80008f4:	e092      	b.n	8000a1c <__aeabi_fmul+0x2a0>
 80008f6:	2b0f      	cmp	r3, #15
 80008f8:	d000      	beq.n	80008fc <__aeabi_fmul+0x180>
 80008fa:	e08c      	b.n	8000a16 <__aeabi_fmul+0x29a>
 80008fc:	2280      	movs	r2, #128	@ 0x80
 80008fe:	03d2      	lsls	r2, r2, #15
 8000900:	4216      	tst	r6, r2
 8000902:	d003      	beq.n	800090c <__aeabi_fmul+0x190>
 8000904:	4643      	mov	r3, r8
 8000906:	4213      	tst	r3, r2
 8000908:	d100      	bne.n	800090c <__aeabi_fmul+0x190>
 800090a:	e07d      	b.n	8000a08 <__aeabi_fmul+0x28c>
 800090c:	2280      	movs	r2, #128	@ 0x80
 800090e:	03d2      	lsls	r2, r2, #15
 8000910:	4332      	orrs	r2, r6
 8000912:	0252      	lsls	r2, r2, #9
 8000914:	0a52      	lsrs	r2, r2, #9
 8000916:	23ff      	movs	r3, #255	@ 0xff
 8000918:	05d8      	lsls	r0, r3, #23
 800091a:	07ed      	lsls	r5, r5, #31
 800091c:	4310      	orrs	r0, r2
 800091e:	4328      	orrs	r0, r5
 8000920:	bce0      	pop	{r5, r6, r7}
 8000922:	46ba      	mov	sl, r7
 8000924:	46b1      	mov	r9, r6
 8000926:	46a8      	mov	r8, r5
 8000928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800092a:	2301      	movs	r3, #1
 800092c:	0015      	movs	r5, r2
 800092e:	0871      	lsrs	r1, r6, #1
 8000930:	401e      	ands	r6, r3
 8000932:	430e      	orrs	r6, r1
 8000934:	0023      	movs	r3, r4
 8000936:	3380      	adds	r3, #128	@ 0x80
 8000938:	1c61      	adds	r1, r4, #1
 800093a:	2b00      	cmp	r3, #0
 800093c:	dd41      	ble.n	80009c2 <__aeabi_fmul+0x246>
 800093e:	0772      	lsls	r2, r6, #29
 8000940:	d094      	beq.n	800086c <__aeabi_fmul+0xf0>
 8000942:	220f      	movs	r2, #15
 8000944:	4032      	ands	r2, r6
 8000946:	2a04      	cmp	r2, #4
 8000948:	d000      	beq.n	800094c <__aeabi_fmul+0x1d0>
 800094a:	e78e      	b.n	800086a <__aeabi_fmul+0xee>
 800094c:	e78e      	b.n	800086c <__aeabi_fmul+0xf0>
 800094e:	2e00      	cmp	r6, #0
 8000950:	d105      	bne.n	800095e <__aeabi_fmul+0x1e2>
 8000952:	2304      	movs	r3, #4
 8000954:	4699      	mov	r9, r3
 8000956:	3b03      	subs	r3, #3
 8000958:	2400      	movs	r4, #0
 800095a:	469a      	mov	sl, r3
 800095c:	e726      	b.n	80007ac <__aeabi_fmul+0x30>
 800095e:	0030      	movs	r0, r6
 8000960:	f002 f920 	bl	8002ba4 <__clzsi2>
 8000964:	2476      	movs	r4, #118	@ 0x76
 8000966:	1f43      	subs	r3, r0, #5
 8000968:	409e      	lsls	r6, r3
 800096a:	2300      	movs	r3, #0
 800096c:	4264      	negs	r4, r4
 800096e:	4699      	mov	r9, r3
 8000970:	469a      	mov	sl, r3
 8000972:	1a24      	subs	r4, r4, r0
 8000974:	e71a      	b.n	80007ac <__aeabi_fmul+0x30>
 8000976:	4640      	mov	r0, r8
 8000978:	f002 f914 	bl	8002ba4 <__clzsi2>
 800097c:	464b      	mov	r3, r9
 800097e:	1a24      	subs	r4, r4, r0
 8000980:	3c76      	subs	r4, #118	@ 0x76
 8000982:	2b0a      	cmp	r3, #10
 8000984:	dca1      	bgt.n	80008ca <__aeabi_fmul+0x14e>
 8000986:	4643      	mov	r3, r8
 8000988:	3805      	subs	r0, #5
 800098a:	4083      	lsls	r3, r0
 800098c:	407d      	eors	r5, r7
 800098e:	4698      	mov	r8, r3
 8000990:	b2ea      	uxtb	r2, r5
 8000992:	e724      	b.n	80007de <__aeabi_fmul+0x62>
 8000994:	464a      	mov	r2, r9
 8000996:	3302      	adds	r3, #2
 8000998:	4313      	orrs	r3, r2
 800099a:	002a      	movs	r2, r5
 800099c:	407a      	eors	r2, r7
 800099e:	b2d2      	uxtb	r2, r2
 80009a0:	2b0a      	cmp	r3, #10
 80009a2:	dc92      	bgt.n	80008ca <__aeabi_fmul+0x14e>
 80009a4:	4649      	mov	r1, r9
 80009a6:	0015      	movs	r5, r2
 80009a8:	2900      	cmp	r1, #0
 80009aa:	d026      	beq.n	80009fa <__aeabi_fmul+0x27e>
 80009ac:	4699      	mov	r9, r3
 80009ae:	2002      	movs	r0, #2
 80009b0:	e719      	b.n	80007e6 <__aeabi_fmul+0x6a>
 80009b2:	230c      	movs	r3, #12
 80009b4:	4699      	mov	r9, r3
 80009b6:	3b09      	subs	r3, #9
 80009b8:	24ff      	movs	r4, #255	@ 0xff
 80009ba:	469a      	mov	sl, r3
 80009bc:	e6f6      	b.n	80007ac <__aeabi_fmul+0x30>
 80009be:	0015      	movs	r5, r2
 80009c0:	0021      	movs	r1, r4
 80009c2:	2201      	movs	r2, #1
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	2b1b      	cmp	r3, #27
 80009c8:	dd00      	ble.n	80009cc <__aeabi_fmul+0x250>
 80009ca:	e786      	b.n	80008da <__aeabi_fmul+0x15e>
 80009cc:	319e      	adds	r1, #158	@ 0x9e
 80009ce:	0032      	movs	r2, r6
 80009d0:	408e      	lsls	r6, r1
 80009d2:	40da      	lsrs	r2, r3
 80009d4:	1e73      	subs	r3, r6, #1
 80009d6:	419e      	sbcs	r6, r3
 80009d8:	4332      	orrs	r2, r6
 80009da:	0753      	lsls	r3, r2, #29
 80009dc:	d004      	beq.n	80009e8 <__aeabi_fmul+0x26c>
 80009de:	230f      	movs	r3, #15
 80009e0:	4013      	ands	r3, r2
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	d000      	beq.n	80009e8 <__aeabi_fmul+0x26c>
 80009e6:	3204      	adds	r2, #4
 80009e8:	0153      	lsls	r3, r2, #5
 80009ea:	d510      	bpl.n	8000a0e <__aeabi_fmul+0x292>
 80009ec:	2301      	movs	r3, #1
 80009ee:	2200      	movs	r2, #0
 80009f0:	e792      	b.n	8000918 <__aeabi_fmul+0x19c>
 80009f2:	003d      	movs	r5, r7
 80009f4:	4646      	mov	r6, r8
 80009f6:	4682      	mov	sl, r0
 80009f8:	e767      	b.n	80008ca <__aeabi_fmul+0x14e>
 80009fa:	23ff      	movs	r3, #255	@ 0xff
 80009fc:	2200      	movs	r2, #0
 80009fe:	e78b      	b.n	8000918 <__aeabi_fmul+0x19c>
 8000a00:	2280      	movs	r2, #128	@ 0x80
 8000a02:	2500      	movs	r5, #0
 8000a04:	03d2      	lsls	r2, r2, #15
 8000a06:	e786      	b.n	8000916 <__aeabi_fmul+0x19a>
 8000a08:	003d      	movs	r5, r7
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	e783      	b.n	8000916 <__aeabi_fmul+0x19a>
 8000a0e:	0192      	lsls	r2, r2, #6
 8000a10:	2300      	movs	r3, #0
 8000a12:	0a52      	lsrs	r2, r2, #9
 8000a14:	e780      	b.n	8000918 <__aeabi_fmul+0x19c>
 8000a16:	003d      	movs	r5, r7
 8000a18:	4646      	mov	r6, r8
 8000a1a:	e777      	b.n	800090c <__aeabi_fmul+0x190>
 8000a1c:	002a      	movs	r2, r5
 8000a1e:	2301      	movs	r3, #1
 8000a20:	407a      	eors	r2, r7
 8000a22:	408b      	lsls	r3, r1
 8000a24:	2003      	movs	r0, #3
 8000a26:	b2d2      	uxtb	r2, r2
 8000a28:	e6e9      	b.n	80007fe <__aeabi_fmul+0x82>
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	f7ffffff 	.word	0xf7ffffff

08000a30 <__aeabi_i2f>:
 8000a30:	b570      	push	{r4, r5, r6, lr}
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d012      	beq.n	8000a5c <__aeabi_i2f+0x2c>
 8000a36:	17c3      	asrs	r3, r0, #31
 8000a38:	18c5      	adds	r5, r0, r3
 8000a3a:	405d      	eors	r5, r3
 8000a3c:	0fc4      	lsrs	r4, r0, #31
 8000a3e:	0028      	movs	r0, r5
 8000a40:	f002 f8b0 	bl	8002ba4 <__clzsi2>
 8000a44:	239e      	movs	r3, #158	@ 0x9e
 8000a46:	1a1b      	subs	r3, r3, r0
 8000a48:	2b96      	cmp	r3, #150	@ 0x96
 8000a4a:	dc0f      	bgt.n	8000a6c <__aeabi_i2f+0x3c>
 8000a4c:	2808      	cmp	r0, #8
 8000a4e:	d038      	beq.n	8000ac2 <__aeabi_i2f+0x92>
 8000a50:	3808      	subs	r0, #8
 8000a52:	4085      	lsls	r5, r0
 8000a54:	026d      	lsls	r5, r5, #9
 8000a56:	0a6d      	lsrs	r5, r5, #9
 8000a58:	b2d8      	uxtb	r0, r3
 8000a5a:	e002      	b.n	8000a62 <__aeabi_i2f+0x32>
 8000a5c:	2400      	movs	r4, #0
 8000a5e:	2000      	movs	r0, #0
 8000a60:	2500      	movs	r5, #0
 8000a62:	05c0      	lsls	r0, r0, #23
 8000a64:	4328      	orrs	r0, r5
 8000a66:	07e4      	lsls	r4, r4, #31
 8000a68:	4320      	orrs	r0, r4
 8000a6a:	bd70      	pop	{r4, r5, r6, pc}
 8000a6c:	2b99      	cmp	r3, #153	@ 0x99
 8000a6e:	dc14      	bgt.n	8000a9a <__aeabi_i2f+0x6a>
 8000a70:	1f42      	subs	r2, r0, #5
 8000a72:	4095      	lsls	r5, r2
 8000a74:	002a      	movs	r2, r5
 8000a76:	4915      	ldr	r1, [pc, #84]	@ (8000acc <__aeabi_i2f+0x9c>)
 8000a78:	4011      	ands	r1, r2
 8000a7a:	0755      	lsls	r5, r2, #29
 8000a7c:	d01c      	beq.n	8000ab8 <__aeabi_i2f+0x88>
 8000a7e:	250f      	movs	r5, #15
 8000a80:	402a      	ands	r2, r5
 8000a82:	2a04      	cmp	r2, #4
 8000a84:	d018      	beq.n	8000ab8 <__aeabi_i2f+0x88>
 8000a86:	3104      	adds	r1, #4
 8000a88:	08ca      	lsrs	r2, r1, #3
 8000a8a:	0149      	lsls	r1, r1, #5
 8000a8c:	d515      	bpl.n	8000aba <__aeabi_i2f+0x8a>
 8000a8e:	239f      	movs	r3, #159	@ 0x9f
 8000a90:	0252      	lsls	r2, r2, #9
 8000a92:	1a18      	subs	r0, r3, r0
 8000a94:	0a55      	lsrs	r5, r2, #9
 8000a96:	b2c0      	uxtb	r0, r0
 8000a98:	e7e3      	b.n	8000a62 <__aeabi_i2f+0x32>
 8000a9a:	2205      	movs	r2, #5
 8000a9c:	0029      	movs	r1, r5
 8000a9e:	1a12      	subs	r2, r2, r0
 8000aa0:	40d1      	lsrs	r1, r2
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	321b      	adds	r2, #27
 8000aa6:	4095      	lsls	r5, r2
 8000aa8:	002a      	movs	r2, r5
 8000aaa:	1e55      	subs	r5, r2, #1
 8000aac:	41aa      	sbcs	r2, r5
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	4906      	ldr	r1, [pc, #24]	@ (8000acc <__aeabi_i2f+0x9c>)
 8000ab2:	4011      	ands	r1, r2
 8000ab4:	0755      	lsls	r5, r2, #29
 8000ab6:	d1e2      	bne.n	8000a7e <__aeabi_i2f+0x4e>
 8000ab8:	08ca      	lsrs	r2, r1, #3
 8000aba:	0252      	lsls	r2, r2, #9
 8000abc:	0a55      	lsrs	r5, r2, #9
 8000abe:	b2d8      	uxtb	r0, r3
 8000ac0:	e7cf      	b.n	8000a62 <__aeabi_i2f+0x32>
 8000ac2:	026d      	lsls	r5, r5, #9
 8000ac4:	0a6d      	lsrs	r5, r5, #9
 8000ac6:	308e      	adds	r0, #142	@ 0x8e
 8000ac8:	e7cb      	b.n	8000a62 <__aeabi_i2f+0x32>
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	fbffffff 	.word	0xfbffffff

08000ad0 <__aeabi_dadd>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	b5c0      	push	{r6, r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	9000      	str	r0, [sp, #0]
 8000ade:	9101      	str	r1, [sp, #4]
 8000ae0:	030e      	lsls	r6, r1, #12
 8000ae2:	004c      	lsls	r4, r1, #1
 8000ae4:	0fcd      	lsrs	r5, r1, #31
 8000ae6:	0a71      	lsrs	r1, r6, #9
 8000ae8:	9e00      	ldr	r6, [sp, #0]
 8000aea:	005f      	lsls	r7, r3, #1
 8000aec:	0f76      	lsrs	r6, r6, #29
 8000aee:	430e      	orrs	r6, r1
 8000af0:	9900      	ldr	r1, [sp, #0]
 8000af2:	9200      	str	r2, [sp, #0]
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	00c9      	lsls	r1, r1, #3
 8000af8:	4689      	mov	r9, r1
 8000afa:	0319      	lsls	r1, r3, #12
 8000afc:	0d7b      	lsrs	r3, r7, #21
 8000afe:	4698      	mov	r8, r3
 8000b00:	9b01      	ldr	r3, [sp, #4]
 8000b02:	0a49      	lsrs	r1, r1, #9
 8000b04:	0fdb      	lsrs	r3, r3, #31
 8000b06:	469c      	mov	ip, r3
 8000b08:	9b00      	ldr	r3, [sp, #0]
 8000b0a:	9a00      	ldr	r2, [sp, #0]
 8000b0c:	0f5b      	lsrs	r3, r3, #29
 8000b0e:	430b      	orrs	r3, r1
 8000b10:	4641      	mov	r1, r8
 8000b12:	0d64      	lsrs	r4, r4, #21
 8000b14:	00d2      	lsls	r2, r2, #3
 8000b16:	1a61      	subs	r1, r4, r1
 8000b18:	4565      	cmp	r5, ip
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x4e>
 8000b1c:	e0a6      	b.n	8000c6c <__aeabi_dadd+0x19c>
 8000b1e:	2900      	cmp	r1, #0
 8000b20:	dd72      	ble.n	8000c08 <__aeabi_dadd+0x138>
 8000b22:	4647      	mov	r7, r8
 8000b24:	2f00      	cmp	r7, #0
 8000b26:	d100      	bne.n	8000b2a <__aeabi_dadd+0x5a>
 8000b28:	e0dd      	b.n	8000ce6 <__aeabi_dadd+0x216>
 8000b2a:	4fcc      	ldr	r7, [pc, #816]	@ (8000e5c <__aeabi_dadd+0x38c>)
 8000b2c:	42bc      	cmp	r4, r7
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_dadd+0x62>
 8000b30:	e19a      	b.n	8000e68 <__aeabi_dadd+0x398>
 8000b32:	2701      	movs	r7, #1
 8000b34:	2938      	cmp	r1, #56	@ 0x38
 8000b36:	dc17      	bgt.n	8000b68 <__aeabi_dadd+0x98>
 8000b38:	2780      	movs	r7, #128	@ 0x80
 8000b3a:	043f      	lsls	r7, r7, #16
 8000b3c:	433b      	orrs	r3, r7
 8000b3e:	291f      	cmp	r1, #31
 8000b40:	dd00      	ble.n	8000b44 <__aeabi_dadd+0x74>
 8000b42:	e1dd      	b.n	8000f00 <__aeabi_dadd+0x430>
 8000b44:	2720      	movs	r7, #32
 8000b46:	1a78      	subs	r0, r7, r1
 8000b48:	001f      	movs	r7, r3
 8000b4a:	4087      	lsls	r7, r0
 8000b4c:	46ba      	mov	sl, r7
 8000b4e:	0017      	movs	r7, r2
 8000b50:	40cf      	lsrs	r7, r1
 8000b52:	4684      	mov	ip, r0
 8000b54:	0038      	movs	r0, r7
 8000b56:	4657      	mov	r7, sl
 8000b58:	4307      	orrs	r7, r0
 8000b5a:	4660      	mov	r0, ip
 8000b5c:	4082      	lsls	r2, r0
 8000b5e:	40cb      	lsrs	r3, r1
 8000b60:	1e50      	subs	r0, r2, #1
 8000b62:	4182      	sbcs	r2, r0
 8000b64:	1af6      	subs	r6, r6, r3
 8000b66:	4317      	orrs	r7, r2
 8000b68:	464b      	mov	r3, r9
 8000b6a:	1bdf      	subs	r7, r3, r7
 8000b6c:	45b9      	cmp	r9, r7
 8000b6e:	4180      	sbcs	r0, r0
 8000b70:	4240      	negs	r0, r0
 8000b72:	1a36      	subs	r6, r6, r0
 8000b74:	0233      	lsls	r3, r6, #8
 8000b76:	d400      	bmi.n	8000b7a <__aeabi_dadd+0xaa>
 8000b78:	e0ff      	b.n	8000d7a <__aeabi_dadd+0x2aa>
 8000b7a:	0276      	lsls	r6, r6, #9
 8000b7c:	0a76      	lsrs	r6, r6, #9
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d100      	bne.n	8000b84 <__aeabi_dadd+0xb4>
 8000b82:	e13c      	b.n	8000dfe <__aeabi_dadd+0x32e>
 8000b84:	0030      	movs	r0, r6
 8000b86:	f002 f80d 	bl	8002ba4 <__clzsi2>
 8000b8a:	0003      	movs	r3, r0
 8000b8c:	3b08      	subs	r3, #8
 8000b8e:	2120      	movs	r1, #32
 8000b90:	0038      	movs	r0, r7
 8000b92:	1aca      	subs	r2, r1, r3
 8000b94:	40d0      	lsrs	r0, r2
 8000b96:	409e      	lsls	r6, r3
 8000b98:	0002      	movs	r2, r0
 8000b9a:	409f      	lsls	r7, r3
 8000b9c:	4332      	orrs	r2, r6
 8000b9e:	429c      	cmp	r4, r3
 8000ba0:	dd00      	ble.n	8000ba4 <__aeabi_dadd+0xd4>
 8000ba2:	e1a6      	b.n	8000ef2 <__aeabi_dadd+0x422>
 8000ba4:	1b18      	subs	r0, r3, r4
 8000ba6:	3001      	adds	r0, #1
 8000ba8:	1a09      	subs	r1, r1, r0
 8000baa:	003e      	movs	r6, r7
 8000bac:	408f      	lsls	r7, r1
 8000bae:	40c6      	lsrs	r6, r0
 8000bb0:	1e7b      	subs	r3, r7, #1
 8000bb2:	419f      	sbcs	r7, r3
 8000bb4:	0013      	movs	r3, r2
 8000bb6:	408b      	lsls	r3, r1
 8000bb8:	4337      	orrs	r7, r6
 8000bba:	431f      	orrs	r7, r3
 8000bbc:	40c2      	lsrs	r2, r0
 8000bbe:	003b      	movs	r3, r7
 8000bc0:	0016      	movs	r6, r2
 8000bc2:	2400      	movs	r4, #0
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	d100      	bne.n	8000bca <__aeabi_dadd+0xfa>
 8000bc8:	e1df      	b.n	8000f8a <__aeabi_dadd+0x4ba>
 8000bca:	077b      	lsls	r3, r7, #29
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_dadd+0x100>
 8000bce:	e332      	b.n	8001236 <__aeabi_dadd+0x766>
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	003a      	movs	r2, r7
 8000bd4:	403b      	ands	r3, r7
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	d004      	beq.n	8000be4 <__aeabi_dadd+0x114>
 8000bda:	1d3a      	adds	r2, r7, #4
 8000bdc:	42ba      	cmp	r2, r7
 8000bde:	41bf      	sbcs	r7, r7
 8000be0:	427f      	negs	r7, r7
 8000be2:	19f6      	adds	r6, r6, r7
 8000be4:	0233      	lsls	r3, r6, #8
 8000be6:	d400      	bmi.n	8000bea <__aeabi_dadd+0x11a>
 8000be8:	e323      	b.n	8001232 <__aeabi_dadd+0x762>
 8000bea:	4b9c      	ldr	r3, [pc, #624]	@ (8000e5c <__aeabi_dadd+0x38c>)
 8000bec:	3401      	adds	r4, #1
 8000bee:	429c      	cmp	r4, r3
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_dadd+0x124>
 8000bf2:	e0b4      	b.n	8000d5e <__aeabi_dadd+0x28e>
 8000bf4:	4b9a      	ldr	r3, [pc, #616]	@ (8000e60 <__aeabi_dadd+0x390>)
 8000bf6:	0564      	lsls	r4, r4, #21
 8000bf8:	401e      	ands	r6, r3
 8000bfa:	0d64      	lsrs	r4, r4, #21
 8000bfc:	0777      	lsls	r7, r6, #29
 8000bfe:	08d2      	lsrs	r2, r2, #3
 8000c00:	0276      	lsls	r6, r6, #9
 8000c02:	4317      	orrs	r7, r2
 8000c04:	0b36      	lsrs	r6, r6, #12
 8000c06:	e0ac      	b.n	8000d62 <__aeabi_dadd+0x292>
 8000c08:	2900      	cmp	r1, #0
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_dadd+0x13e>
 8000c0c:	e07e      	b.n	8000d0c <__aeabi_dadd+0x23c>
 8000c0e:	4641      	mov	r1, r8
 8000c10:	1b09      	subs	r1, r1, r4
 8000c12:	2c00      	cmp	r4, #0
 8000c14:	d000      	beq.n	8000c18 <__aeabi_dadd+0x148>
 8000c16:	e160      	b.n	8000eda <__aeabi_dadd+0x40a>
 8000c18:	0034      	movs	r4, r6
 8000c1a:	4648      	mov	r0, r9
 8000c1c:	4304      	orrs	r4, r0
 8000c1e:	d100      	bne.n	8000c22 <__aeabi_dadd+0x152>
 8000c20:	e1c9      	b.n	8000fb6 <__aeabi_dadd+0x4e6>
 8000c22:	1e4c      	subs	r4, r1, #1
 8000c24:	2901      	cmp	r1, #1
 8000c26:	d100      	bne.n	8000c2a <__aeabi_dadd+0x15a>
 8000c28:	e22e      	b.n	8001088 <__aeabi_dadd+0x5b8>
 8000c2a:	4d8c      	ldr	r5, [pc, #560]	@ (8000e5c <__aeabi_dadd+0x38c>)
 8000c2c:	42a9      	cmp	r1, r5
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_dadd+0x162>
 8000c30:	e224      	b.n	800107c <__aeabi_dadd+0x5ac>
 8000c32:	2701      	movs	r7, #1
 8000c34:	2c38      	cmp	r4, #56	@ 0x38
 8000c36:	dc11      	bgt.n	8000c5c <__aeabi_dadd+0x18c>
 8000c38:	0021      	movs	r1, r4
 8000c3a:	291f      	cmp	r1, #31
 8000c3c:	dd00      	ble.n	8000c40 <__aeabi_dadd+0x170>
 8000c3e:	e20b      	b.n	8001058 <__aeabi_dadd+0x588>
 8000c40:	2420      	movs	r4, #32
 8000c42:	0037      	movs	r7, r6
 8000c44:	4648      	mov	r0, r9
 8000c46:	1a64      	subs	r4, r4, r1
 8000c48:	40a7      	lsls	r7, r4
 8000c4a:	40c8      	lsrs	r0, r1
 8000c4c:	4307      	orrs	r7, r0
 8000c4e:	4648      	mov	r0, r9
 8000c50:	40a0      	lsls	r0, r4
 8000c52:	40ce      	lsrs	r6, r1
 8000c54:	1e44      	subs	r4, r0, #1
 8000c56:	41a0      	sbcs	r0, r4
 8000c58:	1b9b      	subs	r3, r3, r6
 8000c5a:	4307      	orrs	r7, r0
 8000c5c:	1bd7      	subs	r7, r2, r7
 8000c5e:	42ba      	cmp	r2, r7
 8000c60:	4192      	sbcs	r2, r2
 8000c62:	4252      	negs	r2, r2
 8000c64:	4665      	mov	r5, ip
 8000c66:	4644      	mov	r4, r8
 8000c68:	1a9e      	subs	r6, r3, r2
 8000c6a:	e783      	b.n	8000b74 <__aeabi_dadd+0xa4>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	dc00      	bgt.n	8000c72 <__aeabi_dadd+0x1a2>
 8000c70:	e09c      	b.n	8000dac <__aeabi_dadd+0x2dc>
 8000c72:	4647      	mov	r7, r8
 8000c74:	2f00      	cmp	r7, #0
 8000c76:	d167      	bne.n	8000d48 <__aeabi_dadd+0x278>
 8000c78:	001f      	movs	r7, r3
 8000c7a:	4317      	orrs	r7, r2
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_dadd+0x1b0>
 8000c7e:	e0e4      	b.n	8000e4a <__aeabi_dadd+0x37a>
 8000c80:	1e48      	subs	r0, r1, #1
 8000c82:	2901      	cmp	r1, #1
 8000c84:	d100      	bne.n	8000c88 <__aeabi_dadd+0x1b8>
 8000c86:	e19b      	b.n	8000fc0 <__aeabi_dadd+0x4f0>
 8000c88:	4f74      	ldr	r7, [pc, #464]	@ (8000e5c <__aeabi_dadd+0x38c>)
 8000c8a:	42b9      	cmp	r1, r7
 8000c8c:	d100      	bne.n	8000c90 <__aeabi_dadd+0x1c0>
 8000c8e:	e0eb      	b.n	8000e68 <__aeabi_dadd+0x398>
 8000c90:	2701      	movs	r7, #1
 8000c92:	0001      	movs	r1, r0
 8000c94:	2838      	cmp	r0, #56	@ 0x38
 8000c96:	dc11      	bgt.n	8000cbc <__aeabi_dadd+0x1ec>
 8000c98:	291f      	cmp	r1, #31
 8000c9a:	dd00      	ble.n	8000c9e <__aeabi_dadd+0x1ce>
 8000c9c:	e1c7      	b.n	800102e <__aeabi_dadd+0x55e>
 8000c9e:	2720      	movs	r7, #32
 8000ca0:	1a78      	subs	r0, r7, r1
 8000ca2:	001f      	movs	r7, r3
 8000ca4:	4684      	mov	ip, r0
 8000ca6:	4087      	lsls	r7, r0
 8000ca8:	0010      	movs	r0, r2
 8000caa:	40c8      	lsrs	r0, r1
 8000cac:	4307      	orrs	r7, r0
 8000cae:	4660      	mov	r0, ip
 8000cb0:	4082      	lsls	r2, r0
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	1e50      	subs	r0, r2, #1
 8000cb6:	4182      	sbcs	r2, r0
 8000cb8:	18f6      	adds	r6, r6, r3
 8000cba:	4317      	orrs	r7, r2
 8000cbc:	444f      	add	r7, r9
 8000cbe:	454f      	cmp	r7, r9
 8000cc0:	4180      	sbcs	r0, r0
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	1836      	adds	r6, r6, r0
 8000cc6:	0233      	lsls	r3, r6, #8
 8000cc8:	d557      	bpl.n	8000d7a <__aeabi_dadd+0x2aa>
 8000cca:	4b64      	ldr	r3, [pc, #400]	@ (8000e5c <__aeabi_dadd+0x38c>)
 8000ccc:	3401      	adds	r4, #1
 8000cce:	429c      	cmp	r4, r3
 8000cd0:	d045      	beq.n	8000d5e <__aeabi_dadd+0x28e>
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	4b62      	ldr	r3, [pc, #392]	@ (8000e60 <__aeabi_dadd+0x390>)
 8000cd6:	087a      	lsrs	r2, r7, #1
 8000cd8:	401e      	ands	r6, r3
 8000cda:	4039      	ands	r1, r7
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	07f7      	lsls	r7, r6, #31
 8000ce0:	4317      	orrs	r7, r2
 8000ce2:	0876      	lsrs	r6, r6, #1
 8000ce4:	e771      	b.n	8000bca <__aeabi_dadd+0xfa>
 8000ce6:	001f      	movs	r7, r3
 8000ce8:	4317      	orrs	r7, r2
 8000cea:	d100      	bne.n	8000cee <__aeabi_dadd+0x21e>
 8000cec:	e0ad      	b.n	8000e4a <__aeabi_dadd+0x37a>
 8000cee:	1e4f      	subs	r7, r1, #1
 8000cf0:	46bc      	mov	ip, r7
 8000cf2:	2901      	cmp	r1, #1
 8000cf4:	d100      	bne.n	8000cf8 <__aeabi_dadd+0x228>
 8000cf6:	e182      	b.n	8000ffe <__aeabi_dadd+0x52e>
 8000cf8:	4f58      	ldr	r7, [pc, #352]	@ (8000e5c <__aeabi_dadd+0x38c>)
 8000cfa:	42b9      	cmp	r1, r7
 8000cfc:	d100      	bne.n	8000d00 <__aeabi_dadd+0x230>
 8000cfe:	e190      	b.n	8001022 <__aeabi_dadd+0x552>
 8000d00:	4661      	mov	r1, ip
 8000d02:	2701      	movs	r7, #1
 8000d04:	2938      	cmp	r1, #56	@ 0x38
 8000d06:	dd00      	ble.n	8000d0a <__aeabi_dadd+0x23a>
 8000d08:	e72e      	b.n	8000b68 <__aeabi_dadd+0x98>
 8000d0a:	e718      	b.n	8000b3e <__aeabi_dadd+0x6e>
 8000d0c:	4f55      	ldr	r7, [pc, #340]	@ (8000e64 <__aeabi_dadd+0x394>)
 8000d0e:	1c61      	adds	r1, r4, #1
 8000d10:	4239      	tst	r1, r7
 8000d12:	d000      	beq.n	8000d16 <__aeabi_dadd+0x246>
 8000d14:	e0d0      	b.n	8000eb8 <__aeabi_dadd+0x3e8>
 8000d16:	0031      	movs	r1, r6
 8000d18:	4648      	mov	r0, r9
 8000d1a:	001f      	movs	r7, r3
 8000d1c:	4301      	orrs	r1, r0
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	2c00      	cmp	r4, #0
 8000d22:	d000      	beq.n	8000d26 <__aeabi_dadd+0x256>
 8000d24:	e13d      	b.n	8000fa2 <__aeabi_dadd+0x4d2>
 8000d26:	2900      	cmp	r1, #0
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dadd+0x25c>
 8000d2a:	e1bc      	b.n	80010a6 <__aeabi_dadd+0x5d6>
 8000d2c:	2f00      	cmp	r7, #0
 8000d2e:	d000      	beq.n	8000d32 <__aeabi_dadd+0x262>
 8000d30:	e1bf      	b.n	80010b2 <__aeabi_dadd+0x5e2>
 8000d32:	464b      	mov	r3, r9
 8000d34:	2100      	movs	r1, #0
 8000d36:	08d8      	lsrs	r0, r3, #3
 8000d38:	0777      	lsls	r7, r6, #29
 8000d3a:	4307      	orrs	r7, r0
 8000d3c:	08f0      	lsrs	r0, r6, #3
 8000d3e:	0306      	lsls	r6, r0, #12
 8000d40:	054c      	lsls	r4, r1, #21
 8000d42:	0b36      	lsrs	r6, r6, #12
 8000d44:	0d64      	lsrs	r4, r4, #21
 8000d46:	e00c      	b.n	8000d62 <__aeabi_dadd+0x292>
 8000d48:	4f44      	ldr	r7, [pc, #272]	@ (8000e5c <__aeabi_dadd+0x38c>)
 8000d4a:	42bc      	cmp	r4, r7
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_dadd+0x280>
 8000d4e:	e08b      	b.n	8000e68 <__aeabi_dadd+0x398>
 8000d50:	2701      	movs	r7, #1
 8000d52:	2938      	cmp	r1, #56	@ 0x38
 8000d54:	dcb2      	bgt.n	8000cbc <__aeabi_dadd+0x1ec>
 8000d56:	2780      	movs	r7, #128	@ 0x80
 8000d58:	043f      	lsls	r7, r7, #16
 8000d5a:	433b      	orrs	r3, r7
 8000d5c:	e79c      	b.n	8000c98 <__aeabi_dadd+0x1c8>
 8000d5e:	2600      	movs	r6, #0
 8000d60:	2700      	movs	r7, #0
 8000d62:	0524      	lsls	r4, r4, #20
 8000d64:	4334      	orrs	r4, r6
 8000d66:	07ed      	lsls	r5, r5, #31
 8000d68:	432c      	orrs	r4, r5
 8000d6a:	0038      	movs	r0, r7
 8000d6c:	0021      	movs	r1, r4
 8000d6e:	b002      	add	sp, #8
 8000d70:	bce0      	pop	{r5, r6, r7}
 8000d72:	46ba      	mov	sl, r7
 8000d74:	46b1      	mov	r9, r6
 8000d76:	46a8      	mov	r8, r5
 8000d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d7a:	077b      	lsls	r3, r7, #29
 8000d7c:	d004      	beq.n	8000d88 <__aeabi_dadd+0x2b8>
 8000d7e:	230f      	movs	r3, #15
 8000d80:	403b      	ands	r3, r7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	d000      	beq.n	8000d88 <__aeabi_dadd+0x2b8>
 8000d86:	e728      	b.n	8000bda <__aeabi_dadd+0x10a>
 8000d88:	08f8      	lsrs	r0, r7, #3
 8000d8a:	4b34      	ldr	r3, [pc, #208]	@ (8000e5c <__aeabi_dadd+0x38c>)
 8000d8c:	0777      	lsls	r7, r6, #29
 8000d8e:	4307      	orrs	r7, r0
 8000d90:	08f0      	lsrs	r0, r6, #3
 8000d92:	429c      	cmp	r4, r3
 8000d94:	d000      	beq.n	8000d98 <__aeabi_dadd+0x2c8>
 8000d96:	e24a      	b.n	800122e <__aeabi_dadd+0x75e>
 8000d98:	003b      	movs	r3, r7
 8000d9a:	4303      	orrs	r3, r0
 8000d9c:	d059      	beq.n	8000e52 <__aeabi_dadd+0x382>
 8000d9e:	2680      	movs	r6, #128	@ 0x80
 8000da0:	0336      	lsls	r6, r6, #12
 8000da2:	4306      	orrs	r6, r0
 8000da4:	0336      	lsls	r6, r6, #12
 8000da6:	4c2d      	ldr	r4, [pc, #180]	@ (8000e5c <__aeabi_dadd+0x38c>)
 8000da8:	0b36      	lsrs	r6, r6, #12
 8000daa:	e7da      	b.n	8000d62 <__aeabi_dadd+0x292>
 8000dac:	2900      	cmp	r1, #0
 8000dae:	d061      	beq.n	8000e74 <__aeabi_dadd+0x3a4>
 8000db0:	4641      	mov	r1, r8
 8000db2:	1b09      	subs	r1, r1, r4
 8000db4:	2c00      	cmp	r4, #0
 8000db6:	d100      	bne.n	8000dba <__aeabi_dadd+0x2ea>
 8000db8:	e0b9      	b.n	8000f2e <__aeabi_dadd+0x45e>
 8000dba:	4c28      	ldr	r4, [pc, #160]	@ (8000e5c <__aeabi_dadd+0x38c>)
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	d100      	bne.n	8000dc2 <__aeabi_dadd+0x2f2>
 8000dc0:	e1a5      	b.n	800110e <__aeabi_dadd+0x63e>
 8000dc2:	2701      	movs	r7, #1
 8000dc4:	2938      	cmp	r1, #56	@ 0x38
 8000dc6:	dc13      	bgt.n	8000df0 <__aeabi_dadd+0x320>
 8000dc8:	2480      	movs	r4, #128	@ 0x80
 8000dca:	0424      	lsls	r4, r4, #16
 8000dcc:	4326      	orrs	r6, r4
 8000dce:	291f      	cmp	r1, #31
 8000dd0:	dd00      	ble.n	8000dd4 <__aeabi_dadd+0x304>
 8000dd2:	e1c8      	b.n	8001166 <__aeabi_dadd+0x696>
 8000dd4:	2420      	movs	r4, #32
 8000dd6:	0037      	movs	r7, r6
 8000dd8:	4648      	mov	r0, r9
 8000dda:	1a64      	subs	r4, r4, r1
 8000ddc:	40a7      	lsls	r7, r4
 8000dde:	40c8      	lsrs	r0, r1
 8000de0:	4307      	orrs	r7, r0
 8000de2:	4648      	mov	r0, r9
 8000de4:	40a0      	lsls	r0, r4
 8000de6:	40ce      	lsrs	r6, r1
 8000de8:	1e44      	subs	r4, r0, #1
 8000dea:	41a0      	sbcs	r0, r4
 8000dec:	199b      	adds	r3, r3, r6
 8000dee:	4307      	orrs	r7, r0
 8000df0:	18bf      	adds	r7, r7, r2
 8000df2:	4297      	cmp	r7, r2
 8000df4:	4192      	sbcs	r2, r2
 8000df6:	4252      	negs	r2, r2
 8000df8:	4644      	mov	r4, r8
 8000dfa:	18d6      	adds	r6, r2, r3
 8000dfc:	e763      	b.n	8000cc6 <__aeabi_dadd+0x1f6>
 8000dfe:	0038      	movs	r0, r7
 8000e00:	f001 fed0 	bl	8002ba4 <__clzsi2>
 8000e04:	0003      	movs	r3, r0
 8000e06:	3318      	adds	r3, #24
 8000e08:	2b1f      	cmp	r3, #31
 8000e0a:	dc00      	bgt.n	8000e0e <__aeabi_dadd+0x33e>
 8000e0c:	e6bf      	b.n	8000b8e <__aeabi_dadd+0xbe>
 8000e0e:	003a      	movs	r2, r7
 8000e10:	3808      	subs	r0, #8
 8000e12:	4082      	lsls	r2, r0
 8000e14:	429c      	cmp	r4, r3
 8000e16:	dd00      	ble.n	8000e1a <__aeabi_dadd+0x34a>
 8000e18:	e083      	b.n	8000f22 <__aeabi_dadd+0x452>
 8000e1a:	1b1b      	subs	r3, r3, r4
 8000e1c:	1c58      	adds	r0, r3, #1
 8000e1e:	281f      	cmp	r0, #31
 8000e20:	dc00      	bgt.n	8000e24 <__aeabi_dadd+0x354>
 8000e22:	e1b4      	b.n	800118e <__aeabi_dadd+0x6be>
 8000e24:	0017      	movs	r7, r2
 8000e26:	3b1f      	subs	r3, #31
 8000e28:	40df      	lsrs	r7, r3
 8000e2a:	2820      	cmp	r0, #32
 8000e2c:	d005      	beq.n	8000e3a <__aeabi_dadd+0x36a>
 8000e2e:	2340      	movs	r3, #64	@ 0x40
 8000e30:	1a1b      	subs	r3, r3, r0
 8000e32:	409a      	lsls	r2, r3
 8000e34:	1e53      	subs	r3, r2, #1
 8000e36:	419a      	sbcs	r2, r3
 8000e38:	4317      	orrs	r7, r2
 8000e3a:	2400      	movs	r4, #0
 8000e3c:	2f00      	cmp	r7, #0
 8000e3e:	d00a      	beq.n	8000e56 <__aeabi_dadd+0x386>
 8000e40:	077b      	lsls	r3, r7, #29
 8000e42:	d000      	beq.n	8000e46 <__aeabi_dadd+0x376>
 8000e44:	e6c4      	b.n	8000bd0 <__aeabi_dadd+0x100>
 8000e46:	0026      	movs	r6, r4
 8000e48:	e79e      	b.n	8000d88 <__aeabi_dadd+0x2b8>
 8000e4a:	464b      	mov	r3, r9
 8000e4c:	000c      	movs	r4, r1
 8000e4e:	08d8      	lsrs	r0, r3, #3
 8000e50:	e79b      	b.n	8000d8a <__aeabi_dadd+0x2ba>
 8000e52:	2700      	movs	r7, #0
 8000e54:	4c01      	ldr	r4, [pc, #4]	@ (8000e5c <__aeabi_dadd+0x38c>)
 8000e56:	2600      	movs	r6, #0
 8000e58:	e783      	b.n	8000d62 <__aeabi_dadd+0x292>
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	000007ff 	.word	0x000007ff
 8000e60:	ff7fffff 	.word	0xff7fffff
 8000e64:	000007fe 	.word	0x000007fe
 8000e68:	464b      	mov	r3, r9
 8000e6a:	0777      	lsls	r7, r6, #29
 8000e6c:	08d8      	lsrs	r0, r3, #3
 8000e6e:	4307      	orrs	r7, r0
 8000e70:	08f0      	lsrs	r0, r6, #3
 8000e72:	e791      	b.n	8000d98 <__aeabi_dadd+0x2c8>
 8000e74:	4fcd      	ldr	r7, [pc, #820]	@ (80011ac <__aeabi_dadd+0x6dc>)
 8000e76:	1c61      	adds	r1, r4, #1
 8000e78:	4239      	tst	r1, r7
 8000e7a:	d16b      	bne.n	8000f54 <__aeabi_dadd+0x484>
 8000e7c:	0031      	movs	r1, r6
 8000e7e:	4648      	mov	r0, r9
 8000e80:	4301      	orrs	r1, r0
 8000e82:	2c00      	cmp	r4, #0
 8000e84:	d000      	beq.n	8000e88 <__aeabi_dadd+0x3b8>
 8000e86:	e14b      	b.n	8001120 <__aeabi_dadd+0x650>
 8000e88:	001f      	movs	r7, r3
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	2900      	cmp	r1, #0
 8000e8e:	d100      	bne.n	8000e92 <__aeabi_dadd+0x3c2>
 8000e90:	e181      	b.n	8001196 <__aeabi_dadd+0x6c6>
 8000e92:	2f00      	cmp	r7, #0
 8000e94:	d100      	bne.n	8000e98 <__aeabi_dadd+0x3c8>
 8000e96:	e74c      	b.n	8000d32 <__aeabi_dadd+0x262>
 8000e98:	444a      	add	r2, r9
 8000e9a:	454a      	cmp	r2, r9
 8000e9c:	4180      	sbcs	r0, r0
 8000e9e:	18f6      	adds	r6, r6, r3
 8000ea0:	4240      	negs	r0, r0
 8000ea2:	1836      	adds	r6, r6, r0
 8000ea4:	0233      	lsls	r3, r6, #8
 8000ea6:	d500      	bpl.n	8000eaa <__aeabi_dadd+0x3da>
 8000ea8:	e1b0      	b.n	800120c <__aeabi_dadd+0x73c>
 8000eaa:	0017      	movs	r7, r2
 8000eac:	4691      	mov	r9, r2
 8000eae:	4337      	orrs	r7, r6
 8000eb0:	d000      	beq.n	8000eb4 <__aeabi_dadd+0x3e4>
 8000eb2:	e73e      	b.n	8000d32 <__aeabi_dadd+0x262>
 8000eb4:	2600      	movs	r6, #0
 8000eb6:	e754      	b.n	8000d62 <__aeabi_dadd+0x292>
 8000eb8:	4649      	mov	r1, r9
 8000eba:	1a89      	subs	r1, r1, r2
 8000ebc:	4688      	mov	r8, r1
 8000ebe:	45c1      	cmp	r9, r8
 8000ec0:	41bf      	sbcs	r7, r7
 8000ec2:	1af1      	subs	r1, r6, r3
 8000ec4:	427f      	negs	r7, r7
 8000ec6:	1bc9      	subs	r1, r1, r7
 8000ec8:	020f      	lsls	r7, r1, #8
 8000eca:	d461      	bmi.n	8000f90 <__aeabi_dadd+0x4c0>
 8000ecc:	4647      	mov	r7, r8
 8000ece:	430f      	orrs	r7, r1
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_dadd+0x404>
 8000ed2:	e0bd      	b.n	8001050 <__aeabi_dadd+0x580>
 8000ed4:	000e      	movs	r6, r1
 8000ed6:	4647      	mov	r7, r8
 8000ed8:	e651      	b.n	8000b7e <__aeabi_dadd+0xae>
 8000eda:	4cb5      	ldr	r4, [pc, #724]	@ (80011b0 <__aeabi_dadd+0x6e0>)
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dadd+0x412>
 8000ee0:	e100      	b.n	80010e4 <__aeabi_dadd+0x614>
 8000ee2:	2701      	movs	r7, #1
 8000ee4:	2938      	cmp	r1, #56	@ 0x38
 8000ee6:	dd00      	ble.n	8000eea <__aeabi_dadd+0x41a>
 8000ee8:	e6b8      	b.n	8000c5c <__aeabi_dadd+0x18c>
 8000eea:	2480      	movs	r4, #128	@ 0x80
 8000eec:	0424      	lsls	r4, r4, #16
 8000eee:	4326      	orrs	r6, r4
 8000ef0:	e6a3      	b.n	8000c3a <__aeabi_dadd+0x16a>
 8000ef2:	4eb0      	ldr	r6, [pc, #704]	@ (80011b4 <__aeabi_dadd+0x6e4>)
 8000ef4:	1ae4      	subs	r4, r4, r3
 8000ef6:	4016      	ands	r6, r2
 8000ef8:	077b      	lsls	r3, r7, #29
 8000efa:	d000      	beq.n	8000efe <__aeabi_dadd+0x42e>
 8000efc:	e73f      	b.n	8000d7e <__aeabi_dadd+0x2ae>
 8000efe:	e743      	b.n	8000d88 <__aeabi_dadd+0x2b8>
 8000f00:	000f      	movs	r7, r1
 8000f02:	0018      	movs	r0, r3
 8000f04:	3f20      	subs	r7, #32
 8000f06:	40f8      	lsrs	r0, r7
 8000f08:	4684      	mov	ip, r0
 8000f0a:	2920      	cmp	r1, #32
 8000f0c:	d003      	beq.n	8000f16 <__aeabi_dadd+0x446>
 8000f0e:	2740      	movs	r7, #64	@ 0x40
 8000f10:	1a79      	subs	r1, r7, r1
 8000f12:	408b      	lsls	r3, r1
 8000f14:	431a      	orrs	r2, r3
 8000f16:	1e53      	subs	r3, r2, #1
 8000f18:	419a      	sbcs	r2, r3
 8000f1a:	4663      	mov	r3, ip
 8000f1c:	0017      	movs	r7, r2
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	e622      	b.n	8000b68 <__aeabi_dadd+0x98>
 8000f22:	48a4      	ldr	r0, [pc, #656]	@ (80011b4 <__aeabi_dadd+0x6e4>)
 8000f24:	1ae1      	subs	r1, r4, r3
 8000f26:	4010      	ands	r0, r2
 8000f28:	0747      	lsls	r7, r0, #29
 8000f2a:	08c0      	lsrs	r0, r0, #3
 8000f2c:	e707      	b.n	8000d3e <__aeabi_dadd+0x26e>
 8000f2e:	0034      	movs	r4, r6
 8000f30:	4648      	mov	r0, r9
 8000f32:	4304      	orrs	r4, r0
 8000f34:	d100      	bne.n	8000f38 <__aeabi_dadd+0x468>
 8000f36:	e0fa      	b.n	800112e <__aeabi_dadd+0x65e>
 8000f38:	1e4c      	subs	r4, r1, #1
 8000f3a:	2901      	cmp	r1, #1
 8000f3c:	d100      	bne.n	8000f40 <__aeabi_dadd+0x470>
 8000f3e:	e0d7      	b.n	80010f0 <__aeabi_dadd+0x620>
 8000f40:	4f9b      	ldr	r7, [pc, #620]	@ (80011b0 <__aeabi_dadd+0x6e0>)
 8000f42:	42b9      	cmp	r1, r7
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dadd+0x478>
 8000f46:	e0e2      	b.n	800110e <__aeabi_dadd+0x63e>
 8000f48:	2701      	movs	r7, #1
 8000f4a:	2c38      	cmp	r4, #56	@ 0x38
 8000f4c:	dd00      	ble.n	8000f50 <__aeabi_dadd+0x480>
 8000f4e:	e74f      	b.n	8000df0 <__aeabi_dadd+0x320>
 8000f50:	0021      	movs	r1, r4
 8000f52:	e73c      	b.n	8000dce <__aeabi_dadd+0x2fe>
 8000f54:	4c96      	ldr	r4, [pc, #600]	@ (80011b0 <__aeabi_dadd+0x6e0>)
 8000f56:	42a1      	cmp	r1, r4
 8000f58:	d100      	bne.n	8000f5c <__aeabi_dadd+0x48c>
 8000f5a:	e0dd      	b.n	8001118 <__aeabi_dadd+0x648>
 8000f5c:	444a      	add	r2, r9
 8000f5e:	454a      	cmp	r2, r9
 8000f60:	4180      	sbcs	r0, r0
 8000f62:	18f3      	adds	r3, r6, r3
 8000f64:	4240      	negs	r0, r0
 8000f66:	1818      	adds	r0, r3, r0
 8000f68:	07c7      	lsls	r7, r0, #31
 8000f6a:	0852      	lsrs	r2, r2, #1
 8000f6c:	4317      	orrs	r7, r2
 8000f6e:	0846      	lsrs	r6, r0, #1
 8000f70:	0752      	lsls	r2, r2, #29
 8000f72:	d005      	beq.n	8000f80 <__aeabi_dadd+0x4b0>
 8000f74:	220f      	movs	r2, #15
 8000f76:	000c      	movs	r4, r1
 8000f78:	403a      	ands	r2, r7
 8000f7a:	2a04      	cmp	r2, #4
 8000f7c:	d000      	beq.n	8000f80 <__aeabi_dadd+0x4b0>
 8000f7e:	e62c      	b.n	8000bda <__aeabi_dadd+0x10a>
 8000f80:	0776      	lsls	r6, r6, #29
 8000f82:	08ff      	lsrs	r7, r7, #3
 8000f84:	4337      	orrs	r7, r6
 8000f86:	0900      	lsrs	r0, r0, #4
 8000f88:	e6d9      	b.n	8000d3e <__aeabi_dadd+0x26e>
 8000f8a:	2700      	movs	r7, #0
 8000f8c:	2600      	movs	r6, #0
 8000f8e:	e6e8      	b.n	8000d62 <__aeabi_dadd+0x292>
 8000f90:	4649      	mov	r1, r9
 8000f92:	1a57      	subs	r7, r2, r1
 8000f94:	42ba      	cmp	r2, r7
 8000f96:	4192      	sbcs	r2, r2
 8000f98:	1b9e      	subs	r6, r3, r6
 8000f9a:	4252      	negs	r2, r2
 8000f9c:	4665      	mov	r5, ip
 8000f9e:	1ab6      	subs	r6, r6, r2
 8000fa0:	e5ed      	b.n	8000b7e <__aeabi_dadd+0xae>
 8000fa2:	2900      	cmp	r1, #0
 8000fa4:	d000      	beq.n	8000fa8 <__aeabi_dadd+0x4d8>
 8000fa6:	e0c6      	b.n	8001136 <__aeabi_dadd+0x666>
 8000fa8:	2f00      	cmp	r7, #0
 8000faa:	d167      	bne.n	800107c <__aeabi_dadd+0x5ac>
 8000fac:	2680      	movs	r6, #128	@ 0x80
 8000fae:	2500      	movs	r5, #0
 8000fb0:	4c7f      	ldr	r4, [pc, #508]	@ (80011b0 <__aeabi_dadd+0x6e0>)
 8000fb2:	0336      	lsls	r6, r6, #12
 8000fb4:	e6d5      	b.n	8000d62 <__aeabi_dadd+0x292>
 8000fb6:	4665      	mov	r5, ip
 8000fb8:	000c      	movs	r4, r1
 8000fba:	001e      	movs	r6, r3
 8000fbc:	08d0      	lsrs	r0, r2, #3
 8000fbe:	e6e4      	b.n	8000d8a <__aeabi_dadd+0x2ba>
 8000fc0:	444a      	add	r2, r9
 8000fc2:	454a      	cmp	r2, r9
 8000fc4:	4180      	sbcs	r0, r0
 8000fc6:	18f3      	adds	r3, r6, r3
 8000fc8:	4240      	negs	r0, r0
 8000fca:	1818      	adds	r0, r3, r0
 8000fcc:	0011      	movs	r1, r2
 8000fce:	0203      	lsls	r3, r0, #8
 8000fd0:	d400      	bmi.n	8000fd4 <__aeabi_dadd+0x504>
 8000fd2:	e096      	b.n	8001102 <__aeabi_dadd+0x632>
 8000fd4:	4b77      	ldr	r3, [pc, #476]	@ (80011b4 <__aeabi_dadd+0x6e4>)
 8000fd6:	0849      	lsrs	r1, r1, #1
 8000fd8:	4018      	ands	r0, r3
 8000fda:	07c3      	lsls	r3, r0, #31
 8000fdc:	430b      	orrs	r3, r1
 8000fde:	0844      	lsrs	r4, r0, #1
 8000fe0:	0749      	lsls	r1, r1, #29
 8000fe2:	d100      	bne.n	8000fe6 <__aeabi_dadd+0x516>
 8000fe4:	e129      	b.n	800123a <__aeabi_dadd+0x76a>
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	401a      	ands	r2, r3
 8000fea:	2a04      	cmp	r2, #4
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_dadd+0x520>
 8000fee:	e0ea      	b.n	80011c6 <__aeabi_dadd+0x6f6>
 8000ff0:	1d1f      	adds	r7, r3, #4
 8000ff2:	429f      	cmp	r7, r3
 8000ff4:	41b6      	sbcs	r6, r6
 8000ff6:	4276      	negs	r6, r6
 8000ff8:	1936      	adds	r6, r6, r4
 8000ffa:	2402      	movs	r4, #2
 8000ffc:	e6c4      	b.n	8000d88 <__aeabi_dadd+0x2b8>
 8000ffe:	4649      	mov	r1, r9
 8001000:	1a8f      	subs	r7, r1, r2
 8001002:	45b9      	cmp	r9, r7
 8001004:	4180      	sbcs	r0, r0
 8001006:	1af6      	subs	r6, r6, r3
 8001008:	4240      	negs	r0, r0
 800100a:	1a36      	subs	r6, r6, r0
 800100c:	0233      	lsls	r3, r6, #8
 800100e:	d406      	bmi.n	800101e <__aeabi_dadd+0x54e>
 8001010:	0773      	lsls	r3, r6, #29
 8001012:	08ff      	lsrs	r7, r7, #3
 8001014:	2101      	movs	r1, #1
 8001016:	431f      	orrs	r7, r3
 8001018:	08f0      	lsrs	r0, r6, #3
 800101a:	e690      	b.n	8000d3e <__aeabi_dadd+0x26e>
 800101c:	4665      	mov	r5, ip
 800101e:	2401      	movs	r4, #1
 8001020:	e5ab      	b.n	8000b7a <__aeabi_dadd+0xaa>
 8001022:	464b      	mov	r3, r9
 8001024:	0777      	lsls	r7, r6, #29
 8001026:	08d8      	lsrs	r0, r3, #3
 8001028:	4307      	orrs	r7, r0
 800102a:	08f0      	lsrs	r0, r6, #3
 800102c:	e6b4      	b.n	8000d98 <__aeabi_dadd+0x2c8>
 800102e:	000f      	movs	r7, r1
 8001030:	0018      	movs	r0, r3
 8001032:	3f20      	subs	r7, #32
 8001034:	40f8      	lsrs	r0, r7
 8001036:	4684      	mov	ip, r0
 8001038:	2920      	cmp	r1, #32
 800103a:	d003      	beq.n	8001044 <__aeabi_dadd+0x574>
 800103c:	2740      	movs	r7, #64	@ 0x40
 800103e:	1a79      	subs	r1, r7, r1
 8001040:	408b      	lsls	r3, r1
 8001042:	431a      	orrs	r2, r3
 8001044:	1e53      	subs	r3, r2, #1
 8001046:	419a      	sbcs	r2, r3
 8001048:	4663      	mov	r3, ip
 800104a:	0017      	movs	r7, r2
 800104c:	431f      	orrs	r7, r3
 800104e:	e635      	b.n	8000cbc <__aeabi_dadd+0x1ec>
 8001050:	2500      	movs	r5, #0
 8001052:	2400      	movs	r4, #0
 8001054:	2600      	movs	r6, #0
 8001056:	e684      	b.n	8000d62 <__aeabi_dadd+0x292>
 8001058:	000c      	movs	r4, r1
 800105a:	0035      	movs	r5, r6
 800105c:	3c20      	subs	r4, #32
 800105e:	40e5      	lsrs	r5, r4
 8001060:	2920      	cmp	r1, #32
 8001062:	d005      	beq.n	8001070 <__aeabi_dadd+0x5a0>
 8001064:	2440      	movs	r4, #64	@ 0x40
 8001066:	1a61      	subs	r1, r4, r1
 8001068:	408e      	lsls	r6, r1
 800106a:	4649      	mov	r1, r9
 800106c:	4331      	orrs	r1, r6
 800106e:	4689      	mov	r9, r1
 8001070:	4648      	mov	r0, r9
 8001072:	1e41      	subs	r1, r0, #1
 8001074:	4188      	sbcs	r0, r1
 8001076:	0007      	movs	r7, r0
 8001078:	432f      	orrs	r7, r5
 800107a:	e5ef      	b.n	8000c5c <__aeabi_dadd+0x18c>
 800107c:	08d2      	lsrs	r2, r2, #3
 800107e:	075f      	lsls	r7, r3, #29
 8001080:	4665      	mov	r5, ip
 8001082:	4317      	orrs	r7, r2
 8001084:	08d8      	lsrs	r0, r3, #3
 8001086:	e687      	b.n	8000d98 <__aeabi_dadd+0x2c8>
 8001088:	1a17      	subs	r7, r2, r0
 800108a:	42ba      	cmp	r2, r7
 800108c:	4192      	sbcs	r2, r2
 800108e:	1b9e      	subs	r6, r3, r6
 8001090:	4252      	negs	r2, r2
 8001092:	1ab6      	subs	r6, r6, r2
 8001094:	0233      	lsls	r3, r6, #8
 8001096:	d4c1      	bmi.n	800101c <__aeabi_dadd+0x54c>
 8001098:	0773      	lsls	r3, r6, #29
 800109a:	08ff      	lsrs	r7, r7, #3
 800109c:	4665      	mov	r5, ip
 800109e:	2101      	movs	r1, #1
 80010a0:	431f      	orrs	r7, r3
 80010a2:	08f0      	lsrs	r0, r6, #3
 80010a4:	e64b      	b.n	8000d3e <__aeabi_dadd+0x26e>
 80010a6:	2f00      	cmp	r7, #0
 80010a8:	d07b      	beq.n	80011a2 <__aeabi_dadd+0x6d2>
 80010aa:	4665      	mov	r5, ip
 80010ac:	001e      	movs	r6, r3
 80010ae:	4691      	mov	r9, r2
 80010b0:	e63f      	b.n	8000d32 <__aeabi_dadd+0x262>
 80010b2:	1a81      	subs	r1, r0, r2
 80010b4:	4688      	mov	r8, r1
 80010b6:	45c1      	cmp	r9, r8
 80010b8:	41a4      	sbcs	r4, r4
 80010ba:	1af1      	subs	r1, r6, r3
 80010bc:	4264      	negs	r4, r4
 80010be:	1b09      	subs	r1, r1, r4
 80010c0:	2480      	movs	r4, #128	@ 0x80
 80010c2:	0424      	lsls	r4, r4, #16
 80010c4:	4221      	tst	r1, r4
 80010c6:	d077      	beq.n	80011b8 <__aeabi_dadd+0x6e8>
 80010c8:	1a10      	subs	r0, r2, r0
 80010ca:	4282      	cmp	r2, r0
 80010cc:	4192      	sbcs	r2, r2
 80010ce:	0007      	movs	r7, r0
 80010d0:	1b9e      	subs	r6, r3, r6
 80010d2:	4252      	negs	r2, r2
 80010d4:	1ab6      	subs	r6, r6, r2
 80010d6:	4337      	orrs	r7, r6
 80010d8:	d000      	beq.n	80010dc <__aeabi_dadd+0x60c>
 80010da:	e0a0      	b.n	800121e <__aeabi_dadd+0x74e>
 80010dc:	4665      	mov	r5, ip
 80010de:	2400      	movs	r4, #0
 80010e0:	2600      	movs	r6, #0
 80010e2:	e63e      	b.n	8000d62 <__aeabi_dadd+0x292>
 80010e4:	075f      	lsls	r7, r3, #29
 80010e6:	08d2      	lsrs	r2, r2, #3
 80010e8:	4665      	mov	r5, ip
 80010ea:	4317      	orrs	r7, r2
 80010ec:	08d8      	lsrs	r0, r3, #3
 80010ee:	e653      	b.n	8000d98 <__aeabi_dadd+0x2c8>
 80010f0:	1881      	adds	r1, r0, r2
 80010f2:	4291      	cmp	r1, r2
 80010f4:	4192      	sbcs	r2, r2
 80010f6:	18f0      	adds	r0, r6, r3
 80010f8:	4252      	negs	r2, r2
 80010fa:	1880      	adds	r0, r0, r2
 80010fc:	0203      	lsls	r3, r0, #8
 80010fe:	d500      	bpl.n	8001102 <__aeabi_dadd+0x632>
 8001100:	e768      	b.n	8000fd4 <__aeabi_dadd+0x504>
 8001102:	0747      	lsls	r7, r0, #29
 8001104:	08c9      	lsrs	r1, r1, #3
 8001106:	430f      	orrs	r7, r1
 8001108:	08c0      	lsrs	r0, r0, #3
 800110a:	2101      	movs	r1, #1
 800110c:	e617      	b.n	8000d3e <__aeabi_dadd+0x26e>
 800110e:	08d2      	lsrs	r2, r2, #3
 8001110:	075f      	lsls	r7, r3, #29
 8001112:	4317      	orrs	r7, r2
 8001114:	08d8      	lsrs	r0, r3, #3
 8001116:	e63f      	b.n	8000d98 <__aeabi_dadd+0x2c8>
 8001118:	000c      	movs	r4, r1
 800111a:	2600      	movs	r6, #0
 800111c:	2700      	movs	r7, #0
 800111e:	e620      	b.n	8000d62 <__aeabi_dadd+0x292>
 8001120:	2900      	cmp	r1, #0
 8001122:	d156      	bne.n	80011d2 <__aeabi_dadd+0x702>
 8001124:	075f      	lsls	r7, r3, #29
 8001126:	08d2      	lsrs	r2, r2, #3
 8001128:	4317      	orrs	r7, r2
 800112a:	08d8      	lsrs	r0, r3, #3
 800112c:	e634      	b.n	8000d98 <__aeabi_dadd+0x2c8>
 800112e:	000c      	movs	r4, r1
 8001130:	001e      	movs	r6, r3
 8001132:	08d0      	lsrs	r0, r2, #3
 8001134:	e629      	b.n	8000d8a <__aeabi_dadd+0x2ba>
 8001136:	08c1      	lsrs	r1, r0, #3
 8001138:	0770      	lsls	r0, r6, #29
 800113a:	4301      	orrs	r1, r0
 800113c:	08f0      	lsrs	r0, r6, #3
 800113e:	2f00      	cmp	r7, #0
 8001140:	d062      	beq.n	8001208 <__aeabi_dadd+0x738>
 8001142:	2480      	movs	r4, #128	@ 0x80
 8001144:	0324      	lsls	r4, r4, #12
 8001146:	4220      	tst	r0, r4
 8001148:	d007      	beq.n	800115a <__aeabi_dadd+0x68a>
 800114a:	08de      	lsrs	r6, r3, #3
 800114c:	4226      	tst	r6, r4
 800114e:	d104      	bne.n	800115a <__aeabi_dadd+0x68a>
 8001150:	4665      	mov	r5, ip
 8001152:	0030      	movs	r0, r6
 8001154:	08d1      	lsrs	r1, r2, #3
 8001156:	075b      	lsls	r3, r3, #29
 8001158:	4319      	orrs	r1, r3
 800115a:	0f4f      	lsrs	r7, r1, #29
 800115c:	00c9      	lsls	r1, r1, #3
 800115e:	08c9      	lsrs	r1, r1, #3
 8001160:	077f      	lsls	r7, r7, #29
 8001162:	430f      	orrs	r7, r1
 8001164:	e618      	b.n	8000d98 <__aeabi_dadd+0x2c8>
 8001166:	000c      	movs	r4, r1
 8001168:	0030      	movs	r0, r6
 800116a:	3c20      	subs	r4, #32
 800116c:	40e0      	lsrs	r0, r4
 800116e:	4684      	mov	ip, r0
 8001170:	2920      	cmp	r1, #32
 8001172:	d005      	beq.n	8001180 <__aeabi_dadd+0x6b0>
 8001174:	2440      	movs	r4, #64	@ 0x40
 8001176:	1a61      	subs	r1, r4, r1
 8001178:	408e      	lsls	r6, r1
 800117a:	4649      	mov	r1, r9
 800117c:	4331      	orrs	r1, r6
 800117e:	4689      	mov	r9, r1
 8001180:	4648      	mov	r0, r9
 8001182:	1e41      	subs	r1, r0, #1
 8001184:	4188      	sbcs	r0, r1
 8001186:	4661      	mov	r1, ip
 8001188:	0007      	movs	r7, r0
 800118a:	430f      	orrs	r7, r1
 800118c:	e630      	b.n	8000df0 <__aeabi_dadd+0x320>
 800118e:	2120      	movs	r1, #32
 8001190:	2700      	movs	r7, #0
 8001192:	1a09      	subs	r1, r1, r0
 8001194:	e50e      	b.n	8000bb4 <__aeabi_dadd+0xe4>
 8001196:	001e      	movs	r6, r3
 8001198:	2f00      	cmp	r7, #0
 800119a:	d000      	beq.n	800119e <__aeabi_dadd+0x6ce>
 800119c:	e522      	b.n	8000be4 <__aeabi_dadd+0x114>
 800119e:	2400      	movs	r4, #0
 80011a0:	e758      	b.n	8001054 <__aeabi_dadd+0x584>
 80011a2:	2500      	movs	r5, #0
 80011a4:	2400      	movs	r4, #0
 80011a6:	2600      	movs	r6, #0
 80011a8:	e5db      	b.n	8000d62 <__aeabi_dadd+0x292>
 80011aa:	46c0      	nop			@ (mov r8, r8)
 80011ac:	000007fe 	.word	0x000007fe
 80011b0:	000007ff 	.word	0x000007ff
 80011b4:	ff7fffff 	.word	0xff7fffff
 80011b8:	4647      	mov	r7, r8
 80011ba:	430f      	orrs	r7, r1
 80011bc:	d100      	bne.n	80011c0 <__aeabi_dadd+0x6f0>
 80011be:	e747      	b.n	8001050 <__aeabi_dadd+0x580>
 80011c0:	000e      	movs	r6, r1
 80011c2:	46c1      	mov	r9, r8
 80011c4:	e5b5      	b.n	8000d32 <__aeabi_dadd+0x262>
 80011c6:	08df      	lsrs	r7, r3, #3
 80011c8:	0764      	lsls	r4, r4, #29
 80011ca:	2102      	movs	r1, #2
 80011cc:	4327      	orrs	r7, r4
 80011ce:	0900      	lsrs	r0, r0, #4
 80011d0:	e5b5      	b.n	8000d3e <__aeabi_dadd+0x26e>
 80011d2:	0019      	movs	r1, r3
 80011d4:	08c0      	lsrs	r0, r0, #3
 80011d6:	0777      	lsls	r7, r6, #29
 80011d8:	4307      	orrs	r7, r0
 80011da:	4311      	orrs	r1, r2
 80011dc:	08f0      	lsrs	r0, r6, #3
 80011de:	2900      	cmp	r1, #0
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x714>
 80011e2:	e5d9      	b.n	8000d98 <__aeabi_dadd+0x2c8>
 80011e4:	2180      	movs	r1, #128	@ 0x80
 80011e6:	0309      	lsls	r1, r1, #12
 80011e8:	4208      	tst	r0, r1
 80011ea:	d007      	beq.n	80011fc <__aeabi_dadd+0x72c>
 80011ec:	08dc      	lsrs	r4, r3, #3
 80011ee:	420c      	tst	r4, r1
 80011f0:	d104      	bne.n	80011fc <__aeabi_dadd+0x72c>
 80011f2:	08d2      	lsrs	r2, r2, #3
 80011f4:	075b      	lsls	r3, r3, #29
 80011f6:	431a      	orrs	r2, r3
 80011f8:	0017      	movs	r7, r2
 80011fa:	0020      	movs	r0, r4
 80011fc:	0f7b      	lsrs	r3, r7, #29
 80011fe:	00ff      	lsls	r7, r7, #3
 8001200:	08ff      	lsrs	r7, r7, #3
 8001202:	075b      	lsls	r3, r3, #29
 8001204:	431f      	orrs	r7, r3
 8001206:	e5c7      	b.n	8000d98 <__aeabi_dadd+0x2c8>
 8001208:	000f      	movs	r7, r1
 800120a:	e5c5      	b.n	8000d98 <__aeabi_dadd+0x2c8>
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <__aeabi_dadd+0x788>)
 800120e:	08d2      	lsrs	r2, r2, #3
 8001210:	4033      	ands	r3, r6
 8001212:	075f      	lsls	r7, r3, #29
 8001214:	025b      	lsls	r3, r3, #9
 8001216:	2401      	movs	r4, #1
 8001218:	4317      	orrs	r7, r2
 800121a:	0b1e      	lsrs	r6, r3, #12
 800121c:	e5a1      	b.n	8000d62 <__aeabi_dadd+0x292>
 800121e:	4226      	tst	r6, r4
 8001220:	d012      	beq.n	8001248 <__aeabi_dadd+0x778>
 8001222:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <__aeabi_dadd+0x788>)
 8001224:	4665      	mov	r5, ip
 8001226:	0002      	movs	r2, r0
 8001228:	2401      	movs	r4, #1
 800122a:	401e      	ands	r6, r3
 800122c:	e4e6      	b.n	8000bfc <__aeabi_dadd+0x12c>
 800122e:	0021      	movs	r1, r4
 8001230:	e585      	b.n	8000d3e <__aeabi_dadd+0x26e>
 8001232:	0017      	movs	r7, r2
 8001234:	e5a8      	b.n	8000d88 <__aeabi_dadd+0x2b8>
 8001236:	003a      	movs	r2, r7
 8001238:	e4d4      	b.n	8000be4 <__aeabi_dadd+0x114>
 800123a:	08db      	lsrs	r3, r3, #3
 800123c:	0764      	lsls	r4, r4, #29
 800123e:	431c      	orrs	r4, r3
 8001240:	0027      	movs	r7, r4
 8001242:	2102      	movs	r1, #2
 8001244:	0900      	lsrs	r0, r0, #4
 8001246:	e57a      	b.n	8000d3e <__aeabi_dadd+0x26e>
 8001248:	08c0      	lsrs	r0, r0, #3
 800124a:	0777      	lsls	r7, r6, #29
 800124c:	4307      	orrs	r7, r0
 800124e:	4665      	mov	r5, ip
 8001250:	2100      	movs	r1, #0
 8001252:	08f0      	lsrs	r0, r6, #3
 8001254:	e573      	b.n	8000d3e <__aeabi_dadd+0x26e>
 8001256:	46c0      	nop			@ (mov r8, r8)
 8001258:	ff7fffff 	.word	0xff7fffff

0800125c <__aeabi_ddiv>:
 800125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800125e:	46de      	mov	lr, fp
 8001260:	4645      	mov	r5, r8
 8001262:	4657      	mov	r7, sl
 8001264:	464e      	mov	r6, r9
 8001266:	b5e0      	push	{r5, r6, r7, lr}
 8001268:	b087      	sub	sp, #28
 800126a:	9200      	str	r2, [sp, #0]
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	030b      	lsls	r3, r1, #12
 8001270:	0b1b      	lsrs	r3, r3, #12
 8001272:	469b      	mov	fp, r3
 8001274:	0fca      	lsrs	r2, r1, #31
 8001276:	004b      	lsls	r3, r1, #1
 8001278:	0004      	movs	r4, r0
 800127a:	4680      	mov	r8, r0
 800127c:	0d5b      	lsrs	r3, r3, #21
 800127e:	9202      	str	r2, [sp, #8]
 8001280:	d100      	bne.n	8001284 <__aeabi_ddiv+0x28>
 8001282:	e098      	b.n	80013b6 <__aeabi_ddiv+0x15a>
 8001284:	4a7c      	ldr	r2, [pc, #496]	@ (8001478 <__aeabi_ddiv+0x21c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d037      	beq.n	80012fa <__aeabi_ddiv+0x9e>
 800128a:	4659      	mov	r1, fp
 800128c:	0f42      	lsrs	r2, r0, #29
 800128e:	00c9      	lsls	r1, r1, #3
 8001290:	430a      	orrs	r2, r1
 8001292:	2180      	movs	r1, #128	@ 0x80
 8001294:	0409      	lsls	r1, r1, #16
 8001296:	4311      	orrs	r1, r2
 8001298:	00c2      	lsls	r2, r0, #3
 800129a:	4690      	mov	r8, r2
 800129c:	4a77      	ldr	r2, [pc, #476]	@ (800147c <__aeabi_ddiv+0x220>)
 800129e:	4689      	mov	r9, r1
 80012a0:	4692      	mov	sl, r2
 80012a2:	449a      	add	sl, r3
 80012a4:	2300      	movs	r3, #0
 80012a6:	2400      	movs	r4, #0
 80012a8:	9303      	str	r3, [sp, #12]
 80012aa:	9e00      	ldr	r6, [sp, #0]
 80012ac:	9f01      	ldr	r7, [sp, #4]
 80012ae:	033b      	lsls	r3, r7, #12
 80012b0:	0b1b      	lsrs	r3, r3, #12
 80012b2:	469b      	mov	fp, r3
 80012b4:	007b      	lsls	r3, r7, #1
 80012b6:	0030      	movs	r0, r6
 80012b8:	0d5b      	lsrs	r3, r3, #21
 80012ba:	0ffd      	lsrs	r5, r7, #31
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d059      	beq.n	8001374 <__aeabi_ddiv+0x118>
 80012c0:	4a6d      	ldr	r2, [pc, #436]	@ (8001478 <__aeabi_ddiv+0x21c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d048      	beq.n	8001358 <__aeabi_ddiv+0xfc>
 80012c6:	4659      	mov	r1, fp
 80012c8:	0f72      	lsrs	r2, r6, #29
 80012ca:	00c9      	lsls	r1, r1, #3
 80012cc:	430a      	orrs	r2, r1
 80012ce:	2180      	movs	r1, #128	@ 0x80
 80012d0:	0409      	lsls	r1, r1, #16
 80012d2:	4311      	orrs	r1, r2
 80012d4:	468b      	mov	fp, r1
 80012d6:	4969      	ldr	r1, [pc, #420]	@ (800147c <__aeabi_ddiv+0x220>)
 80012d8:	00f2      	lsls	r2, r6, #3
 80012da:	468c      	mov	ip, r1
 80012dc:	4651      	mov	r1, sl
 80012de:	4463      	add	r3, ip
 80012e0:	1acb      	subs	r3, r1, r3
 80012e2:	469a      	mov	sl, r3
 80012e4:	2100      	movs	r1, #0
 80012e6:	9e02      	ldr	r6, [sp, #8]
 80012e8:	406e      	eors	r6, r5
 80012ea:	b2f6      	uxtb	r6, r6
 80012ec:	2c0f      	cmp	r4, #15
 80012ee:	d900      	bls.n	80012f2 <__aeabi_ddiv+0x96>
 80012f0:	e0ce      	b.n	8001490 <__aeabi_ddiv+0x234>
 80012f2:	4b63      	ldr	r3, [pc, #396]	@ (8001480 <__aeabi_ddiv+0x224>)
 80012f4:	00a4      	lsls	r4, r4, #2
 80012f6:	591b      	ldr	r3, [r3, r4]
 80012f8:	469f      	mov	pc, r3
 80012fa:	465a      	mov	r2, fp
 80012fc:	4302      	orrs	r2, r0
 80012fe:	4691      	mov	r9, r2
 8001300:	d000      	beq.n	8001304 <__aeabi_ddiv+0xa8>
 8001302:	e090      	b.n	8001426 <__aeabi_ddiv+0x1ca>
 8001304:	469a      	mov	sl, r3
 8001306:	2302      	movs	r3, #2
 8001308:	4690      	mov	r8, r2
 800130a:	2408      	movs	r4, #8
 800130c:	9303      	str	r3, [sp, #12]
 800130e:	e7cc      	b.n	80012aa <__aeabi_ddiv+0x4e>
 8001310:	46cb      	mov	fp, r9
 8001312:	4642      	mov	r2, r8
 8001314:	9d02      	ldr	r5, [sp, #8]
 8001316:	9903      	ldr	r1, [sp, #12]
 8001318:	2902      	cmp	r1, #2
 800131a:	d100      	bne.n	800131e <__aeabi_ddiv+0xc2>
 800131c:	e1de      	b.n	80016dc <__aeabi_ddiv+0x480>
 800131e:	2903      	cmp	r1, #3
 8001320:	d100      	bne.n	8001324 <__aeabi_ddiv+0xc8>
 8001322:	e08d      	b.n	8001440 <__aeabi_ddiv+0x1e4>
 8001324:	2901      	cmp	r1, #1
 8001326:	d000      	beq.n	800132a <__aeabi_ddiv+0xce>
 8001328:	e179      	b.n	800161e <__aeabi_ddiv+0x3c2>
 800132a:	002e      	movs	r6, r5
 800132c:	2200      	movs	r2, #0
 800132e:	2300      	movs	r3, #0
 8001330:	2400      	movs	r4, #0
 8001332:	4690      	mov	r8, r2
 8001334:	051b      	lsls	r3, r3, #20
 8001336:	4323      	orrs	r3, r4
 8001338:	07f6      	lsls	r6, r6, #31
 800133a:	4333      	orrs	r3, r6
 800133c:	4640      	mov	r0, r8
 800133e:	0019      	movs	r1, r3
 8001340:	b007      	add	sp, #28
 8001342:	bcf0      	pop	{r4, r5, r6, r7}
 8001344:	46bb      	mov	fp, r7
 8001346:	46b2      	mov	sl, r6
 8001348:	46a9      	mov	r9, r5
 800134a:	46a0      	mov	r8, r4
 800134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800134e:	2200      	movs	r2, #0
 8001350:	2400      	movs	r4, #0
 8001352:	4690      	mov	r8, r2
 8001354:	4b48      	ldr	r3, [pc, #288]	@ (8001478 <__aeabi_ddiv+0x21c>)
 8001356:	e7ed      	b.n	8001334 <__aeabi_ddiv+0xd8>
 8001358:	465a      	mov	r2, fp
 800135a:	9b00      	ldr	r3, [sp, #0]
 800135c:	431a      	orrs	r2, r3
 800135e:	4b49      	ldr	r3, [pc, #292]	@ (8001484 <__aeabi_ddiv+0x228>)
 8001360:	469c      	mov	ip, r3
 8001362:	44e2      	add	sl, ip
 8001364:	2a00      	cmp	r2, #0
 8001366:	d159      	bne.n	800141c <__aeabi_ddiv+0x1c0>
 8001368:	2302      	movs	r3, #2
 800136a:	431c      	orrs	r4, r3
 800136c:	2300      	movs	r3, #0
 800136e:	2102      	movs	r1, #2
 8001370:	469b      	mov	fp, r3
 8001372:	e7b8      	b.n	80012e6 <__aeabi_ddiv+0x8a>
 8001374:	465a      	mov	r2, fp
 8001376:	9b00      	ldr	r3, [sp, #0]
 8001378:	431a      	orrs	r2, r3
 800137a:	d049      	beq.n	8001410 <__aeabi_ddiv+0x1b4>
 800137c:	465b      	mov	r3, fp
 800137e:	2b00      	cmp	r3, #0
 8001380:	d100      	bne.n	8001384 <__aeabi_ddiv+0x128>
 8001382:	e19c      	b.n	80016be <__aeabi_ddiv+0x462>
 8001384:	4658      	mov	r0, fp
 8001386:	f001 fc0d 	bl	8002ba4 <__clzsi2>
 800138a:	0002      	movs	r2, r0
 800138c:	0003      	movs	r3, r0
 800138e:	3a0b      	subs	r2, #11
 8001390:	271d      	movs	r7, #29
 8001392:	9e00      	ldr	r6, [sp, #0]
 8001394:	1aba      	subs	r2, r7, r2
 8001396:	0019      	movs	r1, r3
 8001398:	4658      	mov	r0, fp
 800139a:	40d6      	lsrs	r6, r2
 800139c:	3908      	subs	r1, #8
 800139e:	4088      	lsls	r0, r1
 80013a0:	0032      	movs	r2, r6
 80013a2:	4302      	orrs	r2, r0
 80013a4:	4693      	mov	fp, r2
 80013a6:	9a00      	ldr	r2, [sp, #0]
 80013a8:	408a      	lsls	r2, r1
 80013aa:	4937      	ldr	r1, [pc, #220]	@ (8001488 <__aeabi_ddiv+0x22c>)
 80013ac:	4453      	add	r3, sl
 80013ae:	468a      	mov	sl, r1
 80013b0:	2100      	movs	r1, #0
 80013b2:	449a      	add	sl, r3
 80013b4:	e797      	b.n	80012e6 <__aeabi_ddiv+0x8a>
 80013b6:	465b      	mov	r3, fp
 80013b8:	4303      	orrs	r3, r0
 80013ba:	4699      	mov	r9, r3
 80013bc:	d021      	beq.n	8001402 <__aeabi_ddiv+0x1a6>
 80013be:	465b      	mov	r3, fp
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d100      	bne.n	80013c6 <__aeabi_ddiv+0x16a>
 80013c4:	e169      	b.n	800169a <__aeabi_ddiv+0x43e>
 80013c6:	4658      	mov	r0, fp
 80013c8:	f001 fbec 	bl	8002ba4 <__clzsi2>
 80013cc:	230b      	movs	r3, #11
 80013ce:	425b      	negs	r3, r3
 80013d0:	469c      	mov	ip, r3
 80013d2:	0002      	movs	r2, r0
 80013d4:	4484      	add	ip, r0
 80013d6:	4666      	mov	r6, ip
 80013d8:	231d      	movs	r3, #29
 80013da:	1b9b      	subs	r3, r3, r6
 80013dc:	0026      	movs	r6, r4
 80013de:	0011      	movs	r1, r2
 80013e0:	4658      	mov	r0, fp
 80013e2:	40de      	lsrs	r6, r3
 80013e4:	3908      	subs	r1, #8
 80013e6:	4088      	lsls	r0, r1
 80013e8:	0033      	movs	r3, r6
 80013ea:	4303      	orrs	r3, r0
 80013ec:	4699      	mov	r9, r3
 80013ee:	0023      	movs	r3, r4
 80013f0:	408b      	lsls	r3, r1
 80013f2:	4698      	mov	r8, r3
 80013f4:	4b25      	ldr	r3, [pc, #148]	@ (800148c <__aeabi_ddiv+0x230>)
 80013f6:	2400      	movs	r4, #0
 80013f8:	1a9b      	subs	r3, r3, r2
 80013fa:	469a      	mov	sl, r3
 80013fc:	2300      	movs	r3, #0
 80013fe:	9303      	str	r3, [sp, #12]
 8001400:	e753      	b.n	80012aa <__aeabi_ddiv+0x4e>
 8001402:	2300      	movs	r3, #0
 8001404:	4698      	mov	r8, r3
 8001406:	469a      	mov	sl, r3
 8001408:	3301      	adds	r3, #1
 800140a:	2404      	movs	r4, #4
 800140c:	9303      	str	r3, [sp, #12]
 800140e:	e74c      	b.n	80012aa <__aeabi_ddiv+0x4e>
 8001410:	2301      	movs	r3, #1
 8001412:	431c      	orrs	r4, r3
 8001414:	2300      	movs	r3, #0
 8001416:	2101      	movs	r1, #1
 8001418:	469b      	mov	fp, r3
 800141a:	e764      	b.n	80012e6 <__aeabi_ddiv+0x8a>
 800141c:	2303      	movs	r3, #3
 800141e:	0032      	movs	r2, r6
 8001420:	2103      	movs	r1, #3
 8001422:	431c      	orrs	r4, r3
 8001424:	e75f      	b.n	80012e6 <__aeabi_ddiv+0x8a>
 8001426:	469a      	mov	sl, r3
 8001428:	2303      	movs	r3, #3
 800142a:	46d9      	mov	r9, fp
 800142c:	240c      	movs	r4, #12
 800142e:	9303      	str	r3, [sp, #12]
 8001430:	e73b      	b.n	80012aa <__aeabi_ddiv+0x4e>
 8001432:	2300      	movs	r3, #0
 8001434:	2480      	movs	r4, #128	@ 0x80
 8001436:	4698      	mov	r8, r3
 8001438:	2600      	movs	r6, #0
 800143a:	4b0f      	ldr	r3, [pc, #60]	@ (8001478 <__aeabi_ddiv+0x21c>)
 800143c:	0324      	lsls	r4, r4, #12
 800143e:	e779      	b.n	8001334 <__aeabi_ddiv+0xd8>
 8001440:	2480      	movs	r4, #128	@ 0x80
 8001442:	465b      	mov	r3, fp
 8001444:	0324      	lsls	r4, r4, #12
 8001446:	431c      	orrs	r4, r3
 8001448:	0324      	lsls	r4, r4, #12
 800144a:	002e      	movs	r6, r5
 800144c:	4690      	mov	r8, r2
 800144e:	4b0a      	ldr	r3, [pc, #40]	@ (8001478 <__aeabi_ddiv+0x21c>)
 8001450:	0b24      	lsrs	r4, r4, #12
 8001452:	e76f      	b.n	8001334 <__aeabi_ddiv+0xd8>
 8001454:	2480      	movs	r4, #128	@ 0x80
 8001456:	464b      	mov	r3, r9
 8001458:	0324      	lsls	r4, r4, #12
 800145a:	4223      	tst	r3, r4
 800145c:	d002      	beq.n	8001464 <__aeabi_ddiv+0x208>
 800145e:	465b      	mov	r3, fp
 8001460:	4223      	tst	r3, r4
 8001462:	d0f0      	beq.n	8001446 <__aeabi_ddiv+0x1ea>
 8001464:	2480      	movs	r4, #128	@ 0x80
 8001466:	464b      	mov	r3, r9
 8001468:	0324      	lsls	r4, r4, #12
 800146a:	431c      	orrs	r4, r3
 800146c:	0324      	lsls	r4, r4, #12
 800146e:	9e02      	ldr	r6, [sp, #8]
 8001470:	4b01      	ldr	r3, [pc, #4]	@ (8001478 <__aeabi_ddiv+0x21c>)
 8001472:	0b24      	lsrs	r4, r4, #12
 8001474:	e75e      	b.n	8001334 <__aeabi_ddiv+0xd8>
 8001476:	46c0      	nop			@ (mov r8, r8)
 8001478:	000007ff 	.word	0x000007ff
 800147c:	fffffc01 	.word	0xfffffc01
 8001480:	0800d29c 	.word	0x0800d29c
 8001484:	fffff801 	.word	0xfffff801
 8001488:	000003f3 	.word	0x000003f3
 800148c:	fffffc0d 	.word	0xfffffc0d
 8001490:	45cb      	cmp	fp, r9
 8001492:	d200      	bcs.n	8001496 <__aeabi_ddiv+0x23a>
 8001494:	e0f8      	b.n	8001688 <__aeabi_ddiv+0x42c>
 8001496:	d100      	bne.n	800149a <__aeabi_ddiv+0x23e>
 8001498:	e0f3      	b.n	8001682 <__aeabi_ddiv+0x426>
 800149a:	2301      	movs	r3, #1
 800149c:	425b      	negs	r3, r3
 800149e:	469c      	mov	ip, r3
 80014a0:	4644      	mov	r4, r8
 80014a2:	4648      	mov	r0, r9
 80014a4:	2500      	movs	r5, #0
 80014a6:	44e2      	add	sl, ip
 80014a8:	465b      	mov	r3, fp
 80014aa:	0e17      	lsrs	r7, r2, #24
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	431f      	orrs	r7, r3
 80014b0:	0c19      	lsrs	r1, r3, #16
 80014b2:	043b      	lsls	r3, r7, #16
 80014b4:	0212      	lsls	r2, r2, #8
 80014b6:	9700      	str	r7, [sp, #0]
 80014b8:	0c1f      	lsrs	r7, r3, #16
 80014ba:	4691      	mov	r9, r2
 80014bc:	9102      	str	r1, [sp, #8]
 80014be:	9703      	str	r7, [sp, #12]
 80014c0:	f7fe fece 	bl	8000260 <__aeabi_uidivmod>
 80014c4:	0002      	movs	r2, r0
 80014c6:	437a      	muls	r2, r7
 80014c8:	040b      	lsls	r3, r1, #16
 80014ca:	0c21      	lsrs	r1, r4, #16
 80014cc:	4680      	mov	r8, r0
 80014ce:	4319      	orrs	r1, r3
 80014d0:	428a      	cmp	r2, r1
 80014d2:	d909      	bls.n	80014e8 <__aeabi_ddiv+0x28c>
 80014d4:	9f00      	ldr	r7, [sp, #0]
 80014d6:	2301      	movs	r3, #1
 80014d8:	46bc      	mov	ip, r7
 80014da:	425b      	negs	r3, r3
 80014dc:	4461      	add	r1, ip
 80014de:	469c      	mov	ip, r3
 80014e0:	44e0      	add	r8, ip
 80014e2:	428f      	cmp	r7, r1
 80014e4:	d800      	bhi.n	80014e8 <__aeabi_ddiv+0x28c>
 80014e6:	e15c      	b.n	80017a2 <__aeabi_ddiv+0x546>
 80014e8:	1a88      	subs	r0, r1, r2
 80014ea:	9902      	ldr	r1, [sp, #8]
 80014ec:	f7fe feb8 	bl	8000260 <__aeabi_uidivmod>
 80014f0:	9a03      	ldr	r2, [sp, #12]
 80014f2:	0424      	lsls	r4, r4, #16
 80014f4:	4342      	muls	r2, r0
 80014f6:	0409      	lsls	r1, r1, #16
 80014f8:	0c24      	lsrs	r4, r4, #16
 80014fa:	0003      	movs	r3, r0
 80014fc:	430c      	orrs	r4, r1
 80014fe:	42a2      	cmp	r2, r4
 8001500:	d906      	bls.n	8001510 <__aeabi_ddiv+0x2b4>
 8001502:	9900      	ldr	r1, [sp, #0]
 8001504:	3b01      	subs	r3, #1
 8001506:	468c      	mov	ip, r1
 8001508:	4464      	add	r4, ip
 800150a:	42a1      	cmp	r1, r4
 800150c:	d800      	bhi.n	8001510 <__aeabi_ddiv+0x2b4>
 800150e:	e142      	b.n	8001796 <__aeabi_ddiv+0x53a>
 8001510:	1aa0      	subs	r0, r4, r2
 8001512:	4642      	mov	r2, r8
 8001514:	0412      	lsls	r2, r2, #16
 8001516:	431a      	orrs	r2, r3
 8001518:	4693      	mov	fp, r2
 800151a:	464b      	mov	r3, r9
 800151c:	4659      	mov	r1, fp
 800151e:	0c1b      	lsrs	r3, r3, #16
 8001520:	001f      	movs	r7, r3
 8001522:	9304      	str	r3, [sp, #16]
 8001524:	040b      	lsls	r3, r1, #16
 8001526:	4649      	mov	r1, r9
 8001528:	0409      	lsls	r1, r1, #16
 800152a:	0c09      	lsrs	r1, r1, #16
 800152c:	000c      	movs	r4, r1
 800152e:	0c1b      	lsrs	r3, r3, #16
 8001530:	435c      	muls	r4, r3
 8001532:	0c12      	lsrs	r2, r2, #16
 8001534:	437b      	muls	r3, r7
 8001536:	4688      	mov	r8, r1
 8001538:	4351      	muls	r1, r2
 800153a:	437a      	muls	r2, r7
 800153c:	0c27      	lsrs	r7, r4, #16
 800153e:	46bc      	mov	ip, r7
 8001540:	185b      	adds	r3, r3, r1
 8001542:	4463      	add	r3, ip
 8001544:	4299      	cmp	r1, r3
 8001546:	d903      	bls.n	8001550 <__aeabi_ddiv+0x2f4>
 8001548:	2180      	movs	r1, #128	@ 0x80
 800154a:	0249      	lsls	r1, r1, #9
 800154c:	468c      	mov	ip, r1
 800154e:	4462      	add	r2, ip
 8001550:	0c19      	lsrs	r1, r3, #16
 8001552:	0424      	lsls	r4, r4, #16
 8001554:	041b      	lsls	r3, r3, #16
 8001556:	0c24      	lsrs	r4, r4, #16
 8001558:	188a      	adds	r2, r1, r2
 800155a:	191c      	adds	r4, r3, r4
 800155c:	4290      	cmp	r0, r2
 800155e:	d302      	bcc.n	8001566 <__aeabi_ddiv+0x30a>
 8001560:	d116      	bne.n	8001590 <__aeabi_ddiv+0x334>
 8001562:	42a5      	cmp	r5, r4
 8001564:	d214      	bcs.n	8001590 <__aeabi_ddiv+0x334>
 8001566:	465b      	mov	r3, fp
 8001568:	9f00      	ldr	r7, [sp, #0]
 800156a:	3b01      	subs	r3, #1
 800156c:	444d      	add	r5, r9
 800156e:	9305      	str	r3, [sp, #20]
 8001570:	454d      	cmp	r5, r9
 8001572:	419b      	sbcs	r3, r3
 8001574:	46bc      	mov	ip, r7
 8001576:	425b      	negs	r3, r3
 8001578:	4463      	add	r3, ip
 800157a:	18c0      	adds	r0, r0, r3
 800157c:	4287      	cmp	r7, r0
 800157e:	d300      	bcc.n	8001582 <__aeabi_ddiv+0x326>
 8001580:	e102      	b.n	8001788 <__aeabi_ddiv+0x52c>
 8001582:	4282      	cmp	r2, r0
 8001584:	d900      	bls.n	8001588 <__aeabi_ddiv+0x32c>
 8001586:	e129      	b.n	80017dc <__aeabi_ddiv+0x580>
 8001588:	d100      	bne.n	800158c <__aeabi_ddiv+0x330>
 800158a:	e124      	b.n	80017d6 <__aeabi_ddiv+0x57a>
 800158c:	9b05      	ldr	r3, [sp, #20]
 800158e:	469b      	mov	fp, r3
 8001590:	1b2c      	subs	r4, r5, r4
 8001592:	42a5      	cmp	r5, r4
 8001594:	41ad      	sbcs	r5, r5
 8001596:	9b00      	ldr	r3, [sp, #0]
 8001598:	1a80      	subs	r0, r0, r2
 800159a:	426d      	negs	r5, r5
 800159c:	1b40      	subs	r0, r0, r5
 800159e:	4283      	cmp	r3, r0
 80015a0:	d100      	bne.n	80015a4 <__aeabi_ddiv+0x348>
 80015a2:	e10f      	b.n	80017c4 <__aeabi_ddiv+0x568>
 80015a4:	9902      	ldr	r1, [sp, #8]
 80015a6:	f7fe fe5b 	bl	8000260 <__aeabi_uidivmod>
 80015aa:	9a03      	ldr	r2, [sp, #12]
 80015ac:	040b      	lsls	r3, r1, #16
 80015ae:	4342      	muls	r2, r0
 80015b0:	0c21      	lsrs	r1, r4, #16
 80015b2:	0005      	movs	r5, r0
 80015b4:	4319      	orrs	r1, r3
 80015b6:	428a      	cmp	r2, r1
 80015b8:	d900      	bls.n	80015bc <__aeabi_ddiv+0x360>
 80015ba:	e0cb      	b.n	8001754 <__aeabi_ddiv+0x4f8>
 80015bc:	1a88      	subs	r0, r1, r2
 80015be:	9902      	ldr	r1, [sp, #8]
 80015c0:	f7fe fe4e 	bl	8000260 <__aeabi_uidivmod>
 80015c4:	9a03      	ldr	r2, [sp, #12]
 80015c6:	0424      	lsls	r4, r4, #16
 80015c8:	4342      	muls	r2, r0
 80015ca:	0409      	lsls	r1, r1, #16
 80015cc:	0c24      	lsrs	r4, r4, #16
 80015ce:	0003      	movs	r3, r0
 80015d0:	430c      	orrs	r4, r1
 80015d2:	42a2      	cmp	r2, r4
 80015d4:	d900      	bls.n	80015d8 <__aeabi_ddiv+0x37c>
 80015d6:	e0ca      	b.n	800176e <__aeabi_ddiv+0x512>
 80015d8:	4641      	mov	r1, r8
 80015da:	1aa4      	subs	r4, r4, r2
 80015dc:	042a      	lsls	r2, r5, #16
 80015de:	431a      	orrs	r2, r3
 80015e0:	9f04      	ldr	r7, [sp, #16]
 80015e2:	0413      	lsls	r3, r2, #16
 80015e4:	0c1b      	lsrs	r3, r3, #16
 80015e6:	4359      	muls	r1, r3
 80015e8:	4640      	mov	r0, r8
 80015ea:	437b      	muls	r3, r7
 80015ec:	469c      	mov	ip, r3
 80015ee:	0c15      	lsrs	r5, r2, #16
 80015f0:	4368      	muls	r0, r5
 80015f2:	0c0b      	lsrs	r3, r1, #16
 80015f4:	4484      	add	ip, r0
 80015f6:	4463      	add	r3, ip
 80015f8:	437d      	muls	r5, r7
 80015fa:	4298      	cmp	r0, r3
 80015fc:	d903      	bls.n	8001606 <__aeabi_ddiv+0x3aa>
 80015fe:	2080      	movs	r0, #128	@ 0x80
 8001600:	0240      	lsls	r0, r0, #9
 8001602:	4684      	mov	ip, r0
 8001604:	4465      	add	r5, ip
 8001606:	0c18      	lsrs	r0, r3, #16
 8001608:	0409      	lsls	r1, r1, #16
 800160a:	041b      	lsls	r3, r3, #16
 800160c:	0c09      	lsrs	r1, r1, #16
 800160e:	1940      	adds	r0, r0, r5
 8001610:	185b      	adds	r3, r3, r1
 8001612:	4284      	cmp	r4, r0
 8001614:	d327      	bcc.n	8001666 <__aeabi_ddiv+0x40a>
 8001616:	d023      	beq.n	8001660 <__aeabi_ddiv+0x404>
 8001618:	2301      	movs	r3, #1
 800161a:	0035      	movs	r5, r6
 800161c:	431a      	orrs	r2, r3
 800161e:	4b94      	ldr	r3, [pc, #592]	@ (8001870 <__aeabi_ddiv+0x614>)
 8001620:	4453      	add	r3, sl
 8001622:	2b00      	cmp	r3, #0
 8001624:	dd60      	ble.n	80016e8 <__aeabi_ddiv+0x48c>
 8001626:	0751      	lsls	r1, r2, #29
 8001628:	d000      	beq.n	800162c <__aeabi_ddiv+0x3d0>
 800162a:	e086      	b.n	800173a <__aeabi_ddiv+0x4de>
 800162c:	002e      	movs	r6, r5
 800162e:	08d1      	lsrs	r1, r2, #3
 8001630:	465a      	mov	r2, fp
 8001632:	01d2      	lsls	r2, r2, #7
 8001634:	d506      	bpl.n	8001644 <__aeabi_ddiv+0x3e8>
 8001636:	465a      	mov	r2, fp
 8001638:	4b8e      	ldr	r3, [pc, #568]	@ (8001874 <__aeabi_ddiv+0x618>)
 800163a:	401a      	ands	r2, r3
 800163c:	2380      	movs	r3, #128	@ 0x80
 800163e:	4693      	mov	fp, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4453      	add	r3, sl
 8001644:	4a8c      	ldr	r2, [pc, #560]	@ (8001878 <__aeabi_ddiv+0x61c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	dd00      	ble.n	800164c <__aeabi_ddiv+0x3f0>
 800164a:	e680      	b.n	800134e <__aeabi_ddiv+0xf2>
 800164c:	465a      	mov	r2, fp
 800164e:	0752      	lsls	r2, r2, #29
 8001650:	430a      	orrs	r2, r1
 8001652:	4690      	mov	r8, r2
 8001654:	465a      	mov	r2, fp
 8001656:	055b      	lsls	r3, r3, #21
 8001658:	0254      	lsls	r4, r2, #9
 800165a:	0b24      	lsrs	r4, r4, #12
 800165c:	0d5b      	lsrs	r3, r3, #21
 800165e:	e669      	b.n	8001334 <__aeabi_ddiv+0xd8>
 8001660:	0035      	movs	r5, r6
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0db      	beq.n	800161e <__aeabi_ddiv+0x3c2>
 8001666:	9d00      	ldr	r5, [sp, #0]
 8001668:	1e51      	subs	r1, r2, #1
 800166a:	46ac      	mov	ip, r5
 800166c:	4464      	add	r4, ip
 800166e:	42ac      	cmp	r4, r5
 8001670:	d200      	bcs.n	8001674 <__aeabi_ddiv+0x418>
 8001672:	e09e      	b.n	80017b2 <__aeabi_ddiv+0x556>
 8001674:	4284      	cmp	r4, r0
 8001676:	d200      	bcs.n	800167a <__aeabi_ddiv+0x41e>
 8001678:	e0e1      	b.n	800183e <__aeabi_ddiv+0x5e2>
 800167a:	d100      	bne.n	800167e <__aeabi_ddiv+0x422>
 800167c:	e0ee      	b.n	800185c <__aeabi_ddiv+0x600>
 800167e:	000a      	movs	r2, r1
 8001680:	e7ca      	b.n	8001618 <__aeabi_ddiv+0x3bc>
 8001682:	4542      	cmp	r2, r8
 8001684:	d900      	bls.n	8001688 <__aeabi_ddiv+0x42c>
 8001686:	e708      	b.n	800149a <__aeabi_ddiv+0x23e>
 8001688:	464b      	mov	r3, r9
 800168a:	07dc      	lsls	r4, r3, #31
 800168c:	0858      	lsrs	r0, r3, #1
 800168e:	4643      	mov	r3, r8
 8001690:	085b      	lsrs	r3, r3, #1
 8001692:	431c      	orrs	r4, r3
 8001694:	4643      	mov	r3, r8
 8001696:	07dd      	lsls	r5, r3, #31
 8001698:	e706      	b.n	80014a8 <__aeabi_ddiv+0x24c>
 800169a:	f001 fa83 	bl	8002ba4 <__clzsi2>
 800169e:	2315      	movs	r3, #21
 80016a0:	469c      	mov	ip, r3
 80016a2:	4484      	add	ip, r0
 80016a4:	0002      	movs	r2, r0
 80016a6:	4663      	mov	r3, ip
 80016a8:	3220      	adds	r2, #32
 80016aa:	2b1c      	cmp	r3, #28
 80016ac:	dc00      	bgt.n	80016b0 <__aeabi_ddiv+0x454>
 80016ae:	e692      	b.n	80013d6 <__aeabi_ddiv+0x17a>
 80016b0:	0023      	movs	r3, r4
 80016b2:	3808      	subs	r0, #8
 80016b4:	4083      	lsls	r3, r0
 80016b6:	4699      	mov	r9, r3
 80016b8:	2300      	movs	r3, #0
 80016ba:	4698      	mov	r8, r3
 80016bc:	e69a      	b.n	80013f4 <__aeabi_ddiv+0x198>
 80016be:	f001 fa71 	bl	8002ba4 <__clzsi2>
 80016c2:	0002      	movs	r2, r0
 80016c4:	0003      	movs	r3, r0
 80016c6:	3215      	adds	r2, #21
 80016c8:	3320      	adds	r3, #32
 80016ca:	2a1c      	cmp	r2, #28
 80016cc:	dc00      	bgt.n	80016d0 <__aeabi_ddiv+0x474>
 80016ce:	e65f      	b.n	8001390 <__aeabi_ddiv+0x134>
 80016d0:	9900      	ldr	r1, [sp, #0]
 80016d2:	3808      	subs	r0, #8
 80016d4:	4081      	lsls	r1, r0
 80016d6:	2200      	movs	r2, #0
 80016d8:	468b      	mov	fp, r1
 80016da:	e666      	b.n	80013aa <__aeabi_ddiv+0x14e>
 80016dc:	2200      	movs	r2, #0
 80016de:	002e      	movs	r6, r5
 80016e0:	2400      	movs	r4, #0
 80016e2:	4690      	mov	r8, r2
 80016e4:	4b65      	ldr	r3, [pc, #404]	@ (800187c <__aeabi_ddiv+0x620>)
 80016e6:	e625      	b.n	8001334 <__aeabi_ddiv+0xd8>
 80016e8:	002e      	movs	r6, r5
 80016ea:	2101      	movs	r1, #1
 80016ec:	1ac9      	subs	r1, r1, r3
 80016ee:	2938      	cmp	r1, #56	@ 0x38
 80016f0:	dd00      	ble.n	80016f4 <__aeabi_ddiv+0x498>
 80016f2:	e61b      	b.n	800132c <__aeabi_ddiv+0xd0>
 80016f4:	291f      	cmp	r1, #31
 80016f6:	dc7e      	bgt.n	80017f6 <__aeabi_ddiv+0x59a>
 80016f8:	4861      	ldr	r0, [pc, #388]	@ (8001880 <__aeabi_ddiv+0x624>)
 80016fa:	0014      	movs	r4, r2
 80016fc:	4450      	add	r0, sl
 80016fe:	465b      	mov	r3, fp
 8001700:	4082      	lsls	r2, r0
 8001702:	4083      	lsls	r3, r0
 8001704:	40cc      	lsrs	r4, r1
 8001706:	1e50      	subs	r0, r2, #1
 8001708:	4182      	sbcs	r2, r0
 800170a:	4323      	orrs	r3, r4
 800170c:	431a      	orrs	r2, r3
 800170e:	465b      	mov	r3, fp
 8001710:	40cb      	lsrs	r3, r1
 8001712:	0751      	lsls	r1, r2, #29
 8001714:	d009      	beq.n	800172a <__aeabi_ddiv+0x4ce>
 8001716:	210f      	movs	r1, #15
 8001718:	4011      	ands	r1, r2
 800171a:	2904      	cmp	r1, #4
 800171c:	d005      	beq.n	800172a <__aeabi_ddiv+0x4ce>
 800171e:	1d11      	adds	r1, r2, #4
 8001720:	4291      	cmp	r1, r2
 8001722:	4192      	sbcs	r2, r2
 8001724:	4252      	negs	r2, r2
 8001726:	189b      	adds	r3, r3, r2
 8001728:	000a      	movs	r2, r1
 800172a:	0219      	lsls	r1, r3, #8
 800172c:	d400      	bmi.n	8001730 <__aeabi_ddiv+0x4d4>
 800172e:	e09b      	b.n	8001868 <__aeabi_ddiv+0x60c>
 8001730:	2200      	movs	r2, #0
 8001732:	2301      	movs	r3, #1
 8001734:	2400      	movs	r4, #0
 8001736:	4690      	mov	r8, r2
 8001738:	e5fc      	b.n	8001334 <__aeabi_ddiv+0xd8>
 800173a:	210f      	movs	r1, #15
 800173c:	4011      	ands	r1, r2
 800173e:	2904      	cmp	r1, #4
 8001740:	d100      	bne.n	8001744 <__aeabi_ddiv+0x4e8>
 8001742:	e773      	b.n	800162c <__aeabi_ddiv+0x3d0>
 8001744:	1d11      	adds	r1, r2, #4
 8001746:	4291      	cmp	r1, r2
 8001748:	4192      	sbcs	r2, r2
 800174a:	4252      	negs	r2, r2
 800174c:	002e      	movs	r6, r5
 800174e:	08c9      	lsrs	r1, r1, #3
 8001750:	4493      	add	fp, r2
 8001752:	e76d      	b.n	8001630 <__aeabi_ddiv+0x3d4>
 8001754:	9b00      	ldr	r3, [sp, #0]
 8001756:	3d01      	subs	r5, #1
 8001758:	469c      	mov	ip, r3
 800175a:	4461      	add	r1, ip
 800175c:	428b      	cmp	r3, r1
 800175e:	d900      	bls.n	8001762 <__aeabi_ddiv+0x506>
 8001760:	e72c      	b.n	80015bc <__aeabi_ddiv+0x360>
 8001762:	428a      	cmp	r2, r1
 8001764:	d800      	bhi.n	8001768 <__aeabi_ddiv+0x50c>
 8001766:	e729      	b.n	80015bc <__aeabi_ddiv+0x360>
 8001768:	1e85      	subs	r5, r0, #2
 800176a:	4461      	add	r1, ip
 800176c:	e726      	b.n	80015bc <__aeabi_ddiv+0x360>
 800176e:	9900      	ldr	r1, [sp, #0]
 8001770:	3b01      	subs	r3, #1
 8001772:	468c      	mov	ip, r1
 8001774:	4464      	add	r4, ip
 8001776:	42a1      	cmp	r1, r4
 8001778:	d900      	bls.n	800177c <__aeabi_ddiv+0x520>
 800177a:	e72d      	b.n	80015d8 <__aeabi_ddiv+0x37c>
 800177c:	42a2      	cmp	r2, r4
 800177e:	d800      	bhi.n	8001782 <__aeabi_ddiv+0x526>
 8001780:	e72a      	b.n	80015d8 <__aeabi_ddiv+0x37c>
 8001782:	1e83      	subs	r3, r0, #2
 8001784:	4464      	add	r4, ip
 8001786:	e727      	b.n	80015d8 <__aeabi_ddiv+0x37c>
 8001788:	4287      	cmp	r7, r0
 800178a:	d000      	beq.n	800178e <__aeabi_ddiv+0x532>
 800178c:	e6fe      	b.n	800158c <__aeabi_ddiv+0x330>
 800178e:	45a9      	cmp	r9, r5
 8001790:	d900      	bls.n	8001794 <__aeabi_ddiv+0x538>
 8001792:	e6fb      	b.n	800158c <__aeabi_ddiv+0x330>
 8001794:	e6f5      	b.n	8001582 <__aeabi_ddiv+0x326>
 8001796:	42a2      	cmp	r2, r4
 8001798:	d800      	bhi.n	800179c <__aeabi_ddiv+0x540>
 800179a:	e6b9      	b.n	8001510 <__aeabi_ddiv+0x2b4>
 800179c:	1e83      	subs	r3, r0, #2
 800179e:	4464      	add	r4, ip
 80017a0:	e6b6      	b.n	8001510 <__aeabi_ddiv+0x2b4>
 80017a2:	428a      	cmp	r2, r1
 80017a4:	d800      	bhi.n	80017a8 <__aeabi_ddiv+0x54c>
 80017a6:	e69f      	b.n	80014e8 <__aeabi_ddiv+0x28c>
 80017a8:	46bc      	mov	ip, r7
 80017aa:	1e83      	subs	r3, r0, #2
 80017ac:	4698      	mov	r8, r3
 80017ae:	4461      	add	r1, ip
 80017b0:	e69a      	b.n	80014e8 <__aeabi_ddiv+0x28c>
 80017b2:	000a      	movs	r2, r1
 80017b4:	4284      	cmp	r4, r0
 80017b6:	d000      	beq.n	80017ba <__aeabi_ddiv+0x55e>
 80017b8:	e72e      	b.n	8001618 <__aeabi_ddiv+0x3bc>
 80017ba:	454b      	cmp	r3, r9
 80017bc:	d000      	beq.n	80017c0 <__aeabi_ddiv+0x564>
 80017be:	e72b      	b.n	8001618 <__aeabi_ddiv+0x3bc>
 80017c0:	0035      	movs	r5, r6
 80017c2:	e72c      	b.n	800161e <__aeabi_ddiv+0x3c2>
 80017c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001870 <__aeabi_ddiv+0x614>)
 80017c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001884 <__aeabi_ddiv+0x628>)
 80017c8:	4453      	add	r3, sl
 80017ca:	4592      	cmp	sl, r2
 80017cc:	db43      	blt.n	8001856 <__aeabi_ddiv+0x5fa>
 80017ce:	2201      	movs	r2, #1
 80017d0:	2100      	movs	r1, #0
 80017d2:	4493      	add	fp, r2
 80017d4:	e72c      	b.n	8001630 <__aeabi_ddiv+0x3d4>
 80017d6:	42ac      	cmp	r4, r5
 80017d8:	d800      	bhi.n	80017dc <__aeabi_ddiv+0x580>
 80017da:	e6d7      	b.n	800158c <__aeabi_ddiv+0x330>
 80017dc:	2302      	movs	r3, #2
 80017de:	425b      	negs	r3, r3
 80017e0:	469c      	mov	ip, r3
 80017e2:	9900      	ldr	r1, [sp, #0]
 80017e4:	444d      	add	r5, r9
 80017e6:	454d      	cmp	r5, r9
 80017e8:	419b      	sbcs	r3, r3
 80017ea:	44e3      	add	fp, ip
 80017ec:	468c      	mov	ip, r1
 80017ee:	425b      	negs	r3, r3
 80017f0:	4463      	add	r3, ip
 80017f2:	18c0      	adds	r0, r0, r3
 80017f4:	e6cc      	b.n	8001590 <__aeabi_ddiv+0x334>
 80017f6:	201f      	movs	r0, #31
 80017f8:	4240      	negs	r0, r0
 80017fa:	1ac3      	subs	r3, r0, r3
 80017fc:	4658      	mov	r0, fp
 80017fe:	40d8      	lsrs	r0, r3
 8001800:	2920      	cmp	r1, #32
 8001802:	d004      	beq.n	800180e <__aeabi_ddiv+0x5b2>
 8001804:	4659      	mov	r1, fp
 8001806:	4b20      	ldr	r3, [pc, #128]	@ (8001888 <__aeabi_ddiv+0x62c>)
 8001808:	4453      	add	r3, sl
 800180a:	4099      	lsls	r1, r3
 800180c:	430a      	orrs	r2, r1
 800180e:	1e53      	subs	r3, r2, #1
 8001810:	419a      	sbcs	r2, r3
 8001812:	2307      	movs	r3, #7
 8001814:	0019      	movs	r1, r3
 8001816:	4302      	orrs	r2, r0
 8001818:	2400      	movs	r4, #0
 800181a:	4011      	ands	r1, r2
 800181c:	4213      	tst	r3, r2
 800181e:	d009      	beq.n	8001834 <__aeabi_ddiv+0x5d8>
 8001820:	3308      	adds	r3, #8
 8001822:	4013      	ands	r3, r2
 8001824:	2b04      	cmp	r3, #4
 8001826:	d01d      	beq.n	8001864 <__aeabi_ddiv+0x608>
 8001828:	1d13      	adds	r3, r2, #4
 800182a:	4293      	cmp	r3, r2
 800182c:	4189      	sbcs	r1, r1
 800182e:	001a      	movs	r2, r3
 8001830:	4249      	negs	r1, r1
 8001832:	0749      	lsls	r1, r1, #29
 8001834:	08d2      	lsrs	r2, r2, #3
 8001836:	430a      	orrs	r2, r1
 8001838:	4690      	mov	r8, r2
 800183a:	2300      	movs	r3, #0
 800183c:	e57a      	b.n	8001334 <__aeabi_ddiv+0xd8>
 800183e:	4649      	mov	r1, r9
 8001840:	9f00      	ldr	r7, [sp, #0]
 8001842:	004d      	lsls	r5, r1, #1
 8001844:	454d      	cmp	r5, r9
 8001846:	4189      	sbcs	r1, r1
 8001848:	46bc      	mov	ip, r7
 800184a:	4249      	negs	r1, r1
 800184c:	4461      	add	r1, ip
 800184e:	46a9      	mov	r9, r5
 8001850:	3a02      	subs	r2, #2
 8001852:	1864      	adds	r4, r4, r1
 8001854:	e7ae      	b.n	80017b4 <__aeabi_ddiv+0x558>
 8001856:	2201      	movs	r2, #1
 8001858:	4252      	negs	r2, r2
 800185a:	e746      	b.n	80016ea <__aeabi_ddiv+0x48e>
 800185c:	4599      	cmp	r9, r3
 800185e:	d3ee      	bcc.n	800183e <__aeabi_ddiv+0x5e2>
 8001860:	000a      	movs	r2, r1
 8001862:	e7aa      	b.n	80017ba <__aeabi_ddiv+0x55e>
 8001864:	2100      	movs	r1, #0
 8001866:	e7e5      	b.n	8001834 <__aeabi_ddiv+0x5d8>
 8001868:	0759      	lsls	r1, r3, #29
 800186a:	025b      	lsls	r3, r3, #9
 800186c:	0b1c      	lsrs	r4, r3, #12
 800186e:	e7e1      	b.n	8001834 <__aeabi_ddiv+0x5d8>
 8001870:	000003ff 	.word	0x000003ff
 8001874:	feffffff 	.word	0xfeffffff
 8001878:	000007fe 	.word	0x000007fe
 800187c:	000007ff 	.word	0x000007ff
 8001880:	0000041e 	.word	0x0000041e
 8001884:	fffffc02 	.word	0xfffffc02
 8001888:	0000043e 	.word	0x0000043e

0800188c <__eqdf2>:
 800188c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800188e:	4657      	mov	r7, sl
 8001890:	46de      	mov	lr, fp
 8001892:	464e      	mov	r6, r9
 8001894:	4645      	mov	r5, r8
 8001896:	b5e0      	push	{r5, r6, r7, lr}
 8001898:	000d      	movs	r5, r1
 800189a:	0004      	movs	r4, r0
 800189c:	0fe8      	lsrs	r0, r5, #31
 800189e:	4683      	mov	fp, r0
 80018a0:	0309      	lsls	r1, r1, #12
 80018a2:	0fd8      	lsrs	r0, r3, #31
 80018a4:	0b09      	lsrs	r1, r1, #12
 80018a6:	4682      	mov	sl, r0
 80018a8:	4819      	ldr	r0, [pc, #100]	@ (8001910 <__eqdf2+0x84>)
 80018aa:	468c      	mov	ip, r1
 80018ac:	031f      	lsls	r7, r3, #12
 80018ae:	0069      	lsls	r1, r5, #1
 80018b0:	005e      	lsls	r6, r3, #1
 80018b2:	0d49      	lsrs	r1, r1, #21
 80018b4:	0b3f      	lsrs	r7, r7, #12
 80018b6:	0d76      	lsrs	r6, r6, #21
 80018b8:	4281      	cmp	r1, r0
 80018ba:	d018      	beq.n	80018ee <__eqdf2+0x62>
 80018bc:	4286      	cmp	r6, r0
 80018be:	d00f      	beq.n	80018e0 <__eqdf2+0x54>
 80018c0:	2001      	movs	r0, #1
 80018c2:	42b1      	cmp	r1, r6
 80018c4:	d10d      	bne.n	80018e2 <__eqdf2+0x56>
 80018c6:	45bc      	cmp	ip, r7
 80018c8:	d10b      	bne.n	80018e2 <__eqdf2+0x56>
 80018ca:	4294      	cmp	r4, r2
 80018cc:	d109      	bne.n	80018e2 <__eqdf2+0x56>
 80018ce:	45d3      	cmp	fp, sl
 80018d0:	d01c      	beq.n	800190c <__eqdf2+0x80>
 80018d2:	2900      	cmp	r1, #0
 80018d4:	d105      	bne.n	80018e2 <__eqdf2+0x56>
 80018d6:	4660      	mov	r0, ip
 80018d8:	4320      	orrs	r0, r4
 80018da:	1e43      	subs	r3, r0, #1
 80018dc:	4198      	sbcs	r0, r3
 80018de:	e000      	b.n	80018e2 <__eqdf2+0x56>
 80018e0:	2001      	movs	r0, #1
 80018e2:	bcf0      	pop	{r4, r5, r6, r7}
 80018e4:	46bb      	mov	fp, r7
 80018e6:	46b2      	mov	sl, r6
 80018e8:	46a9      	mov	r9, r5
 80018ea:	46a0      	mov	r8, r4
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ee:	2001      	movs	r0, #1
 80018f0:	428e      	cmp	r6, r1
 80018f2:	d1f6      	bne.n	80018e2 <__eqdf2+0x56>
 80018f4:	4661      	mov	r1, ip
 80018f6:	4339      	orrs	r1, r7
 80018f8:	000f      	movs	r7, r1
 80018fa:	4317      	orrs	r7, r2
 80018fc:	4327      	orrs	r7, r4
 80018fe:	d1f0      	bne.n	80018e2 <__eqdf2+0x56>
 8001900:	465b      	mov	r3, fp
 8001902:	4652      	mov	r2, sl
 8001904:	1a98      	subs	r0, r3, r2
 8001906:	1e43      	subs	r3, r0, #1
 8001908:	4198      	sbcs	r0, r3
 800190a:	e7ea      	b.n	80018e2 <__eqdf2+0x56>
 800190c:	2000      	movs	r0, #0
 800190e:	e7e8      	b.n	80018e2 <__eqdf2+0x56>
 8001910:	000007ff 	.word	0x000007ff

08001914 <__gedf2>:
 8001914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001916:	4657      	mov	r7, sl
 8001918:	464e      	mov	r6, r9
 800191a:	4645      	mov	r5, r8
 800191c:	46de      	mov	lr, fp
 800191e:	b5e0      	push	{r5, r6, r7, lr}
 8001920:	000d      	movs	r5, r1
 8001922:	030e      	lsls	r6, r1, #12
 8001924:	0049      	lsls	r1, r1, #1
 8001926:	0d49      	lsrs	r1, r1, #21
 8001928:	468a      	mov	sl, r1
 800192a:	0fdf      	lsrs	r7, r3, #31
 800192c:	0fe9      	lsrs	r1, r5, #31
 800192e:	46bc      	mov	ip, r7
 8001930:	b083      	sub	sp, #12
 8001932:	4f2f      	ldr	r7, [pc, #188]	@ (80019f0 <__gedf2+0xdc>)
 8001934:	0004      	movs	r4, r0
 8001936:	4680      	mov	r8, r0
 8001938:	9101      	str	r1, [sp, #4]
 800193a:	0058      	lsls	r0, r3, #1
 800193c:	0319      	lsls	r1, r3, #12
 800193e:	4691      	mov	r9, r2
 8001940:	0b36      	lsrs	r6, r6, #12
 8001942:	0b09      	lsrs	r1, r1, #12
 8001944:	0d40      	lsrs	r0, r0, #21
 8001946:	45ba      	cmp	sl, r7
 8001948:	d01d      	beq.n	8001986 <__gedf2+0x72>
 800194a:	42b8      	cmp	r0, r7
 800194c:	d00d      	beq.n	800196a <__gedf2+0x56>
 800194e:	4657      	mov	r7, sl
 8001950:	2f00      	cmp	r7, #0
 8001952:	d12a      	bne.n	80019aa <__gedf2+0x96>
 8001954:	4334      	orrs	r4, r6
 8001956:	2800      	cmp	r0, #0
 8001958:	d124      	bne.n	80019a4 <__gedf2+0x90>
 800195a:	430a      	orrs	r2, r1
 800195c:	d036      	beq.n	80019cc <__gedf2+0xb8>
 800195e:	2c00      	cmp	r4, #0
 8001960:	d141      	bne.n	80019e6 <__gedf2+0xd2>
 8001962:	4663      	mov	r3, ip
 8001964:	0058      	lsls	r0, r3, #1
 8001966:	3801      	subs	r0, #1
 8001968:	e015      	b.n	8001996 <__gedf2+0x82>
 800196a:	4311      	orrs	r1, r2
 800196c:	d138      	bne.n	80019e0 <__gedf2+0xcc>
 800196e:	4653      	mov	r3, sl
 8001970:	2b00      	cmp	r3, #0
 8001972:	d101      	bne.n	8001978 <__gedf2+0x64>
 8001974:	4326      	orrs	r6, r4
 8001976:	d0f4      	beq.n	8001962 <__gedf2+0x4e>
 8001978:	9b01      	ldr	r3, [sp, #4]
 800197a:	4563      	cmp	r3, ip
 800197c:	d107      	bne.n	800198e <__gedf2+0x7a>
 800197e:	9b01      	ldr	r3, [sp, #4]
 8001980:	0058      	lsls	r0, r3, #1
 8001982:	3801      	subs	r0, #1
 8001984:	e007      	b.n	8001996 <__gedf2+0x82>
 8001986:	4326      	orrs	r6, r4
 8001988:	d12a      	bne.n	80019e0 <__gedf2+0xcc>
 800198a:	4550      	cmp	r0, sl
 800198c:	d021      	beq.n	80019d2 <__gedf2+0xbe>
 800198e:	2001      	movs	r0, #1
 8001990:	9b01      	ldr	r3, [sp, #4]
 8001992:	425f      	negs	r7, r3
 8001994:	4338      	orrs	r0, r7
 8001996:	b003      	add	sp, #12
 8001998:	bcf0      	pop	{r4, r5, r6, r7}
 800199a:	46bb      	mov	fp, r7
 800199c:	46b2      	mov	sl, r6
 800199e:	46a9      	mov	r9, r5
 80019a0:	46a0      	mov	r8, r4
 80019a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a4:	2c00      	cmp	r4, #0
 80019a6:	d0dc      	beq.n	8001962 <__gedf2+0x4e>
 80019a8:	e7e6      	b.n	8001978 <__gedf2+0x64>
 80019aa:	2800      	cmp	r0, #0
 80019ac:	d0ef      	beq.n	800198e <__gedf2+0x7a>
 80019ae:	9b01      	ldr	r3, [sp, #4]
 80019b0:	4563      	cmp	r3, ip
 80019b2:	d1ec      	bne.n	800198e <__gedf2+0x7a>
 80019b4:	4582      	cmp	sl, r0
 80019b6:	dcea      	bgt.n	800198e <__gedf2+0x7a>
 80019b8:	dbe1      	blt.n	800197e <__gedf2+0x6a>
 80019ba:	428e      	cmp	r6, r1
 80019bc:	d8e7      	bhi.n	800198e <__gedf2+0x7a>
 80019be:	d1de      	bne.n	800197e <__gedf2+0x6a>
 80019c0:	45c8      	cmp	r8, r9
 80019c2:	d8e4      	bhi.n	800198e <__gedf2+0x7a>
 80019c4:	2000      	movs	r0, #0
 80019c6:	45c8      	cmp	r8, r9
 80019c8:	d2e5      	bcs.n	8001996 <__gedf2+0x82>
 80019ca:	e7d8      	b.n	800197e <__gedf2+0x6a>
 80019cc:	2c00      	cmp	r4, #0
 80019ce:	d0e2      	beq.n	8001996 <__gedf2+0x82>
 80019d0:	e7dd      	b.n	800198e <__gedf2+0x7a>
 80019d2:	4311      	orrs	r1, r2
 80019d4:	d104      	bne.n	80019e0 <__gedf2+0xcc>
 80019d6:	9b01      	ldr	r3, [sp, #4]
 80019d8:	4563      	cmp	r3, ip
 80019da:	d1d8      	bne.n	800198e <__gedf2+0x7a>
 80019dc:	2000      	movs	r0, #0
 80019de:	e7da      	b.n	8001996 <__gedf2+0x82>
 80019e0:	2002      	movs	r0, #2
 80019e2:	4240      	negs	r0, r0
 80019e4:	e7d7      	b.n	8001996 <__gedf2+0x82>
 80019e6:	9b01      	ldr	r3, [sp, #4]
 80019e8:	4563      	cmp	r3, ip
 80019ea:	d0e6      	beq.n	80019ba <__gedf2+0xa6>
 80019ec:	e7cf      	b.n	800198e <__gedf2+0x7a>
 80019ee:	46c0      	nop			@ (mov r8, r8)
 80019f0:	000007ff 	.word	0x000007ff

080019f4 <__ledf2>:
 80019f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f6:	4657      	mov	r7, sl
 80019f8:	464e      	mov	r6, r9
 80019fa:	4645      	mov	r5, r8
 80019fc:	46de      	mov	lr, fp
 80019fe:	b5e0      	push	{r5, r6, r7, lr}
 8001a00:	000d      	movs	r5, r1
 8001a02:	030e      	lsls	r6, r1, #12
 8001a04:	0049      	lsls	r1, r1, #1
 8001a06:	0d49      	lsrs	r1, r1, #21
 8001a08:	468a      	mov	sl, r1
 8001a0a:	0fdf      	lsrs	r7, r3, #31
 8001a0c:	0fe9      	lsrs	r1, r5, #31
 8001a0e:	46bc      	mov	ip, r7
 8001a10:	b083      	sub	sp, #12
 8001a12:	4f2e      	ldr	r7, [pc, #184]	@ (8001acc <__ledf2+0xd8>)
 8001a14:	0004      	movs	r4, r0
 8001a16:	4680      	mov	r8, r0
 8001a18:	9101      	str	r1, [sp, #4]
 8001a1a:	0058      	lsls	r0, r3, #1
 8001a1c:	0319      	lsls	r1, r3, #12
 8001a1e:	4691      	mov	r9, r2
 8001a20:	0b36      	lsrs	r6, r6, #12
 8001a22:	0b09      	lsrs	r1, r1, #12
 8001a24:	0d40      	lsrs	r0, r0, #21
 8001a26:	45ba      	cmp	sl, r7
 8001a28:	d01e      	beq.n	8001a68 <__ledf2+0x74>
 8001a2a:	42b8      	cmp	r0, r7
 8001a2c:	d00d      	beq.n	8001a4a <__ledf2+0x56>
 8001a2e:	4657      	mov	r7, sl
 8001a30:	2f00      	cmp	r7, #0
 8001a32:	d127      	bne.n	8001a84 <__ledf2+0x90>
 8001a34:	4334      	orrs	r4, r6
 8001a36:	2800      	cmp	r0, #0
 8001a38:	d133      	bne.n	8001aa2 <__ledf2+0xae>
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	d034      	beq.n	8001aa8 <__ledf2+0xb4>
 8001a3e:	2c00      	cmp	r4, #0
 8001a40:	d140      	bne.n	8001ac4 <__ledf2+0xd0>
 8001a42:	4663      	mov	r3, ip
 8001a44:	0058      	lsls	r0, r3, #1
 8001a46:	3801      	subs	r0, #1
 8001a48:	e015      	b.n	8001a76 <__ledf2+0x82>
 8001a4a:	4311      	orrs	r1, r2
 8001a4c:	d112      	bne.n	8001a74 <__ledf2+0x80>
 8001a4e:	4653      	mov	r3, sl
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <__ledf2+0x64>
 8001a54:	4326      	orrs	r6, r4
 8001a56:	d0f4      	beq.n	8001a42 <__ledf2+0x4e>
 8001a58:	9b01      	ldr	r3, [sp, #4]
 8001a5a:	4563      	cmp	r3, ip
 8001a5c:	d01d      	beq.n	8001a9a <__ledf2+0xa6>
 8001a5e:	2001      	movs	r0, #1
 8001a60:	9b01      	ldr	r3, [sp, #4]
 8001a62:	425f      	negs	r7, r3
 8001a64:	4338      	orrs	r0, r7
 8001a66:	e006      	b.n	8001a76 <__ledf2+0x82>
 8001a68:	4326      	orrs	r6, r4
 8001a6a:	d103      	bne.n	8001a74 <__ledf2+0x80>
 8001a6c:	4550      	cmp	r0, sl
 8001a6e:	d1f6      	bne.n	8001a5e <__ledf2+0x6a>
 8001a70:	4311      	orrs	r1, r2
 8001a72:	d01c      	beq.n	8001aae <__ledf2+0xba>
 8001a74:	2002      	movs	r0, #2
 8001a76:	b003      	add	sp, #12
 8001a78:	bcf0      	pop	{r4, r5, r6, r7}
 8001a7a:	46bb      	mov	fp, r7
 8001a7c:	46b2      	mov	sl, r6
 8001a7e:	46a9      	mov	r9, r5
 8001a80:	46a0      	mov	r8, r4
 8001a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a84:	2800      	cmp	r0, #0
 8001a86:	d0ea      	beq.n	8001a5e <__ledf2+0x6a>
 8001a88:	9b01      	ldr	r3, [sp, #4]
 8001a8a:	4563      	cmp	r3, ip
 8001a8c:	d1e7      	bne.n	8001a5e <__ledf2+0x6a>
 8001a8e:	4582      	cmp	sl, r0
 8001a90:	dce5      	bgt.n	8001a5e <__ledf2+0x6a>
 8001a92:	db02      	blt.n	8001a9a <__ledf2+0xa6>
 8001a94:	428e      	cmp	r6, r1
 8001a96:	d8e2      	bhi.n	8001a5e <__ledf2+0x6a>
 8001a98:	d00e      	beq.n	8001ab8 <__ledf2+0xc4>
 8001a9a:	9b01      	ldr	r3, [sp, #4]
 8001a9c:	0058      	lsls	r0, r3, #1
 8001a9e:	3801      	subs	r0, #1
 8001aa0:	e7e9      	b.n	8001a76 <__ledf2+0x82>
 8001aa2:	2c00      	cmp	r4, #0
 8001aa4:	d0cd      	beq.n	8001a42 <__ledf2+0x4e>
 8001aa6:	e7d7      	b.n	8001a58 <__ledf2+0x64>
 8001aa8:	2c00      	cmp	r4, #0
 8001aaa:	d0e4      	beq.n	8001a76 <__ledf2+0x82>
 8001aac:	e7d7      	b.n	8001a5e <__ledf2+0x6a>
 8001aae:	9b01      	ldr	r3, [sp, #4]
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	4563      	cmp	r3, ip
 8001ab4:	d0df      	beq.n	8001a76 <__ledf2+0x82>
 8001ab6:	e7d2      	b.n	8001a5e <__ledf2+0x6a>
 8001ab8:	45c8      	cmp	r8, r9
 8001aba:	d8d0      	bhi.n	8001a5e <__ledf2+0x6a>
 8001abc:	2000      	movs	r0, #0
 8001abe:	45c8      	cmp	r8, r9
 8001ac0:	d2d9      	bcs.n	8001a76 <__ledf2+0x82>
 8001ac2:	e7ea      	b.n	8001a9a <__ledf2+0xa6>
 8001ac4:	9b01      	ldr	r3, [sp, #4]
 8001ac6:	4563      	cmp	r3, ip
 8001ac8:	d0e4      	beq.n	8001a94 <__ledf2+0xa0>
 8001aca:	e7c8      	b.n	8001a5e <__ledf2+0x6a>
 8001acc:	000007ff 	.word	0x000007ff

08001ad0 <__aeabi_dmul>:
 8001ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad2:	4657      	mov	r7, sl
 8001ad4:	464e      	mov	r6, r9
 8001ad6:	46de      	mov	lr, fp
 8001ad8:	4645      	mov	r5, r8
 8001ada:	b5e0      	push	{r5, r6, r7, lr}
 8001adc:	001f      	movs	r7, r3
 8001ade:	030b      	lsls	r3, r1, #12
 8001ae0:	0b1b      	lsrs	r3, r3, #12
 8001ae2:	0016      	movs	r6, r2
 8001ae4:	469a      	mov	sl, r3
 8001ae6:	0fca      	lsrs	r2, r1, #31
 8001ae8:	004b      	lsls	r3, r1, #1
 8001aea:	0004      	movs	r4, r0
 8001aec:	4691      	mov	r9, r2
 8001aee:	b085      	sub	sp, #20
 8001af0:	0d5b      	lsrs	r3, r3, #21
 8001af2:	d100      	bne.n	8001af6 <__aeabi_dmul+0x26>
 8001af4:	e1cf      	b.n	8001e96 <__aeabi_dmul+0x3c6>
 8001af6:	4acd      	ldr	r2, [pc, #820]	@ (8001e2c <__aeabi_dmul+0x35c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d055      	beq.n	8001ba8 <__aeabi_dmul+0xd8>
 8001afc:	4651      	mov	r1, sl
 8001afe:	0f42      	lsrs	r2, r0, #29
 8001b00:	00c9      	lsls	r1, r1, #3
 8001b02:	430a      	orrs	r2, r1
 8001b04:	2180      	movs	r1, #128	@ 0x80
 8001b06:	0409      	lsls	r1, r1, #16
 8001b08:	4311      	orrs	r1, r2
 8001b0a:	00c2      	lsls	r2, r0, #3
 8001b0c:	4690      	mov	r8, r2
 8001b0e:	4ac8      	ldr	r2, [pc, #800]	@ (8001e30 <__aeabi_dmul+0x360>)
 8001b10:	468a      	mov	sl, r1
 8001b12:	4693      	mov	fp, r2
 8001b14:	449b      	add	fp, r3
 8001b16:	2300      	movs	r3, #0
 8001b18:	2500      	movs	r5, #0
 8001b1a:	9302      	str	r3, [sp, #8]
 8001b1c:	033c      	lsls	r4, r7, #12
 8001b1e:	007b      	lsls	r3, r7, #1
 8001b20:	0ffa      	lsrs	r2, r7, #31
 8001b22:	9601      	str	r6, [sp, #4]
 8001b24:	0b24      	lsrs	r4, r4, #12
 8001b26:	0d5b      	lsrs	r3, r3, #21
 8001b28:	9200      	str	r2, [sp, #0]
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_dmul+0x5e>
 8001b2c:	e188      	b.n	8001e40 <__aeabi_dmul+0x370>
 8001b2e:	4abf      	ldr	r2, [pc, #764]	@ (8001e2c <__aeabi_dmul+0x35c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d100      	bne.n	8001b36 <__aeabi_dmul+0x66>
 8001b34:	e092      	b.n	8001c5c <__aeabi_dmul+0x18c>
 8001b36:	4abe      	ldr	r2, [pc, #760]	@ (8001e30 <__aeabi_dmul+0x360>)
 8001b38:	4694      	mov	ip, r2
 8001b3a:	4463      	add	r3, ip
 8001b3c:	449b      	add	fp, r3
 8001b3e:	2d0a      	cmp	r5, #10
 8001b40:	dc42      	bgt.n	8001bc8 <__aeabi_dmul+0xf8>
 8001b42:	00e4      	lsls	r4, r4, #3
 8001b44:	0f73      	lsrs	r3, r6, #29
 8001b46:	4323      	orrs	r3, r4
 8001b48:	2480      	movs	r4, #128	@ 0x80
 8001b4a:	4649      	mov	r1, r9
 8001b4c:	0424      	lsls	r4, r4, #16
 8001b4e:	431c      	orrs	r4, r3
 8001b50:	00f3      	lsls	r3, r6, #3
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	9b00      	ldr	r3, [sp, #0]
 8001b56:	2000      	movs	r0, #0
 8001b58:	4059      	eors	r1, r3
 8001b5a:	b2cb      	uxtb	r3, r1
 8001b5c:	9303      	str	r3, [sp, #12]
 8001b5e:	2d02      	cmp	r5, #2
 8001b60:	dc00      	bgt.n	8001b64 <__aeabi_dmul+0x94>
 8001b62:	e094      	b.n	8001c8e <__aeabi_dmul+0x1be>
 8001b64:	2301      	movs	r3, #1
 8001b66:	40ab      	lsls	r3, r5
 8001b68:	001d      	movs	r5, r3
 8001b6a:	23a6      	movs	r3, #166	@ 0xa6
 8001b6c:	002a      	movs	r2, r5
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	401a      	ands	r2, r3
 8001b72:	421d      	tst	r5, r3
 8001b74:	d000      	beq.n	8001b78 <__aeabi_dmul+0xa8>
 8001b76:	e229      	b.n	8001fcc <__aeabi_dmul+0x4fc>
 8001b78:	2390      	movs	r3, #144	@ 0x90
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	421d      	tst	r5, r3
 8001b7e:	d100      	bne.n	8001b82 <__aeabi_dmul+0xb2>
 8001b80:	e24d      	b.n	800201e <__aeabi_dmul+0x54e>
 8001b82:	2300      	movs	r3, #0
 8001b84:	2480      	movs	r4, #128	@ 0x80
 8001b86:	4699      	mov	r9, r3
 8001b88:	0324      	lsls	r4, r4, #12
 8001b8a:	4ba8      	ldr	r3, [pc, #672]	@ (8001e2c <__aeabi_dmul+0x35c>)
 8001b8c:	0010      	movs	r0, r2
 8001b8e:	464a      	mov	r2, r9
 8001b90:	051b      	lsls	r3, r3, #20
 8001b92:	4323      	orrs	r3, r4
 8001b94:	07d2      	lsls	r2, r2, #31
 8001b96:	4313      	orrs	r3, r2
 8001b98:	0019      	movs	r1, r3
 8001b9a:	b005      	add	sp, #20
 8001b9c:	bcf0      	pop	{r4, r5, r6, r7}
 8001b9e:	46bb      	mov	fp, r7
 8001ba0:	46b2      	mov	sl, r6
 8001ba2:	46a9      	mov	r9, r5
 8001ba4:	46a0      	mov	r8, r4
 8001ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba8:	4652      	mov	r2, sl
 8001baa:	4302      	orrs	r2, r0
 8001bac:	4690      	mov	r8, r2
 8001bae:	d000      	beq.n	8001bb2 <__aeabi_dmul+0xe2>
 8001bb0:	e1ac      	b.n	8001f0c <__aeabi_dmul+0x43c>
 8001bb2:	469b      	mov	fp, r3
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	4692      	mov	sl, r2
 8001bb8:	2508      	movs	r5, #8
 8001bba:	9302      	str	r3, [sp, #8]
 8001bbc:	e7ae      	b.n	8001b1c <__aeabi_dmul+0x4c>
 8001bbe:	9b00      	ldr	r3, [sp, #0]
 8001bc0:	46a2      	mov	sl, r4
 8001bc2:	4699      	mov	r9, r3
 8001bc4:	9b01      	ldr	r3, [sp, #4]
 8001bc6:	4698      	mov	r8, r3
 8001bc8:	9b02      	ldr	r3, [sp, #8]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d100      	bne.n	8001bd0 <__aeabi_dmul+0x100>
 8001bce:	e1ca      	b.n	8001f66 <__aeabi_dmul+0x496>
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_dmul+0x106>
 8001bd4:	e192      	b.n	8001efc <__aeabi_dmul+0x42c>
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d110      	bne.n	8001bfc <__aeabi_dmul+0x12c>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	2400      	movs	r4, #0
 8001bde:	2200      	movs	r2, #0
 8001be0:	e7d4      	b.n	8001b8c <__aeabi_dmul+0xbc>
 8001be2:	2201      	movs	r2, #1
 8001be4:	087b      	lsrs	r3, r7, #1
 8001be6:	403a      	ands	r2, r7
 8001be8:	4313      	orrs	r3, r2
 8001bea:	4652      	mov	r2, sl
 8001bec:	07d2      	lsls	r2, r2, #31
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	4698      	mov	r8, r3
 8001bf2:	4653      	mov	r3, sl
 8001bf4:	085b      	lsrs	r3, r3, #1
 8001bf6:	469a      	mov	sl, r3
 8001bf8:	9b03      	ldr	r3, [sp, #12]
 8001bfa:	4699      	mov	r9, r3
 8001bfc:	465b      	mov	r3, fp
 8001bfe:	1c58      	adds	r0, r3, #1
 8001c00:	2380      	movs	r3, #128	@ 0x80
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	445b      	add	r3, fp
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	dc00      	bgt.n	8001c0c <__aeabi_dmul+0x13c>
 8001c0a:	e1b1      	b.n	8001f70 <__aeabi_dmul+0x4a0>
 8001c0c:	4642      	mov	r2, r8
 8001c0e:	0752      	lsls	r2, r2, #29
 8001c10:	d00b      	beq.n	8001c2a <__aeabi_dmul+0x15a>
 8001c12:	220f      	movs	r2, #15
 8001c14:	4641      	mov	r1, r8
 8001c16:	400a      	ands	r2, r1
 8001c18:	2a04      	cmp	r2, #4
 8001c1a:	d006      	beq.n	8001c2a <__aeabi_dmul+0x15a>
 8001c1c:	4642      	mov	r2, r8
 8001c1e:	1d11      	adds	r1, r2, #4
 8001c20:	4541      	cmp	r1, r8
 8001c22:	4192      	sbcs	r2, r2
 8001c24:	4688      	mov	r8, r1
 8001c26:	4252      	negs	r2, r2
 8001c28:	4492      	add	sl, r2
 8001c2a:	4652      	mov	r2, sl
 8001c2c:	01d2      	lsls	r2, r2, #7
 8001c2e:	d506      	bpl.n	8001c3e <__aeabi_dmul+0x16e>
 8001c30:	4652      	mov	r2, sl
 8001c32:	4b80      	ldr	r3, [pc, #512]	@ (8001e34 <__aeabi_dmul+0x364>)
 8001c34:	401a      	ands	r2, r3
 8001c36:	2380      	movs	r3, #128	@ 0x80
 8001c38:	4692      	mov	sl, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	18c3      	adds	r3, r0, r3
 8001c3e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e38 <__aeabi_dmul+0x368>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	dd00      	ble.n	8001c46 <__aeabi_dmul+0x176>
 8001c44:	e18f      	b.n	8001f66 <__aeabi_dmul+0x496>
 8001c46:	4642      	mov	r2, r8
 8001c48:	08d1      	lsrs	r1, r2, #3
 8001c4a:	4652      	mov	r2, sl
 8001c4c:	0752      	lsls	r2, r2, #29
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	4651      	mov	r1, sl
 8001c52:	055b      	lsls	r3, r3, #21
 8001c54:	024c      	lsls	r4, r1, #9
 8001c56:	0b24      	lsrs	r4, r4, #12
 8001c58:	0d5b      	lsrs	r3, r3, #21
 8001c5a:	e797      	b.n	8001b8c <__aeabi_dmul+0xbc>
 8001c5c:	4b73      	ldr	r3, [pc, #460]	@ (8001e2c <__aeabi_dmul+0x35c>)
 8001c5e:	4326      	orrs	r6, r4
 8001c60:	469c      	mov	ip, r3
 8001c62:	44e3      	add	fp, ip
 8001c64:	2e00      	cmp	r6, #0
 8001c66:	d100      	bne.n	8001c6a <__aeabi_dmul+0x19a>
 8001c68:	e16f      	b.n	8001f4a <__aeabi_dmul+0x47a>
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	4649      	mov	r1, r9
 8001c6e:	431d      	orrs	r5, r3
 8001c70:	9b00      	ldr	r3, [sp, #0]
 8001c72:	4059      	eors	r1, r3
 8001c74:	b2cb      	uxtb	r3, r1
 8001c76:	9303      	str	r3, [sp, #12]
 8001c78:	2d0a      	cmp	r5, #10
 8001c7a:	dd00      	ble.n	8001c7e <__aeabi_dmul+0x1ae>
 8001c7c:	e133      	b.n	8001ee6 <__aeabi_dmul+0x416>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	40ab      	lsls	r3, r5
 8001c82:	001d      	movs	r5, r3
 8001c84:	2303      	movs	r3, #3
 8001c86:	9302      	str	r3, [sp, #8]
 8001c88:	2288      	movs	r2, #136	@ 0x88
 8001c8a:	422a      	tst	r2, r5
 8001c8c:	d197      	bne.n	8001bbe <__aeabi_dmul+0xee>
 8001c8e:	4642      	mov	r2, r8
 8001c90:	4643      	mov	r3, r8
 8001c92:	0412      	lsls	r2, r2, #16
 8001c94:	0c12      	lsrs	r2, r2, #16
 8001c96:	0016      	movs	r6, r2
 8001c98:	9801      	ldr	r0, [sp, #4]
 8001c9a:	0c1d      	lsrs	r5, r3, #16
 8001c9c:	0c03      	lsrs	r3, r0, #16
 8001c9e:	0400      	lsls	r0, r0, #16
 8001ca0:	0c00      	lsrs	r0, r0, #16
 8001ca2:	4346      	muls	r6, r0
 8001ca4:	46b4      	mov	ip, r6
 8001ca6:	001e      	movs	r6, r3
 8001ca8:	436e      	muls	r6, r5
 8001caa:	9600      	str	r6, [sp, #0]
 8001cac:	0016      	movs	r6, r2
 8001cae:	0007      	movs	r7, r0
 8001cb0:	435e      	muls	r6, r3
 8001cb2:	4661      	mov	r1, ip
 8001cb4:	46b0      	mov	r8, r6
 8001cb6:	436f      	muls	r7, r5
 8001cb8:	0c0e      	lsrs	r6, r1, #16
 8001cba:	44b8      	add	r8, r7
 8001cbc:	4446      	add	r6, r8
 8001cbe:	42b7      	cmp	r7, r6
 8001cc0:	d905      	bls.n	8001cce <__aeabi_dmul+0x1fe>
 8001cc2:	2180      	movs	r1, #128	@ 0x80
 8001cc4:	0249      	lsls	r1, r1, #9
 8001cc6:	4688      	mov	r8, r1
 8001cc8:	9f00      	ldr	r7, [sp, #0]
 8001cca:	4447      	add	r7, r8
 8001ccc:	9700      	str	r7, [sp, #0]
 8001cce:	4661      	mov	r1, ip
 8001cd0:	0409      	lsls	r1, r1, #16
 8001cd2:	0c09      	lsrs	r1, r1, #16
 8001cd4:	0c37      	lsrs	r7, r6, #16
 8001cd6:	0436      	lsls	r6, r6, #16
 8001cd8:	468c      	mov	ip, r1
 8001cda:	0031      	movs	r1, r6
 8001cdc:	4461      	add	r1, ip
 8001cde:	9101      	str	r1, [sp, #4]
 8001ce0:	0011      	movs	r1, r2
 8001ce2:	0c26      	lsrs	r6, r4, #16
 8001ce4:	0424      	lsls	r4, r4, #16
 8001ce6:	0c24      	lsrs	r4, r4, #16
 8001ce8:	4361      	muls	r1, r4
 8001cea:	468c      	mov	ip, r1
 8001cec:	0021      	movs	r1, r4
 8001cee:	4369      	muls	r1, r5
 8001cf0:	4689      	mov	r9, r1
 8001cf2:	4661      	mov	r1, ip
 8001cf4:	0c09      	lsrs	r1, r1, #16
 8001cf6:	4688      	mov	r8, r1
 8001cf8:	4372      	muls	r2, r6
 8001cfa:	444a      	add	r2, r9
 8001cfc:	4442      	add	r2, r8
 8001cfe:	4375      	muls	r5, r6
 8001d00:	4591      	cmp	r9, r2
 8001d02:	d903      	bls.n	8001d0c <__aeabi_dmul+0x23c>
 8001d04:	2180      	movs	r1, #128	@ 0x80
 8001d06:	0249      	lsls	r1, r1, #9
 8001d08:	4688      	mov	r8, r1
 8001d0a:	4445      	add	r5, r8
 8001d0c:	0c11      	lsrs	r1, r2, #16
 8001d0e:	4688      	mov	r8, r1
 8001d10:	4661      	mov	r1, ip
 8001d12:	0409      	lsls	r1, r1, #16
 8001d14:	0c09      	lsrs	r1, r1, #16
 8001d16:	468c      	mov	ip, r1
 8001d18:	0412      	lsls	r2, r2, #16
 8001d1a:	4462      	add	r2, ip
 8001d1c:	18b9      	adds	r1, r7, r2
 8001d1e:	9102      	str	r1, [sp, #8]
 8001d20:	4651      	mov	r1, sl
 8001d22:	0c09      	lsrs	r1, r1, #16
 8001d24:	468c      	mov	ip, r1
 8001d26:	4651      	mov	r1, sl
 8001d28:	040f      	lsls	r7, r1, #16
 8001d2a:	0c3f      	lsrs	r7, r7, #16
 8001d2c:	0039      	movs	r1, r7
 8001d2e:	4341      	muls	r1, r0
 8001d30:	4445      	add	r5, r8
 8001d32:	4688      	mov	r8, r1
 8001d34:	4661      	mov	r1, ip
 8001d36:	4341      	muls	r1, r0
 8001d38:	468a      	mov	sl, r1
 8001d3a:	4641      	mov	r1, r8
 8001d3c:	4660      	mov	r0, ip
 8001d3e:	0c09      	lsrs	r1, r1, #16
 8001d40:	4689      	mov	r9, r1
 8001d42:	4358      	muls	r0, r3
 8001d44:	437b      	muls	r3, r7
 8001d46:	4453      	add	r3, sl
 8001d48:	444b      	add	r3, r9
 8001d4a:	459a      	cmp	sl, r3
 8001d4c:	d903      	bls.n	8001d56 <__aeabi_dmul+0x286>
 8001d4e:	2180      	movs	r1, #128	@ 0x80
 8001d50:	0249      	lsls	r1, r1, #9
 8001d52:	4689      	mov	r9, r1
 8001d54:	4448      	add	r0, r9
 8001d56:	0c19      	lsrs	r1, r3, #16
 8001d58:	4689      	mov	r9, r1
 8001d5a:	4641      	mov	r1, r8
 8001d5c:	0409      	lsls	r1, r1, #16
 8001d5e:	0c09      	lsrs	r1, r1, #16
 8001d60:	4688      	mov	r8, r1
 8001d62:	0039      	movs	r1, r7
 8001d64:	4361      	muls	r1, r4
 8001d66:	041b      	lsls	r3, r3, #16
 8001d68:	4443      	add	r3, r8
 8001d6a:	4688      	mov	r8, r1
 8001d6c:	4661      	mov	r1, ip
 8001d6e:	434c      	muls	r4, r1
 8001d70:	4371      	muls	r1, r6
 8001d72:	468c      	mov	ip, r1
 8001d74:	4641      	mov	r1, r8
 8001d76:	4377      	muls	r7, r6
 8001d78:	0c0e      	lsrs	r6, r1, #16
 8001d7a:	193f      	adds	r7, r7, r4
 8001d7c:	19f6      	adds	r6, r6, r7
 8001d7e:	4448      	add	r0, r9
 8001d80:	42b4      	cmp	r4, r6
 8001d82:	d903      	bls.n	8001d8c <__aeabi_dmul+0x2bc>
 8001d84:	2180      	movs	r1, #128	@ 0x80
 8001d86:	0249      	lsls	r1, r1, #9
 8001d88:	4689      	mov	r9, r1
 8001d8a:	44cc      	add	ip, r9
 8001d8c:	9902      	ldr	r1, [sp, #8]
 8001d8e:	9f00      	ldr	r7, [sp, #0]
 8001d90:	4689      	mov	r9, r1
 8001d92:	0431      	lsls	r1, r6, #16
 8001d94:	444f      	add	r7, r9
 8001d96:	4689      	mov	r9, r1
 8001d98:	4641      	mov	r1, r8
 8001d9a:	4297      	cmp	r7, r2
 8001d9c:	4192      	sbcs	r2, r2
 8001d9e:	040c      	lsls	r4, r1, #16
 8001da0:	0c24      	lsrs	r4, r4, #16
 8001da2:	444c      	add	r4, r9
 8001da4:	18ff      	adds	r7, r7, r3
 8001da6:	4252      	negs	r2, r2
 8001da8:	1964      	adds	r4, r4, r5
 8001daa:	18a1      	adds	r1, r4, r2
 8001dac:	429f      	cmp	r7, r3
 8001dae:	419b      	sbcs	r3, r3
 8001db0:	4688      	mov	r8, r1
 8001db2:	4682      	mov	sl, r0
 8001db4:	425b      	negs	r3, r3
 8001db6:	4699      	mov	r9, r3
 8001db8:	4590      	cmp	r8, r2
 8001dba:	4192      	sbcs	r2, r2
 8001dbc:	42ac      	cmp	r4, r5
 8001dbe:	41a4      	sbcs	r4, r4
 8001dc0:	44c2      	add	sl, r8
 8001dc2:	44d1      	add	r9, sl
 8001dc4:	4252      	negs	r2, r2
 8001dc6:	4264      	negs	r4, r4
 8001dc8:	4314      	orrs	r4, r2
 8001dca:	4599      	cmp	r9, r3
 8001dcc:	419b      	sbcs	r3, r3
 8001dce:	4582      	cmp	sl, r0
 8001dd0:	4192      	sbcs	r2, r2
 8001dd2:	425b      	negs	r3, r3
 8001dd4:	4252      	negs	r2, r2
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	464a      	mov	r2, r9
 8001dda:	0c36      	lsrs	r6, r6, #16
 8001ddc:	19a4      	adds	r4, r4, r6
 8001dde:	18e3      	adds	r3, r4, r3
 8001de0:	4463      	add	r3, ip
 8001de2:	025b      	lsls	r3, r3, #9
 8001de4:	0dd2      	lsrs	r2, r2, #23
 8001de6:	431a      	orrs	r2, r3
 8001de8:	9901      	ldr	r1, [sp, #4]
 8001dea:	4692      	mov	sl, r2
 8001dec:	027a      	lsls	r2, r7, #9
 8001dee:	430a      	orrs	r2, r1
 8001df0:	1e50      	subs	r0, r2, #1
 8001df2:	4182      	sbcs	r2, r0
 8001df4:	0dff      	lsrs	r7, r7, #23
 8001df6:	4317      	orrs	r7, r2
 8001df8:	464a      	mov	r2, r9
 8001dfa:	0252      	lsls	r2, r2, #9
 8001dfc:	4317      	orrs	r7, r2
 8001dfe:	46b8      	mov	r8, r7
 8001e00:	01db      	lsls	r3, r3, #7
 8001e02:	d500      	bpl.n	8001e06 <__aeabi_dmul+0x336>
 8001e04:	e6ed      	b.n	8001be2 <__aeabi_dmul+0x112>
 8001e06:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <__aeabi_dmul+0x36c>)
 8001e08:	9a03      	ldr	r2, [sp, #12]
 8001e0a:	445b      	add	r3, fp
 8001e0c:	4691      	mov	r9, r2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	dc00      	bgt.n	8001e14 <__aeabi_dmul+0x344>
 8001e12:	e0ac      	b.n	8001f6e <__aeabi_dmul+0x49e>
 8001e14:	003a      	movs	r2, r7
 8001e16:	0752      	lsls	r2, r2, #29
 8001e18:	d100      	bne.n	8001e1c <__aeabi_dmul+0x34c>
 8001e1a:	e710      	b.n	8001c3e <__aeabi_dmul+0x16e>
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	4658      	mov	r0, fp
 8001e20:	403a      	ands	r2, r7
 8001e22:	2a04      	cmp	r2, #4
 8001e24:	d000      	beq.n	8001e28 <__aeabi_dmul+0x358>
 8001e26:	e6f9      	b.n	8001c1c <__aeabi_dmul+0x14c>
 8001e28:	e709      	b.n	8001c3e <__aeabi_dmul+0x16e>
 8001e2a:	46c0      	nop			@ (mov r8, r8)
 8001e2c:	000007ff 	.word	0x000007ff
 8001e30:	fffffc01 	.word	0xfffffc01
 8001e34:	feffffff 	.word	0xfeffffff
 8001e38:	000007fe 	.word	0x000007fe
 8001e3c:	000003ff 	.word	0x000003ff
 8001e40:	0022      	movs	r2, r4
 8001e42:	4332      	orrs	r2, r6
 8001e44:	d06f      	beq.n	8001f26 <__aeabi_dmul+0x456>
 8001e46:	2c00      	cmp	r4, #0
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dmul+0x37c>
 8001e4a:	e0c2      	b.n	8001fd2 <__aeabi_dmul+0x502>
 8001e4c:	0020      	movs	r0, r4
 8001e4e:	f000 fea9 	bl	8002ba4 <__clzsi2>
 8001e52:	0002      	movs	r2, r0
 8001e54:	0003      	movs	r3, r0
 8001e56:	3a0b      	subs	r2, #11
 8001e58:	201d      	movs	r0, #29
 8001e5a:	1a82      	subs	r2, r0, r2
 8001e5c:	0030      	movs	r0, r6
 8001e5e:	0019      	movs	r1, r3
 8001e60:	40d0      	lsrs	r0, r2
 8001e62:	3908      	subs	r1, #8
 8001e64:	408c      	lsls	r4, r1
 8001e66:	0002      	movs	r2, r0
 8001e68:	4322      	orrs	r2, r4
 8001e6a:	0034      	movs	r4, r6
 8001e6c:	408c      	lsls	r4, r1
 8001e6e:	4659      	mov	r1, fp
 8001e70:	1acb      	subs	r3, r1, r3
 8001e72:	4986      	ldr	r1, [pc, #536]	@ (800208c <__aeabi_dmul+0x5bc>)
 8001e74:	468b      	mov	fp, r1
 8001e76:	449b      	add	fp, r3
 8001e78:	2d0a      	cmp	r5, #10
 8001e7a:	dd00      	ble.n	8001e7e <__aeabi_dmul+0x3ae>
 8001e7c:	e6a4      	b.n	8001bc8 <__aeabi_dmul+0xf8>
 8001e7e:	4649      	mov	r1, r9
 8001e80:	9b00      	ldr	r3, [sp, #0]
 8001e82:	9401      	str	r4, [sp, #4]
 8001e84:	4059      	eors	r1, r3
 8001e86:	b2cb      	uxtb	r3, r1
 8001e88:	0014      	movs	r4, r2
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	9303      	str	r3, [sp, #12]
 8001e8e:	2d02      	cmp	r5, #2
 8001e90:	dd00      	ble.n	8001e94 <__aeabi_dmul+0x3c4>
 8001e92:	e667      	b.n	8001b64 <__aeabi_dmul+0x94>
 8001e94:	e6fb      	b.n	8001c8e <__aeabi_dmul+0x1be>
 8001e96:	4653      	mov	r3, sl
 8001e98:	4303      	orrs	r3, r0
 8001e9a:	4698      	mov	r8, r3
 8001e9c:	d03c      	beq.n	8001f18 <__aeabi_dmul+0x448>
 8001e9e:	4653      	mov	r3, sl
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dmul+0x3d6>
 8001ea4:	e0a3      	b.n	8001fee <__aeabi_dmul+0x51e>
 8001ea6:	4650      	mov	r0, sl
 8001ea8:	f000 fe7c 	bl	8002ba4 <__clzsi2>
 8001eac:	230b      	movs	r3, #11
 8001eae:	425b      	negs	r3, r3
 8001eb0:	469c      	mov	ip, r3
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	4484      	add	ip, r0
 8001eb6:	0011      	movs	r1, r2
 8001eb8:	4650      	mov	r0, sl
 8001eba:	3908      	subs	r1, #8
 8001ebc:	4088      	lsls	r0, r1
 8001ebe:	231d      	movs	r3, #29
 8001ec0:	4680      	mov	r8, r0
 8001ec2:	4660      	mov	r0, ip
 8001ec4:	1a1b      	subs	r3, r3, r0
 8001ec6:	0020      	movs	r0, r4
 8001ec8:	40d8      	lsrs	r0, r3
 8001eca:	0003      	movs	r3, r0
 8001ecc:	4640      	mov	r0, r8
 8001ece:	4303      	orrs	r3, r0
 8001ed0:	469a      	mov	sl, r3
 8001ed2:	0023      	movs	r3, r4
 8001ed4:	408b      	lsls	r3, r1
 8001ed6:	4698      	mov	r8, r3
 8001ed8:	4b6c      	ldr	r3, [pc, #432]	@ (800208c <__aeabi_dmul+0x5bc>)
 8001eda:	2500      	movs	r5, #0
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	469b      	mov	fp, r3
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	9302      	str	r3, [sp, #8]
 8001ee4:	e61a      	b.n	8001b1c <__aeabi_dmul+0x4c>
 8001ee6:	2d0f      	cmp	r5, #15
 8001ee8:	d000      	beq.n	8001eec <__aeabi_dmul+0x41c>
 8001eea:	e0c9      	b.n	8002080 <__aeabi_dmul+0x5b0>
 8001eec:	2380      	movs	r3, #128	@ 0x80
 8001eee:	4652      	mov	r2, sl
 8001ef0:	031b      	lsls	r3, r3, #12
 8001ef2:	421a      	tst	r2, r3
 8001ef4:	d002      	beq.n	8001efc <__aeabi_dmul+0x42c>
 8001ef6:	421c      	tst	r4, r3
 8001ef8:	d100      	bne.n	8001efc <__aeabi_dmul+0x42c>
 8001efa:	e092      	b.n	8002022 <__aeabi_dmul+0x552>
 8001efc:	2480      	movs	r4, #128	@ 0x80
 8001efe:	4653      	mov	r3, sl
 8001f00:	0324      	lsls	r4, r4, #12
 8001f02:	431c      	orrs	r4, r3
 8001f04:	0324      	lsls	r4, r4, #12
 8001f06:	4642      	mov	r2, r8
 8001f08:	0b24      	lsrs	r4, r4, #12
 8001f0a:	e63e      	b.n	8001b8a <__aeabi_dmul+0xba>
 8001f0c:	469b      	mov	fp, r3
 8001f0e:	2303      	movs	r3, #3
 8001f10:	4680      	mov	r8, r0
 8001f12:	250c      	movs	r5, #12
 8001f14:	9302      	str	r3, [sp, #8]
 8001f16:	e601      	b.n	8001b1c <__aeabi_dmul+0x4c>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	469a      	mov	sl, r3
 8001f1c:	469b      	mov	fp, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	2504      	movs	r5, #4
 8001f22:	9302      	str	r3, [sp, #8]
 8001f24:	e5fa      	b.n	8001b1c <__aeabi_dmul+0x4c>
 8001f26:	2101      	movs	r1, #1
 8001f28:	430d      	orrs	r5, r1
 8001f2a:	2d0a      	cmp	r5, #10
 8001f2c:	dd00      	ble.n	8001f30 <__aeabi_dmul+0x460>
 8001f2e:	e64b      	b.n	8001bc8 <__aeabi_dmul+0xf8>
 8001f30:	4649      	mov	r1, r9
 8001f32:	9800      	ldr	r0, [sp, #0]
 8001f34:	4041      	eors	r1, r0
 8001f36:	b2c9      	uxtb	r1, r1
 8001f38:	9103      	str	r1, [sp, #12]
 8001f3a:	2d02      	cmp	r5, #2
 8001f3c:	dc00      	bgt.n	8001f40 <__aeabi_dmul+0x470>
 8001f3e:	e096      	b.n	800206e <__aeabi_dmul+0x59e>
 8001f40:	2300      	movs	r3, #0
 8001f42:	2400      	movs	r4, #0
 8001f44:	2001      	movs	r0, #1
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	e60c      	b.n	8001b64 <__aeabi_dmul+0x94>
 8001f4a:	4649      	mov	r1, r9
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	9a00      	ldr	r2, [sp, #0]
 8001f50:	432b      	orrs	r3, r5
 8001f52:	4051      	eors	r1, r2
 8001f54:	b2ca      	uxtb	r2, r1
 8001f56:	9203      	str	r2, [sp, #12]
 8001f58:	2b0a      	cmp	r3, #10
 8001f5a:	dd00      	ble.n	8001f5e <__aeabi_dmul+0x48e>
 8001f5c:	e634      	b.n	8001bc8 <__aeabi_dmul+0xf8>
 8001f5e:	2d00      	cmp	r5, #0
 8001f60:	d157      	bne.n	8002012 <__aeabi_dmul+0x542>
 8001f62:	9b03      	ldr	r3, [sp, #12]
 8001f64:	4699      	mov	r9, r3
 8001f66:	2400      	movs	r4, #0
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4b49      	ldr	r3, [pc, #292]	@ (8002090 <__aeabi_dmul+0x5c0>)
 8001f6c:	e60e      	b.n	8001b8c <__aeabi_dmul+0xbc>
 8001f6e:	4658      	mov	r0, fp
 8001f70:	2101      	movs	r1, #1
 8001f72:	1ac9      	subs	r1, r1, r3
 8001f74:	2938      	cmp	r1, #56	@ 0x38
 8001f76:	dd00      	ble.n	8001f7a <__aeabi_dmul+0x4aa>
 8001f78:	e62f      	b.n	8001bda <__aeabi_dmul+0x10a>
 8001f7a:	291f      	cmp	r1, #31
 8001f7c:	dd56      	ble.n	800202c <__aeabi_dmul+0x55c>
 8001f7e:	221f      	movs	r2, #31
 8001f80:	4654      	mov	r4, sl
 8001f82:	4252      	negs	r2, r2
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	40dc      	lsrs	r4, r3
 8001f88:	2920      	cmp	r1, #32
 8001f8a:	d007      	beq.n	8001f9c <__aeabi_dmul+0x4cc>
 8001f8c:	4b41      	ldr	r3, [pc, #260]	@ (8002094 <__aeabi_dmul+0x5c4>)
 8001f8e:	4642      	mov	r2, r8
 8001f90:	469c      	mov	ip, r3
 8001f92:	4653      	mov	r3, sl
 8001f94:	4460      	add	r0, ip
 8001f96:	4083      	lsls	r3, r0
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	4690      	mov	r8, r2
 8001f9c:	4642      	mov	r2, r8
 8001f9e:	2107      	movs	r1, #7
 8001fa0:	1e53      	subs	r3, r2, #1
 8001fa2:	419a      	sbcs	r2, r3
 8001fa4:	000b      	movs	r3, r1
 8001fa6:	4322      	orrs	r2, r4
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2400      	movs	r4, #0
 8001fac:	4211      	tst	r1, r2
 8001fae:	d009      	beq.n	8001fc4 <__aeabi_dmul+0x4f4>
 8001fb0:	230f      	movs	r3, #15
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b04      	cmp	r3, #4
 8001fb6:	d05d      	beq.n	8002074 <__aeabi_dmul+0x5a4>
 8001fb8:	1d11      	adds	r1, r2, #4
 8001fba:	4291      	cmp	r1, r2
 8001fbc:	419b      	sbcs	r3, r3
 8001fbe:	000a      	movs	r2, r1
 8001fc0:	425b      	negs	r3, r3
 8001fc2:	075b      	lsls	r3, r3, #29
 8001fc4:	08d2      	lsrs	r2, r2, #3
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	2300      	movs	r3, #0
 8001fca:	e5df      	b.n	8001b8c <__aeabi_dmul+0xbc>
 8001fcc:	9b03      	ldr	r3, [sp, #12]
 8001fce:	4699      	mov	r9, r3
 8001fd0:	e5fa      	b.n	8001bc8 <__aeabi_dmul+0xf8>
 8001fd2:	9801      	ldr	r0, [sp, #4]
 8001fd4:	f000 fde6 	bl	8002ba4 <__clzsi2>
 8001fd8:	0002      	movs	r2, r0
 8001fda:	0003      	movs	r3, r0
 8001fdc:	3215      	adds	r2, #21
 8001fde:	3320      	adds	r3, #32
 8001fe0:	2a1c      	cmp	r2, #28
 8001fe2:	dc00      	bgt.n	8001fe6 <__aeabi_dmul+0x516>
 8001fe4:	e738      	b.n	8001e58 <__aeabi_dmul+0x388>
 8001fe6:	9a01      	ldr	r2, [sp, #4]
 8001fe8:	3808      	subs	r0, #8
 8001fea:	4082      	lsls	r2, r0
 8001fec:	e73f      	b.n	8001e6e <__aeabi_dmul+0x39e>
 8001fee:	f000 fdd9 	bl	8002ba4 <__clzsi2>
 8001ff2:	2315      	movs	r3, #21
 8001ff4:	469c      	mov	ip, r3
 8001ff6:	4484      	add	ip, r0
 8001ff8:	0002      	movs	r2, r0
 8001ffa:	4663      	mov	r3, ip
 8001ffc:	3220      	adds	r2, #32
 8001ffe:	2b1c      	cmp	r3, #28
 8002000:	dc00      	bgt.n	8002004 <__aeabi_dmul+0x534>
 8002002:	e758      	b.n	8001eb6 <__aeabi_dmul+0x3e6>
 8002004:	2300      	movs	r3, #0
 8002006:	4698      	mov	r8, r3
 8002008:	0023      	movs	r3, r4
 800200a:	3808      	subs	r0, #8
 800200c:	4083      	lsls	r3, r0
 800200e:	469a      	mov	sl, r3
 8002010:	e762      	b.n	8001ed8 <__aeabi_dmul+0x408>
 8002012:	001d      	movs	r5, r3
 8002014:	2300      	movs	r3, #0
 8002016:	2400      	movs	r4, #0
 8002018:	2002      	movs	r0, #2
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	e5a2      	b.n	8001b64 <__aeabi_dmul+0x94>
 800201e:	9002      	str	r0, [sp, #8]
 8002020:	e632      	b.n	8001c88 <__aeabi_dmul+0x1b8>
 8002022:	431c      	orrs	r4, r3
 8002024:	9b00      	ldr	r3, [sp, #0]
 8002026:	9a01      	ldr	r2, [sp, #4]
 8002028:	4699      	mov	r9, r3
 800202a:	e5ae      	b.n	8001b8a <__aeabi_dmul+0xba>
 800202c:	4b1a      	ldr	r3, [pc, #104]	@ (8002098 <__aeabi_dmul+0x5c8>)
 800202e:	4652      	mov	r2, sl
 8002030:	18c3      	adds	r3, r0, r3
 8002032:	4640      	mov	r0, r8
 8002034:	409a      	lsls	r2, r3
 8002036:	40c8      	lsrs	r0, r1
 8002038:	4302      	orrs	r2, r0
 800203a:	4640      	mov	r0, r8
 800203c:	4098      	lsls	r0, r3
 800203e:	0003      	movs	r3, r0
 8002040:	1e58      	subs	r0, r3, #1
 8002042:	4183      	sbcs	r3, r0
 8002044:	4654      	mov	r4, sl
 8002046:	431a      	orrs	r2, r3
 8002048:	40cc      	lsrs	r4, r1
 800204a:	0753      	lsls	r3, r2, #29
 800204c:	d009      	beq.n	8002062 <__aeabi_dmul+0x592>
 800204e:	230f      	movs	r3, #15
 8002050:	4013      	ands	r3, r2
 8002052:	2b04      	cmp	r3, #4
 8002054:	d005      	beq.n	8002062 <__aeabi_dmul+0x592>
 8002056:	1d13      	adds	r3, r2, #4
 8002058:	4293      	cmp	r3, r2
 800205a:	4192      	sbcs	r2, r2
 800205c:	4252      	negs	r2, r2
 800205e:	18a4      	adds	r4, r4, r2
 8002060:	001a      	movs	r2, r3
 8002062:	0223      	lsls	r3, r4, #8
 8002064:	d508      	bpl.n	8002078 <__aeabi_dmul+0x5a8>
 8002066:	2301      	movs	r3, #1
 8002068:	2400      	movs	r4, #0
 800206a:	2200      	movs	r2, #0
 800206c:	e58e      	b.n	8001b8c <__aeabi_dmul+0xbc>
 800206e:	4689      	mov	r9, r1
 8002070:	2400      	movs	r4, #0
 8002072:	e58b      	b.n	8001b8c <__aeabi_dmul+0xbc>
 8002074:	2300      	movs	r3, #0
 8002076:	e7a5      	b.n	8001fc4 <__aeabi_dmul+0x4f4>
 8002078:	0763      	lsls	r3, r4, #29
 800207a:	0264      	lsls	r4, r4, #9
 800207c:	0b24      	lsrs	r4, r4, #12
 800207e:	e7a1      	b.n	8001fc4 <__aeabi_dmul+0x4f4>
 8002080:	9b00      	ldr	r3, [sp, #0]
 8002082:	46a2      	mov	sl, r4
 8002084:	4699      	mov	r9, r3
 8002086:	9b01      	ldr	r3, [sp, #4]
 8002088:	4698      	mov	r8, r3
 800208a:	e737      	b.n	8001efc <__aeabi_dmul+0x42c>
 800208c:	fffffc0d 	.word	0xfffffc0d
 8002090:	000007ff 	.word	0x000007ff
 8002094:	0000043e 	.word	0x0000043e
 8002098:	0000041e 	.word	0x0000041e

0800209c <__aeabi_dsub>:
 800209c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800209e:	4657      	mov	r7, sl
 80020a0:	464e      	mov	r6, r9
 80020a2:	4645      	mov	r5, r8
 80020a4:	46de      	mov	lr, fp
 80020a6:	b5e0      	push	{r5, r6, r7, lr}
 80020a8:	b083      	sub	sp, #12
 80020aa:	9000      	str	r0, [sp, #0]
 80020ac:	9101      	str	r1, [sp, #4]
 80020ae:	030c      	lsls	r4, r1, #12
 80020b0:	004d      	lsls	r5, r1, #1
 80020b2:	0fce      	lsrs	r6, r1, #31
 80020b4:	0a61      	lsrs	r1, r4, #9
 80020b6:	9c00      	ldr	r4, [sp, #0]
 80020b8:	005f      	lsls	r7, r3, #1
 80020ba:	0f64      	lsrs	r4, r4, #29
 80020bc:	430c      	orrs	r4, r1
 80020be:	9900      	ldr	r1, [sp, #0]
 80020c0:	9200      	str	r2, [sp, #0]
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	00c8      	lsls	r0, r1, #3
 80020c6:	0319      	lsls	r1, r3, #12
 80020c8:	0d7b      	lsrs	r3, r7, #21
 80020ca:	4699      	mov	r9, r3
 80020cc:	9b01      	ldr	r3, [sp, #4]
 80020ce:	4fcc      	ldr	r7, [pc, #816]	@ (8002400 <__aeabi_dsub+0x364>)
 80020d0:	0fdb      	lsrs	r3, r3, #31
 80020d2:	469c      	mov	ip, r3
 80020d4:	0a4b      	lsrs	r3, r1, #9
 80020d6:	9900      	ldr	r1, [sp, #0]
 80020d8:	4680      	mov	r8, r0
 80020da:	0f49      	lsrs	r1, r1, #29
 80020dc:	4319      	orrs	r1, r3
 80020de:	9b00      	ldr	r3, [sp, #0]
 80020e0:	468b      	mov	fp, r1
 80020e2:	00da      	lsls	r2, r3, #3
 80020e4:	4692      	mov	sl, r2
 80020e6:	0d6d      	lsrs	r5, r5, #21
 80020e8:	45b9      	cmp	r9, r7
 80020ea:	d100      	bne.n	80020ee <__aeabi_dsub+0x52>
 80020ec:	e0bf      	b.n	800226e <__aeabi_dsub+0x1d2>
 80020ee:	2301      	movs	r3, #1
 80020f0:	4661      	mov	r1, ip
 80020f2:	4059      	eors	r1, r3
 80020f4:	464b      	mov	r3, r9
 80020f6:	468c      	mov	ip, r1
 80020f8:	1aeb      	subs	r3, r5, r3
 80020fa:	428e      	cmp	r6, r1
 80020fc:	d075      	beq.n	80021ea <__aeabi_dsub+0x14e>
 80020fe:	2b00      	cmp	r3, #0
 8002100:	dc00      	bgt.n	8002104 <__aeabi_dsub+0x68>
 8002102:	e2a3      	b.n	800264c <__aeabi_dsub+0x5b0>
 8002104:	4649      	mov	r1, r9
 8002106:	2900      	cmp	r1, #0
 8002108:	d100      	bne.n	800210c <__aeabi_dsub+0x70>
 800210a:	e0ce      	b.n	80022aa <__aeabi_dsub+0x20e>
 800210c:	42bd      	cmp	r5, r7
 800210e:	d100      	bne.n	8002112 <__aeabi_dsub+0x76>
 8002110:	e200      	b.n	8002514 <__aeabi_dsub+0x478>
 8002112:	2701      	movs	r7, #1
 8002114:	2b38      	cmp	r3, #56	@ 0x38
 8002116:	dc19      	bgt.n	800214c <__aeabi_dsub+0xb0>
 8002118:	2780      	movs	r7, #128	@ 0x80
 800211a:	4659      	mov	r1, fp
 800211c:	043f      	lsls	r7, r7, #16
 800211e:	4339      	orrs	r1, r7
 8002120:	468b      	mov	fp, r1
 8002122:	2b1f      	cmp	r3, #31
 8002124:	dd00      	ble.n	8002128 <__aeabi_dsub+0x8c>
 8002126:	e1fa      	b.n	800251e <__aeabi_dsub+0x482>
 8002128:	2720      	movs	r7, #32
 800212a:	1af9      	subs	r1, r7, r3
 800212c:	468c      	mov	ip, r1
 800212e:	4659      	mov	r1, fp
 8002130:	4667      	mov	r7, ip
 8002132:	40b9      	lsls	r1, r7
 8002134:	000f      	movs	r7, r1
 8002136:	0011      	movs	r1, r2
 8002138:	40d9      	lsrs	r1, r3
 800213a:	430f      	orrs	r7, r1
 800213c:	4661      	mov	r1, ip
 800213e:	408a      	lsls	r2, r1
 8002140:	1e51      	subs	r1, r2, #1
 8002142:	418a      	sbcs	r2, r1
 8002144:	4659      	mov	r1, fp
 8002146:	40d9      	lsrs	r1, r3
 8002148:	4317      	orrs	r7, r2
 800214a:	1a64      	subs	r4, r4, r1
 800214c:	1bc7      	subs	r7, r0, r7
 800214e:	42b8      	cmp	r0, r7
 8002150:	4180      	sbcs	r0, r0
 8002152:	4240      	negs	r0, r0
 8002154:	1a24      	subs	r4, r4, r0
 8002156:	0223      	lsls	r3, r4, #8
 8002158:	d400      	bmi.n	800215c <__aeabi_dsub+0xc0>
 800215a:	e140      	b.n	80023de <__aeabi_dsub+0x342>
 800215c:	0264      	lsls	r4, r4, #9
 800215e:	0a64      	lsrs	r4, r4, #9
 8002160:	2c00      	cmp	r4, #0
 8002162:	d100      	bne.n	8002166 <__aeabi_dsub+0xca>
 8002164:	e154      	b.n	8002410 <__aeabi_dsub+0x374>
 8002166:	0020      	movs	r0, r4
 8002168:	f000 fd1c 	bl	8002ba4 <__clzsi2>
 800216c:	0003      	movs	r3, r0
 800216e:	3b08      	subs	r3, #8
 8002170:	2120      	movs	r1, #32
 8002172:	0038      	movs	r0, r7
 8002174:	1aca      	subs	r2, r1, r3
 8002176:	40d0      	lsrs	r0, r2
 8002178:	409c      	lsls	r4, r3
 800217a:	0002      	movs	r2, r0
 800217c:	409f      	lsls	r7, r3
 800217e:	4322      	orrs	r2, r4
 8002180:	429d      	cmp	r5, r3
 8002182:	dd00      	ble.n	8002186 <__aeabi_dsub+0xea>
 8002184:	e1a6      	b.n	80024d4 <__aeabi_dsub+0x438>
 8002186:	1b58      	subs	r0, r3, r5
 8002188:	3001      	adds	r0, #1
 800218a:	1a09      	subs	r1, r1, r0
 800218c:	003c      	movs	r4, r7
 800218e:	408f      	lsls	r7, r1
 8002190:	40c4      	lsrs	r4, r0
 8002192:	1e7b      	subs	r3, r7, #1
 8002194:	419f      	sbcs	r7, r3
 8002196:	0013      	movs	r3, r2
 8002198:	408b      	lsls	r3, r1
 800219a:	4327      	orrs	r7, r4
 800219c:	431f      	orrs	r7, r3
 800219e:	40c2      	lsrs	r2, r0
 80021a0:	003b      	movs	r3, r7
 80021a2:	0014      	movs	r4, r2
 80021a4:	2500      	movs	r5, #0
 80021a6:	4313      	orrs	r3, r2
 80021a8:	d100      	bne.n	80021ac <__aeabi_dsub+0x110>
 80021aa:	e1f7      	b.n	800259c <__aeabi_dsub+0x500>
 80021ac:	077b      	lsls	r3, r7, #29
 80021ae:	d100      	bne.n	80021b2 <__aeabi_dsub+0x116>
 80021b0:	e377      	b.n	80028a2 <__aeabi_dsub+0x806>
 80021b2:	230f      	movs	r3, #15
 80021b4:	0038      	movs	r0, r7
 80021b6:	403b      	ands	r3, r7
 80021b8:	2b04      	cmp	r3, #4
 80021ba:	d004      	beq.n	80021c6 <__aeabi_dsub+0x12a>
 80021bc:	1d38      	adds	r0, r7, #4
 80021be:	42b8      	cmp	r0, r7
 80021c0:	41bf      	sbcs	r7, r7
 80021c2:	427f      	negs	r7, r7
 80021c4:	19e4      	adds	r4, r4, r7
 80021c6:	0223      	lsls	r3, r4, #8
 80021c8:	d400      	bmi.n	80021cc <__aeabi_dsub+0x130>
 80021ca:	e368      	b.n	800289e <__aeabi_dsub+0x802>
 80021cc:	4b8c      	ldr	r3, [pc, #560]	@ (8002400 <__aeabi_dsub+0x364>)
 80021ce:	3501      	adds	r5, #1
 80021d0:	429d      	cmp	r5, r3
 80021d2:	d100      	bne.n	80021d6 <__aeabi_dsub+0x13a>
 80021d4:	e0f4      	b.n	80023c0 <__aeabi_dsub+0x324>
 80021d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002404 <__aeabi_dsub+0x368>)
 80021d8:	056d      	lsls	r5, r5, #21
 80021da:	401c      	ands	r4, r3
 80021dc:	0d6d      	lsrs	r5, r5, #21
 80021de:	0767      	lsls	r7, r4, #29
 80021e0:	08c0      	lsrs	r0, r0, #3
 80021e2:	0264      	lsls	r4, r4, #9
 80021e4:	4307      	orrs	r7, r0
 80021e6:	0b24      	lsrs	r4, r4, #12
 80021e8:	e0ec      	b.n	80023c4 <__aeabi_dsub+0x328>
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	dc00      	bgt.n	80021f0 <__aeabi_dsub+0x154>
 80021ee:	e329      	b.n	8002844 <__aeabi_dsub+0x7a8>
 80021f0:	4649      	mov	r1, r9
 80021f2:	2900      	cmp	r1, #0
 80021f4:	d000      	beq.n	80021f8 <__aeabi_dsub+0x15c>
 80021f6:	e0d6      	b.n	80023a6 <__aeabi_dsub+0x30a>
 80021f8:	4659      	mov	r1, fp
 80021fa:	4311      	orrs	r1, r2
 80021fc:	d100      	bne.n	8002200 <__aeabi_dsub+0x164>
 80021fe:	e12e      	b.n	800245e <__aeabi_dsub+0x3c2>
 8002200:	1e59      	subs	r1, r3, #1
 8002202:	2b01      	cmp	r3, #1
 8002204:	d100      	bne.n	8002208 <__aeabi_dsub+0x16c>
 8002206:	e1e6      	b.n	80025d6 <__aeabi_dsub+0x53a>
 8002208:	42bb      	cmp	r3, r7
 800220a:	d100      	bne.n	800220e <__aeabi_dsub+0x172>
 800220c:	e182      	b.n	8002514 <__aeabi_dsub+0x478>
 800220e:	2701      	movs	r7, #1
 8002210:	000b      	movs	r3, r1
 8002212:	2938      	cmp	r1, #56	@ 0x38
 8002214:	dc14      	bgt.n	8002240 <__aeabi_dsub+0x1a4>
 8002216:	2b1f      	cmp	r3, #31
 8002218:	dd00      	ble.n	800221c <__aeabi_dsub+0x180>
 800221a:	e23c      	b.n	8002696 <__aeabi_dsub+0x5fa>
 800221c:	2720      	movs	r7, #32
 800221e:	1af9      	subs	r1, r7, r3
 8002220:	468c      	mov	ip, r1
 8002222:	4659      	mov	r1, fp
 8002224:	4667      	mov	r7, ip
 8002226:	40b9      	lsls	r1, r7
 8002228:	000f      	movs	r7, r1
 800222a:	0011      	movs	r1, r2
 800222c:	40d9      	lsrs	r1, r3
 800222e:	430f      	orrs	r7, r1
 8002230:	4661      	mov	r1, ip
 8002232:	408a      	lsls	r2, r1
 8002234:	1e51      	subs	r1, r2, #1
 8002236:	418a      	sbcs	r2, r1
 8002238:	4659      	mov	r1, fp
 800223a:	40d9      	lsrs	r1, r3
 800223c:	4317      	orrs	r7, r2
 800223e:	1864      	adds	r4, r4, r1
 8002240:	183f      	adds	r7, r7, r0
 8002242:	4287      	cmp	r7, r0
 8002244:	4180      	sbcs	r0, r0
 8002246:	4240      	negs	r0, r0
 8002248:	1824      	adds	r4, r4, r0
 800224a:	0223      	lsls	r3, r4, #8
 800224c:	d400      	bmi.n	8002250 <__aeabi_dsub+0x1b4>
 800224e:	e0c6      	b.n	80023de <__aeabi_dsub+0x342>
 8002250:	4b6b      	ldr	r3, [pc, #428]	@ (8002400 <__aeabi_dsub+0x364>)
 8002252:	3501      	adds	r5, #1
 8002254:	429d      	cmp	r5, r3
 8002256:	d100      	bne.n	800225a <__aeabi_dsub+0x1be>
 8002258:	e0b2      	b.n	80023c0 <__aeabi_dsub+0x324>
 800225a:	2101      	movs	r1, #1
 800225c:	4b69      	ldr	r3, [pc, #420]	@ (8002404 <__aeabi_dsub+0x368>)
 800225e:	087a      	lsrs	r2, r7, #1
 8002260:	401c      	ands	r4, r3
 8002262:	4039      	ands	r1, r7
 8002264:	430a      	orrs	r2, r1
 8002266:	07e7      	lsls	r7, r4, #31
 8002268:	4317      	orrs	r7, r2
 800226a:	0864      	lsrs	r4, r4, #1
 800226c:	e79e      	b.n	80021ac <__aeabi_dsub+0x110>
 800226e:	4b66      	ldr	r3, [pc, #408]	@ (8002408 <__aeabi_dsub+0x36c>)
 8002270:	4311      	orrs	r1, r2
 8002272:	468a      	mov	sl, r1
 8002274:	18eb      	adds	r3, r5, r3
 8002276:	2900      	cmp	r1, #0
 8002278:	d028      	beq.n	80022cc <__aeabi_dsub+0x230>
 800227a:	4566      	cmp	r6, ip
 800227c:	d02c      	beq.n	80022d8 <__aeabi_dsub+0x23c>
 800227e:	2b00      	cmp	r3, #0
 8002280:	d05b      	beq.n	800233a <__aeabi_dsub+0x29e>
 8002282:	2d00      	cmp	r5, #0
 8002284:	d100      	bne.n	8002288 <__aeabi_dsub+0x1ec>
 8002286:	e12c      	b.n	80024e2 <__aeabi_dsub+0x446>
 8002288:	465b      	mov	r3, fp
 800228a:	4666      	mov	r6, ip
 800228c:	075f      	lsls	r7, r3, #29
 800228e:	08d2      	lsrs	r2, r2, #3
 8002290:	4317      	orrs	r7, r2
 8002292:	08dd      	lsrs	r5, r3, #3
 8002294:	003b      	movs	r3, r7
 8002296:	432b      	orrs	r3, r5
 8002298:	d100      	bne.n	800229c <__aeabi_dsub+0x200>
 800229a:	e0e2      	b.n	8002462 <__aeabi_dsub+0x3c6>
 800229c:	2480      	movs	r4, #128	@ 0x80
 800229e:	0324      	lsls	r4, r4, #12
 80022a0:	432c      	orrs	r4, r5
 80022a2:	0324      	lsls	r4, r4, #12
 80022a4:	4d56      	ldr	r5, [pc, #344]	@ (8002400 <__aeabi_dsub+0x364>)
 80022a6:	0b24      	lsrs	r4, r4, #12
 80022a8:	e08c      	b.n	80023c4 <__aeabi_dsub+0x328>
 80022aa:	4659      	mov	r1, fp
 80022ac:	4311      	orrs	r1, r2
 80022ae:	d100      	bne.n	80022b2 <__aeabi_dsub+0x216>
 80022b0:	e0d5      	b.n	800245e <__aeabi_dsub+0x3c2>
 80022b2:	1e59      	subs	r1, r3, #1
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d100      	bne.n	80022ba <__aeabi_dsub+0x21e>
 80022b8:	e1b9      	b.n	800262e <__aeabi_dsub+0x592>
 80022ba:	42bb      	cmp	r3, r7
 80022bc:	d100      	bne.n	80022c0 <__aeabi_dsub+0x224>
 80022be:	e1b1      	b.n	8002624 <__aeabi_dsub+0x588>
 80022c0:	2701      	movs	r7, #1
 80022c2:	000b      	movs	r3, r1
 80022c4:	2938      	cmp	r1, #56	@ 0x38
 80022c6:	dd00      	ble.n	80022ca <__aeabi_dsub+0x22e>
 80022c8:	e740      	b.n	800214c <__aeabi_dsub+0xb0>
 80022ca:	e72a      	b.n	8002122 <__aeabi_dsub+0x86>
 80022cc:	4661      	mov	r1, ip
 80022ce:	2701      	movs	r7, #1
 80022d0:	4079      	eors	r1, r7
 80022d2:	468c      	mov	ip, r1
 80022d4:	4566      	cmp	r6, ip
 80022d6:	d1d2      	bne.n	800227e <__aeabi_dsub+0x1e2>
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d100      	bne.n	80022de <__aeabi_dsub+0x242>
 80022dc:	e0c5      	b.n	800246a <__aeabi_dsub+0x3ce>
 80022de:	2d00      	cmp	r5, #0
 80022e0:	d000      	beq.n	80022e4 <__aeabi_dsub+0x248>
 80022e2:	e155      	b.n	8002590 <__aeabi_dsub+0x4f4>
 80022e4:	464b      	mov	r3, r9
 80022e6:	0025      	movs	r5, r4
 80022e8:	4305      	orrs	r5, r0
 80022ea:	d100      	bne.n	80022ee <__aeabi_dsub+0x252>
 80022ec:	e212      	b.n	8002714 <__aeabi_dsub+0x678>
 80022ee:	1e59      	subs	r1, r3, #1
 80022f0:	468c      	mov	ip, r1
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d100      	bne.n	80022f8 <__aeabi_dsub+0x25c>
 80022f6:	e249      	b.n	800278c <__aeabi_dsub+0x6f0>
 80022f8:	4d41      	ldr	r5, [pc, #260]	@ (8002400 <__aeabi_dsub+0x364>)
 80022fa:	42ab      	cmp	r3, r5
 80022fc:	d100      	bne.n	8002300 <__aeabi_dsub+0x264>
 80022fe:	e28f      	b.n	8002820 <__aeabi_dsub+0x784>
 8002300:	2701      	movs	r7, #1
 8002302:	2938      	cmp	r1, #56	@ 0x38
 8002304:	dc11      	bgt.n	800232a <__aeabi_dsub+0x28e>
 8002306:	4663      	mov	r3, ip
 8002308:	2b1f      	cmp	r3, #31
 800230a:	dd00      	ble.n	800230e <__aeabi_dsub+0x272>
 800230c:	e25b      	b.n	80027c6 <__aeabi_dsub+0x72a>
 800230e:	4661      	mov	r1, ip
 8002310:	2320      	movs	r3, #32
 8002312:	0027      	movs	r7, r4
 8002314:	1a5b      	subs	r3, r3, r1
 8002316:	0005      	movs	r5, r0
 8002318:	4098      	lsls	r0, r3
 800231a:	409f      	lsls	r7, r3
 800231c:	40cd      	lsrs	r5, r1
 800231e:	1e43      	subs	r3, r0, #1
 8002320:	4198      	sbcs	r0, r3
 8002322:	40cc      	lsrs	r4, r1
 8002324:	432f      	orrs	r7, r5
 8002326:	4307      	orrs	r7, r0
 8002328:	44a3      	add	fp, r4
 800232a:	18bf      	adds	r7, r7, r2
 800232c:	4297      	cmp	r7, r2
 800232e:	4192      	sbcs	r2, r2
 8002330:	4252      	negs	r2, r2
 8002332:	445a      	add	r2, fp
 8002334:	0014      	movs	r4, r2
 8002336:	464d      	mov	r5, r9
 8002338:	e787      	b.n	800224a <__aeabi_dsub+0x1ae>
 800233a:	4f34      	ldr	r7, [pc, #208]	@ (800240c <__aeabi_dsub+0x370>)
 800233c:	1c6b      	adds	r3, r5, #1
 800233e:	423b      	tst	r3, r7
 8002340:	d000      	beq.n	8002344 <__aeabi_dsub+0x2a8>
 8002342:	e0b6      	b.n	80024b2 <__aeabi_dsub+0x416>
 8002344:	4659      	mov	r1, fp
 8002346:	0023      	movs	r3, r4
 8002348:	4311      	orrs	r1, r2
 800234a:	000f      	movs	r7, r1
 800234c:	4303      	orrs	r3, r0
 800234e:	2d00      	cmp	r5, #0
 8002350:	d000      	beq.n	8002354 <__aeabi_dsub+0x2b8>
 8002352:	e126      	b.n	80025a2 <__aeabi_dsub+0x506>
 8002354:	2b00      	cmp	r3, #0
 8002356:	d100      	bne.n	800235a <__aeabi_dsub+0x2be>
 8002358:	e1c0      	b.n	80026dc <__aeabi_dsub+0x640>
 800235a:	2900      	cmp	r1, #0
 800235c:	d100      	bne.n	8002360 <__aeabi_dsub+0x2c4>
 800235e:	e0a1      	b.n	80024a4 <__aeabi_dsub+0x408>
 8002360:	1a83      	subs	r3, r0, r2
 8002362:	4698      	mov	r8, r3
 8002364:	465b      	mov	r3, fp
 8002366:	4540      	cmp	r0, r8
 8002368:	41ad      	sbcs	r5, r5
 800236a:	1ae3      	subs	r3, r4, r3
 800236c:	426d      	negs	r5, r5
 800236e:	1b5b      	subs	r3, r3, r5
 8002370:	2580      	movs	r5, #128	@ 0x80
 8002372:	042d      	lsls	r5, r5, #16
 8002374:	422b      	tst	r3, r5
 8002376:	d100      	bne.n	800237a <__aeabi_dsub+0x2de>
 8002378:	e14b      	b.n	8002612 <__aeabi_dsub+0x576>
 800237a:	465b      	mov	r3, fp
 800237c:	1a10      	subs	r0, r2, r0
 800237e:	4282      	cmp	r2, r0
 8002380:	4192      	sbcs	r2, r2
 8002382:	1b1c      	subs	r4, r3, r4
 8002384:	0007      	movs	r7, r0
 8002386:	2601      	movs	r6, #1
 8002388:	4663      	mov	r3, ip
 800238a:	4252      	negs	r2, r2
 800238c:	1aa4      	subs	r4, r4, r2
 800238e:	4327      	orrs	r7, r4
 8002390:	401e      	ands	r6, r3
 8002392:	2f00      	cmp	r7, #0
 8002394:	d100      	bne.n	8002398 <__aeabi_dsub+0x2fc>
 8002396:	e142      	b.n	800261e <__aeabi_dsub+0x582>
 8002398:	422c      	tst	r4, r5
 800239a:	d100      	bne.n	800239e <__aeabi_dsub+0x302>
 800239c:	e26d      	b.n	800287a <__aeabi_dsub+0x7de>
 800239e:	4b19      	ldr	r3, [pc, #100]	@ (8002404 <__aeabi_dsub+0x368>)
 80023a0:	2501      	movs	r5, #1
 80023a2:	401c      	ands	r4, r3
 80023a4:	e71b      	b.n	80021de <__aeabi_dsub+0x142>
 80023a6:	42bd      	cmp	r5, r7
 80023a8:	d100      	bne.n	80023ac <__aeabi_dsub+0x310>
 80023aa:	e13b      	b.n	8002624 <__aeabi_dsub+0x588>
 80023ac:	2701      	movs	r7, #1
 80023ae:	2b38      	cmp	r3, #56	@ 0x38
 80023b0:	dd00      	ble.n	80023b4 <__aeabi_dsub+0x318>
 80023b2:	e745      	b.n	8002240 <__aeabi_dsub+0x1a4>
 80023b4:	2780      	movs	r7, #128	@ 0x80
 80023b6:	4659      	mov	r1, fp
 80023b8:	043f      	lsls	r7, r7, #16
 80023ba:	4339      	orrs	r1, r7
 80023bc:	468b      	mov	fp, r1
 80023be:	e72a      	b.n	8002216 <__aeabi_dsub+0x17a>
 80023c0:	2400      	movs	r4, #0
 80023c2:	2700      	movs	r7, #0
 80023c4:	052d      	lsls	r5, r5, #20
 80023c6:	4325      	orrs	r5, r4
 80023c8:	07f6      	lsls	r6, r6, #31
 80023ca:	4335      	orrs	r5, r6
 80023cc:	0038      	movs	r0, r7
 80023ce:	0029      	movs	r1, r5
 80023d0:	b003      	add	sp, #12
 80023d2:	bcf0      	pop	{r4, r5, r6, r7}
 80023d4:	46bb      	mov	fp, r7
 80023d6:	46b2      	mov	sl, r6
 80023d8:	46a9      	mov	r9, r5
 80023da:	46a0      	mov	r8, r4
 80023dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023de:	077b      	lsls	r3, r7, #29
 80023e0:	d004      	beq.n	80023ec <__aeabi_dsub+0x350>
 80023e2:	230f      	movs	r3, #15
 80023e4:	403b      	ands	r3, r7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d000      	beq.n	80023ec <__aeabi_dsub+0x350>
 80023ea:	e6e7      	b.n	80021bc <__aeabi_dsub+0x120>
 80023ec:	002b      	movs	r3, r5
 80023ee:	08f8      	lsrs	r0, r7, #3
 80023f0:	4a03      	ldr	r2, [pc, #12]	@ (8002400 <__aeabi_dsub+0x364>)
 80023f2:	0767      	lsls	r7, r4, #29
 80023f4:	4307      	orrs	r7, r0
 80023f6:	08e5      	lsrs	r5, r4, #3
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d100      	bne.n	80023fe <__aeabi_dsub+0x362>
 80023fc:	e74a      	b.n	8002294 <__aeabi_dsub+0x1f8>
 80023fe:	e0a5      	b.n	800254c <__aeabi_dsub+0x4b0>
 8002400:	000007ff 	.word	0x000007ff
 8002404:	ff7fffff 	.word	0xff7fffff
 8002408:	fffff801 	.word	0xfffff801
 800240c:	000007fe 	.word	0x000007fe
 8002410:	0038      	movs	r0, r7
 8002412:	f000 fbc7 	bl	8002ba4 <__clzsi2>
 8002416:	0003      	movs	r3, r0
 8002418:	3318      	adds	r3, #24
 800241a:	2b1f      	cmp	r3, #31
 800241c:	dc00      	bgt.n	8002420 <__aeabi_dsub+0x384>
 800241e:	e6a7      	b.n	8002170 <__aeabi_dsub+0xd4>
 8002420:	003a      	movs	r2, r7
 8002422:	3808      	subs	r0, #8
 8002424:	4082      	lsls	r2, r0
 8002426:	429d      	cmp	r5, r3
 8002428:	dd00      	ble.n	800242c <__aeabi_dsub+0x390>
 800242a:	e08a      	b.n	8002542 <__aeabi_dsub+0x4a6>
 800242c:	1b5b      	subs	r3, r3, r5
 800242e:	1c58      	adds	r0, r3, #1
 8002430:	281f      	cmp	r0, #31
 8002432:	dc00      	bgt.n	8002436 <__aeabi_dsub+0x39a>
 8002434:	e1d8      	b.n	80027e8 <__aeabi_dsub+0x74c>
 8002436:	0017      	movs	r7, r2
 8002438:	3b1f      	subs	r3, #31
 800243a:	40df      	lsrs	r7, r3
 800243c:	2820      	cmp	r0, #32
 800243e:	d005      	beq.n	800244c <__aeabi_dsub+0x3b0>
 8002440:	2340      	movs	r3, #64	@ 0x40
 8002442:	1a1b      	subs	r3, r3, r0
 8002444:	409a      	lsls	r2, r3
 8002446:	1e53      	subs	r3, r2, #1
 8002448:	419a      	sbcs	r2, r3
 800244a:	4317      	orrs	r7, r2
 800244c:	2500      	movs	r5, #0
 800244e:	2f00      	cmp	r7, #0
 8002450:	d100      	bne.n	8002454 <__aeabi_dsub+0x3b8>
 8002452:	e0e5      	b.n	8002620 <__aeabi_dsub+0x584>
 8002454:	077b      	lsls	r3, r7, #29
 8002456:	d000      	beq.n	800245a <__aeabi_dsub+0x3be>
 8002458:	e6ab      	b.n	80021b2 <__aeabi_dsub+0x116>
 800245a:	002c      	movs	r4, r5
 800245c:	e7c6      	b.n	80023ec <__aeabi_dsub+0x350>
 800245e:	08c0      	lsrs	r0, r0, #3
 8002460:	e7c6      	b.n	80023f0 <__aeabi_dsub+0x354>
 8002462:	2700      	movs	r7, #0
 8002464:	2400      	movs	r4, #0
 8002466:	4dd1      	ldr	r5, [pc, #836]	@ (80027ac <__aeabi_dsub+0x710>)
 8002468:	e7ac      	b.n	80023c4 <__aeabi_dsub+0x328>
 800246a:	4fd1      	ldr	r7, [pc, #836]	@ (80027b0 <__aeabi_dsub+0x714>)
 800246c:	1c6b      	adds	r3, r5, #1
 800246e:	423b      	tst	r3, r7
 8002470:	d171      	bne.n	8002556 <__aeabi_dsub+0x4ba>
 8002472:	0023      	movs	r3, r4
 8002474:	4303      	orrs	r3, r0
 8002476:	2d00      	cmp	r5, #0
 8002478:	d000      	beq.n	800247c <__aeabi_dsub+0x3e0>
 800247a:	e14e      	b.n	800271a <__aeabi_dsub+0x67e>
 800247c:	4657      	mov	r7, sl
 800247e:	2b00      	cmp	r3, #0
 8002480:	d100      	bne.n	8002484 <__aeabi_dsub+0x3e8>
 8002482:	e1b5      	b.n	80027f0 <__aeabi_dsub+0x754>
 8002484:	2f00      	cmp	r7, #0
 8002486:	d00d      	beq.n	80024a4 <__aeabi_dsub+0x408>
 8002488:	1883      	adds	r3, r0, r2
 800248a:	4283      	cmp	r3, r0
 800248c:	4180      	sbcs	r0, r0
 800248e:	445c      	add	r4, fp
 8002490:	4240      	negs	r0, r0
 8002492:	1824      	adds	r4, r4, r0
 8002494:	0222      	lsls	r2, r4, #8
 8002496:	d500      	bpl.n	800249a <__aeabi_dsub+0x3fe>
 8002498:	e1c8      	b.n	800282c <__aeabi_dsub+0x790>
 800249a:	001f      	movs	r7, r3
 800249c:	4698      	mov	r8, r3
 800249e:	4327      	orrs	r7, r4
 80024a0:	d100      	bne.n	80024a4 <__aeabi_dsub+0x408>
 80024a2:	e0bc      	b.n	800261e <__aeabi_dsub+0x582>
 80024a4:	4643      	mov	r3, r8
 80024a6:	0767      	lsls	r7, r4, #29
 80024a8:	08db      	lsrs	r3, r3, #3
 80024aa:	431f      	orrs	r7, r3
 80024ac:	08e5      	lsrs	r5, r4, #3
 80024ae:	2300      	movs	r3, #0
 80024b0:	e04c      	b.n	800254c <__aeabi_dsub+0x4b0>
 80024b2:	1a83      	subs	r3, r0, r2
 80024b4:	4698      	mov	r8, r3
 80024b6:	465b      	mov	r3, fp
 80024b8:	4540      	cmp	r0, r8
 80024ba:	41bf      	sbcs	r7, r7
 80024bc:	1ae3      	subs	r3, r4, r3
 80024be:	427f      	negs	r7, r7
 80024c0:	1bdb      	subs	r3, r3, r7
 80024c2:	021f      	lsls	r7, r3, #8
 80024c4:	d47c      	bmi.n	80025c0 <__aeabi_dsub+0x524>
 80024c6:	4647      	mov	r7, r8
 80024c8:	431f      	orrs	r7, r3
 80024ca:	d100      	bne.n	80024ce <__aeabi_dsub+0x432>
 80024cc:	e0a6      	b.n	800261c <__aeabi_dsub+0x580>
 80024ce:	001c      	movs	r4, r3
 80024d0:	4647      	mov	r7, r8
 80024d2:	e645      	b.n	8002160 <__aeabi_dsub+0xc4>
 80024d4:	4cb7      	ldr	r4, [pc, #732]	@ (80027b4 <__aeabi_dsub+0x718>)
 80024d6:	1aed      	subs	r5, r5, r3
 80024d8:	4014      	ands	r4, r2
 80024da:	077b      	lsls	r3, r7, #29
 80024dc:	d000      	beq.n	80024e0 <__aeabi_dsub+0x444>
 80024de:	e780      	b.n	80023e2 <__aeabi_dsub+0x346>
 80024e0:	e784      	b.n	80023ec <__aeabi_dsub+0x350>
 80024e2:	464b      	mov	r3, r9
 80024e4:	0025      	movs	r5, r4
 80024e6:	4305      	orrs	r5, r0
 80024e8:	d066      	beq.n	80025b8 <__aeabi_dsub+0x51c>
 80024ea:	1e5f      	subs	r7, r3, #1
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dsub+0x456>
 80024f0:	e0fc      	b.n	80026ec <__aeabi_dsub+0x650>
 80024f2:	4dae      	ldr	r5, [pc, #696]	@ (80027ac <__aeabi_dsub+0x710>)
 80024f4:	42ab      	cmp	r3, r5
 80024f6:	d100      	bne.n	80024fa <__aeabi_dsub+0x45e>
 80024f8:	e15e      	b.n	80027b8 <__aeabi_dsub+0x71c>
 80024fa:	4666      	mov	r6, ip
 80024fc:	2f38      	cmp	r7, #56	@ 0x38
 80024fe:	dc00      	bgt.n	8002502 <__aeabi_dsub+0x466>
 8002500:	e0b4      	b.n	800266c <__aeabi_dsub+0x5d0>
 8002502:	2001      	movs	r0, #1
 8002504:	1a17      	subs	r7, r2, r0
 8002506:	42ba      	cmp	r2, r7
 8002508:	4192      	sbcs	r2, r2
 800250a:	465b      	mov	r3, fp
 800250c:	4252      	negs	r2, r2
 800250e:	464d      	mov	r5, r9
 8002510:	1a9c      	subs	r4, r3, r2
 8002512:	e620      	b.n	8002156 <__aeabi_dsub+0xba>
 8002514:	0767      	lsls	r7, r4, #29
 8002516:	08c0      	lsrs	r0, r0, #3
 8002518:	4307      	orrs	r7, r0
 800251a:	08e5      	lsrs	r5, r4, #3
 800251c:	e6ba      	b.n	8002294 <__aeabi_dsub+0x1f8>
 800251e:	001f      	movs	r7, r3
 8002520:	4659      	mov	r1, fp
 8002522:	3f20      	subs	r7, #32
 8002524:	40f9      	lsrs	r1, r7
 8002526:	000f      	movs	r7, r1
 8002528:	2b20      	cmp	r3, #32
 800252a:	d005      	beq.n	8002538 <__aeabi_dsub+0x49c>
 800252c:	2140      	movs	r1, #64	@ 0x40
 800252e:	1acb      	subs	r3, r1, r3
 8002530:	4659      	mov	r1, fp
 8002532:	4099      	lsls	r1, r3
 8002534:	430a      	orrs	r2, r1
 8002536:	4692      	mov	sl, r2
 8002538:	4653      	mov	r3, sl
 800253a:	1e5a      	subs	r2, r3, #1
 800253c:	4193      	sbcs	r3, r2
 800253e:	431f      	orrs	r7, r3
 8002540:	e604      	b.n	800214c <__aeabi_dsub+0xb0>
 8002542:	1aeb      	subs	r3, r5, r3
 8002544:	4d9b      	ldr	r5, [pc, #620]	@ (80027b4 <__aeabi_dsub+0x718>)
 8002546:	4015      	ands	r5, r2
 8002548:	076f      	lsls	r7, r5, #29
 800254a:	08ed      	lsrs	r5, r5, #3
 800254c:	032c      	lsls	r4, r5, #12
 800254e:	055d      	lsls	r5, r3, #21
 8002550:	0b24      	lsrs	r4, r4, #12
 8002552:	0d6d      	lsrs	r5, r5, #21
 8002554:	e736      	b.n	80023c4 <__aeabi_dsub+0x328>
 8002556:	4d95      	ldr	r5, [pc, #596]	@ (80027ac <__aeabi_dsub+0x710>)
 8002558:	42ab      	cmp	r3, r5
 800255a:	d100      	bne.n	800255e <__aeabi_dsub+0x4c2>
 800255c:	e0d6      	b.n	800270c <__aeabi_dsub+0x670>
 800255e:	1882      	adds	r2, r0, r2
 8002560:	0021      	movs	r1, r4
 8002562:	4282      	cmp	r2, r0
 8002564:	4180      	sbcs	r0, r0
 8002566:	4459      	add	r1, fp
 8002568:	4240      	negs	r0, r0
 800256a:	1808      	adds	r0, r1, r0
 800256c:	07c7      	lsls	r7, r0, #31
 800256e:	0852      	lsrs	r2, r2, #1
 8002570:	4317      	orrs	r7, r2
 8002572:	0844      	lsrs	r4, r0, #1
 8002574:	0752      	lsls	r2, r2, #29
 8002576:	d400      	bmi.n	800257a <__aeabi_dsub+0x4de>
 8002578:	e185      	b.n	8002886 <__aeabi_dsub+0x7ea>
 800257a:	220f      	movs	r2, #15
 800257c:	001d      	movs	r5, r3
 800257e:	403a      	ands	r2, r7
 8002580:	2a04      	cmp	r2, #4
 8002582:	d000      	beq.n	8002586 <__aeabi_dsub+0x4ea>
 8002584:	e61a      	b.n	80021bc <__aeabi_dsub+0x120>
 8002586:	08ff      	lsrs	r7, r7, #3
 8002588:	0764      	lsls	r4, r4, #29
 800258a:	4327      	orrs	r7, r4
 800258c:	0905      	lsrs	r5, r0, #4
 800258e:	e7dd      	b.n	800254c <__aeabi_dsub+0x4b0>
 8002590:	465b      	mov	r3, fp
 8002592:	08d2      	lsrs	r2, r2, #3
 8002594:	075f      	lsls	r7, r3, #29
 8002596:	4317      	orrs	r7, r2
 8002598:	08dd      	lsrs	r5, r3, #3
 800259a:	e67b      	b.n	8002294 <__aeabi_dsub+0x1f8>
 800259c:	2700      	movs	r7, #0
 800259e:	2400      	movs	r4, #0
 80025a0:	e710      	b.n	80023c4 <__aeabi_dsub+0x328>
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d000      	beq.n	80025a8 <__aeabi_dsub+0x50c>
 80025a6:	e0d6      	b.n	8002756 <__aeabi_dsub+0x6ba>
 80025a8:	2900      	cmp	r1, #0
 80025aa:	d000      	beq.n	80025ae <__aeabi_dsub+0x512>
 80025ac:	e12f      	b.n	800280e <__aeabi_dsub+0x772>
 80025ae:	2480      	movs	r4, #128	@ 0x80
 80025b0:	2600      	movs	r6, #0
 80025b2:	4d7e      	ldr	r5, [pc, #504]	@ (80027ac <__aeabi_dsub+0x710>)
 80025b4:	0324      	lsls	r4, r4, #12
 80025b6:	e705      	b.n	80023c4 <__aeabi_dsub+0x328>
 80025b8:	4666      	mov	r6, ip
 80025ba:	465c      	mov	r4, fp
 80025bc:	08d0      	lsrs	r0, r2, #3
 80025be:	e717      	b.n	80023f0 <__aeabi_dsub+0x354>
 80025c0:	465b      	mov	r3, fp
 80025c2:	1a17      	subs	r7, r2, r0
 80025c4:	42ba      	cmp	r2, r7
 80025c6:	4192      	sbcs	r2, r2
 80025c8:	1b1c      	subs	r4, r3, r4
 80025ca:	2601      	movs	r6, #1
 80025cc:	4663      	mov	r3, ip
 80025ce:	4252      	negs	r2, r2
 80025d0:	1aa4      	subs	r4, r4, r2
 80025d2:	401e      	ands	r6, r3
 80025d4:	e5c4      	b.n	8002160 <__aeabi_dsub+0xc4>
 80025d6:	1883      	adds	r3, r0, r2
 80025d8:	4283      	cmp	r3, r0
 80025da:	4180      	sbcs	r0, r0
 80025dc:	445c      	add	r4, fp
 80025de:	4240      	negs	r0, r0
 80025e0:	1825      	adds	r5, r4, r0
 80025e2:	022a      	lsls	r2, r5, #8
 80025e4:	d400      	bmi.n	80025e8 <__aeabi_dsub+0x54c>
 80025e6:	e0da      	b.n	800279e <__aeabi_dsub+0x702>
 80025e8:	4a72      	ldr	r2, [pc, #456]	@ (80027b4 <__aeabi_dsub+0x718>)
 80025ea:	085b      	lsrs	r3, r3, #1
 80025ec:	4015      	ands	r5, r2
 80025ee:	07ea      	lsls	r2, r5, #31
 80025f0:	431a      	orrs	r2, r3
 80025f2:	0869      	lsrs	r1, r5, #1
 80025f4:	075b      	lsls	r3, r3, #29
 80025f6:	d400      	bmi.n	80025fa <__aeabi_dsub+0x55e>
 80025f8:	e14a      	b.n	8002890 <__aeabi_dsub+0x7f4>
 80025fa:	230f      	movs	r3, #15
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d100      	bne.n	8002604 <__aeabi_dsub+0x568>
 8002602:	e0fc      	b.n	80027fe <__aeabi_dsub+0x762>
 8002604:	1d17      	adds	r7, r2, #4
 8002606:	4297      	cmp	r7, r2
 8002608:	41a4      	sbcs	r4, r4
 800260a:	4264      	negs	r4, r4
 800260c:	2502      	movs	r5, #2
 800260e:	1864      	adds	r4, r4, r1
 8002610:	e6ec      	b.n	80023ec <__aeabi_dsub+0x350>
 8002612:	4647      	mov	r7, r8
 8002614:	001c      	movs	r4, r3
 8002616:	431f      	orrs	r7, r3
 8002618:	d000      	beq.n	800261c <__aeabi_dsub+0x580>
 800261a:	e743      	b.n	80024a4 <__aeabi_dsub+0x408>
 800261c:	2600      	movs	r6, #0
 800261e:	2500      	movs	r5, #0
 8002620:	2400      	movs	r4, #0
 8002622:	e6cf      	b.n	80023c4 <__aeabi_dsub+0x328>
 8002624:	08c0      	lsrs	r0, r0, #3
 8002626:	0767      	lsls	r7, r4, #29
 8002628:	4307      	orrs	r7, r0
 800262a:	08e5      	lsrs	r5, r4, #3
 800262c:	e632      	b.n	8002294 <__aeabi_dsub+0x1f8>
 800262e:	1a87      	subs	r7, r0, r2
 8002630:	465b      	mov	r3, fp
 8002632:	42b8      	cmp	r0, r7
 8002634:	4180      	sbcs	r0, r0
 8002636:	1ae4      	subs	r4, r4, r3
 8002638:	4240      	negs	r0, r0
 800263a:	1a24      	subs	r4, r4, r0
 800263c:	0223      	lsls	r3, r4, #8
 800263e:	d428      	bmi.n	8002692 <__aeabi_dsub+0x5f6>
 8002640:	0763      	lsls	r3, r4, #29
 8002642:	08ff      	lsrs	r7, r7, #3
 8002644:	431f      	orrs	r7, r3
 8002646:	08e5      	lsrs	r5, r4, #3
 8002648:	2301      	movs	r3, #1
 800264a:	e77f      	b.n	800254c <__aeabi_dsub+0x4b0>
 800264c:	2b00      	cmp	r3, #0
 800264e:	d100      	bne.n	8002652 <__aeabi_dsub+0x5b6>
 8002650:	e673      	b.n	800233a <__aeabi_dsub+0x29e>
 8002652:	464b      	mov	r3, r9
 8002654:	1b5f      	subs	r7, r3, r5
 8002656:	003b      	movs	r3, r7
 8002658:	2d00      	cmp	r5, #0
 800265a:	d100      	bne.n	800265e <__aeabi_dsub+0x5c2>
 800265c:	e742      	b.n	80024e4 <__aeabi_dsub+0x448>
 800265e:	2f38      	cmp	r7, #56	@ 0x38
 8002660:	dd00      	ble.n	8002664 <__aeabi_dsub+0x5c8>
 8002662:	e0ec      	b.n	800283e <__aeabi_dsub+0x7a2>
 8002664:	2380      	movs	r3, #128	@ 0x80
 8002666:	000e      	movs	r6, r1
 8002668:	041b      	lsls	r3, r3, #16
 800266a:	431c      	orrs	r4, r3
 800266c:	2f1f      	cmp	r7, #31
 800266e:	dc25      	bgt.n	80026bc <__aeabi_dsub+0x620>
 8002670:	2520      	movs	r5, #32
 8002672:	0023      	movs	r3, r4
 8002674:	1bed      	subs	r5, r5, r7
 8002676:	0001      	movs	r1, r0
 8002678:	40a8      	lsls	r0, r5
 800267a:	40ab      	lsls	r3, r5
 800267c:	40f9      	lsrs	r1, r7
 800267e:	1e45      	subs	r5, r0, #1
 8002680:	41a8      	sbcs	r0, r5
 8002682:	430b      	orrs	r3, r1
 8002684:	40fc      	lsrs	r4, r7
 8002686:	4318      	orrs	r0, r3
 8002688:	465b      	mov	r3, fp
 800268a:	1b1b      	subs	r3, r3, r4
 800268c:	469b      	mov	fp, r3
 800268e:	e739      	b.n	8002504 <__aeabi_dsub+0x468>
 8002690:	4666      	mov	r6, ip
 8002692:	2501      	movs	r5, #1
 8002694:	e562      	b.n	800215c <__aeabi_dsub+0xc0>
 8002696:	001f      	movs	r7, r3
 8002698:	4659      	mov	r1, fp
 800269a:	3f20      	subs	r7, #32
 800269c:	40f9      	lsrs	r1, r7
 800269e:	468c      	mov	ip, r1
 80026a0:	2b20      	cmp	r3, #32
 80026a2:	d005      	beq.n	80026b0 <__aeabi_dsub+0x614>
 80026a4:	2740      	movs	r7, #64	@ 0x40
 80026a6:	4659      	mov	r1, fp
 80026a8:	1afb      	subs	r3, r7, r3
 80026aa:	4099      	lsls	r1, r3
 80026ac:	430a      	orrs	r2, r1
 80026ae:	4692      	mov	sl, r2
 80026b0:	4657      	mov	r7, sl
 80026b2:	1e7b      	subs	r3, r7, #1
 80026b4:	419f      	sbcs	r7, r3
 80026b6:	4663      	mov	r3, ip
 80026b8:	431f      	orrs	r7, r3
 80026ba:	e5c1      	b.n	8002240 <__aeabi_dsub+0x1a4>
 80026bc:	003b      	movs	r3, r7
 80026be:	0025      	movs	r5, r4
 80026c0:	3b20      	subs	r3, #32
 80026c2:	40dd      	lsrs	r5, r3
 80026c4:	2f20      	cmp	r7, #32
 80026c6:	d004      	beq.n	80026d2 <__aeabi_dsub+0x636>
 80026c8:	2340      	movs	r3, #64	@ 0x40
 80026ca:	1bdb      	subs	r3, r3, r7
 80026cc:	409c      	lsls	r4, r3
 80026ce:	4320      	orrs	r0, r4
 80026d0:	4680      	mov	r8, r0
 80026d2:	4640      	mov	r0, r8
 80026d4:	1e43      	subs	r3, r0, #1
 80026d6:	4198      	sbcs	r0, r3
 80026d8:	4328      	orrs	r0, r5
 80026da:	e713      	b.n	8002504 <__aeabi_dsub+0x468>
 80026dc:	2900      	cmp	r1, #0
 80026de:	d09d      	beq.n	800261c <__aeabi_dsub+0x580>
 80026e0:	2601      	movs	r6, #1
 80026e2:	4663      	mov	r3, ip
 80026e4:	465c      	mov	r4, fp
 80026e6:	4690      	mov	r8, r2
 80026e8:	401e      	ands	r6, r3
 80026ea:	e6db      	b.n	80024a4 <__aeabi_dsub+0x408>
 80026ec:	1a17      	subs	r7, r2, r0
 80026ee:	465b      	mov	r3, fp
 80026f0:	42ba      	cmp	r2, r7
 80026f2:	4192      	sbcs	r2, r2
 80026f4:	1b1c      	subs	r4, r3, r4
 80026f6:	4252      	negs	r2, r2
 80026f8:	1aa4      	subs	r4, r4, r2
 80026fa:	0223      	lsls	r3, r4, #8
 80026fc:	d4c8      	bmi.n	8002690 <__aeabi_dsub+0x5f4>
 80026fe:	0763      	lsls	r3, r4, #29
 8002700:	08ff      	lsrs	r7, r7, #3
 8002702:	431f      	orrs	r7, r3
 8002704:	4666      	mov	r6, ip
 8002706:	2301      	movs	r3, #1
 8002708:	08e5      	lsrs	r5, r4, #3
 800270a:	e71f      	b.n	800254c <__aeabi_dsub+0x4b0>
 800270c:	001d      	movs	r5, r3
 800270e:	2400      	movs	r4, #0
 8002710:	2700      	movs	r7, #0
 8002712:	e657      	b.n	80023c4 <__aeabi_dsub+0x328>
 8002714:	465c      	mov	r4, fp
 8002716:	08d0      	lsrs	r0, r2, #3
 8002718:	e66a      	b.n	80023f0 <__aeabi_dsub+0x354>
 800271a:	2b00      	cmp	r3, #0
 800271c:	d100      	bne.n	8002720 <__aeabi_dsub+0x684>
 800271e:	e737      	b.n	8002590 <__aeabi_dsub+0x4f4>
 8002720:	4653      	mov	r3, sl
 8002722:	08c0      	lsrs	r0, r0, #3
 8002724:	0767      	lsls	r7, r4, #29
 8002726:	4307      	orrs	r7, r0
 8002728:	08e5      	lsrs	r5, r4, #3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d100      	bne.n	8002730 <__aeabi_dsub+0x694>
 800272e:	e5b1      	b.n	8002294 <__aeabi_dsub+0x1f8>
 8002730:	2380      	movs	r3, #128	@ 0x80
 8002732:	031b      	lsls	r3, r3, #12
 8002734:	421d      	tst	r5, r3
 8002736:	d008      	beq.n	800274a <__aeabi_dsub+0x6ae>
 8002738:	4659      	mov	r1, fp
 800273a:	08c8      	lsrs	r0, r1, #3
 800273c:	4218      	tst	r0, r3
 800273e:	d104      	bne.n	800274a <__aeabi_dsub+0x6ae>
 8002740:	08d2      	lsrs	r2, r2, #3
 8002742:	0749      	lsls	r1, r1, #29
 8002744:	430a      	orrs	r2, r1
 8002746:	0017      	movs	r7, r2
 8002748:	0005      	movs	r5, r0
 800274a:	0f7b      	lsrs	r3, r7, #29
 800274c:	00ff      	lsls	r7, r7, #3
 800274e:	08ff      	lsrs	r7, r7, #3
 8002750:	075b      	lsls	r3, r3, #29
 8002752:	431f      	orrs	r7, r3
 8002754:	e59e      	b.n	8002294 <__aeabi_dsub+0x1f8>
 8002756:	08c0      	lsrs	r0, r0, #3
 8002758:	0763      	lsls	r3, r4, #29
 800275a:	4318      	orrs	r0, r3
 800275c:	08e5      	lsrs	r5, r4, #3
 800275e:	2900      	cmp	r1, #0
 8002760:	d053      	beq.n	800280a <__aeabi_dsub+0x76e>
 8002762:	2380      	movs	r3, #128	@ 0x80
 8002764:	031b      	lsls	r3, r3, #12
 8002766:	421d      	tst	r5, r3
 8002768:	d00a      	beq.n	8002780 <__aeabi_dsub+0x6e4>
 800276a:	4659      	mov	r1, fp
 800276c:	08cc      	lsrs	r4, r1, #3
 800276e:	421c      	tst	r4, r3
 8002770:	d106      	bne.n	8002780 <__aeabi_dsub+0x6e4>
 8002772:	2601      	movs	r6, #1
 8002774:	4663      	mov	r3, ip
 8002776:	0025      	movs	r5, r4
 8002778:	08d0      	lsrs	r0, r2, #3
 800277a:	0749      	lsls	r1, r1, #29
 800277c:	4308      	orrs	r0, r1
 800277e:	401e      	ands	r6, r3
 8002780:	0f47      	lsrs	r7, r0, #29
 8002782:	00c0      	lsls	r0, r0, #3
 8002784:	08c0      	lsrs	r0, r0, #3
 8002786:	077f      	lsls	r7, r7, #29
 8002788:	4307      	orrs	r7, r0
 800278a:	e583      	b.n	8002294 <__aeabi_dsub+0x1f8>
 800278c:	1883      	adds	r3, r0, r2
 800278e:	4293      	cmp	r3, r2
 8002790:	4192      	sbcs	r2, r2
 8002792:	445c      	add	r4, fp
 8002794:	4252      	negs	r2, r2
 8002796:	18a5      	adds	r5, r4, r2
 8002798:	022a      	lsls	r2, r5, #8
 800279a:	d500      	bpl.n	800279e <__aeabi_dsub+0x702>
 800279c:	e724      	b.n	80025e8 <__aeabi_dsub+0x54c>
 800279e:	076f      	lsls	r7, r5, #29
 80027a0:	08db      	lsrs	r3, r3, #3
 80027a2:	431f      	orrs	r7, r3
 80027a4:	08ed      	lsrs	r5, r5, #3
 80027a6:	2301      	movs	r3, #1
 80027a8:	e6d0      	b.n	800254c <__aeabi_dsub+0x4b0>
 80027aa:	46c0      	nop			@ (mov r8, r8)
 80027ac:	000007ff 	.word	0x000007ff
 80027b0:	000007fe 	.word	0x000007fe
 80027b4:	ff7fffff 	.word	0xff7fffff
 80027b8:	465b      	mov	r3, fp
 80027ba:	08d2      	lsrs	r2, r2, #3
 80027bc:	075f      	lsls	r7, r3, #29
 80027be:	4666      	mov	r6, ip
 80027c0:	4317      	orrs	r7, r2
 80027c2:	08dd      	lsrs	r5, r3, #3
 80027c4:	e566      	b.n	8002294 <__aeabi_dsub+0x1f8>
 80027c6:	0025      	movs	r5, r4
 80027c8:	3b20      	subs	r3, #32
 80027ca:	40dd      	lsrs	r5, r3
 80027cc:	4663      	mov	r3, ip
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	d005      	beq.n	80027de <__aeabi_dsub+0x742>
 80027d2:	2340      	movs	r3, #64	@ 0x40
 80027d4:	4661      	mov	r1, ip
 80027d6:	1a5b      	subs	r3, r3, r1
 80027d8:	409c      	lsls	r4, r3
 80027da:	4320      	orrs	r0, r4
 80027dc:	4680      	mov	r8, r0
 80027de:	4647      	mov	r7, r8
 80027e0:	1e7b      	subs	r3, r7, #1
 80027e2:	419f      	sbcs	r7, r3
 80027e4:	432f      	orrs	r7, r5
 80027e6:	e5a0      	b.n	800232a <__aeabi_dsub+0x28e>
 80027e8:	2120      	movs	r1, #32
 80027ea:	2700      	movs	r7, #0
 80027ec:	1a09      	subs	r1, r1, r0
 80027ee:	e4d2      	b.n	8002196 <__aeabi_dsub+0xfa>
 80027f0:	2f00      	cmp	r7, #0
 80027f2:	d100      	bne.n	80027f6 <__aeabi_dsub+0x75a>
 80027f4:	e713      	b.n	800261e <__aeabi_dsub+0x582>
 80027f6:	465c      	mov	r4, fp
 80027f8:	0017      	movs	r7, r2
 80027fa:	2500      	movs	r5, #0
 80027fc:	e5f6      	b.n	80023ec <__aeabi_dsub+0x350>
 80027fe:	08d7      	lsrs	r7, r2, #3
 8002800:	0749      	lsls	r1, r1, #29
 8002802:	2302      	movs	r3, #2
 8002804:	430f      	orrs	r7, r1
 8002806:	092d      	lsrs	r5, r5, #4
 8002808:	e6a0      	b.n	800254c <__aeabi_dsub+0x4b0>
 800280a:	0007      	movs	r7, r0
 800280c:	e542      	b.n	8002294 <__aeabi_dsub+0x1f8>
 800280e:	465b      	mov	r3, fp
 8002810:	2601      	movs	r6, #1
 8002812:	075f      	lsls	r7, r3, #29
 8002814:	08dd      	lsrs	r5, r3, #3
 8002816:	4663      	mov	r3, ip
 8002818:	08d2      	lsrs	r2, r2, #3
 800281a:	4317      	orrs	r7, r2
 800281c:	401e      	ands	r6, r3
 800281e:	e539      	b.n	8002294 <__aeabi_dsub+0x1f8>
 8002820:	465b      	mov	r3, fp
 8002822:	08d2      	lsrs	r2, r2, #3
 8002824:	075f      	lsls	r7, r3, #29
 8002826:	4317      	orrs	r7, r2
 8002828:	08dd      	lsrs	r5, r3, #3
 800282a:	e533      	b.n	8002294 <__aeabi_dsub+0x1f8>
 800282c:	4a1e      	ldr	r2, [pc, #120]	@ (80028a8 <__aeabi_dsub+0x80c>)
 800282e:	08db      	lsrs	r3, r3, #3
 8002830:	4022      	ands	r2, r4
 8002832:	0757      	lsls	r7, r2, #29
 8002834:	0252      	lsls	r2, r2, #9
 8002836:	2501      	movs	r5, #1
 8002838:	431f      	orrs	r7, r3
 800283a:	0b14      	lsrs	r4, r2, #12
 800283c:	e5c2      	b.n	80023c4 <__aeabi_dsub+0x328>
 800283e:	000e      	movs	r6, r1
 8002840:	2001      	movs	r0, #1
 8002842:	e65f      	b.n	8002504 <__aeabi_dsub+0x468>
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00d      	beq.n	8002864 <__aeabi_dsub+0x7c8>
 8002848:	464b      	mov	r3, r9
 800284a:	1b5b      	subs	r3, r3, r5
 800284c:	469c      	mov	ip, r3
 800284e:	2d00      	cmp	r5, #0
 8002850:	d100      	bne.n	8002854 <__aeabi_dsub+0x7b8>
 8002852:	e548      	b.n	80022e6 <__aeabi_dsub+0x24a>
 8002854:	2701      	movs	r7, #1
 8002856:	2b38      	cmp	r3, #56	@ 0x38
 8002858:	dd00      	ble.n	800285c <__aeabi_dsub+0x7c0>
 800285a:	e566      	b.n	800232a <__aeabi_dsub+0x28e>
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	041b      	lsls	r3, r3, #16
 8002860:	431c      	orrs	r4, r3
 8002862:	e550      	b.n	8002306 <__aeabi_dsub+0x26a>
 8002864:	1c6b      	adds	r3, r5, #1
 8002866:	4d11      	ldr	r5, [pc, #68]	@ (80028ac <__aeabi_dsub+0x810>)
 8002868:	422b      	tst	r3, r5
 800286a:	d000      	beq.n	800286e <__aeabi_dsub+0x7d2>
 800286c:	e673      	b.n	8002556 <__aeabi_dsub+0x4ba>
 800286e:	4659      	mov	r1, fp
 8002870:	0023      	movs	r3, r4
 8002872:	4311      	orrs	r1, r2
 8002874:	468a      	mov	sl, r1
 8002876:	4303      	orrs	r3, r0
 8002878:	e600      	b.n	800247c <__aeabi_dsub+0x3e0>
 800287a:	0767      	lsls	r7, r4, #29
 800287c:	08c0      	lsrs	r0, r0, #3
 800287e:	2300      	movs	r3, #0
 8002880:	4307      	orrs	r7, r0
 8002882:	08e5      	lsrs	r5, r4, #3
 8002884:	e662      	b.n	800254c <__aeabi_dsub+0x4b0>
 8002886:	0764      	lsls	r4, r4, #29
 8002888:	08ff      	lsrs	r7, r7, #3
 800288a:	4327      	orrs	r7, r4
 800288c:	0905      	lsrs	r5, r0, #4
 800288e:	e65d      	b.n	800254c <__aeabi_dsub+0x4b0>
 8002890:	08d2      	lsrs	r2, r2, #3
 8002892:	0749      	lsls	r1, r1, #29
 8002894:	4311      	orrs	r1, r2
 8002896:	000f      	movs	r7, r1
 8002898:	2302      	movs	r3, #2
 800289a:	092d      	lsrs	r5, r5, #4
 800289c:	e656      	b.n	800254c <__aeabi_dsub+0x4b0>
 800289e:	0007      	movs	r7, r0
 80028a0:	e5a4      	b.n	80023ec <__aeabi_dsub+0x350>
 80028a2:	0038      	movs	r0, r7
 80028a4:	e48f      	b.n	80021c6 <__aeabi_dsub+0x12a>
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	ff7fffff 	.word	0xff7fffff
 80028ac:	000007fe 	.word	0x000007fe

080028b0 <__aeabi_dcmpun>:
 80028b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b2:	46c6      	mov	lr, r8
 80028b4:	031e      	lsls	r6, r3, #12
 80028b6:	0b36      	lsrs	r6, r6, #12
 80028b8:	46b0      	mov	r8, r6
 80028ba:	4e0d      	ldr	r6, [pc, #52]	@ (80028f0 <__aeabi_dcmpun+0x40>)
 80028bc:	030c      	lsls	r4, r1, #12
 80028be:	004d      	lsls	r5, r1, #1
 80028c0:	005f      	lsls	r7, r3, #1
 80028c2:	b500      	push	{lr}
 80028c4:	0b24      	lsrs	r4, r4, #12
 80028c6:	0d6d      	lsrs	r5, r5, #21
 80028c8:	0d7f      	lsrs	r7, r7, #21
 80028ca:	42b5      	cmp	r5, r6
 80028cc:	d00b      	beq.n	80028e6 <__aeabi_dcmpun+0x36>
 80028ce:	4908      	ldr	r1, [pc, #32]	@ (80028f0 <__aeabi_dcmpun+0x40>)
 80028d0:	2000      	movs	r0, #0
 80028d2:	428f      	cmp	r7, r1
 80028d4:	d104      	bne.n	80028e0 <__aeabi_dcmpun+0x30>
 80028d6:	4646      	mov	r6, r8
 80028d8:	4316      	orrs	r6, r2
 80028da:	0030      	movs	r0, r6
 80028dc:	1e43      	subs	r3, r0, #1
 80028de:	4198      	sbcs	r0, r3
 80028e0:	bc80      	pop	{r7}
 80028e2:	46b8      	mov	r8, r7
 80028e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028e6:	4304      	orrs	r4, r0
 80028e8:	2001      	movs	r0, #1
 80028ea:	2c00      	cmp	r4, #0
 80028ec:	d1f8      	bne.n	80028e0 <__aeabi_dcmpun+0x30>
 80028ee:	e7ee      	b.n	80028ce <__aeabi_dcmpun+0x1e>
 80028f0:	000007ff 	.word	0x000007ff

080028f4 <__aeabi_d2iz>:
 80028f4:	000b      	movs	r3, r1
 80028f6:	0002      	movs	r2, r0
 80028f8:	b570      	push	{r4, r5, r6, lr}
 80028fa:	4d16      	ldr	r5, [pc, #88]	@ (8002954 <__aeabi_d2iz+0x60>)
 80028fc:	030c      	lsls	r4, r1, #12
 80028fe:	b082      	sub	sp, #8
 8002900:	0049      	lsls	r1, r1, #1
 8002902:	2000      	movs	r0, #0
 8002904:	9200      	str	r2, [sp, #0]
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	0b24      	lsrs	r4, r4, #12
 800290a:	0d49      	lsrs	r1, r1, #21
 800290c:	0fde      	lsrs	r6, r3, #31
 800290e:	42a9      	cmp	r1, r5
 8002910:	dd04      	ble.n	800291c <__aeabi_d2iz+0x28>
 8002912:	4811      	ldr	r0, [pc, #68]	@ (8002958 <__aeabi_d2iz+0x64>)
 8002914:	4281      	cmp	r1, r0
 8002916:	dd03      	ble.n	8002920 <__aeabi_d2iz+0x2c>
 8002918:	4b10      	ldr	r3, [pc, #64]	@ (800295c <__aeabi_d2iz+0x68>)
 800291a:	18f0      	adds	r0, r6, r3
 800291c:	b002      	add	sp, #8
 800291e:	bd70      	pop	{r4, r5, r6, pc}
 8002920:	2080      	movs	r0, #128	@ 0x80
 8002922:	0340      	lsls	r0, r0, #13
 8002924:	4320      	orrs	r0, r4
 8002926:	4c0e      	ldr	r4, [pc, #56]	@ (8002960 <__aeabi_d2iz+0x6c>)
 8002928:	1a64      	subs	r4, r4, r1
 800292a:	2c1f      	cmp	r4, #31
 800292c:	dd08      	ble.n	8002940 <__aeabi_d2iz+0x4c>
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <__aeabi_d2iz+0x70>)
 8002930:	1a5b      	subs	r3, r3, r1
 8002932:	40d8      	lsrs	r0, r3
 8002934:	0003      	movs	r3, r0
 8002936:	4258      	negs	r0, r3
 8002938:	2e00      	cmp	r6, #0
 800293a:	d1ef      	bne.n	800291c <__aeabi_d2iz+0x28>
 800293c:	0018      	movs	r0, r3
 800293e:	e7ed      	b.n	800291c <__aeabi_d2iz+0x28>
 8002940:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <__aeabi_d2iz+0x74>)
 8002942:	9a00      	ldr	r2, [sp, #0]
 8002944:	469c      	mov	ip, r3
 8002946:	0003      	movs	r3, r0
 8002948:	4461      	add	r1, ip
 800294a:	408b      	lsls	r3, r1
 800294c:	40e2      	lsrs	r2, r4
 800294e:	4313      	orrs	r3, r2
 8002950:	e7f1      	b.n	8002936 <__aeabi_d2iz+0x42>
 8002952:	46c0      	nop			@ (mov r8, r8)
 8002954:	000003fe 	.word	0x000003fe
 8002958:	0000041d 	.word	0x0000041d
 800295c:	7fffffff 	.word	0x7fffffff
 8002960:	00000433 	.word	0x00000433
 8002964:	00000413 	.word	0x00000413
 8002968:	fffffbed 	.word	0xfffffbed

0800296c <__aeabi_i2d>:
 800296c:	b570      	push	{r4, r5, r6, lr}
 800296e:	2800      	cmp	r0, #0
 8002970:	d016      	beq.n	80029a0 <__aeabi_i2d+0x34>
 8002972:	17c3      	asrs	r3, r0, #31
 8002974:	18c5      	adds	r5, r0, r3
 8002976:	405d      	eors	r5, r3
 8002978:	0fc4      	lsrs	r4, r0, #31
 800297a:	0028      	movs	r0, r5
 800297c:	f000 f912 	bl	8002ba4 <__clzsi2>
 8002980:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <__aeabi_i2d+0x58>)
 8002982:	1a1b      	subs	r3, r3, r0
 8002984:	055b      	lsls	r3, r3, #21
 8002986:	0d5b      	lsrs	r3, r3, #21
 8002988:	280a      	cmp	r0, #10
 800298a:	dc14      	bgt.n	80029b6 <__aeabi_i2d+0x4a>
 800298c:	0002      	movs	r2, r0
 800298e:	002e      	movs	r6, r5
 8002990:	3215      	adds	r2, #21
 8002992:	4096      	lsls	r6, r2
 8002994:	220b      	movs	r2, #11
 8002996:	1a12      	subs	r2, r2, r0
 8002998:	40d5      	lsrs	r5, r2
 800299a:	032d      	lsls	r5, r5, #12
 800299c:	0b2d      	lsrs	r5, r5, #12
 800299e:	e003      	b.n	80029a8 <__aeabi_i2d+0x3c>
 80029a0:	2400      	movs	r4, #0
 80029a2:	2300      	movs	r3, #0
 80029a4:	2500      	movs	r5, #0
 80029a6:	2600      	movs	r6, #0
 80029a8:	051b      	lsls	r3, r3, #20
 80029aa:	432b      	orrs	r3, r5
 80029ac:	07e4      	lsls	r4, r4, #31
 80029ae:	4323      	orrs	r3, r4
 80029b0:	0030      	movs	r0, r6
 80029b2:	0019      	movs	r1, r3
 80029b4:	bd70      	pop	{r4, r5, r6, pc}
 80029b6:	380b      	subs	r0, #11
 80029b8:	4085      	lsls	r5, r0
 80029ba:	032d      	lsls	r5, r5, #12
 80029bc:	2600      	movs	r6, #0
 80029be:	0b2d      	lsrs	r5, r5, #12
 80029c0:	e7f2      	b.n	80029a8 <__aeabi_i2d+0x3c>
 80029c2:	46c0      	nop			@ (mov r8, r8)
 80029c4:	0000041e 	.word	0x0000041e

080029c8 <__aeabi_ui2d>:
 80029c8:	b510      	push	{r4, lr}
 80029ca:	1e04      	subs	r4, r0, #0
 80029cc:	d010      	beq.n	80029f0 <__aeabi_ui2d+0x28>
 80029ce:	f000 f8e9 	bl	8002ba4 <__clzsi2>
 80029d2:	4b0e      	ldr	r3, [pc, #56]	@ (8002a0c <__aeabi_ui2d+0x44>)
 80029d4:	1a1b      	subs	r3, r3, r0
 80029d6:	055b      	lsls	r3, r3, #21
 80029d8:	0d5b      	lsrs	r3, r3, #21
 80029da:	280a      	cmp	r0, #10
 80029dc:	dc0f      	bgt.n	80029fe <__aeabi_ui2d+0x36>
 80029de:	220b      	movs	r2, #11
 80029e0:	0021      	movs	r1, r4
 80029e2:	1a12      	subs	r2, r2, r0
 80029e4:	40d1      	lsrs	r1, r2
 80029e6:	3015      	adds	r0, #21
 80029e8:	030a      	lsls	r2, r1, #12
 80029ea:	4084      	lsls	r4, r0
 80029ec:	0b12      	lsrs	r2, r2, #12
 80029ee:	e001      	b.n	80029f4 <__aeabi_ui2d+0x2c>
 80029f0:	2300      	movs	r3, #0
 80029f2:	2200      	movs	r2, #0
 80029f4:	051b      	lsls	r3, r3, #20
 80029f6:	4313      	orrs	r3, r2
 80029f8:	0020      	movs	r0, r4
 80029fa:	0019      	movs	r1, r3
 80029fc:	bd10      	pop	{r4, pc}
 80029fe:	0022      	movs	r2, r4
 8002a00:	380b      	subs	r0, #11
 8002a02:	4082      	lsls	r2, r0
 8002a04:	0312      	lsls	r2, r2, #12
 8002a06:	2400      	movs	r4, #0
 8002a08:	0b12      	lsrs	r2, r2, #12
 8002a0a:	e7f3      	b.n	80029f4 <__aeabi_ui2d+0x2c>
 8002a0c:	0000041e 	.word	0x0000041e

08002a10 <__aeabi_f2d>:
 8002a10:	b570      	push	{r4, r5, r6, lr}
 8002a12:	0242      	lsls	r2, r0, #9
 8002a14:	0043      	lsls	r3, r0, #1
 8002a16:	0fc4      	lsrs	r4, r0, #31
 8002a18:	20fe      	movs	r0, #254	@ 0xfe
 8002a1a:	0e1b      	lsrs	r3, r3, #24
 8002a1c:	1c59      	adds	r1, r3, #1
 8002a1e:	0a55      	lsrs	r5, r2, #9
 8002a20:	4208      	tst	r0, r1
 8002a22:	d00c      	beq.n	8002a3e <__aeabi_f2d+0x2e>
 8002a24:	21e0      	movs	r1, #224	@ 0xe0
 8002a26:	0089      	lsls	r1, r1, #2
 8002a28:	468c      	mov	ip, r1
 8002a2a:	076d      	lsls	r5, r5, #29
 8002a2c:	0b12      	lsrs	r2, r2, #12
 8002a2e:	4463      	add	r3, ip
 8002a30:	051b      	lsls	r3, r3, #20
 8002a32:	4313      	orrs	r3, r2
 8002a34:	07e4      	lsls	r4, r4, #31
 8002a36:	4323      	orrs	r3, r4
 8002a38:	0028      	movs	r0, r5
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	bd70      	pop	{r4, r5, r6, pc}
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d114      	bne.n	8002a6c <__aeabi_f2d+0x5c>
 8002a42:	2d00      	cmp	r5, #0
 8002a44:	d01b      	beq.n	8002a7e <__aeabi_f2d+0x6e>
 8002a46:	0028      	movs	r0, r5
 8002a48:	f000 f8ac 	bl	8002ba4 <__clzsi2>
 8002a4c:	280a      	cmp	r0, #10
 8002a4e:	dc1c      	bgt.n	8002a8a <__aeabi_f2d+0x7a>
 8002a50:	230b      	movs	r3, #11
 8002a52:	002a      	movs	r2, r5
 8002a54:	1a1b      	subs	r3, r3, r0
 8002a56:	40da      	lsrs	r2, r3
 8002a58:	0003      	movs	r3, r0
 8002a5a:	3315      	adds	r3, #21
 8002a5c:	409d      	lsls	r5, r3
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a98 <__aeabi_f2d+0x88>)
 8002a60:	0312      	lsls	r2, r2, #12
 8002a62:	1a1b      	subs	r3, r3, r0
 8002a64:	055b      	lsls	r3, r3, #21
 8002a66:	0b12      	lsrs	r2, r2, #12
 8002a68:	0d5b      	lsrs	r3, r3, #21
 8002a6a:	e7e1      	b.n	8002a30 <__aeabi_f2d+0x20>
 8002a6c:	2d00      	cmp	r5, #0
 8002a6e:	d009      	beq.n	8002a84 <__aeabi_f2d+0x74>
 8002a70:	0b13      	lsrs	r3, r2, #12
 8002a72:	2280      	movs	r2, #128	@ 0x80
 8002a74:	0312      	lsls	r2, r2, #12
 8002a76:	431a      	orrs	r2, r3
 8002a78:	076d      	lsls	r5, r5, #29
 8002a7a:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <__aeabi_f2d+0x8c>)
 8002a7c:	e7d8      	b.n	8002a30 <__aeabi_f2d+0x20>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	2200      	movs	r2, #0
 8002a82:	e7d5      	b.n	8002a30 <__aeabi_f2d+0x20>
 8002a84:	2200      	movs	r2, #0
 8002a86:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <__aeabi_f2d+0x8c>)
 8002a88:	e7d2      	b.n	8002a30 <__aeabi_f2d+0x20>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	002a      	movs	r2, r5
 8002a8e:	3b0b      	subs	r3, #11
 8002a90:	409a      	lsls	r2, r3
 8002a92:	2500      	movs	r5, #0
 8002a94:	e7e3      	b.n	8002a5e <__aeabi_f2d+0x4e>
 8002a96:	46c0      	nop			@ (mov r8, r8)
 8002a98:	00000389 	.word	0x00000389
 8002a9c:	000007ff 	.word	0x000007ff

08002aa0 <__aeabi_d2f>:
 8002aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aa2:	004b      	lsls	r3, r1, #1
 8002aa4:	030f      	lsls	r7, r1, #12
 8002aa6:	0d5b      	lsrs	r3, r3, #21
 8002aa8:	4c3a      	ldr	r4, [pc, #232]	@ (8002b94 <__aeabi_d2f+0xf4>)
 8002aaa:	0f45      	lsrs	r5, r0, #29
 8002aac:	b083      	sub	sp, #12
 8002aae:	0a7f      	lsrs	r7, r7, #9
 8002ab0:	1c5e      	adds	r6, r3, #1
 8002ab2:	432f      	orrs	r7, r5
 8002ab4:	9000      	str	r0, [sp, #0]
 8002ab6:	9101      	str	r1, [sp, #4]
 8002ab8:	0fca      	lsrs	r2, r1, #31
 8002aba:	00c5      	lsls	r5, r0, #3
 8002abc:	4226      	tst	r6, r4
 8002abe:	d00b      	beq.n	8002ad8 <__aeabi_d2f+0x38>
 8002ac0:	4935      	ldr	r1, [pc, #212]	@ (8002b98 <__aeabi_d2f+0xf8>)
 8002ac2:	185c      	adds	r4, r3, r1
 8002ac4:	2cfe      	cmp	r4, #254	@ 0xfe
 8002ac6:	dd13      	ble.n	8002af0 <__aeabi_d2f+0x50>
 8002ac8:	20ff      	movs	r0, #255	@ 0xff
 8002aca:	2300      	movs	r3, #0
 8002acc:	05c0      	lsls	r0, r0, #23
 8002ace:	4318      	orrs	r0, r3
 8002ad0:	07d2      	lsls	r2, r2, #31
 8002ad2:	4310      	orrs	r0, r2
 8002ad4:	b003      	add	sp, #12
 8002ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ad8:	433d      	orrs	r5, r7
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <__aeabi_d2f+0x42>
 8002ade:	2000      	movs	r0, #0
 8002ae0:	e7f4      	b.n	8002acc <__aeabi_d2f+0x2c>
 8002ae2:	2d00      	cmp	r5, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <__aeabi_d2f+0x28>
 8002ae6:	2380      	movs	r3, #128	@ 0x80
 8002ae8:	03db      	lsls	r3, r3, #15
 8002aea:	20ff      	movs	r0, #255	@ 0xff
 8002aec:	433b      	orrs	r3, r7
 8002aee:	e7ed      	b.n	8002acc <__aeabi_d2f+0x2c>
 8002af0:	2c00      	cmp	r4, #0
 8002af2:	dd0c      	ble.n	8002b0e <__aeabi_d2f+0x6e>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	00ff      	lsls	r7, r7, #3
 8002af8:	019b      	lsls	r3, r3, #6
 8002afa:	1e58      	subs	r0, r3, #1
 8002afc:	4183      	sbcs	r3, r0
 8002afe:	0f69      	lsrs	r1, r5, #29
 8002b00:	433b      	orrs	r3, r7
 8002b02:	430b      	orrs	r3, r1
 8002b04:	0759      	lsls	r1, r3, #29
 8002b06:	d127      	bne.n	8002b58 <__aeabi_d2f+0xb8>
 8002b08:	08db      	lsrs	r3, r3, #3
 8002b0a:	b2e0      	uxtb	r0, r4
 8002b0c:	e7de      	b.n	8002acc <__aeabi_d2f+0x2c>
 8002b0e:	0021      	movs	r1, r4
 8002b10:	3117      	adds	r1, #23
 8002b12:	db31      	blt.n	8002b78 <__aeabi_d2f+0xd8>
 8002b14:	2180      	movs	r1, #128	@ 0x80
 8002b16:	201e      	movs	r0, #30
 8002b18:	0409      	lsls	r1, r1, #16
 8002b1a:	4339      	orrs	r1, r7
 8002b1c:	1b00      	subs	r0, r0, r4
 8002b1e:	281f      	cmp	r0, #31
 8002b20:	dd2d      	ble.n	8002b7e <__aeabi_d2f+0xde>
 8002b22:	2602      	movs	r6, #2
 8002b24:	4276      	negs	r6, r6
 8002b26:	1b34      	subs	r4, r6, r4
 8002b28:	000e      	movs	r6, r1
 8002b2a:	40e6      	lsrs	r6, r4
 8002b2c:	0034      	movs	r4, r6
 8002b2e:	2820      	cmp	r0, #32
 8002b30:	d004      	beq.n	8002b3c <__aeabi_d2f+0x9c>
 8002b32:	481a      	ldr	r0, [pc, #104]	@ (8002b9c <__aeabi_d2f+0xfc>)
 8002b34:	4684      	mov	ip, r0
 8002b36:	4463      	add	r3, ip
 8002b38:	4099      	lsls	r1, r3
 8002b3a:	430d      	orrs	r5, r1
 8002b3c:	002b      	movs	r3, r5
 8002b3e:	1e59      	subs	r1, r3, #1
 8002b40:	418b      	sbcs	r3, r1
 8002b42:	4323      	orrs	r3, r4
 8002b44:	0759      	lsls	r1, r3, #29
 8002b46:	d003      	beq.n	8002b50 <__aeabi_d2f+0xb0>
 8002b48:	210f      	movs	r1, #15
 8002b4a:	4019      	ands	r1, r3
 8002b4c:	2904      	cmp	r1, #4
 8002b4e:	d10b      	bne.n	8002b68 <__aeabi_d2f+0xc8>
 8002b50:	019b      	lsls	r3, r3, #6
 8002b52:	2000      	movs	r0, #0
 8002b54:	0a5b      	lsrs	r3, r3, #9
 8002b56:	e7b9      	b.n	8002acc <__aeabi_d2f+0x2c>
 8002b58:	210f      	movs	r1, #15
 8002b5a:	4019      	ands	r1, r3
 8002b5c:	2904      	cmp	r1, #4
 8002b5e:	d104      	bne.n	8002b6a <__aeabi_d2f+0xca>
 8002b60:	019b      	lsls	r3, r3, #6
 8002b62:	0a5b      	lsrs	r3, r3, #9
 8002b64:	b2e0      	uxtb	r0, r4
 8002b66:	e7b1      	b.n	8002acc <__aeabi_d2f+0x2c>
 8002b68:	2400      	movs	r4, #0
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	0159      	lsls	r1, r3, #5
 8002b6e:	d5f7      	bpl.n	8002b60 <__aeabi_d2f+0xc0>
 8002b70:	3401      	adds	r4, #1
 8002b72:	2300      	movs	r3, #0
 8002b74:	b2e0      	uxtb	r0, r4
 8002b76:	e7a9      	b.n	8002acc <__aeabi_d2f+0x2c>
 8002b78:	2000      	movs	r0, #0
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e7a6      	b.n	8002acc <__aeabi_d2f+0x2c>
 8002b7e:	4c08      	ldr	r4, [pc, #32]	@ (8002ba0 <__aeabi_d2f+0x100>)
 8002b80:	191c      	adds	r4, r3, r4
 8002b82:	002b      	movs	r3, r5
 8002b84:	40a5      	lsls	r5, r4
 8002b86:	40c3      	lsrs	r3, r0
 8002b88:	40a1      	lsls	r1, r4
 8002b8a:	1e68      	subs	r0, r5, #1
 8002b8c:	4185      	sbcs	r5, r0
 8002b8e:	4329      	orrs	r1, r5
 8002b90:	430b      	orrs	r3, r1
 8002b92:	e7d7      	b.n	8002b44 <__aeabi_d2f+0xa4>
 8002b94:	000007fe 	.word	0x000007fe
 8002b98:	fffffc80 	.word	0xfffffc80
 8002b9c:	fffffca2 	.word	0xfffffca2
 8002ba0:	fffffc82 	.word	0xfffffc82

08002ba4 <__clzsi2>:
 8002ba4:	211c      	movs	r1, #28
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	041b      	lsls	r3, r3, #16
 8002baa:	4298      	cmp	r0, r3
 8002bac:	d301      	bcc.n	8002bb2 <__clzsi2+0xe>
 8002bae:	0c00      	lsrs	r0, r0, #16
 8002bb0:	3910      	subs	r1, #16
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	4298      	cmp	r0, r3
 8002bb6:	d301      	bcc.n	8002bbc <__clzsi2+0x18>
 8002bb8:	0a00      	lsrs	r0, r0, #8
 8002bba:	3908      	subs	r1, #8
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	4298      	cmp	r0, r3
 8002bc0:	d301      	bcc.n	8002bc6 <__clzsi2+0x22>
 8002bc2:	0900      	lsrs	r0, r0, #4
 8002bc4:	3904      	subs	r1, #4
 8002bc6:	a202      	add	r2, pc, #8	@ (adr r2, 8002bd0 <__clzsi2+0x2c>)
 8002bc8:	5c10      	ldrb	r0, [r2, r0]
 8002bca:	1840      	adds	r0, r0, r1
 8002bcc:	4770      	bx	lr
 8002bce:	46c0      	nop			@ (mov r8, r8)
 8002bd0:	02020304 	.word	0x02020304
 8002bd4:	01010101 	.word	0x01010101
	...

08002be0 <execute_function>:
#include "fdex.h"

int execute_function(Item item, int argc, int *argv) {
 8002be0:	b5b0      	push	{r4, r5, r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	2508      	movs	r5, #8
 8002be8:	197c      	adds	r4, r7, r5
 8002bea:	6020      	str	r0, [r4, #0]
 8002bec:	6061      	str	r1, [r4, #4]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
    return item.func(argc, argv); // Example value passed to the function
 8002bf2:	197b      	adds	r3, r7, r5
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	6839      	ldr	r1, [r7, #0]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	0010      	movs	r0, r2
 8002bfc:	4798      	blx	r3
 8002bfe:	0003      	movs	r3, r0
}
 8002c00:	0018      	movs	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b004      	add	sp, #16
 8002c06:	bdb0      	pop	{r4, r5, r7, pc}

08002c08 <get_by_name>:

Item get_by_name(Item *items, char *name) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
    for (int i = 0; items[i].name != NULL; i++) {
 8002c14:	2300      	movs	r3, #0
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	e016      	b.n	8002c48 <get_by_name+0x40>
        if (strcmp(items[i].name, name) == 0) {
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	18d3      	adds	r3, r2, r3
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	0011      	movs	r1, r2
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7fd fa6d 	bl	8000108 <strcmp>
 8002c2e:	1e03      	subs	r3, r0, #0
 8002c30:	d107      	bne.n	8002c42 <get_by_name+0x3a>
            return items[i];
 8002c32:	69fb      	ldr	r3, [r7, #28]
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	18d2      	adds	r2, r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	ca03      	ldmia	r2!, {r0, r1}
 8002c3e:	c303      	stmia	r3!, {r0, r1}
 8002c40:	e014      	b.n	8002c6c <get_by_name+0x64>
    for (int i = 0; items[i].name != NULL; i++) {
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3301      	adds	r3, #1
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	68ba      	ldr	r2, [r7, #8]
 8002c4e:	18d3      	adds	r3, r2, r3
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1e1      	bne.n	8002c1a <get_by_name+0x12>
        }
    }
    Item not_found = {NULL, NULL}; // Return a sentinel value if not found
 8002c56:	2114      	movs	r1, #20
 8002c58:	187b      	adds	r3, r7, r1
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	187b      	adds	r3, r7, r1
 8002c60:	2200      	movs	r2, #0
 8002c62:	605a      	str	r2, [r3, #4]
    return not_found;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	187a      	adds	r2, r7, r1
 8002c68:	ca03      	ldmia	r2!, {r0, r1}
 8002c6a:	c303      	stmia	r3!, {r0, r1}
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b008      	add	sp, #32
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <json_to_pairs>:
#include "jsonlib.h"

Pair* json_to_pairs(char *json) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b096      	sub	sp, #88	@ 0x58
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
    // printf("Starting JSON parsing\n");
    
    Pair *pairs = malloc(sizeof(Pair)); // Initial allocation
 8002c7c:	200c      	movs	r0, #12
 8002c7e:	f005 fdcb 	bl	8008818 <malloc>
 8002c82:	0003      	movs	r3, r0
 8002c84:	657b      	str	r3, [r7, #84]	@ 0x54
    if (pairs == NULL) {
 8002c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d109      	bne.n	8002ca0 <json_to_pairs+0x2c>
        fprintf(stderr, "Memory allocation failed\n");
 8002c8c:	4bd4      	ldr	r3, [pc, #848]	@ (8002fe0 <json_to_pairs+0x36c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	48d4      	ldr	r0, [pc, #848]	@ (8002fe4 <json_to_pairs+0x370>)
 8002c94:	2219      	movs	r2, #25
 8002c96:	2101      	movs	r1, #1
 8002c98:	f006 fed8 	bl	8009a4c <fwrite>
        return NULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	e2a1      	b.n	80031e4 <json_to_pairs+0x570>
    }
    
    memset(pairs, 0, sizeof(Pair)); // Initialize memory to zero
 8002ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca2:	220c      	movs	r2, #12
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f007 f820 	bl	8009cec <memset>
    
    int count = 0; // Number of pairs
 8002cac:	2300      	movs	r3, #0
 8002cae:	653b      	str	r3, [r7, #80]	@ 0x50
    char *key = NULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    char *ptr = json;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	64bb      	str	r3, [r7, #72]	@ 0x48

    // printf("JSON to parse: %s\n", json);

    while (*ptr) {
 8002cb8:	e22a      	b.n	8003110 <json_to_pairs+0x49c>
        // printf("Processing at position: %ld ('%c')\n", (long)(ptr - json), *ptr);
        
        // Skip whitespace and commas
        while (*ptr == ' ' || *ptr == ',' || *ptr == '{' || *ptr == '}') {
            ptr++;
 8002cba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
        while (*ptr == ' ' || *ptr == ',' || *ptr == '{' || *ptr == '}') {
 8002cc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d0f8      	beq.n	8002cba <json_to_pairs+0x46>
 8002cc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b2c      	cmp	r3, #44	@ 0x2c
 8002cce:	d0f4      	beq.n	8002cba <json_to_pairs+0x46>
 8002cd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b7b      	cmp	r3, #123	@ 0x7b
 8002cd6:	d0f0      	beq.n	8002cba <json_to_pairs+0x46>
 8002cd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b7d      	cmp	r3, #125	@ 0x7d
 8002cde:	d0ec      	beq.n	8002cba <json_to_pairs+0x46>
        }

        if (*ptr == '\0') {
 8002ce0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d100      	bne.n	8002cea <json_to_pairs+0x76>
 8002ce8:	e218      	b.n	800311c <json_to_pairs+0x4a8>
            // printf("End of string reached\n");
            break;
        }

        // Parse key
        if (*ptr == '"') {
 8002cea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b22      	cmp	r3, #34	@ 0x22
 8002cf0:	d164      	bne.n	8002dbc <json_to_pairs+0x148>
            ptr++;
 8002cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
            char *start = ptr;
 8002cf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
            while (*ptr != '"' && *ptr != '\0') {
 8002cfc:	e002      	b.n	8002d04 <json_to_pairs+0x90>
                ptr++;
 8002cfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d00:	3301      	adds	r3, #1
 8002d02:	64bb      	str	r3, [r7, #72]	@ 0x48
            while (*ptr != '"' && *ptr != '\0') {
 8002d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b22      	cmp	r3, #34	@ 0x22
 8002d0a:	d003      	beq.n	8002d14 <json_to_pairs+0xa0>
 8002d0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f4      	bne.n	8002cfe <json_to_pairs+0x8a>
            }
            if (*ptr == '"') {
 8002d14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b22      	cmp	r3, #34	@ 0x22
 8002d1a:	d14f      	bne.n	8002dbc <json_to_pairs+0x148>
                int key_len = ptr - start;
 8002d1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	627b      	str	r3, [r7, #36]	@ 0x24
                //     printf("%c", start[i]);
                // }
                // printf("\n");
                
                // Manual string duplication instead of strndup
                key = malloc(key_len + 1);
 8002d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d26:	3301      	adds	r3, #1
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f005 fd75 	bl	8008818 <malloc>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (key == NULL) {
 8002d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d12f      	bne.n	8002d98 <json_to_pairs+0x124>
                    fprintf(stderr, "Failed to allocate memory for key\n");
 8002d38:	4ba9      	ldr	r3, [pc, #676]	@ (8002fe0 <json_to_pairs+0x36c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	48aa      	ldr	r0, [pc, #680]	@ (8002fe8 <json_to_pairs+0x374>)
 8002d40:	2222      	movs	r2, #34	@ 0x22
 8002d42:	2101      	movs	r1, #1
 8002d44:	f006 fe82 	bl	8009a4c <fwrite>
                    // Clean up and return error
                    for (int i = 0; i < count; i++) {
 8002d48:	2300      	movs	r3, #0
 8002d4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d4c:	e01a      	b.n	8002d84 <json_to_pairs+0x110>
                        free(pairs[i].name);
 8002d4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d50:	0013      	movs	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	189b      	adds	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	001a      	movs	r2, r3
 8002d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d5c:	189b      	adds	r3, r3, r2
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	0018      	movs	r0, r3
 8002d62:	f005 fd63 	bl	800882c <free>
                        free(pairs[i].int_values);
 8002d66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d68:	0013      	movs	r3, r2
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	189b      	adds	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	001a      	movs	r2, r3
 8002d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d74:	189b      	adds	r3, r3, r2
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f005 fd57 	bl	800882c <free>
                    for (int i = 0; i < count; i++) {
 8002d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d80:	3301      	adds	r3, #1
 8002d82:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	dbe0      	blt.n	8002d4e <json_to_pairs+0xda>
                    }
                    free(pairs);
 8002d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f005 fd4c 	bl	800882c <free>
                    return NULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e225      	b.n	80031e4 <json_to_pairs+0x570>
                }
                memcpy(key, start, key_len);
 8002d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f007 f848 	bl	8009e34 <memcpy>
                key[key_len] = '\0';  // Null-terminate the string
 8002da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002da8:	18d3      	adds	r3, r2, r3
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
                
                // printf("Key allocated: %s\n", key);
                ptr++;
 8002dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002db0:	3301      	adds	r3, #1
 8002db2:	64bb      	str	r3, [r7, #72]	@ 0x48
            }
        }

        // Skip whitespace and colon
        while (*ptr == ' ' || *ptr == ':') {
 8002db4:	e002      	b.n	8002dbc <json_to_pairs+0x148>
            ptr++;
 8002db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002db8:	3301      	adds	r3, #1
 8002dba:	64bb      	str	r3, [r7, #72]	@ 0x48
        while (*ptr == ' ' || *ptr == ':') {
 8002dbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d0f8      	beq.n	8002db6 <json_to_pairs+0x142>
 8002dc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b3a      	cmp	r3, #58	@ 0x3a
 8002dca:	d0f4      	beq.n	8002db6 <json_to_pairs+0x142>
        }

        // Parse value (integers only)
        int *int_values = NULL;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	643b      	str	r3, [r7, #64]	@ 0x40
        int num_values = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if (*ptr == '[') {  // Detect array
 8002dd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b5b      	cmp	r3, #91	@ 0x5b
 8002dda:	d000      	beq.n	8002dde <json_to_pairs+0x16a>
 8002ddc:	e09c      	b.n	8002f18 <json_to_pairs+0x2a4>
            // printf("Found array start\n");
            ptr++;
 8002dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002de0:	3301      	adds	r3, #1
 8002de2:	64bb      	str	r3, [r7, #72]	@ 0x48
            while (*ptr != ']' && *ptr != '\0') {
 8002de4:	e084      	b.n	8002ef0 <json_to_pairs+0x27c>
                while (*ptr == ' ' || *ptr == ',') ptr++;  // Skip whitespace and commas
 8002de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002de8:	3301      	adds	r3, #1
 8002dea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b20      	cmp	r3, #32
 8002df2:	d0f8      	beq.n	8002de6 <json_to_pairs+0x172>
 8002df4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b2c      	cmp	r3, #44	@ 0x2c
 8002dfa:	d0f4      	beq.n	8002de6 <json_to_pairs+0x172>

                if (*ptr == ']') break; // Check for empty array or end of array
 8002dfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b5d      	cmp	r3, #93	@ 0x5d
 8002e02:	d100      	bne.n	8002e06 <json_to_pairs+0x192>
 8002e04:	e07e      	b.n	8002f04 <json_to_pairs+0x290>

                if (isdigit(*ptr) || *ptr == '-') {  // Handle integer values
 8002e06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	4b77      	ldr	r3, [pc, #476]	@ (8002fec <json_to_pairs+0x378>)
 8002e0e:	18d3      	adds	r3, r2, r3
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	001a      	movs	r2, r3
 8002e14:	2304      	movs	r3, #4
 8002e16:	4013      	ands	r3, r2
 8002e18:	d103      	bne.n	8002e22 <json_to_pairs+0x1ae>
 8002e1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b2d      	cmp	r3, #45	@ 0x2d
 8002e20:	d163      	bne.n	8002eea <json_to_pairs+0x276>
                    char *end;
                    int val = strtol(ptr, &end, 10);
 8002e22:	230c      	movs	r3, #12
 8002e24:	18f9      	adds	r1, r7, r3
 8002e26:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e28:	220a      	movs	r2, #10
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f005 fe82 	bl	8008b34 <strtol>
 8002e30:	0003      	movs	r3, r0
 8002e32:	61fb      	str	r3, [r7, #28]
                    if (end != ptr) { // Make sure we actually parsed a number
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d052      	beq.n	8002ee2 <json_to_pairs+0x26e>
                        // printf("Found integer: %d\n", val);
                        ptr = end; // Update pointer position
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	64bb      	str	r3, [r7, #72]	@ 0x48
                        
                        // Safer realloc pattern
                        int *new_values = realloc(int_values, (num_values + 1) * sizeof(int));
 8002e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e42:	3301      	adds	r3, #1
 8002e44:	009a      	lsls	r2, r3, #2
 8002e46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e48:	0011      	movs	r1, r2
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f005 fdaa 	bl	80089a4 <realloc>
 8002e50:	0003      	movs	r3, r0
 8002e52:	61bb      	str	r3, [r7, #24]
                        if (new_values == NULL) {
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d137      	bne.n	8002eca <json_to_pairs+0x256>
                            fprintf(stderr, "Memory reallocation failed\n");
 8002e5a:	4b61      	ldr	r3, [pc, #388]	@ (8002fe0 <json_to_pairs+0x36c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4863      	ldr	r0, [pc, #396]	@ (8002ff0 <json_to_pairs+0x37c>)
 8002e62:	221b      	movs	r2, #27
 8002e64:	2101      	movs	r1, #1
 8002e66:	f006 fdf1 	bl	8009a4c <fwrite>
                            free(key);
 8002e6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f005 fcdd 	bl	800882c <free>
                            free(int_values);
 8002e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e74:	0018      	movs	r0, r3
 8002e76:	f005 fcd9 	bl	800882c <free>
                            for (int i = 0; i < count; i++) {
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e7e:	e01a      	b.n	8002eb6 <json_to_pairs+0x242>
                                free(pairs[i].name);
 8002e80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e82:	0013      	movs	r3, r2
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	189b      	adds	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	001a      	movs	r2, r3
 8002e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e8e:	189b      	adds	r3, r3, r2
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	0018      	movs	r0, r3
 8002e94:	f005 fcca 	bl	800882c <free>
                                free(pairs[i].int_values);
 8002e98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e9a:	0013      	movs	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	189b      	adds	r3, r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea6:	189b      	adds	r3, r3, r2
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f005 fcbe 	bl	800882c <free>
                            for (int i = 0; i < count; i++) {
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002eb6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002eb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	dbe0      	blt.n	8002e80 <json_to_pairs+0x20c>
                            }
                            free(pairs);
 8002ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f005 fcb3 	bl	800882c <free>
                            return NULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e18c      	b.n	80031e4 <json_to_pairs+0x570>
                        }
                        int_values = new_values;
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	643b      	str	r3, [r7, #64]	@ 0x40
                        int_values[num_values] = val;
 8002ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ed4:	18d3      	adds	r3, r2, r3
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	601a      	str	r2, [r3, #0]
                        num_values++;
 8002eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002edc:	3301      	adds	r3, #1
 8002ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
                if (isdigit(*ptr) || *ptr == '-') {  // Handle integer values
 8002ee0:	e006      	b.n	8002ef0 <json_to_pairs+0x27c>
                    } else {
                        ptr++; // Avoid infinite loop
 8002ee2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	64bb      	str	r3, [r7, #72]	@ 0x48
                if (isdigit(*ptr) || *ptr == '-') {  // Handle integer values
 8002ee8:	e002      	b.n	8002ef0 <json_to_pairs+0x27c>
                    }
                } else {
                    ptr++; // Skip any other characters to avoid infinite loop
 8002eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eec:	3301      	adds	r3, #1
 8002eee:	64bb      	str	r3, [r7, #72]	@ 0x48
            while (*ptr != ']' && *ptr != '\0') {
 8002ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b5d      	cmp	r3, #93	@ 0x5d
 8002ef6:	d006      	beq.n	8002f06 <json_to_pairs+0x292>
 8002ef8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d000      	beq.n	8002f02 <json_to_pairs+0x28e>
 8002f00:	e774      	b.n	8002dec <json_to_pairs+0x178>
 8002f02:	e000      	b.n	8002f06 <json_to_pairs+0x292>
                if (*ptr == ']') break; // Check for empty array or end of array
 8002f04:	46c0      	nop			@ (mov r8, r8)
                }
            }
            if (*ptr == ']') {
 8002f06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b5d      	cmp	r3, #93	@ 0x5d
 8002f0c:	d000      	beq.n	8002f10 <json_to_pairs+0x29c>
 8002f0e:	e080      	b.n	8003012 <json_to_pairs+0x39e>
                // printf("Found array end, total values: %d\n", num_values);
                ptr++;  // Skip closing bracket
 8002f10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f12:	3301      	adds	r3, #1
 8002f14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f16:	e07c      	b.n	8003012 <json_to_pairs+0x39e>
            }
        } else if (isdigit(*ptr) || *ptr == '-') {  // Handle single numeric value
 8002f18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	4b33      	ldr	r3, [pc, #204]	@ (8002fec <json_to_pairs+0x378>)
 8002f20:	18d3      	adds	r3, r2, r3
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	001a      	movs	r2, r3
 8002f26:	2304      	movs	r3, #4
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d103      	bne.n	8002f34 <json_to_pairs+0x2c0>
 8002f2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b2d      	cmp	r3, #45	@ 0x2d
 8002f32:	d162      	bne.n	8002ffa <json_to_pairs+0x386>
            char *end;
            int val = strtol(ptr, &end, 10);
 8002f34:	2308      	movs	r3, #8
 8002f36:	18f9      	adds	r1, r7, r3
 8002f38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f3a:	220a      	movs	r2, #10
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f005 fdf9 	bl	8008b34 <strtol>
 8002f42:	0003      	movs	r3, r0
 8002f44:	623b      	str	r3, [r7, #32]
            if (end != ptr) { // Make sure we actually parsed a number
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d043      	beq.n	8002fd6 <json_to_pairs+0x362>
                // printf("Found single integer: %d\n", val);
                ptr = end; // Update pointer position
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	64bb      	str	r3, [r7, #72]	@ 0x48
                int_values = malloc(sizeof(int));
 8002f52:	2004      	movs	r0, #4
 8002f54:	f005 fc60 	bl	8008818 <malloc>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	643b      	str	r3, [r7, #64]	@ 0x40
                if (int_values == NULL) {
 8002f5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d133      	bne.n	8002fca <json_to_pairs+0x356>
                    fprintf(stderr, "Memory allocation failed\n");
 8002f62:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe0 <json_to_pairs+0x36c>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	481e      	ldr	r0, [pc, #120]	@ (8002fe4 <json_to_pairs+0x370>)
 8002f6a:	2219      	movs	r2, #25
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	f006 fd6d 	bl	8009a4c <fwrite>
                    free(key);
 8002f72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f74:	0018      	movs	r0, r3
 8002f76:	f005 fc59 	bl	800882c <free>
                    for (int i = 0; i < count; i++) {
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f7e:	e01a      	b.n	8002fb6 <json_to_pairs+0x342>
                        free(pairs[i].name);
 8002f80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f82:	0013      	movs	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	189b      	adds	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	001a      	movs	r2, r3
 8002f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f8e:	189b      	adds	r3, r3, r2
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	0018      	movs	r0, r3
 8002f94:	f005 fc4a 	bl	800882c <free>
                        free(pairs[i].int_values);
 8002f98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f9a:	0013      	movs	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	189b      	adds	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	001a      	movs	r2, r3
 8002fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa6:	189b      	adds	r3, r3, r2
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	0018      	movs	r0, r3
 8002fac:	f005 fc3e 	bl	800882c <free>
                    for (int i = 0; i < count; i++) {
 8002fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fb6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	dbe0      	blt.n	8002f80 <json_to_pairs+0x30c>
                    }
                    free(pairs);
 8002fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f005 fc33 	bl	800882c <free>
                    return NULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e10c      	b.n	80031e4 <json_to_pairs+0x570>
                }
                int_values[0] = val;
 8002fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fcc:	6a3a      	ldr	r2, [r7, #32]
 8002fce:	601a      	str	r2, [r3, #0]
                num_values = 1;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        } else if (isdigit(*ptr) || *ptr == '-') {  // Handle single numeric value
 8002fd4:	e01d      	b.n	8003012 <json_to_pairs+0x39e>
            } else {
                ptr++; // Avoid infinite loop
 8002fd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fd8:	3301      	adds	r3, #1
 8002fda:	64bb      	str	r3, [r7, #72]	@ 0x48
        } else if (isdigit(*ptr) || *ptr == '-') {  // Handle single numeric value
 8002fdc:	e019      	b.n	8003012 <json_to_pairs+0x39e>
 8002fde:	46c0      	nop			@ (mov r8, r8)
 8002fe0:	20000030 	.word	0x20000030
 8002fe4:	0800d220 	.word	0x0800d220
 8002fe8:	0800d23c 	.word	0x0800d23c
 8002fec:	0800d314 	.word	0x0800d314
 8002ff0:	0800d260 	.word	0x0800d260
            }
        } else {
            // Skip non-integer values
            // printf("Skipping non-integer value\n");
            while (*ptr != ',' && *ptr != '}' && *ptr != '\0') ptr++;
 8002ff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b2c      	cmp	r3, #44	@ 0x2c
 8003000:	d007      	beq.n	8003012 <json_to_pairs+0x39e>
 8003002:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b7d      	cmp	r3, #125	@ 0x7d
 8003008:	d003      	beq.n	8003012 <json_to_pairs+0x39e>
 800300a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <json_to_pairs+0x380>
        }

        // Store the pair if we have a key and values
        if (key != NULL && num_values > 0) {
 8003012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003014:	2b00      	cmp	r3, #0
 8003016:	d072      	beq.n	80030fe <json_to_pairs+0x48a>
 8003018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800301a:	2b00      	cmp	r3, #0
 800301c:	dd6f      	ble.n	80030fe <json_to_pairs+0x48a>
            // printf("Storing pair: %s with %d values\n", key, num_values);
            
            // Safe realloc pattern
            Pair *new_pairs = realloc(pairs, (count + 1) * sizeof(Pair));
 800301e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003020:	3301      	adds	r3, #1
 8003022:	001a      	movs	r2, r3
 8003024:	0013      	movs	r3, r2
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	189b      	adds	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	001a      	movs	r2, r3
 800302e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003030:	0011      	movs	r1, r2
 8003032:	0018      	movs	r0, r3
 8003034:	f005 fcb6 	bl	80089a4 <realloc>
 8003038:	0003      	movs	r3, r0
 800303a:	617b      	str	r3, [r7, #20]
            if (new_pairs == NULL) {
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d137      	bne.n	80030b2 <json_to_pairs+0x43e>
                fprintf(stderr, "Memory reallocation failed\n");
 8003042:	4b6a      	ldr	r3, [pc, #424]	@ (80031ec <json_to_pairs+0x578>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4869      	ldr	r0, [pc, #420]	@ (80031f0 <json_to_pairs+0x57c>)
 800304a:	221b      	movs	r2, #27
 800304c:	2101      	movs	r1, #1
 800304e:	f006 fcfd 	bl	8009a4c <fwrite>
                free(key);
 8003052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003054:	0018      	movs	r0, r3
 8003056:	f005 fbe9 	bl	800882c <free>
                free(int_values);
 800305a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800305c:	0018      	movs	r0, r3
 800305e:	f005 fbe5 	bl	800882c <free>
                for (int i = 0; i < count; i++) {
 8003062:	2300      	movs	r3, #0
 8003064:	633b      	str	r3, [r7, #48]	@ 0x30
 8003066:	e01a      	b.n	800309e <json_to_pairs+0x42a>
                    free(pairs[i].name);
 8003068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800306a:	0013      	movs	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	189b      	adds	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	001a      	movs	r2, r3
 8003074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003076:	189b      	adds	r3, r3, r2
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	0018      	movs	r0, r3
 800307c:	f005 fbd6 	bl	800882c <free>
                    free(pairs[i].int_values);
 8003080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003082:	0013      	movs	r3, r2
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	189b      	adds	r3, r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	001a      	movs	r2, r3
 800308c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800308e:	189b      	adds	r3, r3, r2
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	0018      	movs	r0, r3
 8003094:	f005 fbca 	bl	800882c <free>
                for (int i = 0; i < count; i++) {
 8003098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309a:	3301      	adds	r3, #1
 800309c:	633b      	str	r3, [r7, #48]	@ 0x30
 800309e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030a2:	429a      	cmp	r2, r3
 80030a4:	dbe0      	blt.n	8003068 <json_to_pairs+0x3f4>
                }
                free(pairs);
 80030a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a8:	0018      	movs	r0, r3
 80030aa:	f005 fbbf 	bl	800882c <free>
                return NULL;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e098      	b.n	80031e4 <json_to_pairs+0x570>
            }
            pairs = new_pairs;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	657b      	str	r3, [r7, #84]	@ 0x54
            
            pairs[count].name = key;
 80030b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80030b8:	0013      	movs	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	189b      	adds	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	001a      	movs	r2, r3
 80030c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c4:	189b      	adds	r3, r3, r2
 80030c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030c8:	601a      	str	r2, [r3, #0]
            pairs[count].int_values = int_values;
 80030ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80030cc:	0013      	movs	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	189b      	adds	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	001a      	movs	r2, r3
 80030d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d8:	189b      	adds	r3, r3, r2
 80030da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030dc:	605a      	str	r2, [r3, #4]
            pairs[count].num_values = num_values;
 80030de:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80030e0:	0013      	movs	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	189b      	adds	r3, r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	001a      	movs	r2, r3
 80030ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ec:	189b      	adds	r3, r3, r2
 80030ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80030f0:	609a      	str	r2, [r3, #8]
            // printf("Added pair with key: %s (ptr: %p)\n", key, (void*)key);
            // for(int i = 0; i < num_values; i++) {
            //     printf("Value %d: %d\n", i, int_values[i]);
            // }

            count++;
 80030f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030f4:	3301      	adds	r3, #1
 80030f6:	653b      	str	r3, [r7, #80]	@ 0x50
            key = NULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
        if (key != NULL && num_values > 0) {
 80030fc:	e008      	b.n	8003110 <json_to_pairs+0x49c>
        } else if (key != NULL) {
 80030fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <json_to_pairs+0x49c>
            // Free the key if we didn't find any values for it
            // printf("No values found for key: %s, freeing\n", key);
            free(key);
 8003104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003106:	0018      	movs	r0, r3
 8003108:	f005 fb90 	bl	800882c <free>
            key = NULL;
 800310c:	2300      	movs	r3, #0
 800310e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (*ptr) {
 8003110:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d000      	beq.n	800311a <json_to_pairs+0x4a6>
 8003118:	e5d2      	b.n	8002cc0 <json_to_pairs+0x4c>
 800311a:	e000      	b.n	800311e <json_to_pairs+0x4aa>
            break;
 800311c:	46c0      	nop			@ (mov r8, r8)
        }
    }

    // Add a NULL terminator pair
    // printf("Adding terminator, total pairs: %d\n", count);
    Pair *new_pairs = realloc(pairs, (count + 1) * sizeof(Pair));
 800311e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003120:	3301      	adds	r3, #1
 8003122:	001a      	movs	r2, r3
 8003124:	0013      	movs	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	189b      	adds	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	001a      	movs	r2, r3
 800312e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003130:	0011      	movs	r1, r2
 8003132:	0018      	movs	r0, r3
 8003134:	f005 fc36 	bl	80089a4 <realloc>
 8003138:	0003      	movs	r3, r0
 800313a:	613b      	str	r3, [r7, #16]
    if (new_pairs == NULL) {
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d12f      	bne.n	80031a2 <json_to_pairs+0x52e>
        fprintf(stderr, "Memory reallocation failed\n");
 8003142:	4b2a      	ldr	r3, [pc, #168]	@ (80031ec <json_to_pairs+0x578>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	4829      	ldr	r0, [pc, #164]	@ (80031f0 <json_to_pairs+0x57c>)
 800314a:	221b      	movs	r2, #27
 800314c:	2101      	movs	r1, #1
 800314e:	f006 fc7d 	bl	8009a4c <fwrite>
        for (int i = 0; i < count; i++) {
 8003152:	2300      	movs	r3, #0
 8003154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003156:	e01a      	b.n	800318e <json_to_pairs+0x51a>
            free(pairs[i].name);
 8003158:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800315a:	0013      	movs	r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	189b      	adds	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	001a      	movs	r2, r3
 8003164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003166:	189b      	adds	r3, r3, r2
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	0018      	movs	r0, r3
 800316c:	f005 fb5e 	bl	800882c <free>
            free(pairs[i].int_values);
 8003170:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003172:	0013      	movs	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	189b      	adds	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	001a      	movs	r2, r3
 800317c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317e:	189b      	adds	r3, r3, r2
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	0018      	movs	r0, r3
 8003184:	f005 fb52 	bl	800882c <free>
        for (int i = 0; i < count; i++) {
 8003188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318a:	3301      	adds	r3, #1
 800318c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800318e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003190:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003192:	429a      	cmp	r2, r3
 8003194:	dbe0      	blt.n	8003158 <json_to_pairs+0x4e4>
        }
        free(pairs);
 8003196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003198:	0018      	movs	r0, r3
 800319a:	f005 fb47 	bl	800882c <free>
        return NULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	e020      	b.n	80031e4 <json_to_pairs+0x570>
    }
    pairs = new_pairs;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	657b      	str	r3, [r7, #84]	@ 0x54
    
    pairs[count].name = NULL;
 80031a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80031a8:	0013      	movs	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	189b      	adds	r3, r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	001a      	movs	r2, r3
 80031b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b4:	189b      	adds	r3, r3, r2
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
    pairs[count].int_values = NULL;
 80031ba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80031bc:	0013      	movs	r3, r2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	189b      	adds	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	001a      	movs	r2, r3
 80031c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031c8:	189b      	adds	r3, r3, r2
 80031ca:	2200      	movs	r2, #0
 80031cc:	605a      	str	r2, [r3, #4]
    pairs[count].num_values = 0;
 80031ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80031d0:	0013      	movs	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	189b      	adds	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	001a      	movs	r2, r3
 80031da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031dc:	189b      	adds	r3, r3, r2
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]

    return pairs;
 80031e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 80031e4:	0018      	movs	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b016      	add	sp, #88	@ 0x58
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20000030 	.word	0x20000030
 80031f0:	0800d260 	.word	0x0800d260

080031f4 <free_pairs>:

void free_pairs(Pair *pairs) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
    for (int i = 0; pairs[i].name != NULL; i++) {
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	e025      	b.n	800324e <free_pairs+0x5a>
        free(pairs[i].name);
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	0013      	movs	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	189b      	adds	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	001a      	movs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	189b      	adds	r3, r3, r2
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	0018      	movs	r0, r3
 8003216:	f005 fb09 	bl	800882c <free>
        if (pairs[i].int_values) {
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	0013      	movs	r3, r2
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	189b      	adds	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	001a      	movs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	189b      	adds	r3, r3, r2
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00b      	beq.n	8003248 <free_pairs+0x54>
            free(pairs[i].int_values);  // Free the int array
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	0013      	movs	r3, r2
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	189b      	adds	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	001a      	movs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	189b      	adds	r3, r3, r2
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	0018      	movs	r0, r3
 8003244:	f005 faf2 	bl	800882c <free>
    for (int i = 0; pairs[i].name != NULL; i++) {
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3301      	adds	r3, #1
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	0013      	movs	r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	189b      	adds	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	001a      	movs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	189b      	adds	r3, r3, r2
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1ce      	bne.n	8003202 <free_pairs+0xe>
        }
    }
    free(pairs);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	0018      	movs	r0, r3
 8003268:	f005 fae0 	bl	800882c <free>
}
 800326c:	46c0      	nop			@ (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b004      	add	sp, #16
 8003272:	bd80      	pop	{r7, pc}

08003274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003276:	b0a9      	sub	sp, #164	@ 0xa4
 8003278:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800327a:	f000 ff79 	bl	8004170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800327e:	f000 f8a9 	bl	80033d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003282:	f000 fa4b 	bl	800371c <MX_GPIO_Init>
  MX_DMA_Init();
 8003286:	f000 fa2b 	bl	80036e0 <MX_DMA_Init>
  MX_I2C1_Init();
 800328a:	f000 f905 	bl	8003498 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800328e:	f000 f9f7 	bl	8003680 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8003292:	f000 f941 	bl	8003518 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  // Start UART reception with interrupts

//  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  char buffer[128];
  HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8003296:	4947      	ldr	r1, [pc, #284]	@ (80033b4 <main+0x140>)
 8003298:	4b47      	ldr	r3, [pc, #284]	@ (80033b8 <main+0x144>)
 800329a:	2201      	movs	r2, #1
 800329c:	0018      	movs	r0, r3
 800329e:	f004 f960 	bl	8007562 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (RxCompleteFlag)
 80032a2:	4b46      	ldr	r3, [pc, #280]	@ (80033bc <main+0x148>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d060      	beq.n	800336c <main+0xf8>
	      {
	        RxIndex = 0;
 80032aa:	4b45      	ldr	r3, [pc, #276]	@ (80033c0 <main+0x14c>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
	        RxCompleteFlag = 0;
 80032b0:	4b42      	ldr	r3, [pc, #264]	@ (80033bc <main+0x148>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	701a      	strb	r2, [r3, #0]
//	        sendString((char*)RxData);
	        Pair *pairs = json_to_pairs((char*)RxData);
 80032b6:	4b43      	ldr	r3, [pc, #268]	@ (80033c4 <main+0x150>)
 80032b8:	0018      	movs	r0, r3
 80032ba:	f7ff fcdb 	bl	8002c74 <json_to_pairs>
 80032be:	0003      	movs	r3, r0
 80032c0:	2290      	movs	r2, #144	@ 0x90
 80032c2:	18ba      	adds	r2, r7, r2
 80032c4:	6013      	str	r3, [r2, #0]
	        int index = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	2294      	movs	r2, #148	@ 0x94
 80032ca:	18ba      	adds	r2, r7, r2
 80032cc:	6013      	str	r3, [r2, #0]
	        while(pairs[index].name != NULL){
 80032ce:	e033      	b.n	8003338 <main+0xc4>
	        	execute_function(get_by_name(ITEMS, pairs[index].name), pairs[index].num_values, pairs[index].int_values);
 80032d0:	2494      	movs	r4, #148	@ 0x94
 80032d2:	193b      	adds	r3, r7, r4
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	0013      	movs	r3, r2
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	189b      	adds	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	001a      	movs	r2, r3
 80032e0:	2590      	movs	r5, #144	@ 0x90
 80032e2:	197b      	adds	r3, r7, r5
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	2684      	movs	r6, #132	@ 0x84
 80032ec:	19bb      	adds	r3, r7, r6
 80032ee:	4936      	ldr	r1, [pc, #216]	@ (80033c8 <main+0x154>)
 80032f0:	0018      	movs	r0, r3
 80032f2:	f7ff fc89 	bl	8002c08 <get_by_name>
 80032f6:	193b      	adds	r3, r7, r4
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	0013      	movs	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	189b      	adds	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	001a      	movs	r2, r3
 8003304:	197b      	adds	r3, r7, r5
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	189b      	adds	r3, r3, r2
 800330a:	6898      	ldr	r0, [r3, #8]
 800330c:	193b      	adds	r3, r7, r4
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	0013      	movs	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	189b      	adds	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	001a      	movs	r2, r3
 800331a:	197b      	adds	r3, r7, r5
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	189b      	adds	r3, r3, r2
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	19b9      	adds	r1, r7, r6
 8003324:	0002      	movs	r2, r0
 8003326:	6808      	ldr	r0, [r1, #0]
 8003328:	6849      	ldr	r1, [r1, #4]
 800332a:	f7ff fc59 	bl	8002be0 <execute_function>
	        	index++;
 800332e:	193b      	adds	r3, r7, r4
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3301      	adds	r3, #1
 8003334:	193a      	adds	r2, r7, r4
 8003336:	6013      	str	r3, [r2, #0]
	        while(pairs[index].name != NULL){
 8003338:	2394      	movs	r3, #148	@ 0x94
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	0013      	movs	r3, r2
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	189b      	adds	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	001a      	movs	r2, r3
 8003348:	2190      	movs	r1, #144	@ 0x90
 800334a:	187b      	adds	r3, r7, r1
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	189b      	adds	r3, r3, r2
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1bc      	bne.n	80032d0 <main+0x5c>
	        }
	        free_pairs(pairs);
 8003356:	187b      	adds	r3, r7, r1
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	0018      	movs	r0, r3
 800335c:	f7ff ff4a 	bl	80031f4 <free_pairs>
	        // Restart interrupt reception
	        HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8003360:	4914      	ldr	r1, [pc, #80]	@ (80033b4 <main+0x140>)
 8003362:	4b15      	ldr	r3, [pc, #84]	@ (80033b8 <main+0x144>)
 8003364:	2201      	movs	r2, #1
 8003366:	0018      	movs	r0, r3
 8003368:	f004 f8fb 	bl	8007562 <HAL_UART_Receive_IT>
	      }
    float temperature = getTemp();
 800336c:	f000 fa9e 	bl	80038ac <getTemp>
 8003370:	1c03      	adds	r3, r0, #0
 8003372:	248c      	movs	r4, #140	@ 0x8c
 8003374:	193a      	adds	r2, r7, r4
 8003376:	6013      	str	r3, [r2, #0]
    //! to string
    if (temperature != -1.0f)
 8003378:	4914      	ldr	r1, [pc, #80]	@ (80033cc <main+0x158>)
 800337a:	193b      	adds	r3, r7, r4
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	f7fd f8a9 	bl	80004d4 <__aeabi_fcmpeq>
 8003382:	1e03      	subs	r3, r0, #0
 8003384:	d111      	bne.n	80033aa <main+0x136>
    {
        snprintf(buffer, sizeof(buffer), "%.2f\r\n", temperature);
 8003386:	193b      	adds	r3, r7, r4
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	f7ff fb41 	bl	8002a10 <__aeabi_f2d>
 800338e:	0002      	movs	r2, r0
 8003390:	000b      	movs	r3, r1
 8003392:	490f      	ldr	r1, [pc, #60]	@ (80033d0 <main+0x15c>)
 8003394:	1d38      	adds	r0, r7, #4
 8003396:	9200      	str	r2, [sp, #0]
 8003398:	9301      	str	r3, [sp, #4]
 800339a:	000a      	movs	r2, r1
 800339c:	2180      	movs	r1, #128	@ 0x80
 800339e:	f006 fb61 	bl	8009a64 <sniprintf>
//        sendString("t:");
        sendString(buffer);
 80033a2:	1d3b      	adds	r3, r7, #4
 80033a4:	0018      	movs	r0, r3
 80033a6:	f000 fa6b 	bl	8003880 <sendString>
    }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(100);
 80033aa:	2064      	movs	r0, #100	@ 0x64
 80033ac:	f000 ff44 	bl	8004238 <HAL_Delay>
  {
 80033b0:	e777      	b.n	80032a2 <main+0x2e>
 80033b2:	46c0      	nop			@ (mov r8, r8)
 80033b4:	20000370 	.word	0x20000370
 80033b8:	200002e8 	.word	0x200002e8
 80033bc:	20000571 	.word	0x20000571
 80033c0:	20000570 	.word	0x20000570
 80033c4:	20000470 	.word	0x20000470
 80033c8:	20000000 	.word	0x20000000
 80033cc:	bf800000 	.word	0xbf800000
 80033d0:	0800d28c 	.word	0x0800d28c

080033d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033d4:	b590      	push	{r4, r7, lr}
 80033d6:	b095      	sub	sp, #84	@ 0x54
 80033d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033da:	2420      	movs	r4, #32
 80033dc:	193b      	adds	r3, r7, r4
 80033de:	0018      	movs	r0, r3
 80033e0:	2330      	movs	r3, #48	@ 0x30
 80033e2:	001a      	movs	r2, r3
 80033e4:	2100      	movs	r1, #0
 80033e6:	f006 fc81 	bl	8009cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033ea:	2310      	movs	r3, #16
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	0018      	movs	r0, r3
 80033f0:	2310      	movs	r3, #16
 80033f2:	001a      	movs	r2, r3
 80033f4:	2100      	movs	r1, #0
 80033f6:	f006 fc79 	bl	8009cec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033fa:	003b      	movs	r3, r7
 80033fc:	0018      	movs	r0, r3
 80033fe:	2310      	movs	r3, #16
 8003400:	001a      	movs	r2, r3
 8003402:	2100      	movs	r1, #0
 8003404:	f006 fc72 	bl	8009cec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003408:	0021      	movs	r1, r4
 800340a:	187b      	adds	r3, r7, r1
 800340c:	2202      	movs	r2, #2
 800340e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003410:	187b      	adds	r3, r7, r1
 8003412:	2201      	movs	r2, #1
 8003414:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003416:	187b      	adds	r3, r7, r1
 8003418:	2210      	movs	r2, #16
 800341a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800341c:	187b      	adds	r3, r7, r1
 800341e:	2202      	movs	r2, #2
 8003420:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003422:	187b      	adds	r3, r7, r1
 8003424:	2200      	movs	r2, #0
 8003426:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003428:	187b      	adds	r3, r7, r1
 800342a:	22a0      	movs	r2, #160	@ 0xa0
 800342c:	0392      	lsls	r2, r2, #14
 800342e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003430:	187b      	adds	r3, r7, r1
 8003432:	2200      	movs	r2, #0
 8003434:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003436:	187b      	adds	r3, r7, r1
 8003438:	0018      	movs	r0, r3
 800343a:	f002 f8c9 	bl	80055d0 <HAL_RCC_OscConfig>
 800343e:	1e03      	subs	r3, r0, #0
 8003440:	d001      	beq.n	8003446 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003442:	f000 fc0b 	bl	8003c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003446:	2110      	movs	r1, #16
 8003448:	187b      	adds	r3, r7, r1
 800344a:	2207      	movs	r2, #7
 800344c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800344e:	187b      	adds	r3, r7, r1
 8003450:	2202      	movs	r2, #2
 8003452:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003454:	187b      	adds	r3, r7, r1
 8003456:	2200      	movs	r2, #0
 8003458:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800345a:	187b      	adds	r3, r7, r1
 800345c:	2200      	movs	r2, #0
 800345e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003460:	187b      	adds	r3, r7, r1
 8003462:	2101      	movs	r1, #1
 8003464:	0018      	movs	r0, r3
 8003466:	f002 fbcd 	bl	8005c04 <HAL_RCC_ClockConfig>
 800346a:	1e03      	subs	r3, r0, #0
 800346c:	d001      	beq.n	8003472 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800346e:	f000 fbf5 	bl	8003c5c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003472:	003b      	movs	r3, r7
 8003474:	2220      	movs	r2, #32
 8003476:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003478:	003b      	movs	r3, r7
 800347a:	2200      	movs	r2, #0
 800347c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800347e:	003b      	movs	r3, r7
 8003480:	0018      	movs	r0, r3
 8003482:	f002 fd03 	bl	8005e8c <HAL_RCCEx_PeriphCLKConfig>
 8003486:	1e03      	subs	r3, r0, #0
 8003488:	d001      	beq.n	800348e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800348a:	f000 fbe7 	bl	8003c5c <Error_Handler>
  }
}
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	b015      	add	sp, #84	@ 0x54
 8003494:	bd90      	pop	{r4, r7, pc}
	...

08003498 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800349c:	4b1b      	ldr	r3, [pc, #108]	@ (800350c <MX_I2C1_Init+0x74>)
 800349e:	4a1c      	ldr	r2, [pc, #112]	@ (8003510 <MX_I2C1_Init+0x78>)
 80034a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80034a2:	4b1a      	ldr	r3, [pc, #104]	@ (800350c <MX_I2C1_Init+0x74>)
 80034a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003514 <MX_I2C1_Init+0x7c>)
 80034a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80034a8:	4b18      	ldr	r3, [pc, #96]	@ (800350c <MX_I2C1_Init+0x74>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034ae:	4b17      	ldr	r3, [pc, #92]	@ (800350c <MX_I2C1_Init+0x74>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034b4:	4b15      	ldr	r3, [pc, #84]	@ (800350c <MX_I2C1_Init+0x74>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80034ba:	4b14      	ldr	r3, [pc, #80]	@ (800350c <MX_I2C1_Init+0x74>)
 80034bc:	2200      	movs	r2, #0
 80034be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034c0:	4b12      	ldr	r3, [pc, #72]	@ (800350c <MX_I2C1_Init+0x74>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034c6:	4b11      	ldr	r3, [pc, #68]	@ (800350c <MX_I2C1_Init+0x74>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034cc:	4b0f      	ldr	r3, [pc, #60]	@ (800350c <MX_I2C1_Init+0x74>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80034d2:	4b0e      	ldr	r3, [pc, #56]	@ (800350c <MX_I2C1_Init+0x74>)
 80034d4:	0018      	movs	r0, r3
 80034d6:	f001 fb71 	bl	8004bbc <HAL_I2C_Init>
 80034da:	1e03      	subs	r3, r0, #0
 80034dc:	d001      	beq.n	80034e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80034de:	f000 fbbd 	bl	8003c5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80034e2:	4b0a      	ldr	r3, [pc, #40]	@ (800350c <MX_I2C1_Init+0x74>)
 80034e4:	2100      	movs	r1, #0
 80034e6:	0018      	movs	r0, r3
 80034e8:	f001 ffda 	bl	80054a0 <HAL_I2CEx_ConfigAnalogFilter>
 80034ec:	1e03      	subs	r3, r0, #0
 80034ee:	d001      	beq.n	80034f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80034f0:	f000 fbb4 	bl	8003c5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80034f4:	4b05      	ldr	r3, [pc, #20]	@ (800350c <MX_I2C1_Init+0x74>)
 80034f6:	2100      	movs	r1, #0
 80034f8:	0018      	movs	r0, r3
 80034fa:	f002 f81d 	bl	8005538 <HAL_I2CEx_ConfigDigitalFilter>
 80034fe:	1e03      	subs	r3, r0, #0
 8003500:	d001      	beq.n	8003506 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003502:	f000 fbab 	bl	8003c5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003506:	46c0      	nop			@ (mov r8, r8)
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20000208 	.word	0x20000208
 8003510:	40005400 	.word	0x40005400
 8003514:	00201d2b 	.word	0x00201d2b

08003518 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b096      	sub	sp, #88	@ 0x58
 800351c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800351e:	2348      	movs	r3, #72	@ 0x48
 8003520:	18fb      	adds	r3, r7, r3
 8003522:	0018      	movs	r0, r3
 8003524:	2310      	movs	r3, #16
 8003526:	001a      	movs	r2, r3
 8003528:	2100      	movs	r1, #0
 800352a:	f006 fbdf 	bl	8009cec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800352e:	2340      	movs	r3, #64	@ 0x40
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	0018      	movs	r0, r3
 8003534:	2308      	movs	r3, #8
 8003536:	001a      	movs	r2, r3
 8003538:	2100      	movs	r1, #0
 800353a:	f006 fbd7 	bl	8009cec <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800353e:	2324      	movs	r3, #36	@ 0x24
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	0018      	movs	r0, r3
 8003544:	231c      	movs	r3, #28
 8003546:	001a      	movs	r2, r3
 8003548:	2100      	movs	r1, #0
 800354a:	f006 fbcf 	bl	8009cec <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800354e:	1d3b      	adds	r3, r7, #4
 8003550:	0018      	movs	r0, r3
 8003552:	2320      	movs	r3, #32
 8003554:	001a      	movs	r2, r3
 8003556:	2100      	movs	r1, #0
 8003558:	f006 fbc8 	bl	8009cec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800355c:	4b46      	ldr	r3, [pc, #280]	@ (8003678 <MX_TIM1_Init+0x160>)
 800355e:	4a47      	ldr	r2, [pc, #284]	@ (800367c <MX_TIM1_Init+0x164>)
 8003560:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003562:	4b45      	ldr	r3, [pc, #276]	@ (8003678 <MX_TIM1_Init+0x160>)
 8003564:	2200      	movs	r2, #0
 8003566:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003568:	4b43      	ldr	r3, [pc, #268]	@ (8003678 <MX_TIM1_Init+0x160>)
 800356a:	2200      	movs	r2, #0
 800356c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59;
 800356e:	4b42      	ldr	r3, [pc, #264]	@ (8003678 <MX_TIM1_Init+0x160>)
 8003570:	223b      	movs	r2, #59	@ 0x3b
 8003572:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003574:	4b40      	ldr	r3, [pc, #256]	@ (8003678 <MX_TIM1_Init+0x160>)
 8003576:	2200      	movs	r2, #0
 8003578:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800357a:	4b3f      	ldr	r3, [pc, #252]	@ (8003678 <MX_TIM1_Init+0x160>)
 800357c:	2200      	movs	r2, #0
 800357e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003580:	4b3d      	ldr	r3, [pc, #244]	@ (8003678 <MX_TIM1_Init+0x160>)
 8003582:	2200      	movs	r2, #0
 8003584:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003586:	4b3c      	ldr	r3, [pc, #240]	@ (8003678 <MX_TIM1_Init+0x160>)
 8003588:	0018      	movs	r0, r3
 800358a:	f002 fd4d 	bl	8006028 <HAL_TIM_Base_Init>
 800358e:	1e03      	subs	r3, r0, #0
 8003590:	d001      	beq.n	8003596 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8003592:	f000 fb63 	bl	8003c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003596:	2148      	movs	r1, #72	@ 0x48
 8003598:	187b      	adds	r3, r7, r1
 800359a:	2280      	movs	r2, #128	@ 0x80
 800359c:	0152      	lsls	r2, r2, #5
 800359e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035a0:	187a      	adds	r2, r7, r1
 80035a2:	4b35      	ldr	r3, [pc, #212]	@ (8003678 <MX_TIM1_Init+0x160>)
 80035a4:	0011      	movs	r1, r2
 80035a6:	0018      	movs	r0, r3
 80035a8:	f003 f93c 	bl	8006824 <HAL_TIM_ConfigClockSource>
 80035ac:	1e03      	subs	r3, r0, #0
 80035ae:	d001      	beq.n	80035b4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80035b0:	f000 fb54 	bl	8003c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035b4:	4b30      	ldr	r3, [pc, #192]	@ (8003678 <MX_TIM1_Init+0x160>)
 80035b6:	0018      	movs	r0, r3
 80035b8:	f002 fd86 	bl	80060c8 <HAL_TIM_PWM_Init>
 80035bc:	1e03      	subs	r3, r0, #0
 80035be:	d001      	beq.n	80035c4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80035c0:	f000 fb4c 	bl	8003c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035c4:	2140      	movs	r1, #64	@ 0x40
 80035c6:	187b      	adds	r3, r7, r1
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035cc:	187b      	adds	r3, r7, r1
 80035ce:	2200      	movs	r2, #0
 80035d0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035d2:	187a      	adds	r2, r7, r1
 80035d4:	4b28      	ldr	r3, [pc, #160]	@ (8003678 <MX_TIM1_Init+0x160>)
 80035d6:	0011      	movs	r1, r2
 80035d8:	0018      	movs	r0, r3
 80035da:	f003 fe19 	bl	8007210 <HAL_TIMEx_MasterConfigSynchronization>
 80035de:	1e03      	subs	r3, r0, #0
 80035e0:	d001      	beq.n	80035e6 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80035e2:	f000 fb3b 	bl	8003c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035e6:	2124      	movs	r1, #36	@ 0x24
 80035e8:	187b      	adds	r3, r7, r1
 80035ea:	2260      	movs	r2, #96	@ 0x60
 80035ec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80035ee:	187b      	adds	r3, r7, r1
 80035f0:	2200      	movs	r2, #0
 80035f2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	2200      	movs	r2, #0
 80035f8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	2200      	movs	r2, #0
 80035fe:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003600:	187b      	adds	r3, r7, r1
 8003602:	2200      	movs	r2, #0
 8003604:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003606:	187b      	adds	r3, r7, r1
 8003608:	2200      	movs	r2, #0
 800360a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800360c:	187b      	adds	r3, r7, r1
 800360e:	2200      	movs	r2, #0
 8003610:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003612:	1879      	adds	r1, r7, r1
 8003614:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <MX_TIM1_Init+0x160>)
 8003616:	2200      	movs	r2, #0
 8003618:	0018      	movs	r0, r3
 800361a:	f003 f83d 	bl	8006698 <HAL_TIM_PWM_ConfigChannel>
 800361e:	1e03      	subs	r3, r0, #0
 8003620:	d001      	beq.n	8003626 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8003622:	f000 fb1b 	bl	8003c5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800362c:	1d3b      	adds	r3, r7, #4
 800362e:	2200      	movs	r2, #0
 8003630:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003632:	1d3b      	adds	r3, r7, #4
 8003634:	2200      	movs	r2, #0
 8003636:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003638:	1d3b      	adds	r3, r7, #4
 800363a:	2200      	movs	r2, #0
 800363c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800363e:	1d3b      	adds	r3, r7, #4
 8003640:	2200      	movs	r2, #0
 8003642:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003644:	1d3b      	adds	r3, r7, #4
 8003646:	2280      	movs	r2, #128	@ 0x80
 8003648:	0192      	lsls	r2, r2, #6
 800364a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800364c:	1d3b      	adds	r3, r7, #4
 800364e:	2200      	movs	r2, #0
 8003650:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003652:	1d3a      	adds	r2, r7, #4
 8003654:	4b08      	ldr	r3, [pc, #32]	@ (8003678 <MX_TIM1_Init+0x160>)
 8003656:	0011      	movs	r1, r2
 8003658:	0018      	movs	r0, r3
 800365a:	f003 fe31 	bl	80072c0 <HAL_TIMEx_ConfigBreakDeadTime>
 800365e:	1e03      	subs	r3, r0, #0
 8003660:	d001      	beq.n	8003666 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8003662:	f000 fafb 	bl	8003c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003666:	4b04      	ldr	r3, [pc, #16]	@ (8003678 <MX_TIM1_Init+0x160>)
 8003668:	0018      	movs	r0, r3
 800366a:	f000 fbbb 	bl	8003de4 <HAL_TIM_MspPostInit>

}
 800366e:	46c0      	nop			@ (mov r8, r8)
 8003670:	46bd      	mov	sp, r7
 8003672:	b016      	add	sp, #88	@ 0x58
 8003674:	bd80      	pop	{r7, pc}
 8003676:	46c0      	nop			@ (mov r8, r8)
 8003678:	2000025c 	.word	0x2000025c
 800367c:	40012c00 	.word	0x40012c00

08003680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003684:	4b14      	ldr	r3, [pc, #80]	@ (80036d8 <MX_USART2_UART_Init+0x58>)
 8003686:	4a15      	ldr	r2, [pc, #84]	@ (80036dc <MX_USART2_UART_Init+0x5c>)
 8003688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800368a:	4b13      	ldr	r3, [pc, #76]	@ (80036d8 <MX_USART2_UART_Init+0x58>)
 800368c:	2296      	movs	r2, #150	@ 0x96
 800368e:	0212      	lsls	r2, r2, #8
 8003690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003692:	4b11      	ldr	r3, [pc, #68]	@ (80036d8 <MX_USART2_UART_Init+0x58>)
 8003694:	2200      	movs	r2, #0
 8003696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003698:	4b0f      	ldr	r3, [pc, #60]	@ (80036d8 <MX_USART2_UART_Init+0x58>)
 800369a:	2200      	movs	r2, #0
 800369c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800369e:	4b0e      	ldr	r3, [pc, #56]	@ (80036d8 <MX_USART2_UART_Init+0x58>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036a4:	4b0c      	ldr	r3, [pc, #48]	@ (80036d8 <MX_USART2_UART_Init+0x58>)
 80036a6:	220c      	movs	r2, #12
 80036a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036aa:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <MX_USART2_UART_Init+0x58>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036b0:	4b09      	ldr	r3, [pc, #36]	@ (80036d8 <MX_USART2_UART_Init+0x58>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036b6:	4b08      	ldr	r3, [pc, #32]	@ (80036d8 <MX_USART2_UART_Init+0x58>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036bc:	4b06      	ldr	r3, [pc, #24]	@ (80036d8 <MX_USART2_UART_Init+0x58>)
 80036be:	2200      	movs	r2, #0
 80036c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036c2:	4b05      	ldr	r3, [pc, #20]	@ (80036d8 <MX_USART2_UART_Init+0x58>)
 80036c4:	0018      	movs	r0, r3
 80036c6:	f003 fe59 	bl	800737c <HAL_UART_Init>
 80036ca:	1e03      	subs	r3, r0, #0
 80036cc:	d001      	beq.n	80036d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80036ce:	f000 fac5 	bl	8003c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	200002e8 	.word	0x200002e8
 80036dc:	40004400 	.word	0x40004400

080036e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80036e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <MX_DMA_Init+0x38>)
 80036e8:	695a      	ldr	r2, [r3, #20]
 80036ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <MX_DMA_Init+0x38>)
 80036ec:	2101      	movs	r1, #1
 80036ee:	430a      	orrs	r2, r1
 80036f0:	615a      	str	r2, [r3, #20]
 80036f2:	4b09      	ldr	r3, [pc, #36]	@ (8003718 <MX_DMA_Init+0x38>)
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	2201      	movs	r2, #1
 80036f8:	4013      	ands	r3, r2
 80036fa:	607b      	str	r3, [r7, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80036fe:	2200      	movs	r2, #0
 8003700:	2100      	movs	r1, #0
 8003702:	200a      	movs	r0, #10
 8003704:	f000 fe68 	bl	80043d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003708:	200a      	movs	r0, #10
 800370a:	f000 fe7a 	bl	8004402 <HAL_NVIC_EnableIRQ>

}
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	46bd      	mov	sp, r7
 8003712:	b002      	add	sp, #8
 8003714:	bd80      	pop	{r7, pc}
 8003716:	46c0      	nop			@ (mov r8, r8)
 8003718:	40021000 	.word	0x40021000

0800371c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800371c:	b590      	push	{r4, r7, lr}
 800371e:	b08b      	sub	sp, #44	@ 0x2c
 8003720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003722:	2414      	movs	r4, #20
 8003724:	193b      	adds	r3, r7, r4
 8003726:	0018      	movs	r0, r3
 8003728:	2314      	movs	r3, #20
 800372a:	001a      	movs	r2, r3
 800372c:	2100      	movs	r1, #0
 800372e:	f006 fadd 	bl	8009cec <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003732:	4b50      	ldr	r3, [pc, #320]	@ (8003874 <MX_GPIO_Init+0x158>)
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	4b4f      	ldr	r3, [pc, #316]	@ (8003874 <MX_GPIO_Init+0x158>)
 8003738:	2180      	movs	r1, #128	@ 0x80
 800373a:	0309      	lsls	r1, r1, #12
 800373c:	430a      	orrs	r2, r1
 800373e:	615a      	str	r2, [r3, #20]
 8003740:	4b4c      	ldr	r3, [pc, #304]	@ (8003874 <MX_GPIO_Init+0x158>)
 8003742:	695a      	ldr	r2, [r3, #20]
 8003744:	2380      	movs	r3, #128	@ 0x80
 8003746:	031b      	lsls	r3, r3, #12
 8003748:	4013      	ands	r3, r2
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800374e:	4b49      	ldr	r3, [pc, #292]	@ (8003874 <MX_GPIO_Init+0x158>)
 8003750:	695a      	ldr	r2, [r3, #20]
 8003752:	4b48      	ldr	r3, [pc, #288]	@ (8003874 <MX_GPIO_Init+0x158>)
 8003754:	2180      	movs	r1, #128	@ 0x80
 8003756:	03c9      	lsls	r1, r1, #15
 8003758:	430a      	orrs	r2, r1
 800375a:	615a      	str	r2, [r3, #20]
 800375c:	4b45      	ldr	r3, [pc, #276]	@ (8003874 <MX_GPIO_Init+0x158>)
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	2380      	movs	r3, #128	@ 0x80
 8003762:	03db      	lsls	r3, r3, #15
 8003764:	4013      	ands	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800376a:	4b42      	ldr	r3, [pc, #264]	@ (8003874 <MX_GPIO_Init+0x158>)
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	4b41      	ldr	r3, [pc, #260]	@ (8003874 <MX_GPIO_Init+0x158>)
 8003770:	2180      	movs	r1, #128	@ 0x80
 8003772:	0289      	lsls	r1, r1, #10
 8003774:	430a      	orrs	r2, r1
 8003776:	615a      	str	r2, [r3, #20]
 8003778:	4b3e      	ldr	r3, [pc, #248]	@ (8003874 <MX_GPIO_Init+0x158>)
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	2380      	movs	r3, #128	@ 0x80
 800377e:	029b      	lsls	r3, r3, #10
 8003780:	4013      	ands	r3, r2
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003786:	4b3b      	ldr	r3, [pc, #236]	@ (8003874 <MX_GPIO_Init+0x158>)
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	4b3a      	ldr	r3, [pc, #232]	@ (8003874 <MX_GPIO_Init+0x158>)
 800378c:	2180      	movs	r1, #128	@ 0x80
 800378e:	02c9      	lsls	r1, r1, #11
 8003790:	430a      	orrs	r2, r1
 8003792:	615a      	str	r2, [r3, #20]
 8003794:	4b37      	ldr	r3, [pc, #220]	@ (8003874 <MX_GPIO_Init+0x158>)
 8003796:	695a      	ldr	r2, [r3, #20]
 8003798:	2380      	movs	r3, #128	@ 0x80
 800379a:	02db      	lsls	r3, r3, #11
 800379c:	4013      	ands	r3, r2
 800379e:	607b      	str	r3, [r7, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80037a2:	2390      	movs	r3, #144	@ 0x90
 80037a4:	05db      	lsls	r3, r3, #23
 80037a6:	2200      	movs	r2, #0
 80037a8:	2120      	movs	r1, #32
 80037aa:	0018      	movs	r0, r3
 80037ac:	f001 f9cc 	bl	8004b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80037b0:	4b31      	ldr	r3, [pc, #196]	@ (8003878 <MX_GPIO_Init+0x15c>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	2120      	movs	r1, #32
 80037b6:	0018      	movs	r0, r3
 80037b8:	f001 f9c6 	bl	8004b48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80037bc:	193b      	adds	r3, r7, r4
 80037be:	2280      	movs	r2, #128	@ 0x80
 80037c0:	0192      	lsls	r2, r2, #6
 80037c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80037c4:	193b      	adds	r3, r7, r4
 80037c6:	2284      	movs	r2, #132	@ 0x84
 80037c8:	0392      	lsls	r2, r2, #14
 80037ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037cc:	193b      	adds	r3, r7, r4
 80037ce:	2200      	movs	r2, #0
 80037d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80037d2:	193b      	adds	r3, r7, r4
 80037d4:	4a29      	ldr	r2, [pc, #164]	@ (800387c <MX_GPIO_Init+0x160>)
 80037d6:	0019      	movs	r1, r3
 80037d8:	0010      	movs	r0, r2
 80037da:	f001 f845 	bl	8004868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80037de:	193b      	adds	r3, r7, r4
 80037e0:	2202      	movs	r2, #2
 80037e2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80037e4:	193b      	adds	r3, r7, r4
 80037e6:	2288      	movs	r2, #136	@ 0x88
 80037e8:	0352      	lsls	r2, r2, #13
 80037ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ec:	193b      	adds	r3, r7, r4
 80037ee:	2200      	movs	r2, #0
 80037f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f2:	193a      	adds	r2, r7, r4
 80037f4:	2390      	movs	r3, #144	@ 0x90
 80037f6:	05db      	lsls	r3, r3, #23
 80037f8:	0011      	movs	r1, r2
 80037fa:	0018      	movs	r0, r3
 80037fc:	f001 f834 	bl	8004868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003800:	193b      	adds	r3, r7, r4
 8003802:	2220      	movs	r2, #32
 8003804:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003806:	193b      	adds	r3, r7, r4
 8003808:	2201      	movs	r2, #1
 800380a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380c:	193b      	adds	r3, r7, r4
 800380e:	2200      	movs	r2, #0
 8003810:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003812:	193b      	adds	r3, r7, r4
 8003814:	2200      	movs	r2, #0
 8003816:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003818:	193a      	adds	r2, r7, r4
 800381a:	2390      	movs	r3, #144	@ 0x90
 800381c:	05db      	lsls	r3, r3, #23
 800381e:	0011      	movs	r1, r2
 8003820:	0018      	movs	r0, r3
 8003822:	f001 f821 	bl	8004868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003826:	0021      	movs	r1, r4
 8003828:	187b      	adds	r3, r7, r1
 800382a:	2220      	movs	r2, #32
 800382c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800382e:	187b      	adds	r3, r7, r1
 8003830:	2201      	movs	r2, #1
 8003832:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	187b      	adds	r3, r7, r1
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800383a:	187b      	adds	r3, r7, r1
 800383c:	2200      	movs	r2, #0
 800383e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003840:	187b      	adds	r3, r7, r1
 8003842:	4a0d      	ldr	r2, [pc, #52]	@ (8003878 <MX_GPIO_Init+0x15c>)
 8003844:	0019      	movs	r1, r3
 8003846:	0010      	movs	r0, r2
 8003848:	f001 f80e 	bl	8004868 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800384c:	2200      	movs	r2, #0
 800384e:	2100      	movs	r1, #0
 8003850:	2005      	movs	r0, #5
 8003852:	f000 fdc1 	bl	80043d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003856:	2005      	movs	r0, #5
 8003858:	f000 fdd3 	bl	8004402 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800385c:	2200      	movs	r2, #0
 800385e:	2100      	movs	r1, #0
 8003860:	2007      	movs	r0, #7
 8003862:	f000 fdb9 	bl	80043d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003866:	2007      	movs	r0, #7
 8003868:	f000 fdcb 	bl	8004402 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800386c:	46c0      	nop			@ (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b00b      	add	sp, #44	@ 0x2c
 8003872:	bd90      	pop	{r4, r7, pc}
 8003874:	40021000 	.word	0x40021000
 8003878:	48000400 	.word	0x48000400
 800387c:	48000800 	.word	0x48000800

08003880 <sendString>:

/* USER CODE BEGIN 4 */
static void sendString(char *str)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	0018      	movs	r0, r3
 800388c:	f7fc fc46 	bl	800011c <strlen>
 8003890:	0003      	movs	r3, r0
 8003892:	b29a      	uxth	r2, r3
 8003894:	2301      	movs	r3, #1
 8003896:	425b      	negs	r3, r3
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4803      	ldr	r0, [pc, #12]	@ (80038a8 <sendString+0x28>)
 800389c:	f003 fdc2 	bl	8007424 <HAL_UART_Transmit>
}
 80038a0:	46c0      	nop			@ (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b002      	add	sp, #8
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	200002e8 	.word	0x200002e8

080038ac <getTemp>:

static float getTemp(void){
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af04      	add	r7, sp, #16
    uint8_t tempData[2];    // Buffer
    int16_t rawTemp;        //
    float temperature;      // Temperature in Celsius.
    if (HAL_I2C_Mem_Read(&hi2c1, TMP102_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, tempData, 2, HAL_MAX_DELAY) != HAL_OK)
 80038b2:	4819      	ldr	r0, [pc, #100]	@ (8003918 <getTemp+0x6c>)
 80038b4:	2301      	movs	r3, #1
 80038b6:	425b      	negs	r3, r3
 80038b8:	9302      	str	r3, [sp, #8]
 80038ba:	2302      	movs	r3, #2
 80038bc:	9301      	str	r3, [sp, #4]
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	2301      	movs	r3, #1
 80038c4:	2200      	movs	r2, #0
 80038c6:	2190      	movs	r1, #144	@ 0x90
 80038c8:	f001 fa1e 	bl	8004d08 <HAL_I2C_Mem_Read>
 80038cc:	1e03      	subs	r3, r0, #0
 80038ce:	d001      	beq.n	80038d4 <getTemp+0x28>
    {
        return -1.0f;
 80038d0:	4b12      	ldr	r3, [pc, #72]	@ (800391c <getTemp+0x70>)
 80038d2:	e01c      	b.n	800390e <getTemp+0x62>
    }
    rawTemp = (int16_t)((tempData[0] << 4) | (tempData[1] >> 4));
 80038d4:	1d3b      	adds	r3, r7, #4
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	b21b      	sxth	r3, r3
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	b219      	sxth	r1, r3
 80038de:	1d3b      	adds	r3, r7, #4
 80038e0:	785b      	ldrb	r3, [r3, #1]
 80038e2:	091b      	lsrs	r3, r3, #4
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	b21a      	sxth	r2, r3
 80038e8:	200e      	movs	r0, #14
 80038ea:	183b      	adds	r3, r7, r0
 80038ec:	430a      	orrs	r2, r1
 80038ee:	801a      	strh	r2, [r3, #0]
    temperature = rawTemp * 0.0625f;  // TMP102 0.0625°C.
 80038f0:	183b      	adds	r3, r7, r0
 80038f2:	2200      	movs	r2, #0
 80038f4:	5e9b      	ldrsh	r3, [r3, r2]
 80038f6:	0018      	movs	r0, r3
 80038f8:	f7fd f89a 	bl	8000a30 <__aeabi_i2f>
 80038fc:	1c03      	adds	r3, r0, #0
 80038fe:	21f6      	movs	r1, #246	@ 0xf6
 8003900:	0589      	lsls	r1, r1, #22
 8003902:	1c18      	adds	r0, r3, #0
 8003904:	f7fc ff3a 	bl	800077c <__aeabi_fmul>
 8003908:	1c03      	adds	r3, r0, #0
 800390a:	60bb      	str	r3, [r7, #8]
    return temperature;
 800390c:	68bb      	ldr	r3, [r7, #8]
}
 800390e:	1c18      	adds	r0, r3, #0
 8003910:	46bd      	mov	sp, r7
 8003912:	b004      	add	sp, #16
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	20000208 	.word	0x20000208
 800391c:	bf800000 	.word	0xbf800000

08003920 <HAL_UART_RxCpltCallback>:
//    sendString("message recieved");
//    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);    // Blue LED
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1b      	ldr	r2, [pc, #108]	@ (800399c <HAL_UART_RxCpltCallback+0x7c>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d130      	bne.n	8003994 <HAL_UART_RxCpltCallback+0x74>
    {
        // Check if we haven't filled the buffer
        if (RxIndex < RX_BUFFER_SIZE - 1)
 8003932:	4b1b      	ldr	r3, [pc, #108]	@ (80039a0 <HAL_UART_RxCpltCallback+0x80>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2bff      	cmp	r3, #255	@ 0xff
 8003938:	d023      	beq.n	8003982 <HAL_UART_RxCpltCallback+0x62>
        {
            // Store the received byte
            RxData[RxIndex++] = RxBuffer[0];
 800393a:	4b19      	ldr	r3, [pc, #100]	@ (80039a0 <HAL_UART_RxCpltCallback+0x80>)
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	b2d1      	uxtb	r1, r2
 8003942:	4a17      	ldr	r2, [pc, #92]	@ (80039a0 <HAL_UART_RxCpltCallback+0x80>)
 8003944:	7011      	strb	r1, [r2, #0]
 8003946:	001a      	movs	r2, r3
 8003948:	4b16      	ldr	r3, [pc, #88]	@ (80039a4 <HAL_UART_RxCpltCallback+0x84>)
 800394a:	7819      	ldrb	r1, [r3, #0]
 800394c:	4b16      	ldr	r3, [pc, #88]	@ (80039a8 <HAL_UART_RxCpltCallback+0x88>)
 800394e:	5499      	strb	r1, [r3, r2]

            // Check for end of message (newline or carriage return)
            if (RxBuffer[0] == '\r' || RxBuffer[0] == '\n')
 8003950:	4b14      	ldr	r3, [pc, #80]	@ (80039a4 <HAL_UART_RxCpltCallback+0x84>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b0d      	cmp	r3, #13
 8003956:	d003      	beq.n	8003960 <HAL_UART_RxCpltCallback+0x40>
 8003958:	4b12      	ldr	r3, [pc, #72]	@ (80039a4 <HAL_UART_RxCpltCallback+0x84>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b0a      	cmp	r3, #10
 800395e:	d109      	bne.n	8003974 <HAL_UART_RxCpltCallback+0x54>
            {
                RxData[RxIndex] = '\0';  // Null-terminate the string
 8003960:	4b0f      	ldr	r3, [pc, #60]	@ (80039a0 <HAL_UART_RxCpltCallback+0x80>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	001a      	movs	r2, r3
 8003966:	4b10      	ldr	r3, [pc, #64]	@ (80039a8 <HAL_UART_RxCpltCallback+0x88>)
 8003968:	2100      	movs	r1, #0
 800396a:	5499      	strb	r1, [r3, r2]
                RxCompleteFlag = 1;
 800396c:	4b0f      	ldr	r3, [pc, #60]	@ (80039ac <HAL_UART_RxCpltCallback+0x8c>)
 800396e:	2201      	movs	r2, #1
 8003970:	701a      	strb	r2, [r3, #0]
            // Buffer full, reset
            RxIndex = 0;
            HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
        }
    }
}
 8003972:	e00f      	b.n	8003994 <HAL_UART_RxCpltCallback+0x74>
                HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8003974:	490b      	ldr	r1, [pc, #44]	@ (80039a4 <HAL_UART_RxCpltCallback+0x84>)
 8003976:	4b0e      	ldr	r3, [pc, #56]	@ (80039b0 <HAL_UART_RxCpltCallback+0x90>)
 8003978:	2201      	movs	r2, #1
 800397a:	0018      	movs	r0, r3
 800397c:	f003 fdf1 	bl	8007562 <HAL_UART_Receive_IT>
}
 8003980:	e008      	b.n	8003994 <HAL_UART_RxCpltCallback+0x74>
            RxIndex = 0;
 8003982:	4b07      	ldr	r3, [pc, #28]	@ (80039a0 <HAL_UART_RxCpltCallback+0x80>)
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8003988:	4906      	ldr	r1, [pc, #24]	@ (80039a4 <HAL_UART_RxCpltCallback+0x84>)
 800398a:	4b09      	ldr	r3, [pc, #36]	@ (80039b0 <HAL_UART_RxCpltCallback+0x90>)
 800398c:	2201      	movs	r2, #1
 800398e:	0018      	movs	r0, r3
 8003990:	f003 fde7 	bl	8007562 <HAL_UART_Receive_IT>
}
 8003994:	46c0      	nop			@ (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b002      	add	sp, #8
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40004400 	.word	0x40004400
 80039a0:	20000570 	.word	0x20000570
 80039a4:	20000370 	.word	0x20000370
 80039a8:	20000470 	.word	0x20000470
 80039ac:	20000571 	.word	0x20000571
 80039b0:	200002e8 	.word	0x200002e8

080039b4 <led1_function>:

int led1_function(int argc, int* argv){
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
//	sendString("led1");
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, argv[0]);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	4804      	ldr	r0, [pc, #16]	@ (80039d8 <led1_function+0x24>)
 80039c6:	001a      	movs	r2, r3
 80039c8:	2120      	movs	r1, #32
 80039ca:	f001 f8bd 	bl	8004b48 <HAL_GPIO_WritePin>
		return 0;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	0018      	movs	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b002      	add	sp, #8
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	48000400 	.word	0x48000400

080039dc <ledband>:

int ledband(int argc, int* argv){
 80039dc:	b5b0      	push	{r4, r5, r7, lr}
 80039de:	b0ba      	sub	sp, #232	@ 0xe8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
	uint8_t all_red[72][3];

	  for (int i = 0; i < 72; i++) {
 80039e6:	2300      	movs	r3, #0
 80039e8:	22e4      	movs	r2, #228	@ 0xe4
 80039ea:	18ba      	adds	r2, r7, r2
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e02d      	b.n	8003a4c <ledband+0x70>
		  all_red[i][0] = argv[0];
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	b2d8      	uxtb	r0, r3
 80039f6:	250c      	movs	r5, #12
 80039f8:	1979      	adds	r1, r7, r5
 80039fa:	24e4      	movs	r4, #228	@ 0xe4
 80039fc:	193b      	adds	r3, r7, r4
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	0013      	movs	r3, r2
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	189b      	adds	r3, r3, r2
 8003a06:	1c02      	adds	r2, r0, #0
 8003a08:	545a      	strb	r2, [r3, r1]
		  all_red[i][1] = argv[1];
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	b2d8      	uxtb	r0, r3
 8003a12:	1979      	adds	r1, r7, r5
 8003a14:	193b      	adds	r3, r7, r4
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	0013      	movs	r3, r2
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	189b      	adds	r3, r3, r2
 8003a1e:	18cb      	adds	r3, r1, r3
 8003a20:	3301      	adds	r3, #1
 8003a22:	1c02      	adds	r2, r0, #0
 8003a24:	701a      	strb	r2, [r3, #0]
		  all_red[i][2] = argv[2];
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	b2d8      	uxtb	r0, r3
 8003a2e:	1979      	adds	r1, r7, r5
 8003a30:	193b      	adds	r3, r7, r4
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	0013      	movs	r3, r2
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	189b      	adds	r3, r3, r2
 8003a3a:	18cb      	adds	r3, r1, r3
 8003a3c:	3302      	adds	r3, #2
 8003a3e:	1c02      	adds	r2, r0, #0
 8003a40:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 72; i++) {
 8003a42:	193b      	adds	r3, r7, r4
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3301      	adds	r3, #1
 8003a48:	193a      	adds	r2, r7, r4
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	23e4      	movs	r3, #228	@ 0xe4
 8003a4e:	18fb      	adds	r3, r7, r3
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b47      	cmp	r3, #71	@ 0x47
 8003a54:	ddcc      	ble.n	80039f0 <ledband+0x14>
	  }

	  ws2812_update_all(all_red);
 8003a56:	230c      	movs	r3, #12
 8003a58:	18fb      	adds	r3, r7, r3
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f000 f81e 	bl	8003a9c <ws2812_update_all>

		return 0;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	0018      	movs	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b03a      	add	sp, #232	@ 0xe8
 8003a68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003a6c <ws2812_send>:

void ws2812_send()
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8003a70:	4b08      	ldr	r3, [pc, #32]	@ (8003a94 <ws2812_send+0x28>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2200      	movs	r2, #0
 8003a76:	625a      	str	r2, [r3, #36]	@ 0x24
    HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)LED_Buffer, BUFSIZE);
 8003a78:	23d8      	movs	r3, #216	@ 0xd8
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4a06      	ldr	r2, [pc, #24]	@ (8003a98 <ws2812_send+0x2c>)
 8003a7e:	4805      	ldr	r0, [pc, #20]	@ (8003a94 <ws2812_send+0x28>)
 8003a80:	2100      	movs	r1, #0
 8003a82:	f002 fb79 	bl	8006178 <HAL_TIM_PWM_Start_DMA>
    HAL_Delay(1); // >= 50 µs reset time (WS2812)
 8003a86:	2001      	movs	r0, #1
 8003a88:	f000 fbd6 	bl	8004238 <HAL_Delay>
}
 8003a8c:	46c0      	nop			@ (mov r8, r8)
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			@ (mov r8, r8)
 8003a94:	2000025c 	.word	0x2000025c
 8003a98:	20000574 	.word	0x20000574

08003a9c <ws2812_update_all>:

void ws2812_update_all(uint8_t colors[MAX_LEDS][3]) {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
    uint32_t index = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]

    for (uint8_t led = 0; led < MAX_LEDS; led++) {
 8003aa8:	2313      	movs	r3, #19
 8003aaa:	18fb      	adds	r3, r7, r3
 8003aac:	2200      	movs	r2, #0
 8003aae:	701a      	strb	r2, [r3, #0]
 8003ab0:	e099      	b.n	8003be6 <ws2812_update_all+0x14a>
        uint8_t red   = colors[led][0];
 8003ab2:	2113      	movs	r1, #19
 8003ab4:	187b      	adds	r3, r7, r1
 8003ab6:	781a      	ldrb	r2, [r3, #0]
 8003ab8:	0013      	movs	r3, r2
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	189b      	adds	r3, r3, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	18d2      	adds	r2, r2, r3
 8003ac2:	230f      	movs	r3, #15
 8003ac4:	18fb      	adds	r3, r7, r3
 8003ac6:	7812      	ldrb	r2, [r2, #0]
 8003ac8:	701a      	strb	r2, [r3, #0]
        uint8_t green = colors[led][1];
 8003aca:	187b      	adds	r3, r7, r1
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	0013      	movs	r3, r2
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	189b      	adds	r3, r3, r2
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	18d2      	adds	r2, r2, r3
 8003ad8:	230e      	movs	r3, #14
 8003ada:	18fb      	adds	r3, r7, r3
 8003adc:	7852      	ldrb	r2, [r2, #1]
 8003ade:	701a      	strb	r2, [r3, #0]
        uint8_t blue  = colors[led][2];
 8003ae0:	187b      	adds	r3, r7, r1
 8003ae2:	781a      	ldrb	r2, [r3, #0]
 8003ae4:	0013      	movs	r3, r2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	189b      	adds	r3, r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	18d2      	adds	r2, r2, r3
 8003aee:	230d      	movs	r3, #13
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	7892      	ldrb	r2, [r2, #2]
 8003af4:	701a      	strb	r2, [r3, #0]

        for (uint8_t i = 0; i < 8; i++) {
 8003af6:	2312      	movs	r3, #18
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	e01b      	b.n	8003b38 <ws2812_update_all+0x9c>
            LED_Buffer[index++] = (green & (1 << (7 - i))) ? BIT_1 : BIT_0;
 8003b00:	230e      	movs	r3, #14
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	781a      	ldrb	r2, [r3, #0]
 8003b06:	2312      	movs	r3, #18
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2107      	movs	r1, #7
 8003b0e:	1acb      	subs	r3, r1, r3
 8003b10:	411a      	asrs	r2, r3
 8003b12:	0013      	movs	r3, r2
 8003b14:	2201      	movs	r2, #1
 8003b16:	4013      	ands	r3, r2
 8003b18:	d001      	beq.n	8003b1e <ws2812_update_all+0x82>
 8003b1a:	2128      	movs	r1, #40	@ 0x28
 8003b1c:	e000      	b.n	8003b20 <ws2812_update_all+0x84>
 8003b1e:	2114      	movs	r1, #20
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	617a      	str	r2, [r7, #20]
 8003b26:	4a37      	ldr	r2, [pc, #220]	@ (8003c04 <ws2812_update_all+0x168>)
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	5299      	strh	r1, [r3, r2]
        for (uint8_t i = 0; i < 8; i++) {
 8003b2c:	2112      	movs	r1, #18
 8003b2e:	187b      	adds	r3, r7, r1
 8003b30:	781a      	ldrb	r2, [r3, #0]
 8003b32:	187b      	adds	r3, r7, r1
 8003b34:	3201      	adds	r2, #1
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	2312      	movs	r3, #18
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b07      	cmp	r3, #7
 8003b40:	d9de      	bls.n	8003b00 <ws2812_update_all+0x64>
        }

        for (uint8_t i = 0; i < 8; i++) {
 8003b42:	2311      	movs	r3, #17
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	2200      	movs	r2, #0
 8003b48:	701a      	strb	r2, [r3, #0]
 8003b4a:	e01b      	b.n	8003b84 <ws2812_update_all+0xe8>
            LED_Buffer[index++] = (red & (1 << (7 - i))) ? BIT_1 : BIT_0;
 8003b4c:	230f      	movs	r3, #15
 8003b4e:	18fb      	adds	r3, r7, r3
 8003b50:	781a      	ldrb	r2, [r3, #0]
 8003b52:	2311      	movs	r3, #17
 8003b54:	18fb      	adds	r3, r7, r3
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2107      	movs	r1, #7
 8003b5a:	1acb      	subs	r3, r1, r3
 8003b5c:	411a      	asrs	r2, r3
 8003b5e:	0013      	movs	r3, r2
 8003b60:	2201      	movs	r2, #1
 8003b62:	4013      	ands	r3, r2
 8003b64:	d001      	beq.n	8003b6a <ws2812_update_all+0xce>
 8003b66:	2128      	movs	r1, #40	@ 0x28
 8003b68:	e000      	b.n	8003b6c <ws2812_update_all+0xd0>
 8003b6a:	2114      	movs	r1, #20
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	617a      	str	r2, [r7, #20]
 8003b72:	4a24      	ldr	r2, [pc, #144]	@ (8003c04 <ws2812_update_all+0x168>)
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	5299      	strh	r1, [r3, r2]
        for (uint8_t i = 0; i < 8; i++) {
 8003b78:	2111      	movs	r1, #17
 8003b7a:	187b      	adds	r3, r7, r1
 8003b7c:	781a      	ldrb	r2, [r3, #0]
 8003b7e:	187b      	adds	r3, r7, r1
 8003b80:	3201      	adds	r2, #1
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	2311      	movs	r3, #17
 8003b86:	18fb      	adds	r3, r7, r3
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b07      	cmp	r3, #7
 8003b8c:	d9de      	bls.n	8003b4c <ws2812_update_all+0xb0>
        }

        for (uint8_t i = 0; i < 8; i++) {
 8003b8e:	2310      	movs	r3, #16
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	e01b      	b.n	8003bd0 <ws2812_update_all+0x134>
            LED_Buffer[index++] = (blue & (1 << (7 - i))) ? BIT_1 : BIT_0;
 8003b98:	230d      	movs	r3, #13
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	2310      	movs	r3, #16
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2107      	movs	r1, #7
 8003ba6:	1acb      	subs	r3, r1, r3
 8003ba8:	411a      	asrs	r2, r3
 8003baa:	0013      	movs	r3, r2
 8003bac:	2201      	movs	r2, #1
 8003bae:	4013      	ands	r3, r2
 8003bb0:	d001      	beq.n	8003bb6 <ws2812_update_all+0x11a>
 8003bb2:	2128      	movs	r1, #40	@ 0x28
 8003bb4:	e000      	b.n	8003bb8 <ws2812_update_all+0x11c>
 8003bb6:	2114      	movs	r1, #20
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	617a      	str	r2, [r7, #20]
 8003bbe:	4a11      	ldr	r2, [pc, #68]	@ (8003c04 <ws2812_update_all+0x168>)
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	5299      	strh	r1, [r3, r2]
        for (uint8_t i = 0; i < 8; i++) {
 8003bc4:	2110      	movs	r1, #16
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	187b      	adds	r3, r7, r1
 8003bcc:	3201      	adds	r2, #1
 8003bce:	701a      	strb	r2, [r3, #0]
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	18fb      	adds	r3, r7, r3
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b07      	cmp	r3, #7
 8003bd8:	d9de      	bls.n	8003b98 <ws2812_update_all+0xfc>
    for (uint8_t led = 0; led < MAX_LEDS; led++) {
 8003bda:	2113      	movs	r1, #19
 8003bdc:	187b      	adds	r3, r7, r1
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	187b      	adds	r3, r7, r1
 8003be2:	3201      	adds	r2, #1
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	2313      	movs	r3, #19
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b47      	cmp	r3, #71	@ 0x47
 8003bee:	d800      	bhi.n	8003bf2 <ws2812_update_all+0x156>
 8003bf0:	e75f      	b.n	8003ab2 <ws2812_update_all+0x16>
        }
    }
    HAL_Delay(200);
 8003bf2:	20c8      	movs	r0, #200	@ 0xc8
 8003bf4:	f000 fb20 	bl	8004238 <HAL_Delay>
    ws2812_send();
 8003bf8:	f7ff ff38 	bl	8003a6c <ws2812_send>
}
 8003bfc:	46c0      	nop			@ (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b006      	add	sp, #24
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000574 	.word	0x20000574

08003c08 <HAL_GPIO_EXTI_Callback>:


//! interrupt function for PIR sensor.

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	0002      	movs	r2, r0
 8003c10:	1dbb      	adds	r3, r7, #6
 8003c12:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_PIN_1){
 8003c14:	1dbb      	adds	r3, r7, #6
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d103      	bne.n	8003c24 <HAL_GPIO_EXTI_Callback+0x1c>
	        sendString("PIR\n");
 8003c1c:	4b03      	ldr	r3, [pc, #12]	@ (8003c2c <HAL_GPIO_EXTI_Callback+0x24>)
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f7ff fe2e 	bl	8003880 <sendString>
	}
}
 8003c24:	46c0      	nop			@ (mov r8, r8)
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b002      	add	sp, #8
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	0800d294 	.word	0x0800d294

08003c30 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a05      	ldr	r2, [pc, #20]	@ (8003c54 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d104      	bne.n	8003c4c <HAL_TIM_PWM_PulseFinishedCallback+0x1c>
    {
    	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8003c42:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8003c44:	2100      	movs	r1, #0
 8003c46:	0018      	movs	r0, r3
 8003c48:	f002 fc46 	bl	80064d8 <HAL_TIM_PWM_Stop_DMA>
    }
}
 8003c4c:	46c0      	nop			@ (mov r8, r8)
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b002      	add	sp, #8
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40012c00 	.word	0x40012c00
 8003c58:	2000025c 	.word	0x2000025c

08003c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c60:	b672      	cpsid	i
}
 8003c62:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003c64:	46c0      	nop			@ (mov r8, r8)
 8003c66:	e7fd      	b.n	8003c64 <Error_Handler+0x8>

08003c68 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003cac <HAL_MspInit+0x44>)
 8003c70:	699a      	ldr	r2, [r3, #24]
 8003c72:	4b0e      	ldr	r3, [pc, #56]	@ (8003cac <HAL_MspInit+0x44>)
 8003c74:	2101      	movs	r1, #1
 8003c76:	430a      	orrs	r2, r1
 8003c78:	619a      	str	r2, [r3, #24]
 8003c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003cac <HAL_MspInit+0x44>)
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	4013      	ands	r3, r2
 8003c82:	607b      	str	r3, [r7, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c86:	4b09      	ldr	r3, [pc, #36]	@ (8003cac <HAL_MspInit+0x44>)
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	4b08      	ldr	r3, [pc, #32]	@ (8003cac <HAL_MspInit+0x44>)
 8003c8c:	2180      	movs	r1, #128	@ 0x80
 8003c8e:	0549      	lsls	r1, r1, #21
 8003c90:	430a      	orrs	r2, r1
 8003c92:	61da      	str	r2, [r3, #28]
 8003c94:	4b05      	ldr	r3, [pc, #20]	@ (8003cac <HAL_MspInit+0x44>)
 8003c96:	69da      	ldr	r2, [r3, #28]
 8003c98:	2380      	movs	r3, #128	@ 0x80
 8003c9a:	055b      	lsls	r3, r3, #21
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	603b      	str	r3, [r7, #0]
 8003ca0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ca2:	46c0      	nop			@ (mov r8, r8)
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	b002      	add	sp, #8
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	46c0      	nop			@ (mov r8, r8)
 8003cac:	40021000 	.word	0x40021000

08003cb0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003cb0:	b590      	push	{r4, r7, lr}
 8003cb2:	b08b      	sub	sp, #44	@ 0x2c
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb8:	2414      	movs	r4, #20
 8003cba:	193b      	adds	r3, r7, r4
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	2314      	movs	r3, #20
 8003cc0:	001a      	movs	r2, r3
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	f006 f812 	bl	8009cec <memset>
  if(hi2c->Instance==I2C1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1c      	ldr	r2, [pc, #112]	@ (8003d40 <HAL_I2C_MspInit+0x90>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d131      	bne.n	8003d36 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8003d44 <HAL_I2C_MspInit+0x94>)
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d44 <HAL_I2C_MspInit+0x94>)
 8003cd8:	2180      	movs	r1, #128	@ 0x80
 8003cda:	02c9      	lsls	r1, r1, #11
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	615a      	str	r2, [r3, #20]
 8003ce0:	4b18      	ldr	r3, [pc, #96]	@ (8003d44 <HAL_I2C_MspInit+0x94>)
 8003ce2:	695a      	ldr	r2, [r3, #20]
 8003ce4:	2380      	movs	r3, #128	@ 0x80
 8003ce6:	02db      	lsls	r3, r3, #11
 8003ce8:	4013      	ands	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cee:	0021      	movs	r1, r4
 8003cf0:	187b      	adds	r3, r7, r1
 8003cf2:	22c0      	movs	r2, #192	@ 0xc0
 8003cf4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003cf6:	187b      	adds	r3, r7, r1
 8003cf8:	2212      	movs	r2, #18
 8003cfa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfc:	187b      	adds	r3, r7, r1
 8003cfe:	2200      	movs	r2, #0
 8003d00:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d02:	187b      	adds	r3, r7, r1
 8003d04:	2203      	movs	r2, #3
 8003d06:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d0e:	187b      	adds	r3, r7, r1
 8003d10:	4a0d      	ldr	r2, [pc, #52]	@ (8003d48 <HAL_I2C_MspInit+0x98>)
 8003d12:	0019      	movs	r1, r3
 8003d14:	0010      	movs	r0, r2
 8003d16:	f000 fda7 	bl	8004868 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d44 <HAL_I2C_MspInit+0x94>)
 8003d1c:	69da      	ldr	r2, [r3, #28]
 8003d1e:	4b09      	ldr	r3, [pc, #36]	@ (8003d44 <HAL_I2C_MspInit+0x94>)
 8003d20:	2180      	movs	r1, #128	@ 0x80
 8003d22:	0389      	lsls	r1, r1, #14
 8003d24:	430a      	orrs	r2, r1
 8003d26:	61da      	str	r2, [r3, #28]
 8003d28:	4b06      	ldr	r3, [pc, #24]	@ (8003d44 <HAL_I2C_MspInit+0x94>)
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	2380      	movs	r3, #128	@ 0x80
 8003d2e:	039b      	lsls	r3, r3, #14
 8003d30:	4013      	ands	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b00b      	add	sp, #44	@ 0x2c
 8003d3c:	bd90      	pop	{r4, r7, pc}
 8003d3e:	46c0      	nop			@ (mov r8, r8)
 8003d40:	40005400 	.word	0x40005400
 8003d44:	40021000 	.word	0x40021000
 8003d48:	48000400 	.word	0x48000400

08003d4c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1e      	ldr	r2, [pc, #120]	@ (8003dd4 <HAL_TIM_Base_MspInit+0x88>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d136      	bne.n	8003dcc <HAL_TIM_Base_MspInit+0x80>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003dd8 <HAL_TIM_Base_MspInit+0x8c>)
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd8 <HAL_TIM_Base_MspInit+0x8c>)
 8003d64:	2180      	movs	r1, #128	@ 0x80
 8003d66:	0109      	lsls	r1, r1, #4
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	619a      	str	r2, [r3, #24]
 8003d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd8 <HAL_TIM_Base_MspInit+0x8c>)
 8003d6e:	699a      	ldr	r2, [r3, #24]
 8003d70:	2380      	movs	r3, #128	@ 0x80
 8003d72:	011b      	lsls	r3, r3, #4
 8003d74:	4013      	ands	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8003d7a:	4b18      	ldr	r3, [pc, #96]	@ (8003ddc <HAL_TIM_Base_MspInit+0x90>)
 8003d7c:	4a18      	ldr	r2, [pc, #96]	@ (8003de0 <HAL_TIM_Base_MspInit+0x94>)
 8003d7e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d80:	4b16      	ldr	r3, [pc, #88]	@ (8003ddc <HAL_TIM_Base_MspInit+0x90>)
 8003d82:	2210      	movs	r2, #16
 8003d84:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d86:	4b15      	ldr	r3, [pc, #84]	@ (8003ddc <HAL_TIM_Base_MspInit+0x90>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003d8c:	4b13      	ldr	r3, [pc, #76]	@ (8003ddc <HAL_TIM_Base_MspInit+0x90>)
 8003d8e:	2280      	movs	r2, #128	@ 0x80
 8003d90:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d92:	4b12      	ldr	r3, [pc, #72]	@ (8003ddc <HAL_TIM_Base_MspInit+0x90>)
 8003d94:	2280      	movs	r2, #128	@ 0x80
 8003d96:	0052      	lsls	r2, r2, #1
 8003d98:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d9a:	4b10      	ldr	r3, [pc, #64]	@ (8003ddc <HAL_TIM_Base_MspInit+0x90>)
 8003d9c:	2280      	movs	r2, #128	@ 0x80
 8003d9e:	00d2      	lsls	r2, r2, #3
 8003da0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8003da2:	4b0e      	ldr	r3, [pc, #56]	@ (8003ddc <HAL_TIM_Base_MspInit+0x90>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003da8:	4b0c      	ldr	r3, [pc, #48]	@ (8003ddc <HAL_TIM_Base_MspInit+0x90>)
 8003daa:	2280      	movs	r2, #128	@ 0x80
 8003dac:	0192      	lsls	r2, r2, #6
 8003dae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003db0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ddc <HAL_TIM_Base_MspInit+0x90>)
 8003db2:	0018      	movs	r0, r3
 8003db4:	f000 fb42 	bl	800443c <HAL_DMA_Init>
 8003db8:	1e03      	subs	r3, r0, #0
 8003dba:	d001      	beq.n	8003dc0 <HAL_TIM_Base_MspInit+0x74>
    {
      Error_Handler();
 8003dbc:	f7ff ff4e 	bl	8003c5c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a06      	ldr	r2, [pc, #24]	@ (8003ddc <HAL_TIM_Base_MspInit+0x90>)
 8003dc4:	625a      	str	r2, [r3, #36]	@ 0x24
 8003dc6:	4b05      	ldr	r3, [pc, #20]	@ (8003ddc <HAL_TIM_Base_MspInit+0x90>)
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003dcc:	46c0      	nop			@ (mov r8, r8)
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b004      	add	sp, #16
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40012c00 	.word	0x40012c00
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	200002a4 	.word	0x200002a4
 8003de0:	4002001c 	.word	0x4002001c

08003de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003de4:	b590      	push	{r4, r7, lr}
 8003de6:	b089      	sub	sp, #36	@ 0x24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dec:	240c      	movs	r4, #12
 8003dee:	193b      	adds	r3, r7, r4
 8003df0:	0018      	movs	r0, r3
 8003df2:	2314      	movs	r3, #20
 8003df4:	001a      	movs	r2, r3
 8003df6:	2100      	movs	r1, #0
 8003df8:	f005 ff78 	bl	8009cec <memset>
  if(htim->Instance==TIM1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a16      	ldr	r2, [pc, #88]	@ (8003e5c <HAL_TIM_MspPostInit+0x78>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d125      	bne.n	8003e52 <HAL_TIM_MspPostInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e06:	4b16      	ldr	r3, [pc, #88]	@ (8003e60 <HAL_TIM_MspPostInit+0x7c>)
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	4b15      	ldr	r3, [pc, #84]	@ (8003e60 <HAL_TIM_MspPostInit+0x7c>)
 8003e0c:	2180      	movs	r1, #128	@ 0x80
 8003e0e:	0289      	lsls	r1, r1, #10
 8003e10:	430a      	orrs	r2, r1
 8003e12:	615a      	str	r2, [r3, #20]
 8003e14:	4b12      	ldr	r3, [pc, #72]	@ (8003e60 <HAL_TIM_MspPostInit+0x7c>)
 8003e16:	695a      	ldr	r2, [r3, #20]
 8003e18:	2380      	movs	r3, #128	@ 0x80
 8003e1a:	029b      	lsls	r3, r3, #10
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e22:	193b      	adds	r3, r7, r4
 8003e24:	2280      	movs	r2, #128	@ 0x80
 8003e26:	0052      	lsls	r2, r2, #1
 8003e28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2a:	0021      	movs	r1, r4
 8003e2c:	187b      	adds	r3, r7, r1
 8003e2e:	2202      	movs	r2, #2
 8003e30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e32:	187b      	adds	r3, r7, r1
 8003e34:	2200      	movs	r2, #0
 8003e36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e38:	187b      	adds	r3, r7, r1
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003e3e:	187b      	adds	r3, r7, r1
 8003e40:	2202      	movs	r2, #2
 8003e42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e44:	187a      	adds	r2, r7, r1
 8003e46:	2390      	movs	r3, #144	@ 0x90
 8003e48:	05db      	lsls	r3, r3, #23
 8003e4a:	0011      	movs	r1, r2
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	f000 fd0b 	bl	8004868 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003e52:	46c0      	nop			@ (mov r8, r8)
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b009      	add	sp, #36	@ 0x24
 8003e58:	bd90      	pop	{r4, r7, pc}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	40012c00 	.word	0x40012c00
 8003e60:	40021000 	.word	0x40021000

08003e64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e64:	b590      	push	{r4, r7, lr}
 8003e66:	b08b      	sub	sp, #44	@ 0x2c
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e6c:	2414      	movs	r4, #20
 8003e6e:	193b      	adds	r3, r7, r4
 8003e70:	0018      	movs	r0, r3
 8003e72:	2314      	movs	r3, #20
 8003e74:	001a      	movs	r2, r3
 8003e76:	2100      	movs	r1, #0
 8003e78:	f005 ff38 	bl	8009cec <memset>
  if(huart->Instance==USART2)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a20      	ldr	r2, [pc, #128]	@ (8003f04 <HAL_UART_MspInit+0xa0>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d13a      	bne.n	8003efc <HAL_UART_MspInit+0x98>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e86:	4b20      	ldr	r3, [pc, #128]	@ (8003f08 <HAL_UART_MspInit+0xa4>)
 8003e88:	69da      	ldr	r2, [r3, #28]
 8003e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8003f08 <HAL_UART_MspInit+0xa4>)
 8003e8c:	2180      	movs	r1, #128	@ 0x80
 8003e8e:	0289      	lsls	r1, r1, #10
 8003e90:	430a      	orrs	r2, r1
 8003e92:	61da      	str	r2, [r3, #28]
 8003e94:	4b1c      	ldr	r3, [pc, #112]	@ (8003f08 <HAL_UART_MspInit+0xa4>)
 8003e96:	69da      	ldr	r2, [r3, #28]
 8003e98:	2380      	movs	r3, #128	@ 0x80
 8003e9a:	029b      	lsls	r3, r3, #10
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ea2:	4b19      	ldr	r3, [pc, #100]	@ (8003f08 <HAL_UART_MspInit+0xa4>)
 8003ea4:	695a      	ldr	r2, [r3, #20]
 8003ea6:	4b18      	ldr	r3, [pc, #96]	@ (8003f08 <HAL_UART_MspInit+0xa4>)
 8003ea8:	2180      	movs	r1, #128	@ 0x80
 8003eaa:	0289      	lsls	r1, r1, #10
 8003eac:	430a      	orrs	r2, r1
 8003eae:	615a      	str	r2, [r3, #20]
 8003eb0:	4b15      	ldr	r3, [pc, #84]	@ (8003f08 <HAL_UART_MspInit+0xa4>)
 8003eb2:	695a      	ldr	r2, [r3, #20]
 8003eb4:	2380      	movs	r3, #128	@ 0x80
 8003eb6:	029b      	lsls	r3, r3, #10
 8003eb8:	4013      	ands	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003ebe:	0021      	movs	r1, r4
 8003ec0:	187b      	adds	r3, r7, r1
 8003ec2:	220c      	movs	r2, #12
 8003ec4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec6:	187b      	adds	r3, r7, r1
 8003ec8:	2202      	movs	r2, #2
 8003eca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ecc:	187b      	adds	r3, r7, r1
 8003ece:	2200      	movs	r2, #0
 8003ed0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed2:	187b      	adds	r3, r7, r1
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003ed8:	187b      	adds	r3, r7, r1
 8003eda:	2201      	movs	r2, #1
 8003edc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ede:	187a      	adds	r2, r7, r1
 8003ee0:	2390      	movs	r3, #144	@ 0x90
 8003ee2:	05db      	lsls	r3, r3, #23
 8003ee4:	0011      	movs	r1, r2
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f000 fcbe 	bl	8004868 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003eec:	2200      	movs	r2, #0
 8003eee:	2100      	movs	r1, #0
 8003ef0:	201c      	movs	r0, #28
 8003ef2:	f000 fa71 	bl	80043d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003ef6:	201c      	movs	r0, #28
 8003ef8:	f000 fa83 	bl	8004402 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8003efc:	46c0      	nop			@ (mov r8, r8)
 8003efe:	46bd      	mov	sp, r7
 8003f00:	b00b      	add	sp, #44	@ 0x2c
 8003f02:	bd90      	pop	{r4, r7, pc}
 8003f04:	40004400 	.word	0x40004400
 8003f08:	40021000 	.word	0x40021000

08003f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f10:	46c0      	nop			@ (mov r8, r8)
 8003f12:	e7fd      	b.n	8003f10 <NMI_Handler+0x4>

08003f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f18:	46c0      	nop			@ (mov r8, r8)
 8003f1a:	e7fd      	b.n	8003f18 <HardFault_Handler+0x4>

08003f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003f20:	46c0      	nop			@ (mov r8, r8)
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f2a:	46c0      	nop			@ (mov r8, r8)
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f34:	f000 f964 	bl	8004200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f38:	46c0      	nop			@ (mov r8, r8)
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003f42:	2002      	movs	r0, #2
 8003f44:	f000 fe1e 	bl	8004b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003f48:	46c0      	nop			@ (mov r8, r8)
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003f52:	2380      	movs	r3, #128	@ 0x80
 8003f54:	019b      	lsls	r3, r3, #6
 8003f56:	0018      	movs	r0, r3
 8003f58:	f000 fe14 	bl	8004b84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003f5c:	46c0      	nop			@ (mov r8, r8)
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003f68:	4b03      	ldr	r3, [pc, #12]	@ (8003f78 <DMA1_Channel2_3_IRQHandler+0x14>)
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f000 fb91 	bl	8004692 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003f70:	46c0      	nop			@ (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	46c0      	nop			@ (mov r8, r8)
 8003f78:	200002a4 	.word	0x200002a4

08003f7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f80:	4b03      	ldr	r3, [pc, #12]	@ (8003f90 <USART2_IRQHandler+0x14>)
 8003f82:	0018      	movs	r0, r3
 8003f84:	f003 fb44 	bl	8007610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f88:	46c0      	nop			@ (mov r8, r8)
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	46c0      	nop			@ (mov r8, r8)
 8003f90:	200002e8 	.word	0x200002e8

08003f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  return 1;
 8003f98:	2301      	movs	r3, #1
}
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <_kill>:

int _kill(int pid, int sig)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003faa:	f005 ff0b 	bl	8009dc4 <__errno>
 8003fae:	0003      	movs	r3, r0
 8003fb0:	2216      	movs	r2, #22
 8003fb2:	601a      	str	r2, [r3, #0]
  return -1;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	425b      	negs	r3, r3
}
 8003fb8:	0018      	movs	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	b002      	add	sp, #8
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <_exit>:

void _exit (int status)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fc8:	2301      	movs	r3, #1
 8003fca:	425a      	negs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	0011      	movs	r1, r2
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f7ff ffe5 	bl	8003fa0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fd6:	46c0      	nop			@ (mov r8, r8)
 8003fd8:	e7fd      	b.n	8003fd6 <_exit+0x16>

08003fda <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b086      	sub	sp, #24
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	e00a      	b.n	8004002 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fec:	e000      	b.n	8003ff0 <_read+0x16>
 8003fee:	bf00      	nop
 8003ff0:	0001      	movs	r1, r0
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	1c5a      	adds	r2, r3, #1
 8003ff6:	60ba      	str	r2, [r7, #8]
 8003ff8:	b2ca      	uxtb	r2, r1
 8003ffa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3301      	adds	r3, #1
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	429a      	cmp	r2, r3
 8004008:	dbf0      	blt.n	8003fec <_read+0x12>
  }

  return len;
 800400a:	687b      	ldr	r3, [r7, #4]
}
 800400c:	0018      	movs	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	b006      	add	sp, #24
 8004012:	bd80      	pop	{r7, pc}

08004014 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	e009      	b.n	800403a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	60ba      	str	r2, [r7, #8]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	0018      	movs	r0, r3
 8004030:	e000      	b.n	8004034 <_write+0x20>
 8004032:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3301      	adds	r3, #1
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	429a      	cmp	r2, r3
 8004040:	dbf1      	blt.n	8004026 <_write+0x12>
  }
  return len;
 8004042:	687b      	ldr	r3, [r7, #4]
}
 8004044:	0018      	movs	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	b006      	add	sp, #24
 800404a:	bd80      	pop	{r7, pc}

0800404c <_close>:

int _close(int file)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004054:	2301      	movs	r3, #1
 8004056:	425b      	negs	r3, r3
}
 8004058:	0018      	movs	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	b002      	add	sp, #8
 800405e:	bd80      	pop	{r7, pc}

08004060 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2280      	movs	r2, #128	@ 0x80
 800406e:	0192      	lsls	r2, r2, #6
 8004070:	605a      	str	r2, [r3, #4]
  return 0;
 8004072:	2300      	movs	r3, #0
}
 8004074:	0018      	movs	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	b002      	add	sp, #8
 800407a:	bd80      	pop	{r7, pc}

0800407c <_isatty>:

int _isatty(int file)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004084:	2301      	movs	r3, #1
}
 8004086:	0018      	movs	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	b002      	add	sp, #8
 800408c:	bd80      	pop	{r7, pc}

0800408e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800409a:	2300      	movs	r3, #0
}
 800409c:	0018      	movs	r0, r3
 800409e:	46bd      	mov	sp, r7
 80040a0:	b004      	add	sp, #16
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040ac:	4a14      	ldr	r2, [pc, #80]	@ (8004100 <_sbrk+0x5c>)
 80040ae:	4b15      	ldr	r3, [pc, #84]	@ (8004104 <_sbrk+0x60>)
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040b8:	4b13      	ldr	r3, [pc, #76]	@ (8004108 <_sbrk+0x64>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d102      	bne.n	80040c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040c0:	4b11      	ldr	r3, [pc, #68]	@ (8004108 <_sbrk+0x64>)
 80040c2:	4a12      	ldr	r2, [pc, #72]	@ (800410c <_sbrk+0x68>)
 80040c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040c6:	4b10      	ldr	r3, [pc, #64]	@ (8004108 <_sbrk+0x64>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	18d3      	adds	r3, r2, r3
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d207      	bcs.n	80040e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040d4:	f005 fe76 	bl	8009dc4 <__errno>
 80040d8:	0003      	movs	r3, r0
 80040da:	220c      	movs	r2, #12
 80040dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040de:	2301      	movs	r3, #1
 80040e0:	425b      	negs	r3, r3
 80040e2:	e009      	b.n	80040f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040e4:	4b08      	ldr	r3, [pc, #32]	@ (8004108 <_sbrk+0x64>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040ea:	4b07      	ldr	r3, [pc, #28]	@ (8004108 <_sbrk+0x64>)
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	18d2      	adds	r2, r2, r3
 80040f2:	4b05      	ldr	r3, [pc, #20]	@ (8004108 <_sbrk+0x64>)
 80040f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80040f6:	68fb      	ldr	r3, [r7, #12]
}
 80040f8:	0018      	movs	r0, r3
 80040fa:	46bd      	mov	sp, r7
 80040fc:	b006      	add	sp, #24
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20002000 	.word	0x20002000
 8004104:	00000400 	.word	0x00000400
 8004108:	200012f4 	.word	0x200012f4
 800410c:	20001448 	.word	0x20001448

08004110 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004114:	46c0      	nop			@ (mov r8, r8)
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800411c:	480d      	ldr	r0, [pc, #52]	@ (8004154 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800411e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004120:	f7ff fff6 	bl	8004110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004124:	480c      	ldr	r0, [pc, #48]	@ (8004158 <LoopForever+0x6>)
  ldr r1, =_edata
 8004126:	490d      	ldr	r1, [pc, #52]	@ (800415c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004128:	4a0d      	ldr	r2, [pc, #52]	@ (8004160 <LoopForever+0xe>)
  movs r3, #0
 800412a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800412c:	e002      	b.n	8004134 <LoopCopyDataInit>

0800412e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800412e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004132:	3304      	adds	r3, #4

08004134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004138:	d3f9      	bcc.n	800412e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800413a:	4a0a      	ldr	r2, [pc, #40]	@ (8004164 <LoopForever+0x12>)
  ldr r4, =_ebss
 800413c:	4c0a      	ldr	r4, [pc, #40]	@ (8004168 <LoopForever+0x16>)
  movs r3, #0
 800413e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004140:	e001      	b.n	8004146 <LoopFillZerobss>

08004142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004144:	3204      	adds	r2, #4

08004146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004148:	d3fb      	bcc.n	8004142 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800414a:	f005 fe41 	bl	8009dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800414e:	f7ff f891 	bl	8003274 <main>

08004152 <LoopForever>:

LoopForever:
    b LoopForever
 8004152:	e7fe      	b.n	8004152 <LoopForever>
  ldr   r0, =_estack
 8004154:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004158:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800415c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8004160:	0800d740 	.word	0x0800d740
  ldr r2, =_sbss
 8004164:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8004168:	20001448 	.word	0x20001448

0800416c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800416c:	e7fe      	b.n	800416c <ADC1_IRQHandler>
	...

08004170 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004174:	4b07      	ldr	r3, [pc, #28]	@ (8004194 <HAL_Init+0x24>)
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	4b06      	ldr	r3, [pc, #24]	@ (8004194 <HAL_Init+0x24>)
 800417a:	2110      	movs	r1, #16
 800417c:	430a      	orrs	r2, r1
 800417e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004180:	2000      	movs	r0, #0
 8004182:	f000 f809 	bl	8004198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004186:	f7ff fd6f 	bl	8003c68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	0018      	movs	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	46c0      	nop			@ (mov r8, r8)
 8004194:	40022000 	.word	0x40022000

08004198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004198:	b590      	push	{r4, r7, lr}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041a0:	4b14      	ldr	r3, [pc, #80]	@ (80041f4 <HAL_InitTick+0x5c>)
 80041a2:	681c      	ldr	r4, [r3, #0]
 80041a4:	4b14      	ldr	r3, [pc, #80]	@ (80041f8 <HAL_InitTick+0x60>)
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	0019      	movs	r1, r3
 80041aa:	23fa      	movs	r3, #250	@ 0xfa
 80041ac:	0098      	lsls	r0, r3, #2
 80041ae:	f7fb ffd1 	bl	8000154 <__udivsi3>
 80041b2:	0003      	movs	r3, r0
 80041b4:	0019      	movs	r1, r3
 80041b6:	0020      	movs	r0, r4
 80041b8:	f7fb ffcc 	bl	8000154 <__udivsi3>
 80041bc:	0003      	movs	r3, r0
 80041be:	0018      	movs	r0, r3
 80041c0:	f000 f92f 	bl	8004422 <HAL_SYSTICK_Config>
 80041c4:	1e03      	subs	r3, r0, #0
 80041c6:	d001      	beq.n	80041cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e00f      	b.n	80041ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b03      	cmp	r3, #3
 80041d0:	d80b      	bhi.n	80041ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	2301      	movs	r3, #1
 80041d6:	425b      	negs	r3, r3
 80041d8:	2200      	movs	r2, #0
 80041da:	0018      	movs	r0, r3
 80041dc:	f000 f8fc 	bl	80043d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041e0:	4b06      	ldr	r3, [pc, #24]	@ (80041fc <HAL_InitTick+0x64>)
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	e000      	b.n	80041ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
}
 80041ec:	0018      	movs	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b003      	add	sp, #12
 80041f2:	bd90      	pop	{r4, r7, pc}
 80041f4:	20000018 	.word	0x20000018
 80041f8:	20000020 	.word	0x20000020
 80041fc:	2000001c 	.word	0x2000001c

08004200 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004204:	4b05      	ldr	r3, [pc, #20]	@ (800421c <HAL_IncTick+0x1c>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	001a      	movs	r2, r3
 800420a:	4b05      	ldr	r3, [pc, #20]	@ (8004220 <HAL_IncTick+0x20>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	18d2      	adds	r2, r2, r3
 8004210:	4b03      	ldr	r3, [pc, #12]	@ (8004220 <HAL_IncTick+0x20>)
 8004212:	601a      	str	r2, [r3, #0]
}
 8004214:	46c0      	nop			@ (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	46c0      	nop			@ (mov r8, r8)
 800421c:	20000020 	.word	0x20000020
 8004220:	200012f8 	.word	0x200012f8

08004224 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	af00      	add	r7, sp, #0
  return uwTick;
 8004228:	4b02      	ldr	r3, [pc, #8]	@ (8004234 <HAL_GetTick+0x10>)
 800422a:	681b      	ldr	r3, [r3, #0]
}
 800422c:	0018      	movs	r0, r3
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	46c0      	nop			@ (mov r8, r8)
 8004234:	200012f8 	.word	0x200012f8

08004238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004240:	f7ff fff0 	bl	8004224 <HAL_GetTick>
 8004244:	0003      	movs	r3, r0
 8004246:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3301      	adds	r3, #1
 8004250:	d005      	beq.n	800425e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004252:	4b0a      	ldr	r3, [pc, #40]	@ (800427c <HAL_Delay+0x44>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	001a      	movs	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	189b      	adds	r3, r3, r2
 800425c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800425e:	46c0      	nop			@ (mov r8, r8)
 8004260:	f7ff ffe0 	bl	8004224 <HAL_GetTick>
 8004264:	0002      	movs	r2, r0
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	429a      	cmp	r2, r3
 800426e:	d8f7      	bhi.n	8004260 <HAL_Delay+0x28>
  {
  }
}
 8004270:	46c0      	nop			@ (mov r8, r8)
 8004272:	46c0      	nop			@ (mov r8, r8)
 8004274:	46bd      	mov	sp, r7
 8004276:	b004      	add	sp, #16
 8004278:	bd80      	pop	{r7, pc}
 800427a:	46c0      	nop			@ (mov r8, r8)
 800427c:	20000020 	.word	0x20000020

08004280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	0002      	movs	r2, r0
 8004288:	1dfb      	adds	r3, r7, #7
 800428a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800428c:	1dfb      	adds	r3, r7, #7
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b7f      	cmp	r3, #127	@ 0x7f
 8004292:	d809      	bhi.n	80042a8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004294:	1dfb      	adds	r3, r7, #7
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	001a      	movs	r2, r3
 800429a:	231f      	movs	r3, #31
 800429c:	401a      	ands	r2, r3
 800429e:	4b04      	ldr	r3, [pc, #16]	@ (80042b0 <__NVIC_EnableIRQ+0x30>)
 80042a0:	2101      	movs	r1, #1
 80042a2:	4091      	lsls	r1, r2
 80042a4:	000a      	movs	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]
  }
}
 80042a8:	46c0      	nop			@ (mov r8, r8)
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b002      	add	sp, #8
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	e000e100 	.word	0xe000e100

080042b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042b4:	b590      	push	{r4, r7, lr}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	0002      	movs	r2, r0
 80042bc:	6039      	str	r1, [r7, #0]
 80042be:	1dfb      	adds	r3, r7, #7
 80042c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80042c2:	1dfb      	adds	r3, r7, #7
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80042c8:	d828      	bhi.n	800431c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042ca:	4a2f      	ldr	r2, [pc, #188]	@ (8004388 <__NVIC_SetPriority+0xd4>)
 80042cc:	1dfb      	adds	r3, r7, #7
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	b25b      	sxtb	r3, r3
 80042d2:	089b      	lsrs	r3, r3, #2
 80042d4:	33c0      	adds	r3, #192	@ 0xc0
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	589b      	ldr	r3, [r3, r2]
 80042da:	1dfa      	adds	r2, r7, #7
 80042dc:	7812      	ldrb	r2, [r2, #0]
 80042de:	0011      	movs	r1, r2
 80042e0:	2203      	movs	r2, #3
 80042e2:	400a      	ands	r2, r1
 80042e4:	00d2      	lsls	r2, r2, #3
 80042e6:	21ff      	movs	r1, #255	@ 0xff
 80042e8:	4091      	lsls	r1, r2
 80042ea:	000a      	movs	r2, r1
 80042ec:	43d2      	mvns	r2, r2
 80042ee:	401a      	ands	r2, r3
 80042f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	019b      	lsls	r3, r3, #6
 80042f6:	22ff      	movs	r2, #255	@ 0xff
 80042f8:	401a      	ands	r2, r3
 80042fa:	1dfb      	adds	r3, r7, #7
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	0018      	movs	r0, r3
 8004300:	2303      	movs	r3, #3
 8004302:	4003      	ands	r3, r0
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004308:	481f      	ldr	r0, [pc, #124]	@ (8004388 <__NVIC_SetPriority+0xd4>)
 800430a:	1dfb      	adds	r3, r7, #7
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	b25b      	sxtb	r3, r3
 8004310:	089b      	lsrs	r3, r3, #2
 8004312:	430a      	orrs	r2, r1
 8004314:	33c0      	adds	r3, #192	@ 0xc0
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800431a:	e031      	b.n	8004380 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800431c:	4a1b      	ldr	r2, [pc, #108]	@ (800438c <__NVIC_SetPriority+0xd8>)
 800431e:	1dfb      	adds	r3, r7, #7
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	0019      	movs	r1, r3
 8004324:	230f      	movs	r3, #15
 8004326:	400b      	ands	r3, r1
 8004328:	3b08      	subs	r3, #8
 800432a:	089b      	lsrs	r3, r3, #2
 800432c:	3306      	adds	r3, #6
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	18d3      	adds	r3, r2, r3
 8004332:	3304      	adds	r3, #4
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	1dfa      	adds	r2, r7, #7
 8004338:	7812      	ldrb	r2, [r2, #0]
 800433a:	0011      	movs	r1, r2
 800433c:	2203      	movs	r2, #3
 800433e:	400a      	ands	r2, r1
 8004340:	00d2      	lsls	r2, r2, #3
 8004342:	21ff      	movs	r1, #255	@ 0xff
 8004344:	4091      	lsls	r1, r2
 8004346:	000a      	movs	r2, r1
 8004348:	43d2      	mvns	r2, r2
 800434a:	401a      	ands	r2, r3
 800434c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	019b      	lsls	r3, r3, #6
 8004352:	22ff      	movs	r2, #255	@ 0xff
 8004354:	401a      	ands	r2, r3
 8004356:	1dfb      	adds	r3, r7, #7
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	0018      	movs	r0, r3
 800435c:	2303      	movs	r3, #3
 800435e:	4003      	ands	r3, r0
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004364:	4809      	ldr	r0, [pc, #36]	@ (800438c <__NVIC_SetPriority+0xd8>)
 8004366:	1dfb      	adds	r3, r7, #7
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	001c      	movs	r4, r3
 800436c:	230f      	movs	r3, #15
 800436e:	4023      	ands	r3, r4
 8004370:	3b08      	subs	r3, #8
 8004372:	089b      	lsrs	r3, r3, #2
 8004374:	430a      	orrs	r2, r1
 8004376:	3306      	adds	r3, #6
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	18c3      	adds	r3, r0, r3
 800437c:	3304      	adds	r3, #4
 800437e:	601a      	str	r2, [r3, #0]
}
 8004380:	46c0      	nop			@ (mov r8, r8)
 8004382:	46bd      	mov	sp, r7
 8004384:	b003      	add	sp, #12
 8004386:	bd90      	pop	{r4, r7, pc}
 8004388:	e000e100 	.word	0xe000e100
 800438c:	e000ed00 	.word	0xe000ed00

08004390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	1e5a      	subs	r2, r3, #1
 800439c:	2380      	movs	r3, #128	@ 0x80
 800439e:	045b      	lsls	r3, r3, #17
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d301      	bcc.n	80043a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043a4:	2301      	movs	r3, #1
 80043a6:	e010      	b.n	80043ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043a8:	4b0a      	ldr	r3, [pc, #40]	@ (80043d4 <SysTick_Config+0x44>)
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	3a01      	subs	r2, #1
 80043ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043b0:	2301      	movs	r3, #1
 80043b2:	425b      	negs	r3, r3
 80043b4:	2103      	movs	r1, #3
 80043b6:	0018      	movs	r0, r3
 80043b8:	f7ff ff7c 	bl	80042b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043bc:	4b05      	ldr	r3, [pc, #20]	@ (80043d4 <SysTick_Config+0x44>)
 80043be:	2200      	movs	r2, #0
 80043c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043c2:	4b04      	ldr	r3, [pc, #16]	@ (80043d4 <SysTick_Config+0x44>)
 80043c4:	2207      	movs	r2, #7
 80043c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	0018      	movs	r0, r3
 80043cc:	46bd      	mov	sp, r7
 80043ce:	b002      	add	sp, #8
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			@ (mov r8, r8)
 80043d4:	e000e010 	.word	0xe000e010

080043d8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	210f      	movs	r1, #15
 80043e4:	187b      	adds	r3, r7, r1
 80043e6:	1c02      	adds	r2, r0, #0
 80043e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	187b      	adds	r3, r7, r1
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	b25b      	sxtb	r3, r3
 80043f2:	0011      	movs	r1, r2
 80043f4:	0018      	movs	r0, r3
 80043f6:	f7ff ff5d 	bl	80042b4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80043fa:	46c0      	nop			@ (mov r8, r8)
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b004      	add	sp, #16
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	0002      	movs	r2, r0
 800440a:	1dfb      	adds	r3, r7, #7
 800440c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800440e:	1dfb      	adds	r3, r7, #7
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	b25b      	sxtb	r3, r3
 8004414:	0018      	movs	r0, r3
 8004416:	f7ff ff33 	bl	8004280 <__NVIC_EnableIRQ>
}
 800441a:	46c0      	nop			@ (mov r8, r8)
 800441c:	46bd      	mov	sp, r7
 800441e:	b002      	add	sp, #8
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b082      	sub	sp, #8
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	0018      	movs	r0, r3
 800442e:	f7ff ffaf 	bl	8004390 <SysTick_Config>
 8004432:	0003      	movs	r3, r0
}
 8004434:	0018      	movs	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	b002      	add	sp, #8
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e036      	b.n	80044c0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2221      	movs	r2, #33	@ 0x21
 8004456:	2102      	movs	r1, #2
 8004458:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4a18      	ldr	r2, [pc, #96]	@ (80044c8 <HAL_DMA_Init+0x8c>)
 8004466:	4013      	ands	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004472:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800447e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800448a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	0018      	movs	r0, r3
 80044a4:	f000 f9c4 	bl	8004830 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2221      	movs	r2, #33	@ 0x21
 80044b2:	2101      	movs	r1, #1
 80044b4:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2220      	movs	r2, #32
 80044ba:	2100      	movs	r1, #0
 80044bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	0018      	movs	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b004      	add	sp, #16
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	ffffc00f 	.word	0xffffc00f

080044cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044da:	2317      	movs	r3, #23
 80044dc:	18fb      	adds	r3, r7, r3
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2220      	movs	r2, #32
 80044e6:	5c9b      	ldrb	r3, [r3, r2]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_DMA_Start_IT+0x24>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e04f      	b.n	8004590 <HAL_DMA_Start_IT+0xc4>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	2101      	movs	r1, #1
 80044f6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2221      	movs	r2, #33	@ 0x21
 80044fc:	5c9b      	ldrb	r3, [r3, r2]
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b01      	cmp	r3, #1
 8004502:	d13a      	bne.n	800457a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2221      	movs	r2, #33	@ 0x21
 8004508:	2102      	movs	r1, #2
 800450a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2101      	movs	r1, #1
 800451e:	438a      	bics	r2, r1
 8004520:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 f954 	bl	80047d6 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d008      	beq.n	8004548 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	210e      	movs	r1, #14
 8004542:	430a      	orrs	r2, r1
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	e00f      	b.n	8004568 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	210a      	movs	r1, #10
 8004554:	430a      	orrs	r2, r1
 8004556:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2104      	movs	r1, #4
 8004564:	438a      	bics	r2, r1
 8004566:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2101      	movs	r1, #1
 8004574:	430a      	orrs	r2, r1
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	e007      	b.n	800458a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2220      	movs	r2, #32
 800457e:	2100      	movs	r1, #0
 8004580:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004582:	2317      	movs	r3, #23
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	2202      	movs	r2, #2
 8004588:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800458a:	2317      	movs	r3, #23
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	781b      	ldrb	r3, [r3, #0]
}
 8004590:	0018      	movs	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	b006      	add	sp, #24
 8004596:	bd80      	pop	{r7, pc}

08004598 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2221      	movs	r2, #33	@ 0x21
 80045a4:	5c9b      	ldrb	r3, [r3, r2]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d008      	beq.n	80045be <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2204      	movs	r2, #4
 80045b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2220      	movs	r2, #32
 80045b6:	2100      	movs	r1, #0
 80045b8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e020      	b.n	8004600 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	210e      	movs	r1, #14
 80045ca:	438a      	bics	r2, r1
 80045cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2101      	movs	r1, #1
 80045da:	438a      	bics	r2, r1
 80045dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e6:	2101      	movs	r1, #1
 80045e8:	4091      	lsls	r1, r2
 80045ea:	000a      	movs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2221      	movs	r2, #33	@ 0x21
 80045f2:	2101      	movs	r1, #1
 80045f4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2220      	movs	r2, #32
 80045fa:	2100      	movs	r1, #0
 80045fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	0018      	movs	r0, r3
 8004602:	46bd      	mov	sp, r7
 8004604:	b002      	add	sp, #8
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004610:	210f      	movs	r1, #15
 8004612:	187b      	adds	r3, r7, r1
 8004614:	2200      	movs	r2, #0
 8004616:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2221      	movs	r2, #33	@ 0x21
 800461c:	5c9b      	ldrb	r3, [r3, r2]
 800461e:	b2db      	uxtb	r3, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d006      	beq.n	8004632 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2204      	movs	r2, #4
 8004628:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800462a:	187b      	adds	r3, r7, r1
 800462c:	2201      	movs	r2, #1
 800462e:	701a      	strb	r2, [r3, #0]
 8004630:	e028      	b.n	8004684 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	210e      	movs	r1, #14
 800463e:	438a      	bics	r2, r1
 8004640:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2101      	movs	r1, #1
 800464e:	438a      	bics	r2, r1
 8004650:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800465a:	2101      	movs	r1, #1
 800465c:	4091      	lsls	r1, r2
 800465e:	000a      	movs	r2, r1
 8004660:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2221      	movs	r2, #33	@ 0x21
 8004666:	2101      	movs	r1, #1
 8004668:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	2100      	movs	r1, #0
 8004670:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004676:	2b00      	cmp	r3, #0
 8004678:	d004      	beq.n	8004684 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	0010      	movs	r0, r2
 8004682:	4798      	blx	r3
    }
  }
  return status;
 8004684:	230f      	movs	r3, #15
 8004686:	18fb      	adds	r3, r7, r3
 8004688:	781b      	ldrb	r3, [r3, #0]
}
 800468a:	0018      	movs	r0, r3
 800468c:	46bd      	mov	sp, r7
 800468e:	b004      	add	sp, #16
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ae:	2204      	movs	r2, #4
 80046b0:	409a      	lsls	r2, r3
 80046b2:	0013      	movs	r3, r2
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4013      	ands	r3, r2
 80046b8:	d024      	beq.n	8004704 <HAL_DMA_IRQHandler+0x72>
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2204      	movs	r2, #4
 80046be:	4013      	ands	r3, r2
 80046c0:	d020      	beq.n	8004704 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2220      	movs	r2, #32
 80046ca:	4013      	ands	r3, r2
 80046cc:	d107      	bne.n	80046de <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2104      	movs	r1, #4
 80046da:	438a      	bics	r2, r1
 80046dc:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e6:	2104      	movs	r1, #4
 80046e8:	4091      	lsls	r1, r2
 80046ea:	000a      	movs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d100      	bne.n	80046f8 <HAL_DMA_IRQHandler+0x66>
 80046f6:	e06a      	b.n	80047ce <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	0010      	movs	r0, r2
 8004700:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004702:	e064      	b.n	80047ce <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004708:	2202      	movs	r2, #2
 800470a:	409a      	lsls	r2, r3
 800470c:	0013      	movs	r3, r2
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4013      	ands	r3, r2
 8004712:	d02b      	beq.n	800476c <HAL_DMA_IRQHandler+0xda>
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	2202      	movs	r2, #2
 8004718:	4013      	ands	r3, r2
 800471a:	d027      	beq.n	800476c <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2220      	movs	r2, #32
 8004724:	4013      	ands	r3, r2
 8004726:	d10b      	bne.n	8004740 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	210a      	movs	r1, #10
 8004734:	438a      	bics	r2, r1
 8004736:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2221      	movs	r2, #33	@ 0x21
 800473c:	2101      	movs	r1, #1
 800473e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004748:	2102      	movs	r1, #2
 800474a:	4091      	lsls	r1, r2
 800474c:	000a      	movs	r2, r1
 800474e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2220      	movs	r2, #32
 8004754:	2100      	movs	r1, #0
 8004756:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475c:	2b00      	cmp	r3, #0
 800475e:	d036      	beq.n	80047ce <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	0010      	movs	r0, r2
 8004768:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800476a:	e030      	b.n	80047ce <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004770:	2208      	movs	r2, #8
 8004772:	409a      	lsls	r2, r3
 8004774:	0013      	movs	r3, r2
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4013      	ands	r3, r2
 800477a:	d028      	beq.n	80047ce <HAL_DMA_IRQHandler+0x13c>
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2208      	movs	r2, #8
 8004780:	4013      	ands	r3, r2
 8004782:	d024      	beq.n	80047ce <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	210e      	movs	r1, #14
 8004790:	438a      	bics	r2, r1
 8004792:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800479c:	2101      	movs	r1, #1
 800479e:	4091      	lsls	r1, r2
 80047a0:	000a      	movs	r2, r1
 80047a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2221      	movs	r2, #33	@ 0x21
 80047ae:	2101      	movs	r1, #1
 80047b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	2100      	movs	r1, #0
 80047b8:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d005      	beq.n	80047ce <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	0010      	movs	r0, r2
 80047ca:	4798      	blx	r3
    }
  }
}
 80047cc:	e7ff      	b.n	80047ce <HAL_DMA_IRQHandler+0x13c>
 80047ce:	46c0      	nop			@ (mov r8, r8)
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b004      	add	sp, #16
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ec:	2101      	movs	r1, #1
 80047ee:	4091      	lsls	r1, r2
 80047f0:	000a      	movs	r2, r1
 80047f2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	2b10      	cmp	r3, #16
 8004802:	d108      	bne.n	8004816 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004814:	e007      	b.n	8004826 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	60da      	str	r2, [r3, #12]
}
 8004826:	46c0      	nop			@ (mov r8, r8)
 8004828:	46bd      	mov	sp, r7
 800482a:	b004      	add	sp, #16
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a08      	ldr	r2, [pc, #32]	@ (8004860 <DMA_CalcBaseAndBitshift+0x30>)
 800483e:	4694      	mov	ip, r2
 8004840:	4463      	add	r3, ip
 8004842:	2114      	movs	r1, #20
 8004844:	0018      	movs	r0, r3
 8004846:	f7fb fc85 	bl	8000154 <__udivsi3>
 800484a:	0003      	movs	r3, r0
 800484c:	009a      	lsls	r2, r3, #2
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a03      	ldr	r2, [pc, #12]	@ (8004864 <DMA_CalcBaseAndBitshift+0x34>)
 8004856:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8004858:	46c0      	nop			@ (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	b002      	add	sp, #8
 800485e:	bd80      	pop	{r7, pc}
 8004860:	bffdfff8 	.word	0xbffdfff8
 8004864:	40020000 	.word	0x40020000

08004868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004876:	e14f      	b.n	8004b18 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2101      	movs	r1, #1
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	4091      	lsls	r1, r2
 8004882:	000a      	movs	r2, r1
 8004884:	4013      	ands	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d100      	bne.n	8004890 <HAL_GPIO_Init+0x28>
 800488e:	e140      	b.n	8004b12 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2203      	movs	r2, #3
 8004896:	4013      	ands	r3, r2
 8004898:	2b01      	cmp	r3, #1
 800489a:	d005      	beq.n	80048a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	2203      	movs	r2, #3
 80048a2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d130      	bne.n	800490a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	2203      	movs	r2, #3
 80048b4:	409a      	lsls	r2, r3
 80048b6:	0013      	movs	r3, r2
 80048b8:	43da      	mvns	r2, r3
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4013      	ands	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	409a      	lsls	r2, r3
 80048ca:	0013      	movs	r3, r2
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048de:	2201      	movs	r2, #1
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	409a      	lsls	r2, r3
 80048e4:	0013      	movs	r3, r2
 80048e6:	43da      	mvns	r2, r3
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4013      	ands	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	2201      	movs	r2, #1
 80048f6:	401a      	ands	r2, r3
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	409a      	lsls	r2, r3
 80048fc:	0013      	movs	r3, r2
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4313      	orrs	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2203      	movs	r2, #3
 8004910:	4013      	ands	r3, r2
 8004912:	2b03      	cmp	r3, #3
 8004914:	d017      	beq.n	8004946 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	2203      	movs	r2, #3
 8004922:	409a      	lsls	r2, r3
 8004924:	0013      	movs	r3, r2
 8004926:	43da      	mvns	r2, r3
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	4013      	ands	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	005b      	lsls	r3, r3, #1
 8004936:	409a      	lsls	r2, r3
 8004938:	0013      	movs	r3, r2
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2203      	movs	r2, #3
 800494c:	4013      	ands	r3, r2
 800494e:	2b02      	cmp	r3, #2
 8004950:	d123      	bne.n	800499a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	08da      	lsrs	r2, r3, #3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3208      	adds	r2, #8
 800495a:	0092      	lsls	r2, r2, #2
 800495c:	58d3      	ldr	r3, [r2, r3]
 800495e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2207      	movs	r2, #7
 8004964:	4013      	ands	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	220f      	movs	r2, #15
 800496a:	409a      	lsls	r2, r3
 800496c:	0013      	movs	r3, r2
 800496e:	43da      	mvns	r2, r3
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	4013      	ands	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2107      	movs	r1, #7
 800497e:	400b      	ands	r3, r1
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	409a      	lsls	r2, r3
 8004984:	0013      	movs	r3, r2
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	08da      	lsrs	r2, r3, #3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3208      	adds	r2, #8
 8004994:	0092      	lsls	r2, r2, #2
 8004996:	6939      	ldr	r1, [r7, #16]
 8004998:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	2203      	movs	r2, #3
 80049a6:	409a      	lsls	r2, r3
 80049a8:	0013      	movs	r3, r2
 80049aa:	43da      	mvns	r2, r3
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4013      	ands	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2203      	movs	r2, #3
 80049b8:	401a      	ands	r2, r3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	005b      	lsls	r3, r3, #1
 80049be:	409a      	lsls	r2, r3
 80049c0:	0013      	movs	r3, r2
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	23c0      	movs	r3, #192	@ 0xc0
 80049d4:	029b      	lsls	r3, r3, #10
 80049d6:	4013      	ands	r3, r2
 80049d8:	d100      	bne.n	80049dc <HAL_GPIO_Init+0x174>
 80049da:	e09a      	b.n	8004b12 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049dc:	4b54      	ldr	r3, [pc, #336]	@ (8004b30 <HAL_GPIO_Init+0x2c8>)
 80049de:	699a      	ldr	r2, [r3, #24]
 80049e0:	4b53      	ldr	r3, [pc, #332]	@ (8004b30 <HAL_GPIO_Init+0x2c8>)
 80049e2:	2101      	movs	r1, #1
 80049e4:	430a      	orrs	r2, r1
 80049e6:	619a      	str	r2, [r3, #24]
 80049e8:	4b51      	ldr	r3, [pc, #324]	@ (8004b30 <HAL_GPIO_Init+0x2c8>)
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	2201      	movs	r2, #1
 80049ee:	4013      	ands	r3, r2
 80049f0:	60bb      	str	r3, [r7, #8]
 80049f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80049f4:	4a4f      	ldr	r2, [pc, #316]	@ (8004b34 <HAL_GPIO_Init+0x2cc>)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	089b      	lsrs	r3, r3, #2
 80049fa:	3302      	adds	r3, #2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	589b      	ldr	r3, [r3, r2]
 8004a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2203      	movs	r2, #3
 8004a06:	4013      	ands	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	220f      	movs	r2, #15
 8004a0c:	409a      	lsls	r2, r3
 8004a0e:	0013      	movs	r3, r2
 8004a10:	43da      	mvns	r2, r3
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4013      	ands	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	2390      	movs	r3, #144	@ 0x90
 8004a1c:	05db      	lsls	r3, r3, #23
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d013      	beq.n	8004a4a <HAL_GPIO_Init+0x1e2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a44      	ldr	r2, [pc, #272]	@ (8004b38 <HAL_GPIO_Init+0x2d0>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d00d      	beq.n	8004a46 <HAL_GPIO_Init+0x1de>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a43      	ldr	r2, [pc, #268]	@ (8004b3c <HAL_GPIO_Init+0x2d4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d007      	beq.n	8004a42 <HAL_GPIO_Init+0x1da>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a42      	ldr	r2, [pc, #264]	@ (8004b40 <HAL_GPIO_Init+0x2d8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d101      	bne.n	8004a3e <HAL_GPIO_Init+0x1d6>
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e006      	b.n	8004a4c <HAL_GPIO_Init+0x1e4>
 8004a3e:	2305      	movs	r3, #5
 8004a40:	e004      	b.n	8004a4c <HAL_GPIO_Init+0x1e4>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e002      	b.n	8004a4c <HAL_GPIO_Init+0x1e4>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <HAL_GPIO_Init+0x1e4>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	2103      	movs	r1, #3
 8004a50:	400a      	ands	r2, r1
 8004a52:	0092      	lsls	r2, r2, #2
 8004a54:	4093      	lsls	r3, r2
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a5c:	4935      	ldr	r1, [pc, #212]	@ (8004b34 <HAL_GPIO_Init+0x2cc>)
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	089b      	lsrs	r3, r3, #2
 8004a62:	3302      	adds	r3, #2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a6a:	4b36      	ldr	r3, [pc, #216]	@ (8004b44 <HAL_GPIO_Init+0x2dc>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	43da      	mvns	r2, r3
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	4013      	ands	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	2380      	movs	r3, #128	@ 0x80
 8004a80:	035b      	lsls	r3, r3, #13
 8004a82:	4013      	ands	r3, r2
 8004a84:	d003      	beq.n	8004a8e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8004b44 <HAL_GPIO_Init+0x2dc>)
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004a94:	4b2b      	ldr	r3, [pc, #172]	@ (8004b44 <HAL_GPIO_Init+0x2dc>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	43da      	mvns	r2, r3
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	2380      	movs	r3, #128	@ 0x80
 8004aaa:	039b      	lsls	r3, r3, #14
 8004aac:	4013      	ands	r3, r2
 8004aae:	d003      	beq.n	8004ab8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004ab8:	4b22      	ldr	r3, [pc, #136]	@ (8004b44 <HAL_GPIO_Init+0x2dc>)
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004abe:	4b21      	ldr	r3, [pc, #132]	@ (8004b44 <HAL_GPIO_Init+0x2dc>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	43da      	mvns	r2, r3
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	4013      	ands	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	2380      	movs	r3, #128	@ 0x80
 8004ad4:	029b      	lsls	r3, r3, #10
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	d003      	beq.n	8004ae2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004ae2:	4b18      	ldr	r3, [pc, #96]	@ (8004b44 <HAL_GPIO_Init+0x2dc>)
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004ae8:	4b16      	ldr	r3, [pc, #88]	@ (8004b44 <HAL_GPIO_Init+0x2dc>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	43da      	mvns	r2, r3
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4013      	ands	r3, r2
 8004af6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	2380      	movs	r3, #128	@ 0x80
 8004afe:	025b      	lsls	r3, r3, #9
 8004b00:	4013      	ands	r3, r2
 8004b02:	d003      	beq.n	8004b0c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004b44 <HAL_GPIO_Init+0x2dc>)
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	3301      	adds	r3, #1
 8004b16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	40da      	lsrs	r2, r3
 8004b20:	1e13      	subs	r3, r2, #0
 8004b22:	d000      	beq.n	8004b26 <HAL_GPIO_Init+0x2be>
 8004b24:	e6a8      	b.n	8004878 <HAL_GPIO_Init+0x10>
  } 
}
 8004b26:	46c0      	nop			@ (mov r8, r8)
 8004b28:	46c0      	nop			@ (mov r8, r8)
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	b006      	add	sp, #24
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40021000 	.word	0x40021000
 8004b34:	40010000 	.word	0x40010000
 8004b38:	48000400 	.word	0x48000400
 8004b3c:	48000800 	.word	0x48000800
 8004b40:	48000c00 	.word	0x48000c00
 8004b44:	40010400 	.word	0x40010400

08004b48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	0008      	movs	r0, r1
 8004b52:	0011      	movs	r1, r2
 8004b54:	1cbb      	adds	r3, r7, #2
 8004b56:	1c02      	adds	r2, r0, #0
 8004b58:	801a      	strh	r2, [r3, #0]
 8004b5a:	1c7b      	adds	r3, r7, #1
 8004b5c:	1c0a      	adds	r2, r1, #0
 8004b5e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004b60:	1c7b      	adds	r3, r7, #1
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d004      	beq.n	8004b72 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004b68:	1cbb      	adds	r3, r7, #2
 8004b6a:	881a      	ldrh	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b70:	e003      	b.n	8004b7a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b72:	1cbb      	adds	r3, r7, #2
 8004b74:	881a      	ldrh	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004b7a:	46c0      	nop			@ (mov r8, r8)
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	b002      	add	sp, #8
 8004b80:	bd80      	pop	{r7, pc}
	...

08004b84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	0002      	movs	r2, r0
 8004b8c:	1dbb      	adds	r3, r7, #6
 8004b8e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b90:	4b09      	ldr	r3, [pc, #36]	@ (8004bb8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	1dba      	adds	r2, r7, #6
 8004b96:	8812      	ldrh	r2, [r2, #0]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d008      	beq.n	8004bae <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b9c:	4b06      	ldr	r3, [pc, #24]	@ (8004bb8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004b9e:	1dba      	adds	r2, r7, #6
 8004ba0:	8812      	ldrh	r2, [r2, #0]
 8004ba2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ba4:	1dbb      	adds	r3, r7, #6
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f7ff f82d 	bl	8003c08 <HAL_GPIO_EXTI_Callback>
  }
}
 8004bae:	46c0      	nop			@ (mov r8, r8)
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b002      	add	sp, #8
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	46c0      	nop			@ (mov r8, r8)
 8004bb8:	40010400 	.word	0x40010400

08004bbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e08f      	b.n	8004cee <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2241      	movs	r2, #65	@ 0x41
 8004bd2:	5c9b      	ldrb	r3, [r3, r2]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d107      	bne.n	8004bea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2240      	movs	r2, #64	@ 0x40
 8004bde:	2100      	movs	r1, #0
 8004be0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	0018      	movs	r0, r3
 8004be6:	f7ff f863 	bl	8003cb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2241      	movs	r2, #65	@ 0x41
 8004bee:	2124      	movs	r1, #36	@ 0x24
 8004bf0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	438a      	bics	r2, r1
 8004c00:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	493b      	ldr	r1, [pc, #236]	@ (8004cf8 <HAL_I2C_Init+0x13c>)
 8004c0c:	400a      	ands	r2, r1
 8004c0e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4938      	ldr	r1, [pc, #224]	@ (8004cfc <HAL_I2C_Init+0x140>)
 8004c1c:	400a      	ands	r2, r1
 8004c1e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d108      	bne.n	8004c3a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2180      	movs	r1, #128	@ 0x80
 8004c32:	0209      	lsls	r1, r1, #8
 8004c34:	430a      	orrs	r2, r1
 8004c36:	609a      	str	r2, [r3, #8]
 8004c38:	e007      	b.n	8004c4a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689a      	ldr	r2, [r3, #8]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2184      	movs	r1, #132	@ 0x84
 8004c44:	0209      	lsls	r1, r1, #8
 8004c46:	430a      	orrs	r2, r1
 8004c48:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d109      	bne.n	8004c66 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2180      	movs	r1, #128	@ 0x80
 8004c5e:	0109      	lsls	r1, r1, #4
 8004c60:	430a      	orrs	r2, r1
 8004c62:	605a      	str	r2, [r3, #4]
 8004c64:	e007      	b.n	8004c76 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4923      	ldr	r1, [pc, #140]	@ (8004d00 <HAL_I2C_Init+0x144>)
 8004c72:	400a      	ands	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4920      	ldr	r1, [pc, #128]	@ (8004d04 <HAL_I2C_Init+0x148>)
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68da      	ldr	r2, [r3, #12]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	491a      	ldr	r1, [pc, #104]	@ (8004cfc <HAL_I2C_Init+0x140>)
 8004c92:	400a      	ands	r2, r1
 8004c94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	691a      	ldr	r2, [r3, #16]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69d9      	ldr	r1, [r3, #28]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a1a      	ldr	r2, [r3, #32]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2101      	movs	r1, #1
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2241      	movs	r2, #65	@ 0x41
 8004cda:	2120      	movs	r1, #32
 8004cdc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2242      	movs	r2, #66	@ 0x42
 8004ce8:	2100      	movs	r1, #0
 8004cea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	0018      	movs	r0, r3
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	b002      	add	sp, #8
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	46c0      	nop			@ (mov r8, r8)
 8004cf8:	f0ffffff 	.word	0xf0ffffff
 8004cfc:	ffff7fff 	.word	0xffff7fff
 8004d00:	fffff7ff 	.word	0xfffff7ff
 8004d04:	02008000 	.word	0x02008000

08004d08 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d08:	b590      	push	{r4, r7, lr}
 8004d0a:	b089      	sub	sp, #36	@ 0x24
 8004d0c:	af02      	add	r7, sp, #8
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	000c      	movs	r4, r1
 8004d12:	0010      	movs	r0, r2
 8004d14:	0019      	movs	r1, r3
 8004d16:	230a      	movs	r3, #10
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	1c22      	adds	r2, r4, #0
 8004d1c:	801a      	strh	r2, [r3, #0]
 8004d1e:	2308      	movs	r3, #8
 8004d20:	18fb      	adds	r3, r7, r3
 8004d22:	1c02      	adds	r2, r0, #0
 8004d24:	801a      	strh	r2, [r3, #0]
 8004d26:	1dbb      	adds	r3, r7, #6
 8004d28:	1c0a      	adds	r2, r1, #0
 8004d2a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2241      	movs	r2, #65	@ 0x41
 8004d30:	5c9b      	ldrb	r3, [r3, r2]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b20      	cmp	r3, #32
 8004d36:	d000      	beq.n	8004d3a <HAL_I2C_Mem_Read+0x32>
 8004d38:	e110      	b.n	8004f5c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d004      	beq.n	8004d4a <HAL_I2C_Mem_Read+0x42>
 8004d40:	232c      	movs	r3, #44	@ 0x2c
 8004d42:	18fb      	adds	r3, r7, r3
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d105      	bne.n	8004d56 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2280      	movs	r2, #128	@ 0x80
 8004d4e:	0092      	lsls	r2, r2, #2
 8004d50:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e103      	b.n	8004f5e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2240      	movs	r2, #64	@ 0x40
 8004d5a:	5c9b      	ldrb	r3, [r3, r2]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_I2C_Mem_Read+0x5c>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e0fc      	b.n	8004f5e <HAL_I2C_Mem_Read+0x256>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2240      	movs	r2, #64	@ 0x40
 8004d68:	2101      	movs	r1, #1
 8004d6a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004d6c:	f7ff fa5a 	bl	8004224 <HAL_GetTick>
 8004d70:	0003      	movs	r3, r0
 8004d72:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004d74:	2380      	movs	r3, #128	@ 0x80
 8004d76:	0219      	lsls	r1, r3, #8
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2319      	movs	r3, #25
 8004d80:	2201      	movs	r2, #1
 8004d82:	f000 f979 	bl	8005078 <I2C_WaitOnFlagUntilTimeout>
 8004d86:	1e03      	subs	r3, r0, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e0e7      	b.n	8004f5e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2241      	movs	r2, #65	@ 0x41
 8004d92:	2122      	movs	r1, #34	@ 0x22
 8004d94:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2242      	movs	r2, #66	@ 0x42
 8004d9a:	2140      	movs	r1, #64	@ 0x40
 8004d9c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004da8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	222c      	movs	r2, #44	@ 0x2c
 8004dae:	18ba      	adds	r2, r7, r2
 8004db0:	8812      	ldrh	r2, [r2, #0]
 8004db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004dba:	1dbb      	adds	r3, r7, #6
 8004dbc:	881c      	ldrh	r4, [r3, #0]
 8004dbe:	2308      	movs	r3, #8
 8004dc0:	18fb      	adds	r3, r7, r3
 8004dc2:	881a      	ldrh	r2, [r3, #0]
 8004dc4:	230a      	movs	r3, #10
 8004dc6:	18fb      	adds	r3, r7, r3
 8004dc8:	8819      	ldrh	r1, [r3, #0]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	0023      	movs	r3, r4
 8004dd6:	f000 f8cb 	bl	8004f70 <I2C_RequestMemoryRead>
 8004dda:	1e03      	subs	r3, r0, #0
 8004ddc:	d005      	beq.n	8004dea <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2240      	movs	r2, #64	@ 0x40
 8004de2:	2100      	movs	r1, #0
 8004de4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e0b9      	b.n	8004f5e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2bff      	cmp	r3, #255	@ 0xff
 8004df2:	d911      	bls.n	8004e18 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2201      	movs	r2, #1
 8004df8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	2380      	movs	r3, #128	@ 0x80
 8004e02:	045c      	lsls	r4, r3, #17
 8004e04:	230a      	movs	r3, #10
 8004e06:	18fb      	adds	r3, r7, r3
 8004e08:	8819      	ldrh	r1, [r3, #0]
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	4b56      	ldr	r3, [pc, #344]	@ (8004f68 <HAL_I2C_Mem_Read+0x260>)
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	0023      	movs	r3, r4
 8004e12:	f000 fb0b 	bl	800542c <I2C_TransferConfig>
 8004e16:	e012      	b.n	8004e3e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	2380      	movs	r3, #128	@ 0x80
 8004e2a:	049c      	lsls	r4, r3, #18
 8004e2c:	230a      	movs	r3, #10
 8004e2e:	18fb      	adds	r3, r7, r3
 8004e30:	8819      	ldrh	r1, [r3, #0]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	4b4c      	ldr	r3, [pc, #304]	@ (8004f68 <HAL_I2C_Mem_Read+0x260>)
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	0023      	movs	r3, r4
 8004e3a:	f000 faf7 	bl	800542c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	0013      	movs	r3, r2
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2104      	movs	r1, #4
 8004e4c:	f000 f914 	bl	8005078 <I2C_WaitOnFlagUntilTimeout>
 8004e50:	1e03      	subs	r3, r0, #0
 8004e52:	d001      	beq.n	8004e58 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e082      	b.n	8004f5e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6a:	1c5a      	adds	r2, r3, #1
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e74:	3b01      	subs	r3, #1
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d03a      	beq.n	8004f0a <HAL_I2C_Mem_Read+0x202>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d136      	bne.n	8004f0a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	9300      	str	r3, [sp, #0]
 8004ea4:	0013      	movs	r3, r2
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2180      	movs	r1, #128	@ 0x80
 8004eaa:	f000 f8e5 	bl	8005078 <I2C_WaitOnFlagUntilTimeout>
 8004eae:	1e03      	subs	r3, r0, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e053      	b.n	8004f5e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2bff      	cmp	r3, #255	@ 0xff
 8004ebe:	d911      	bls.n	8004ee4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	2380      	movs	r3, #128	@ 0x80
 8004ece:	045c      	lsls	r4, r3, #17
 8004ed0:	230a      	movs	r3, #10
 8004ed2:	18fb      	adds	r3, r7, r3
 8004ed4:	8819      	ldrh	r1, [r3, #0]
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	2300      	movs	r3, #0
 8004eda:	9300      	str	r3, [sp, #0]
 8004edc:	0023      	movs	r3, r4
 8004ede:	f000 faa5 	bl	800542c <I2C_TransferConfig>
 8004ee2:	e012      	b.n	8004f0a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	2380      	movs	r3, #128	@ 0x80
 8004ef6:	049c      	lsls	r4, r3, #18
 8004ef8:	230a      	movs	r3, #10
 8004efa:	18fb      	adds	r3, r7, r3
 8004efc:	8819      	ldrh	r1, [r3, #0]
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	2300      	movs	r3, #0
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	0023      	movs	r3, r4
 8004f06:	f000 fa91 	bl	800542c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d194      	bne.n	8004e3e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f000 f94a 	bl	80051b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f20:	1e03      	subs	r3, r0, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e01a      	b.n	8004f5e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	490c      	ldr	r1, [pc, #48]	@ (8004f6c <HAL_I2C_Mem_Read+0x264>)
 8004f3c:	400a      	ands	r2, r1
 8004f3e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2241      	movs	r2, #65	@ 0x41
 8004f44:	2120      	movs	r1, #32
 8004f46:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2242      	movs	r2, #66	@ 0x42
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2240      	movs	r2, #64	@ 0x40
 8004f54:	2100      	movs	r1, #0
 8004f56:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e000      	b.n	8004f5e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004f5c:	2302      	movs	r3, #2
  }
}
 8004f5e:	0018      	movs	r0, r3
 8004f60:	46bd      	mov	sp, r7
 8004f62:	b007      	add	sp, #28
 8004f64:	bd90      	pop	{r4, r7, pc}
 8004f66:	46c0      	nop			@ (mov r8, r8)
 8004f68:	80002400 	.word	0x80002400
 8004f6c:	fe00e800 	.word	0xfe00e800

08004f70 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004f70:	b5b0      	push	{r4, r5, r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	000c      	movs	r4, r1
 8004f7a:	0010      	movs	r0, r2
 8004f7c:	0019      	movs	r1, r3
 8004f7e:	250a      	movs	r5, #10
 8004f80:	197b      	adds	r3, r7, r5
 8004f82:	1c22      	adds	r2, r4, #0
 8004f84:	801a      	strh	r2, [r3, #0]
 8004f86:	2308      	movs	r3, #8
 8004f88:	18fb      	adds	r3, r7, r3
 8004f8a:	1c02      	adds	r2, r0, #0
 8004f8c:	801a      	strh	r2, [r3, #0]
 8004f8e:	1dbb      	adds	r3, r7, #6
 8004f90:	1c0a      	adds	r2, r1, #0
 8004f92:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004f94:	1dbb      	adds	r3, r7, #6
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	197b      	adds	r3, r7, r5
 8004f9c:	8819      	ldrh	r1, [r3, #0]
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	4b23      	ldr	r3, [pc, #140]	@ (8005030 <I2C_RequestMemoryRead+0xc0>)
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f000 fa41 	bl	800542c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fac:	6a39      	ldr	r1, [r7, #32]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	0018      	movs	r0, r3
 8004fb2:	f000 f8b9 	bl	8005128 <I2C_WaitOnTXISFlagUntilTimeout>
 8004fb6:	1e03      	subs	r3, r0, #0
 8004fb8:	d001      	beq.n	8004fbe <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e033      	b.n	8005026 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004fbe:	1dbb      	adds	r3, r7, #6
 8004fc0:	881b      	ldrh	r3, [r3, #0]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d107      	bne.n	8004fd6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	18fb      	adds	r3, r7, r3
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004fd4:	e019      	b.n	800500a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	18fb      	adds	r3, r7, r3
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	0a1b      	lsrs	r3, r3, #8
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fea:	6a39      	ldr	r1, [r7, #32]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f000 f89a 	bl	8005128 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ff4:	1e03      	subs	r3, r0, #0
 8004ff6:	d001      	beq.n	8004ffc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e014      	b.n	8005026 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ffc:	2308      	movs	r3, #8
 8004ffe:	18fb      	adds	r3, r7, r3
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	b2da      	uxtb	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800500a:	6a3a      	ldr	r2, [r7, #32]
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	0013      	movs	r3, r2
 8005014:	2200      	movs	r2, #0
 8005016:	2140      	movs	r1, #64	@ 0x40
 8005018:	f000 f82e 	bl	8005078 <I2C_WaitOnFlagUntilTimeout>
 800501c:	1e03      	subs	r3, r0, #0
 800501e:	d001      	beq.n	8005024 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	0018      	movs	r0, r3
 8005028:	46bd      	mov	sp, r7
 800502a:	b004      	add	sp, #16
 800502c:	bdb0      	pop	{r4, r5, r7, pc}
 800502e:	46c0      	nop			@ (mov r8, r8)
 8005030:	80002000 	.word	0x80002000

08005034 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	2202      	movs	r2, #2
 8005044:	4013      	ands	r3, r2
 8005046:	2b02      	cmp	r3, #2
 8005048:	d103      	bne.n	8005052 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2200      	movs	r2, #0
 8005050:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	2201      	movs	r2, #1
 800505a:	4013      	ands	r3, r2
 800505c:	2b01      	cmp	r3, #1
 800505e:	d007      	beq.n	8005070 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2101      	movs	r1, #1
 800506c:	430a      	orrs	r2, r1
 800506e:	619a      	str	r2, [r3, #24]
  }
}
 8005070:	46c0      	nop			@ (mov r8, r8)
 8005072:	46bd      	mov	sp, r7
 8005074:	b002      	add	sp, #8
 8005076:	bd80      	pop	{r7, pc}

08005078 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	1dfb      	adds	r3, r7, #7
 8005086:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005088:	e03a      	b.n	8005100 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	6839      	ldr	r1, [r7, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	0018      	movs	r0, r3
 8005092:	f000 f8d3 	bl	800523c <I2C_IsErrorOccurred>
 8005096:	1e03      	subs	r3, r0, #0
 8005098:	d001      	beq.n	800509e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e040      	b.n	8005120 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	3301      	adds	r3, #1
 80050a2:	d02d      	beq.n	8005100 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a4:	f7ff f8be 	bl	8004224 <HAL_GetTick>
 80050a8:	0002      	movs	r2, r0
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d302      	bcc.n	80050ba <I2C_WaitOnFlagUntilTimeout+0x42>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d122      	bne.n	8005100 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	4013      	ands	r3, r2
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	425a      	negs	r2, r3
 80050ca:	4153      	adcs	r3, r2
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	001a      	movs	r2, r3
 80050d0:	1dfb      	adds	r3, r7, #7
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d113      	bne.n	8005100 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050dc:	2220      	movs	r2, #32
 80050de:	431a      	orrs	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2241      	movs	r2, #65	@ 0x41
 80050e8:	2120      	movs	r1, #32
 80050ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2242      	movs	r2, #66	@ 0x42
 80050f0:	2100      	movs	r1, #0
 80050f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2240      	movs	r2, #64	@ 0x40
 80050f8:	2100      	movs	r1, #0
 80050fa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e00f      	b.n	8005120 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	4013      	ands	r3, r2
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	425a      	negs	r2, r3
 8005110:	4153      	adcs	r3, r2
 8005112:	b2db      	uxtb	r3, r3
 8005114:	001a      	movs	r2, r3
 8005116:	1dfb      	adds	r3, r7, #7
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d0b5      	beq.n	800508a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	0018      	movs	r0, r3
 8005122:	46bd      	mov	sp, r7
 8005124:	b004      	add	sp, #16
 8005126:	bd80      	pop	{r7, pc}

08005128 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005134:	e032      	b.n	800519c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	68b9      	ldr	r1, [r7, #8]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	0018      	movs	r0, r3
 800513e:	f000 f87d 	bl	800523c <I2C_IsErrorOccurred>
 8005142:	1e03      	subs	r3, r0, #0
 8005144:	d001      	beq.n	800514a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e030      	b.n	80051ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	3301      	adds	r3, #1
 800514e:	d025      	beq.n	800519c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005150:	f7ff f868 	bl	8004224 <HAL_GetTick>
 8005154:	0002      	movs	r2, r0
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	429a      	cmp	r2, r3
 800515e:	d302      	bcc.n	8005166 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d11a      	bne.n	800519c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	699b      	ldr	r3, [r3, #24]
 800516c:	2202      	movs	r2, #2
 800516e:	4013      	ands	r3, r2
 8005170:	2b02      	cmp	r3, #2
 8005172:	d013      	beq.n	800519c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005178:	2220      	movs	r2, #32
 800517a:	431a      	orrs	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2241      	movs	r2, #65	@ 0x41
 8005184:	2120      	movs	r1, #32
 8005186:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2242      	movs	r2, #66	@ 0x42
 800518c:	2100      	movs	r1, #0
 800518e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2240      	movs	r2, #64	@ 0x40
 8005194:	2100      	movs	r1, #0
 8005196:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e007      	b.n	80051ac <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	2202      	movs	r2, #2
 80051a4:	4013      	ands	r3, r2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d1c5      	bne.n	8005136 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	0018      	movs	r0, r3
 80051ae:	46bd      	mov	sp, r7
 80051b0:	b004      	add	sp, #16
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80051c0:	e02f      	b.n	8005222 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	68b9      	ldr	r1, [r7, #8]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	0018      	movs	r0, r3
 80051ca:	f000 f837 	bl	800523c <I2C_IsErrorOccurred>
 80051ce:	1e03      	subs	r3, r0, #0
 80051d0:	d001      	beq.n	80051d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e02d      	b.n	8005232 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d6:	f7ff f825 	bl	8004224 <HAL_GetTick>
 80051da:	0002      	movs	r2, r0
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d302      	bcc.n	80051ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d11a      	bne.n	8005222 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	2220      	movs	r2, #32
 80051f4:	4013      	ands	r3, r2
 80051f6:	2b20      	cmp	r3, #32
 80051f8:	d013      	beq.n	8005222 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fe:	2220      	movs	r2, #32
 8005200:	431a      	orrs	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2241      	movs	r2, #65	@ 0x41
 800520a:	2120      	movs	r1, #32
 800520c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2242      	movs	r2, #66	@ 0x42
 8005212:	2100      	movs	r1, #0
 8005214:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2240      	movs	r2, #64	@ 0x40
 800521a:	2100      	movs	r1, #0
 800521c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e007      	b.n	8005232 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	2220      	movs	r2, #32
 800522a:	4013      	ands	r3, r2
 800522c:	2b20      	cmp	r3, #32
 800522e:	d1c8      	bne.n	80051c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	0018      	movs	r0, r3
 8005234:	46bd      	mov	sp, r7
 8005236:	b004      	add	sp, #16
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08a      	sub	sp, #40	@ 0x28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005248:	2327      	movs	r3, #39	@ 0x27
 800524a:	18fb      	adds	r3, r7, r3
 800524c:	2200      	movs	r2, #0
 800524e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2210      	movs	r2, #16
 8005264:	4013      	ands	r3, r2
 8005266:	d100      	bne.n	800526a <I2C_IsErrorOccurred+0x2e>
 8005268:	e079      	b.n	800535e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2210      	movs	r2, #16
 8005270:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005272:	e057      	b.n	8005324 <I2C_IsErrorOccurred+0xe8>
 8005274:	2227      	movs	r2, #39	@ 0x27
 8005276:	18bb      	adds	r3, r7, r2
 8005278:	18ba      	adds	r2, r7, r2
 800527a:	7812      	ldrb	r2, [r2, #0]
 800527c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	3301      	adds	r3, #1
 8005282:	d04f      	beq.n	8005324 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005284:	f7fe ffce 	bl	8004224 <HAL_GetTick>
 8005288:	0002      	movs	r2, r0
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	d302      	bcc.n	800529a <I2C_IsErrorOccurred+0x5e>
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d144      	bne.n	8005324 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	2380      	movs	r3, #128	@ 0x80
 80052a2:	01db      	lsls	r3, r3, #7
 80052a4:	4013      	ands	r3, r2
 80052a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80052a8:	2013      	movs	r0, #19
 80052aa:	183b      	adds	r3, r7, r0
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	2142      	movs	r1, #66	@ 0x42
 80052b0:	5c52      	ldrb	r2, [r2, r1]
 80052b2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	2380      	movs	r3, #128	@ 0x80
 80052bc:	021b      	lsls	r3, r3, #8
 80052be:	401a      	ands	r2, r3
 80052c0:	2380      	movs	r3, #128	@ 0x80
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d126      	bne.n	8005316 <I2C_IsErrorOccurred+0xda>
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	2380      	movs	r3, #128	@ 0x80
 80052cc:	01db      	lsls	r3, r3, #7
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d021      	beq.n	8005316 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80052d2:	183b      	adds	r3, r7, r0
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d01d      	beq.n	8005316 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2180      	movs	r1, #128	@ 0x80
 80052e6:	01c9      	lsls	r1, r1, #7
 80052e8:	430a      	orrs	r2, r1
 80052ea:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80052ec:	f7fe ff9a 	bl	8004224 <HAL_GetTick>
 80052f0:	0003      	movs	r3, r0
 80052f2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052f4:	e00f      	b.n	8005316 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80052f6:	f7fe ff95 	bl	8004224 <HAL_GetTick>
 80052fa:	0002      	movs	r2, r0
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b19      	cmp	r3, #25
 8005302:	d908      	bls.n	8005316 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	2220      	movs	r2, #32
 8005308:	4313      	orrs	r3, r2
 800530a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800530c:	2327      	movs	r3, #39	@ 0x27
 800530e:	18fb      	adds	r3, r7, r3
 8005310:	2201      	movs	r2, #1
 8005312:	701a      	strb	r2, [r3, #0]

              break;
 8005314:	e006      	b.n	8005324 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	2220      	movs	r2, #32
 800531e:	4013      	ands	r3, r2
 8005320:	2b20      	cmp	r3, #32
 8005322:	d1e8      	bne.n	80052f6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	2220      	movs	r2, #32
 800532c:	4013      	ands	r3, r2
 800532e:	2b20      	cmp	r3, #32
 8005330:	d004      	beq.n	800533c <I2C_IsErrorOccurred+0x100>
 8005332:	2327      	movs	r3, #39	@ 0x27
 8005334:	18fb      	adds	r3, r7, r3
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d09b      	beq.n	8005274 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800533c:	2327      	movs	r3, #39	@ 0x27
 800533e:	18fb      	adds	r3, r7, r3
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d103      	bne.n	800534e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2220      	movs	r2, #32
 800534c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	2204      	movs	r2, #4
 8005352:	4313      	orrs	r3, r2
 8005354:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005356:	2327      	movs	r3, #39	@ 0x27
 8005358:	18fb      	adds	r3, r7, r3
 800535a:	2201      	movs	r2, #1
 800535c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	2380      	movs	r3, #128	@ 0x80
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	4013      	ands	r3, r2
 800536e:	d00c      	beq.n	800538a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	2201      	movs	r2, #1
 8005374:	4313      	orrs	r3, r2
 8005376:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2280      	movs	r2, #128	@ 0x80
 800537e:	0052      	lsls	r2, r2, #1
 8005380:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005382:	2327      	movs	r3, #39	@ 0x27
 8005384:	18fb      	adds	r3, r7, r3
 8005386:	2201      	movs	r2, #1
 8005388:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	2380      	movs	r3, #128	@ 0x80
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	4013      	ands	r3, r2
 8005392:	d00c      	beq.n	80053ae <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	2208      	movs	r2, #8
 8005398:	4313      	orrs	r3, r2
 800539a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2280      	movs	r2, #128	@ 0x80
 80053a2:	00d2      	lsls	r2, r2, #3
 80053a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053a6:	2327      	movs	r3, #39	@ 0x27
 80053a8:	18fb      	adds	r3, r7, r3
 80053aa:	2201      	movs	r2, #1
 80053ac:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	2380      	movs	r3, #128	@ 0x80
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4013      	ands	r3, r2
 80053b6:	d00c      	beq.n	80053d2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	2202      	movs	r2, #2
 80053bc:	4313      	orrs	r3, r2
 80053be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2280      	movs	r2, #128	@ 0x80
 80053c6:	0092      	lsls	r2, r2, #2
 80053c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053ca:	2327      	movs	r3, #39	@ 0x27
 80053cc:	18fb      	adds	r3, r7, r3
 80053ce:	2201      	movs	r2, #1
 80053d0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80053d2:	2327      	movs	r3, #39	@ 0x27
 80053d4:	18fb      	adds	r3, r7, r3
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01d      	beq.n	8005418 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	0018      	movs	r0, r3
 80053e0:	f7ff fe28 	bl	8005034 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685a      	ldr	r2, [r3, #4]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	490e      	ldr	r1, [pc, #56]	@ (8005428 <I2C_IsErrorOccurred+0x1ec>)
 80053f0:	400a      	ands	r2, r1
 80053f2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2241      	movs	r2, #65	@ 0x41
 8005404:	2120      	movs	r1, #32
 8005406:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2242      	movs	r2, #66	@ 0x42
 800540c:	2100      	movs	r1, #0
 800540e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2240      	movs	r2, #64	@ 0x40
 8005414:	2100      	movs	r1, #0
 8005416:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005418:	2327      	movs	r3, #39	@ 0x27
 800541a:	18fb      	adds	r3, r7, r3
 800541c:	781b      	ldrb	r3, [r3, #0]
}
 800541e:	0018      	movs	r0, r3
 8005420:	46bd      	mov	sp, r7
 8005422:	b00a      	add	sp, #40	@ 0x28
 8005424:	bd80      	pop	{r7, pc}
 8005426:	46c0      	nop			@ (mov r8, r8)
 8005428:	fe00e800 	.word	0xfe00e800

0800542c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800542c:	b590      	push	{r4, r7, lr}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	0008      	movs	r0, r1
 8005436:	0011      	movs	r1, r2
 8005438:	607b      	str	r3, [r7, #4]
 800543a:	240a      	movs	r4, #10
 800543c:	193b      	adds	r3, r7, r4
 800543e:	1c02      	adds	r2, r0, #0
 8005440:	801a      	strh	r2, [r3, #0]
 8005442:	2009      	movs	r0, #9
 8005444:	183b      	adds	r3, r7, r0
 8005446:	1c0a      	adds	r2, r1, #0
 8005448:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800544a:	193b      	adds	r3, r7, r4
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	059b      	lsls	r3, r3, #22
 8005450:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005452:	183b      	adds	r3, r7, r0
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	0419      	lsls	r1, r3, #16
 8005458:	23ff      	movs	r3, #255	@ 0xff
 800545a:	041b      	lsls	r3, r3, #16
 800545c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800545e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005466:	4313      	orrs	r3, r2
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	085b      	lsrs	r3, r3, #1
 800546c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005476:	0d51      	lsrs	r1, r2, #21
 8005478:	2280      	movs	r2, #128	@ 0x80
 800547a:	00d2      	lsls	r2, r2, #3
 800547c:	400a      	ands	r2, r1
 800547e:	4907      	ldr	r1, [pc, #28]	@ (800549c <I2C_TransferConfig+0x70>)
 8005480:	430a      	orrs	r2, r1
 8005482:	43d2      	mvns	r2, r2
 8005484:	401a      	ands	r2, r3
 8005486:	0011      	movs	r1, r2
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005492:	46c0      	nop			@ (mov r8, r8)
 8005494:	46bd      	mov	sp, r7
 8005496:	b007      	add	sp, #28
 8005498:	bd90      	pop	{r4, r7, pc}
 800549a:	46c0      	nop			@ (mov r8, r8)
 800549c:	03ff63ff 	.word	0x03ff63ff

080054a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2241      	movs	r2, #65	@ 0x41
 80054ae:	5c9b      	ldrb	r3, [r3, r2]
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	d138      	bne.n	8005528 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2240      	movs	r2, #64	@ 0x40
 80054ba:	5c9b      	ldrb	r3, [r3, r2]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e032      	b.n	800552a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2240      	movs	r2, #64	@ 0x40
 80054c8:	2101      	movs	r1, #1
 80054ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2241      	movs	r2, #65	@ 0x41
 80054d0:	2124      	movs	r1, #36	@ 0x24
 80054d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2101      	movs	r1, #1
 80054e0:	438a      	bics	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4911      	ldr	r1, [pc, #68]	@ (8005534 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80054f0:	400a      	ands	r2, r1
 80054f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6819      	ldr	r1, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2101      	movs	r1, #1
 8005510:	430a      	orrs	r2, r1
 8005512:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2241      	movs	r2, #65	@ 0x41
 8005518:	2120      	movs	r1, #32
 800551a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2240      	movs	r2, #64	@ 0x40
 8005520:	2100      	movs	r1, #0
 8005522:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005524:	2300      	movs	r3, #0
 8005526:	e000      	b.n	800552a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005528:	2302      	movs	r3, #2
  }
}
 800552a:	0018      	movs	r0, r3
 800552c:	46bd      	mov	sp, r7
 800552e:	b002      	add	sp, #8
 8005530:	bd80      	pop	{r7, pc}
 8005532:	46c0      	nop			@ (mov r8, r8)
 8005534:	ffffefff 	.word	0xffffefff

08005538 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2241      	movs	r2, #65	@ 0x41
 8005546:	5c9b      	ldrb	r3, [r3, r2]
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b20      	cmp	r3, #32
 800554c:	d139      	bne.n	80055c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2240      	movs	r2, #64	@ 0x40
 8005552:	5c9b      	ldrb	r3, [r3, r2]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005558:	2302      	movs	r3, #2
 800555a:	e033      	b.n	80055c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2240      	movs	r2, #64	@ 0x40
 8005560:	2101      	movs	r1, #1
 8005562:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2241      	movs	r2, #65	@ 0x41
 8005568:	2124      	movs	r1, #36	@ 0x24
 800556a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2101      	movs	r1, #1
 8005578:	438a      	bics	r2, r1
 800557a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4a11      	ldr	r2, [pc, #68]	@ (80055cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005588:	4013      	ands	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2101      	movs	r1, #1
 80055aa:	430a      	orrs	r2, r1
 80055ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2241      	movs	r2, #65	@ 0x41
 80055b2:	2120      	movs	r1, #32
 80055b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2240      	movs	r2, #64	@ 0x40
 80055ba:	2100      	movs	r1, #0
 80055bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80055be:	2300      	movs	r3, #0
 80055c0:	e000      	b.n	80055c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80055c2:	2302      	movs	r3, #2
  }
}
 80055c4:	0018      	movs	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	b004      	add	sp, #16
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	fffff0ff 	.word	0xfffff0ff

080055d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e301      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2201      	movs	r2, #1
 80055e8:	4013      	ands	r3, r2
 80055ea:	d100      	bne.n	80055ee <HAL_RCC_OscConfig+0x1e>
 80055ec:	e08d      	b.n	800570a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80055ee:	4bc3      	ldr	r3, [pc, #780]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	220c      	movs	r2, #12
 80055f4:	4013      	ands	r3, r2
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d00e      	beq.n	8005618 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80055fa:	4bc0      	ldr	r3, [pc, #768]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	220c      	movs	r2, #12
 8005600:	4013      	ands	r3, r2
 8005602:	2b08      	cmp	r3, #8
 8005604:	d116      	bne.n	8005634 <HAL_RCC_OscConfig+0x64>
 8005606:	4bbd      	ldr	r3, [pc, #756]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	2380      	movs	r3, #128	@ 0x80
 800560c:	025b      	lsls	r3, r3, #9
 800560e:	401a      	ands	r2, r3
 8005610:	2380      	movs	r3, #128	@ 0x80
 8005612:	025b      	lsls	r3, r3, #9
 8005614:	429a      	cmp	r2, r3
 8005616:	d10d      	bne.n	8005634 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005618:	4bb8      	ldr	r3, [pc, #736]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	2380      	movs	r3, #128	@ 0x80
 800561e:	029b      	lsls	r3, r3, #10
 8005620:	4013      	ands	r3, r2
 8005622:	d100      	bne.n	8005626 <HAL_RCC_OscConfig+0x56>
 8005624:	e070      	b.n	8005708 <HAL_RCC_OscConfig+0x138>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d000      	beq.n	8005630 <HAL_RCC_OscConfig+0x60>
 800562e:	e06b      	b.n	8005708 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e2d8      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d107      	bne.n	800564c <HAL_RCC_OscConfig+0x7c>
 800563c:	4baf      	ldr	r3, [pc, #700]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	4bae      	ldr	r3, [pc, #696]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005642:	2180      	movs	r1, #128	@ 0x80
 8005644:	0249      	lsls	r1, r1, #9
 8005646:	430a      	orrs	r2, r1
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	e02f      	b.n	80056ac <HAL_RCC_OscConfig+0xdc>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10c      	bne.n	800566e <HAL_RCC_OscConfig+0x9e>
 8005654:	4ba9      	ldr	r3, [pc, #676]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	4ba8      	ldr	r3, [pc, #672]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 800565a:	49a9      	ldr	r1, [pc, #676]	@ (8005900 <HAL_RCC_OscConfig+0x330>)
 800565c:	400a      	ands	r2, r1
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	4ba6      	ldr	r3, [pc, #664]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	4ba5      	ldr	r3, [pc, #660]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005666:	49a7      	ldr	r1, [pc, #668]	@ (8005904 <HAL_RCC_OscConfig+0x334>)
 8005668:	400a      	ands	r2, r1
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e01e      	b.n	80056ac <HAL_RCC_OscConfig+0xdc>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	2b05      	cmp	r3, #5
 8005674:	d10e      	bne.n	8005694 <HAL_RCC_OscConfig+0xc4>
 8005676:	4ba1      	ldr	r3, [pc, #644]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	4ba0      	ldr	r3, [pc, #640]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 800567c:	2180      	movs	r1, #128	@ 0x80
 800567e:	02c9      	lsls	r1, r1, #11
 8005680:	430a      	orrs	r2, r1
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	4b9d      	ldr	r3, [pc, #628]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4b9c      	ldr	r3, [pc, #624]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 800568a:	2180      	movs	r1, #128	@ 0x80
 800568c:	0249      	lsls	r1, r1, #9
 800568e:	430a      	orrs	r2, r1
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	e00b      	b.n	80056ac <HAL_RCC_OscConfig+0xdc>
 8005694:	4b99      	ldr	r3, [pc, #612]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	4b98      	ldr	r3, [pc, #608]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 800569a:	4999      	ldr	r1, [pc, #612]	@ (8005900 <HAL_RCC_OscConfig+0x330>)
 800569c:	400a      	ands	r2, r1
 800569e:	601a      	str	r2, [r3, #0]
 80056a0:	4b96      	ldr	r3, [pc, #600]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	4b95      	ldr	r3, [pc, #596]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 80056a6:	4997      	ldr	r1, [pc, #604]	@ (8005904 <HAL_RCC_OscConfig+0x334>)
 80056a8:	400a      	ands	r2, r1
 80056aa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d014      	beq.n	80056de <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b4:	f7fe fdb6 	bl	8004224 <HAL_GetTick>
 80056b8:	0003      	movs	r3, r0
 80056ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056be:	f7fe fdb1 	bl	8004224 <HAL_GetTick>
 80056c2:	0002      	movs	r2, r0
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b64      	cmp	r3, #100	@ 0x64
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e28a      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056d0:	4b8a      	ldr	r3, [pc, #552]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	2380      	movs	r3, #128	@ 0x80
 80056d6:	029b      	lsls	r3, r3, #10
 80056d8:	4013      	ands	r3, r2
 80056da:	d0f0      	beq.n	80056be <HAL_RCC_OscConfig+0xee>
 80056dc:	e015      	b.n	800570a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056de:	f7fe fda1 	bl	8004224 <HAL_GetTick>
 80056e2:	0003      	movs	r3, r0
 80056e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056e6:	e008      	b.n	80056fa <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056e8:	f7fe fd9c 	bl	8004224 <HAL_GetTick>
 80056ec:	0002      	movs	r2, r0
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b64      	cmp	r3, #100	@ 0x64
 80056f4:	d901      	bls.n	80056fa <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e275      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056fa:	4b80      	ldr	r3, [pc, #512]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	2380      	movs	r3, #128	@ 0x80
 8005700:	029b      	lsls	r3, r3, #10
 8005702:	4013      	ands	r3, r2
 8005704:	d1f0      	bne.n	80056e8 <HAL_RCC_OscConfig+0x118>
 8005706:	e000      	b.n	800570a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005708:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2202      	movs	r2, #2
 8005710:	4013      	ands	r3, r2
 8005712:	d100      	bne.n	8005716 <HAL_RCC_OscConfig+0x146>
 8005714:	e069      	b.n	80057ea <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005716:	4b79      	ldr	r3, [pc, #484]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	220c      	movs	r2, #12
 800571c:	4013      	ands	r3, r2
 800571e:	d00b      	beq.n	8005738 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005720:	4b76      	ldr	r3, [pc, #472]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	220c      	movs	r2, #12
 8005726:	4013      	ands	r3, r2
 8005728:	2b08      	cmp	r3, #8
 800572a:	d11c      	bne.n	8005766 <HAL_RCC_OscConfig+0x196>
 800572c:	4b73      	ldr	r3, [pc, #460]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	2380      	movs	r3, #128	@ 0x80
 8005732:	025b      	lsls	r3, r3, #9
 8005734:	4013      	ands	r3, r2
 8005736:	d116      	bne.n	8005766 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005738:	4b70      	ldr	r3, [pc, #448]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2202      	movs	r2, #2
 800573e:	4013      	ands	r3, r2
 8005740:	d005      	beq.n	800574e <HAL_RCC_OscConfig+0x17e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d001      	beq.n	800574e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e24b      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800574e:	4b6b      	ldr	r3, [pc, #428]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	22f8      	movs	r2, #248	@ 0xf8
 8005754:	4393      	bics	r3, r2
 8005756:	0019      	movs	r1, r3
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	00da      	lsls	r2, r3, #3
 800575e:	4b67      	ldr	r3, [pc, #412]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005760:	430a      	orrs	r2, r1
 8005762:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005764:	e041      	b.n	80057ea <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d024      	beq.n	80057b8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800576e:	4b63      	ldr	r3, [pc, #396]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	4b62      	ldr	r3, [pc, #392]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005774:	2101      	movs	r1, #1
 8005776:	430a      	orrs	r2, r1
 8005778:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800577a:	f7fe fd53 	bl	8004224 <HAL_GetTick>
 800577e:	0003      	movs	r3, r0
 8005780:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005784:	f7fe fd4e 	bl	8004224 <HAL_GetTick>
 8005788:	0002      	movs	r2, r0
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e227      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005796:	4b59      	ldr	r3, [pc, #356]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2202      	movs	r2, #2
 800579c:	4013      	ands	r3, r2
 800579e:	d0f1      	beq.n	8005784 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057a0:	4b56      	ldr	r3, [pc, #344]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	22f8      	movs	r2, #248	@ 0xf8
 80057a6:	4393      	bics	r3, r2
 80057a8:	0019      	movs	r1, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	00da      	lsls	r2, r3, #3
 80057b0:	4b52      	ldr	r3, [pc, #328]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 80057b2:	430a      	orrs	r2, r1
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	e018      	b.n	80057ea <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057b8:	4b50      	ldr	r3, [pc, #320]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	4b4f      	ldr	r3, [pc, #316]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 80057be:	2101      	movs	r1, #1
 80057c0:	438a      	bics	r2, r1
 80057c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c4:	f7fe fd2e 	bl	8004224 <HAL_GetTick>
 80057c8:	0003      	movs	r3, r0
 80057ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057cc:	e008      	b.n	80057e0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057ce:	f7fe fd29 	bl	8004224 <HAL_GetTick>
 80057d2:	0002      	movs	r2, r0
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e202      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057e0:	4b46      	ldr	r3, [pc, #280]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2202      	movs	r2, #2
 80057e6:	4013      	ands	r3, r2
 80057e8:	d1f1      	bne.n	80057ce <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2208      	movs	r2, #8
 80057f0:	4013      	ands	r3, r2
 80057f2:	d036      	beq.n	8005862 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	69db      	ldr	r3, [r3, #28]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d019      	beq.n	8005830 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057fc:	4b3f      	ldr	r3, [pc, #252]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 80057fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005800:	4b3e      	ldr	r3, [pc, #248]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005802:	2101      	movs	r1, #1
 8005804:	430a      	orrs	r2, r1
 8005806:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005808:	f7fe fd0c 	bl	8004224 <HAL_GetTick>
 800580c:	0003      	movs	r3, r0
 800580e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005812:	f7fe fd07 	bl	8004224 <HAL_GetTick>
 8005816:	0002      	movs	r2, r0
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e1e0      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005824:	4b35      	ldr	r3, [pc, #212]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005828:	2202      	movs	r2, #2
 800582a:	4013      	ands	r3, r2
 800582c:	d0f1      	beq.n	8005812 <HAL_RCC_OscConfig+0x242>
 800582e:	e018      	b.n	8005862 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005830:	4b32      	ldr	r3, [pc, #200]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005832:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005834:	4b31      	ldr	r3, [pc, #196]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005836:	2101      	movs	r1, #1
 8005838:	438a      	bics	r2, r1
 800583a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800583c:	f7fe fcf2 	bl	8004224 <HAL_GetTick>
 8005840:	0003      	movs	r3, r0
 8005842:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005846:	f7fe fced 	bl	8004224 <HAL_GetTick>
 800584a:	0002      	movs	r2, r0
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e1c6      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005858:	4b28      	ldr	r3, [pc, #160]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	2202      	movs	r2, #2
 800585e:	4013      	ands	r3, r2
 8005860:	d1f1      	bne.n	8005846 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2204      	movs	r2, #4
 8005868:	4013      	ands	r3, r2
 800586a:	d100      	bne.n	800586e <HAL_RCC_OscConfig+0x29e>
 800586c:	e0b4      	b.n	80059d8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800586e:	201f      	movs	r0, #31
 8005870:	183b      	adds	r3, r7, r0
 8005872:	2200      	movs	r2, #0
 8005874:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005876:	4b21      	ldr	r3, [pc, #132]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005878:	69da      	ldr	r2, [r3, #28]
 800587a:	2380      	movs	r3, #128	@ 0x80
 800587c:	055b      	lsls	r3, r3, #21
 800587e:	4013      	ands	r3, r2
 8005880:	d110      	bne.n	80058a4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005882:	4b1e      	ldr	r3, [pc, #120]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005884:	69da      	ldr	r2, [r3, #28]
 8005886:	4b1d      	ldr	r3, [pc, #116]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005888:	2180      	movs	r1, #128	@ 0x80
 800588a:	0549      	lsls	r1, r1, #21
 800588c:	430a      	orrs	r2, r1
 800588e:	61da      	str	r2, [r3, #28]
 8005890:	4b1a      	ldr	r3, [pc, #104]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 8005892:	69da      	ldr	r2, [r3, #28]
 8005894:	2380      	movs	r3, #128	@ 0x80
 8005896:	055b      	lsls	r3, r3, #21
 8005898:	4013      	ands	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800589e:	183b      	adds	r3, r7, r0
 80058a0:	2201      	movs	r2, #1
 80058a2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a4:	4b18      	ldr	r3, [pc, #96]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	2380      	movs	r3, #128	@ 0x80
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	4013      	ands	r3, r2
 80058ae:	d11a      	bne.n	80058e6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058b0:	4b15      	ldr	r3, [pc, #84]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	4b14      	ldr	r3, [pc, #80]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 80058b6:	2180      	movs	r1, #128	@ 0x80
 80058b8:	0049      	lsls	r1, r1, #1
 80058ba:	430a      	orrs	r2, r1
 80058bc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058be:	f7fe fcb1 	bl	8004224 <HAL_GetTick>
 80058c2:	0003      	movs	r3, r0
 80058c4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058c8:	f7fe fcac 	bl	8004224 <HAL_GetTick>
 80058cc:	0002      	movs	r2, r0
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b64      	cmp	r3, #100	@ 0x64
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e185      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058da:	4b0b      	ldr	r3, [pc, #44]	@ (8005908 <HAL_RCC_OscConfig+0x338>)
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	2380      	movs	r3, #128	@ 0x80
 80058e0:	005b      	lsls	r3, r3, #1
 80058e2:	4013      	ands	r3, r2
 80058e4:	d0f0      	beq.n	80058c8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d10e      	bne.n	800590c <HAL_RCC_OscConfig+0x33c>
 80058ee:	4b03      	ldr	r3, [pc, #12]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 80058f0:	6a1a      	ldr	r2, [r3, #32]
 80058f2:	4b02      	ldr	r3, [pc, #8]	@ (80058fc <HAL_RCC_OscConfig+0x32c>)
 80058f4:	2101      	movs	r1, #1
 80058f6:	430a      	orrs	r2, r1
 80058f8:	621a      	str	r2, [r3, #32]
 80058fa:	e035      	b.n	8005968 <HAL_RCC_OscConfig+0x398>
 80058fc:	40021000 	.word	0x40021000
 8005900:	fffeffff 	.word	0xfffeffff
 8005904:	fffbffff 	.word	0xfffbffff
 8005908:	40007000 	.word	0x40007000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10c      	bne.n	800592e <HAL_RCC_OscConfig+0x35e>
 8005914:	4bb6      	ldr	r3, [pc, #728]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005916:	6a1a      	ldr	r2, [r3, #32]
 8005918:	4bb5      	ldr	r3, [pc, #724]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 800591a:	2101      	movs	r1, #1
 800591c:	438a      	bics	r2, r1
 800591e:	621a      	str	r2, [r3, #32]
 8005920:	4bb3      	ldr	r3, [pc, #716]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005922:	6a1a      	ldr	r2, [r3, #32]
 8005924:	4bb2      	ldr	r3, [pc, #712]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005926:	2104      	movs	r1, #4
 8005928:	438a      	bics	r2, r1
 800592a:	621a      	str	r2, [r3, #32]
 800592c:	e01c      	b.n	8005968 <HAL_RCC_OscConfig+0x398>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	2b05      	cmp	r3, #5
 8005934:	d10c      	bne.n	8005950 <HAL_RCC_OscConfig+0x380>
 8005936:	4bae      	ldr	r3, [pc, #696]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005938:	6a1a      	ldr	r2, [r3, #32]
 800593a:	4bad      	ldr	r3, [pc, #692]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 800593c:	2104      	movs	r1, #4
 800593e:	430a      	orrs	r2, r1
 8005940:	621a      	str	r2, [r3, #32]
 8005942:	4bab      	ldr	r3, [pc, #684]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005944:	6a1a      	ldr	r2, [r3, #32]
 8005946:	4baa      	ldr	r3, [pc, #680]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005948:	2101      	movs	r1, #1
 800594a:	430a      	orrs	r2, r1
 800594c:	621a      	str	r2, [r3, #32]
 800594e:	e00b      	b.n	8005968 <HAL_RCC_OscConfig+0x398>
 8005950:	4ba7      	ldr	r3, [pc, #668]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005952:	6a1a      	ldr	r2, [r3, #32]
 8005954:	4ba6      	ldr	r3, [pc, #664]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005956:	2101      	movs	r1, #1
 8005958:	438a      	bics	r2, r1
 800595a:	621a      	str	r2, [r3, #32]
 800595c:	4ba4      	ldr	r3, [pc, #656]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 800595e:	6a1a      	ldr	r2, [r3, #32]
 8005960:	4ba3      	ldr	r3, [pc, #652]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005962:	2104      	movs	r1, #4
 8005964:	438a      	bics	r2, r1
 8005966:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d014      	beq.n	800599a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005970:	f7fe fc58 	bl	8004224 <HAL_GetTick>
 8005974:	0003      	movs	r3, r0
 8005976:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005978:	e009      	b.n	800598e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800597a:	f7fe fc53 	bl	8004224 <HAL_GetTick>
 800597e:	0002      	movs	r2, r0
 8005980:	69bb      	ldr	r3, [r7, #24]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	4a9b      	ldr	r2, [pc, #620]	@ (8005bf4 <HAL_RCC_OscConfig+0x624>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d901      	bls.n	800598e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e12b      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800598e:	4b98      	ldr	r3, [pc, #608]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	2202      	movs	r2, #2
 8005994:	4013      	ands	r3, r2
 8005996:	d0f0      	beq.n	800597a <HAL_RCC_OscConfig+0x3aa>
 8005998:	e013      	b.n	80059c2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800599a:	f7fe fc43 	bl	8004224 <HAL_GetTick>
 800599e:	0003      	movs	r3, r0
 80059a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059a2:	e009      	b.n	80059b8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059a4:	f7fe fc3e 	bl	8004224 <HAL_GetTick>
 80059a8:	0002      	movs	r2, r0
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	4a91      	ldr	r2, [pc, #580]	@ (8005bf4 <HAL_RCC_OscConfig+0x624>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d901      	bls.n	80059b8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e116      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059b8:	4b8d      	ldr	r3, [pc, #564]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	2202      	movs	r2, #2
 80059be:	4013      	ands	r3, r2
 80059c0:	d1f0      	bne.n	80059a4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80059c2:	231f      	movs	r3, #31
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d105      	bne.n	80059d8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059cc:	4b88      	ldr	r3, [pc, #544]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 80059ce:	69da      	ldr	r2, [r3, #28]
 80059d0:	4b87      	ldr	r3, [pc, #540]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 80059d2:	4989      	ldr	r1, [pc, #548]	@ (8005bf8 <HAL_RCC_OscConfig+0x628>)
 80059d4:	400a      	ands	r2, r1
 80059d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2210      	movs	r2, #16
 80059de:	4013      	ands	r3, r2
 80059e0:	d063      	beq.n	8005aaa <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d12a      	bne.n	8005a40 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80059ea:	4b81      	ldr	r3, [pc, #516]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 80059ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059ee:	4b80      	ldr	r3, [pc, #512]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 80059f0:	2104      	movs	r1, #4
 80059f2:	430a      	orrs	r2, r1
 80059f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80059f6:	4b7e      	ldr	r3, [pc, #504]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 80059f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059fa:	4b7d      	ldr	r3, [pc, #500]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 80059fc:	2101      	movs	r1, #1
 80059fe:	430a      	orrs	r2, r1
 8005a00:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a02:	f7fe fc0f 	bl	8004224 <HAL_GetTick>
 8005a06:	0003      	movs	r3, r0
 8005a08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005a0c:	f7fe fc0a 	bl	8004224 <HAL_GetTick>
 8005a10:	0002      	movs	r2, r0
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e0e3      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005a1e:	4b74      	ldr	r3, [pc, #464]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a22:	2202      	movs	r2, #2
 8005a24:	4013      	ands	r3, r2
 8005a26:	d0f1      	beq.n	8005a0c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005a28:	4b71      	ldr	r3, [pc, #452]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a2c:	22f8      	movs	r2, #248	@ 0xf8
 8005a2e:	4393      	bics	r3, r2
 8005a30:	0019      	movs	r1, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	00da      	lsls	r2, r3, #3
 8005a38:	4b6d      	ldr	r3, [pc, #436]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a3e:	e034      	b.n	8005aaa <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	3305      	adds	r3, #5
 8005a46:	d111      	bne.n	8005a6c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005a48:	4b69      	ldr	r3, [pc, #420]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005a4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a4c:	4b68      	ldr	r3, [pc, #416]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005a4e:	2104      	movs	r1, #4
 8005a50:	438a      	bics	r2, r1
 8005a52:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005a54:	4b66      	ldr	r3, [pc, #408]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a58:	22f8      	movs	r2, #248	@ 0xf8
 8005a5a:	4393      	bics	r3, r2
 8005a5c:	0019      	movs	r1, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	00da      	lsls	r2, r3, #3
 8005a64:	4b62      	ldr	r3, [pc, #392]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005a66:	430a      	orrs	r2, r1
 8005a68:	635a      	str	r2, [r3, #52]	@ 0x34
 8005a6a:	e01e      	b.n	8005aaa <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005a6c:	4b60      	ldr	r3, [pc, #384]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005a6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a70:	4b5f      	ldr	r3, [pc, #380]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005a72:	2104      	movs	r1, #4
 8005a74:	430a      	orrs	r2, r1
 8005a76:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005a78:	4b5d      	ldr	r3, [pc, #372]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005a7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a7c:	4b5c      	ldr	r3, [pc, #368]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005a7e:	2101      	movs	r1, #1
 8005a80:	438a      	bics	r2, r1
 8005a82:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a84:	f7fe fbce 	bl	8004224 <HAL_GetTick>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005a8e:	f7fe fbc9 	bl	8004224 <HAL_GetTick>
 8005a92:	0002      	movs	r2, r0
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e0a2      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005aa0:	4b53      	ldr	r3, [pc, #332]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	d1f1      	bne.n	8005a8e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d100      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x4e4>
 8005ab2:	e097      	b.n	8005be4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ab4:	4b4e      	ldr	r3, [pc, #312]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	220c      	movs	r2, #12
 8005aba:	4013      	ands	r3, r2
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d100      	bne.n	8005ac2 <HAL_RCC_OscConfig+0x4f2>
 8005ac0:	e06b      	b.n	8005b9a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d14c      	bne.n	8005b64 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aca:	4b49      	ldr	r3, [pc, #292]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	4b48      	ldr	r3, [pc, #288]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005ad0:	494a      	ldr	r1, [pc, #296]	@ (8005bfc <HAL_RCC_OscConfig+0x62c>)
 8005ad2:	400a      	ands	r2, r1
 8005ad4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad6:	f7fe fba5 	bl	8004224 <HAL_GetTick>
 8005ada:	0003      	movs	r3, r0
 8005adc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ae0:	f7fe fba0 	bl	8004224 <HAL_GetTick>
 8005ae4:	0002      	movs	r2, r0
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e079      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005af2:	4b3f      	ldr	r3, [pc, #252]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	2380      	movs	r3, #128	@ 0x80
 8005af8:	049b      	lsls	r3, r3, #18
 8005afa:	4013      	ands	r3, r2
 8005afc:	d1f0      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005afe:	4b3c      	ldr	r3, [pc, #240]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b02:	220f      	movs	r2, #15
 8005b04:	4393      	bics	r3, r2
 8005b06:	0019      	movs	r1, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0c:	4b38      	ldr	r3, [pc, #224]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b12:	4b37      	ldr	r3, [pc, #220]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	4a3a      	ldr	r2, [pc, #232]	@ (8005c00 <HAL_RCC_OscConfig+0x630>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	0019      	movs	r1, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b24:	431a      	orrs	r2, r3
 8005b26:	4b32      	ldr	r3, [pc, #200]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b2c:	4b30      	ldr	r3, [pc, #192]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	4b2f      	ldr	r3, [pc, #188]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005b32:	2180      	movs	r1, #128	@ 0x80
 8005b34:	0449      	lsls	r1, r1, #17
 8005b36:	430a      	orrs	r2, r1
 8005b38:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b3a:	f7fe fb73 	bl	8004224 <HAL_GetTick>
 8005b3e:	0003      	movs	r3, r0
 8005b40:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b44:	f7fe fb6e 	bl	8004224 <HAL_GetTick>
 8005b48:	0002      	movs	r2, r0
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e047      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b56:	4b26      	ldr	r3, [pc, #152]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	2380      	movs	r3, #128	@ 0x80
 8005b5c:	049b      	lsls	r3, r3, #18
 8005b5e:	4013      	ands	r3, r2
 8005b60:	d0f0      	beq.n	8005b44 <HAL_RCC_OscConfig+0x574>
 8005b62:	e03f      	b.n	8005be4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b64:	4b22      	ldr	r3, [pc, #136]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	4b21      	ldr	r3, [pc, #132]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005b6a:	4924      	ldr	r1, [pc, #144]	@ (8005bfc <HAL_RCC_OscConfig+0x62c>)
 8005b6c:	400a      	ands	r2, r1
 8005b6e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b70:	f7fe fb58 	bl	8004224 <HAL_GetTick>
 8005b74:	0003      	movs	r3, r0
 8005b76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b7a:	f7fe fb53 	bl	8004224 <HAL_GetTick>
 8005b7e:	0002      	movs	r2, r0
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e02c      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b8c:	4b18      	ldr	r3, [pc, #96]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	2380      	movs	r3, #128	@ 0x80
 8005b92:	049b      	lsls	r3, r3, #18
 8005b94:	4013      	ands	r3, r2
 8005b96:	d1f0      	bne.n	8005b7a <HAL_RCC_OscConfig+0x5aa>
 8005b98:	e024      	b.n	8005be4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e01f      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005ba6:	4b12      	ldr	r3, [pc, #72]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005bac:	4b10      	ldr	r3, [pc, #64]	@ (8005bf0 <HAL_RCC_OscConfig+0x620>)
 8005bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	2380      	movs	r3, #128	@ 0x80
 8005bb6:	025b      	lsls	r3, r3, #9
 8005bb8:	401a      	ands	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d10e      	bne.n	8005be0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	220f      	movs	r2, #15
 8005bc6:	401a      	ands	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d107      	bne.n	8005be0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	23f0      	movs	r3, #240	@ 0xf0
 8005bd4:	039b      	lsls	r3, r3, #14
 8005bd6:	401a      	ands	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d001      	beq.n	8005be4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e000      	b.n	8005be6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	0018      	movs	r0, r3
 8005be8:	46bd      	mov	sp, r7
 8005bea:	b008      	add	sp, #32
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	46c0      	nop			@ (mov r8, r8)
 8005bf0:	40021000 	.word	0x40021000
 8005bf4:	00001388 	.word	0x00001388
 8005bf8:	efffffff 	.word	0xefffffff
 8005bfc:	feffffff 	.word	0xfeffffff
 8005c00:	ffc2ffff 	.word	0xffc2ffff

08005c04 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e0b3      	b.n	8005d80 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c18:	4b5b      	ldr	r3, [pc, #364]	@ (8005d88 <HAL_RCC_ClockConfig+0x184>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	4013      	ands	r3, r2
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d911      	bls.n	8005c4a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c26:	4b58      	ldr	r3, [pc, #352]	@ (8005d88 <HAL_RCC_ClockConfig+0x184>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	4393      	bics	r3, r2
 8005c2e:	0019      	movs	r1, r3
 8005c30:	4b55      	ldr	r3, [pc, #340]	@ (8005d88 <HAL_RCC_ClockConfig+0x184>)
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c38:	4b53      	ldr	r3, [pc, #332]	@ (8005d88 <HAL_RCC_ClockConfig+0x184>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	4013      	ands	r3, r2
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d001      	beq.n	8005c4a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e09a      	b.n	8005d80 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	4013      	ands	r3, r2
 8005c52:	d015      	beq.n	8005c80 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2204      	movs	r2, #4
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	d006      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005c5e:	4b4b      	ldr	r3, [pc, #300]	@ (8005d8c <HAL_RCC_ClockConfig+0x188>)
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	4b4a      	ldr	r3, [pc, #296]	@ (8005d8c <HAL_RCC_ClockConfig+0x188>)
 8005c64:	21e0      	movs	r1, #224	@ 0xe0
 8005c66:	00c9      	lsls	r1, r1, #3
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c6c:	4b47      	ldr	r3, [pc, #284]	@ (8005d8c <HAL_RCC_ClockConfig+0x188>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	22f0      	movs	r2, #240	@ 0xf0
 8005c72:	4393      	bics	r3, r2
 8005c74:	0019      	movs	r1, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689a      	ldr	r2, [r3, #8]
 8005c7a:	4b44      	ldr	r3, [pc, #272]	@ (8005d8c <HAL_RCC_ClockConfig+0x188>)
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2201      	movs	r2, #1
 8005c86:	4013      	ands	r3, r2
 8005c88:	d040      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d107      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c92:	4b3e      	ldr	r3, [pc, #248]	@ (8005d8c <HAL_RCC_ClockConfig+0x188>)
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	2380      	movs	r3, #128	@ 0x80
 8005c98:	029b      	lsls	r3, r3, #10
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	d114      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e06e      	b.n	8005d80 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d107      	bne.n	8005cba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005caa:	4b38      	ldr	r3, [pc, #224]	@ (8005d8c <HAL_RCC_ClockConfig+0x188>)
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	2380      	movs	r3, #128	@ 0x80
 8005cb0:	049b      	lsls	r3, r3, #18
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	d108      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e062      	b.n	8005d80 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cba:	4b34      	ldr	r3, [pc, #208]	@ (8005d8c <HAL_RCC_ClockConfig+0x188>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	d101      	bne.n	8005cc8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e05b      	b.n	8005d80 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cc8:	4b30      	ldr	r3, [pc, #192]	@ (8005d8c <HAL_RCC_ClockConfig+0x188>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	2203      	movs	r2, #3
 8005cce:	4393      	bics	r3, r2
 8005cd0:	0019      	movs	r1, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8005d8c <HAL_RCC_ClockConfig+0x188>)
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cdc:	f7fe faa2 	bl	8004224 <HAL_GetTick>
 8005ce0:	0003      	movs	r3, r0
 8005ce2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ce4:	e009      	b.n	8005cfa <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ce6:	f7fe fa9d 	bl	8004224 <HAL_GetTick>
 8005cea:	0002      	movs	r2, r0
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	4a27      	ldr	r2, [pc, #156]	@ (8005d90 <HAL_RCC_ClockConfig+0x18c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d901      	bls.n	8005cfa <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e042      	b.n	8005d80 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cfa:	4b24      	ldr	r3, [pc, #144]	@ (8005d8c <HAL_RCC_ClockConfig+0x188>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	220c      	movs	r2, #12
 8005d00:	401a      	ands	r2, r3
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d1ec      	bne.n	8005ce6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8005d88 <HAL_RCC_ClockConfig+0x184>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2201      	movs	r2, #1
 8005d12:	4013      	ands	r3, r2
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d211      	bcs.n	8005d3e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8005d88 <HAL_RCC_ClockConfig+0x184>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	4393      	bics	r3, r2
 8005d22:	0019      	movs	r1, r3
 8005d24:	4b18      	ldr	r3, [pc, #96]	@ (8005d88 <HAL_RCC_ClockConfig+0x184>)
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d2c:	4b16      	ldr	r3, [pc, #88]	@ (8005d88 <HAL_RCC_ClockConfig+0x184>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2201      	movs	r2, #1
 8005d32:	4013      	ands	r3, r2
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d001      	beq.n	8005d3e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e020      	b.n	8005d80 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2204      	movs	r2, #4
 8005d44:	4013      	ands	r3, r2
 8005d46:	d009      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005d48:	4b10      	ldr	r3, [pc, #64]	@ (8005d8c <HAL_RCC_ClockConfig+0x188>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	4a11      	ldr	r2, [pc, #68]	@ (8005d94 <HAL_RCC_ClockConfig+0x190>)
 8005d4e:	4013      	ands	r3, r2
 8005d50:	0019      	movs	r1, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	4b0d      	ldr	r3, [pc, #52]	@ (8005d8c <HAL_RCC_ClockConfig+0x188>)
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005d5c:	f000 f820 	bl	8005da0 <HAL_RCC_GetSysClockFreq>
 8005d60:	0001      	movs	r1, r0
 8005d62:	4b0a      	ldr	r3, [pc, #40]	@ (8005d8c <HAL_RCC_ClockConfig+0x188>)
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	091b      	lsrs	r3, r3, #4
 8005d68:	220f      	movs	r2, #15
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8005d98 <HAL_RCC_ClockConfig+0x194>)
 8005d6e:	5cd3      	ldrb	r3, [r2, r3]
 8005d70:	000a      	movs	r2, r1
 8005d72:	40da      	lsrs	r2, r3
 8005d74:	4b09      	ldr	r3, [pc, #36]	@ (8005d9c <HAL_RCC_ClockConfig+0x198>)
 8005d76:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005d78:	2000      	movs	r0, #0
 8005d7a:	f7fe fa0d 	bl	8004198 <HAL_InitTick>
  
  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	0018      	movs	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	b004      	add	sp, #16
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40022000 	.word	0x40022000
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	00001388 	.word	0x00001388
 8005d94:	fffff8ff 	.word	0xfffff8ff
 8005d98:	0800d2dc 	.word	0x0800d2dc
 8005d9c:	20000018 	.word	0x20000018

08005da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	2300      	movs	r3, #0
 8005dac:	60bb      	str	r3, [r7, #8]
 8005dae:	2300      	movs	r3, #0
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	2300      	movs	r3, #0
 8005db4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005dba:	4b20      	ldr	r3, [pc, #128]	@ (8005e3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	220c      	movs	r2, #12
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	2b04      	cmp	r3, #4
 8005dc8:	d002      	beq.n	8005dd0 <HAL_RCC_GetSysClockFreq+0x30>
 8005dca:	2b08      	cmp	r3, #8
 8005dcc:	d003      	beq.n	8005dd6 <HAL_RCC_GetSysClockFreq+0x36>
 8005dce:	e02c      	b.n	8005e2a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005dd2:	613b      	str	r3, [r7, #16]
      break;
 8005dd4:	e02c      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	0c9b      	lsrs	r3, r3, #18
 8005dda:	220f      	movs	r2, #15
 8005ddc:	4013      	ands	r3, r2
 8005dde:	4a19      	ldr	r2, [pc, #100]	@ (8005e44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005de0:	5cd3      	ldrb	r3, [r2, r3]
 8005de2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005de4:	4b15      	ldr	r3, [pc, #84]	@ (8005e3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de8:	220f      	movs	r2, #15
 8005dea:	4013      	ands	r3, r2
 8005dec:	4a16      	ldr	r2, [pc, #88]	@ (8005e48 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005dee:	5cd3      	ldrb	r3, [r2, r3]
 8005df0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	2380      	movs	r3, #128	@ 0x80
 8005df6:	025b      	lsls	r3, r3, #9
 8005df8:	4013      	ands	r3, r2
 8005dfa:	d009      	beq.n	8005e10 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005dfc:	68b9      	ldr	r1, [r7, #8]
 8005dfe:	4810      	ldr	r0, [pc, #64]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005e00:	f7fa f9a8 	bl	8000154 <__udivsi3>
 8005e04:	0003      	movs	r3, r0
 8005e06:	001a      	movs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4353      	muls	r3, r2
 8005e0c:	617b      	str	r3, [r7, #20]
 8005e0e:	e009      	b.n	8005e24 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005e10:	6879      	ldr	r1, [r7, #4]
 8005e12:	000a      	movs	r2, r1
 8005e14:	0152      	lsls	r2, r2, #5
 8005e16:	1a52      	subs	r2, r2, r1
 8005e18:	0193      	lsls	r3, r2, #6
 8005e1a:	1a9b      	subs	r3, r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	185b      	adds	r3, r3, r1
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	613b      	str	r3, [r7, #16]
      break;
 8005e28:	e002      	b.n	8005e30 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e2a:	4b05      	ldr	r3, [pc, #20]	@ (8005e40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005e2c:	613b      	str	r3, [r7, #16]
      break;
 8005e2e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005e30:	693b      	ldr	r3, [r7, #16]
}
 8005e32:	0018      	movs	r0, r3
 8005e34:	46bd      	mov	sp, r7
 8005e36:	b006      	add	sp, #24
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	46c0      	nop			@ (mov r8, r8)
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	007a1200 	.word	0x007a1200
 8005e44:	0800d2f4 	.word	0x0800d2f4
 8005e48:	0800d304 	.word	0x0800d304

08005e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e50:	4b02      	ldr	r3, [pc, #8]	@ (8005e5c <HAL_RCC_GetHCLKFreq+0x10>)
 8005e52:	681b      	ldr	r3, [r3, #0]
}
 8005e54:	0018      	movs	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	46c0      	nop			@ (mov r8, r8)
 8005e5c:	20000018 	.word	0x20000018

08005e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005e64:	f7ff fff2 	bl	8005e4c <HAL_RCC_GetHCLKFreq>
 8005e68:	0001      	movs	r1, r0
 8005e6a:	4b06      	ldr	r3, [pc, #24]	@ (8005e84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	0a1b      	lsrs	r3, r3, #8
 8005e70:	2207      	movs	r2, #7
 8005e72:	4013      	ands	r3, r2
 8005e74:	4a04      	ldr	r2, [pc, #16]	@ (8005e88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e76:	5cd3      	ldrb	r3, [r2, r3]
 8005e78:	40d9      	lsrs	r1, r3
 8005e7a:	000b      	movs	r3, r1
}    
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	46c0      	nop			@ (mov r8, r8)
 8005e84:	40021000 	.word	0x40021000
 8005e88:	0800d2ec 	.word	0x0800d2ec

08005e8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	2380      	movs	r3, #128	@ 0x80
 8005ea2:	025b      	lsls	r3, r3, #9
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d100      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005ea8:	e08e      	b.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005eaa:	2017      	movs	r0, #23
 8005eac:	183b      	adds	r3, r7, r0
 8005eae:	2200      	movs	r2, #0
 8005eb0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eb2:	4b57      	ldr	r3, [pc, #348]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005eb4:	69da      	ldr	r2, [r3, #28]
 8005eb6:	2380      	movs	r3, #128	@ 0x80
 8005eb8:	055b      	lsls	r3, r3, #21
 8005eba:	4013      	ands	r3, r2
 8005ebc:	d110      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ebe:	4b54      	ldr	r3, [pc, #336]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ec0:	69da      	ldr	r2, [r3, #28]
 8005ec2:	4b53      	ldr	r3, [pc, #332]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ec4:	2180      	movs	r1, #128	@ 0x80
 8005ec6:	0549      	lsls	r1, r1, #21
 8005ec8:	430a      	orrs	r2, r1
 8005eca:	61da      	str	r2, [r3, #28]
 8005ecc:	4b50      	ldr	r3, [pc, #320]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ece:	69da      	ldr	r2, [r3, #28]
 8005ed0:	2380      	movs	r3, #128	@ 0x80
 8005ed2:	055b      	lsls	r3, r3, #21
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	60bb      	str	r3, [r7, #8]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eda:	183b      	adds	r3, r7, r0
 8005edc:	2201      	movs	r2, #1
 8005ede:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	2380      	movs	r3, #128	@ 0x80
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d11a      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eec:	4b49      	ldr	r3, [pc, #292]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	4b48      	ldr	r3, [pc, #288]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005ef2:	2180      	movs	r1, #128	@ 0x80
 8005ef4:	0049      	lsls	r1, r1, #1
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005efa:	f7fe f993 	bl	8004224 <HAL_GetTick>
 8005efe:	0003      	movs	r3, r0
 8005f00:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f02:	e008      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f04:	f7fe f98e 	bl	8004224 <HAL_GetTick>
 8005f08:	0002      	movs	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b64      	cmp	r3, #100	@ 0x64
 8005f10:	d901      	bls.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e077      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f16:	4b3f      	ldr	r3, [pc, #252]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	2380      	movs	r3, #128	@ 0x80
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	4013      	ands	r3, r2
 8005f20:	d0f0      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f22:	4b3b      	ldr	r3, [pc, #236]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f24:	6a1a      	ldr	r2, [r3, #32]
 8005f26:	23c0      	movs	r3, #192	@ 0xc0
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d034      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	23c0      	movs	r3, #192	@ 0xc0
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d02c      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f44:	4b32      	ldr	r3, [pc, #200]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	4a33      	ldr	r2, [pc, #204]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f4e:	4b30      	ldr	r3, [pc, #192]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f50:	6a1a      	ldr	r2, [r3, #32]
 8005f52:	4b2f      	ldr	r3, [pc, #188]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f54:	2180      	movs	r1, #128	@ 0x80
 8005f56:	0249      	lsls	r1, r1, #9
 8005f58:	430a      	orrs	r2, r1
 8005f5a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f5e:	6a1a      	ldr	r2, [r3, #32]
 8005f60:	4b2b      	ldr	r3, [pc, #172]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f62:	492e      	ldr	r1, [pc, #184]	@ (800601c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005f64:	400a      	ands	r2, r1
 8005f66:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005f68:	4b29      	ldr	r3, [pc, #164]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	4013      	ands	r3, r2
 8005f74:	d013      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f76:	f7fe f955 	bl	8004224 <HAL_GetTick>
 8005f7a:	0003      	movs	r3, r0
 8005f7c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f7e:	e009      	b.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f80:	f7fe f950 	bl	8004224 <HAL_GetTick>
 8005f84:	0002      	movs	r2, r0
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	4a25      	ldr	r2, [pc, #148]	@ (8006020 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e038      	b.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f94:	4b1e      	ldr	r3, [pc, #120]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	2202      	movs	r2, #2
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	d0f0      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8006018 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	0019      	movs	r1, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	4b18      	ldr	r3, [pc, #96]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005fb2:	2317      	movs	r3, #23
 8005fb4:	18fb      	adds	r3, r7, r3
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d105      	bne.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fbc:	4b14      	ldr	r3, [pc, #80]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	4b13      	ldr	r3, [pc, #76]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005fc2:	4918      	ldr	r1, [pc, #96]	@ (8006024 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005fc4:	400a      	ands	r2, r1
 8005fc6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	4013      	ands	r3, r2
 8005fd0:	d009      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd6:	2203      	movs	r2, #3
 8005fd8:	4393      	bics	r3, r2
 8005fda:	0019      	movs	r1, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005fe2:	430a      	orrs	r2, r1
 8005fe4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2220      	movs	r2, #32
 8005fec:	4013      	ands	r3, r2
 8005fee:	d009      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ff0:	4b07      	ldr	r3, [pc, #28]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff4:	2210      	movs	r2, #16
 8005ff6:	4393      	bics	r3, r2
 8005ff8:	0019      	movs	r1, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	4b04      	ldr	r3, [pc, #16]	@ (8006010 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006000:	430a      	orrs	r2, r1
 8006002:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	0018      	movs	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	b006      	add	sp, #24
 800600c:	bd80      	pop	{r7, pc}
 800600e:	46c0      	nop			@ (mov r8, r8)
 8006010:	40021000 	.word	0x40021000
 8006014:	40007000 	.word	0x40007000
 8006018:	fffffcff 	.word	0xfffffcff
 800601c:	fffeffff 	.word	0xfffeffff
 8006020:	00001388 	.word	0x00001388
 8006024:	efffffff 	.word	0xefffffff

08006028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d101      	bne.n	800603a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e042      	b.n	80060c0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	223d      	movs	r2, #61	@ 0x3d
 800603e:	5c9b      	ldrb	r3, [r3, r2]
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d107      	bne.n	8006056 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	223c      	movs	r2, #60	@ 0x3c
 800604a:	2100      	movs	r1, #0
 800604c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	0018      	movs	r0, r3
 8006052:	f7fd fe7b 	bl	8003d4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	223d      	movs	r2, #61	@ 0x3d
 800605a:	2102      	movs	r1, #2
 800605c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	3304      	adds	r3, #4
 8006066:	0019      	movs	r1, r3
 8006068:	0010      	movs	r0, r2
 800606a:	f000 fd93 	bl	8006b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2246      	movs	r2, #70	@ 0x46
 8006072:	2101      	movs	r1, #1
 8006074:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	223e      	movs	r2, #62	@ 0x3e
 800607a:	2101      	movs	r1, #1
 800607c:	5499      	strb	r1, [r3, r2]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	223f      	movs	r2, #63	@ 0x3f
 8006082:	2101      	movs	r1, #1
 8006084:	5499      	strb	r1, [r3, r2]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2240      	movs	r2, #64	@ 0x40
 800608a:	2101      	movs	r1, #1
 800608c:	5499      	strb	r1, [r3, r2]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2241      	movs	r2, #65	@ 0x41
 8006092:	2101      	movs	r1, #1
 8006094:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2242      	movs	r2, #66	@ 0x42
 800609a:	2101      	movs	r1, #1
 800609c:	5499      	strb	r1, [r3, r2]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2243      	movs	r2, #67	@ 0x43
 80060a2:	2101      	movs	r1, #1
 80060a4:	5499      	strb	r1, [r3, r2]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2244      	movs	r2, #68	@ 0x44
 80060aa:	2101      	movs	r1, #1
 80060ac:	5499      	strb	r1, [r3, r2]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2245      	movs	r2, #69	@ 0x45
 80060b2:	2101      	movs	r1, #1
 80060b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	223d      	movs	r2, #61	@ 0x3d
 80060ba:	2101      	movs	r1, #1
 80060bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	0018      	movs	r0, r3
 80060c2:	46bd      	mov	sp, r7
 80060c4:	b002      	add	sp, #8
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e042      	b.n	8006160 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	223d      	movs	r2, #61	@ 0x3d
 80060de:	5c9b      	ldrb	r3, [r3, r2]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d107      	bne.n	80060f6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	223c      	movs	r2, #60	@ 0x3c
 80060ea:	2100      	movs	r1, #0
 80060ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	0018      	movs	r0, r3
 80060f2:	f000 f839 	bl	8006168 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	223d      	movs	r2, #61	@ 0x3d
 80060fa:	2102      	movs	r1, #2
 80060fc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	3304      	adds	r3, #4
 8006106:	0019      	movs	r1, r3
 8006108:	0010      	movs	r0, r2
 800610a:	f000 fd43 	bl	8006b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2246      	movs	r2, #70	@ 0x46
 8006112:	2101      	movs	r1, #1
 8006114:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	223e      	movs	r2, #62	@ 0x3e
 800611a:	2101      	movs	r1, #1
 800611c:	5499      	strb	r1, [r3, r2]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	223f      	movs	r2, #63	@ 0x3f
 8006122:	2101      	movs	r1, #1
 8006124:	5499      	strb	r1, [r3, r2]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2240      	movs	r2, #64	@ 0x40
 800612a:	2101      	movs	r1, #1
 800612c:	5499      	strb	r1, [r3, r2]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2241      	movs	r2, #65	@ 0x41
 8006132:	2101      	movs	r1, #1
 8006134:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2242      	movs	r2, #66	@ 0x42
 800613a:	2101      	movs	r1, #1
 800613c:	5499      	strb	r1, [r3, r2]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2243      	movs	r2, #67	@ 0x43
 8006142:	2101      	movs	r1, #1
 8006144:	5499      	strb	r1, [r3, r2]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2244      	movs	r2, #68	@ 0x44
 800614a:	2101      	movs	r1, #1
 800614c:	5499      	strb	r1, [r3, r2]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2245      	movs	r2, #69	@ 0x45
 8006152:	2101      	movs	r1, #1
 8006154:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	223d      	movs	r2, #61	@ 0x3d
 800615a:	2101      	movs	r1, #1
 800615c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	0018      	movs	r0, r3
 8006162:	46bd      	mov	sp, r7
 8006164:	b002      	add	sp, #8
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006170:	46c0      	nop			@ (mov r8, r8)
 8006172:	46bd      	mov	sp, r7
 8006174:	b002      	add	sp, #8
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b086      	sub	sp, #24
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	001a      	movs	r2, r3
 8006186:	1cbb      	adds	r3, r7, #2
 8006188:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800618a:	2317      	movs	r3, #23
 800618c:	18fb      	adds	r3, r7, r3
 800618e:	2200      	movs	r2, #0
 8006190:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d108      	bne.n	80061aa <HAL_TIM_PWM_Start_DMA+0x32>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	223e      	movs	r2, #62	@ 0x3e
 800619c:	5c9b      	ldrb	r3, [r3, r2]
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	3b02      	subs	r3, #2
 80061a2:	425a      	negs	r2, r3
 80061a4:	4153      	adcs	r3, r2
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	e01f      	b.n	80061ea <HAL_TIM_PWM_Start_DMA+0x72>
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d108      	bne.n	80061c2 <HAL_TIM_PWM_Start_DMA+0x4a>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	223f      	movs	r2, #63	@ 0x3f
 80061b4:	5c9b      	ldrb	r3, [r3, r2]
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	3b02      	subs	r3, #2
 80061ba:	425a      	negs	r2, r3
 80061bc:	4153      	adcs	r3, r2
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	e013      	b.n	80061ea <HAL_TIM_PWM_Start_DMA+0x72>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	d108      	bne.n	80061da <HAL_TIM_PWM_Start_DMA+0x62>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2240      	movs	r2, #64	@ 0x40
 80061cc:	5c9b      	ldrb	r3, [r3, r2]
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	3b02      	subs	r3, #2
 80061d2:	425a      	negs	r2, r3
 80061d4:	4153      	adcs	r3, r2
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	e007      	b.n	80061ea <HAL_TIM_PWM_Start_DMA+0x72>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2241      	movs	r2, #65	@ 0x41
 80061de:	5c9b      	ldrb	r3, [r3, r2]
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	3b02      	subs	r3, #2
 80061e4:	425a      	negs	r2, r3
 80061e6:	4153      	adcs	r3, r2
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80061ee:	2302      	movs	r3, #2
 80061f0:	e15e      	b.n	80064b0 <HAL_TIM_PWM_Start_DMA+0x338>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d108      	bne.n	800620a <HAL_TIM_PWM_Start_DMA+0x92>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	223e      	movs	r2, #62	@ 0x3e
 80061fc:	5c9b      	ldrb	r3, [r3, r2]
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	3b01      	subs	r3, #1
 8006202:	425a      	negs	r2, r3
 8006204:	4153      	adcs	r3, r2
 8006206:	b2db      	uxtb	r3, r3
 8006208:	e01f      	b.n	800624a <HAL_TIM_PWM_Start_DMA+0xd2>
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b04      	cmp	r3, #4
 800620e:	d108      	bne.n	8006222 <HAL_TIM_PWM_Start_DMA+0xaa>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	223f      	movs	r2, #63	@ 0x3f
 8006214:	5c9b      	ldrb	r3, [r3, r2]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	425a      	negs	r2, r3
 800621c:	4153      	adcs	r3, r2
 800621e:	b2db      	uxtb	r3, r3
 8006220:	e013      	b.n	800624a <HAL_TIM_PWM_Start_DMA+0xd2>
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2b08      	cmp	r3, #8
 8006226:	d108      	bne.n	800623a <HAL_TIM_PWM_Start_DMA+0xc2>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2240      	movs	r2, #64	@ 0x40
 800622c:	5c9b      	ldrb	r3, [r3, r2]
 800622e:	b2db      	uxtb	r3, r3
 8006230:	3b01      	subs	r3, #1
 8006232:	425a      	negs	r2, r3
 8006234:	4153      	adcs	r3, r2
 8006236:	b2db      	uxtb	r3, r3
 8006238:	e007      	b.n	800624a <HAL_TIM_PWM_Start_DMA+0xd2>
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2241      	movs	r2, #65	@ 0x41
 800623e:	5c9b      	ldrb	r3, [r3, r2]
 8006240:	b2db      	uxtb	r3, r3
 8006242:	3b01      	subs	r3, #1
 8006244:	425a      	negs	r2, r3
 8006246:	4153      	adcs	r3, r2
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d025      	beq.n	800629a <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <HAL_TIM_PWM_Start_DMA+0xe4>
 8006254:	1cbb      	adds	r3, r7, #2
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d101      	bne.n	8006260 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e127      	b.n	80064b0 <HAL_TIM_PWM_Start_DMA+0x338>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d104      	bne.n	8006270 <HAL_TIM_PWM_Start_DMA+0xf8>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	223e      	movs	r2, #62	@ 0x3e
 800626a:	2102      	movs	r1, #2
 800626c:	5499      	strb	r1, [r3, r2]
 800626e:	e016      	b.n	800629e <HAL_TIM_PWM_Start_DMA+0x126>
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b04      	cmp	r3, #4
 8006274:	d104      	bne.n	8006280 <HAL_TIM_PWM_Start_DMA+0x108>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	223f      	movs	r2, #63	@ 0x3f
 800627a:	2102      	movs	r1, #2
 800627c:	5499      	strb	r1, [r3, r2]
 800627e:	e00e      	b.n	800629e <HAL_TIM_PWM_Start_DMA+0x126>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b08      	cmp	r3, #8
 8006284:	d104      	bne.n	8006290 <HAL_TIM_PWM_Start_DMA+0x118>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2240      	movs	r2, #64	@ 0x40
 800628a:	2102      	movs	r1, #2
 800628c:	5499      	strb	r1, [r3, r2]
 800628e:	e006      	b.n	800629e <HAL_TIM_PWM_Start_DMA+0x126>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2241      	movs	r2, #65	@ 0x41
 8006294:	2102      	movs	r1, #2
 8006296:	5499      	strb	r1, [r3, r2]
 8006298:	e001      	b.n	800629e <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e108      	b.n	80064b0 <HAL_TIM_PWM_Start_DMA+0x338>
  }

  switch (Channel)
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2b0c      	cmp	r3, #12
 80062a2:	d100      	bne.n	80062a6 <HAL_TIM_PWM_Start_DMA+0x12e>
 80062a4:	e080      	b.n	80063a8 <HAL_TIM_PWM_Start_DMA+0x230>
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b0c      	cmp	r3, #12
 80062aa:	d900      	bls.n	80062ae <HAL_TIM_PWM_Start_DMA+0x136>
 80062ac:	e0a1      	b.n	80063f2 <HAL_TIM_PWM_Start_DMA+0x27a>
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b08      	cmp	r3, #8
 80062b2:	d054      	beq.n	800635e <HAL_TIM_PWM_Start_DMA+0x1e6>
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2b08      	cmp	r3, #8
 80062b8:	d900      	bls.n	80062bc <HAL_TIM_PWM_Start_DMA+0x144>
 80062ba:	e09a      	b.n	80063f2 <HAL_TIM_PWM_Start_DMA+0x27a>
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_TIM_PWM_Start_DMA+0x152>
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	d025      	beq.n	8006314 <HAL_TIM_PWM_Start_DMA+0x19c>
 80062c8:	e093      	b.n	80063f2 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ce:	4a7a      	ldr	r2, [pc, #488]	@ (80064b8 <HAL_TIM_PWM_Start_DMA+0x340>)
 80062d0:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d6:	4a79      	ldr	r2, [pc, #484]	@ (80064bc <HAL_TIM_PWM_Start_DMA+0x344>)
 80062d8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062de:	4a78      	ldr	r2, [pc, #480]	@ (80064c0 <HAL_TIM_PWM_Start_DMA+0x348>)
 80062e0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80062e6:	6879      	ldr	r1, [r7, #4]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3334      	adds	r3, #52	@ 0x34
 80062ee:	001a      	movs	r2, r3
 80062f0:	1cbb      	adds	r3, r7, #2
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	f7fe f8ea 	bl	80044cc <HAL_DMA_Start_IT>
 80062f8:	1e03      	subs	r3, r0, #0
 80062fa:	d001      	beq.n	8006300 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e0d7      	b.n	80064b0 <HAL_TIM_PWM_Start_DMA+0x338>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2180      	movs	r1, #128	@ 0x80
 800630c:	0089      	lsls	r1, r1, #2
 800630e:	430a      	orrs	r2, r1
 8006310:	60da      	str	r2, [r3, #12]
      break;
 8006312:	e073      	b.n	80063fc <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006318:	4a67      	ldr	r2, [pc, #412]	@ (80064b8 <HAL_TIM_PWM_Start_DMA+0x340>)
 800631a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006320:	4a66      	ldr	r2, [pc, #408]	@ (80064bc <HAL_TIM_PWM_Start_DMA+0x344>)
 8006322:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006328:	4a65      	ldr	r2, [pc, #404]	@ (80064c0 <HAL_TIM_PWM_Start_DMA+0x348>)
 800632a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3338      	adds	r3, #56	@ 0x38
 8006338:	001a      	movs	r2, r3
 800633a:	1cbb      	adds	r3, r7, #2
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	f7fe f8c5 	bl	80044cc <HAL_DMA_Start_IT>
 8006342:	1e03      	subs	r3, r0, #0
 8006344:	d001      	beq.n	800634a <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e0b2      	b.n	80064b0 <HAL_TIM_PWM_Start_DMA+0x338>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2180      	movs	r1, #128	@ 0x80
 8006356:	00c9      	lsls	r1, r1, #3
 8006358:	430a      	orrs	r2, r1
 800635a:	60da      	str	r2, [r3, #12]
      break;
 800635c:	e04e      	b.n	80063fc <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006362:	4a55      	ldr	r2, [pc, #340]	@ (80064b8 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006364:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636a:	4a54      	ldr	r2, [pc, #336]	@ (80064bc <HAL_TIM_PWM_Start_DMA+0x344>)
 800636c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006372:	4a53      	ldr	r2, [pc, #332]	@ (80064c0 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006374:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	333c      	adds	r3, #60	@ 0x3c
 8006382:	001a      	movs	r2, r3
 8006384:	1cbb      	adds	r3, r7, #2
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	f7fe f8a0 	bl	80044cc <HAL_DMA_Start_IT>
 800638c:	1e03      	subs	r3, r0, #0
 800638e:	d001      	beq.n	8006394 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e08d      	b.n	80064b0 <HAL_TIM_PWM_Start_DMA+0x338>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2180      	movs	r1, #128	@ 0x80
 80063a0:	0109      	lsls	r1, r1, #4
 80063a2:	430a      	orrs	r2, r1
 80063a4:	60da      	str	r2, [r3, #12]
      break;
 80063a6:	e029      	b.n	80063fc <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ac:	4a42      	ldr	r2, [pc, #264]	@ (80064b8 <HAL_TIM_PWM_Start_DMA+0x340>)
 80063ae:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b4:	4a41      	ldr	r2, [pc, #260]	@ (80064bc <HAL_TIM_PWM_Start_DMA+0x344>)
 80063b6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063bc:	4a40      	ldr	r2, [pc, #256]	@ (80064c0 <HAL_TIM_PWM_Start_DMA+0x348>)
 80063be:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80063c4:	6879      	ldr	r1, [r7, #4]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3340      	adds	r3, #64	@ 0x40
 80063cc:	001a      	movs	r2, r3
 80063ce:	1cbb      	adds	r3, r7, #2
 80063d0:	881b      	ldrh	r3, [r3, #0]
 80063d2:	f7fe f87b 	bl	80044cc <HAL_DMA_Start_IT>
 80063d6:	1e03      	subs	r3, r0, #0
 80063d8:	d001      	beq.n	80063de <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e068      	b.n	80064b0 <HAL_TIM_PWM_Start_DMA+0x338>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2180      	movs	r1, #128	@ 0x80
 80063ea:	0149      	lsls	r1, r1, #5
 80063ec:	430a      	orrs	r2, r1
 80063ee:	60da      	str	r2, [r3, #12]
      break;
 80063f0:	e004      	b.n	80063fc <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 80063f2:	2317      	movs	r3, #23
 80063f4:	18fb      	adds	r3, r7, r3
 80063f6:	2201      	movs	r2, #1
 80063f8:	701a      	strb	r2, [r3, #0]
      break;
 80063fa:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80063fc:	2317      	movs	r3, #23
 80063fe:	18fb      	adds	r3, r7, r3
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d151      	bne.n	80064aa <HAL_TIM_PWM_Start_DMA+0x332>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68b9      	ldr	r1, [r7, #8]
 800640c:	2201      	movs	r2, #1
 800640e:	0018      	movs	r0, r3
 8006410:	f000 feda 	bl	80071c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a2a      	ldr	r2, [pc, #168]	@ (80064c4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00e      	beq.n	800643c <HAL_TIM_PWM_Start_DMA+0x2c4>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a29      	ldr	r2, [pc, #164]	@ (80064c8 <HAL_TIM_PWM_Start_DMA+0x350>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d009      	beq.n	800643c <HAL_TIM_PWM_Start_DMA+0x2c4>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a27      	ldr	r2, [pc, #156]	@ (80064cc <HAL_TIM_PWM_Start_DMA+0x354>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d004      	beq.n	800643c <HAL_TIM_PWM_Start_DMA+0x2c4>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a26      	ldr	r2, [pc, #152]	@ (80064d0 <HAL_TIM_PWM_Start_DMA+0x358>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d101      	bne.n	8006440 <HAL_TIM_PWM_Start_DMA+0x2c8>
 800643c:	2301      	movs	r3, #1
 800643e:	e000      	b.n	8006442 <HAL_TIM_PWM_Start_DMA+0x2ca>
 8006440:	2300      	movs	r3, #0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d008      	beq.n	8006458 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2180      	movs	r1, #128	@ 0x80
 8006452:	0209      	lsls	r1, r1, #8
 8006454:	430a      	orrs	r2, r1
 8006456:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a19      	ldr	r2, [pc, #100]	@ (80064c4 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d009      	beq.n	8006476 <HAL_TIM_PWM_Start_DMA+0x2fe>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a1b      	ldr	r2, [pc, #108]	@ (80064d4 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d004      	beq.n	8006476 <HAL_TIM_PWM_Start_DMA+0x2fe>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a15      	ldr	r2, [pc, #84]	@ (80064c8 <HAL_TIM_PWM_Start_DMA+0x350>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d111      	bne.n	800649a <HAL_TIM_PWM_Start_DMA+0x322>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	2207      	movs	r2, #7
 800647e:	4013      	ands	r3, r2
 8006480:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b06      	cmp	r3, #6
 8006486:	d010      	beq.n	80064aa <HAL_TIM_PWM_Start_DMA+0x332>
      {
        __HAL_TIM_ENABLE(htim);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2101      	movs	r1, #1
 8006494:	430a      	orrs	r2, r1
 8006496:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006498:	e007      	b.n	80064aa <HAL_TIM_PWM_Start_DMA+0x332>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2101      	movs	r1, #1
 80064a6:	430a      	orrs	r2, r1
 80064a8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80064aa:	2317      	movs	r3, #23
 80064ac:	18fb      	adds	r3, r7, r3
 80064ae:	781b      	ldrb	r3, [r3, #0]
}
 80064b0:	0018      	movs	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b006      	add	sp, #24
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	08006a81 	.word	0x08006a81
 80064bc:	08006b2b 	.word	0x08006b2b
 80064c0:	080069ed 	.word	0x080069ed
 80064c4:	40012c00 	.word	0x40012c00
 80064c8:	40014000 	.word	0x40014000
 80064cc:	40014400 	.word	0x40014400
 80064d0:	40014800 	.word	0x40014800
 80064d4:	40000400 	.word	0x40000400

080064d8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064e2:	230f      	movs	r3, #15
 80064e4:	18fb      	adds	r3, r7, r3
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b0c      	cmp	r3, #12
 80064ee:	d039      	beq.n	8006564 <HAL_TIM_PWM_Stop_DMA+0x8c>
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b0c      	cmp	r3, #12
 80064f4:	d844      	bhi.n	8006580 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d025      	beq.n	8006548 <HAL_TIM_PWM_Stop_DMA+0x70>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b08      	cmp	r3, #8
 8006500:	d83e      	bhi.n	8006580 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d003      	beq.n	8006510 <HAL_TIM_PWM_Stop_DMA+0x38>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b04      	cmp	r3, #4
 800650c:	d00e      	beq.n	800652c <HAL_TIM_PWM_Stop_DMA+0x54>
 800650e:	e037      	b.n	8006580 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4954      	ldr	r1, [pc, #336]	@ (800666c <HAL_TIM_PWM_Stop_DMA+0x194>)
 800651c:	400a      	ands	r2, r1
 800651e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006524:	0018      	movs	r0, r3
 8006526:	f7fe f86f 	bl	8004608 <HAL_DMA_Abort_IT>
      break;
 800652a:	e02e      	b.n	800658a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	494e      	ldr	r1, [pc, #312]	@ (8006670 <HAL_TIM_PWM_Stop_DMA+0x198>)
 8006538:	400a      	ands	r2, r1
 800653a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006540:	0018      	movs	r0, r3
 8006542:	f7fe f861 	bl	8004608 <HAL_DMA_Abort_IT>
      break;
 8006546:	e020      	b.n	800658a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4948      	ldr	r1, [pc, #288]	@ (8006674 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8006554:	400a      	ands	r2, r1
 8006556:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655c:	0018      	movs	r0, r3
 800655e:	f7fe f853 	bl	8004608 <HAL_DMA_Abort_IT>
      break;
 8006562:	e012      	b.n	800658a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4942      	ldr	r1, [pc, #264]	@ (8006678 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8006570:	400a      	ands	r2, r1
 8006572:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006578:	0018      	movs	r0, r3
 800657a:	f7fe f845 	bl	8004608 <HAL_DMA_Abort_IT>
      break;
 800657e:	e004      	b.n	800658a <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8006580:	230f      	movs	r3, #15
 8006582:	18fb      	adds	r3, r7, r3
 8006584:	2201      	movs	r2, #1
 8006586:	701a      	strb	r2, [r3, #0]
      break;
 8006588:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 800658a:	230f      	movs	r3, #15
 800658c:	18fb      	adds	r3, r7, r3
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d000      	beq.n	8006596 <HAL_TIM_PWM_Stop_DMA+0xbe>
 8006594:	e063      	b.n	800665e <HAL_TIM_PWM_Stop_DMA+0x186>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6839      	ldr	r1, [r7, #0]
 800659c:	2200      	movs	r2, #0
 800659e:	0018      	movs	r0, r3
 80065a0:	f000 fe12 	bl	80071c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a34      	ldr	r2, [pc, #208]	@ (800667c <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00e      	beq.n	80065cc <HAL_TIM_PWM_Stop_DMA+0xf4>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a33      	ldr	r2, [pc, #204]	@ (8006680 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d009      	beq.n	80065cc <HAL_TIM_PWM_Stop_DMA+0xf4>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a31      	ldr	r2, [pc, #196]	@ (8006684 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d004      	beq.n	80065cc <HAL_TIM_PWM_Stop_DMA+0xf4>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a30      	ldr	r2, [pc, #192]	@ (8006688 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d101      	bne.n	80065d0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80065cc:	2301      	movs	r3, #1
 80065ce:	e000      	b.n	80065d2 <HAL_TIM_PWM_Stop_DMA+0xfa>
 80065d0:	2300      	movs	r3, #0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d013      	beq.n	80065fe <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6a1b      	ldr	r3, [r3, #32]
 80065dc:	4a2b      	ldr	r2, [pc, #172]	@ (800668c <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 80065de:	4013      	ands	r3, r2
 80065e0:	d10d      	bne.n	80065fe <HAL_TIM_PWM_Stop_DMA+0x126>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	4a29      	ldr	r2, [pc, #164]	@ (8006690 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 80065ea:	4013      	ands	r3, r2
 80065ec:	d107      	bne.n	80065fe <HAL_TIM_PWM_Stop_DMA+0x126>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4926      	ldr	r1, [pc, #152]	@ (8006694 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 80065fa:	400a      	ands	r2, r1
 80065fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	4a21      	ldr	r2, [pc, #132]	@ (800668c <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8006606:	4013      	ands	r3, r2
 8006608:	d10d      	bne.n	8006626 <HAL_TIM_PWM_Stop_DMA+0x14e>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	4a1f      	ldr	r2, [pc, #124]	@ (8006690 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8006612:	4013      	ands	r3, r2
 8006614:	d107      	bne.n	8006626 <HAL_TIM_PWM_Stop_DMA+0x14e>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2101      	movs	r1, #1
 8006622:	438a      	bics	r2, r1
 8006624:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d104      	bne.n	8006636 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	223e      	movs	r2, #62	@ 0x3e
 8006630:	2101      	movs	r1, #1
 8006632:	5499      	strb	r1, [r3, r2]
 8006634:	e013      	b.n	800665e <HAL_TIM_PWM_Stop_DMA+0x186>
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b04      	cmp	r3, #4
 800663a:	d104      	bne.n	8006646 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	223f      	movs	r2, #63	@ 0x3f
 8006640:	2101      	movs	r1, #1
 8006642:	5499      	strb	r1, [r3, r2]
 8006644:	e00b      	b.n	800665e <HAL_TIM_PWM_Stop_DMA+0x186>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	2b08      	cmp	r3, #8
 800664a:	d104      	bne.n	8006656 <HAL_TIM_PWM_Stop_DMA+0x17e>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2240      	movs	r2, #64	@ 0x40
 8006650:	2101      	movs	r1, #1
 8006652:	5499      	strb	r1, [r3, r2]
 8006654:	e003      	b.n	800665e <HAL_TIM_PWM_Stop_DMA+0x186>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2241      	movs	r2, #65	@ 0x41
 800665a:	2101      	movs	r1, #1
 800665c:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800665e:	230f      	movs	r3, #15
 8006660:	18fb      	adds	r3, r7, r3
 8006662:	781b      	ldrb	r3, [r3, #0]
}
 8006664:	0018      	movs	r0, r3
 8006666:	46bd      	mov	sp, r7
 8006668:	b004      	add	sp, #16
 800666a:	bd80      	pop	{r7, pc}
 800666c:	fffffdff 	.word	0xfffffdff
 8006670:	fffffbff 	.word	0xfffffbff
 8006674:	fffff7ff 	.word	0xfffff7ff
 8006678:	ffffefff 	.word	0xffffefff
 800667c:	40012c00 	.word	0x40012c00
 8006680:	40014000 	.word	0x40014000
 8006684:	40014400 	.word	0x40014400
 8006688:	40014800 	.word	0x40014800
 800668c:	00001111 	.word	0x00001111
 8006690:	00000444 	.word	0x00000444
 8006694:	ffff7fff 	.word	0xffff7fff

08006698 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066a4:	2317      	movs	r3, #23
 80066a6:	18fb      	adds	r3, r7, r3
 80066a8:	2200      	movs	r2, #0
 80066aa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	223c      	movs	r2, #60	@ 0x3c
 80066b0:	5c9b      	ldrb	r3, [r3, r2]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d101      	bne.n	80066ba <HAL_TIM_PWM_ConfigChannel+0x22>
 80066b6:	2302      	movs	r3, #2
 80066b8:	e0ad      	b.n	8006816 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	223c      	movs	r2, #60	@ 0x3c
 80066be:	2101      	movs	r1, #1
 80066c0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b0c      	cmp	r3, #12
 80066c6:	d100      	bne.n	80066ca <HAL_TIM_PWM_ConfigChannel+0x32>
 80066c8:	e076      	b.n	80067b8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b0c      	cmp	r3, #12
 80066ce:	d900      	bls.n	80066d2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80066d0:	e095      	b.n	80067fe <HAL_TIM_PWM_ConfigChannel+0x166>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	d04e      	beq.n	8006776 <HAL_TIM_PWM_ConfigChannel+0xde>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d900      	bls.n	80066e0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80066de:	e08e      	b.n	80067fe <HAL_TIM_PWM_ConfigChannel+0x166>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_TIM_PWM_ConfigChannel+0x56>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	d021      	beq.n	8006730 <HAL_TIM_PWM_ConfigChannel+0x98>
 80066ec:	e087      	b.n	80067fe <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68ba      	ldr	r2, [r7, #8]
 80066f4:	0011      	movs	r1, r2
 80066f6:	0018      	movs	r0, r3
 80066f8:	f000 fad0 	bl	8006c9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699a      	ldr	r2, [r3, #24]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2108      	movs	r1, #8
 8006708:	430a      	orrs	r2, r1
 800670a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699a      	ldr	r2, [r3, #24]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2104      	movs	r1, #4
 8006718:	438a      	bics	r2, r1
 800671a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6999      	ldr	r1, [r3, #24]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	691a      	ldr	r2, [r3, #16]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	430a      	orrs	r2, r1
 800672c:	619a      	str	r2, [r3, #24]
      break;
 800672e:	e06b      	b.n	8006808 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	0011      	movs	r1, r2
 8006738:	0018      	movs	r0, r3
 800673a:	f000 fb37 	bl	8006dac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	699a      	ldr	r2, [r3, #24]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2180      	movs	r1, #128	@ 0x80
 800674a:	0109      	lsls	r1, r1, #4
 800674c:	430a      	orrs	r2, r1
 800674e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4931      	ldr	r1, [pc, #196]	@ (8006820 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800675c:	400a      	ands	r2, r1
 800675e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6999      	ldr	r1, [r3, #24]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	691b      	ldr	r3, [r3, #16]
 800676a:	021a      	lsls	r2, r3, #8
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	619a      	str	r2, [r3, #24]
      break;
 8006774:	e048      	b.n	8006808 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	0011      	movs	r1, r2
 800677e:	0018      	movs	r0, r3
 8006780:	f000 fb98 	bl	8006eb4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	69da      	ldr	r2, [r3, #28]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2108      	movs	r1, #8
 8006790:	430a      	orrs	r2, r1
 8006792:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	69da      	ldr	r2, [r3, #28]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2104      	movs	r1, #4
 80067a0:	438a      	bics	r2, r1
 80067a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	69d9      	ldr	r1, [r3, #28]
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	691a      	ldr	r2, [r3, #16]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	61da      	str	r2, [r3, #28]
      break;
 80067b6:	e027      	b.n	8006808 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	0011      	movs	r1, r2
 80067c0:	0018      	movs	r0, r3
 80067c2:	f000 fbfd 	bl	8006fc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	69da      	ldr	r2, [r3, #28]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2180      	movs	r1, #128	@ 0x80
 80067d2:	0109      	lsls	r1, r1, #4
 80067d4:	430a      	orrs	r2, r1
 80067d6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	69da      	ldr	r2, [r3, #28]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	490f      	ldr	r1, [pc, #60]	@ (8006820 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80067e4:	400a      	ands	r2, r1
 80067e6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	69d9      	ldr	r1, [r3, #28]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	021a      	lsls	r2, r3, #8
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	61da      	str	r2, [r3, #28]
      break;
 80067fc:	e004      	b.n	8006808 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80067fe:	2317      	movs	r3, #23
 8006800:	18fb      	adds	r3, r7, r3
 8006802:	2201      	movs	r2, #1
 8006804:	701a      	strb	r2, [r3, #0]
      break;
 8006806:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	223c      	movs	r2, #60	@ 0x3c
 800680c:	2100      	movs	r1, #0
 800680e:	5499      	strb	r1, [r3, r2]

  return status;
 8006810:	2317      	movs	r3, #23
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	781b      	ldrb	r3, [r3, #0]
}
 8006816:	0018      	movs	r0, r3
 8006818:	46bd      	mov	sp, r7
 800681a:	b006      	add	sp, #24
 800681c:	bd80      	pop	{r7, pc}
 800681e:	46c0      	nop			@ (mov r8, r8)
 8006820:	fffffbff 	.word	0xfffffbff

08006824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800682e:	230f      	movs	r3, #15
 8006830:	18fb      	adds	r3, r7, r3
 8006832:	2200      	movs	r2, #0
 8006834:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	223c      	movs	r2, #60	@ 0x3c
 800683a:	5c9b      	ldrb	r3, [r3, r2]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_TIM_ConfigClockSource+0x20>
 8006840:	2302      	movs	r3, #2
 8006842:	e0bc      	b.n	80069be <HAL_TIM_ConfigClockSource+0x19a>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	223c      	movs	r2, #60	@ 0x3c
 8006848:	2101      	movs	r1, #1
 800684a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	223d      	movs	r2, #61	@ 0x3d
 8006850:	2102      	movs	r1, #2
 8006852:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2277      	movs	r2, #119	@ 0x77
 8006860:	4393      	bics	r3, r2
 8006862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	4a58      	ldr	r2, [pc, #352]	@ (80069c8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006868:	4013      	ands	r3, r2
 800686a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2280      	movs	r2, #128	@ 0x80
 800687a:	0192      	lsls	r2, r2, #6
 800687c:	4293      	cmp	r3, r2
 800687e:	d040      	beq.n	8006902 <HAL_TIM_ConfigClockSource+0xde>
 8006880:	2280      	movs	r2, #128	@ 0x80
 8006882:	0192      	lsls	r2, r2, #6
 8006884:	4293      	cmp	r3, r2
 8006886:	d900      	bls.n	800688a <HAL_TIM_ConfigClockSource+0x66>
 8006888:	e088      	b.n	800699c <HAL_TIM_ConfigClockSource+0x178>
 800688a:	2280      	movs	r2, #128	@ 0x80
 800688c:	0152      	lsls	r2, r2, #5
 800688e:	4293      	cmp	r3, r2
 8006890:	d100      	bne.n	8006894 <HAL_TIM_ConfigClockSource+0x70>
 8006892:	e088      	b.n	80069a6 <HAL_TIM_ConfigClockSource+0x182>
 8006894:	2280      	movs	r2, #128	@ 0x80
 8006896:	0152      	lsls	r2, r2, #5
 8006898:	4293      	cmp	r3, r2
 800689a:	d900      	bls.n	800689e <HAL_TIM_ConfigClockSource+0x7a>
 800689c:	e07e      	b.n	800699c <HAL_TIM_ConfigClockSource+0x178>
 800689e:	2b70      	cmp	r3, #112	@ 0x70
 80068a0:	d018      	beq.n	80068d4 <HAL_TIM_ConfigClockSource+0xb0>
 80068a2:	d900      	bls.n	80068a6 <HAL_TIM_ConfigClockSource+0x82>
 80068a4:	e07a      	b.n	800699c <HAL_TIM_ConfigClockSource+0x178>
 80068a6:	2b60      	cmp	r3, #96	@ 0x60
 80068a8:	d04f      	beq.n	800694a <HAL_TIM_ConfigClockSource+0x126>
 80068aa:	d900      	bls.n	80068ae <HAL_TIM_ConfigClockSource+0x8a>
 80068ac:	e076      	b.n	800699c <HAL_TIM_ConfigClockSource+0x178>
 80068ae:	2b50      	cmp	r3, #80	@ 0x50
 80068b0:	d03b      	beq.n	800692a <HAL_TIM_ConfigClockSource+0x106>
 80068b2:	d900      	bls.n	80068b6 <HAL_TIM_ConfigClockSource+0x92>
 80068b4:	e072      	b.n	800699c <HAL_TIM_ConfigClockSource+0x178>
 80068b6:	2b40      	cmp	r3, #64	@ 0x40
 80068b8:	d057      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x146>
 80068ba:	d900      	bls.n	80068be <HAL_TIM_ConfigClockSource+0x9a>
 80068bc:	e06e      	b.n	800699c <HAL_TIM_ConfigClockSource+0x178>
 80068be:	2b30      	cmp	r3, #48	@ 0x30
 80068c0:	d063      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x166>
 80068c2:	d86b      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x178>
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d060      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x166>
 80068c8:	d868      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x178>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d05d      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x166>
 80068ce:	2b10      	cmp	r3, #16
 80068d0:	d05b      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x166>
 80068d2:	e063      	b.n	800699c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80068e4:	f000 fc50 	bl	8007188 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2277      	movs	r2, #119	@ 0x77
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	609a      	str	r2, [r3, #8]
      break;
 8006900:	e052      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006912:	f000 fc39 	bl	8007188 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2180      	movs	r1, #128	@ 0x80
 8006922:	01c9      	lsls	r1, r1, #7
 8006924:	430a      	orrs	r2, r1
 8006926:	609a      	str	r2, [r3, #8]
      break;
 8006928:	e03e      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006936:	001a      	movs	r2, r3
 8006938:	f000 fbac 	bl	8007094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2150      	movs	r1, #80	@ 0x50
 8006942:	0018      	movs	r0, r3
 8006944:	f000 fc06 	bl	8007154 <TIM_ITRx_SetConfig>
      break;
 8006948:	e02e      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006956:	001a      	movs	r2, r3
 8006958:	f000 fbca 	bl	80070f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2160      	movs	r1, #96	@ 0x60
 8006962:	0018      	movs	r0, r3
 8006964:	f000 fbf6 	bl	8007154 <TIM_ITRx_SetConfig>
      break;
 8006968:	e01e      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006976:	001a      	movs	r2, r3
 8006978:	f000 fb8c 	bl	8007094 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2140      	movs	r1, #64	@ 0x40
 8006982:	0018      	movs	r0, r3
 8006984:	f000 fbe6 	bl	8007154 <TIM_ITRx_SetConfig>
      break;
 8006988:	e00e      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	0019      	movs	r1, r3
 8006994:	0010      	movs	r0, r2
 8006996:	f000 fbdd 	bl	8007154 <TIM_ITRx_SetConfig>
      break;
 800699a:	e005      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800699c:	230f      	movs	r3, #15
 800699e:	18fb      	adds	r3, r7, r3
 80069a0:	2201      	movs	r2, #1
 80069a2:	701a      	strb	r2, [r3, #0]
      break;
 80069a4:	e000      	b.n	80069a8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80069a6:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	223d      	movs	r2, #61	@ 0x3d
 80069ac:	2101      	movs	r1, #1
 80069ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	223c      	movs	r2, #60	@ 0x3c
 80069b4:	2100      	movs	r1, #0
 80069b6:	5499      	strb	r1, [r3, r2]

  return status;
 80069b8:	230f      	movs	r3, #15
 80069ba:	18fb      	adds	r3, r7, r3
 80069bc:	781b      	ldrb	r3, [r3, #0]
}
 80069be:	0018      	movs	r0, r3
 80069c0:	46bd      	mov	sp, r7
 80069c2:	b004      	add	sp, #16
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	46c0      	nop			@ (mov r8, r8)
 80069c8:	ffff00ff 	.word	0xffff00ff

080069cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80069d4:	46c0      	nop			@ (mov r8, r8)
 80069d6:	46bd      	mov	sp, r7
 80069d8:	b002      	add	sp, #8
 80069da:	bd80      	pop	{r7, pc}

080069dc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80069e4:	46c0      	nop			@ (mov r8, r8)
 80069e6:	46bd      	mov	sp, r7
 80069e8:	b002      	add	sp, #8
 80069ea:	bd80      	pop	{r7, pc}

080069ec <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d107      	bne.n	8006a14 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2201      	movs	r2, #1
 8006a08:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	223e      	movs	r2, #62	@ 0x3e
 8006a0e:	2101      	movs	r1, #1
 8006a10:	5499      	strb	r1, [r3, r2]
 8006a12:	e02a      	b.n	8006a6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d107      	bne.n	8006a2e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2202      	movs	r2, #2
 8006a22:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	223f      	movs	r2, #63	@ 0x3f
 8006a28:	2101      	movs	r1, #1
 8006a2a:	5499      	strb	r1, [r3, r2]
 8006a2c:	e01d      	b.n	8006a6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d107      	bne.n	8006a48 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2240      	movs	r2, #64	@ 0x40
 8006a42:	2101      	movs	r1, #1
 8006a44:	5499      	strb	r1, [r3, r2]
 8006a46:	e010      	b.n	8006a6a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d107      	bne.n	8006a62 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2208      	movs	r2, #8
 8006a56:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2241      	movs	r2, #65	@ 0x41
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	5499      	strb	r1, [r3, r2]
 8006a60:	e003      	b.n	8006a6a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	223d      	movs	r2, #61	@ 0x3d
 8006a66:	2101      	movs	r1, #1
 8006a68:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	0018      	movs	r0, r3
 8006a6e:	f7ff ffb5 	bl	80069dc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	771a      	strb	r2, [r3, #28]
}
 8006a78:	46c0      	nop			@ (mov r8, r8)
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	b004      	add	sp, #16
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d10b      	bne.n	8006ab0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d136      	bne.n	8006b14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	223e      	movs	r2, #62	@ 0x3e
 8006aaa:	2101      	movs	r1, #1
 8006aac:	5499      	strb	r1, [r3, r2]
 8006aae:	e031      	b.n	8006b14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d10b      	bne.n	8006ad2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2202      	movs	r2, #2
 8006abe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	699b      	ldr	r3, [r3, #24]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d125      	bne.n	8006b14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	223f      	movs	r2, #63	@ 0x3f
 8006acc:	2101      	movs	r1, #1
 8006ace:	5499      	strb	r1, [r3, r2]
 8006ad0:	e020      	b.n	8006b14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d10b      	bne.n	8006af4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2204      	movs	r2, #4
 8006ae0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d114      	bne.n	8006b14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2240      	movs	r2, #64	@ 0x40
 8006aee:	2101      	movs	r1, #1
 8006af0:	5499      	strb	r1, [r3, r2]
 8006af2:	e00f      	b.n	8006b14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d10a      	bne.n	8006b14 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2208      	movs	r2, #8
 8006b02:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	699b      	ldr	r3, [r3, #24]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d103      	bne.n	8006b14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2241      	movs	r2, #65	@ 0x41
 8006b10:	2101      	movs	r1, #1
 8006b12:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	0018      	movs	r0, r3
 8006b18:	f7fd f88a 	bl	8003c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	771a      	strb	r2, [r3, #28]
}
 8006b22:	46c0      	nop			@ (mov r8, r8)
 8006b24:	46bd      	mov	sp, r7
 8006b26:	b004      	add	sp, #16
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b36:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d103      	bne.n	8006b4a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	771a      	strb	r2, [r3, #28]
 8006b48:	e019      	b.n	8006b7e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d103      	bne.n	8006b5c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2202      	movs	r2, #2
 8006b58:	771a      	strb	r2, [r3, #28]
 8006b5a:	e010      	b.n	8006b7e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d103      	bne.n	8006b6e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2204      	movs	r2, #4
 8006b6a:	771a      	strb	r2, [r3, #28]
 8006b6c:	e007      	b.n	8006b7e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d102      	bne.n	8006b7e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2208      	movs	r2, #8
 8006b7c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	0018      	movs	r0, r3
 8006b82:	f7ff ff23 	bl	80069cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	771a      	strb	r2, [r3, #28]
}
 8006b8c:	46c0      	nop			@ (mov r8, r8)
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	b004      	add	sp, #16
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a36      	ldr	r2, [pc, #216]	@ (8006c80 <TIM_Base_SetConfig+0xec>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d003      	beq.n	8006bb4 <TIM_Base_SetConfig+0x20>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	4a35      	ldr	r2, [pc, #212]	@ (8006c84 <TIM_Base_SetConfig+0xf0>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d108      	bne.n	8006bc6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2270      	movs	r2, #112	@ 0x70
 8006bb8:	4393      	bics	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8006c80 <TIM_Base_SetConfig+0xec>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d013      	beq.n	8006bf6 <TIM_Base_SetConfig+0x62>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8006c84 <TIM_Base_SetConfig+0xf0>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00f      	beq.n	8006bf6 <TIM_Base_SetConfig+0x62>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a2b      	ldr	r2, [pc, #172]	@ (8006c88 <TIM_Base_SetConfig+0xf4>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00b      	beq.n	8006bf6 <TIM_Base_SetConfig+0x62>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a2a      	ldr	r2, [pc, #168]	@ (8006c8c <TIM_Base_SetConfig+0xf8>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d007      	beq.n	8006bf6 <TIM_Base_SetConfig+0x62>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a29      	ldr	r2, [pc, #164]	@ (8006c90 <TIM_Base_SetConfig+0xfc>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d003      	beq.n	8006bf6 <TIM_Base_SetConfig+0x62>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a28      	ldr	r2, [pc, #160]	@ (8006c94 <TIM_Base_SetConfig+0x100>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d108      	bne.n	8006c08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4a27      	ldr	r2, [pc, #156]	@ (8006c98 <TIM_Base_SetConfig+0x104>)
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2280      	movs	r2, #128	@ 0x80
 8006c0c:	4393      	bics	r3, r2
 8006c0e:	001a      	movs	r2, r3
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a13      	ldr	r2, [pc, #76]	@ (8006c80 <TIM_Base_SetConfig+0xec>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d00b      	beq.n	8006c4e <TIM_Base_SetConfig+0xba>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a14      	ldr	r2, [pc, #80]	@ (8006c8c <TIM_Base_SetConfig+0xf8>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d007      	beq.n	8006c4e <TIM_Base_SetConfig+0xba>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a13      	ldr	r2, [pc, #76]	@ (8006c90 <TIM_Base_SetConfig+0xfc>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d003      	beq.n	8006c4e <TIM_Base_SetConfig+0xba>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a12      	ldr	r2, [pc, #72]	@ (8006c94 <TIM_Base_SetConfig+0x100>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d103      	bne.n	8006c56 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	691a      	ldr	r2, [r3, #16]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	2201      	movs	r2, #1
 8006c62:	4013      	ands	r3, r2
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d106      	bne.n	8006c76 <TIM_Base_SetConfig+0xe2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	4393      	bics	r3, r2
 8006c70:	001a      	movs	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	611a      	str	r2, [r3, #16]
  }
}
 8006c76:	46c0      	nop			@ (mov r8, r8)
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	b004      	add	sp, #16
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	46c0      	nop			@ (mov r8, r8)
 8006c80:	40012c00 	.word	0x40012c00
 8006c84:	40000400 	.word	0x40000400
 8006c88:	40002000 	.word	0x40002000
 8006c8c:	40014000 	.word	0x40014000
 8006c90:	40014400 	.word	0x40014400
 8006c94:	40014800 	.word	0x40014800
 8006c98:	fffffcff 	.word	0xfffffcff

08006c9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	4393      	bics	r3, r2
 8006cb4:	001a      	movs	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2270      	movs	r2, #112	@ 0x70
 8006cca:	4393      	bics	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2203      	movs	r2, #3
 8006cd2:	4393      	bics	r3, r2
 8006cd4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	4393      	bics	r3, r2
 8006ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a27      	ldr	r2, [pc, #156]	@ (8006d94 <TIM_OC1_SetConfig+0xf8>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00b      	beq.n	8006d12 <TIM_OC1_SetConfig+0x76>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a26      	ldr	r2, [pc, #152]	@ (8006d98 <TIM_OC1_SetConfig+0xfc>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d007      	beq.n	8006d12 <TIM_OC1_SetConfig+0x76>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a25      	ldr	r2, [pc, #148]	@ (8006d9c <TIM_OC1_SetConfig+0x100>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d003      	beq.n	8006d12 <TIM_OC1_SetConfig+0x76>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a24      	ldr	r2, [pc, #144]	@ (8006da0 <TIM_OC1_SetConfig+0x104>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d10c      	bne.n	8006d2c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2208      	movs	r2, #8
 8006d16:	4393      	bics	r3, r2
 8006d18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	2204      	movs	r2, #4
 8006d28:	4393      	bics	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a19      	ldr	r2, [pc, #100]	@ (8006d94 <TIM_OC1_SetConfig+0xf8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00b      	beq.n	8006d4c <TIM_OC1_SetConfig+0xb0>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a18      	ldr	r2, [pc, #96]	@ (8006d98 <TIM_OC1_SetConfig+0xfc>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d007      	beq.n	8006d4c <TIM_OC1_SetConfig+0xb0>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a17      	ldr	r2, [pc, #92]	@ (8006d9c <TIM_OC1_SetConfig+0x100>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d003      	beq.n	8006d4c <TIM_OC1_SetConfig+0xb0>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a16      	ldr	r2, [pc, #88]	@ (8006da0 <TIM_OC1_SetConfig+0x104>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d111      	bne.n	8006d70 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	4a15      	ldr	r2, [pc, #84]	@ (8006da4 <TIM_OC1_SetConfig+0x108>)
 8006d50:	4013      	ands	r3, r2
 8006d52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	4a14      	ldr	r2, [pc, #80]	@ (8006da8 <TIM_OC1_SetConfig+0x10c>)
 8006d58:	4013      	ands	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	693a      	ldr	r2, [r7, #16]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	621a      	str	r2, [r3, #32]
}
 8006d8a:	46c0      	nop			@ (mov r8, r8)
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	b006      	add	sp, #24
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	46c0      	nop			@ (mov r8, r8)
 8006d94:	40012c00 	.word	0x40012c00
 8006d98:	40014000 	.word	0x40014000
 8006d9c:	40014400 	.word	0x40014400
 8006da0:	40014800 	.word	0x40014800
 8006da4:	fffffeff 	.word	0xfffffeff
 8006da8:	fffffdff 	.word	0xfffffdff

08006dac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	2210      	movs	r2, #16
 8006dc2:	4393      	bics	r3, r2
 8006dc4:	001a      	movs	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4a2e      	ldr	r2, [pc, #184]	@ (8006e94 <TIM_OC2_SetConfig+0xe8>)
 8006dda:	4013      	ands	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4a2d      	ldr	r2, [pc, #180]	@ (8006e98 <TIM_OC2_SetConfig+0xec>)
 8006de2:	4013      	ands	r3, r2
 8006de4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	2220      	movs	r2, #32
 8006df6:	4393      	bics	r3, r2
 8006df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	011b      	lsls	r3, r3, #4
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a24      	ldr	r2, [pc, #144]	@ (8006e9c <TIM_OC2_SetConfig+0xf0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d10d      	bne.n	8006e2a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2280      	movs	r2, #128	@ 0x80
 8006e12:	4393      	bics	r3, r2
 8006e14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	011b      	lsls	r3, r3, #4
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	2240      	movs	r2, #64	@ 0x40
 8006e26:	4393      	bics	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8006e9c <TIM_OC2_SetConfig+0xf0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00b      	beq.n	8006e4a <TIM_OC2_SetConfig+0x9e>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a1a      	ldr	r2, [pc, #104]	@ (8006ea0 <TIM_OC2_SetConfig+0xf4>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d007      	beq.n	8006e4a <TIM_OC2_SetConfig+0x9e>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a19      	ldr	r2, [pc, #100]	@ (8006ea4 <TIM_OC2_SetConfig+0xf8>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d003      	beq.n	8006e4a <TIM_OC2_SetConfig+0x9e>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a18      	ldr	r2, [pc, #96]	@ (8006ea8 <TIM_OC2_SetConfig+0xfc>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d113      	bne.n	8006e72 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	4a17      	ldr	r2, [pc, #92]	@ (8006eac <TIM_OC2_SetConfig+0x100>)
 8006e4e:	4013      	ands	r3, r2
 8006e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	4a16      	ldr	r2, [pc, #88]	@ (8006eb0 <TIM_OC2_SetConfig+0x104>)
 8006e56:	4013      	ands	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	685a      	ldr	r2, [r3, #4]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	621a      	str	r2, [r3, #32]
}
 8006e8c:	46c0      	nop			@ (mov r8, r8)
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	b006      	add	sp, #24
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	ffff8fff 	.word	0xffff8fff
 8006e98:	fffffcff 	.word	0xfffffcff
 8006e9c:	40012c00 	.word	0x40012c00
 8006ea0:	40014000 	.word	0x40014000
 8006ea4:	40014400 	.word	0x40014400
 8006ea8:	40014800 	.word	0x40014800
 8006eac:	fffffbff 	.word	0xfffffbff
 8006eb0:	fffff7ff 	.word	0xfffff7ff

08006eb4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	4a33      	ldr	r2, [pc, #204]	@ (8006f98 <TIM_OC3_SetConfig+0xe4>)
 8006eca:	401a      	ands	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	69db      	ldr	r3, [r3, #28]
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2270      	movs	r2, #112	@ 0x70
 8006ee0:	4393      	bics	r3, r2
 8006ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2203      	movs	r2, #3
 8006ee8:	4393      	bics	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	4a28      	ldr	r2, [pc, #160]	@ (8006f9c <TIM_OC3_SetConfig+0xe8>)
 8006efa:	4013      	ands	r3, r2
 8006efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	021b      	lsls	r3, r3, #8
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a24      	ldr	r2, [pc, #144]	@ (8006fa0 <TIM_OC3_SetConfig+0xec>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d10d      	bne.n	8006f2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	4a23      	ldr	r2, [pc, #140]	@ (8006fa4 <TIM_OC3_SetConfig+0xf0>)
 8006f16:	4013      	ands	r3, r2
 8006f18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	021b      	lsls	r3, r3, #8
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	4a1f      	ldr	r2, [pc, #124]	@ (8006fa8 <TIM_OC3_SetConfig+0xf4>)
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a1b      	ldr	r2, [pc, #108]	@ (8006fa0 <TIM_OC3_SetConfig+0xec>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d00b      	beq.n	8006f4e <TIM_OC3_SetConfig+0x9a>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a1c      	ldr	r2, [pc, #112]	@ (8006fac <TIM_OC3_SetConfig+0xf8>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d007      	beq.n	8006f4e <TIM_OC3_SetConfig+0x9a>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a1b      	ldr	r2, [pc, #108]	@ (8006fb0 <TIM_OC3_SetConfig+0xfc>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d003      	beq.n	8006f4e <TIM_OC3_SetConfig+0x9a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a1a      	ldr	r2, [pc, #104]	@ (8006fb4 <TIM_OC3_SetConfig+0x100>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d113      	bne.n	8006f76 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	4a19      	ldr	r2, [pc, #100]	@ (8006fb8 <TIM_OC3_SetConfig+0x104>)
 8006f52:	4013      	ands	r3, r2
 8006f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	4a18      	ldr	r2, [pc, #96]	@ (8006fbc <TIM_OC3_SetConfig+0x108>)
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	011b      	lsls	r3, r3, #4
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	621a      	str	r2, [r3, #32]
}
 8006f90:	46c0      	nop			@ (mov r8, r8)
 8006f92:	46bd      	mov	sp, r7
 8006f94:	b006      	add	sp, #24
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	fffffeff 	.word	0xfffffeff
 8006f9c:	fffffdff 	.word	0xfffffdff
 8006fa0:	40012c00 	.word	0x40012c00
 8006fa4:	fffff7ff 	.word	0xfffff7ff
 8006fa8:	fffffbff 	.word	0xfffffbff
 8006fac:	40014000 	.word	0x40014000
 8006fb0:	40014400 	.word	0x40014400
 8006fb4:	40014800 	.word	0x40014800
 8006fb8:	ffffefff 	.word	0xffffefff
 8006fbc:	ffffdfff 	.word	0xffffdfff

08006fc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a1b      	ldr	r3, [r3, #32]
 8006fd4:	4a26      	ldr	r2, [pc, #152]	@ (8007070 <TIM_OC4_SetConfig+0xb0>)
 8006fd6:	401a      	ands	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4a22      	ldr	r2, [pc, #136]	@ (8007074 <TIM_OC4_SetConfig+0xb4>)
 8006fec:	4013      	ands	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4a21      	ldr	r2, [pc, #132]	@ (8007078 <TIM_OC4_SetConfig+0xb8>)
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	021b      	lsls	r3, r3, #8
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	4a1d      	ldr	r2, [pc, #116]	@ (800707c <TIM_OC4_SetConfig+0xbc>)
 8007008:	4013      	ands	r3, r2
 800700a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	031b      	lsls	r3, r3, #12
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	4313      	orrs	r3, r2
 8007016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a19      	ldr	r2, [pc, #100]	@ (8007080 <TIM_OC4_SetConfig+0xc0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00b      	beq.n	8007038 <TIM_OC4_SetConfig+0x78>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a18      	ldr	r2, [pc, #96]	@ (8007084 <TIM_OC4_SetConfig+0xc4>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d007      	beq.n	8007038 <TIM_OC4_SetConfig+0x78>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a17      	ldr	r2, [pc, #92]	@ (8007088 <TIM_OC4_SetConfig+0xc8>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d003      	beq.n	8007038 <TIM_OC4_SetConfig+0x78>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	4a16      	ldr	r2, [pc, #88]	@ (800708c <TIM_OC4_SetConfig+0xcc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d109      	bne.n	800704c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	4a15      	ldr	r2, [pc, #84]	@ (8007090 <TIM_OC4_SetConfig+0xd0>)
 800703c:	4013      	ands	r3, r2
 800703e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	019b      	lsls	r3, r3, #6
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	4313      	orrs	r3, r2
 800704a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	621a      	str	r2, [r3, #32]
}
 8007066:	46c0      	nop			@ (mov r8, r8)
 8007068:	46bd      	mov	sp, r7
 800706a:	b006      	add	sp, #24
 800706c:	bd80      	pop	{r7, pc}
 800706e:	46c0      	nop			@ (mov r8, r8)
 8007070:	ffffefff 	.word	0xffffefff
 8007074:	ffff8fff 	.word	0xffff8fff
 8007078:	fffffcff 	.word	0xfffffcff
 800707c:	ffffdfff 	.word	0xffffdfff
 8007080:	40012c00 	.word	0x40012c00
 8007084:	40014000 	.word	0x40014000
 8007088:	40014400 	.word	0x40014400
 800708c:	40014800 	.word	0x40014800
 8007090:	ffffbfff 	.word	0xffffbfff

08007094 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6a1b      	ldr	r3, [r3, #32]
 80070aa:	2201      	movs	r2, #1
 80070ac:	4393      	bics	r3, r2
 80070ae:	001a      	movs	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	22f0      	movs	r2, #240	@ 0xf0
 80070be:	4393      	bics	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	011b      	lsls	r3, r3, #4
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	220a      	movs	r2, #10
 80070d0:	4393      	bics	r3, r2
 80070d2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	4313      	orrs	r3, r2
 80070da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	621a      	str	r2, [r3, #32]
}
 80070e8:	46c0      	nop			@ (mov r8, r8)
 80070ea:	46bd      	mov	sp, r7
 80070ec:	b006      	add	sp, #24
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	2210      	movs	r2, #16
 8007108:	4393      	bics	r3, r2
 800710a:	001a      	movs	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	699b      	ldr	r3, [r3, #24]
 8007114:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	4a0d      	ldr	r2, [pc, #52]	@ (8007150 <TIM_TI2_ConfigInputStage+0x60>)
 800711a:	4013      	ands	r3, r2
 800711c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	031b      	lsls	r3, r3, #12
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	4313      	orrs	r3, r2
 8007126:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	22a0      	movs	r2, #160	@ 0xa0
 800712c:	4393      	bics	r3, r2
 800712e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	011b      	lsls	r3, r3, #4
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	4313      	orrs	r3, r2
 8007138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	621a      	str	r2, [r3, #32]
}
 8007146:	46c0      	nop			@ (mov r8, r8)
 8007148:	46bd      	mov	sp, r7
 800714a:	b006      	add	sp, #24
 800714c:	bd80      	pop	{r7, pc}
 800714e:	46c0      	nop			@ (mov r8, r8)
 8007150:	ffff0fff 	.word	0xffff0fff

08007154 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b084      	sub	sp, #16
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2270      	movs	r2, #112	@ 0x70
 8007168:	4393      	bics	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800716c:	683a      	ldr	r2, [r7, #0]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4313      	orrs	r3, r2
 8007172:	2207      	movs	r2, #7
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	609a      	str	r2, [r3, #8]
}
 800717e:	46c0      	nop			@ (mov r8, r8)
 8007180:	46bd      	mov	sp, r7
 8007182:	b004      	add	sp, #16
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	4a09      	ldr	r2, [pc, #36]	@ (80071c4 <TIM_ETR_SetConfig+0x3c>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	021a      	lsls	r2, r3, #8
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	431a      	orrs	r2, r3
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	4313      	orrs	r3, r2
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	609a      	str	r2, [r3, #8]
}
 80071bc:	46c0      	nop			@ (mov r8, r8)
 80071be:	46bd      	mov	sp, r7
 80071c0:	b006      	add	sp, #24
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	ffff00ff 	.word	0xffff00ff

080071c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	221f      	movs	r2, #31
 80071d8:	4013      	ands	r3, r2
 80071da:	2201      	movs	r2, #1
 80071dc:	409a      	lsls	r2, r3
 80071de:	0013      	movs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	43d2      	mvns	r2, r2
 80071ea:	401a      	ands	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a1a      	ldr	r2, [r3, #32]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	211f      	movs	r1, #31
 80071f8:	400b      	ands	r3, r1
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4099      	lsls	r1, r3
 80071fe:	000b      	movs	r3, r1
 8007200:	431a      	orrs	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	621a      	str	r2, [r3, #32]
}
 8007206:	46c0      	nop			@ (mov r8, r8)
 8007208:	46bd      	mov	sp, r7
 800720a:	b006      	add	sp, #24
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	223c      	movs	r2, #60	@ 0x3c
 800721e:	5c9b      	ldrb	r3, [r3, r2]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d101      	bne.n	8007228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007224:	2302      	movs	r3, #2
 8007226:	e041      	b.n	80072ac <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	223c      	movs	r2, #60	@ 0x3c
 800722c:	2101      	movs	r1, #1
 800722e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	223d      	movs	r2, #61	@ 0x3d
 8007234:	2102      	movs	r1, #2
 8007236:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2270      	movs	r2, #112	@ 0x70
 800724c:	4393      	bics	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a13      	ldr	r2, [pc, #76]	@ (80072b4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d009      	beq.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a11      	ldr	r2, [pc, #68]	@ (80072b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d004      	beq.n	8007280 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a10      	ldr	r2, [pc, #64]	@ (80072bc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d10c      	bne.n	800729a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2280      	movs	r2, #128	@ 0x80
 8007284:	4393      	bics	r3, r2
 8007286:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	4313      	orrs	r3, r2
 8007290:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	223d      	movs	r2, #61	@ 0x3d
 800729e:	2101      	movs	r1, #1
 80072a0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	223c      	movs	r2, #60	@ 0x3c
 80072a6:	2100      	movs	r1, #0
 80072a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	0018      	movs	r0, r3
 80072ae:	46bd      	mov	sp, r7
 80072b0:	b004      	add	sp, #16
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	40012c00 	.word	0x40012c00
 80072b8:	40000400 	.word	0x40000400
 80072bc:	40014000 	.word	0x40014000

080072c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	223c      	movs	r2, #60	@ 0x3c
 80072d2:	5c9b      	ldrb	r3, [r3, r2]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d101      	bne.n	80072dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80072d8:	2302      	movs	r3, #2
 80072da:	e03e      	b.n	800735a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	223c      	movs	r2, #60	@ 0x3c
 80072e0:	2101      	movs	r1, #1
 80072e2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	22ff      	movs	r2, #255	@ 0xff
 80072e8:	4393      	bics	r3, r2
 80072ea:	001a      	movs	r2, r3
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	4a1b      	ldr	r2, [pc, #108]	@ (8007364 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80072f8:	401a      	ands	r2, r3
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	4313      	orrs	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4a18      	ldr	r2, [pc, #96]	@ (8007368 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8007306:	401a      	ands	r2, r3
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	4313      	orrs	r3, r2
 800730e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4a16      	ldr	r2, [pc, #88]	@ (800736c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8007314:	401a      	ands	r2, r3
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4313      	orrs	r3, r2
 800731c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	4a13      	ldr	r2, [pc, #76]	@ (8007370 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8007322:	401a      	ands	r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4a11      	ldr	r2, [pc, #68]	@ (8007374 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8007330:	401a      	ands	r2, r3
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	4a0e      	ldr	r2, [pc, #56]	@ (8007378 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800733e:	401a      	ands	r2, r3
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	69db      	ldr	r3, [r3, #28]
 8007344:	4313      	orrs	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	223c      	movs	r2, #60	@ 0x3c
 8007354:	2100      	movs	r1, #0
 8007356:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	0018      	movs	r0, r3
 800735c:	46bd      	mov	sp, r7
 800735e:	b004      	add	sp, #16
 8007360:	bd80      	pop	{r7, pc}
 8007362:	46c0      	nop			@ (mov r8, r8)
 8007364:	fffffcff 	.word	0xfffffcff
 8007368:	fffffbff 	.word	0xfffffbff
 800736c:	fffff7ff 	.word	0xfffff7ff
 8007370:	ffffefff 	.word	0xffffefff
 8007374:	ffffdfff 	.word	0xffffdfff
 8007378:	ffffbfff 	.word	0xffffbfff

0800737c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d101      	bne.n	800738e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e044      	b.n	8007418 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007392:	2b00      	cmp	r3, #0
 8007394:	d107      	bne.n	80073a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2278      	movs	r2, #120	@ 0x78
 800739a:	2100      	movs	r1, #0
 800739c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	0018      	movs	r0, r3
 80073a2:	f7fc fd5f 	bl	8003e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2224      	movs	r2, #36	@ 0x24
 80073aa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2101      	movs	r1, #1
 80073b8:	438a      	bics	r2, r1
 80073ba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	0018      	movs	r0, r3
 80073c8:	f000 fd46 	bl	8007e58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	0018      	movs	r0, r3
 80073d0:	f000 fc02 	bl	8007bd8 <UART_SetConfig>
 80073d4:	0003      	movs	r3, r0
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d101      	bne.n	80073de <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e01c      	b.n	8007418 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685a      	ldr	r2, [r3, #4]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	490d      	ldr	r1, [pc, #52]	@ (8007420 <HAL_UART_Init+0xa4>)
 80073ea:	400a      	ands	r2, r1
 80073ec:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689a      	ldr	r2, [r3, #8]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2108      	movs	r1, #8
 80073fa:	438a      	bics	r2, r1
 80073fc:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2101      	movs	r1, #1
 800740a:	430a      	orrs	r2, r1
 800740c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	0018      	movs	r0, r3
 8007412:	f000 fdd5 	bl	8007fc0 <UART_CheckIdleState>
 8007416:	0003      	movs	r3, r0
}
 8007418:	0018      	movs	r0, r3
 800741a:	46bd      	mov	sp, r7
 800741c:	b002      	add	sp, #8
 800741e:	bd80      	pop	{r7, pc}
 8007420:	fffff7ff 	.word	0xfffff7ff

08007424 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b08a      	sub	sp, #40	@ 0x28
 8007428:	af02      	add	r7, sp, #8
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	603b      	str	r3, [r7, #0]
 8007430:	1dbb      	adds	r3, r7, #6
 8007432:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007438:	2b20      	cmp	r3, #32
 800743a:	d000      	beq.n	800743e <HAL_UART_Transmit+0x1a>
 800743c:	e08c      	b.n	8007558 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <HAL_UART_Transmit+0x28>
 8007444:	1dbb      	adds	r3, r7, #6
 8007446:	881b      	ldrh	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d101      	bne.n	8007450 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e084      	b.n	800755a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	2380      	movs	r3, #128	@ 0x80
 8007456:	015b      	lsls	r3, r3, #5
 8007458:	429a      	cmp	r2, r3
 800745a:	d109      	bne.n	8007470 <HAL_UART_Transmit+0x4c>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d105      	bne.n	8007470 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	2201      	movs	r2, #1
 8007468:	4013      	ands	r3, r2
 800746a:	d001      	beq.n	8007470 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e074      	b.n	800755a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2284      	movs	r2, #132	@ 0x84
 8007474:	2100      	movs	r1, #0
 8007476:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2221      	movs	r2, #33	@ 0x21
 800747c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800747e:	f7fc fed1 	bl	8004224 <HAL_GetTick>
 8007482:	0003      	movs	r3, r0
 8007484:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	1dba      	adds	r2, r7, #6
 800748a:	2150      	movs	r1, #80	@ 0x50
 800748c:	8812      	ldrh	r2, [r2, #0]
 800748e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	1dba      	adds	r2, r7, #6
 8007494:	2152      	movs	r1, #82	@ 0x52
 8007496:	8812      	ldrh	r2, [r2, #0]
 8007498:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	689a      	ldr	r2, [r3, #8]
 800749e:	2380      	movs	r3, #128	@ 0x80
 80074a0:	015b      	lsls	r3, r3, #5
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d108      	bne.n	80074b8 <HAL_UART_Transmit+0x94>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d104      	bne.n	80074b8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	61bb      	str	r3, [r7, #24]
 80074b6:	e003      	b.n	80074c0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074bc:	2300      	movs	r3, #0
 80074be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074c0:	e02f      	b.n	8007522 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	0013      	movs	r3, r2
 80074cc:	2200      	movs	r2, #0
 80074ce:	2180      	movs	r1, #128	@ 0x80
 80074d0:	f000 fe1e 	bl	8008110 <UART_WaitOnFlagUntilTimeout>
 80074d4:	1e03      	subs	r3, r0, #0
 80074d6:	d004      	beq.n	80074e2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2220      	movs	r2, #32
 80074dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e03b      	b.n	800755a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10b      	bne.n	8007500 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	881a      	ldrh	r2, [r3, #0]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	05d2      	lsls	r2, r2, #23
 80074f2:	0dd2      	lsrs	r2, r2, #23
 80074f4:	b292      	uxth	r2, r2
 80074f6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	3302      	adds	r3, #2
 80074fc:	61bb      	str	r3, [r7, #24]
 80074fe:	e007      	b.n	8007510 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	781a      	ldrb	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	3301      	adds	r3, #1
 800750e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2252      	movs	r2, #82	@ 0x52
 8007514:	5a9b      	ldrh	r3, [r3, r2]
 8007516:	b29b      	uxth	r3, r3
 8007518:	3b01      	subs	r3, #1
 800751a:	b299      	uxth	r1, r3
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2252      	movs	r2, #82	@ 0x52
 8007520:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2252      	movs	r2, #82	@ 0x52
 8007526:	5a9b      	ldrh	r3, [r3, r2]
 8007528:	b29b      	uxth	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1c9      	bne.n	80074c2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	0013      	movs	r3, r2
 8007538:	2200      	movs	r2, #0
 800753a:	2140      	movs	r1, #64	@ 0x40
 800753c:	f000 fde8 	bl	8008110 <UART_WaitOnFlagUntilTimeout>
 8007540:	1e03      	subs	r3, r0, #0
 8007542:	d004      	beq.n	800754e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2220      	movs	r2, #32
 8007548:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e005      	b.n	800755a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2220      	movs	r2, #32
 8007552:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	e000      	b.n	800755a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8007558:	2302      	movs	r3, #2
  }
}
 800755a:	0018      	movs	r0, r3
 800755c:	46bd      	mov	sp, r7
 800755e:	b008      	add	sp, #32
 8007560:	bd80      	pop	{r7, pc}

08007562 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b088      	sub	sp, #32
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	1dbb      	adds	r3, r7, #6
 800756e:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2280      	movs	r2, #128	@ 0x80
 8007574:	589b      	ldr	r3, [r3, r2]
 8007576:	2b20      	cmp	r3, #32
 8007578:	d145      	bne.n	8007606 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d003      	beq.n	8007588 <HAL_UART_Receive_IT+0x26>
 8007580:	1dbb      	adds	r3, r7, #6
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e03d      	b.n	8007608 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	2380      	movs	r3, #128	@ 0x80
 8007592:	015b      	lsls	r3, r3, #5
 8007594:	429a      	cmp	r2, r3
 8007596:	d109      	bne.n	80075ac <HAL_UART_Receive_IT+0x4a>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d105      	bne.n	80075ac <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	2201      	movs	r2, #1
 80075a4:	4013      	ands	r3, r2
 80075a6:	d001      	beq.n	80075ac <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e02d      	b.n	8007608 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2200      	movs	r2, #0
 80075b0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	2380      	movs	r3, #128	@ 0x80
 80075ba:	041b      	lsls	r3, r3, #16
 80075bc:	4013      	ands	r3, r2
 80075be:	d019      	beq.n	80075f4 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075c0:	f3ef 8310 	mrs	r3, PRIMASK
 80075c4:	613b      	str	r3, [r7, #16]
  return(result);
 80075c6:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075c8:	61fb      	str	r3, [r7, #28]
 80075ca:	2301      	movs	r3, #1
 80075cc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f383 8810 	msr	PRIMASK, r3
}
 80075d4:	46c0      	nop			@ (mov r8, r8)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2180      	movs	r1, #128	@ 0x80
 80075e2:	04c9      	lsls	r1, r1, #19
 80075e4:	430a      	orrs	r2, r1
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	f383 8810 	msr	PRIMASK, r3
}
 80075f2:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80075f4:	1dbb      	adds	r3, r7, #6
 80075f6:	881a      	ldrh	r2, [r3, #0]
 80075f8:	68b9      	ldr	r1, [r7, #8]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	0018      	movs	r0, r3
 80075fe:	f000 fdf7 	bl	80081f0 <UART_Start_Receive_IT>
 8007602:	0003      	movs	r3, r0
 8007604:	e000      	b.n	8007608 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8007606:	2302      	movs	r3, #2
  }
}
 8007608:	0018      	movs	r0, r3
 800760a:	46bd      	mov	sp, r7
 800760c:	b008      	add	sp, #32
 800760e:	bd80      	pop	{r7, pc}

08007610 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007610:	b590      	push	{r4, r7, lr}
 8007612:	b0ab      	sub	sp, #172	@ 0xac
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	22a4      	movs	r2, #164	@ 0xa4
 8007620:	18b9      	adds	r1, r7, r2
 8007622:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	20a0      	movs	r0, #160	@ 0xa0
 800762c:	1839      	adds	r1, r7, r0
 800762e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	219c      	movs	r1, #156	@ 0x9c
 8007638:	1879      	adds	r1, r7, r1
 800763a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800763c:	0011      	movs	r1, r2
 800763e:	18bb      	adds	r3, r7, r2
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a99      	ldr	r2, [pc, #612]	@ (80078a8 <HAL_UART_IRQHandler+0x298>)
 8007644:	4013      	ands	r3, r2
 8007646:	2298      	movs	r2, #152	@ 0x98
 8007648:	18bc      	adds	r4, r7, r2
 800764a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800764c:	18bb      	adds	r3, r7, r2
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d114      	bne.n	800767e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007654:	187b      	adds	r3, r7, r1
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2220      	movs	r2, #32
 800765a:	4013      	ands	r3, r2
 800765c:	d00f      	beq.n	800767e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800765e:	183b      	adds	r3, r7, r0
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2220      	movs	r2, #32
 8007664:	4013      	ands	r3, r2
 8007666:	d00a      	beq.n	800767e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800766c:	2b00      	cmp	r3, #0
 800766e:	d100      	bne.n	8007672 <HAL_UART_IRQHandler+0x62>
 8007670:	e286      	b.n	8007b80 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	0010      	movs	r0, r2
 800767a:	4798      	blx	r3
      }
      return;
 800767c:	e280      	b.n	8007b80 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800767e:	2398      	movs	r3, #152	@ 0x98
 8007680:	18fb      	adds	r3, r7, r3
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d100      	bne.n	800768a <HAL_UART_IRQHandler+0x7a>
 8007688:	e114      	b.n	80078b4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800768a:	239c      	movs	r3, #156	@ 0x9c
 800768c:	18fb      	adds	r3, r7, r3
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2201      	movs	r2, #1
 8007692:	4013      	ands	r3, r2
 8007694:	d106      	bne.n	80076a4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007696:	23a0      	movs	r3, #160	@ 0xa0
 8007698:	18fb      	adds	r3, r7, r3
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a83      	ldr	r2, [pc, #524]	@ (80078ac <HAL_UART_IRQHandler+0x29c>)
 800769e:	4013      	ands	r3, r2
 80076a0:	d100      	bne.n	80076a4 <HAL_UART_IRQHandler+0x94>
 80076a2:	e107      	b.n	80078b4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076a4:	23a4      	movs	r3, #164	@ 0xa4
 80076a6:	18fb      	adds	r3, r7, r3
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2201      	movs	r2, #1
 80076ac:	4013      	ands	r3, r2
 80076ae:	d012      	beq.n	80076d6 <HAL_UART_IRQHandler+0xc6>
 80076b0:	23a0      	movs	r3, #160	@ 0xa0
 80076b2:	18fb      	adds	r3, r7, r3
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	2380      	movs	r3, #128	@ 0x80
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	4013      	ands	r3, r2
 80076bc:	d00b      	beq.n	80076d6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2201      	movs	r2, #1
 80076c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2284      	movs	r2, #132	@ 0x84
 80076ca:	589b      	ldr	r3, [r3, r2]
 80076cc:	2201      	movs	r2, #1
 80076ce:	431a      	orrs	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2184      	movs	r1, #132	@ 0x84
 80076d4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076d6:	23a4      	movs	r3, #164	@ 0xa4
 80076d8:	18fb      	adds	r3, r7, r3
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2202      	movs	r2, #2
 80076de:	4013      	ands	r3, r2
 80076e0:	d011      	beq.n	8007706 <HAL_UART_IRQHandler+0xf6>
 80076e2:	239c      	movs	r3, #156	@ 0x9c
 80076e4:	18fb      	adds	r3, r7, r3
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2201      	movs	r2, #1
 80076ea:	4013      	ands	r3, r2
 80076ec:	d00b      	beq.n	8007706 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2202      	movs	r2, #2
 80076f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2284      	movs	r2, #132	@ 0x84
 80076fa:	589b      	ldr	r3, [r3, r2]
 80076fc:	2204      	movs	r2, #4
 80076fe:	431a      	orrs	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2184      	movs	r1, #132	@ 0x84
 8007704:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007706:	23a4      	movs	r3, #164	@ 0xa4
 8007708:	18fb      	adds	r3, r7, r3
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2204      	movs	r2, #4
 800770e:	4013      	ands	r3, r2
 8007710:	d011      	beq.n	8007736 <HAL_UART_IRQHandler+0x126>
 8007712:	239c      	movs	r3, #156	@ 0x9c
 8007714:	18fb      	adds	r3, r7, r3
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2201      	movs	r2, #1
 800771a:	4013      	ands	r3, r2
 800771c:	d00b      	beq.n	8007736 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2204      	movs	r2, #4
 8007724:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2284      	movs	r2, #132	@ 0x84
 800772a:	589b      	ldr	r3, [r3, r2]
 800772c:	2202      	movs	r2, #2
 800772e:	431a      	orrs	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2184      	movs	r1, #132	@ 0x84
 8007734:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007736:	23a4      	movs	r3, #164	@ 0xa4
 8007738:	18fb      	adds	r3, r7, r3
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2208      	movs	r2, #8
 800773e:	4013      	ands	r3, r2
 8007740:	d017      	beq.n	8007772 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007742:	23a0      	movs	r3, #160	@ 0xa0
 8007744:	18fb      	adds	r3, r7, r3
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2220      	movs	r2, #32
 800774a:	4013      	ands	r3, r2
 800774c:	d105      	bne.n	800775a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800774e:	239c      	movs	r3, #156	@ 0x9c
 8007750:	18fb      	adds	r3, r7, r3
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2201      	movs	r2, #1
 8007756:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007758:	d00b      	beq.n	8007772 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2208      	movs	r2, #8
 8007760:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2284      	movs	r2, #132	@ 0x84
 8007766:	589b      	ldr	r3, [r3, r2]
 8007768:	2208      	movs	r2, #8
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2184      	movs	r1, #132	@ 0x84
 8007770:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007772:	23a4      	movs	r3, #164	@ 0xa4
 8007774:	18fb      	adds	r3, r7, r3
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	2380      	movs	r3, #128	@ 0x80
 800777a:	011b      	lsls	r3, r3, #4
 800777c:	4013      	ands	r3, r2
 800777e:	d013      	beq.n	80077a8 <HAL_UART_IRQHandler+0x198>
 8007780:	23a0      	movs	r3, #160	@ 0xa0
 8007782:	18fb      	adds	r3, r7, r3
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	2380      	movs	r3, #128	@ 0x80
 8007788:	04db      	lsls	r3, r3, #19
 800778a:	4013      	ands	r3, r2
 800778c:	d00c      	beq.n	80077a8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2280      	movs	r2, #128	@ 0x80
 8007794:	0112      	lsls	r2, r2, #4
 8007796:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2284      	movs	r2, #132	@ 0x84
 800779c:	589b      	ldr	r3, [r3, r2]
 800779e:	2220      	movs	r2, #32
 80077a0:	431a      	orrs	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2184      	movs	r1, #132	@ 0x84
 80077a6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2284      	movs	r2, #132	@ 0x84
 80077ac:	589b      	ldr	r3, [r3, r2]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d100      	bne.n	80077b4 <HAL_UART_IRQHandler+0x1a4>
 80077b2:	e1e7      	b.n	8007b84 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80077b4:	23a4      	movs	r3, #164	@ 0xa4
 80077b6:	18fb      	adds	r3, r7, r3
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2220      	movs	r2, #32
 80077bc:	4013      	ands	r3, r2
 80077be:	d00e      	beq.n	80077de <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80077c0:	23a0      	movs	r3, #160	@ 0xa0
 80077c2:	18fb      	adds	r3, r7, r3
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2220      	movs	r2, #32
 80077c8:	4013      	ands	r3, r2
 80077ca:	d008      	beq.n	80077de <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d004      	beq.n	80077de <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	0010      	movs	r0, r2
 80077dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2284      	movs	r2, #132	@ 0x84
 80077e2:	589b      	ldr	r3, [r3, r2]
 80077e4:	2194      	movs	r1, #148	@ 0x94
 80077e6:	187a      	adds	r2, r7, r1
 80077e8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	2240      	movs	r2, #64	@ 0x40
 80077f2:	4013      	ands	r3, r2
 80077f4:	2b40      	cmp	r3, #64	@ 0x40
 80077f6:	d004      	beq.n	8007802 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80077f8:	187b      	adds	r3, r7, r1
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2228      	movs	r2, #40	@ 0x28
 80077fe:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007800:	d047      	beq.n	8007892 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	0018      	movs	r0, r3
 8007806:	f000 fda9 	bl	800835c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	2240      	movs	r2, #64	@ 0x40
 8007812:	4013      	ands	r3, r2
 8007814:	2b40      	cmp	r3, #64	@ 0x40
 8007816:	d137      	bne.n	8007888 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007818:	f3ef 8310 	mrs	r3, PRIMASK
 800781c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800781e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007820:	2090      	movs	r0, #144	@ 0x90
 8007822:	183a      	adds	r2, r7, r0
 8007824:	6013      	str	r3, [r2, #0]
 8007826:	2301      	movs	r3, #1
 8007828:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800782a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800782c:	f383 8810 	msr	PRIMASK, r3
}
 8007830:	46c0      	nop			@ (mov r8, r8)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689a      	ldr	r2, [r3, #8]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2140      	movs	r1, #64	@ 0x40
 800783e:	438a      	bics	r2, r1
 8007840:	609a      	str	r2, [r3, #8]
 8007842:	183b      	adds	r3, r7, r0
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007848:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800784a:	f383 8810 	msr	PRIMASK, r3
}
 800784e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007854:	2b00      	cmp	r3, #0
 8007856:	d012      	beq.n	800787e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800785c:	4a14      	ldr	r2, [pc, #80]	@ (80078b0 <HAL_UART_IRQHandler+0x2a0>)
 800785e:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007864:	0018      	movs	r0, r3
 8007866:	f7fc fecf 	bl	8004608 <HAL_DMA_Abort_IT>
 800786a:	1e03      	subs	r3, r0, #0
 800786c:	d01a      	beq.n	80078a4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007878:	0018      	movs	r0, r3
 800787a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800787c:	e012      	b.n	80078a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	0018      	movs	r0, r3
 8007882:	f000 f995 	bl	8007bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007886:	e00d      	b.n	80078a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	0018      	movs	r0, r3
 800788c:	f000 f990 	bl	8007bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007890:	e008      	b.n	80078a4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	0018      	movs	r0, r3
 8007896:	f000 f98b 	bl	8007bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2284      	movs	r2, #132	@ 0x84
 800789e:	2100      	movs	r1, #0
 80078a0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80078a2:	e16f      	b.n	8007b84 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a4:	46c0      	nop			@ (mov r8, r8)
    return;
 80078a6:	e16d      	b.n	8007b84 <HAL_UART_IRQHandler+0x574>
 80078a8:	0000080f 	.word	0x0000080f
 80078ac:	04000120 	.word	0x04000120
 80078b0:	08008425 	.word	0x08008425

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d000      	beq.n	80078be <HAL_UART_IRQHandler+0x2ae>
 80078bc:	e139      	b.n	8007b32 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078be:	23a4      	movs	r3, #164	@ 0xa4
 80078c0:	18fb      	adds	r3, r7, r3
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2210      	movs	r2, #16
 80078c6:	4013      	ands	r3, r2
 80078c8:	d100      	bne.n	80078cc <HAL_UART_IRQHandler+0x2bc>
 80078ca:	e132      	b.n	8007b32 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078cc:	23a0      	movs	r3, #160	@ 0xa0
 80078ce:	18fb      	adds	r3, r7, r3
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2210      	movs	r2, #16
 80078d4:	4013      	ands	r3, r2
 80078d6:	d100      	bne.n	80078da <HAL_UART_IRQHandler+0x2ca>
 80078d8:	e12b      	b.n	8007b32 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2210      	movs	r2, #16
 80078e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	2240      	movs	r2, #64	@ 0x40
 80078ea:	4013      	ands	r3, r2
 80078ec:	2b40      	cmp	r3, #64	@ 0x40
 80078ee:	d000      	beq.n	80078f2 <HAL_UART_IRQHandler+0x2e2>
 80078f0:	e09f      	b.n	8007a32 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	685a      	ldr	r2, [r3, #4]
 80078fa:	217e      	movs	r1, #126	@ 0x7e
 80078fc:	187b      	adds	r3, r7, r1
 80078fe:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007900:	187b      	adds	r3, r7, r1
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d100      	bne.n	800790a <HAL_UART_IRQHandler+0x2fa>
 8007908:	e13e      	b.n	8007b88 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2258      	movs	r2, #88	@ 0x58
 800790e:	5a9b      	ldrh	r3, [r3, r2]
 8007910:	187a      	adds	r2, r7, r1
 8007912:	8812      	ldrh	r2, [r2, #0]
 8007914:	429a      	cmp	r2, r3
 8007916:	d300      	bcc.n	800791a <HAL_UART_IRQHandler+0x30a>
 8007918:	e136      	b.n	8007b88 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	187a      	adds	r2, r7, r1
 800791e:	215a      	movs	r1, #90	@ 0x5a
 8007920:	8812      	ldrh	r2, [r2, #0]
 8007922:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	2b20      	cmp	r3, #32
 800792c:	d06f      	beq.n	8007a0e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800792e:	f3ef 8310 	mrs	r3, PRIMASK
 8007932:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8007934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007936:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007938:	2301      	movs	r3, #1
 800793a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800793c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800793e:	f383 8810 	msr	PRIMASK, r3
}
 8007942:	46c0      	nop			@ (mov r8, r8)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4992      	ldr	r1, [pc, #584]	@ (8007b98 <HAL_UART_IRQHandler+0x588>)
 8007950:	400a      	ands	r2, r1
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007956:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795a:	f383 8810 	msr	PRIMASK, r3
}
 800795e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007960:	f3ef 8310 	mrs	r3, PRIMASK
 8007964:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8007966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007968:	677b      	str	r3, [r7, #116]	@ 0x74
 800796a:	2301      	movs	r3, #1
 800796c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800796e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007970:	f383 8810 	msr	PRIMASK, r3
}
 8007974:	46c0      	nop			@ (mov r8, r8)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2101      	movs	r1, #1
 8007982:	438a      	bics	r2, r1
 8007984:	609a      	str	r2, [r3, #8]
 8007986:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007988:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800798a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800798c:	f383 8810 	msr	PRIMASK, r3
}
 8007990:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007992:	f3ef 8310 	mrs	r3, PRIMASK
 8007996:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8007998:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800799a:	673b      	str	r3, [r7, #112]	@ 0x70
 800799c:	2301      	movs	r3, #1
 800799e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079a2:	f383 8810 	msr	PRIMASK, r3
}
 80079a6:	46c0      	nop			@ (mov r8, r8)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	2140      	movs	r1, #64	@ 0x40
 80079b4:	438a      	bics	r2, r1
 80079b6:	609a      	str	r2, [r3, #8]
 80079b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079ba:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80079be:	f383 8810 	msr	PRIMASK, r3
}
 80079c2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2280      	movs	r2, #128	@ 0x80
 80079c8:	2120      	movs	r1, #32
 80079ca:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079d2:	f3ef 8310 	mrs	r3, PRIMASK
 80079d6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80079d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80079dc:	2301      	movs	r3, #1
 80079de:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079e2:	f383 8810 	msr	PRIMASK, r3
}
 80079e6:	46c0      	nop			@ (mov r8, r8)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2110      	movs	r1, #16
 80079f4:	438a      	bics	r2, r1
 80079f6:	601a      	str	r2, [r3, #0]
 80079f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079fe:	f383 8810 	msr	PRIMASK, r3
}
 8007a02:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a08:	0018      	movs	r0, r3
 8007a0a:	f7fc fdc5 	bl	8004598 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2202      	movs	r2, #2
 8007a12:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2258      	movs	r2, #88	@ 0x58
 8007a18:	5a9a      	ldrh	r2, [r3, r2]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	215a      	movs	r1, #90	@ 0x5a
 8007a1e:	5a5b      	ldrh	r3, [r3, r1]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	0011      	movs	r1, r2
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	f000 f8c8 	bl	8007bc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a30:	e0aa      	b.n	8007b88 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2258      	movs	r2, #88	@ 0x58
 8007a36:	5a99      	ldrh	r1, [r3, r2]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	225a      	movs	r2, #90	@ 0x5a
 8007a3c:	5a9b      	ldrh	r3, [r3, r2]
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	208e      	movs	r0, #142	@ 0x8e
 8007a42:	183b      	adds	r3, r7, r0
 8007a44:	1a8a      	subs	r2, r1, r2
 8007a46:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	225a      	movs	r2, #90	@ 0x5a
 8007a4c:	5a9b      	ldrh	r3, [r3, r2]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d100      	bne.n	8007a56 <HAL_UART_IRQHandler+0x446>
 8007a54:	e09a      	b.n	8007b8c <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8007a56:	183b      	adds	r3, r7, r0
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d100      	bne.n	8007a60 <HAL_UART_IRQHandler+0x450>
 8007a5e:	e095      	b.n	8007b8c <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a60:	f3ef 8310 	mrs	r3, PRIMASK
 8007a64:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a66:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a68:	2488      	movs	r4, #136	@ 0x88
 8007a6a:	193a      	adds	r2, r7, r4
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	2301      	movs	r3, #1
 8007a70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	f383 8810 	msr	PRIMASK, r3
}
 8007a78:	46c0      	nop			@ (mov r8, r8)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4945      	ldr	r1, [pc, #276]	@ (8007b9c <HAL_UART_IRQHandler+0x58c>)
 8007a86:	400a      	ands	r2, r1
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	193b      	adds	r3, r7, r4
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	f383 8810 	msr	PRIMASK, r3
}
 8007a96:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a98:	f3ef 8310 	mrs	r3, PRIMASK
 8007a9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a9e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa0:	2484      	movs	r4, #132	@ 0x84
 8007aa2:	193a      	adds	r2, r7, r4
 8007aa4:	6013      	str	r3, [r2, #0]
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	f383 8810 	msr	PRIMASK, r3
}
 8007ab0:	46c0      	nop			@ (mov r8, r8)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	689a      	ldr	r2, [r3, #8]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2101      	movs	r1, #1
 8007abe:	438a      	bics	r2, r1
 8007ac0:	609a      	str	r2, [r3, #8]
 8007ac2:	193b      	adds	r3, r7, r4
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	f383 8810 	msr	PRIMASK, r3
}
 8007ace:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2280      	movs	r2, #128	@ 0x80
 8007ad4:	2120      	movs	r1, #32
 8007ad6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ae4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ae8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aec:	2480      	movs	r4, #128	@ 0x80
 8007aee:	193a      	adds	r2, r7, r4
 8007af0:	6013      	str	r3, [r2, #0]
 8007af2:	2301      	movs	r3, #1
 8007af4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af8:	f383 8810 	msr	PRIMASK, r3
}
 8007afc:	46c0      	nop			@ (mov r8, r8)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2110      	movs	r1, #16
 8007b0a:	438a      	bics	r2, r1
 8007b0c:	601a      	str	r2, [r3, #0]
 8007b0e:	193b      	adds	r3, r7, r4
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b16:	f383 8810 	msr	PRIMASK, r3
}
 8007b1a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b22:	183b      	adds	r3, r7, r0
 8007b24:	881a      	ldrh	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	0011      	movs	r1, r2
 8007b2a:	0018      	movs	r0, r3
 8007b2c:	f000 f848 	bl	8007bc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b30:	e02c      	b.n	8007b8c <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007b32:	23a4      	movs	r3, #164	@ 0xa4
 8007b34:	18fb      	adds	r3, r7, r3
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2280      	movs	r2, #128	@ 0x80
 8007b3a:	4013      	ands	r3, r2
 8007b3c:	d00f      	beq.n	8007b5e <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007b3e:	23a0      	movs	r3, #160	@ 0xa0
 8007b40:	18fb      	adds	r3, r7, r3
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2280      	movs	r2, #128	@ 0x80
 8007b46:	4013      	ands	r3, r2
 8007b48:	d009      	beq.n	8007b5e <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d01e      	beq.n	8007b90 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	0010      	movs	r0, r2
 8007b5a:	4798      	blx	r3
    }
    return;
 8007b5c:	e018      	b.n	8007b90 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b5e:	23a4      	movs	r3, #164	@ 0xa4
 8007b60:	18fb      	adds	r3, r7, r3
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2240      	movs	r2, #64	@ 0x40
 8007b66:	4013      	ands	r3, r2
 8007b68:	d013      	beq.n	8007b92 <HAL_UART_IRQHandler+0x582>
 8007b6a:	23a0      	movs	r3, #160	@ 0xa0
 8007b6c:	18fb      	adds	r3, r7, r3
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2240      	movs	r2, #64	@ 0x40
 8007b72:	4013      	ands	r3, r2
 8007b74:	d00d      	beq.n	8007b92 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	0018      	movs	r0, r3
 8007b7a:	f000 fc6a 	bl	8008452 <UART_EndTransmit_IT>
    return;
 8007b7e:	e008      	b.n	8007b92 <HAL_UART_IRQHandler+0x582>
      return;
 8007b80:	46c0      	nop			@ (mov r8, r8)
 8007b82:	e006      	b.n	8007b92 <HAL_UART_IRQHandler+0x582>
    return;
 8007b84:	46c0      	nop			@ (mov r8, r8)
 8007b86:	e004      	b.n	8007b92 <HAL_UART_IRQHandler+0x582>
      return;
 8007b88:	46c0      	nop			@ (mov r8, r8)
 8007b8a:	e002      	b.n	8007b92 <HAL_UART_IRQHandler+0x582>
      return;
 8007b8c:	46c0      	nop			@ (mov r8, r8)
 8007b8e:	e000      	b.n	8007b92 <HAL_UART_IRQHandler+0x582>
    return;
 8007b90:	46c0      	nop			@ (mov r8, r8)
  }

}
 8007b92:	46bd      	mov	sp, r7
 8007b94:	b02b      	add	sp, #172	@ 0xac
 8007b96:	bd90      	pop	{r4, r7, pc}
 8007b98:	fffffeff 	.word	0xfffffeff
 8007b9c:	fffffedf 	.word	0xfffffedf

08007ba0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ba8:	46c0      	nop			@ (mov r8, r8)
 8007baa:	46bd      	mov	sp, r7
 8007bac:	b002      	add	sp, #8
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007bb8:	46c0      	nop			@ (mov r8, r8)
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	b002      	add	sp, #8
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	000a      	movs	r2, r1
 8007bca:	1cbb      	adds	r3, r7, #2
 8007bcc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007bce:	46c0      	nop			@ (mov r8, r8)
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	b002      	add	sp, #8
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b088      	sub	sp, #32
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007be0:	231e      	movs	r3, #30
 8007be2:	18fb      	adds	r3, r7, r3
 8007be4:	2200      	movs	r2, #0
 8007be6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	695b      	ldr	r3, [r3, #20]
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a8d      	ldr	r2, [pc, #564]	@ (8007e3c <UART_SetConfig+0x264>)
 8007c08:	4013      	ands	r3, r2
 8007c0a:	0019      	movs	r1, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	4a88      	ldr	r2, [pc, #544]	@ (8007e40 <UART_SetConfig+0x268>)
 8007c1e:	4013      	ands	r3, r2
 8007c20:	0019      	movs	r1, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68da      	ldr	r2, [r3, #12]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a1b      	ldr	r3, [r3, #32]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	4a7f      	ldr	r2, [pc, #508]	@ (8007e44 <UART_SetConfig+0x26c>)
 8007c46:	4013      	ands	r3, r2
 8007c48:	0019      	movs	r1, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a7b      	ldr	r2, [pc, #492]	@ (8007e48 <UART_SetConfig+0x270>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d127      	bne.n	8007cae <UART_SetConfig+0xd6>
 8007c5e:	4b7b      	ldr	r3, [pc, #492]	@ (8007e4c <UART_SetConfig+0x274>)
 8007c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c62:	2203      	movs	r2, #3
 8007c64:	4013      	ands	r3, r2
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d00d      	beq.n	8007c86 <UART_SetConfig+0xae>
 8007c6a:	d81b      	bhi.n	8007ca4 <UART_SetConfig+0xcc>
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d014      	beq.n	8007c9a <UART_SetConfig+0xc2>
 8007c70:	d818      	bhi.n	8007ca4 <UART_SetConfig+0xcc>
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d002      	beq.n	8007c7c <UART_SetConfig+0xa4>
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d00a      	beq.n	8007c90 <UART_SetConfig+0xb8>
 8007c7a:	e013      	b.n	8007ca4 <UART_SetConfig+0xcc>
 8007c7c:	231f      	movs	r3, #31
 8007c7e:	18fb      	adds	r3, r7, r3
 8007c80:	2200      	movs	r2, #0
 8007c82:	701a      	strb	r2, [r3, #0]
 8007c84:	e021      	b.n	8007cca <UART_SetConfig+0xf2>
 8007c86:	231f      	movs	r3, #31
 8007c88:	18fb      	adds	r3, r7, r3
 8007c8a:	2202      	movs	r2, #2
 8007c8c:	701a      	strb	r2, [r3, #0]
 8007c8e:	e01c      	b.n	8007cca <UART_SetConfig+0xf2>
 8007c90:	231f      	movs	r3, #31
 8007c92:	18fb      	adds	r3, r7, r3
 8007c94:	2204      	movs	r2, #4
 8007c96:	701a      	strb	r2, [r3, #0]
 8007c98:	e017      	b.n	8007cca <UART_SetConfig+0xf2>
 8007c9a:	231f      	movs	r3, #31
 8007c9c:	18fb      	adds	r3, r7, r3
 8007c9e:	2208      	movs	r2, #8
 8007ca0:	701a      	strb	r2, [r3, #0]
 8007ca2:	e012      	b.n	8007cca <UART_SetConfig+0xf2>
 8007ca4:	231f      	movs	r3, #31
 8007ca6:	18fb      	adds	r3, r7, r3
 8007ca8:	2210      	movs	r2, #16
 8007caa:	701a      	strb	r2, [r3, #0]
 8007cac:	e00d      	b.n	8007cca <UART_SetConfig+0xf2>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a67      	ldr	r2, [pc, #412]	@ (8007e50 <UART_SetConfig+0x278>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d104      	bne.n	8007cc2 <UART_SetConfig+0xea>
 8007cb8:	231f      	movs	r3, #31
 8007cba:	18fb      	adds	r3, r7, r3
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	701a      	strb	r2, [r3, #0]
 8007cc0:	e003      	b.n	8007cca <UART_SetConfig+0xf2>
 8007cc2:	231f      	movs	r3, #31
 8007cc4:	18fb      	adds	r3, r7, r3
 8007cc6:	2210      	movs	r2, #16
 8007cc8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	69da      	ldr	r2, [r3, #28]
 8007cce:	2380      	movs	r3, #128	@ 0x80
 8007cd0:	021b      	lsls	r3, r3, #8
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d15c      	bne.n	8007d90 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8007cd6:	231f      	movs	r3, #31
 8007cd8:	18fb      	adds	r3, r7, r3
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b08      	cmp	r3, #8
 8007cde:	d015      	beq.n	8007d0c <UART_SetConfig+0x134>
 8007ce0:	dc18      	bgt.n	8007d14 <UART_SetConfig+0x13c>
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	d00d      	beq.n	8007d02 <UART_SetConfig+0x12a>
 8007ce6:	dc15      	bgt.n	8007d14 <UART_SetConfig+0x13c>
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <UART_SetConfig+0x11a>
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d005      	beq.n	8007cfc <UART_SetConfig+0x124>
 8007cf0:	e010      	b.n	8007d14 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cf2:	f7fe f8b5 	bl	8005e60 <HAL_RCC_GetPCLK1Freq>
 8007cf6:	0003      	movs	r3, r0
 8007cf8:	61bb      	str	r3, [r7, #24]
        break;
 8007cfa:	e012      	b.n	8007d22 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cfc:	4b55      	ldr	r3, [pc, #340]	@ (8007e54 <UART_SetConfig+0x27c>)
 8007cfe:	61bb      	str	r3, [r7, #24]
        break;
 8007d00:	e00f      	b.n	8007d22 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d02:	f7fe f84d 	bl	8005da0 <HAL_RCC_GetSysClockFreq>
 8007d06:	0003      	movs	r3, r0
 8007d08:	61bb      	str	r3, [r7, #24]
        break;
 8007d0a:	e00a      	b.n	8007d22 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d0c:	2380      	movs	r3, #128	@ 0x80
 8007d0e:	021b      	lsls	r3, r3, #8
 8007d10:	61bb      	str	r3, [r7, #24]
        break;
 8007d12:	e006      	b.n	8007d22 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d18:	231e      	movs	r3, #30
 8007d1a:	18fb      	adds	r3, r7, r3
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	701a      	strb	r2, [r3, #0]
        break;
 8007d20:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d100      	bne.n	8007d2a <UART_SetConfig+0x152>
 8007d28:	e07a      	b.n	8007e20 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	005a      	lsls	r2, r3, #1
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	085b      	lsrs	r3, r3, #1
 8007d34:	18d2      	adds	r2, r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	0019      	movs	r1, r3
 8007d3c:	0010      	movs	r0, r2
 8007d3e:	f7f8 fa09 	bl	8000154 <__udivsi3>
 8007d42:	0003      	movs	r3, r0
 8007d44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	2b0f      	cmp	r3, #15
 8007d4a:	d91c      	bls.n	8007d86 <UART_SetConfig+0x1ae>
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	2380      	movs	r3, #128	@ 0x80
 8007d50:	025b      	lsls	r3, r3, #9
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d217      	bcs.n	8007d86 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	200e      	movs	r0, #14
 8007d5c:	183b      	adds	r3, r7, r0
 8007d5e:	210f      	movs	r1, #15
 8007d60:	438a      	bics	r2, r1
 8007d62:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	085b      	lsrs	r3, r3, #1
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	2207      	movs	r2, #7
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	b299      	uxth	r1, r3
 8007d70:	183b      	adds	r3, r7, r0
 8007d72:	183a      	adds	r2, r7, r0
 8007d74:	8812      	ldrh	r2, [r2, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	183a      	adds	r2, r7, r0
 8007d80:	8812      	ldrh	r2, [r2, #0]
 8007d82:	60da      	str	r2, [r3, #12]
 8007d84:	e04c      	b.n	8007e20 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8007d86:	231e      	movs	r3, #30
 8007d88:	18fb      	adds	r3, r7, r3
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	701a      	strb	r2, [r3, #0]
 8007d8e:	e047      	b.n	8007e20 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d90:	231f      	movs	r3, #31
 8007d92:	18fb      	adds	r3, r7, r3
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	2b08      	cmp	r3, #8
 8007d98:	d015      	beq.n	8007dc6 <UART_SetConfig+0x1ee>
 8007d9a:	dc18      	bgt.n	8007dce <UART_SetConfig+0x1f6>
 8007d9c:	2b04      	cmp	r3, #4
 8007d9e:	d00d      	beq.n	8007dbc <UART_SetConfig+0x1e4>
 8007da0:	dc15      	bgt.n	8007dce <UART_SetConfig+0x1f6>
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d002      	beq.n	8007dac <UART_SetConfig+0x1d4>
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d005      	beq.n	8007db6 <UART_SetConfig+0x1de>
 8007daa:	e010      	b.n	8007dce <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dac:	f7fe f858 	bl	8005e60 <HAL_RCC_GetPCLK1Freq>
 8007db0:	0003      	movs	r3, r0
 8007db2:	61bb      	str	r3, [r7, #24]
        break;
 8007db4:	e012      	b.n	8007ddc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007db6:	4b27      	ldr	r3, [pc, #156]	@ (8007e54 <UART_SetConfig+0x27c>)
 8007db8:	61bb      	str	r3, [r7, #24]
        break;
 8007dba:	e00f      	b.n	8007ddc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dbc:	f7fd fff0 	bl	8005da0 <HAL_RCC_GetSysClockFreq>
 8007dc0:	0003      	movs	r3, r0
 8007dc2:	61bb      	str	r3, [r7, #24]
        break;
 8007dc4:	e00a      	b.n	8007ddc <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dc6:	2380      	movs	r3, #128	@ 0x80
 8007dc8:	021b      	lsls	r3, r3, #8
 8007dca:	61bb      	str	r3, [r7, #24]
        break;
 8007dcc:	e006      	b.n	8007ddc <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007dd2:	231e      	movs	r3, #30
 8007dd4:	18fb      	adds	r3, r7, r3
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	701a      	strb	r2, [r3, #0]
        break;
 8007dda:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d01e      	beq.n	8007e20 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	085a      	lsrs	r2, r3, #1
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	18d2      	adds	r2, r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	0019      	movs	r1, r3
 8007df2:	0010      	movs	r0, r2
 8007df4:	f7f8 f9ae 	bl	8000154 <__udivsi3>
 8007df8:	0003      	movs	r3, r0
 8007dfa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	2b0f      	cmp	r3, #15
 8007e00:	d90a      	bls.n	8007e18 <UART_SetConfig+0x240>
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	2380      	movs	r3, #128	@ 0x80
 8007e06:	025b      	lsls	r3, r3, #9
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d205      	bcs.n	8007e18 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	b29a      	uxth	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	60da      	str	r2, [r3, #12]
 8007e16:	e003      	b.n	8007e20 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8007e18:	231e      	movs	r3, #30
 8007e1a:	18fb      	adds	r3, r7, r3
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007e2c:	231e      	movs	r3, #30
 8007e2e:	18fb      	adds	r3, r7, r3
 8007e30:	781b      	ldrb	r3, [r3, #0]
}
 8007e32:	0018      	movs	r0, r3
 8007e34:	46bd      	mov	sp, r7
 8007e36:	b008      	add	sp, #32
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	46c0      	nop			@ (mov r8, r8)
 8007e3c:	ffff69f3 	.word	0xffff69f3
 8007e40:	ffffcfff 	.word	0xffffcfff
 8007e44:	fffff4ff 	.word	0xfffff4ff
 8007e48:	40013800 	.word	0x40013800
 8007e4c:	40021000 	.word	0x40021000
 8007e50:	40004400 	.word	0x40004400
 8007e54:	007a1200 	.word	0x007a1200

08007e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e64:	2208      	movs	r2, #8
 8007e66:	4013      	ands	r3, r2
 8007e68:	d00b      	beq.n	8007e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	4a4a      	ldr	r2, [pc, #296]	@ (8007f9c <UART_AdvFeatureConfig+0x144>)
 8007e72:	4013      	ands	r3, r2
 8007e74:	0019      	movs	r1, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e86:	2201      	movs	r2, #1
 8007e88:	4013      	ands	r3, r2
 8007e8a:	d00b      	beq.n	8007ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	4a43      	ldr	r2, [pc, #268]	@ (8007fa0 <UART_AdvFeatureConfig+0x148>)
 8007e94:	4013      	ands	r3, r2
 8007e96:	0019      	movs	r1, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	4013      	ands	r3, r2
 8007eac:	d00b      	beq.n	8007ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	4a3b      	ldr	r2, [pc, #236]	@ (8007fa4 <UART_AdvFeatureConfig+0x14c>)
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	0019      	movs	r1, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eca:	2204      	movs	r2, #4
 8007ecc:	4013      	ands	r3, r2
 8007ece:	d00b      	beq.n	8007ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	4a34      	ldr	r2, [pc, #208]	@ (8007fa8 <UART_AdvFeatureConfig+0x150>)
 8007ed8:	4013      	ands	r3, r2
 8007eda:	0019      	movs	r1, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eec:	2210      	movs	r2, #16
 8007eee:	4013      	ands	r3, r2
 8007ef0:	d00b      	beq.n	8007f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	4a2c      	ldr	r2, [pc, #176]	@ (8007fac <UART_AdvFeatureConfig+0x154>)
 8007efa:	4013      	ands	r3, r2
 8007efc:	0019      	movs	r1, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	430a      	orrs	r2, r1
 8007f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0e:	2220      	movs	r2, #32
 8007f10:	4013      	ands	r3, r2
 8007f12:	d00b      	beq.n	8007f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	4a25      	ldr	r2, [pc, #148]	@ (8007fb0 <UART_AdvFeatureConfig+0x158>)
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	0019      	movs	r1, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f30:	2240      	movs	r2, #64	@ 0x40
 8007f32:	4013      	ands	r3, r2
 8007f34:	d01d      	beq.n	8007f72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007fb4 <UART_AdvFeatureConfig+0x15c>)
 8007f3e:	4013      	ands	r3, r2
 8007f40:	0019      	movs	r1, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f52:	2380      	movs	r3, #128	@ 0x80
 8007f54:	035b      	lsls	r3, r3, #13
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d10b      	bne.n	8007f72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	4a15      	ldr	r2, [pc, #84]	@ (8007fb8 <UART_AdvFeatureConfig+0x160>)
 8007f62:	4013      	ands	r3, r2
 8007f64:	0019      	movs	r1, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f76:	2280      	movs	r2, #128	@ 0x80
 8007f78:	4013      	ands	r3, r2
 8007f7a:	d00b      	beq.n	8007f94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	4a0e      	ldr	r2, [pc, #56]	@ (8007fbc <UART_AdvFeatureConfig+0x164>)
 8007f84:	4013      	ands	r3, r2
 8007f86:	0019      	movs	r1, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	430a      	orrs	r2, r1
 8007f92:	605a      	str	r2, [r3, #4]
  }
}
 8007f94:	46c0      	nop			@ (mov r8, r8)
 8007f96:	46bd      	mov	sp, r7
 8007f98:	b002      	add	sp, #8
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	ffff7fff 	.word	0xffff7fff
 8007fa0:	fffdffff 	.word	0xfffdffff
 8007fa4:	fffeffff 	.word	0xfffeffff
 8007fa8:	fffbffff 	.word	0xfffbffff
 8007fac:	ffffefff 	.word	0xffffefff
 8007fb0:	ffffdfff 	.word	0xffffdfff
 8007fb4:	ffefffff 	.word	0xffefffff
 8007fb8:	ff9fffff 	.word	0xff9fffff
 8007fbc:	fff7ffff 	.word	0xfff7ffff

08007fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b092      	sub	sp, #72	@ 0x48
 8007fc4:	af02      	add	r7, sp, #8
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2284      	movs	r2, #132	@ 0x84
 8007fcc:	2100      	movs	r1, #0
 8007fce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fd0:	f7fc f928 	bl	8004224 <HAL_GetTick>
 8007fd4:	0003      	movs	r3, r0
 8007fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2208      	movs	r2, #8
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	2b08      	cmp	r3, #8
 8007fe4:	d12c      	bne.n	8008040 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fe8:	2280      	movs	r2, #128	@ 0x80
 8007fea:	0391      	lsls	r1, r2, #14
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	4a46      	ldr	r2, [pc, #280]	@ (8008108 <UART_CheckIdleState+0x148>)
 8007ff0:	9200      	str	r2, [sp, #0]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f000 f88c 	bl	8008110 <UART_WaitOnFlagUntilTimeout>
 8007ff8:	1e03      	subs	r3, r0, #0
 8007ffa:	d021      	beq.n	8008040 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8008000:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008004:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008006:	2301      	movs	r3, #1
 8008008:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800800a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800c:	f383 8810 	msr	PRIMASK, r3
}
 8008010:	46c0      	nop			@ (mov r8, r8)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2180      	movs	r1, #128	@ 0x80
 800801e:	438a      	bics	r2, r1
 8008020:	601a      	str	r2, [r3, #0]
 8008022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008028:	f383 8810 	msr	PRIMASK, r3
}
 800802c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2220      	movs	r2, #32
 8008032:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2278      	movs	r2, #120	@ 0x78
 8008038:	2100      	movs	r1, #0
 800803a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e05f      	b.n	8008100 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2204      	movs	r2, #4
 8008048:	4013      	ands	r3, r2
 800804a:	2b04      	cmp	r3, #4
 800804c:	d146      	bne.n	80080dc <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800804e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008050:	2280      	movs	r2, #128	@ 0x80
 8008052:	03d1      	lsls	r1, r2, #15
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	4a2c      	ldr	r2, [pc, #176]	@ (8008108 <UART_CheckIdleState+0x148>)
 8008058:	9200      	str	r2, [sp, #0]
 800805a:	2200      	movs	r2, #0
 800805c:	f000 f858 	bl	8008110 <UART_WaitOnFlagUntilTimeout>
 8008060:	1e03      	subs	r3, r0, #0
 8008062:	d03b      	beq.n	80080dc <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008064:	f3ef 8310 	mrs	r3, PRIMASK
 8008068:	60fb      	str	r3, [r7, #12]
  return(result);
 800806a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800806c:	637b      	str	r3, [r7, #52]	@ 0x34
 800806e:	2301      	movs	r3, #1
 8008070:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	f383 8810 	msr	PRIMASK, r3
}
 8008078:	46c0      	nop			@ (mov r8, r8)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4921      	ldr	r1, [pc, #132]	@ (800810c <UART_CheckIdleState+0x14c>)
 8008086:	400a      	ands	r2, r1
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800808c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f383 8810 	msr	PRIMASK, r3
}
 8008094:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008096:	f3ef 8310 	mrs	r3, PRIMASK
 800809a:	61bb      	str	r3, [r7, #24]
  return(result);
 800809c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800809e:	633b      	str	r3, [r7, #48]	@ 0x30
 80080a0:	2301      	movs	r3, #1
 80080a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	f383 8810 	msr	PRIMASK, r3
}
 80080aa:	46c0      	nop			@ (mov r8, r8)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2101      	movs	r1, #1
 80080b8:	438a      	bics	r2, r1
 80080ba:	609a      	str	r2, [r3, #8]
 80080bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	f383 8810 	msr	PRIMASK, r3
}
 80080c6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2280      	movs	r2, #128	@ 0x80
 80080cc:	2120      	movs	r1, #32
 80080ce:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2278      	movs	r2, #120	@ 0x78
 80080d4:	2100      	movs	r1, #0
 80080d6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e011      	b.n	8008100 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2220      	movs	r2, #32
 80080e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2280      	movs	r2, #128	@ 0x80
 80080e6:	2120      	movs	r1, #32
 80080e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2278      	movs	r2, #120	@ 0x78
 80080fa:	2100      	movs	r1, #0
 80080fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	0018      	movs	r0, r3
 8008102:	46bd      	mov	sp, r7
 8008104:	b010      	add	sp, #64	@ 0x40
 8008106:	bd80      	pop	{r7, pc}
 8008108:	01ffffff 	.word	0x01ffffff
 800810c:	fffffedf 	.word	0xfffffedf

08008110 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	603b      	str	r3, [r7, #0]
 800811c:	1dfb      	adds	r3, r7, #7
 800811e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008120:	e051      	b.n	80081c6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	3301      	adds	r3, #1
 8008126:	d04e      	beq.n	80081c6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008128:	f7fc f87c 	bl	8004224 <HAL_GetTick>
 800812c:	0002      	movs	r2, r0
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	69ba      	ldr	r2, [r7, #24]
 8008134:	429a      	cmp	r2, r3
 8008136:	d302      	bcc.n	800813e <UART_WaitOnFlagUntilTimeout+0x2e>
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d101      	bne.n	8008142 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e051      	b.n	80081e6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2204      	movs	r2, #4
 800814a:	4013      	ands	r3, r2
 800814c:	d03b      	beq.n	80081c6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	2b80      	cmp	r3, #128	@ 0x80
 8008152:	d038      	beq.n	80081c6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2b40      	cmp	r3, #64	@ 0x40
 8008158:	d035      	beq.n	80081c6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	69db      	ldr	r3, [r3, #28]
 8008160:	2208      	movs	r2, #8
 8008162:	4013      	ands	r3, r2
 8008164:	2b08      	cmp	r3, #8
 8008166:	d111      	bne.n	800818c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2208      	movs	r2, #8
 800816e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	0018      	movs	r0, r3
 8008174:	f000 f8f2 	bl	800835c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2284      	movs	r2, #132	@ 0x84
 800817c:	2108      	movs	r1, #8
 800817e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2278      	movs	r2, #120	@ 0x78
 8008184:	2100      	movs	r1, #0
 8008186:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e02c      	b.n	80081e6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	69da      	ldr	r2, [r3, #28]
 8008192:	2380      	movs	r3, #128	@ 0x80
 8008194:	011b      	lsls	r3, r3, #4
 8008196:	401a      	ands	r2, r3
 8008198:	2380      	movs	r3, #128	@ 0x80
 800819a:	011b      	lsls	r3, r3, #4
 800819c:	429a      	cmp	r2, r3
 800819e:	d112      	bne.n	80081c6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2280      	movs	r2, #128	@ 0x80
 80081a6:	0112      	lsls	r2, r2, #4
 80081a8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	0018      	movs	r0, r3
 80081ae:	f000 f8d5 	bl	800835c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2284      	movs	r2, #132	@ 0x84
 80081b6:	2120      	movs	r1, #32
 80081b8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2278      	movs	r2, #120	@ 0x78
 80081be:	2100      	movs	r1, #0
 80081c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e00f      	b.n	80081e6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	69db      	ldr	r3, [r3, #28]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	4013      	ands	r3, r2
 80081d0:	68ba      	ldr	r2, [r7, #8]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	425a      	negs	r2, r3
 80081d6:	4153      	adcs	r3, r2
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	001a      	movs	r2, r3
 80081dc:	1dfb      	adds	r3, r7, #7
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d09e      	beq.n	8008122 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	0018      	movs	r0, r3
 80081e8:	46bd      	mov	sp, r7
 80081ea:	b004      	add	sp, #16
 80081ec:	bd80      	pop	{r7, pc}
	...

080081f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b090      	sub	sp, #64	@ 0x40
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	1dbb      	adds	r3, r7, #6
 80081fc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	1dba      	adds	r2, r7, #6
 8008208:	2158      	movs	r1, #88	@ 0x58
 800820a:	8812      	ldrh	r2, [r2, #0]
 800820c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	1dba      	adds	r2, r7, #6
 8008212:	215a      	movs	r1, #90	@ 0x5a
 8008214:	8812      	ldrh	r2, [r2, #0]
 8008216:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	689a      	ldr	r2, [r3, #8]
 8008222:	2380      	movs	r3, #128	@ 0x80
 8008224:	015b      	lsls	r3, r3, #5
 8008226:	429a      	cmp	r2, r3
 8008228:	d10d      	bne.n	8008246 <UART_Start_Receive_IT+0x56>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d104      	bne.n	800823c <UART_Start_Receive_IT+0x4c>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	225c      	movs	r2, #92	@ 0x5c
 8008236:	4946      	ldr	r1, [pc, #280]	@ (8008350 <UART_Start_Receive_IT+0x160>)
 8008238:	5299      	strh	r1, [r3, r2]
 800823a:	e01a      	b.n	8008272 <UART_Start_Receive_IT+0x82>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	225c      	movs	r2, #92	@ 0x5c
 8008240:	21ff      	movs	r1, #255	@ 0xff
 8008242:	5299      	strh	r1, [r3, r2]
 8008244:	e015      	b.n	8008272 <UART_Start_Receive_IT+0x82>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d10d      	bne.n	800826a <UART_Start_Receive_IT+0x7a>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d104      	bne.n	8008260 <UART_Start_Receive_IT+0x70>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	225c      	movs	r2, #92	@ 0x5c
 800825a:	21ff      	movs	r1, #255	@ 0xff
 800825c:	5299      	strh	r1, [r3, r2]
 800825e:	e008      	b.n	8008272 <UART_Start_Receive_IT+0x82>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	225c      	movs	r2, #92	@ 0x5c
 8008264:	217f      	movs	r1, #127	@ 0x7f
 8008266:	5299      	strh	r1, [r3, r2]
 8008268:	e003      	b.n	8008272 <UART_Start_Receive_IT+0x82>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	225c      	movs	r2, #92	@ 0x5c
 800826e:	2100      	movs	r1, #0
 8008270:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2284      	movs	r2, #132	@ 0x84
 8008276:	2100      	movs	r1, #0
 8008278:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2280      	movs	r2, #128	@ 0x80
 800827e:	2122      	movs	r1, #34	@ 0x22
 8008280:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008282:	f3ef 8310 	mrs	r3, PRIMASK
 8008286:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8008288:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800828a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800828c:	2301      	movs	r3, #1
 800828e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008292:	f383 8810 	msr	PRIMASK, r3
}
 8008296:	46c0      	nop			@ (mov r8, r8)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	689a      	ldr	r2, [r3, #8]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2101      	movs	r1, #1
 80082a4:	430a      	orrs	r2, r1
 80082a6:	609a      	str	r2, [r3, #8]
 80082a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082aa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ae:	f383 8810 	msr	PRIMASK, r3
}
 80082b2:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	689a      	ldr	r2, [r3, #8]
 80082b8:	2380      	movs	r3, #128	@ 0x80
 80082ba:	015b      	lsls	r3, r3, #5
 80082bc:	429a      	cmp	r2, r3
 80082be:	d107      	bne.n	80082d0 <UART_Start_Receive_IT+0xe0>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d103      	bne.n	80082d0 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4a22      	ldr	r2, [pc, #136]	@ (8008354 <UART_Start_Receive_IT+0x164>)
 80082cc:	669a      	str	r2, [r3, #104]	@ 0x68
 80082ce:	e002      	b.n	80082d6 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	4a21      	ldr	r2, [pc, #132]	@ (8008358 <UART_Start_Receive_IT+0x168>)
 80082d4:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d019      	beq.n	8008312 <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082de:	f3ef 8310 	mrs	r3, PRIMASK
 80082e2:	61fb      	str	r3, [r7, #28]
  return(result);
 80082e4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80082e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80082e8:	2301      	movs	r3, #1
 80082ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	f383 8810 	msr	PRIMASK, r3
}
 80082f2:	46c0      	nop			@ (mov r8, r8)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2190      	movs	r1, #144	@ 0x90
 8008300:	0049      	lsls	r1, r1, #1
 8008302:	430a      	orrs	r2, r1
 8008304:	601a      	str	r2, [r3, #0]
 8008306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008308:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	f383 8810 	msr	PRIMASK, r3
}
 8008310:	e018      	b.n	8008344 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008312:	f3ef 8310 	mrs	r3, PRIMASK
 8008316:	613b      	str	r3, [r7, #16]
  return(result);
 8008318:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800831a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800831c:	2301      	movs	r3, #1
 800831e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f383 8810 	msr	PRIMASK, r3
}
 8008326:	46c0      	nop			@ (mov r8, r8)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2120      	movs	r1, #32
 8008334:	430a      	orrs	r2, r1
 8008336:	601a      	str	r2, [r3, #0]
 8008338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800833a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	f383 8810 	msr	PRIMASK, r3
}
 8008342:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	0018      	movs	r0, r3
 8008348:	46bd      	mov	sp, r7
 800834a:	b010      	add	sp, #64	@ 0x40
 800834c:	bd80      	pop	{r7, pc}
 800834e:	46c0      	nop			@ (mov r8, r8)
 8008350:	000001ff 	.word	0x000001ff
 8008354:	08008661 	.word	0x08008661
 8008358:	080084a9 	.word	0x080084a9

0800835c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b08e      	sub	sp, #56	@ 0x38
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008364:	f3ef 8310 	mrs	r3, PRIMASK
 8008368:	617b      	str	r3, [r7, #20]
  return(result);
 800836a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800836c:	637b      	str	r3, [r7, #52]	@ 0x34
 800836e:	2301      	movs	r3, #1
 8008370:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008372:	69bb      	ldr	r3, [r7, #24]
 8008374:	f383 8810 	msr	PRIMASK, r3
}
 8008378:	46c0      	nop			@ (mov r8, r8)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4926      	ldr	r1, [pc, #152]	@ (8008420 <UART_EndRxTransfer+0xc4>)
 8008386:	400a      	ands	r2, r1
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800838c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	f383 8810 	msr	PRIMASK, r3
}
 8008394:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008396:	f3ef 8310 	mrs	r3, PRIMASK
 800839a:	623b      	str	r3, [r7, #32]
  return(result);
 800839c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839e:	633b      	str	r3, [r7, #48]	@ 0x30
 80083a0:	2301      	movs	r3, #1
 80083a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a6:	f383 8810 	msr	PRIMASK, r3
}
 80083aa:	46c0      	nop			@ (mov r8, r8)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	689a      	ldr	r2, [r3, #8]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2101      	movs	r1, #1
 80083b8:	438a      	bics	r2, r1
 80083ba:	609a      	str	r2, [r3, #8]
 80083bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083be:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c2:	f383 8810 	msr	PRIMASK, r3
}
 80083c6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d118      	bne.n	8008402 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083d0:	f3ef 8310 	mrs	r3, PRIMASK
 80083d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80083d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80083da:	2301      	movs	r3, #1
 80083dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f383 8810 	msr	PRIMASK, r3
}
 80083e4:	46c0      	nop			@ (mov r8, r8)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2110      	movs	r1, #16
 80083f2:	438a      	bics	r2, r1
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	f383 8810 	msr	PRIMASK, r3
}
 8008400:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2280      	movs	r2, #128	@ 0x80
 8008406:	2120      	movs	r1, #32
 8008408:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008416:	46c0      	nop			@ (mov r8, r8)
 8008418:	46bd      	mov	sp, r7
 800841a:	b00e      	add	sp, #56	@ 0x38
 800841c:	bd80      	pop	{r7, pc}
 800841e:	46c0      	nop			@ (mov r8, r8)
 8008420:	fffffedf 	.word	0xfffffedf

08008424 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008430:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	225a      	movs	r2, #90	@ 0x5a
 8008436:	2100      	movs	r1, #0
 8008438:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2252      	movs	r2, #82	@ 0x52
 800843e:	2100      	movs	r1, #0
 8008440:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	0018      	movs	r0, r3
 8008446:	f7ff fbb3 	bl	8007bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800844a:	46c0      	nop			@ (mov r8, r8)
 800844c:	46bd      	mov	sp, r7
 800844e:	b004      	add	sp, #16
 8008450:	bd80      	pop	{r7, pc}

08008452 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b086      	sub	sp, #24
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800845a:	f3ef 8310 	mrs	r3, PRIMASK
 800845e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008460:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008462:	617b      	str	r3, [r7, #20]
 8008464:	2301      	movs	r3, #1
 8008466:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f383 8810 	msr	PRIMASK, r3
}
 800846e:	46c0      	nop			@ (mov r8, r8)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2140      	movs	r1, #64	@ 0x40
 800847c:	438a      	bics	r2, r1
 800847e:	601a      	str	r2, [r3, #0]
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	f383 8810 	msr	PRIMASK, r3
}
 800848a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2220      	movs	r2, #32
 8008490:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	0018      	movs	r0, r3
 800849c:	f7ff fb80 	bl	8007ba0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084a0:	46c0      	nop			@ (mov r8, r8)
 80084a2:	46bd      	mov	sp, r7
 80084a4:	b006      	add	sp, #24
 80084a6:	bd80      	pop	{r7, pc}

080084a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b094      	sub	sp, #80	@ 0x50
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80084b0:	204e      	movs	r0, #78	@ 0x4e
 80084b2:	183b      	adds	r3, r7, r0
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	215c      	movs	r1, #92	@ 0x5c
 80084b8:	5a52      	ldrh	r2, [r2, r1]
 80084ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2280      	movs	r2, #128	@ 0x80
 80084c0:	589b      	ldr	r3, [r3, r2]
 80084c2:	2b22      	cmp	r3, #34	@ 0x22
 80084c4:	d000      	beq.n	80084c8 <UART_RxISR_8BIT+0x20>
 80084c6:	e0ba      	b.n	800863e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	214c      	movs	r1, #76	@ 0x4c
 80084ce:	187b      	adds	r3, r7, r1
 80084d0:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80084d2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084d4:	187b      	adds	r3, r7, r1
 80084d6:	881b      	ldrh	r3, [r3, #0]
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	183b      	adds	r3, r7, r0
 80084dc:	881b      	ldrh	r3, [r3, #0]
 80084de:	b2d9      	uxtb	r1, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e4:	400a      	ands	r2, r1
 80084e6:	b2d2      	uxtb	r2, r2
 80084e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	225a      	movs	r2, #90	@ 0x5a
 80084f8:	5a9b      	ldrh	r3, [r3, r2]
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	3b01      	subs	r3, #1
 80084fe:	b299      	uxth	r1, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	225a      	movs	r2, #90	@ 0x5a
 8008504:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	225a      	movs	r2, #90	@ 0x5a
 800850a:	5a9b      	ldrh	r3, [r3, r2]
 800850c:	b29b      	uxth	r3, r3
 800850e:	2b00      	cmp	r3, #0
 8008510:	d000      	beq.n	8008514 <UART_RxISR_8BIT+0x6c>
 8008512:	e09c      	b.n	800864e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008514:	f3ef 8310 	mrs	r3, PRIMASK
 8008518:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800851a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800851c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800851e:	2301      	movs	r3, #1
 8008520:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008524:	f383 8810 	msr	PRIMASK, r3
}
 8008528:	46c0      	nop			@ (mov r8, r8)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4948      	ldr	r1, [pc, #288]	@ (8008658 <UART_RxISR_8BIT+0x1b0>)
 8008536:	400a      	ands	r2, r1
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800853c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800853e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008540:	f383 8810 	msr	PRIMASK, r3
}
 8008544:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008546:	f3ef 8310 	mrs	r3, PRIMASK
 800854a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800854c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800854e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008550:	2301      	movs	r3, #1
 8008552:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008556:	f383 8810 	msr	PRIMASK, r3
}
 800855a:	46c0      	nop			@ (mov r8, r8)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689a      	ldr	r2, [r3, #8]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2101      	movs	r1, #1
 8008568:	438a      	bics	r2, r1
 800856a:	609a      	str	r2, [r3, #8]
 800856c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800856e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008572:	f383 8810 	msr	PRIMASK, r3
}
 8008576:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2280      	movs	r2, #128	@ 0x80
 800857c:	2120      	movs	r1, #32
 800857e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685a      	ldr	r2, [r3, #4]
 8008592:	2380      	movs	r3, #128	@ 0x80
 8008594:	041b      	lsls	r3, r3, #16
 8008596:	4013      	ands	r3, r2
 8008598:	d018      	beq.n	80085cc <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800859a:	f3ef 8310 	mrs	r3, PRIMASK
 800859e:	61bb      	str	r3, [r7, #24]
  return(result);
 80085a0:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80085a4:	2301      	movs	r3, #1
 80085a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	f383 8810 	msr	PRIMASK, r3
}
 80085ae:	46c0      	nop			@ (mov r8, r8)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4928      	ldr	r1, [pc, #160]	@ (800865c <UART_RxISR_8BIT+0x1b4>)
 80085bc:	400a      	ands	r2, r1
 80085be:	601a      	str	r2, [r3, #0]
 80085c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80085c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085c4:	6a3b      	ldr	r3, [r7, #32]
 80085c6:	f383 8810 	msr	PRIMASK, r3
}
 80085ca:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d12f      	bne.n	8008634 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085da:	f3ef 8310 	mrs	r3, PRIMASK
 80085de:	60fb      	str	r3, [r7, #12]
  return(result);
 80085e0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085e4:	2301      	movs	r3, #1
 80085e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	f383 8810 	msr	PRIMASK, r3
}
 80085ee:	46c0      	nop			@ (mov r8, r8)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2110      	movs	r1, #16
 80085fc:	438a      	bics	r2, r1
 80085fe:	601a      	str	r2, [r3, #0]
 8008600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008602:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f383 8810 	msr	PRIMASK, r3
}
 800860a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	69db      	ldr	r3, [r3, #28]
 8008612:	2210      	movs	r2, #16
 8008614:	4013      	ands	r3, r2
 8008616:	2b10      	cmp	r3, #16
 8008618:	d103      	bne.n	8008622 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2210      	movs	r2, #16
 8008620:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2258      	movs	r2, #88	@ 0x58
 8008626:	5a9a      	ldrh	r2, [r3, r2]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	0011      	movs	r1, r2
 800862c:	0018      	movs	r0, r3
 800862e:	f7ff fac7 	bl	8007bc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008632:	e00c      	b.n	800864e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	0018      	movs	r0, r3
 8008638:	f7fb f972 	bl	8003920 <HAL_UART_RxCpltCallback>
}
 800863c:	e007      	b.n	800864e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	699a      	ldr	r2, [r3, #24]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2108      	movs	r1, #8
 800864a:	430a      	orrs	r2, r1
 800864c:	619a      	str	r2, [r3, #24]
}
 800864e:	46c0      	nop			@ (mov r8, r8)
 8008650:	46bd      	mov	sp, r7
 8008652:	b014      	add	sp, #80	@ 0x50
 8008654:	bd80      	pop	{r7, pc}
 8008656:	46c0      	nop			@ (mov r8, r8)
 8008658:	fffffedf 	.word	0xfffffedf
 800865c:	fbffffff 	.word	0xfbffffff

08008660 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b094      	sub	sp, #80	@ 0x50
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008668:	204e      	movs	r0, #78	@ 0x4e
 800866a:	183b      	adds	r3, r7, r0
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	215c      	movs	r1, #92	@ 0x5c
 8008670:	5a52      	ldrh	r2, [r2, r1]
 8008672:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2280      	movs	r2, #128	@ 0x80
 8008678:	589b      	ldr	r3, [r3, r2]
 800867a:	2b22      	cmp	r3, #34	@ 0x22
 800867c:	d000      	beq.n	8008680 <UART_RxISR_16BIT+0x20>
 800867e:	e0ba      	b.n	80087f6 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	214c      	movs	r1, #76	@ 0x4c
 8008686:	187b      	adds	r3, r7, r1
 8008688:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800868a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008690:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8008692:	187b      	adds	r3, r7, r1
 8008694:	183a      	adds	r2, r7, r0
 8008696:	881b      	ldrh	r3, [r3, #0]
 8008698:	8812      	ldrh	r2, [r2, #0]
 800869a:	4013      	ands	r3, r2
 800869c:	b29a      	uxth	r2, r3
 800869e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086a6:	1c9a      	adds	r2, r3, #2
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	225a      	movs	r2, #90	@ 0x5a
 80086b0:	5a9b      	ldrh	r3, [r3, r2]
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	3b01      	subs	r3, #1
 80086b6:	b299      	uxth	r1, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	225a      	movs	r2, #90	@ 0x5a
 80086bc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	225a      	movs	r2, #90	@ 0x5a
 80086c2:	5a9b      	ldrh	r3, [r3, r2]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d000      	beq.n	80086cc <UART_RxISR_16BIT+0x6c>
 80086ca:	e09c      	b.n	8008806 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086cc:	f3ef 8310 	mrs	r3, PRIMASK
 80086d0:	623b      	str	r3, [r7, #32]
  return(result);
 80086d2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80086d6:	2301      	movs	r3, #1
 80086d8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086dc:	f383 8810 	msr	PRIMASK, r3
}
 80086e0:	46c0      	nop			@ (mov r8, r8)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4948      	ldr	r1, [pc, #288]	@ (8008810 <UART_RxISR_16BIT+0x1b0>)
 80086ee:	400a      	ands	r2, r1
 80086f0:	601a      	str	r2, [r3, #0]
 80086f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f8:	f383 8810 	msr	PRIMASK, r3
}
 80086fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086fe:	f3ef 8310 	mrs	r3, PRIMASK
 8008702:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8008704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008706:	643b      	str	r3, [r7, #64]	@ 0x40
 8008708:	2301      	movs	r3, #1
 800870a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800870c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870e:	f383 8810 	msr	PRIMASK, r3
}
 8008712:	46c0      	nop			@ (mov r8, r8)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	689a      	ldr	r2, [r3, #8]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2101      	movs	r1, #1
 8008720:	438a      	bics	r2, r1
 8008722:	609a      	str	r2, [r3, #8]
 8008724:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008726:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800872a:	f383 8810 	msr	PRIMASK, r3
}
 800872e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2280      	movs	r2, #128	@ 0x80
 8008734:	2120      	movs	r1, #32
 8008736:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	2380      	movs	r3, #128	@ 0x80
 800874c:	041b      	lsls	r3, r3, #16
 800874e:	4013      	ands	r3, r2
 8008750:	d018      	beq.n	8008784 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008752:	f3ef 8310 	mrs	r3, PRIMASK
 8008756:	617b      	str	r3, [r7, #20]
  return(result);
 8008758:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800875a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800875c:	2301      	movs	r3, #1
 800875e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	f383 8810 	msr	PRIMASK, r3
}
 8008766:	46c0      	nop			@ (mov r8, r8)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4928      	ldr	r1, [pc, #160]	@ (8008814 <UART_RxISR_16BIT+0x1b4>)
 8008774:	400a      	ands	r2, r1
 8008776:	601a      	str	r2, [r3, #0]
 8008778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800877a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	f383 8810 	msr	PRIMASK, r3
}
 8008782:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008788:	2b01      	cmp	r3, #1
 800878a:	d12f      	bne.n	80087ec <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008792:	f3ef 8310 	mrs	r3, PRIMASK
 8008796:	60bb      	str	r3, [r7, #8]
  return(result);
 8008798:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800879a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800879c:	2301      	movs	r3, #1
 800879e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f383 8810 	msr	PRIMASK, r3
}
 80087a6:	46c0      	nop			@ (mov r8, r8)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2110      	movs	r1, #16
 80087b4:	438a      	bics	r2, r1
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	f383 8810 	msr	PRIMASK, r3
}
 80087c2:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	2210      	movs	r2, #16
 80087cc:	4013      	ands	r3, r2
 80087ce:	2b10      	cmp	r3, #16
 80087d0:	d103      	bne.n	80087da <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2210      	movs	r2, #16
 80087d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2258      	movs	r2, #88	@ 0x58
 80087de:	5a9a      	ldrh	r2, [r3, r2]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	0011      	movs	r1, r2
 80087e4:	0018      	movs	r0, r3
 80087e6:	f7ff f9eb 	bl	8007bc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087ea:	e00c      	b.n	8008806 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	0018      	movs	r0, r3
 80087f0:	f7fb f896 	bl	8003920 <HAL_UART_RxCpltCallback>
}
 80087f4:	e007      	b.n	8008806 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	699a      	ldr	r2, [r3, #24]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2108      	movs	r1, #8
 8008802:	430a      	orrs	r2, r1
 8008804:	619a      	str	r2, [r3, #24]
}
 8008806:	46c0      	nop			@ (mov r8, r8)
 8008808:	46bd      	mov	sp, r7
 800880a:	b014      	add	sp, #80	@ 0x50
 800880c:	bd80      	pop	{r7, pc}
 800880e:	46c0      	nop			@ (mov r8, r8)
 8008810:	fffffedf 	.word	0xfffffedf
 8008814:	fbffffff 	.word	0xfbffffff

08008818 <malloc>:
 8008818:	b510      	push	{r4, lr}
 800881a:	4b03      	ldr	r3, [pc, #12]	@ (8008828 <malloc+0x10>)
 800881c:	0001      	movs	r1, r0
 800881e:	6818      	ldr	r0, [r3, #0]
 8008820:	f000 f830 	bl	8008884 <_malloc_r>
 8008824:	bd10      	pop	{r4, pc}
 8008826:	46c0      	nop			@ (mov r8, r8)
 8008828:	20000030 	.word	0x20000030

0800882c <free>:
 800882c:	b510      	push	{r4, lr}
 800882e:	4b03      	ldr	r3, [pc, #12]	@ (800883c <free+0x10>)
 8008830:	0001      	movs	r1, r0
 8008832:	6818      	ldr	r0, [r3, #0]
 8008834:	f002 f982 	bl	800ab3c <_free_r>
 8008838:	bd10      	pop	{r4, pc}
 800883a:	46c0      	nop			@ (mov r8, r8)
 800883c:	20000030 	.word	0x20000030

08008840 <sbrk_aligned>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	4e0f      	ldr	r6, [pc, #60]	@ (8008880 <sbrk_aligned+0x40>)
 8008844:	000d      	movs	r5, r1
 8008846:	6831      	ldr	r1, [r6, #0]
 8008848:	0004      	movs	r4, r0
 800884a:	2900      	cmp	r1, #0
 800884c:	d102      	bne.n	8008854 <sbrk_aligned+0x14>
 800884e:	f001 fa93 	bl	8009d78 <_sbrk_r>
 8008852:	6030      	str	r0, [r6, #0]
 8008854:	0029      	movs	r1, r5
 8008856:	0020      	movs	r0, r4
 8008858:	f001 fa8e 	bl	8009d78 <_sbrk_r>
 800885c:	1c43      	adds	r3, r0, #1
 800885e:	d103      	bne.n	8008868 <sbrk_aligned+0x28>
 8008860:	2501      	movs	r5, #1
 8008862:	426d      	negs	r5, r5
 8008864:	0028      	movs	r0, r5
 8008866:	bd70      	pop	{r4, r5, r6, pc}
 8008868:	2303      	movs	r3, #3
 800886a:	1cc5      	adds	r5, r0, #3
 800886c:	439d      	bics	r5, r3
 800886e:	42a8      	cmp	r0, r5
 8008870:	d0f8      	beq.n	8008864 <sbrk_aligned+0x24>
 8008872:	1a29      	subs	r1, r5, r0
 8008874:	0020      	movs	r0, r4
 8008876:	f001 fa7f 	bl	8009d78 <_sbrk_r>
 800887a:	3001      	adds	r0, #1
 800887c:	d1f2      	bne.n	8008864 <sbrk_aligned+0x24>
 800887e:	e7ef      	b.n	8008860 <sbrk_aligned+0x20>
 8008880:	200012fc 	.word	0x200012fc

08008884 <_malloc_r>:
 8008884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008886:	2203      	movs	r2, #3
 8008888:	1ccb      	adds	r3, r1, #3
 800888a:	4393      	bics	r3, r2
 800888c:	3308      	adds	r3, #8
 800888e:	0005      	movs	r5, r0
 8008890:	001f      	movs	r7, r3
 8008892:	2b0c      	cmp	r3, #12
 8008894:	d234      	bcs.n	8008900 <_malloc_r+0x7c>
 8008896:	270c      	movs	r7, #12
 8008898:	42b9      	cmp	r1, r7
 800889a:	d833      	bhi.n	8008904 <_malloc_r+0x80>
 800889c:	0028      	movs	r0, r5
 800889e:	f000 f871 	bl	8008984 <__malloc_lock>
 80088a2:	4e37      	ldr	r6, [pc, #220]	@ (8008980 <_malloc_r+0xfc>)
 80088a4:	6833      	ldr	r3, [r6, #0]
 80088a6:	001c      	movs	r4, r3
 80088a8:	2c00      	cmp	r4, #0
 80088aa:	d12f      	bne.n	800890c <_malloc_r+0x88>
 80088ac:	0039      	movs	r1, r7
 80088ae:	0028      	movs	r0, r5
 80088b0:	f7ff ffc6 	bl	8008840 <sbrk_aligned>
 80088b4:	0004      	movs	r4, r0
 80088b6:	1c43      	adds	r3, r0, #1
 80088b8:	d15f      	bne.n	800897a <_malloc_r+0xf6>
 80088ba:	6834      	ldr	r4, [r6, #0]
 80088bc:	9400      	str	r4, [sp, #0]
 80088be:	9b00      	ldr	r3, [sp, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d14a      	bne.n	800895a <_malloc_r+0xd6>
 80088c4:	2c00      	cmp	r4, #0
 80088c6:	d052      	beq.n	800896e <_malloc_r+0xea>
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	0028      	movs	r0, r5
 80088cc:	18e3      	adds	r3, r4, r3
 80088ce:	9900      	ldr	r1, [sp, #0]
 80088d0:	9301      	str	r3, [sp, #4]
 80088d2:	f001 fa51 	bl	8009d78 <_sbrk_r>
 80088d6:	9b01      	ldr	r3, [sp, #4]
 80088d8:	4283      	cmp	r3, r0
 80088da:	d148      	bne.n	800896e <_malloc_r+0xea>
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	0028      	movs	r0, r5
 80088e0:	1aff      	subs	r7, r7, r3
 80088e2:	0039      	movs	r1, r7
 80088e4:	f7ff ffac 	bl	8008840 <sbrk_aligned>
 80088e8:	3001      	adds	r0, #1
 80088ea:	d040      	beq.n	800896e <_malloc_r+0xea>
 80088ec:	6823      	ldr	r3, [r4, #0]
 80088ee:	19db      	adds	r3, r3, r7
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	6833      	ldr	r3, [r6, #0]
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	2a00      	cmp	r2, #0
 80088f8:	d133      	bne.n	8008962 <_malloc_r+0xde>
 80088fa:	9b00      	ldr	r3, [sp, #0]
 80088fc:	6033      	str	r3, [r6, #0]
 80088fe:	e019      	b.n	8008934 <_malloc_r+0xb0>
 8008900:	2b00      	cmp	r3, #0
 8008902:	dac9      	bge.n	8008898 <_malloc_r+0x14>
 8008904:	230c      	movs	r3, #12
 8008906:	602b      	str	r3, [r5, #0]
 8008908:	2000      	movs	r0, #0
 800890a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800890c:	6821      	ldr	r1, [r4, #0]
 800890e:	1bc9      	subs	r1, r1, r7
 8008910:	d420      	bmi.n	8008954 <_malloc_r+0xd0>
 8008912:	290b      	cmp	r1, #11
 8008914:	d90a      	bls.n	800892c <_malloc_r+0xa8>
 8008916:	19e2      	adds	r2, r4, r7
 8008918:	6027      	str	r7, [r4, #0]
 800891a:	42a3      	cmp	r3, r4
 800891c:	d104      	bne.n	8008928 <_malloc_r+0xa4>
 800891e:	6032      	str	r2, [r6, #0]
 8008920:	6863      	ldr	r3, [r4, #4]
 8008922:	6011      	str	r1, [r2, #0]
 8008924:	6053      	str	r3, [r2, #4]
 8008926:	e005      	b.n	8008934 <_malloc_r+0xb0>
 8008928:	605a      	str	r2, [r3, #4]
 800892a:	e7f9      	b.n	8008920 <_malloc_r+0x9c>
 800892c:	6862      	ldr	r2, [r4, #4]
 800892e:	42a3      	cmp	r3, r4
 8008930:	d10e      	bne.n	8008950 <_malloc_r+0xcc>
 8008932:	6032      	str	r2, [r6, #0]
 8008934:	0028      	movs	r0, r5
 8008936:	f000 f82d 	bl	8008994 <__malloc_unlock>
 800893a:	0020      	movs	r0, r4
 800893c:	2207      	movs	r2, #7
 800893e:	300b      	adds	r0, #11
 8008940:	1d23      	adds	r3, r4, #4
 8008942:	4390      	bics	r0, r2
 8008944:	1ac2      	subs	r2, r0, r3
 8008946:	4298      	cmp	r0, r3
 8008948:	d0df      	beq.n	800890a <_malloc_r+0x86>
 800894a:	1a1b      	subs	r3, r3, r0
 800894c:	50a3      	str	r3, [r4, r2]
 800894e:	e7dc      	b.n	800890a <_malloc_r+0x86>
 8008950:	605a      	str	r2, [r3, #4]
 8008952:	e7ef      	b.n	8008934 <_malloc_r+0xb0>
 8008954:	0023      	movs	r3, r4
 8008956:	6864      	ldr	r4, [r4, #4]
 8008958:	e7a6      	b.n	80088a8 <_malloc_r+0x24>
 800895a:	9c00      	ldr	r4, [sp, #0]
 800895c:	6863      	ldr	r3, [r4, #4]
 800895e:	9300      	str	r3, [sp, #0]
 8008960:	e7ad      	b.n	80088be <_malloc_r+0x3a>
 8008962:	001a      	movs	r2, r3
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	42a3      	cmp	r3, r4
 8008968:	d1fb      	bne.n	8008962 <_malloc_r+0xde>
 800896a:	2300      	movs	r3, #0
 800896c:	e7da      	b.n	8008924 <_malloc_r+0xa0>
 800896e:	230c      	movs	r3, #12
 8008970:	0028      	movs	r0, r5
 8008972:	602b      	str	r3, [r5, #0]
 8008974:	f000 f80e 	bl	8008994 <__malloc_unlock>
 8008978:	e7c6      	b.n	8008908 <_malloc_r+0x84>
 800897a:	6007      	str	r7, [r0, #0]
 800897c:	e7da      	b.n	8008934 <_malloc_r+0xb0>
 800897e:	46c0      	nop			@ (mov r8, r8)
 8008980:	20001300 	.word	0x20001300

08008984 <__malloc_lock>:
 8008984:	b510      	push	{r4, lr}
 8008986:	4802      	ldr	r0, [pc, #8]	@ (8008990 <__malloc_lock+0xc>)
 8008988:	f001 fa47 	bl	8009e1a <__retarget_lock_acquire_recursive>
 800898c:	bd10      	pop	{r4, pc}
 800898e:	46c0      	nop			@ (mov r8, r8)
 8008990:	20001444 	.word	0x20001444

08008994 <__malloc_unlock>:
 8008994:	b510      	push	{r4, lr}
 8008996:	4802      	ldr	r0, [pc, #8]	@ (80089a0 <__malloc_unlock+0xc>)
 8008998:	f001 fa40 	bl	8009e1c <__retarget_lock_release_recursive>
 800899c:	bd10      	pop	{r4, pc}
 800899e:	46c0      	nop			@ (mov r8, r8)
 80089a0:	20001444 	.word	0x20001444

080089a4 <realloc>:
 80089a4:	b510      	push	{r4, lr}
 80089a6:	4b03      	ldr	r3, [pc, #12]	@ (80089b4 <realloc+0x10>)
 80089a8:	000a      	movs	r2, r1
 80089aa:	0001      	movs	r1, r0
 80089ac:	6818      	ldr	r0, [r3, #0]
 80089ae:	f000 f803 	bl	80089b8 <_realloc_r>
 80089b2:	bd10      	pop	{r4, pc}
 80089b4:	20000030 	.word	0x20000030

080089b8 <_realloc_r>:
 80089b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089ba:	0006      	movs	r6, r0
 80089bc:	000c      	movs	r4, r1
 80089be:	0015      	movs	r5, r2
 80089c0:	2900      	cmp	r1, #0
 80089c2:	d105      	bne.n	80089d0 <_realloc_r+0x18>
 80089c4:	0011      	movs	r1, r2
 80089c6:	f7ff ff5d 	bl	8008884 <_malloc_r>
 80089ca:	0004      	movs	r4, r0
 80089cc:	0020      	movs	r0, r4
 80089ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80089d0:	2a00      	cmp	r2, #0
 80089d2:	d103      	bne.n	80089dc <_realloc_r+0x24>
 80089d4:	f002 f8b2 	bl	800ab3c <_free_r>
 80089d8:	002c      	movs	r4, r5
 80089da:	e7f7      	b.n	80089cc <_realloc_r+0x14>
 80089dc:	f002 fdba 	bl	800b554 <_malloc_usable_size_r>
 80089e0:	0007      	movs	r7, r0
 80089e2:	4285      	cmp	r5, r0
 80089e4:	d802      	bhi.n	80089ec <_realloc_r+0x34>
 80089e6:	0843      	lsrs	r3, r0, #1
 80089e8:	42ab      	cmp	r3, r5
 80089ea:	d3ef      	bcc.n	80089cc <_realloc_r+0x14>
 80089ec:	0029      	movs	r1, r5
 80089ee:	0030      	movs	r0, r6
 80089f0:	f7ff ff48 	bl	8008884 <_malloc_r>
 80089f4:	9001      	str	r0, [sp, #4]
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d101      	bne.n	80089fe <_realloc_r+0x46>
 80089fa:	9c01      	ldr	r4, [sp, #4]
 80089fc:	e7e6      	b.n	80089cc <_realloc_r+0x14>
 80089fe:	002a      	movs	r2, r5
 8008a00:	42bd      	cmp	r5, r7
 8008a02:	d900      	bls.n	8008a06 <_realloc_r+0x4e>
 8008a04:	003a      	movs	r2, r7
 8008a06:	0021      	movs	r1, r4
 8008a08:	9801      	ldr	r0, [sp, #4]
 8008a0a:	f001 fa13 	bl	8009e34 <memcpy>
 8008a0e:	0021      	movs	r1, r4
 8008a10:	0030      	movs	r0, r6
 8008a12:	f002 f893 	bl	800ab3c <_free_r>
 8008a16:	e7f0      	b.n	80089fa <_realloc_r+0x42>

08008a18 <_strtol_l.isra.0>:
 8008a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	0017      	movs	r7, r2
 8008a1e:	001e      	movs	r6, r3
 8008a20:	9003      	str	r0, [sp, #12]
 8008a22:	9101      	str	r1, [sp, #4]
 8008a24:	2b24      	cmp	r3, #36	@ 0x24
 8008a26:	d823      	bhi.n	8008a70 <_strtol_l.isra.0+0x58>
 8008a28:	000c      	movs	r4, r1
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d020      	beq.n	8008a70 <_strtol_l.isra.0+0x58>
 8008a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8008b24 <_strtol_l.isra.0+0x10c>)
 8008a30:	2208      	movs	r2, #8
 8008a32:	469c      	mov	ip, r3
 8008a34:	0023      	movs	r3, r4
 8008a36:	4661      	mov	r1, ip
 8008a38:	781d      	ldrb	r5, [r3, #0]
 8008a3a:	3401      	adds	r4, #1
 8008a3c:	5d48      	ldrb	r0, [r1, r5]
 8008a3e:	0001      	movs	r1, r0
 8008a40:	4011      	ands	r1, r2
 8008a42:	4210      	tst	r0, r2
 8008a44:	d1f6      	bne.n	8008a34 <_strtol_l.isra.0+0x1c>
 8008a46:	2d2d      	cmp	r5, #45	@ 0x2d
 8008a48:	d119      	bne.n	8008a7e <_strtol_l.isra.0+0x66>
 8008a4a:	7825      	ldrb	r5, [r4, #0]
 8008a4c:	1c9c      	adds	r4, r3, #2
 8008a4e:	2301      	movs	r3, #1
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	2210      	movs	r2, #16
 8008a54:	0033      	movs	r3, r6
 8008a56:	4393      	bics	r3, r2
 8008a58:	d11d      	bne.n	8008a96 <_strtol_l.isra.0+0x7e>
 8008a5a:	2d30      	cmp	r5, #48	@ 0x30
 8008a5c:	d115      	bne.n	8008a8a <_strtol_l.isra.0+0x72>
 8008a5e:	2120      	movs	r1, #32
 8008a60:	7823      	ldrb	r3, [r4, #0]
 8008a62:	438b      	bics	r3, r1
 8008a64:	2b58      	cmp	r3, #88	@ 0x58
 8008a66:	d110      	bne.n	8008a8a <_strtol_l.isra.0+0x72>
 8008a68:	7865      	ldrb	r5, [r4, #1]
 8008a6a:	3402      	adds	r4, #2
 8008a6c:	2610      	movs	r6, #16
 8008a6e:	e012      	b.n	8008a96 <_strtol_l.isra.0+0x7e>
 8008a70:	f001 f9a8 	bl	8009dc4 <__errno>
 8008a74:	2316      	movs	r3, #22
 8008a76:	6003      	str	r3, [r0, #0]
 8008a78:	2000      	movs	r0, #0
 8008a7a:	b005      	add	sp, #20
 8008a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a7e:	9100      	str	r1, [sp, #0]
 8008a80:	2d2b      	cmp	r5, #43	@ 0x2b
 8008a82:	d1e6      	bne.n	8008a52 <_strtol_l.isra.0+0x3a>
 8008a84:	7825      	ldrb	r5, [r4, #0]
 8008a86:	1c9c      	adds	r4, r3, #2
 8008a88:	e7e3      	b.n	8008a52 <_strtol_l.isra.0+0x3a>
 8008a8a:	2e00      	cmp	r6, #0
 8008a8c:	d1ee      	bne.n	8008a6c <_strtol_l.isra.0+0x54>
 8008a8e:	360a      	adds	r6, #10
 8008a90:	2d30      	cmp	r5, #48	@ 0x30
 8008a92:	d100      	bne.n	8008a96 <_strtol_l.isra.0+0x7e>
 8008a94:	3e02      	subs	r6, #2
 8008a96:	4a24      	ldr	r2, [pc, #144]	@ (8008b28 <_strtol_l.isra.0+0x110>)
 8008a98:	9b00      	ldr	r3, [sp, #0]
 8008a9a:	4694      	mov	ip, r2
 8008a9c:	4463      	add	r3, ip
 8008a9e:	0031      	movs	r1, r6
 8008aa0:	0018      	movs	r0, r3
 8008aa2:	9302      	str	r3, [sp, #8]
 8008aa4:	f7f7 fbdc 	bl	8000260 <__aeabi_uidivmod>
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	4684      	mov	ip, r0
 8008aac:	0010      	movs	r0, r2
 8008aae:	002b      	movs	r3, r5
 8008ab0:	3b30      	subs	r3, #48	@ 0x30
 8008ab2:	2b09      	cmp	r3, #9
 8008ab4:	d811      	bhi.n	8008ada <_strtol_l.isra.0+0xc2>
 8008ab6:	001d      	movs	r5, r3
 8008ab8:	42ae      	cmp	r6, r5
 8008aba:	dd1d      	ble.n	8008af8 <_strtol_l.isra.0+0xe0>
 8008abc:	1c53      	adds	r3, r2, #1
 8008abe:	d009      	beq.n	8008ad4 <_strtol_l.isra.0+0xbc>
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	4252      	negs	r2, r2
 8008ac4:	4584      	cmp	ip, r0
 8008ac6:	d305      	bcc.n	8008ad4 <_strtol_l.isra.0+0xbc>
 8008ac8:	d101      	bne.n	8008ace <_strtol_l.isra.0+0xb6>
 8008aca:	42a9      	cmp	r1, r5
 8008acc:	db11      	blt.n	8008af2 <_strtol_l.isra.0+0xda>
 8008ace:	2201      	movs	r2, #1
 8008ad0:	4370      	muls	r0, r6
 8008ad2:	1828      	adds	r0, r5, r0
 8008ad4:	7825      	ldrb	r5, [r4, #0]
 8008ad6:	3401      	adds	r4, #1
 8008ad8:	e7e9      	b.n	8008aae <_strtol_l.isra.0+0x96>
 8008ada:	002b      	movs	r3, r5
 8008adc:	3b41      	subs	r3, #65	@ 0x41
 8008ade:	2b19      	cmp	r3, #25
 8008ae0:	d801      	bhi.n	8008ae6 <_strtol_l.isra.0+0xce>
 8008ae2:	3d37      	subs	r5, #55	@ 0x37
 8008ae4:	e7e8      	b.n	8008ab8 <_strtol_l.isra.0+0xa0>
 8008ae6:	002b      	movs	r3, r5
 8008ae8:	3b61      	subs	r3, #97	@ 0x61
 8008aea:	2b19      	cmp	r3, #25
 8008aec:	d804      	bhi.n	8008af8 <_strtol_l.isra.0+0xe0>
 8008aee:	3d57      	subs	r5, #87	@ 0x57
 8008af0:	e7e2      	b.n	8008ab8 <_strtol_l.isra.0+0xa0>
 8008af2:	2201      	movs	r2, #1
 8008af4:	4252      	negs	r2, r2
 8008af6:	e7ed      	b.n	8008ad4 <_strtol_l.isra.0+0xbc>
 8008af8:	1c53      	adds	r3, r2, #1
 8008afa:	d108      	bne.n	8008b0e <_strtol_l.isra.0+0xf6>
 8008afc:	2322      	movs	r3, #34	@ 0x22
 8008afe:	9a03      	ldr	r2, [sp, #12]
 8008b00:	9802      	ldr	r0, [sp, #8]
 8008b02:	6013      	str	r3, [r2, #0]
 8008b04:	2f00      	cmp	r7, #0
 8008b06:	d0b8      	beq.n	8008a7a <_strtol_l.isra.0+0x62>
 8008b08:	1e63      	subs	r3, r4, #1
 8008b0a:	9301      	str	r3, [sp, #4]
 8008b0c:	e007      	b.n	8008b1e <_strtol_l.isra.0+0x106>
 8008b0e:	9b00      	ldr	r3, [sp, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d000      	beq.n	8008b16 <_strtol_l.isra.0+0xfe>
 8008b14:	4240      	negs	r0, r0
 8008b16:	2f00      	cmp	r7, #0
 8008b18:	d0af      	beq.n	8008a7a <_strtol_l.isra.0+0x62>
 8008b1a:	2a00      	cmp	r2, #0
 8008b1c:	d1f4      	bne.n	8008b08 <_strtol_l.isra.0+0xf0>
 8008b1e:	9b01      	ldr	r3, [sp, #4]
 8008b20:	603b      	str	r3, [r7, #0]
 8008b22:	e7aa      	b.n	8008a7a <_strtol_l.isra.0+0x62>
 8008b24:	0800d315 	.word	0x0800d315
 8008b28:	7fffffff 	.word	0x7fffffff

08008b2c <_strtol_r>:
 8008b2c:	b510      	push	{r4, lr}
 8008b2e:	f7ff ff73 	bl	8008a18 <_strtol_l.isra.0>
 8008b32:	bd10      	pop	{r4, pc}

08008b34 <strtol>:
 8008b34:	b510      	push	{r4, lr}
 8008b36:	4c04      	ldr	r4, [pc, #16]	@ (8008b48 <strtol+0x14>)
 8008b38:	0013      	movs	r3, r2
 8008b3a:	000a      	movs	r2, r1
 8008b3c:	0001      	movs	r1, r0
 8008b3e:	6820      	ldr	r0, [r4, #0]
 8008b40:	f7ff ff6a 	bl	8008a18 <_strtol_l.isra.0>
 8008b44:	bd10      	pop	{r4, pc}
 8008b46:	46c0      	nop			@ (mov r8, r8)
 8008b48:	20000030 	.word	0x20000030

08008b4c <__cvt>:
 8008b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b4e:	001f      	movs	r7, r3
 8008b50:	2300      	movs	r3, #0
 8008b52:	0016      	movs	r6, r2
 8008b54:	b08b      	sub	sp, #44	@ 0x2c
 8008b56:	429f      	cmp	r7, r3
 8008b58:	da04      	bge.n	8008b64 <__cvt+0x18>
 8008b5a:	2180      	movs	r1, #128	@ 0x80
 8008b5c:	0609      	lsls	r1, r1, #24
 8008b5e:	187b      	adds	r3, r7, r1
 8008b60:	001f      	movs	r7, r3
 8008b62:	232d      	movs	r3, #45	@ 0x2d
 8008b64:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008b66:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8008b68:	7013      	strb	r3, [r2, #0]
 8008b6a:	2320      	movs	r3, #32
 8008b6c:	2203      	movs	r2, #3
 8008b6e:	439d      	bics	r5, r3
 8008b70:	2d46      	cmp	r5, #70	@ 0x46
 8008b72:	d007      	beq.n	8008b84 <__cvt+0x38>
 8008b74:	002b      	movs	r3, r5
 8008b76:	3b45      	subs	r3, #69	@ 0x45
 8008b78:	4259      	negs	r1, r3
 8008b7a:	414b      	adcs	r3, r1
 8008b7c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8008b7e:	3a01      	subs	r2, #1
 8008b80:	18cb      	adds	r3, r1, r3
 8008b82:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b84:	ab09      	add	r3, sp, #36	@ 0x24
 8008b86:	9304      	str	r3, [sp, #16]
 8008b88:	ab08      	add	r3, sp, #32
 8008b8a:	9303      	str	r3, [sp, #12]
 8008b8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b8e:	9200      	str	r2, [sp, #0]
 8008b90:	9302      	str	r3, [sp, #8]
 8008b92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008b94:	0032      	movs	r2, r6
 8008b96:	9301      	str	r3, [sp, #4]
 8008b98:	003b      	movs	r3, r7
 8008b9a:	f001 f9df 	bl	8009f5c <_dtoa_r>
 8008b9e:	0004      	movs	r4, r0
 8008ba0:	2d47      	cmp	r5, #71	@ 0x47
 8008ba2:	d11b      	bne.n	8008bdc <__cvt+0x90>
 8008ba4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ba6:	07db      	lsls	r3, r3, #31
 8008ba8:	d511      	bpl.n	8008bce <__cvt+0x82>
 8008baa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008bac:	18c3      	adds	r3, r0, r3
 8008bae:	9307      	str	r3, [sp, #28]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	0030      	movs	r0, r6
 8008bb6:	0039      	movs	r1, r7
 8008bb8:	f7f7 fc52 	bl	8000460 <__aeabi_dcmpeq>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d001      	beq.n	8008bc4 <__cvt+0x78>
 8008bc0:	9b07      	ldr	r3, [sp, #28]
 8008bc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bc4:	2230      	movs	r2, #48	@ 0x30
 8008bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc8:	9907      	ldr	r1, [sp, #28]
 8008bca:	428b      	cmp	r3, r1
 8008bcc:	d320      	bcc.n	8008c10 <__cvt+0xc4>
 8008bce:	0020      	movs	r0, r4
 8008bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bd2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008bd4:	1b1b      	subs	r3, r3, r4
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	b00b      	add	sp, #44	@ 0x2c
 8008bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bdc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008bde:	18c3      	adds	r3, r0, r3
 8008be0:	9307      	str	r3, [sp, #28]
 8008be2:	2d46      	cmp	r5, #70	@ 0x46
 8008be4:	d1e4      	bne.n	8008bb0 <__cvt+0x64>
 8008be6:	7803      	ldrb	r3, [r0, #0]
 8008be8:	2b30      	cmp	r3, #48	@ 0x30
 8008bea:	d10c      	bne.n	8008c06 <__cvt+0xba>
 8008bec:	2200      	movs	r2, #0
 8008bee:	2300      	movs	r3, #0
 8008bf0:	0030      	movs	r0, r6
 8008bf2:	0039      	movs	r1, r7
 8008bf4:	f7f7 fc34 	bl	8000460 <__aeabi_dcmpeq>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d104      	bne.n	8008c06 <__cvt+0xba>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008c00:	1a9b      	subs	r3, r3, r2
 8008c02:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008c04:	6013      	str	r3, [r2, #0]
 8008c06:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008c08:	9a07      	ldr	r2, [sp, #28]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	18d3      	adds	r3, r2, r3
 8008c0e:	e7ce      	b.n	8008bae <__cvt+0x62>
 8008c10:	1c59      	adds	r1, r3, #1
 8008c12:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c14:	701a      	strb	r2, [r3, #0]
 8008c16:	e7d6      	b.n	8008bc6 <__cvt+0x7a>

08008c18 <__exponent>:
 8008c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c1a:	232b      	movs	r3, #43	@ 0x2b
 8008c1c:	b085      	sub	sp, #20
 8008c1e:	0005      	movs	r5, r0
 8008c20:	1e0c      	subs	r4, r1, #0
 8008c22:	7002      	strb	r2, [r0, #0]
 8008c24:	da01      	bge.n	8008c2a <__exponent+0x12>
 8008c26:	424c      	negs	r4, r1
 8008c28:	3302      	adds	r3, #2
 8008c2a:	706b      	strb	r3, [r5, #1]
 8008c2c:	2c09      	cmp	r4, #9
 8008c2e:	dd2c      	ble.n	8008c8a <__exponent+0x72>
 8008c30:	ab02      	add	r3, sp, #8
 8008c32:	1dde      	adds	r6, r3, #7
 8008c34:	0020      	movs	r0, r4
 8008c36:	210a      	movs	r1, #10
 8008c38:	f7f7 fbfc 	bl	8000434 <__aeabi_idivmod>
 8008c3c:	0037      	movs	r7, r6
 8008c3e:	3130      	adds	r1, #48	@ 0x30
 8008c40:	3e01      	subs	r6, #1
 8008c42:	0020      	movs	r0, r4
 8008c44:	7031      	strb	r1, [r6, #0]
 8008c46:	210a      	movs	r1, #10
 8008c48:	9401      	str	r4, [sp, #4]
 8008c4a:	f7f7 fb0d 	bl	8000268 <__divsi3>
 8008c4e:	9b01      	ldr	r3, [sp, #4]
 8008c50:	0004      	movs	r4, r0
 8008c52:	2b63      	cmp	r3, #99	@ 0x63
 8008c54:	dcee      	bgt.n	8008c34 <__exponent+0x1c>
 8008c56:	1eba      	subs	r2, r7, #2
 8008c58:	1ca8      	adds	r0, r5, #2
 8008c5a:	0001      	movs	r1, r0
 8008c5c:	0013      	movs	r3, r2
 8008c5e:	3430      	adds	r4, #48	@ 0x30
 8008c60:	7014      	strb	r4, [r2, #0]
 8008c62:	ac02      	add	r4, sp, #8
 8008c64:	3407      	adds	r4, #7
 8008c66:	429c      	cmp	r4, r3
 8008c68:	d80a      	bhi.n	8008c80 <__exponent+0x68>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	4294      	cmp	r4, r2
 8008c6e:	d303      	bcc.n	8008c78 <__exponent+0x60>
 8008c70:	3309      	adds	r3, #9
 8008c72:	aa02      	add	r2, sp, #8
 8008c74:	189b      	adds	r3, r3, r2
 8008c76:	1bdb      	subs	r3, r3, r7
 8008c78:	18c0      	adds	r0, r0, r3
 8008c7a:	1b40      	subs	r0, r0, r5
 8008c7c:	b005      	add	sp, #20
 8008c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c80:	781c      	ldrb	r4, [r3, #0]
 8008c82:	3301      	adds	r3, #1
 8008c84:	700c      	strb	r4, [r1, #0]
 8008c86:	3101      	adds	r1, #1
 8008c88:	e7eb      	b.n	8008c62 <__exponent+0x4a>
 8008c8a:	2330      	movs	r3, #48	@ 0x30
 8008c8c:	18e4      	adds	r4, r4, r3
 8008c8e:	70ab      	strb	r3, [r5, #2]
 8008c90:	1d28      	adds	r0, r5, #4
 8008c92:	70ec      	strb	r4, [r5, #3]
 8008c94:	e7f1      	b.n	8008c7a <__exponent+0x62>
	...

08008c98 <_printf_float>:
 8008c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c9a:	b097      	sub	sp, #92	@ 0x5c
 8008c9c:	000d      	movs	r5, r1
 8008c9e:	920a      	str	r2, [sp, #40]	@ 0x28
 8008ca0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8008ca2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ca4:	9009      	str	r0, [sp, #36]	@ 0x24
 8008ca6:	f001 f829 	bl	8009cfc <_localeconv_r>
 8008caa:	6803      	ldr	r3, [r0, #0]
 8008cac:	0018      	movs	r0, r3
 8008cae:	930d      	str	r3, [sp, #52]	@ 0x34
 8008cb0:	f7f7 fa34 	bl	800011c <strlen>
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008cb8:	9314      	str	r3, [sp, #80]	@ 0x50
 8008cba:	7e2b      	ldrb	r3, [r5, #24]
 8008cbc:	2207      	movs	r2, #7
 8008cbe:	930c      	str	r3, [sp, #48]	@ 0x30
 8008cc0:	682b      	ldr	r3, [r5, #0]
 8008cc2:	930e      	str	r3, [sp, #56]	@ 0x38
 8008cc4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	05c9      	lsls	r1, r1, #23
 8008cca:	d545      	bpl.n	8008d58 <_printf_float+0xc0>
 8008ccc:	189b      	adds	r3, r3, r2
 8008cce:	4393      	bics	r3, r2
 8008cd0:	001a      	movs	r2, r3
 8008cd2:	3208      	adds	r2, #8
 8008cd4:	6022      	str	r2, [r4, #0]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	681e      	ldr	r6, [r3, #0]
 8008cda:	685f      	ldr	r7, [r3, #4]
 8008cdc:	007b      	lsls	r3, r7, #1
 8008cde:	085b      	lsrs	r3, r3, #1
 8008ce0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008ce2:	9610      	str	r6, [sp, #64]	@ 0x40
 8008ce4:	64ae      	str	r6, [r5, #72]	@ 0x48
 8008ce6:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8008ce8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008cea:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008cec:	4ba7      	ldr	r3, [pc, #668]	@ (8008f8c <_printf_float+0x2f4>)
 8008cee:	4252      	negs	r2, r2
 8008cf0:	f7f9 fdde 	bl	80028b0 <__aeabi_dcmpun>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d131      	bne.n	8008d5c <_printf_float+0xc4>
 8008cf8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008cfa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	4ba3      	ldr	r3, [pc, #652]	@ (8008f8c <_printf_float+0x2f4>)
 8008d00:	4252      	negs	r2, r2
 8008d02:	f7f7 fbbd 	bl	8000480 <__aeabi_dcmple>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d128      	bne.n	8008d5c <_printf_float+0xc4>
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	0030      	movs	r0, r6
 8008d10:	0039      	movs	r1, r7
 8008d12:	f7f7 fbab 	bl	800046c <__aeabi_dcmplt>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	d003      	beq.n	8008d22 <_printf_float+0x8a>
 8008d1a:	002b      	movs	r3, r5
 8008d1c:	222d      	movs	r2, #45	@ 0x2d
 8008d1e:	3343      	adds	r3, #67	@ 0x43
 8008d20:	701a      	strb	r2, [r3, #0]
 8008d22:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d24:	4f9a      	ldr	r7, [pc, #616]	@ (8008f90 <_printf_float+0x2f8>)
 8008d26:	2b47      	cmp	r3, #71	@ 0x47
 8008d28:	d800      	bhi.n	8008d2c <_printf_float+0x94>
 8008d2a:	4f9a      	ldr	r7, [pc, #616]	@ (8008f94 <_printf_float+0x2fc>)
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	2400      	movs	r4, #0
 8008d30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d32:	612b      	str	r3, [r5, #16]
 8008d34:	3301      	adds	r3, #1
 8008d36:	439a      	bics	r2, r3
 8008d38:	602a      	str	r2, [r5, #0]
 8008d3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d3c:	0029      	movs	r1, r5
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d44:	aa15      	add	r2, sp, #84	@ 0x54
 8008d46:	f000 f9e5 	bl	8009114 <_printf_common>
 8008d4a:	3001      	adds	r0, #1
 8008d4c:	d000      	beq.n	8008d50 <_printf_float+0xb8>
 8008d4e:	e09e      	b.n	8008e8e <_printf_float+0x1f6>
 8008d50:	2001      	movs	r0, #1
 8008d52:	4240      	negs	r0, r0
 8008d54:	b017      	add	sp, #92	@ 0x5c
 8008d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d58:	3307      	adds	r3, #7
 8008d5a:	e7b8      	b.n	8008cce <_printf_float+0x36>
 8008d5c:	0032      	movs	r2, r6
 8008d5e:	003b      	movs	r3, r7
 8008d60:	0030      	movs	r0, r6
 8008d62:	0039      	movs	r1, r7
 8008d64:	f7f9 fda4 	bl	80028b0 <__aeabi_dcmpun>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d00b      	beq.n	8008d84 <_printf_float+0xec>
 8008d6c:	2f00      	cmp	r7, #0
 8008d6e:	da03      	bge.n	8008d78 <_printf_float+0xe0>
 8008d70:	002b      	movs	r3, r5
 8008d72:	222d      	movs	r2, #45	@ 0x2d
 8008d74:	3343      	adds	r3, #67	@ 0x43
 8008d76:	701a      	strb	r2, [r3, #0]
 8008d78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d7a:	4f87      	ldr	r7, [pc, #540]	@ (8008f98 <_printf_float+0x300>)
 8008d7c:	2b47      	cmp	r3, #71	@ 0x47
 8008d7e:	d8d5      	bhi.n	8008d2c <_printf_float+0x94>
 8008d80:	4f86      	ldr	r7, [pc, #536]	@ (8008f9c <_printf_float+0x304>)
 8008d82:	e7d3      	b.n	8008d2c <_printf_float+0x94>
 8008d84:	2220      	movs	r2, #32
 8008d86:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8008d88:	686b      	ldr	r3, [r5, #4]
 8008d8a:	4394      	bics	r4, r2
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	d146      	bne.n	8008e1e <_printf_float+0x186>
 8008d90:	3307      	adds	r3, #7
 8008d92:	606b      	str	r3, [r5, #4]
 8008d94:	2380      	movs	r3, #128	@ 0x80
 8008d96:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d98:	00db      	lsls	r3, r3, #3
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	602b      	str	r3, [r5, #0]
 8008da0:	9206      	str	r2, [sp, #24]
 8008da2:	aa14      	add	r2, sp, #80	@ 0x50
 8008da4:	9205      	str	r2, [sp, #20]
 8008da6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008da8:	a90a      	add	r1, sp, #40	@ 0x28
 8008daa:	9204      	str	r2, [sp, #16]
 8008dac:	aa13      	add	r2, sp, #76	@ 0x4c
 8008dae:	9203      	str	r2, [sp, #12]
 8008db0:	2223      	movs	r2, #35	@ 0x23
 8008db2:	1852      	adds	r2, r2, r1
 8008db4:	9202      	str	r2, [sp, #8]
 8008db6:	9301      	str	r3, [sp, #4]
 8008db8:	686b      	ldr	r3, [r5, #4]
 8008dba:	0032      	movs	r2, r6
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008dc0:	003b      	movs	r3, r7
 8008dc2:	f7ff fec3 	bl	8008b4c <__cvt>
 8008dc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008dc8:	0007      	movs	r7, r0
 8008dca:	2c47      	cmp	r4, #71	@ 0x47
 8008dcc:	d12d      	bne.n	8008e2a <_printf_float+0x192>
 8008dce:	1cd3      	adds	r3, r2, #3
 8008dd0:	db02      	blt.n	8008dd8 <_printf_float+0x140>
 8008dd2:	686b      	ldr	r3, [r5, #4]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	dd47      	ble.n	8008e68 <_printf_float+0x1d0>
 8008dd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008dda:	3b02      	subs	r3, #2
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	930c      	str	r3, [sp, #48]	@ 0x30
 8008de0:	0028      	movs	r0, r5
 8008de2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008de4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008de6:	3901      	subs	r1, #1
 8008de8:	3050      	adds	r0, #80	@ 0x50
 8008dea:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008dec:	f7ff ff14 	bl	8008c18 <__exponent>
 8008df0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008df2:	0004      	movs	r4, r0
 8008df4:	1813      	adds	r3, r2, r0
 8008df6:	612b      	str	r3, [r5, #16]
 8008df8:	2a01      	cmp	r2, #1
 8008dfa:	dc02      	bgt.n	8008e02 <_printf_float+0x16a>
 8008dfc:	682a      	ldr	r2, [r5, #0]
 8008dfe:	07d2      	lsls	r2, r2, #31
 8008e00:	d501      	bpl.n	8008e06 <_printf_float+0x16e>
 8008e02:	3301      	adds	r3, #1
 8008e04:	612b      	str	r3, [r5, #16]
 8008e06:	2323      	movs	r3, #35	@ 0x23
 8008e08:	aa0a      	add	r2, sp, #40	@ 0x28
 8008e0a:	189b      	adds	r3, r3, r2
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d100      	bne.n	8008e14 <_printf_float+0x17c>
 8008e12:	e792      	b.n	8008d3a <_printf_float+0xa2>
 8008e14:	002b      	movs	r3, r5
 8008e16:	222d      	movs	r2, #45	@ 0x2d
 8008e18:	3343      	adds	r3, #67	@ 0x43
 8008e1a:	701a      	strb	r2, [r3, #0]
 8008e1c:	e78d      	b.n	8008d3a <_printf_float+0xa2>
 8008e1e:	2c47      	cmp	r4, #71	@ 0x47
 8008e20:	d1b8      	bne.n	8008d94 <_printf_float+0xfc>
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1b6      	bne.n	8008d94 <_printf_float+0xfc>
 8008e26:	3301      	adds	r3, #1
 8008e28:	e7b3      	b.n	8008d92 <_printf_float+0xfa>
 8008e2a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e2c:	2b65      	cmp	r3, #101	@ 0x65
 8008e2e:	d9d7      	bls.n	8008de0 <_printf_float+0x148>
 8008e30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e32:	2b66      	cmp	r3, #102	@ 0x66
 8008e34:	d11a      	bne.n	8008e6c <_printf_float+0x1d4>
 8008e36:	686b      	ldr	r3, [r5, #4]
 8008e38:	2a00      	cmp	r2, #0
 8008e3a:	dd09      	ble.n	8008e50 <_printf_float+0x1b8>
 8008e3c:	612a      	str	r2, [r5, #16]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d102      	bne.n	8008e48 <_printf_float+0x1b0>
 8008e42:	6829      	ldr	r1, [r5, #0]
 8008e44:	07c9      	lsls	r1, r1, #31
 8008e46:	d50b      	bpl.n	8008e60 <_printf_float+0x1c8>
 8008e48:	3301      	adds	r3, #1
 8008e4a:	189b      	adds	r3, r3, r2
 8008e4c:	612b      	str	r3, [r5, #16]
 8008e4e:	e007      	b.n	8008e60 <_printf_float+0x1c8>
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d103      	bne.n	8008e5c <_printf_float+0x1c4>
 8008e54:	2201      	movs	r2, #1
 8008e56:	6829      	ldr	r1, [r5, #0]
 8008e58:	4211      	tst	r1, r2
 8008e5a:	d000      	beq.n	8008e5e <_printf_float+0x1c6>
 8008e5c:	1c9a      	adds	r2, r3, #2
 8008e5e:	612a      	str	r2, [r5, #16]
 8008e60:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e62:	2400      	movs	r4, #0
 8008e64:	65ab      	str	r3, [r5, #88]	@ 0x58
 8008e66:	e7ce      	b.n	8008e06 <_printf_float+0x16e>
 8008e68:	2367      	movs	r3, #103	@ 0x67
 8008e6a:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e6c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8008e6e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008e70:	4299      	cmp	r1, r3
 8008e72:	db06      	blt.n	8008e82 <_printf_float+0x1ea>
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	6129      	str	r1, [r5, #16]
 8008e78:	07db      	lsls	r3, r3, #31
 8008e7a:	d5f1      	bpl.n	8008e60 <_printf_float+0x1c8>
 8008e7c:	3101      	adds	r1, #1
 8008e7e:	6129      	str	r1, [r5, #16]
 8008e80:	e7ee      	b.n	8008e60 <_printf_float+0x1c8>
 8008e82:	2201      	movs	r2, #1
 8008e84:	2900      	cmp	r1, #0
 8008e86:	dce0      	bgt.n	8008e4a <_printf_float+0x1b2>
 8008e88:	1892      	adds	r2, r2, r2
 8008e8a:	1a52      	subs	r2, r2, r1
 8008e8c:	e7dd      	b.n	8008e4a <_printf_float+0x1b2>
 8008e8e:	682a      	ldr	r2, [r5, #0]
 8008e90:	0553      	lsls	r3, r2, #21
 8008e92:	d408      	bmi.n	8008ea6 <_printf_float+0x20e>
 8008e94:	692b      	ldr	r3, [r5, #16]
 8008e96:	003a      	movs	r2, r7
 8008e98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e9c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008e9e:	47a0      	blx	r4
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	d129      	bne.n	8008ef8 <_printf_float+0x260>
 8008ea4:	e754      	b.n	8008d50 <_printf_float+0xb8>
 8008ea6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ea8:	2b65      	cmp	r3, #101	@ 0x65
 8008eaa:	d800      	bhi.n	8008eae <_printf_float+0x216>
 8008eac:	e0db      	b.n	8009066 <_printf_float+0x3ce>
 8008eae:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8008eb0:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	f7f7 fad3 	bl	8000460 <__aeabi_dcmpeq>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	d033      	beq.n	8008f26 <_printf_float+0x28e>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	4a37      	ldr	r2, [pc, #220]	@ (8008fa0 <_printf_float+0x308>)
 8008ec2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ec4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ec6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008ec8:	47a0      	blx	r4
 8008eca:	3001      	adds	r0, #1
 8008ecc:	d100      	bne.n	8008ed0 <_printf_float+0x238>
 8008ece:	e73f      	b.n	8008d50 <_printf_float+0xb8>
 8008ed0:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008ed2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ed4:	42b3      	cmp	r3, r6
 8008ed6:	db02      	blt.n	8008ede <_printf_float+0x246>
 8008ed8:	682b      	ldr	r3, [r5, #0]
 8008eda:	07db      	lsls	r3, r3, #31
 8008edc:	d50c      	bpl.n	8008ef8 <_printf_float+0x260>
 8008ede:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008ee0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ee2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008ee4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ee6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ee8:	47a0      	blx	r4
 8008eea:	2400      	movs	r4, #0
 8008eec:	3001      	adds	r0, #1
 8008eee:	d100      	bne.n	8008ef2 <_printf_float+0x25a>
 8008ef0:	e72e      	b.n	8008d50 <_printf_float+0xb8>
 8008ef2:	1e73      	subs	r3, r6, #1
 8008ef4:	42a3      	cmp	r3, r4
 8008ef6:	dc0a      	bgt.n	8008f0e <_printf_float+0x276>
 8008ef8:	682b      	ldr	r3, [r5, #0]
 8008efa:	079b      	lsls	r3, r3, #30
 8008efc:	d500      	bpl.n	8008f00 <_printf_float+0x268>
 8008efe:	e106      	b.n	800910e <_printf_float+0x476>
 8008f00:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008f02:	68e8      	ldr	r0, [r5, #12]
 8008f04:	4298      	cmp	r0, r3
 8008f06:	db00      	blt.n	8008f0a <_printf_float+0x272>
 8008f08:	e724      	b.n	8008d54 <_printf_float+0xbc>
 8008f0a:	0018      	movs	r0, r3
 8008f0c:	e722      	b.n	8008d54 <_printf_float+0xbc>
 8008f0e:	002a      	movs	r2, r5
 8008f10:	2301      	movs	r3, #1
 8008f12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f16:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8008f18:	321a      	adds	r2, #26
 8008f1a:	47b8      	blx	r7
 8008f1c:	3001      	adds	r0, #1
 8008f1e:	d100      	bne.n	8008f22 <_printf_float+0x28a>
 8008f20:	e716      	b.n	8008d50 <_printf_float+0xb8>
 8008f22:	3401      	adds	r4, #1
 8008f24:	e7e5      	b.n	8008ef2 <_printf_float+0x25a>
 8008f26:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	dc3b      	bgt.n	8008fa4 <_printf_float+0x30c>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8008fa0 <_printf_float+0x308>)
 8008f30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f34:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008f36:	47a0      	blx	r4
 8008f38:	3001      	adds	r0, #1
 8008f3a:	d100      	bne.n	8008f3e <_printf_float+0x2a6>
 8008f3c:	e708      	b.n	8008d50 <_printf_float+0xb8>
 8008f3e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8008f40:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f42:	4333      	orrs	r3, r6
 8008f44:	d102      	bne.n	8008f4c <_printf_float+0x2b4>
 8008f46:	682b      	ldr	r3, [r5, #0]
 8008f48:	07db      	lsls	r3, r3, #31
 8008f4a:	d5d5      	bpl.n	8008ef8 <_printf_float+0x260>
 8008f4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f4e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008f50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f54:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008f56:	47a0      	blx	r4
 8008f58:	2300      	movs	r3, #0
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	d100      	bne.n	8008f60 <_printf_float+0x2c8>
 8008f5e:	e6f7      	b.n	8008d50 <_printf_float+0xb8>
 8008f60:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f62:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008f64:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008f66:	425b      	negs	r3, r3
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	dc01      	bgt.n	8008f70 <_printf_float+0x2d8>
 8008f6c:	0033      	movs	r3, r6
 8008f6e:	e792      	b.n	8008e96 <_printf_float+0x1fe>
 8008f70:	002a      	movs	r2, r5
 8008f72:	2301      	movs	r3, #1
 8008f74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f78:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8008f7a:	321a      	adds	r2, #26
 8008f7c:	47a0      	blx	r4
 8008f7e:	3001      	adds	r0, #1
 8008f80:	d100      	bne.n	8008f84 <_printf_float+0x2ec>
 8008f82:	e6e5      	b.n	8008d50 <_printf_float+0xb8>
 8008f84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f86:	3301      	adds	r3, #1
 8008f88:	e7ea      	b.n	8008f60 <_printf_float+0x2c8>
 8008f8a:	46c0      	nop			@ (mov r8, r8)
 8008f8c:	7fefffff 	.word	0x7fefffff
 8008f90:	0800d419 	.word	0x0800d419
 8008f94:	0800d415 	.word	0x0800d415
 8008f98:	0800d421 	.word	0x0800d421
 8008f9c:	0800d41d 	.word	0x0800d41d
 8008fa0:	0800d425 	.word	0x0800d425
 8008fa4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008fa6:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008fa8:	930c      	str	r3, [sp, #48]	@ 0x30
 8008faa:	429e      	cmp	r6, r3
 8008fac:	dd00      	ble.n	8008fb0 <_printf_float+0x318>
 8008fae:	001e      	movs	r6, r3
 8008fb0:	2e00      	cmp	r6, #0
 8008fb2:	dc31      	bgt.n	8009018 <_printf_float+0x380>
 8008fb4:	43f3      	mvns	r3, r6
 8008fb6:	2400      	movs	r4, #0
 8008fb8:	17db      	asrs	r3, r3, #31
 8008fba:	4033      	ands	r3, r6
 8008fbc:	930e      	str	r3, [sp, #56]	@ 0x38
 8008fbe:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8008fc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fc2:	1af3      	subs	r3, r6, r3
 8008fc4:	42a3      	cmp	r3, r4
 8008fc6:	dc30      	bgt.n	800902a <_printf_float+0x392>
 8008fc8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008fca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	dc38      	bgt.n	8009042 <_printf_float+0x3aa>
 8008fd0:	682b      	ldr	r3, [r5, #0]
 8008fd2:	07db      	lsls	r3, r3, #31
 8008fd4:	d435      	bmi.n	8009042 <_printf_float+0x3aa>
 8008fd6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008fd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008fda:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008fdc:	1b9b      	subs	r3, r3, r6
 8008fde:	1b14      	subs	r4, r2, r4
 8008fe0:	429c      	cmp	r4, r3
 8008fe2:	dd00      	ble.n	8008fe6 <_printf_float+0x34e>
 8008fe4:	001c      	movs	r4, r3
 8008fe6:	2c00      	cmp	r4, #0
 8008fe8:	dc34      	bgt.n	8009054 <_printf_float+0x3bc>
 8008fea:	43e3      	mvns	r3, r4
 8008fec:	2600      	movs	r6, #0
 8008fee:	17db      	asrs	r3, r3, #31
 8008ff0:	401c      	ands	r4, r3
 8008ff2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ff4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008ff6:	1ad3      	subs	r3, r2, r3
 8008ff8:	1b1b      	subs	r3, r3, r4
 8008ffa:	42b3      	cmp	r3, r6
 8008ffc:	dc00      	bgt.n	8009000 <_printf_float+0x368>
 8008ffe:	e77b      	b.n	8008ef8 <_printf_float+0x260>
 8009000:	002a      	movs	r2, r5
 8009002:	2301      	movs	r3, #1
 8009004:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009006:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009008:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800900a:	321a      	adds	r2, #26
 800900c:	47b8      	blx	r7
 800900e:	3001      	adds	r0, #1
 8009010:	d100      	bne.n	8009014 <_printf_float+0x37c>
 8009012:	e69d      	b.n	8008d50 <_printf_float+0xb8>
 8009014:	3601      	adds	r6, #1
 8009016:	e7ec      	b.n	8008ff2 <_printf_float+0x35a>
 8009018:	0033      	movs	r3, r6
 800901a:	003a      	movs	r2, r7
 800901c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800901e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009020:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8009022:	47a0      	blx	r4
 8009024:	3001      	adds	r0, #1
 8009026:	d1c5      	bne.n	8008fb4 <_printf_float+0x31c>
 8009028:	e692      	b.n	8008d50 <_printf_float+0xb8>
 800902a:	002a      	movs	r2, r5
 800902c:	2301      	movs	r3, #1
 800902e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009030:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009032:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009034:	321a      	adds	r2, #26
 8009036:	47b0      	blx	r6
 8009038:	3001      	adds	r0, #1
 800903a:	d100      	bne.n	800903e <_printf_float+0x3a6>
 800903c:	e688      	b.n	8008d50 <_printf_float+0xb8>
 800903e:	3401      	adds	r4, #1
 8009040:	e7bd      	b.n	8008fbe <_printf_float+0x326>
 8009042:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009044:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009046:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009048:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800904a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800904c:	47a0      	blx	r4
 800904e:	3001      	adds	r0, #1
 8009050:	d1c1      	bne.n	8008fd6 <_printf_float+0x33e>
 8009052:	e67d      	b.n	8008d50 <_printf_float+0xb8>
 8009054:	19ba      	adds	r2, r7, r6
 8009056:	0023      	movs	r3, r4
 8009058:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800905a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800905c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800905e:	47b0      	blx	r6
 8009060:	3001      	adds	r0, #1
 8009062:	d1c2      	bne.n	8008fea <_printf_float+0x352>
 8009064:	e674      	b.n	8008d50 <_printf_float+0xb8>
 8009066:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009068:	930c      	str	r3, [sp, #48]	@ 0x30
 800906a:	2b01      	cmp	r3, #1
 800906c:	dc02      	bgt.n	8009074 <_printf_float+0x3dc>
 800906e:	2301      	movs	r3, #1
 8009070:	421a      	tst	r2, r3
 8009072:	d039      	beq.n	80090e8 <_printf_float+0x450>
 8009074:	2301      	movs	r3, #1
 8009076:	003a      	movs	r2, r7
 8009078:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800907a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800907c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800907e:	47b0      	blx	r6
 8009080:	3001      	adds	r0, #1
 8009082:	d100      	bne.n	8009086 <_printf_float+0x3ee>
 8009084:	e664      	b.n	8008d50 <_printf_float+0xb8>
 8009086:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009088:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800908a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800908c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800908e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009090:	47b0      	blx	r6
 8009092:	3001      	adds	r0, #1
 8009094:	d100      	bne.n	8009098 <_printf_float+0x400>
 8009096:	e65b      	b.n	8008d50 <_printf_float+0xb8>
 8009098:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800909a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800909c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800909e:	2200      	movs	r2, #0
 80090a0:	3b01      	subs	r3, #1
 80090a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80090a4:	2300      	movs	r3, #0
 80090a6:	f7f7 f9db 	bl	8000460 <__aeabi_dcmpeq>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	d11a      	bne.n	80090e4 <_printf_float+0x44c>
 80090ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80090b0:	1c7a      	adds	r2, r7, #1
 80090b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090b4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090b6:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80090b8:	47b0      	blx	r6
 80090ba:	3001      	adds	r0, #1
 80090bc:	d10e      	bne.n	80090dc <_printf_float+0x444>
 80090be:	e647      	b.n	8008d50 <_printf_float+0xb8>
 80090c0:	002a      	movs	r2, r5
 80090c2:	2301      	movs	r3, #1
 80090c4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090c8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80090ca:	321a      	adds	r2, #26
 80090cc:	47b8      	blx	r7
 80090ce:	3001      	adds	r0, #1
 80090d0:	d100      	bne.n	80090d4 <_printf_float+0x43c>
 80090d2:	e63d      	b.n	8008d50 <_printf_float+0xb8>
 80090d4:	3601      	adds	r6, #1
 80090d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80090d8:	429e      	cmp	r6, r3
 80090da:	dbf1      	blt.n	80090c0 <_printf_float+0x428>
 80090dc:	002a      	movs	r2, r5
 80090de:	0023      	movs	r3, r4
 80090e0:	3250      	adds	r2, #80	@ 0x50
 80090e2:	e6d9      	b.n	8008e98 <_printf_float+0x200>
 80090e4:	2600      	movs	r6, #0
 80090e6:	e7f6      	b.n	80090d6 <_printf_float+0x43e>
 80090e8:	003a      	movs	r2, r7
 80090ea:	e7e2      	b.n	80090b2 <_printf_float+0x41a>
 80090ec:	002a      	movs	r2, r5
 80090ee:	2301      	movs	r3, #1
 80090f0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090f4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80090f6:	3219      	adds	r2, #25
 80090f8:	47b0      	blx	r6
 80090fa:	3001      	adds	r0, #1
 80090fc:	d100      	bne.n	8009100 <_printf_float+0x468>
 80090fe:	e627      	b.n	8008d50 <_printf_float+0xb8>
 8009100:	3401      	adds	r4, #1
 8009102:	68eb      	ldr	r3, [r5, #12]
 8009104:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009106:	1a9b      	subs	r3, r3, r2
 8009108:	42a3      	cmp	r3, r4
 800910a:	dcef      	bgt.n	80090ec <_printf_float+0x454>
 800910c:	e6f8      	b.n	8008f00 <_printf_float+0x268>
 800910e:	2400      	movs	r4, #0
 8009110:	e7f7      	b.n	8009102 <_printf_float+0x46a>
 8009112:	46c0      	nop			@ (mov r8, r8)

08009114 <_printf_common>:
 8009114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009116:	0016      	movs	r6, r2
 8009118:	9301      	str	r3, [sp, #4]
 800911a:	688a      	ldr	r2, [r1, #8]
 800911c:	690b      	ldr	r3, [r1, #16]
 800911e:	000c      	movs	r4, r1
 8009120:	9000      	str	r0, [sp, #0]
 8009122:	4293      	cmp	r3, r2
 8009124:	da00      	bge.n	8009128 <_printf_common+0x14>
 8009126:	0013      	movs	r3, r2
 8009128:	0022      	movs	r2, r4
 800912a:	6033      	str	r3, [r6, #0]
 800912c:	3243      	adds	r2, #67	@ 0x43
 800912e:	7812      	ldrb	r2, [r2, #0]
 8009130:	2a00      	cmp	r2, #0
 8009132:	d001      	beq.n	8009138 <_printf_common+0x24>
 8009134:	3301      	adds	r3, #1
 8009136:	6033      	str	r3, [r6, #0]
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	069b      	lsls	r3, r3, #26
 800913c:	d502      	bpl.n	8009144 <_printf_common+0x30>
 800913e:	6833      	ldr	r3, [r6, #0]
 8009140:	3302      	adds	r3, #2
 8009142:	6033      	str	r3, [r6, #0]
 8009144:	6822      	ldr	r2, [r4, #0]
 8009146:	2306      	movs	r3, #6
 8009148:	0015      	movs	r5, r2
 800914a:	401d      	ands	r5, r3
 800914c:	421a      	tst	r2, r3
 800914e:	d027      	beq.n	80091a0 <_printf_common+0x8c>
 8009150:	0023      	movs	r3, r4
 8009152:	3343      	adds	r3, #67	@ 0x43
 8009154:	781b      	ldrb	r3, [r3, #0]
 8009156:	1e5a      	subs	r2, r3, #1
 8009158:	4193      	sbcs	r3, r2
 800915a:	6822      	ldr	r2, [r4, #0]
 800915c:	0692      	lsls	r2, r2, #26
 800915e:	d430      	bmi.n	80091c2 <_printf_common+0xae>
 8009160:	0022      	movs	r2, r4
 8009162:	9901      	ldr	r1, [sp, #4]
 8009164:	9800      	ldr	r0, [sp, #0]
 8009166:	9d08      	ldr	r5, [sp, #32]
 8009168:	3243      	adds	r2, #67	@ 0x43
 800916a:	47a8      	blx	r5
 800916c:	3001      	adds	r0, #1
 800916e:	d025      	beq.n	80091bc <_printf_common+0xa8>
 8009170:	2206      	movs	r2, #6
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	2500      	movs	r5, #0
 8009176:	4013      	ands	r3, r2
 8009178:	2b04      	cmp	r3, #4
 800917a:	d105      	bne.n	8009188 <_printf_common+0x74>
 800917c:	6833      	ldr	r3, [r6, #0]
 800917e:	68e5      	ldr	r5, [r4, #12]
 8009180:	1aed      	subs	r5, r5, r3
 8009182:	43eb      	mvns	r3, r5
 8009184:	17db      	asrs	r3, r3, #31
 8009186:	401d      	ands	r5, r3
 8009188:	68a3      	ldr	r3, [r4, #8]
 800918a:	6922      	ldr	r2, [r4, #16]
 800918c:	4293      	cmp	r3, r2
 800918e:	dd01      	ble.n	8009194 <_printf_common+0x80>
 8009190:	1a9b      	subs	r3, r3, r2
 8009192:	18ed      	adds	r5, r5, r3
 8009194:	2600      	movs	r6, #0
 8009196:	42b5      	cmp	r5, r6
 8009198:	d120      	bne.n	80091dc <_printf_common+0xc8>
 800919a:	2000      	movs	r0, #0
 800919c:	e010      	b.n	80091c0 <_printf_common+0xac>
 800919e:	3501      	adds	r5, #1
 80091a0:	68e3      	ldr	r3, [r4, #12]
 80091a2:	6832      	ldr	r2, [r6, #0]
 80091a4:	1a9b      	subs	r3, r3, r2
 80091a6:	42ab      	cmp	r3, r5
 80091a8:	ddd2      	ble.n	8009150 <_printf_common+0x3c>
 80091aa:	0022      	movs	r2, r4
 80091ac:	2301      	movs	r3, #1
 80091ae:	9901      	ldr	r1, [sp, #4]
 80091b0:	9800      	ldr	r0, [sp, #0]
 80091b2:	9f08      	ldr	r7, [sp, #32]
 80091b4:	3219      	adds	r2, #25
 80091b6:	47b8      	blx	r7
 80091b8:	3001      	adds	r0, #1
 80091ba:	d1f0      	bne.n	800919e <_printf_common+0x8a>
 80091bc:	2001      	movs	r0, #1
 80091be:	4240      	negs	r0, r0
 80091c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091c2:	2030      	movs	r0, #48	@ 0x30
 80091c4:	18e1      	adds	r1, r4, r3
 80091c6:	3143      	adds	r1, #67	@ 0x43
 80091c8:	7008      	strb	r0, [r1, #0]
 80091ca:	0021      	movs	r1, r4
 80091cc:	1c5a      	adds	r2, r3, #1
 80091ce:	3145      	adds	r1, #69	@ 0x45
 80091d0:	7809      	ldrb	r1, [r1, #0]
 80091d2:	18a2      	adds	r2, r4, r2
 80091d4:	3243      	adds	r2, #67	@ 0x43
 80091d6:	3302      	adds	r3, #2
 80091d8:	7011      	strb	r1, [r2, #0]
 80091da:	e7c1      	b.n	8009160 <_printf_common+0x4c>
 80091dc:	0022      	movs	r2, r4
 80091de:	2301      	movs	r3, #1
 80091e0:	9901      	ldr	r1, [sp, #4]
 80091e2:	9800      	ldr	r0, [sp, #0]
 80091e4:	9f08      	ldr	r7, [sp, #32]
 80091e6:	321a      	adds	r2, #26
 80091e8:	47b8      	blx	r7
 80091ea:	3001      	adds	r0, #1
 80091ec:	d0e6      	beq.n	80091bc <_printf_common+0xa8>
 80091ee:	3601      	adds	r6, #1
 80091f0:	e7d1      	b.n	8009196 <_printf_common+0x82>
	...

080091f4 <_printf_i>:
 80091f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091f6:	b08b      	sub	sp, #44	@ 0x2c
 80091f8:	9206      	str	r2, [sp, #24]
 80091fa:	000a      	movs	r2, r1
 80091fc:	3243      	adds	r2, #67	@ 0x43
 80091fe:	9307      	str	r3, [sp, #28]
 8009200:	9005      	str	r0, [sp, #20]
 8009202:	9203      	str	r2, [sp, #12]
 8009204:	7e0a      	ldrb	r2, [r1, #24]
 8009206:	000c      	movs	r4, r1
 8009208:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800920a:	2a78      	cmp	r2, #120	@ 0x78
 800920c:	d809      	bhi.n	8009222 <_printf_i+0x2e>
 800920e:	2a62      	cmp	r2, #98	@ 0x62
 8009210:	d80b      	bhi.n	800922a <_printf_i+0x36>
 8009212:	2a00      	cmp	r2, #0
 8009214:	d100      	bne.n	8009218 <_printf_i+0x24>
 8009216:	e0ba      	b.n	800938e <_printf_i+0x19a>
 8009218:	497a      	ldr	r1, [pc, #488]	@ (8009404 <_printf_i+0x210>)
 800921a:	9104      	str	r1, [sp, #16]
 800921c:	2a58      	cmp	r2, #88	@ 0x58
 800921e:	d100      	bne.n	8009222 <_printf_i+0x2e>
 8009220:	e08e      	b.n	8009340 <_printf_i+0x14c>
 8009222:	0025      	movs	r5, r4
 8009224:	3542      	adds	r5, #66	@ 0x42
 8009226:	702a      	strb	r2, [r5, #0]
 8009228:	e022      	b.n	8009270 <_printf_i+0x7c>
 800922a:	0010      	movs	r0, r2
 800922c:	3863      	subs	r0, #99	@ 0x63
 800922e:	2815      	cmp	r0, #21
 8009230:	d8f7      	bhi.n	8009222 <_printf_i+0x2e>
 8009232:	f7f6 ff85 	bl	8000140 <__gnu_thumb1_case_shi>
 8009236:	0016      	.short	0x0016
 8009238:	fff6001f 	.word	0xfff6001f
 800923c:	fff6fff6 	.word	0xfff6fff6
 8009240:	001ffff6 	.word	0x001ffff6
 8009244:	fff6fff6 	.word	0xfff6fff6
 8009248:	fff6fff6 	.word	0xfff6fff6
 800924c:	0036009f 	.word	0x0036009f
 8009250:	fff6007e 	.word	0xfff6007e
 8009254:	00b0fff6 	.word	0x00b0fff6
 8009258:	0036fff6 	.word	0x0036fff6
 800925c:	fff6fff6 	.word	0xfff6fff6
 8009260:	0082      	.short	0x0082
 8009262:	0025      	movs	r5, r4
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	3542      	adds	r5, #66	@ 0x42
 8009268:	1d11      	adds	r1, r2, #4
 800926a:	6019      	str	r1, [r3, #0]
 800926c:	6813      	ldr	r3, [r2, #0]
 800926e:	702b      	strb	r3, [r5, #0]
 8009270:	2301      	movs	r3, #1
 8009272:	e09e      	b.n	80093b2 <_printf_i+0x1be>
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	6809      	ldr	r1, [r1, #0]
 8009278:	1d02      	adds	r2, r0, #4
 800927a:	060d      	lsls	r5, r1, #24
 800927c:	d50b      	bpl.n	8009296 <_printf_i+0xa2>
 800927e:	6806      	ldr	r6, [r0, #0]
 8009280:	601a      	str	r2, [r3, #0]
 8009282:	2e00      	cmp	r6, #0
 8009284:	da03      	bge.n	800928e <_printf_i+0x9a>
 8009286:	232d      	movs	r3, #45	@ 0x2d
 8009288:	9a03      	ldr	r2, [sp, #12]
 800928a:	4276      	negs	r6, r6
 800928c:	7013      	strb	r3, [r2, #0]
 800928e:	4b5d      	ldr	r3, [pc, #372]	@ (8009404 <_printf_i+0x210>)
 8009290:	270a      	movs	r7, #10
 8009292:	9304      	str	r3, [sp, #16]
 8009294:	e018      	b.n	80092c8 <_printf_i+0xd4>
 8009296:	6806      	ldr	r6, [r0, #0]
 8009298:	601a      	str	r2, [r3, #0]
 800929a:	0649      	lsls	r1, r1, #25
 800929c:	d5f1      	bpl.n	8009282 <_printf_i+0x8e>
 800929e:	b236      	sxth	r6, r6
 80092a0:	e7ef      	b.n	8009282 <_printf_i+0x8e>
 80092a2:	6808      	ldr	r0, [r1, #0]
 80092a4:	6819      	ldr	r1, [r3, #0]
 80092a6:	c940      	ldmia	r1!, {r6}
 80092a8:	0605      	lsls	r5, r0, #24
 80092aa:	d402      	bmi.n	80092b2 <_printf_i+0xbe>
 80092ac:	0640      	lsls	r0, r0, #25
 80092ae:	d500      	bpl.n	80092b2 <_printf_i+0xbe>
 80092b0:	b2b6      	uxth	r6, r6
 80092b2:	6019      	str	r1, [r3, #0]
 80092b4:	4b53      	ldr	r3, [pc, #332]	@ (8009404 <_printf_i+0x210>)
 80092b6:	270a      	movs	r7, #10
 80092b8:	9304      	str	r3, [sp, #16]
 80092ba:	2a6f      	cmp	r2, #111	@ 0x6f
 80092bc:	d100      	bne.n	80092c0 <_printf_i+0xcc>
 80092be:	3f02      	subs	r7, #2
 80092c0:	0023      	movs	r3, r4
 80092c2:	2200      	movs	r2, #0
 80092c4:	3343      	adds	r3, #67	@ 0x43
 80092c6:	701a      	strb	r2, [r3, #0]
 80092c8:	6863      	ldr	r3, [r4, #4]
 80092ca:	60a3      	str	r3, [r4, #8]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	db06      	blt.n	80092de <_printf_i+0xea>
 80092d0:	2104      	movs	r1, #4
 80092d2:	6822      	ldr	r2, [r4, #0]
 80092d4:	9d03      	ldr	r5, [sp, #12]
 80092d6:	438a      	bics	r2, r1
 80092d8:	6022      	str	r2, [r4, #0]
 80092da:	4333      	orrs	r3, r6
 80092dc:	d00c      	beq.n	80092f8 <_printf_i+0x104>
 80092de:	9d03      	ldr	r5, [sp, #12]
 80092e0:	0030      	movs	r0, r6
 80092e2:	0039      	movs	r1, r7
 80092e4:	f7f6 ffbc 	bl	8000260 <__aeabi_uidivmod>
 80092e8:	9b04      	ldr	r3, [sp, #16]
 80092ea:	3d01      	subs	r5, #1
 80092ec:	5c5b      	ldrb	r3, [r3, r1]
 80092ee:	702b      	strb	r3, [r5, #0]
 80092f0:	0033      	movs	r3, r6
 80092f2:	0006      	movs	r6, r0
 80092f4:	429f      	cmp	r7, r3
 80092f6:	d9f3      	bls.n	80092e0 <_printf_i+0xec>
 80092f8:	2f08      	cmp	r7, #8
 80092fa:	d109      	bne.n	8009310 <_printf_i+0x11c>
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	07db      	lsls	r3, r3, #31
 8009300:	d506      	bpl.n	8009310 <_printf_i+0x11c>
 8009302:	6862      	ldr	r2, [r4, #4]
 8009304:	6923      	ldr	r3, [r4, #16]
 8009306:	429a      	cmp	r2, r3
 8009308:	dc02      	bgt.n	8009310 <_printf_i+0x11c>
 800930a:	2330      	movs	r3, #48	@ 0x30
 800930c:	3d01      	subs	r5, #1
 800930e:	702b      	strb	r3, [r5, #0]
 8009310:	9b03      	ldr	r3, [sp, #12]
 8009312:	1b5b      	subs	r3, r3, r5
 8009314:	6123      	str	r3, [r4, #16]
 8009316:	9b07      	ldr	r3, [sp, #28]
 8009318:	0021      	movs	r1, r4
 800931a:	9300      	str	r3, [sp, #0]
 800931c:	9805      	ldr	r0, [sp, #20]
 800931e:	9b06      	ldr	r3, [sp, #24]
 8009320:	aa09      	add	r2, sp, #36	@ 0x24
 8009322:	f7ff fef7 	bl	8009114 <_printf_common>
 8009326:	3001      	adds	r0, #1
 8009328:	d148      	bne.n	80093bc <_printf_i+0x1c8>
 800932a:	2001      	movs	r0, #1
 800932c:	4240      	negs	r0, r0
 800932e:	b00b      	add	sp, #44	@ 0x2c
 8009330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009332:	2220      	movs	r2, #32
 8009334:	6809      	ldr	r1, [r1, #0]
 8009336:	430a      	orrs	r2, r1
 8009338:	6022      	str	r2, [r4, #0]
 800933a:	2278      	movs	r2, #120	@ 0x78
 800933c:	4932      	ldr	r1, [pc, #200]	@ (8009408 <_printf_i+0x214>)
 800933e:	9104      	str	r1, [sp, #16]
 8009340:	0021      	movs	r1, r4
 8009342:	3145      	adds	r1, #69	@ 0x45
 8009344:	700a      	strb	r2, [r1, #0]
 8009346:	6819      	ldr	r1, [r3, #0]
 8009348:	6822      	ldr	r2, [r4, #0]
 800934a:	c940      	ldmia	r1!, {r6}
 800934c:	0610      	lsls	r0, r2, #24
 800934e:	d402      	bmi.n	8009356 <_printf_i+0x162>
 8009350:	0650      	lsls	r0, r2, #25
 8009352:	d500      	bpl.n	8009356 <_printf_i+0x162>
 8009354:	b2b6      	uxth	r6, r6
 8009356:	6019      	str	r1, [r3, #0]
 8009358:	07d3      	lsls	r3, r2, #31
 800935a:	d502      	bpl.n	8009362 <_printf_i+0x16e>
 800935c:	2320      	movs	r3, #32
 800935e:	4313      	orrs	r3, r2
 8009360:	6023      	str	r3, [r4, #0]
 8009362:	2e00      	cmp	r6, #0
 8009364:	d001      	beq.n	800936a <_printf_i+0x176>
 8009366:	2710      	movs	r7, #16
 8009368:	e7aa      	b.n	80092c0 <_printf_i+0xcc>
 800936a:	2220      	movs	r2, #32
 800936c:	6823      	ldr	r3, [r4, #0]
 800936e:	4393      	bics	r3, r2
 8009370:	6023      	str	r3, [r4, #0]
 8009372:	e7f8      	b.n	8009366 <_printf_i+0x172>
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	680d      	ldr	r5, [r1, #0]
 8009378:	1d10      	adds	r0, r2, #4
 800937a:	6949      	ldr	r1, [r1, #20]
 800937c:	6018      	str	r0, [r3, #0]
 800937e:	6813      	ldr	r3, [r2, #0]
 8009380:	062e      	lsls	r6, r5, #24
 8009382:	d501      	bpl.n	8009388 <_printf_i+0x194>
 8009384:	6019      	str	r1, [r3, #0]
 8009386:	e002      	b.n	800938e <_printf_i+0x19a>
 8009388:	066d      	lsls	r5, r5, #25
 800938a:	d5fb      	bpl.n	8009384 <_printf_i+0x190>
 800938c:	8019      	strh	r1, [r3, #0]
 800938e:	2300      	movs	r3, #0
 8009390:	9d03      	ldr	r5, [sp, #12]
 8009392:	6123      	str	r3, [r4, #16]
 8009394:	e7bf      	b.n	8009316 <_printf_i+0x122>
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	1d11      	adds	r1, r2, #4
 800939a:	6019      	str	r1, [r3, #0]
 800939c:	6815      	ldr	r5, [r2, #0]
 800939e:	2100      	movs	r1, #0
 80093a0:	0028      	movs	r0, r5
 80093a2:	6862      	ldr	r2, [r4, #4]
 80093a4:	f000 fd3b 	bl	8009e1e <memchr>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d001      	beq.n	80093b0 <_printf_i+0x1bc>
 80093ac:	1b40      	subs	r0, r0, r5
 80093ae:	6060      	str	r0, [r4, #4]
 80093b0:	6863      	ldr	r3, [r4, #4]
 80093b2:	6123      	str	r3, [r4, #16]
 80093b4:	2300      	movs	r3, #0
 80093b6:	9a03      	ldr	r2, [sp, #12]
 80093b8:	7013      	strb	r3, [r2, #0]
 80093ba:	e7ac      	b.n	8009316 <_printf_i+0x122>
 80093bc:	002a      	movs	r2, r5
 80093be:	6923      	ldr	r3, [r4, #16]
 80093c0:	9906      	ldr	r1, [sp, #24]
 80093c2:	9805      	ldr	r0, [sp, #20]
 80093c4:	9d07      	ldr	r5, [sp, #28]
 80093c6:	47a8      	blx	r5
 80093c8:	3001      	adds	r0, #1
 80093ca:	d0ae      	beq.n	800932a <_printf_i+0x136>
 80093cc:	6823      	ldr	r3, [r4, #0]
 80093ce:	079b      	lsls	r3, r3, #30
 80093d0:	d415      	bmi.n	80093fe <_printf_i+0x20a>
 80093d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093d4:	68e0      	ldr	r0, [r4, #12]
 80093d6:	4298      	cmp	r0, r3
 80093d8:	daa9      	bge.n	800932e <_printf_i+0x13a>
 80093da:	0018      	movs	r0, r3
 80093dc:	e7a7      	b.n	800932e <_printf_i+0x13a>
 80093de:	0022      	movs	r2, r4
 80093e0:	2301      	movs	r3, #1
 80093e2:	9906      	ldr	r1, [sp, #24]
 80093e4:	9805      	ldr	r0, [sp, #20]
 80093e6:	9e07      	ldr	r6, [sp, #28]
 80093e8:	3219      	adds	r2, #25
 80093ea:	47b0      	blx	r6
 80093ec:	3001      	adds	r0, #1
 80093ee:	d09c      	beq.n	800932a <_printf_i+0x136>
 80093f0:	3501      	adds	r5, #1
 80093f2:	68e3      	ldr	r3, [r4, #12]
 80093f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093f6:	1a9b      	subs	r3, r3, r2
 80093f8:	42ab      	cmp	r3, r5
 80093fa:	dcf0      	bgt.n	80093de <_printf_i+0x1ea>
 80093fc:	e7e9      	b.n	80093d2 <_printf_i+0x1de>
 80093fe:	2500      	movs	r5, #0
 8009400:	e7f7      	b.n	80093f2 <_printf_i+0x1fe>
 8009402:	46c0      	nop			@ (mov r8, r8)
 8009404:	0800d427 	.word	0x0800d427
 8009408:	0800d438 	.word	0x0800d438

0800940c <_scanf_float>:
 800940c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800940e:	b08b      	sub	sp, #44	@ 0x2c
 8009410:	0016      	movs	r6, r2
 8009412:	9003      	str	r0, [sp, #12]
 8009414:	22ae      	movs	r2, #174	@ 0xae
 8009416:	2000      	movs	r0, #0
 8009418:	9307      	str	r3, [sp, #28]
 800941a:	688b      	ldr	r3, [r1, #8]
 800941c:	000c      	movs	r4, r1
 800941e:	1e59      	subs	r1, r3, #1
 8009420:	0052      	lsls	r2, r2, #1
 8009422:	9006      	str	r0, [sp, #24]
 8009424:	4291      	cmp	r1, r2
 8009426:	d905      	bls.n	8009434 <_scanf_float+0x28>
 8009428:	3b5e      	subs	r3, #94	@ 0x5e
 800942a:	3bff      	subs	r3, #255	@ 0xff
 800942c:	9306      	str	r3, [sp, #24]
 800942e:	235e      	movs	r3, #94	@ 0x5e
 8009430:	33ff      	adds	r3, #255	@ 0xff
 8009432:	60a3      	str	r3, [r4, #8]
 8009434:	23f0      	movs	r3, #240	@ 0xf0
 8009436:	6822      	ldr	r2, [r4, #0]
 8009438:	00db      	lsls	r3, r3, #3
 800943a:	4313      	orrs	r3, r2
 800943c:	6023      	str	r3, [r4, #0]
 800943e:	0023      	movs	r3, r4
 8009440:	2500      	movs	r5, #0
 8009442:	331c      	adds	r3, #28
 8009444:	001f      	movs	r7, r3
 8009446:	9304      	str	r3, [sp, #16]
 8009448:	9502      	str	r5, [sp, #8]
 800944a:	9509      	str	r5, [sp, #36]	@ 0x24
 800944c:	9508      	str	r5, [sp, #32]
 800944e:	9501      	str	r5, [sp, #4]
 8009450:	9505      	str	r5, [sp, #20]
 8009452:	68a2      	ldr	r2, [r4, #8]
 8009454:	2a00      	cmp	r2, #0
 8009456:	d00a      	beq.n	800946e <_scanf_float+0x62>
 8009458:	6833      	ldr	r3, [r6, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	2b4e      	cmp	r3, #78	@ 0x4e
 800945e:	d844      	bhi.n	80094ea <_scanf_float+0xde>
 8009460:	0018      	movs	r0, r3
 8009462:	2b40      	cmp	r3, #64	@ 0x40
 8009464:	d82c      	bhi.n	80094c0 <_scanf_float+0xb4>
 8009466:	382b      	subs	r0, #43	@ 0x2b
 8009468:	b2c1      	uxtb	r1, r0
 800946a:	290e      	cmp	r1, #14
 800946c:	d92a      	bls.n	80094c4 <_scanf_float+0xb8>
 800946e:	9b01      	ldr	r3, [sp, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d003      	beq.n	800947c <_scanf_float+0x70>
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	4aa6      	ldr	r2, [pc, #664]	@ (8009710 <_scanf_float+0x304>)
 8009478:	4013      	ands	r3, r2
 800947a:	6023      	str	r3, [r4, #0]
 800947c:	9b02      	ldr	r3, [sp, #8]
 800947e:	3b01      	subs	r3, #1
 8009480:	2b01      	cmp	r3, #1
 8009482:	d900      	bls.n	8009486 <_scanf_float+0x7a>
 8009484:	e0fe      	b.n	8009684 <_scanf_float+0x278>
 8009486:	25be      	movs	r5, #190	@ 0xbe
 8009488:	006d      	lsls	r5, r5, #1
 800948a:	9b04      	ldr	r3, [sp, #16]
 800948c:	429f      	cmp	r7, r3
 800948e:	d900      	bls.n	8009492 <_scanf_float+0x86>
 8009490:	e0ee      	b.n	8009670 <_scanf_float+0x264>
 8009492:	2001      	movs	r0, #1
 8009494:	b00b      	add	sp, #44	@ 0x2c
 8009496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009498:	0018      	movs	r0, r3
 800949a:	3861      	subs	r0, #97	@ 0x61
 800949c:	280d      	cmp	r0, #13
 800949e:	d8e6      	bhi.n	800946e <_scanf_float+0x62>
 80094a0:	f7f6 fe4e 	bl	8000140 <__gnu_thumb1_case_shi>
 80094a4:	ffe50089 	.word	0xffe50089
 80094a8:	ffe5ffe5 	.word	0xffe5ffe5
 80094ac:	00a700bb 	.word	0x00a700bb
 80094b0:	ffe5ffe5 	.word	0xffe5ffe5
 80094b4:	ffe5008f 	.word	0xffe5008f
 80094b8:	ffe5ffe5 	.word	0xffe5ffe5
 80094bc:	006bffe5 	.word	0x006bffe5
 80094c0:	3841      	subs	r0, #65	@ 0x41
 80094c2:	e7eb      	b.n	800949c <_scanf_float+0x90>
 80094c4:	280e      	cmp	r0, #14
 80094c6:	d8d2      	bhi.n	800946e <_scanf_float+0x62>
 80094c8:	f7f6 fe3a 	bl	8000140 <__gnu_thumb1_case_shi>
 80094cc:	ffd1004f 	.word	0xffd1004f
 80094d0:	009d004f 	.word	0x009d004f
 80094d4:	0021ffd1 	.word	0x0021ffd1
 80094d8:	00410041 	.word	0x00410041
 80094dc:	00410041 	.word	0x00410041
 80094e0:	00410041 	.word	0x00410041
 80094e4:	00410041 	.word	0x00410041
 80094e8:	0041      	.short	0x0041
 80094ea:	2b6e      	cmp	r3, #110	@ 0x6e
 80094ec:	d80a      	bhi.n	8009504 <_scanf_float+0xf8>
 80094ee:	2b60      	cmp	r3, #96	@ 0x60
 80094f0:	d8d2      	bhi.n	8009498 <_scanf_float+0x8c>
 80094f2:	2b54      	cmp	r3, #84	@ 0x54
 80094f4:	d100      	bne.n	80094f8 <_scanf_float+0xec>
 80094f6:	e081      	b.n	80095fc <_scanf_float+0x1f0>
 80094f8:	2b59      	cmp	r3, #89	@ 0x59
 80094fa:	d1b8      	bne.n	800946e <_scanf_float+0x62>
 80094fc:	2d07      	cmp	r5, #7
 80094fe:	d1b6      	bne.n	800946e <_scanf_float+0x62>
 8009500:	2508      	movs	r5, #8
 8009502:	e02f      	b.n	8009564 <_scanf_float+0x158>
 8009504:	2b74      	cmp	r3, #116	@ 0x74
 8009506:	d079      	beq.n	80095fc <_scanf_float+0x1f0>
 8009508:	2b79      	cmp	r3, #121	@ 0x79
 800950a:	d0f7      	beq.n	80094fc <_scanf_float+0xf0>
 800950c:	e7af      	b.n	800946e <_scanf_float+0x62>
 800950e:	6821      	ldr	r1, [r4, #0]
 8009510:	05c8      	lsls	r0, r1, #23
 8009512:	d51c      	bpl.n	800954e <_scanf_float+0x142>
 8009514:	2380      	movs	r3, #128	@ 0x80
 8009516:	4399      	bics	r1, r3
 8009518:	9b01      	ldr	r3, [sp, #4]
 800951a:	6021      	str	r1, [r4, #0]
 800951c:	3301      	adds	r3, #1
 800951e:	9301      	str	r3, [sp, #4]
 8009520:	9b06      	ldr	r3, [sp, #24]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d003      	beq.n	800952e <_scanf_float+0x122>
 8009526:	3b01      	subs	r3, #1
 8009528:	3201      	adds	r2, #1
 800952a:	9306      	str	r3, [sp, #24]
 800952c:	60a2      	str	r2, [r4, #8]
 800952e:	68a3      	ldr	r3, [r4, #8]
 8009530:	3b01      	subs	r3, #1
 8009532:	60a3      	str	r3, [r4, #8]
 8009534:	6923      	ldr	r3, [r4, #16]
 8009536:	3301      	adds	r3, #1
 8009538:	6123      	str	r3, [r4, #16]
 800953a:	6873      	ldr	r3, [r6, #4]
 800953c:	3b01      	subs	r3, #1
 800953e:	6073      	str	r3, [r6, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	dc00      	bgt.n	8009546 <_scanf_float+0x13a>
 8009544:	e08a      	b.n	800965c <_scanf_float+0x250>
 8009546:	6833      	ldr	r3, [r6, #0]
 8009548:	3301      	adds	r3, #1
 800954a:	6033      	str	r3, [r6, #0]
 800954c:	e781      	b.n	8009452 <_scanf_float+0x46>
 800954e:	9a02      	ldr	r2, [sp, #8]
 8009550:	1951      	adds	r1, r2, r5
 8009552:	2900      	cmp	r1, #0
 8009554:	d000      	beq.n	8009558 <_scanf_float+0x14c>
 8009556:	e78a      	b.n	800946e <_scanf_float+0x62>
 8009558:	000d      	movs	r5, r1
 800955a:	6822      	ldr	r2, [r4, #0]
 800955c:	486d      	ldr	r0, [pc, #436]	@ (8009714 <_scanf_float+0x308>)
 800955e:	9102      	str	r1, [sp, #8]
 8009560:	4002      	ands	r2, r0
 8009562:	6022      	str	r2, [r4, #0]
 8009564:	703b      	strb	r3, [r7, #0]
 8009566:	3701      	adds	r7, #1
 8009568:	e7e1      	b.n	800952e <_scanf_float+0x122>
 800956a:	2180      	movs	r1, #128	@ 0x80
 800956c:	6822      	ldr	r2, [r4, #0]
 800956e:	420a      	tst	r2, r1
 8009570:	d100      	bne.n	8009574 <_scanf_float+0x168>
 8009572:	e77c      	b.n	800946e <_scanf_float+0x62>
 8009574:	438a      	bics	r2, r1
 8009576:	6022      	str	r2, [r4, #0]
 8009578:	e7f4      	b.n	8009564 <_scanf_float+0x158>
 800957a:	9a02      	ldr	r2, [sp, #8]
 800957c:	2a00      	cmp	r2, #0
 800957e:	d10f      	bne.n	80095a0 <_scanf_float+0x194>
 8009580:	9a01      	ldr	r2, [sp, #4]
 8009582:	2a00      	cmp	r2, #0
 8009584:	d10f      	bne.n	80095a6 <_scanf_float+0x19a>
 8009586:	6822      	ldr	r2, [r4, #0]
 8009588:	21e0      	movs	r1, #224	@ 0xe0
 800958a:	0010      	movs	r0, r2
 800958c:	00c9      	lsls	r1, r1, #3
 800958e:	4008      	ands	r0, r1
 8009590:	4288      	cmp	r0, r1
 8009592:	d108      	bne.n	80095a6 <_scanf_float+0x19a>
 8009594:	4960      	ldr	r1, [pc, #384]	@ (8009718 <_scanf_float+0x30c>)
 8009596:	400a      	ands	r2, r1
 8009598:	6022      	str	r2, [r4, #0]
 800959a:	2201      	movs	r2, #1
 800959c:	9202      	str	r2, [sp, #8]
 800959e:	e7e1      	b.n	8009564 <_scanf_float+0x158>
 80095a0:	9a02      	ldr	r2, [sp, #8]
 80095a2:	2a02      	cmp	r2, #2
 80095a4:	d058      	beq.n	8009658 <_scanf_float+0x24c>
 80095a6:	2d01      	cmp	r5, #1
 80095a8:	d002      	beq.n	80095b0 <_scanf_float+0x1a4>
 80095aa:	2d04      	cmp	r5, #4
 80095ac:	d000      	beq.n	80095b0 <_scanf_float+0x1a4>
 80095ae:	e75e      	b.n	800946e <_scanf_float+0x62>
 80095b0:	3501      	adds	r5, #1
 80095b2:	b2ed      	uxtb	r5, r5
 80095b4:	e7d6      	b.n	8009564 <_scanf_float+0x158>
 80095b6:	9a02      	ldr	r2, [sp, #8]
 80095b8:	2a01      	cmp	r2, #1
 80095ba:	d000      	beq.n	80095be <_scanf_float+0x1b2>
 80095bc:	e757      	b.n	800946e <_scanf_float+0x62>
 80095be:	2202      	movs	r2, #2
 80095c0:	e7ec      	b.n	800959c <_scanf_float+0x190>
 80095c2:	2d00      	cmp	r5, #0
 80095c4:	d110      	bne.n	80095e8 <_scanf_float+0x1dc>
 80095c6:	9a01      	ldr	r2, [sp, #4]
 80095c8:	2a00      	cmp	r2, #0
 80095ca:	d000      	beq.n	80095ce <_scanf_float+0x1c2>
 80095cc:	e752      	b.n	8009474 <_scanf_float+0x68>
 80095ce:	6822      	ldr	r2, [r4, #0]
 80095d0:	21e0      	movs	r1, #224	@ 0xe0
 80095d2:	0010      	movs	r0, r2
 80095d4:	00c9      	lsls	r1, r1, #3
 80095d6:	4008      	ands	r0, r1
 80095d8:	4288      	cmp	r0, r1
 80095da:	d000      	beq.n	80095de <_scanf_float+0x1d2>
 80095dc:	e11b      	b.n	8009816 <_scanf_float+0x40a>
 80095de:	494e      	ldr	r1, [pc, #312]	@ (8009718 <_scanf_float+0x30c>)
 80095e0:	3501      	adds	r5, #1
 80095e2:	400a      	ands	r2, r1
 80095e4:	6022      	str	r2, [r4, #0]
 80095e6:	e7bd      	b.n	8009564 <_scanf_float+0x158>
 80095e8:	21fd      	movs	r1, #253	@ 0xfd
 80095ea:	1eea      	subs	r2, r5, #3
 80095ec:	420a      	tst	r2, r1
 80095ee:	d0df      	beq.n	80095b0 <_scanf_float+0x1a4>
 80095f0:	e73d      	b.n	800946e <_scanf_float+0x62>
 80095f2:	2d02      	cmp	r5, #2
 80095f4:	d000      	beq.n	80095f8 <_scanf_float+0x1ec>
 80095f6:	e73a      	b.n	800946e <_scanf_float+0x62>
 80095f8:	2503      	movs	r5, #3
 80095fa:	e7b3      	b.n	8009564 <_scanf_float+0x158>
 80095fc:	2d06      	cmp	r5, #6
 80095fe:	d000      	beq.n	8009602 <_scanf_float+0x1f6>
 8009600:	e735      	b.n	800946e <_scanf_float+0x62>
 8009602:	2507      	movs	r5, #7
 8009604:	e7ae      	b.n	8009564 <_scanf_float+0x158>
 8009606:	6822      	ldr	r2, [r4, #0]
 8009608:	0591      	lsls	r1, r2, #22
 800960a:	d400      	bmi.n	800960e <_scanf_float+0x202>
 800960c:	e72f      	b.n	800946e <_scanf_float+0x62>
 800960e:	4943      	ldr	r1, [pc, #268]	@ (800971c <_scanf_float+0x310>)
 8009610:	400a      	ands	r2, r1
 8009612:	6022      	str	r2, [r4, #0]
 8009614:	9a01      	ldr	r2, [sp, #4]
 8009616:	9205      	str	r2, [sp, #20]
 8009618:	e7a4      	b.n	8009564 <_scanf_float+0x158>
 800961a:	21a0      	movs	r1, #160	@ 0xa0
 800961c:	2080      	movs	r0, #128	@ 0x80
 800961e:	6822      	ldr	r2, [r4, #0]
 8009620:	00c9      	lsls	r1, r1, #3
 8009622:	4011      	ands	r1, r2
 8009624:	00c0      	lsls	r0, r0, #3
 8009626:	4281      	cmp	r1, r0
 8009628:	d006      	beq.n	8009638 <_scanf_float+0x22c>
 800962a:	4202      	tst	r2, r0
 800962c:	d100      	bne.n	8009630 <_scanf_float+0x224>
 800962e:	e71e      	b.n	800946e <_scanf_float+0x62>
 8009630:	9901      	ldr	r1, [sp, #4]
 8009632:	2900      	cmp	r1, #0
 8009634:	d100      	bne.n	8009638 <_scanf_float+0x22c>
 8009636:	e0ee      	b.n	8009816 <_scanf_float+0x40a>
 8009638:	0591      	lsls	r1, r2, #22
 800963a:	d404      	bmi.n	8009646 <_scanf_float+0x23a>
 800963c:	9901      	ldr	r1, [sp, #4]
 800963e:	9805      	ldr	r0, [sp, #20]
 8009640:	9709      	str	r7, [sp, #36]	@ 0x24
 8009642:	1a09      	subs	r1, r1, r0
 8009644:	9108      	str	r1, [sp, #32]
 8009646:	4934      	ldr	r1, [pc, #208]	@ (8009718 <_scanf_float+0x30c>)
 8009648:	400a      	ands	r2, r1
 800964a:	21c0      	movs	r1, #192	@ 0xc0
 800964c:	0049      	lsls	r1, r1, #1
 800964e:	430a      	orrs	r2, r1
 8009650:	6022      	str	r2, [r4, #0]
 8009652:	2200      	movs	r2, #0
 8009654:	9201      	str	r2, [sp, #4]
 8009656:	e785      	b.n	8009564 <_scanf_float+0x158>
 8009658:	2203      	movs	r2, #3
 800965a:	e79f      	b.n	800959c <_scanf_float+0x190>
 800965c:	23c0      	movs	r3, #192	@ 0xc0
 800965e:	005b      	lsls	r3, r3, #1
 8009660:	0031      	movs	r1, r6
 8009662:	58e3      	ldr	r3, [r4, r3]
 8009664:	9803      	ldr	r0, [sp, #12]
 8009666:	4798      	blx	r3
 8009668:	2800      	cmp	r0, #0
 800966a:	d100      	bne.n	800966e <_scanf_float+0x262>
 800966c:	e6f1      	b.n	8009452 <_scanf_float+0x46>
 800966e:	e6fe      	b.n	800946e <_scanf_float+0x62>
 8009670:	3f01      	subs	r7, #1
 8009672:	5963      	ldr	r3, [r4, r5]
 8009674:	0032      	movs	r2, r6
 8009676:	7839      	ldrb	r1, [r7, #0]
 8009678:	9803      	ldr	r0, [sp, #12]
 800967a:	4798      	blx	r3
 800967c:	6923      	ldr	r3, [r4, #16]
 800967e:	3b01      	subs	r3, #1
 8009680:	6123      	str	r3, [r4, #16]
 8009682:	e702      	b.n	800948a <_scanf_float+0x7e>
 8009684:	1e6b      	subs	r3, r5, #1
 8009686:	2b06      	cmp	r3, #6
 8009688:	d80e      	bhi.n	80096a8 <_scanf_float+0x29c>
 800968a:	9702      	str	r7, [sp, #8]
 800968c:	2d02      	cmp	r5, #2
 800968e:	d920      	bls.n	80096d2 <_scanf_float+0x2c6>
 8009690:	1beb      	subs	r3, r5, r7
 8009692:	b2db      	uxtb	r3, r3
 8009694:	9306      	str	r3, [sp, #24]
 8009696:	9b02      	ldr	r3, [sp, #8]
 8009698:	9a06      	ldr	r2, [sp, #24]
 800969a:	189b      	adds	r3, r3, r2
 800969c:	b2db      	uxtb	r3, r3
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d127      	bne.n	80096f2 <_scanf_float+0x2e6>
 80096a2:	3d03      	subs	r5, #3
 80096a4:	b2ed      	uxtb	r5, r5
 80096a6:	1b7f      	subs	r7, r7, r5
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	05da      	lsls	r2, r3, #23
 80096ac:	d553      	bpl.n	8009756 <_scanf_float+0x34a>
 80096ae:	055b      	lsls	r3, r3, #21
 80096b0:	d536      	bpl.n	8009720 <_scanf_float+0x314>
 80096b2:	25be      	movs	r5, #190	@ 0xbe
 80096b4:	006d      	lsls	r5, r5, #1
 80096b6:	9b04      	ldr	r3, [sp, #16]
 80096b8:	429f      	cmp	r7, r3
 80096ba:	d800      	bhi.n	80096be <_scanf_float+0x2b2>
 80096bc:	e6e9      	b.n	8009492 <_scanf_float+0x86>
 80096be:	3f01      	subs	r7, #1
 80096c0:	5963      	ldr	r3, [r4, r5]
 80096c2:	0032      	movs	r2, r6
 80096c4:	7839      	ldrb	r1, [r7, #0]
 80096c6:	9803      	ldr	r0, [sp, #12]
 80096c8:	4798      	blx	r3
 80096ca:	6923      	ldr	r3, [r4, #16]
 80096cc:	3b01      	subs	r3, #1
 80096ce:	6123      	str	r3, [r4, #16]
 80096d0:	e7f1      	b.n	80096b6 <_scanf_float+0x2aa>
 80096d2:	25be      	movs	r5, #190	@ 0xbe
 80096d4:	006d      	lsls	r5, r5, #1
 80096d6:	9b04      	ldr	r3, [sp, #16]
 80096d8:	429f      	cmp	r7, r3
 80096da:	d800      	bhi.n	80096de <_scanf_float+0x2d2>
 80096dc:	e6d9      	b.n	8009492 <_scanf_float+0x86>
 80096de:	3f01      	subs	r7, #1
 80096e0:	5963      	ldr	r3, [r4, r5]
 80096e2:	0032      	movs	r2, r6
 80096e4:	7839      	ldrb	r1, [r7, #0]
 80096e6:	9803      	ldr	r0, [sp, #12]
 80096e8:	4798      	blx	r3
 80096ea:	6923      	ldr	r3, [r4, #16]
 80096ec:	3b01      	subs	r3, #1
 80096ee:	6123      	str	r3, [r4, #16]
 80096f0:	e7f1      	b.n	80096d6 <_scanf_float+0x2ca>
 80096f2:	9b02      	ldr	r3, [sp, #8]
 80096f4:	0032      	movs	r2, r6
 80096f6:	3b01      	subs	r3, #1
 80096f8:	7819      	ldrb	r1, [r3, #0]
 80096fa:	9302      	str	r3, [sp, #8]
 80096fc:	23be      	movs	r3, #190	@ 0xbe
 80096fe:	005b      	lsls	r3, r3, #1
 8009700:	58e3      	ldr	r3, [r4, r3]
 8009702:	9803      	ldr	r0, [sp, #12]
 8009704:	4798      	blx	r3
 8009706:	6923      	ldr	r3, [r4, #16]
 8009708:	3b01      	subs	r3, #1
 800970a:	6123      	str	r3, [r4, #16]
 800970c:	e7c3      	b.n	8009696 <_scanf_float+0x28a>
 800970e:	46c0      	nop			@ (mov r8, r8)
 8009710:	fffffeff 	.word	0xfffffeff
 8009714:	fffffe7f 	.word	0xfffffe7f
 8009718:	fffff87f 	.word	0xfffff87f
 800971c:	fffffd7f 	.word	0xfffffd7f
 8009720:	6923      	ldr	r3, [r4, #16]
 8009722:	1e7d      	subs	r5, r7, #1
 8009724:	7829      	ldrb	r1, [r5, #0]
 8009726:	3b01      	subs	r3, #1
 8009728:	6123      	str	r3, [r4, #16]
 800972a:	2965      	cmp	r1, #101	@ 0x65
 800972c:	d00c      	beq.n	8009748 <_scanf_float+0x33c>
 800972e:	2945      	cmp	r1, #69	@ 0x45
 8009730:	d00a      	beq.n	8009748 <_scanf_float+0x33c>
 8009732:	23be      	movs	r3, #190	@ 0xbe
 8009734:	005b      	lsls	r3, r3, #1
 8009736:	58e3      	ldr	r3, [r4, r3]
 8009738:	0032      	movs	r2, r6
 800973a:	9803      	ldr	r0, [sp, #12]
 800973c:	4798      	blx	r3
 800973e:	6923      	ldr	r3, [r4, #16]
 8009740:	1ebd      	subs	r5, r7, #2
 8009742:	3b01      	subs	r3, #1
 8009744:	7829      	ldrb	r1, [r5, #0]
 8009746:	6123      	str	r3, [r4, #16]
 8009748:	23be      	movs	r3, #190	@ 0xbe
 800974a:	005b      	lsls	r3, r3, #1
 800974c:	0032      	movs	r2, r6
 800974e:	58e3      	ldr	r3, [r4, r3]
 8009750:	9803      	ldr	r0, [sp, #12]
 8009752:	4798      	blx	r3
 8009754:	002f      	movs	r7, r5
 8009756:	6821      	ldr	r1, [r4, #0]
 8009758:	2310      	movs	r3, #16
 800975a:	000a      	movs	r2, r1
 800975c:	401a      	ands	r2, r3
 800975e:	4219      	tst	r1, r3
 8009760:	d001      	beq.n	8009766 <_scanf_float+0x35a>
 8009762:	2000      	movs	r0, #0
 8009764:	e696      	b.n	8009494 <_scanf_float+0x88>
 8009766:	21c0      	movs	r1, #192	@ 0xc0
 8009768:	703a      	strb	r2, [r7, #0]
 800976a:	6823      	ldr	r3, [r4, #0]
 800976c:	00c9      	lsls	r1, r1, #3
 800976e:	400b      	ands	r3, r1
 8009770:	2180      	movs	r1, #128	@ 0x80
 8009772:	00c9      	lsls	r1, r1, #3
 8009774:	428b      	cmp	r3, r1
 8009776:	d126      	bne.n	80097c6 <_scanf_float+0x3ba>
 8009778:	9b05      	ldr	r3, [sp, #20]
 800977a:	9a01      	ldr	r2, [sp, #4]
 800977c:	4293      	cmp	r3, r2
 800977e:	d00c      	beq.n	800979a <_scanf_float+0x38e>
 8009780:	1a9a      	subs	r2, r3, r2
 8009782:	0023      	movs	r3, r4
 8009784:	3370      	adds	r3, #112	@ 0x70
 8009786:	33ff      	adds	r3, #255	@ 0xff
 8009788:	429f      	cmp	r7, r3
 800978a:	d302      	bcc.n	8009792 <_scanf_float+0x386>
 800978c:	0027      	movs	r7, r4
 800978e:	376f      	adds	r7, #111	@ 0x6f
 8009790:	37ff      	adds	r7, #255	@ 0xff
 8009792:	0038      	movs	r0, r7
 8009794:	4921      	ldr	r1, [pc, #132]	@ (800981c <_scanf_float+0x410>)
 8009796:	f000 f99b 	bl	8009ad0 <siprintf>
 800979a:	2200      	movs	r2, #0
 800979c:	9904      	ldr	r1, [sp, #16]
 800979e:	9803      	ldr	r0, [sp, #12]
 80097a0:	f002 fcf6 	bl	800c190 <_strtod_r>
 80097a4:	9b07      	ldr	r3, [sp, #28]
 80097a6:	6822      	ldr	r2, [r4, #0]
 80097a8:	0006      	movs	r6, r0
 80097aa:	000f      	movs	r7, r1
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	0791      	lsls	r1, r2, #30
 80097b0:	d516      	bpl.n	80097e0 <_scanf_float+0x3d4>
 80097b2:	9907      	ldr	r1, [sp, #28]
 80097b4:	1d1a      	adds	r2, r3, #4
 80097b6:	600a      	str	r2, [r1, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	601e      	str	r6, [r3, #0]
 80097bc:	605f      	str	r7, [r3, #4]
 80097be:	68e3      	ldr	r3, [r4, #12]
 80097c0:	3301      	adds	r3, #1
 80097c2:	60e3      	str	r3, [r4, #12]
 80097c4:	e7cd      	b.n	8009762 <_scanf_float+0x356>
 80097c6:	9b08      	ldr	r3, [sp, #32]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d0e6      	beq.n	800979a <_scanf_float+0x38e>
 80097cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ce:	9803      	ldr	r0, [sp, #12]
 80097d0:	1c59      	adds	r1, r3, #1
 80097d2:	230a      	movs	r3, #10
 80097d4:	f7ff f9aa 	bl	8008b2c <_strtol_r>
 80097d8:	9b08      	ldr	r3, [sp, #32]
 80097da:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80097dc:	1ac2      	subs	r2, r0, r3
 80097de:	e7d0      	b.n	8009782 <_scanf_float+0x376>
 80097e0:	1d19      	adds	r1, r3, #4
 80097e2:	0752      	lsls	r2, r2, #29
 80097e4:	d502      	bpl.n	80097ec <_scanf_float+0x3e0>
 80097e6:	9a07      	ldr	r2, [sp, #28]
 80097e8:	6011      	str	r1, [r2, #0]
 80097ea:	e7e5      	b.n	80097b8 <_scanf_float+0x3ac>
 80097ec:	9a07      	ldr	r2, [sp, #28]
 80097ee:	0030      	movs	r0, r6
 80097f0:	6011      	str	r1, [r2, #0]
 80097f2:	681d      	ldr	r5, [r3, #0]
 80097f4:	0032      	movs	r2, r6
 80097f6:	003b      	movs	r3, r7
 80097f8:	0039      	movs	r1, r7
 80097fa:	f7f9 f859 	bl	80028b0 <__aeabi_dcmpun>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d004      	beq.n	800980c <_scanf_float+0x400>
 8009802:	4807      	ldr	r0, [pc, #28]	@ (8009820 <_scanf_float+0x414>)
 8009804:	f000 fb20 	bl	8009e48 <nanf>
 8009808:	6028      	str	r0, [r5, #0]
 800980a:	e7d8      	b.n	80097be <_scanf_float+0x3b2>
 800980c:	0030      	movs	r0, r6
 800980e:	0039      	movs	r1, r7
 8009810:	f7f9 f946 	bl	8002aa0 <__aeabi_d2f>
 8009814:	e7f8      	b.n	8009808 <_scanf_float+0x3fc>
 8009816:	2300      	movs	r3, #0
 8009818:	9301      	str	r3, [sp, #4]
 800981a:	e62f      	b.n	800947c <_scanf_float+0x70>
 800981c:	0800d449 	.word	0x0800d449
 8009820:	0800d58a 	.word	0x0800d58a

08009824 <std>:
 8009824:	2300      	movs	r3, #0
 8009826:	b510      	push	{r4, lr}
 8009828:	0004      	movs	r4, r0
 800982a:	6003      	str	r3, [r0, #0]
 800982c:	6043      	str	r3, [r0, #4]
 800982e:	6083      	str	r3, [r0, #8]
 8009830:	8181      	strh	r1, [r0, #12]
 8009832:	6643      	str	r3, [r0, #100]	@ 0x64
 8009834:	81c2      	strh	r2, [r0, #14]
 8009836:	6103      	str	r3, [r0, #16]
 8009838:	6143      	str	r3, [r0, #20]
 800983a:	6183      	str	r3, [r0, #24]
 800983c:	0019      	movs	r1, r3
 800983e:	2208      	movs	r2, #8
 8009840:	305c      	adds	r0, #92	@ 0x5c
 8009842:	f000 fa53 	bl	8009cec <memset>
 8009846:	4b0b      	ldr	r3, [pc, #44]	@ (8009874 <std+0x50>)
 8009848:	6224      	str	r4, [r4, #32]
 800984a:	6263      	str	r3, [r4, #36]	@ 0x24
 800984c:	4b0a      	ldr	r3, [pc, #40]	@ (8009878 <std+0x54>)
 800984e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009850:	4b0a      	ldr	r3, [pc, #40]	@ (800987c <std+0x58>)
 8009852:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009854:	4b0a      	ldr	r3, [pc, #40]	@ (8009880 <std+0x5c>)
 8009856:	6323      	str	r3, [r4, #48]	@ 0x30
 8009858:	4b0a      	ldr	r3, [pc, #40]	@ (8009884 <std+0x60>)
 800985a:	429c      	cmp	r4, r3
 800985c:	d005      	beq.n	800986a <std+0x46>
 800985e:	4b0a      	ldr	r3, [pc, #40]	@ (8009888 <std+0x64>)
 8009860:	429c      	cmp	r4, r3
 8009862:	d002      	beq.n	800986a <std+0x46>
 8009864:	4b09      	ldr	r3, [pc, #36]	@ (800988c <std+0x68>)
 8009866:	429c      	cmp	r4, r3
 8009868:	d103      	bne.n	8009872 <std+0x4e>
 800986a:	0020      	movs	r0, r4
 800986c:	3058      	adds	r0, #88	@ 0x58
 800986e:	f000 fad3 	bl	8009e18 <__retarget_lock_init_recursive>
 8009872:	bd10      	pop	{r4, pc}
 8009874:	08009b15 	.word	0x08009b15
 8009878:	08009b3d 	.word	0x08009b3d
 800987c:	08009b75 	.word	0x08009b75
 8009880:	08009ba1 	.word	0x08009ba1
 8009884:	20001304 	.word	0x20001304
 8009888:	2000136c 	.word	0x2000136c
 800988c:	200013d4 	.word	0x200013d4

08009890 <stdio_exit_handler>:
 8009890:	b510      	push	{r4, lr}
 8009892:	4a03      	ldr	r2, [pc, #12]	@ (80098a0 <stdio_exit_handler+0x10>)
 8009894:	4903      	ldr	r1, [pc, #12]	@ (80098a4 <stdio_exit_handler+0x14>)
 8009896:	4804      	ldr	r0, [pc, #16]	@ (80098a8 <stdio_exit_handler+0x18>)
 8009898:	f000 f86c 	bl	8009974 <_fwalk_sglue>
 800989c:	bd10      	pop	{r4, pc}
 800989e:	46c0      	nop			@ (mov r8, r8)
 80098a0:	20000024 	.word	0x20000024
 80098a4:	0800c569 	.word	0x0800c569
 80098a8:	20000034 	.word	0x20000034

080098ac <cleanup_stdio>:
 80098ac:	6841      	ldr	r1, [r0, #4]
 80098ae:	4b0b      	ldr	r3, [pc, #44]	@ (80098dc <cleanup_stdio+0x30>)
 80098b0:	b510      	push	{r4, lr}
 80098b2:	0004      	movs	r4, r0
 80098b4:	4299      	cmp	r1, r3
 80098b6:	d001      	beq.n	80098bc <cleanup_stdio+0x10>
 80098b8:	f002 fe56 	bl	800c568 <_fflush_r>
 80098bc:	68a1      	ldr	r1, [r4, #8]
 80098be:	4b08      	ldr	r3, [pc, #32]	@ (80098e0 <cleanup_stdio+0x34>)
 80098c0:	4299      	cmp	r1, r3
 80098c2:	d002      	beq.n	80098ca <cleanup_stdio+0x1e>
 80098c4:	0020      	movs	r0, r4
 80098c6:	f002 fe4f 	bl	800c568 <_fflush_r>
 80098ca:	68e1      	ldr	r1, [r4, #12]
 80098cc:	4b05      	ldr	r3, [pc, #20]	@ (80098e4 <cleanup_stdio+0x38>)
 80098ce:	4299      	cmp	r1, r3
 80098d0:	d002      	beq.n	80098d8 <cleanup_stdio+0x2c>
 80098d2:	0020      	movs	r0, r4
 80098d4:	f002 fe48 	bl	800c568 <_fflush_r>
 80098d8:	bd10      	pop	{r4, pc}
 80098da:	46c0      	nop			@ (mov r8, r8)
 80098dc:	20001304 	.word	0x20001304
 80098e0:	2000136c 	.word	0x2000136c
 80098e4:	200013d4 	.word	0x200013d4

080098e8 <global_stdio_init.part.0>:
 80098e8:	b510      	push	{r4, lr}
 80098ea:	4b09      	ldr	r3, [pc, #36]	@ (8009910 <global_stdio_init.part.0+0x28>)
 80098ec:	4a09      	ldr	r2, [pc, #36]	@ (8009914 <global_stdio_init.part.0+0x2c>)
 80098ee:	2104      	movs	r1, #4
 80098f0:	601a      	str	r2, [r3, #0]
 80098f2:	4809      	ldr	r0, [pc, #36]	@ (8009918 <global_stdio_init.part.0+0x30>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	f7ff ff95 	bl	8009824 <std>
 80098fa:	2201      	movs	r2, #1
 80098fc:	2109      	movs	r1, #9
 80098fe:	4807      	ldr	r0, [pc, #28]	@ (800991c <global_stdio_init.part.0+0x34>)
 8009900:	f7ff ff90 	bl	8009824 <std>
 8009904:	2202      	movs	r2, #2
 8009906:	2112      	movs	r1, #18
 8009908:	4805      	ldr	r0, [pc, #20]	@ (8009920 <global_stdio_init.part.0+0x38>)
 800990a:	f7ff ff8b 	bl	8009824 <std>
 800990e:	bd10      	pop	{r4, pc}
 8009910:	2000143c 	.word	0x2000143c
 8009914:	08009891 	.word	0x08009891
 8009918:	20001304 	.word	0x20001304
 800991c:	2000136c 	.word	0x2000136c
 8009920:	200013d4 	.word	0x200013d4

08009924 <__sfp_lock_acquire>:
 8009924:	b510      	push	{r4, lr}
 8009926:	4802      	ldr	r0, [pc, #8]	@ (8009930 <__sfp_lock_acquire+0xc>)
 8009928:	f000 fa77 	bl	8009e1a <__retarget_lock_acquire_recursive>
 800992c:	bd10      	pop	{r4, pc}
 800992e:	46c0      	nop			@ (mov r8, r8)
 8009930:	20001445 	.word	0x20001445

08009934 <__sfp_lock_release>:
 8009934:	b510      	push	{r4, lr}
 8009936:	4802      	ldr	r0, [pc, #8]	@ (8009940 <__sfp_lock_release+0xc>)
 8009938:	f000 fa70 	bl	8009e1c <__retarget_lock_release_recursive>
 800993c:	bd10      	pop	{r4, pc}
 800993e:	46c0      	nop			@ (mov r8, r8)
 8009940:	20001445 	.word	0x20001445

08009944 <__sinit>:
 8009944:	b510      	push	{r4, lr}
 8009946:	0004      	movs	r4, r0
 8009948:	f7ff ffec 	bl	8009924 <__sfp_lock_acquire>
 800994c:	6a23      	ldr	r3, [r4, #32]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <__sinit+0x14>
 8009952:	f7ff ffef 	bl	8009934 <__sfp_lock_release>
 8009956:	bd10      	pop	{r4, pc}
 8009958:	4b04      	ldr	r3, [pc, #16]	@ (800996c <__sinit+0x28>)
 800995a:	6223      	str	r3, [r4, #32]
 800995c:	4b04      	ldr	r3, [pc, #16]	@ (8009970 <__sinit+0x2c>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d1f6      	bne.n	8009952 <__sinit+0xe>
 8009964:	f7ff ffc0 	bl	80098e8 <global_stdio_init.part.0>
 8009968:	e7f3      	b.n	8009952 <__sinit+0xe>
 800996a:	46c0      	nop			@ (mov r8, r8)
 800996c:	080098ad 	.word	0x080098ad
 8009970:	2000143c 	.word	0x2000143c

08009974 <_fwalk_sglue>:
 8009974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009976:	0014      	movs	r4, r2
 8009978:	2600      	movs	r6, #0
 800997a:	9000      	str	r0, [sp, #0]
 800997c:	9101      	str	r1, [sp, #4]
 800997e:	68a5      	ldr	r5, [r4, #8]
 8009980:	6867      	ldr	r7, [r4, #4]
 8009982:	3f01      	subs	r7, #1
 8009984:	d504      	bpl.n	8009990 <_fwalk_sglue+0x1c>
 8009986:	6824      	ldr	r4, [r4, #0]
 8009988:	2c00      	cmp	r4, #0
 800998a:	d1f8      	bne.n	800997e <_fwalk_sglue+0xa>
 800998c:	0030      	movs	r0, r6
 800998e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009990:	89ab      	ldrh	r3, [r5, #12]
 8009992:	2b01      	cmp	r3, #1
 8009994:	d908      	bls.n	80099a8 <_fwalk_sglue+0x34>
 8009996:	220e      	movs	r2, #14
 8009998:	5eab      	ldrsh	r3, [r5, r2]
 800999a:	3301      	adds	r3, #1
 800999c:	d004      	beq.n	80099a8 <_fwalk_sglue+0x34>
 800999e:	0029      	movs	r1, r5
 80099a0:	9800      	ldr	r0, [sp, #0]
 80099a2:	9b01      	ldr	r3, [sp, #4]
 80099a4:	4798      	blx	r3
 80099a6:	4306      	orrs	r6, r0
 80099a8:	3568      	adds	r5, #104	@ 0x68
 80099aa:	e7ea      	b.n	8009982 <_fwalk_sglue+0xe>

080099ac <_fwrite_r>:
 80099ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099ae:	4353      	muls	r3, r2
 80099b0:	0005      	movs	r5, r0
 80099b2:	0017      	movs	r7, r2
 80099b4:	9c08      	ldr	r4, [sp, #32]
 80099b6:	9101      	str	r1, [sp, #4]
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	2800      	cmp	r0, #0
 80099bc:	d004      	beq.n	80099c8 <_fwrite_r+0x1c>
 80099be:	6a03      	ldr	r3, [r0, #32]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <_fwrite_r+0x1c>
 80099c4:	f7ff ffbe 	bl	8009944 <__sinit>
 80099c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099ca:	07db      	lsls	r3, r3, #31
 80099cc:	d405      	bmi.n	80099da <_fwrite_r+0x2e>
 80099ce:	89a3      	ldrh	r3, [r4, #12]
 80099d0:	059b      	lsls	r3, r3, #22
 80099d2:	d402      	bmi.n	80099da <_fwrite_r+0x2e>
 80099d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099d6:	f000 fa20 	bl	8009e1a <__retarget_lock_acquire_recursive>
 80099da:	89a3      	ldrh	r3, [r4, #12]
 80099dc:	071b      	lsls	r3, r3, #28
 80099de:	d518      	bpl.n	8009a12 <_fwrite_r+0x66>
 80099e0:	6923      	ldr	r3, [r4, #16]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d015      	beq.n	8009a12 <_fwrite_r+0x66>
 80099e6:	2600      	movs	r6, #0
 80099e8:	9b00      	ldr	r3, [sp, #0]
 80099ea:	429e      	cmp	r6, r3
 80099ec:	d018      	beq.n	8009a20 <_fwrite_r+0x74>
 80099ee:	9b01      	ldr	r3, [sp, #4]
 80099f0:	5d99      	ldrb	r1, [r3, r6]
 80099f2:	68a3      	ldr	r3, [r4, #8]
 80099f4:	3b01      	subs	r3, #1
 80099f6:	60a3      	str	r3, [r4, #8]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	da04      	bge.n	8009a06 <_fwrite_r+0x5a>
 80099fc:	69a2      	ldr	r2, [r4, #24]
 80099fe:	4293      	cmp	r3, r2
 8009a00:	db1c      	blt.n	8009a3c <_fwrite_r+0x90>
 8009a02:	290a      	cmp	r1, #10
 8009a04:	d01a      	beq.n	8009a3c <_fwrite_r+0x90>
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	1c5a      	adds	r2, r3, #1
 8009a0a:	6022      	str	r2, [r4, #0]
 8009a0c:	7019      	strb	r1, [r3, #0]
 8009a0e:	3601      	adds	r6, #1
 8009a10:	e7ea      	b.n	80099e8 <_fwrite_r+0x3c>
 8009a12:	0021      	movs	r1, r4
 8009a14:	0028      	movs	r0, r5
 8009a16:	f000 f90b 	bl	8009c30 <__swsetup_r>
 8009a1a:	2600      	movs	r6, #0
 8009a1c:	42b0      	cmp	r0, r6
 8009a1e:	d0e2      	beq.n	80099e6 <_fwrite_r+0x3a>
 8009a20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a22:	07db      	lsls	r3, r3, #31
 8009a24:	d405      	bmi.n	8009a32 <_fwrite_r+0x86>
 8009a26:	89a3      	ldrh	r3, [r4, #12]
 8009a28:	059b      	lsls	r3, r3, #22
 8009a2a:	d402      	bmi.n	8009a32 <_fwrite_r+0x86>
 8009a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a2e:	f000 f9f5 	bl	8009e1c <__retarget_lock_release_recursive>
 8009a32:	0039      	movs	r1, r7
 8009a34:	0030      	movs	r0, r6
 8009a36:	f7f6 fb8d 	bl	8000154 <__udivsi3>
 8009a3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009a3c:	0022      	movs	r2, r4
 8009a3e:	0028      	movs	r0, r5
 8009a40:	f000 f8b4 	bl	8009bac <__swbuf_r>
 8009a44:	3001      	adds	r0, #1
 8009a46:	d1e2      	bne.n	8009a0e <_fwrite_r+0x62>
 8009a48:	e7ea      	b.n	8009a20 <_fwrite_r+0x74>
	...

08009a4c <fwrite>:
 8009a4c:	b513      	push	{r0, r1, r4, lr}
 8009a4e:	4c04      	ldr	r4, [pc, #16]	@ (8009a60 <fwrite+0x14>)
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	0013      	movs	r3, r2
 8009a54:	000a      	movs	r2, r1
 8009a56:	0001      	movs	r1, r0
 8009a58:	6820      	ldr	r0, [r4, #0]
 8009a5a:	f7ff ffa7 	bl	80099ac <_fwrite_r>
 8009a5e:	bd16      	pop	{r1, r2, r4, pc}
 8009a60:	20000030 	.word	0x20000030

08009a64 <sniprintf>:
 8009a64:	b40c      	push	{r2, r3}
 8009a66:	b530      	push	{r4, r5, lr}
 8009a68:	4b18      	ldr	r3, [pc, #96]	@ (8009acc <sniprintf+0x68>)
 8009a6a:	000c      	movs	r4, r1
 8009a6c:	681d      	ldr	r5, [r3, #0]
 8009a6e:	b09d      	sub	sp, #116	@ 0x74
 8009a70:	2900      	cmp	r1, #0
 8009a72:	da08      	bge.n	8009a86 <sniprintf+0x22>
 8009a74:	238b      	movs	r3, #139	@ 0x8b
 8009a76:	2001      	movs	r0, #1
 8009a78:	602b      	str	r3, [r5, #0]
 8009a7a:	4240      	negs	r0, r0
 8009a7c:	b01d      	add	sp, #116	@ 0x74
 8009a7e:	bc30      	pop	{r4, r5}
 8009a80:	bc08      	pop	{r3}
 8009a82:	b002      	add	sp, #8
 8009a84:	4718      	bx	r3
 8009a86:	2382      	movs	r3, #130	@ 0x82
 8009a88:	466a      	mov	r2, sp
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	8293      	strh	r3, [r2, #20]
 8009a8e:	2300      	movs	r3, #0
 8009a90:	9002      	str	r0, [sp, #8]
 8009a92:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009a94:	9006      	str	r0, [sp, #24]
 8009a96:	4299      	cmp	r1, r3
 8009a98:	d000      	beq.n	8009a9c <sniprintf+0x38>
 8009a9a:	1e4b      	subs	r3, r1, #1
 8009a9c:	9304      	str	r3, [sp, #16]
 8009a9e:	9307      	str	r3, [sp, #28]
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	466a      	mov	r2, sp
 8009aa4:	425b      	negs	r3, r3
 8009aa6:	82d3      	strh	r3, [r2, #22]
 8009aa8:	0028      	movs	r0, r5
 8009aaa:	ab21      	add	r3, sp, #132	@ 0x84
 8009aac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009aae:	a902      	add	r1, sp, #8
 8009ab0:	9301      	str	r3, [sp, #4]
 8009ab2:	f002 fbd5 	bl	800c260 <_svfiprintf_r>
 8009ab6:	1c43      	adds	r3, r0, #1
 8009ab8:	da01      	bge.n	8009abe <sniprintf+0x5a>
 8009aba:	238b      	movs	r3, #139	@ 0x8b
 8009abc:	602b      	str	r3, [r5, #0]
 8009abe:	2c00      	cmp	r4, #0
 8009ac0:	d0dc      	beq.n	8009a7c <sniprintf+0x18>
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	9b02      	ldr	r3, [sp, #8]
 8009ac6:	701a      	strb	r2, [r3, #0]
 8009ac8:	e7d8      	b.n	8009a7c <sniprintf+0x18>
 8009aca:	46c0      	nop			@ (mov r8, r8)
 8009acc:	20000030 	.word	0x20000030

08009ad0 <siprintf>:
 8009ad0:	b40e      	push	{r1, r2, r3}
 8009ad2:	b510      	push	{r4, lr}
 8009ad4:	2400      	movs	r4, #0
 8009ad6:	490c      	ldr	r1, [pc, #48]	@ (8009b08 <siprintf+0x38>)
 8009ad8:	b09d      	sub	sp, #116	@ 0x74
 8009ada:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009adc:	9002      	str	r0, [sp, #8]
 8009ade:	9006      	str	r0, [sp, #24]
 8009ae0:	9107      	str	r1, [sp, #28]
 8009ae2:	9104      	str	r1, [sp, #16]
 8009ae4:	4809      	ldr	r0, [pc, #36]	@ (8009b0c <siprintf+0x3c>)
 8009ae6:	490a      	ldr	r1, [pc, #40]	@ (8009b10 <siprintf+0x40>)
 8009ae8:	cb04      	ldmia	r3!, {r2}
 8009aea:	9105      	str	r1, [sp, #20]
 8009aec:	6800      	ldr	r0, [r0, #0]
 8009aee:	a902      	add	r1, sp, #8
 8009af0:	9301      	str	r3, [sp, #4]
 8009af2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009af4:	f002 fbb4 	bl	800c260 <_svfiprintf_r>
 8009af8:	9b02      	ldr	r3, [sp, #8]
 8009afa:	701c      	strb	r4, [r3, #0]
 8009afc:	b01d      	add	sp, #116	@ 0x74
 8009afe:	bc10      	pop	{r4}
 8009b00:	bc08      	pop	{r3}
 8009b02:	b003      	add	sp, #12
 8009b04:	4718      	bx	r3
 8009b06:	46c0      	nop			@ (mov r8, r8)
 8009b08:	7fffffff 	.word	0x7fffffff
 8009b0c:	20000030 	.word	0x20000030
 8009b10:	ffff0208 	.word	0xffff0208

08009b14 <__sread>:
 8009b14:	b570      	push	{r4, r5, r6, lr}
 8009b16:	000c      	movs	r4, r1
 8009b18:	250e      	movs	r5, #14
 8009b1a:	5f49      	ldrsh	r1, [r1, r5]
 8009b1c:	f000 f918 	bl	8009d50 <_read_r>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	db03      	blt.n	8009b2c <__sread+0x18>
 8009b24:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009b26:	181b      	adds	r3, r3, r0
 8009b28:	6563      	str	r3, [r4, #84]	@ 0x54
 8009b2a:	bd70      	pop	{r4, r5, r6, pc}
 8009b2c:	89a3      	ldrh	r3, [r4, #12]
 8009b2e:	4a02      	ldr	r2, [pc, #8]	@ (8009b38 <__sread+0x24>)
 8009b30:	4013      	ands	r3, r2
 8009b32:	81a3      	strh	r3, [r4, #12]
 8009b34:	e7f9      	b.n	8009b2a <__sread+0x16>
 8009b36:	46c0      	nop			@ (mov r8, r8)
 8009b38:	ffffefff 	.word	0xffffefff

08009b3c <__swrite>:
 8009b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b3e:	001f      	movs	r7, r3
 8009b40:	898b      	ldrh	r3, [r1, #12]
 8009b42:	0005      	movs	r5, r0
 8009b44:	000c      	movs	r4, r1
 8009b46:	0016      	movs	r6, r2
 8009b48:	05db      	lsls	r3, r3, #23
 8009b4a:	d505      	bpl.n	8009b58 <__swrite+0x1c>
 8009b4c:	230e      	movs	r3, #14
 8009b4e:	5ec9      	ldrsh	r1, [r1, r3]
 8009b50:	2200      	movs	r2, #0
 8009b52:	2302      	movs	r3, #2
 8009b54:	f000 f8e8 	bl	8009d28 <_lseek_r>
 8009b58:	89a3      	ldrh	r3, [r4, #12]
 8009b5a:	4a05      	ldr	r2, [pc, #20]	@ (8009b70 <__swrite+0x34>)
 8009b5c:	0028      	movs	r0, r5
 8009b5e:	4013      	ands	r3, r2
 8009b60:	81a3      	strh	r3, [r4, #12]
 8009b62:	0032      	movs	r2, r6
 8009b64:	230e      	movs	r3, #14
 8009b66:	5ee1      	ldrsh	r1, [r4, r3]
 8009b68:	003b      	movs	r3, r7
 8009b6a:	f000 f917 	bl	8009d9c <_write_r>
 8009b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b70:	ffffefff 	.word	0xffffefff

08009b74 <__sseek>:
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	000c      	movs	r4, r1
 8009b78:	250e      	movs	r5, #14
 8009b7a:	5f49      	ldrsh	r1, [r1, r5]
 8009b7c:	f000 f8d4 	bl	8009d28 <_lseek_r>
 8009b80:	89a3      	ldrh	r3, [r4, #12]
 8009b82:	1c42      	adds	r2, r0, #1
 8009b84:	d103      	bne.n	8009b8e <__sseek+0x1a>
 8009b86:	4a05      	ldr	r2, [pc, #20]	@ (8009b9c <__sseek+0x28>)
 8009b88:	4013      	ands	r3, r2
 8009b8a:	81a3      	strh	r3, [r4, #12]
 8009b8c:	bd70      	pop	{r4, r5, r6, pc}
 8009b8e:	2280      	movs	r2, #128	@ 0x80
 8009b90:	0152      	lsls	r2, r2, #5
 8009b92:	4313      	orrs	r3, r2
 8009b94:	81a3      	strh	r3, [r4, #12]
 8009b96:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b98:	e7f8      	b.n	8009b8c <__sseek+0x18>
 8009b9a:	46c0      	nop			@ (mov r8, r8)
 8009b9c:	ffffefff 	.word	0xffffefff

08009ba0 <__sclose>:
 8009ba0:	b510      	push	{r4, lr}
 8009ba2:	230e      	movs	r3, #14
 8009ba4:	5ec9      	ldrsh	r1, [r1, r3]
 8009ba6:	f000 f8ad 	bl	8009d04 <_close_r>
 8009baa:	bd10      	pop	{r4, pc}

08009bac <__swbuf_r>:
 8009bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bae:	0006      	movs	r6, r0
 8009bb0:	000d      	movs	r5, r1
 8009bb2:	0014      	movs	r4, r2
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d004      	beq.n	8009bc2 <__swbuf_r+0x16>
 8009bb8:	6a03      	ldr	r3, [r0, #32]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d101      	bne.n	8009bc2 <__swbuf_r+0x16>
 8009bbe:	f7ff fec1 	bl	8009944 <__sinit>
 8009bc2:	69a3      	ldr	r3, [r4, #24]
 8009bc4:	60a3      	str	r3, [r4, #8]
 8009bc6:	89a3      	ldrh	r3, [r4, #12]
 8009bc8:	071b      	lsls	r3, r3, #28
 8009bca:	d502      	bpl.n	8009bd2 <__swbuf_r+0x26>
 8009bcc:	6923      	ldr	r3, [r4, #16]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d109      	bne.n	8009be6 <__swbuf_r+0x3a>
 8009bd2:	0021      	movs	r1, r4
 8009bd4:	0030      	movs	r0, r6
 8009bd6:	f000 f82b 	bl	8009c30 <__swsetup_r>
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	d003      	beq.n	8009be6 <__swbuf_r+0x3a>
 8009bde:	2501      	movs	r5, #1
 8009be0:	426d      	negs	r5, r5
 8009be2:	0028      	movs	r0, r5
 8009be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be6:	6923      	ldr	r3, [r4, #16]
 8009be8:	6820      	ldr	r0, [r4, #0]
 8009bea:	b2ef      	uxtb	r7, r5
 8009bec:	1ac0      	subs	r0, r0, r3
 8009bee:	6963      	ldr	r3, [r4, #20]
 8009bf0:	b2ed      	uxtb	r5, r5
 8009bf2:	4283      	cmp	r3, r0
 8009bf4:	dc05      	bgt.n	8009c02 <__swbuf_r+0x56>
 8009bf6:	0021      	movs	r1, r4
 8009bf8:	0030      	movs	r0, r6
 8009bfa:	f002 fcb5 	bl	800c568 <_fflush_r>
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d1ed      	bne.n	8009bde <__swbuf_r+0x32>
 8009c02:	68a3      	ldr	r3, [r4, #8]
 8009c04:	3001      	adds	r0, #1
 8009c06:	3b01      	subs	r3, #1
 8009c08:	60a3      	str	r3, [r4, #8]
 8009c0a:	6823      	ldr	r3, [r4, #0]
 8009c0c:	1c5a      	adds	r2, r3, #1
 8009c0e:	6022      	str	r2, [r4, #0]
 8009c10:	701f      	strb	r7, [r3, #0]
 8009c12:	6963      	ldr	r3, [r4, #20]
 8009c14:	4283      	cmp	r3, r0
 8009c16:	d004      	beq.n	8009c22 <__swbuf_r+0x76>
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	07db      	lsls	r3, r3, #31
 8009c1c:	d5e1      	bpl.n	8009be2 <__swbuf_r+0x36>
 8009c1e:	2d0a      	cmp	r5, #10
 8009c20:	d1df      	bne.n	8009be2 <__swbuf_r+0x36>
 8009c22:	0021      	movs	r1, r4
 8009c24:	0030      	movs	r0, r6
 8009c26:	f002 fc9f 	bl	800c568 <_fflush_r>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	d0d9      	beq.n	8009be2 <__swbuf_r+0x36>
 8009c2e:	e7d6      	b.n	8009bde <__swbuf_r+0x32>

08009c30 <__swsetup_r>:
 8009c30:	4b2d      	ldr	r3, [pc, #180]	@ (8009ce8 <__swsetup_r+0xb8>)
 8009c32:	b570      	push	{r4, r5, r6, lr}
 8009c34:	0005      	movs	r5, r0
 8009c36:	6818      	ldr	r0, [r3, #0]
 8009c38:	000c      	movs	r4, r1
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d004      	beq.n	8009c48 <__swsetup_r+0x18>
 8009c3e:	6a03      	ldr	r3, [r0, #32]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d101      	bne.n	8009c48 <__swsetup_r+0x18>
 8009c44:	f7ff fe7e 	bl	8009944 <__sinit>
 8009c48:	220c      	movs	r2, #12
 8009c4a:	5ea3      	ldrsh	r3, [r4, r2]
 8009c4c:	071a      	lsls	r2, r3, #28
 8009c4e:	d423      	bmi.n	8009c98 <__swsetup_r+0x68>
 8009c50:	06da      	lsls	r2, r3, #27
 8009c52:	d407      	bmi.n	8009c64 <__swsetup_r+0x34>
 8009c54:	2209      	movs	r2, #9
 8009c56:	602a      	str	r2, [r5, #0]
 8009c58:	2240      	movs	r2, #64	@ 0x40
 8009c5a:	2001      	movs	r0, #1
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	81a3      	strh	r3, [r4, #12]
 8009c60:	4240      	negs	r0, r0
 8009c62:	e03a      	b.n	8009cda <__swsetup_r+0xaa>
 8009c64:	075b      	lsls	r3, r3, #29
 8009c66:	d513      	bpl.n	8009c90 <__swsetup_r+0x60>
 8009c68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c6a:	2900      	cmp	r1, #0
 8009c6c:	d008      	beq.n	8009c80 <__swsetup_r+0x50>
 8009c6e:	0023      	movs	r3, r4
 8009c70:	3344      	adds	r3, #68	@ 0x44
 8009c72:	4299      	cmp	r1, r3
 8009c74:	d002      	beq.n	8009c7c <__swsetup_r+0x4c>
 8009c76:	0028      	movs	r0, r5
 8009c78:	f000 ff60 	bl	800ab3c <_free_r>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c80:	2224      	movs	r2, #36	@ 0x24
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	4393      	bics	r3, r2
 8009c86:	81a3      	strh	r3, [r4, #12]
 8009c88:	2300      	movs	r3, #0
 8009c8a:	6063      	str	r3, [r4, #4]
 8009c8c:	6923      	ldr	r3, [r4, #16]
 8009c8e:	6023      	str	r3, [r4, #0]
 8009c90:	2308      	movs	r3, #8
 8009c92:	89a2      	ldrh	r2, [r4, #12]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	81a3      	strh	r3, [r4, #12]
 8009c98:	6923      	ldr	r3, [r4, #16]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10b      	bne.n	8009cb6 <__swsetup_r+0x86>
 8009c9e:	21a0      	movs	r1, #160	@ 0xa0
 8009ca0:	2280      	movs	r2, #128	@ 0x80
 8009ca2:	89a3      	ldrh	r3, [r4, #12]
 8009ca4:	0089      	lsls	r1, r1, #2
 8009ca6:	0092      	lsls	r2, r2, #2
 8009ca8:	400b      	ands	r3, r1
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d003      	beq.n	8009cb6 <__swsetup_r+0x86>
 8009cae:	0021      	movs	r1, r4
 8009cb0:	0028      	movs	r0, r5
 8009cb2:	f002 fcaf 	bl	800c614 <__smakebuf_r>
 8009cb6:	220c      	movs	r2, #12
 8009cb8:	5ea3      	ldrsh	r3, [r4, r2]
 8009cba:	2101      	movs	r1, #1
 8009cbc:	001a      	movs	r2, r3
 8009cbe:	400a      	ands	r2, r1
 8009cc0:	420b      	tst	r3, r1
 8009cc2:	d00b      	beq.n	8009cdc <__swsetup_r+0xac>
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	60a2      	str	r2, [r4, #8]
 8009cc8:	6962      	ldr	r2, [r4, #20]
 8009cca:	4252      	negs	r2, r2
 8009ccc:	61a2      	str	r2, [r4, #24]
 8009cce:	2000      	movs	r0, #0
 8009cd0:	6922      	ldr	r2, [r4, #16]
 8009cd2:	4282      	cmp	r2, r0
 8009cd4:	d101      	bne.n	8009cda <__swsetup_r+0xaa>
 8009cd6:	061a      	lsls	r2, r3, #24
 8009cd8:	d4be      	bmi.n	8009c58 <__swsetup_r+0x28>
 8009cda:	bd70      	pop	{r4, r5, r6, pc}
 8009cdc:	0799      	lsls	r1, r3, #30
 8009cde:	d400      	bmi.n	8009ce2 <__swsetup_r+0xb2>
 8009ce0:	6962      	ldr	r2, [r4, #20]
 8009ce2:	60a2      	str	r2, [r4, #8]
 8009ce4:	e7f3      	b.n	8009cce <__swsetup_r+0x9e>
 8009ce6:	46c0      	nop			@ (mov r8, r8)
 8009ce8:	20000030 	.word	0x20000030

08009cec <memset>:
 8009cec:	0003      	movs	r3, r0
 8009cee:	1882      	adds	r2, r0, r2
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d100      	bne.n	8009cf6 <memset+0xa>
 8009cf4:	4770      	bx	lr
 8009cf6:	7019      	strb	r1, [r3, #0]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	e7f9      	b.n	8009cf0 <memset+0x4>

08009cfc <_localeconv_r>:
 8009cfc:	4800      	ldr	r0, [pc, #0]	@ (8009d00 <_localeconv_r+0x4>)
 8009cfe:	4770      	bx	lr
 8009d00:	20000170 	.word	0x20000170

08009d04 <_close_r>:
 8009d04:	2300      	movs	r3, #0
 8009d06:	b570      	push	{r4, r5, r6, lr}
 8009d08:	4d06      	ldr	r5, [pc, #24]	@ (8009d24 <_close_r+0x20>)
 8009d0a:	0004      	movs	r4, r0
 8009d0c:	0008      	movs	r0, r1
 8009d0e:	602b      	str	r3, [r5, #0]
 8009d10:	f7fa f99c 	bl	800404c <_close>
 8009d14:	1c43      	adds	r3, r0, #1
 8009d16:	d103      	bne.n	8009d20 <_close_r+0x1c>
 8009d18:	682b      	ldr	r3, [r5, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d000      	beq.n	8009d20 <_close_r+0x1c>
 8009d1e:	6023      	str	r3, [r4, #0]
 8009d20:	bd70      	pop	{r4, r5, r6, pc}
 8009d22:	46c0      	nop			@ (mov r8, r8)
 8009d24:	20001440 	.word	0x20001440

08009d28 <_lseek_r>:
 8009d28:	b570      	push	{r4, r5, r6, lr}
 8009d2a:	0004      	movs	r4, r0
 8009d2c:	0008      	movs	r0, r1
 8009d2e:	0011      	movs	r1, r2
 8009d30:	001a      	movs	r2, r3
 8009d32:	2300      	movs	r3, #0
 8009d34:	4d05      	ldr	r5, [pc, #20]	@ (8009d4c <_lseek_r+0x24>)
 8009d36:	602b      	str	r3, [r5, #0]
 8009d38:	f7fa f9a9 	bl	800408e <_lseek>
 8009d3c:	1c43      	adds	r3, r0, #1
 8009d3e:	d103      	bne.n	8009d48 <_lseek_r+0x20>
 8009d40:	682b      	ldr	r3, [r5, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d000      	beq.n	8009d48 <_lseek_r+0x20>
 8009d46:	6023      	str	r3, [r4, #0]
 8009d48:	bd70      	pop	{r4, r5, r6, pc}
 8009d4a:	46c0      	nop			@ (mov r8, r8)
 8009d4c:	20001440 	.word	0x20001440

08009d50 <_read_r>:
 8009d50:	b570      	push	{r4, r5, r6, lr}
 8009d52:	0004      	movs	r4, r0
 8009d54:	0008      	movs	r0, r1
 8009d56:	0011      	movs	r1, r2
 8009d58:	001a      	movs	r2, r3
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	4d05      	ldr	r5, [pc, #20]	@ (8009d74 <_read_r+0x24>)
 8009d5e:	602b      	str	r3, [r5, #0]
 8009d60:	f7fa f93b 	bl	8003fda <_read>
 8009d64:	1c43      	adds	r3, r0, #1
 8009d66:	d103      	bne.n	8009d70 <_read_r+0x20>
 8009d68:	682b      	ldr	r3, [r5, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d000      	beq.n	8009d70 <_read_r+0x20>
 8009d6e:	6023      	str	r3, [r4, #0]
 8009d70:	bd70      	pop	{r4, r5, r6, pc}
 8009d72:	46c0      	nop			@ (mov r8, r8)
 8009d74:	20001440 	.word	0x20001440

08009d78 <_sbrk_r>:
 8009d78:	2300      	movs	r3, #0
 8009d7a:	b570      	push	{r4, r5, r6, lr}
 8009d7c:	4d06      	ldr	r5, [pc, #24]	@ (8009d98 <_sbrk_r+0x20>)
 8009d7e:	0004      	movs	r4, r0
 8009d80:	0008      	movs	r0, r1
 8009d82:	602b      	str	r3, [r5, #0]
 8009d84:	f7fa f98e 	bl	80040a4 <_sbrk>
 8009d88:	1c43      	adds	r3, r0, #1
 8009d8a:	d103      	bne.n	8009d94 <_sbrk_r+0x1c>
 8009d8c:	682b      	ldr	r3, [r5, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d000      	beq.n	8009d94 <_sbrk_r+0x1c>
 8009d92:	6023      	str	r3, [r4, #0]
 8009d94:	bd70      	pop	{r4, r5, r6, pc}
 8009d96:	46c0      	nop			@ (mov r8, r8)
 8009d98:	20001440 	.word	0x20001440

08009d9c <_write_r>:
 8009d9c:	b570      	push	{r4, r5, r6, lr}
 8009d9e:	0004      	movs	r4, r0
 8009da0:	0008      	movs	r0, r1
 8009da2:	0011      	movs	r1, r2
 8009da4:	001a      	movs	r2, r3
 8009da6:	2300      	movs	r3, #0
 8009da8:	4d05      	ldr	r5, [pc, #20]	@ (8009dc0 <_write_r+0x24>)
 8009daa:	602b      	str	r3, [r5, #0]
 8009dac:	f7fa f932 	bl	8004014 <_write>
 8009db0:	1c43      	adds	r3, r0, #1
 8009db2:	d103      	bne.n	8009dbc <_write_r+0x20>
 8009db4:	682b      	ldr	r3, [r5, #0]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d000      	beq.n	8009dbc <_write_r+0x20>
 8009dba:	6023      	str	r3, [r4, #0]
 8009dbc:	bd70      	pop	{r4, r5, r6, pc}
 8009dbe:	46c0      	nop			@ (mov r8, r8)
 8009dc0:	20001440 	.word	0x20001440

08009dc4 <__errno>:
 8009dc4:	4b01      	ldr	r3, [pc, #4]	@ (8009dcc <__errno+0x8>)
 8009dc6:	6818      	ldr	r0, [r3, #0]
 8009dc8:	4770      	bx	lr
 8009dca:	46c0      	nop			@ (mov r8, r8)
 8009dcc:	20000030 	.word	0x20000030

08009dd0 <__libc_init_array>:
 8009dd0:	b570      	push	{r4, r5, r6, lr}
 8009dd2:	2600      	movs	r6, #0
 8009dd4:	4c0c      	ldr	r4, [pc, #48]	@ (8009e08 <__libc_init_array+0x38>)
 8009dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8009e0c <__libc_init_array+0x3c>)
 8009dd8:	1b64      	subs	r4, r4, r5
 8009dda:	10a4      	asrs	r4, r4, #2
 8009ddc:	42a6      	cmp	r6, r4
 8009dde:	d109      	bne.n	8009df4 <__libc_init_array+0x24>
 8009de0:	2600      	movs	r6, #0
 8009de2:	f003 fa0f 	bl	800d204 <_init>
 8009de6:	4c0a      	ldr	r4, [pc, #40]	@ (8009e10 <__libc_init_array+0x40>)
 8009de8:	4d0a      	ldr	r5, [pc, #40]	@ (8009e14 <__libc_init_array+0x44>)
 8009dea:	1b64      	subs	r4, r4, r5
 8009dec:	10a4      	asrs	r4, r4, #2
 8009dee:	42a6      	cmp	r6, r4
 8009df0:	d105      	bne.n	8009dfe <__libc_init_array+0x2e>
 8009df2:	bd70      	pop	{r4, r5, r6, pc}
 8009df4:	00b3      	lsls	r3, r6, #2
 8009df6:	58eb      	ldr	r3, [r5, r3]
 8009df8:	4798      	blx	r3
 8009dfa:	3601      	adds	r6, #1
 8009dfc:	e7ee      	b.n	8009ddc <__libc_init_array+0xc>
 8009dfe:	00b3      	lsls	r3, r6, #2
 8009e00:	58eb      	ldr	r3, [r5, r3]
 8009e02:	4798      	blx	r3
 8009e04:	3601      	adds	r6, #1
 8009e06:	e7f2      	b.n	8009dee <__libc_init_array+0x1e>
 8009e08:	0800d738 	.word	0x0800d738
 8009e0c:	0800d738 	.word	0x0800d738
 8009e10:	0800d73c 	.word	0x0800d73c
 8009e14:	0800d738 	.word	0x0800d738

08009e18 <__retarget_lock_init_recursive>:
 8009e18:	4770      	bx	lr

08009e1a <__retarget_lock_acquire_recursive>:
 8009e1a:	4770      	bx	lr

08009e1c <__retarget_lock_release_recursive>:
 8009e1c:	4770      	bx	lr

08009e1e <memchr>:
 8009e1e:	b2c9      	uxtb	r1, r1
 8009e20:	1882      	adds	r2, r0, r2
 8009e22:	4290      	cmp	r0, r2
 8009e24:	d101      	bne.n	8009e2a <memchr+0xc>
 8009e26:	2000      	movs	r0, #0
 8009e28:	4770      	bx	lr
 8009e2a:	7803      	ldrb	r3, [r0, #0]
 8009e2c:	428b      	cmp	r3, r1
 8009e2e:	d0fb      	beq.n	8009e28 <memchr+0xa>
 8009e30:	3001      	adds	r0, #1
 8009e32:	e7f6      	b.n	8009e22 <memchr+0x4>

08009e34 <memcpy>:
 8009e34:	2300      	movs	r3, #0
 8009e36:	b510      	push	{r4, lr}
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d100      	bne.n	8009e3e <memcpy+0xa>
 8009e3c:	bd10      	pop	{r4, pc}
 8009e3e:	5ccc      	ldrb	r4, [r1, r3]
 8009e40:	54c4      	strb	r4, [r0, r3]
 8009e42:	3301      	adds	r3, #1
 8009e44:	e7f8      	b.n	8009e38 <memcpy+0x4>
	...

08009e48 <nanf>:
 8009e48:	4800      	ldr	r0, [pc, #0]	@ (8009e4c <nanf+0x4>)
 8009e4a:	4770      	bx	lr
 8009e4c:	7fc00000 	.word	0x7fc00000

08009e50 <quorem>:
 8009e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e52:	6903      	ldr	r3, [r0, #16]
 8009e54:	690c      	ldr	r4, [r1, #16]
 8009e56:	b089      	sub	sp, #36	@ 0x24
 8009e58:	9003      	str	r0, [sp, #12]
 8009e5a:	9106      	str	r1, [sp, #24]
 8009e5c:	2000      	movs	r0, #0
 8009e5e:	42a3      	cmp	r3, r4
 8009e60:	db63      	blt.n	8009f2a <quorem+0xda>
 8009e62:	000b      	movs	r3, r1
 8009e64:	3c01      	subs	r4, #1
 8009e66:	3314      	adds	r3, #20
 8009e68:	00a5      	lsls	r5, r4, #2
 8009e6a:	9304      	str	r3, [sp, #16]
 8009e6c:	195b      	adds	r3, r3, r5
 8009e6e:	9305      	str	r3, [sp, #20]
 8009e70:	9b03      	ldr	r3, [sp, #12]
 8009e72:	3314      	adds	r3, #20
 8009e74:	9301      	str	r3, [sp, #4]
 8009e76:	195d      	adds	r5, r3, r5
 8009e78:	9b05      	ldr	r3, [sp, #20]
 8009e7a:	682f      	ldr	r7, [r5, #0]
 8009e7c:	681e      	ldr	r6, [r3, #0]
 8009e7e:	0038      	movs	r0, r7
 8009e80:	3601      	adds	r6, #1
 8009e82:	0031      	movs	r1, r6
 8009e84:	f7f6 f966 	bl	8000154 <__udivsi3>
 8009e88:	9002      	str	r0, [sp, #8]
 8009e8a:	42b7      	cmp	r7, r6
 8009e8c:	d327      	bcc.n	8009ede <quorem+0x8e>
 8009e8e:	9b04      	ldr	r3, [sp, #16]
 8009e90:	2700      	movs	r7, #0
 8009e92:	469c      	mov	ip, r3
 8009e94:	9e01      	ldr	r6, [sp, #4]
 8009e96:	9707      	str	r7, [sp, #28]
 8009e98:	4662      	mov	r2, ip
 8009e9a:	ca08      	ldmia	r2!, {r3}
 8009e9c:	6830      	ldr	r0, [r6, #0]
 8009e9e:	4694      	mov	ip, r2
 8009ea0:	9a02      	ldr	r2, [sp, #8]
 8009ea2:	b299      	uxth	r1, r3
 8009ea4:	4351      	muls	r1, r2
 8009ea6:	0c1b      	lsrs	r3, r3, #16
 8009ea8:	4353      	muls	r3, r2
 8009eaa:	19c9      	adds	r1, r1, r7
 8009eac:	0c0a      	lsrs	r2, r1, #16
 8009eae:	189b      	adds	r3, r3, r2
 8009eb0:	b289      	uxth	r1, r1
 8009eb2:	b282      	uxth	r2, r0
 8009eb4:	1a52      	subs	r2, r2, r1
 8009eb6:	9907      	ldr	r1, [sp, #28]
 8009eb8:	0c1f      	lsrs	r7, r3, #16
 8009eba:	1852      	adds	r2, r2, r1
 8009ebc:	0c00      	lsrs	r0, r0, #16
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	1411      	asrs	r1, r2, #16
 8009ec2:	1ac3      	subs	r3, r0, r3
 8009ec4:	185b      	adds	r3, r3, r1
 8009ec6:	1419      	asrs	r1, r3, #16
 8009ec8:	b292      	uxth	r2, r2
 8009eca:	041b      	lsls	r3, r3, #16
 8009ecc:	431a      	orrs	r2, r3
 8009ece:	9b05      	ldr	r3, [sp, #20]
 8009ed0:	9107      	str	r1, [sp, #28]
 8009ed2:	c604      	stmia	r6!, {r2}
 8009ed4:	4563      	cmp	r3, ip
 8009ed6:	d2df      	bcs.n	8009e98 <quorem+0x48>
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d02b      	beq.n	8009f36 <quorem+0xe6>
 8009ede:	9906      	ldr	r1, [sp, #24]
 8009ee0:	9803      	ldr	r0, [sp, #12]
 8009ee2:	f001 f947 	bl	800b174 <__mcmp>
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	db1e      	blt.n	8009f28 <quorem+0xd8>
 8009eea:	2600      	movs	r6, #0
 8009eec:	9d01      	ldr	r5, [sp, #4]
 8009eee:	9904      	ldr	r1, [sp, #16]
 8009ef0:	c901      	ldmia	r1!, {r0}
 8009ef2:	682b      	ldr	r3, [r5, #0]
 8009ef4:	b287      	uxth	r7, r0
 8009ef6:	b29a      	uxth	r2, r3
 8009ef8:	1bd2      	subs	r2, r2, r7
 8009efa:	1992      	adds	r2, r2, r6
 8009efc:	0c00      	lsrs	r0, r0, #16
 8009efe:	0c1b      	lsrs	r3, r3, #16
 8009f00:	1a1b      	subs	r3, r3, r0
 8009f02:	1410      	asrs	r0, r2, #16
 8009f04:	181b      	adds	r3, r3, r0
 8009f06:	141e      	asrs	r6, r3, #16
 8009f08:	b292      	uxth	r2, r2
 8009f0a:	041b      	lsls	r3, r3, #16
 8009f0c:	431a      	orrs	r2, r3
 8009f0e:	9b05      	ldr	r3, [sp, #20]
 8009f10:	c504      	stmia	r5!, {r2}
 8009f12:	428b      	cmp	r3, r1
 8009f14:	d2ec      	bcs.n	8009ef0 <quorem+0xa0>
 8009f16:	9a01      	ldr	r2, [sp, #4]
 8009f18:	00a3      	lsls	r3, r4, #2
 8009f1a:	18d3      	adds	r3, r2, r3
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	2a00      	cmp	r2, #0
 8009f20:	d014      	beq.n	8009f4c <quorem+0xfc>
 8009f22:	9b02      	ldr	r3, [sp, #8]
 8009f24:	3301      	adds	r3, #1
 8009f26:	9302      	str	r3, [sp, #8]
 8009f28:	9802      	ldr	r0, [sp, #8]
 8009f2a:	b009      	add	sp, #36	@ 0x24
 8009f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f2e:	682b      	ldr	r3, [r5, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d104      	bne.n	8009f3e <quorem+0xee>
 8009f34:	3c01      	subs	r4, #1
 8009f36:	9b01      	ldr	r3, [sp, #4]
 8009f38:	3d04      	subs	r5, #4
 8009f3a:	42ab      	cmp	r3, r5
 8009f3c:	d3f7      	bcc.n	8009f2e <quorem+0xde>
 8009f3e:	9b03      	ldr	r3, [sp, #12]
 8009f40:	611c      	str	r4, [r3, #16]
 8009f42:	e7cc      	b.n	8009ede <quorem+0x8e>
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	2a00      	cmp	r2, #0
 8009f48:	d104      	bne.n	8009f54 <quorem+0x104>
 8009f4a:	3c01      	subs	r4, #1
 8009f4c:	9a01      	ldr	r2, [sp, #4]
 8009f4e:	3b04      	subs	r3, #4
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d3f7      	bcc.n	8009f44 <quorem+0xf4>
 8009f54:	9b03      	ldr	r3, [sp, #12]
 8009f56:	611c      	str	r4, [r3, #16]
 8009f58:	e7e3      	b.n	8009f22 <quorem+0xd2>
	...

08009f5c <_dtoa_r>:
 8009f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f5e:	0014      	movs	r4, r2
 8009f60:	001d      	movs	r5, r3
 8009f62:	69c6      	ldr	r6, [r0, #28]
 8009f64:	b09d      	sub	sp, #116	@ 0x74
 8009f66:	940a      	str	r4, [sp, #40]	@ 0x28
 8009f68:	950b      	str	r5, [sp, #44]	@ 0x2c
 8009f6a:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8009f6c:	9003      	str	r0, [sp, #12]
 8009f6e:	2e00      	cmp	r6, #0
 8009f70:	d10f      	bne.n	8009f92 <_dtoa_r+0x36>
 8009f72:	2010      	movs	r0, #16
 8009f74:	f7fe fc50 	bl	8008818 <malloc>
 8009f78:	9b03      	ldr	r3, [sp, #12]
 8009f7a:	1e02      	subs	r2, r0, #0
 8009f7c:	61d8      	str	r0, [r3, #28]
 8009f7e:	d104      	bne.n	8009f8a <_dtoa_r+0x2e>
 8009f80:	21ef      	movs	r1, #239	@ 0xef
 8009f82:	4bc7      	ldr	r3, [pc, #796]	@ (800a2a0 <_dtoa_r+0x344>)
 8009f84:	48c7      	ldr	r0, [pc, #796]	@ (800a2a4 <_dtoa_r+0x348>)
 8009f86:	f002 fbd3 	bl	800c730 <__assert_func>
 8009f8a:	6046      	str	r6, [r0, #4]
 8009f8c:	6086      	str	r6, [r0, #8]
 8009f8e:	6006      	str	r6, [r0, #0]
 8009f90:	60c6      	str	r6, [r0, #12]
 8009f92:	9b03      	ldr	r3, [sp, #12]
 8009f94:	69db      	ldr	r3, [r3, #28]
 8009f96:	6819      	ldr	r1, [r3, #0]
 8009f98:	2900      	cmp	r1, #0
 8009f9a:	d00b      	beq.n	8009fb4 <_dtoa_r+0x58>
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	4093      	lsls	r3, r2
 8009fa2:	604a      	str	r2, [r1, #4]
 8009fa4:	608b      	str	r3, [r1, #8]
 8009fa6:	9803      	ldr	r0, [sp, #12]
 8009fa8:	f000 fe56 	bl	800ac58 <_Bfree>
 8009fac:	2200      	movs	r2, #0
 8009fae:	9b03      	ldr	r3, [sp, #12]
 8009fb0:	69db      	ldr	r3, [r3, #28]
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	2d00      	cmp	r5, #0
 8009fb6:	da1e      	bge.n	8009ff6 <_dtoa_r+0x9a>
 8009fb8:	2301      	movs	r3, #1
 8009fba:	603b      	str	r3, [r7, #0]
 8009fbc:	006b      	lsls	r3, r5, #1
 8009fbe:	085b      	lsrs	r3, r3, #1
 8009fc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fc2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8009fc4:	4bb8      	ldr	r3, [pc, #736]	@ (800a2a8 <_dtoa_r+0x34c>)
 8009fc6:	4ab8      	ldr	r2, [pc, #736]	@ (800a2a8 <_dtoa_r+0x34c>)
 8009fc8:	403b      	ands	r3, r7
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d116      	bne.n	8009ffc <_dtoa_r+0xa0>
 8009fce:	4bb7      	ldr	r3, [pc, #732]	@ (800a2ac <_dtoa_r+0x350>)
 8009fd0:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009fd2:	6013      	str	r3, [r2, #0]
 8009fd4:	033b      	lsls	r3, r7, #12
 8009fd6:	0b1b      	lsrs	r3, r3, #12
 8009fd8:	4323      	orrs	r3, r4
 8009fda:	d101      	bne.n	8009fe0 <_dtoa_r+0x84>
 8009fdc:	f000 fd80 	bl	800aae0 <_dtoa_r+0xb84>
 8009fe0:	4bb3      	ldr	r3, [pc, #716]	@ (800a2b0 <_dtoa_r+0x354>)
 8009fe2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009fe4:	9308      	str	r3, [sp, #32]
 8009fe6:	2a00      	cmp	r2, #0
 8009fe8:	d002      	beq.n	8009ff0 <_dtoa_r+0x94>
 8009fea:	4bb2      	ldr	r3, [pc, #712]	@ (800a2b4 <_dtoa_r+0x358>)
 8009fec:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8009fee:	6013      	str	r3, [r2, #0]
 8009ff0:	9808      	ldr	r0, [sp, #32]
 8009ff2:	b01d      	add	sp, #116	@ 0x74
 8009ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	603b      	str	r3, [r7, #0]
 8009ffa:	e7e2      	b.n	8009fc2 <_dtoa_r+0x66>
 8009ffc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a000:	9212      	str	r2, [sp, #72]	@ 0x48
 800a002:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a004:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a006:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a008:	2200      	movs	r2, #0
 800a00a:	2300      	movs	r3, #0
 800a00c:	f7f6 fa28 	bl	8000460 <__aeabi_dcmpeq>
 800a010:	1e06      	subs	r6, r0, #0
 800a012:	d00b      	beq.n	800a02c <_dtoa_r+0xd0>
 800a014:	2301      	movs	r3, #1
 800a016:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a018:	6013      	str	r3, [r2, #0]
 800a01a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d002      	beq.n	800a026 <_dtoa_r+0xca>
 800a020:	4ba5      	ldr	r3, [pc, #660]	@ (800a2b8 <_dtoa_r+0x35c>)
 800a022:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800a024:	6013      	str	r3, [r2, #0]
 800a026:	4ba5      	ldr	r3, [pc, #660]	@ (800a2bc <_dtoa_r+0x360>)
 800a028:	9308      	str	r3, [sp, #32]
 800a02a:	e7e1      	b.n	8009ff0 <_dtoa_r+0x94>
 800a02c:	ab1a      	add	r3, sp, #104	@ 0x68
 800a02e:	9301      	str	r3, [sp, #4]
 800a030:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	9803      	ldr	r0, [sp, #12]
 800a036:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a038:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a03a:	f001 f9bd 	bl	800b3b8 <__d2b>
 800a03e:	007a      	lsls	r2, r7, #1
 800a040:	9005      	str	r0, [sp, #20]
 800a042:	0d52      	lsrs	r2, r2, #21
 800a044:	d100      	bne.n	800a048 <_dtoa_r+0xec>
 800a046:	e07b      	b.n	800a140 <_dtoa_r+0x1e4>
 800a048:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a04a:	9618      	str	r6, [sp, #96]	@ 0x60
 800a04c:	0319      	lsls	r1, r3, #12
 800a04e:	4b9c      	ldr	r3, [pc, #624]	@ (800a2c0 <_dtoa_r+0x364>)
 800a050:	0b09      	lsrs	r1, r1, #12
 800a052:	430b      	orrs	r3, r1
 800a054:	499b      	ldr	r1, [pc, #620]	@ (800a2c4 <_dtoa_r+0x368>)
 800a056:	1857      	adds	r7, r2, r1
 800a058:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a05a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a05c:	0019      	movs	r1, r3
 800a05e:	2200      	movs	r2, #0
 800a060:	4b99      	ldr	r3, [pc, #612]	@ (800a2c8 <_dtoa_r+0x36c>)
 800a062:	f7f8 f81b 	bl	800209c <__aeabi_dsub>
 800a066:	4a99      	ldr	r2, [pc, #612]	@ (800a2cc <_dtoa_r+0x370>)
 800a068:	4b99      	ldr	r3, [pc, #612]	@ (800a2d0 <_dtoa_r+0x374>)
 800a06a:	f7f7 fd31 	bl	8001ad0 <__aeabi_dmul>
 800a06e:	4a99      	ldr	r2, [pc, #612]	@ (800a2d4 <_dtoa_r+0x378>)
 800a070:	4b99      	ldr	r3, [pc, #612]	@ (800a2d8 <_dtoa_r+0x37c>)
 800a072:	f7f6 fd2d 	bl	8000ad0 <__aeabi_dadd>
 800a076:	0004      	movs	r4, r0
 800a078:	0038      	movs	r0, r7
 800a07a:	000d      	movs	r5, r1
 800a07c:	f7f8 fc76 	bl	800296c <__aeabi_i2d>
 800a080:	4a96      	ldr	r2, [pc, #600]	@ (800a2dc <_dtoa_r+0x380>)
 800a082:	4b97      	ldr	r3, [pc, #604]	@ (800a2e0 <_dtoa_r+0x384>)
 800a084:	f7f7 fd24 	bl	8001ad0 <__aeabi_dmul>
 800a088:	0002      	movs	r2, r0
 800a08a:	000b      	movs	r3, r1
 800a08c:	0020      	movs	r0, r4
 800a08e:	0029      	movs	r1, r5
 800a090:	f7f6 fd1e 	bl	8000ad0 <__aeabi_dadd>
 800a094:	0004      	movs	r4, r0
 800a096:	000d      	movs	r5, r1
 800a098:	f7f8 fc2c 	bl	80028f4 <__aeabi_d2iz>
 800a09c:	2200      	movs	r2, #0
 800a09e:	9004      	str	r0, [sp, #16]
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	0020      	movs	r0, r4
 800a0a4:	0029      	movs	r1, r5
 800a0a6:	f7f6 f9e1 	bl	800046c <__aeabi_dcmplt>
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	d00b      	beq.n	800a0c6 <_dtoa_r+0x16a>
 800a0ae:	9804      	ldr	r0, [sp, #16]
 800a0b0:	f7f8 fc5c 	bl	800296c <__aeabi_i2d>
 800a0b4:	002b      	movs	r3, r5
 800a0b6:	0022      	movs	r2, r4
 800a0b8:	f7f6 f9d2 	bl	8000460 <__aeabi_dcmpeq>
 800a0bc:	4243      	negs	r3, r0
 800a0be:	4158      	adcs	r0, r3
 800a0c0:	9b04      	ldr	r3, [sp, #16]
 800a0c2:	1a1b      	subs	r3, r3, r0
 800a0c4:	9304      	str	r3, [sp, #16]
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	9315      	str	r3, [sp, #84]	@ 0x54
 800a0ca:	9b04      	ldr	r3, [sp, #16]
 800a0cc:	2b16      	cmp	r3, #22
 800a0ce:	d810      	bhi.n	800a0f2 <_dtoa_r+0x196>
 800a0d0:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a0d2:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a0d4:	9a04      	ldr	r2, [sp, #16]
 800a0d6:	4b83      	ldr	r3, [pc, #524]	@ (800a2e4 <_dtoa_r+0x388>)
 800a0d8:	00d2      	lsls	r2, r2, #3
 800a0da:	189b      	adds	r3, r3, r2
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	f7f6 f9c4 	bl	800046c <__aeabi_dcmplt>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d047      	beq.n	800a178 <_dtoa_r+0x21c>
 800a0e8:	9b04      	ldr	r3, [sp, #16]
 800a0ea:	3b01      	subs	r3, #1
 800a0ec:	9304      	str	r3, [sp, #16]
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	9315      	str	r3, [sp, #84]	@ 0x54
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800a0f6:	9206      	str	r2, [sp, #24]
 800a0f8:	1bdb      	subs	r3, r3, r7
 800a0fa:	1e5a      	subs	r2, r3, #1
 800a0fc:	d53e      	bpl.n	800a17c <_dtoa_r+0x220>
 800a0fe:	2201      	movs	r2, #1
 800a100:	1ad3      	subs	r3, r2, r3
 800a102:	9306      	str	r3, [sp, #24]
 800a104:	2300      	movs	r3, #0
 800a106:	930d      	str	r3, [sp, #52]	@ 0x34
 800a108:	9b04      	ldr	r3, [sp, #16]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	db38      	blt.n	800a180 <_dtoa_r+0x224>
 800a10e:	9a04      	ldr	r2, [sp, #16]
 800a110:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a112:	4694      	mov	ip, r2
 800a114:	4463      	add	r3, ip
 800a116:	930d      	str	r3, [sp, #52]	@ 0x34
 800a118:	2300      	movs	r3, #0
 800a11a:	9214      	str	r2, [sp, #80]	@ 0x50
 800a11c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a11e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a120:	2401      	movs	r4, #1
 800a122:	2b09      	cmp	r3, #9
 800a124:	d862      	bhi.n	800a1ec <_dtoa_r+0x290>
 800a126:	2b05      	cmp	r3, #5
 800a128:	dd02      	ble.n	800a130 <_dtoa_r+0x1d4>
 800a12a:	2400      	movs	r4, #0
 800a12c:	3b04      	subs	r3, #4
 800a12e:	9322      	str	r3, [sp, #136]	@ 0x88
 800a130:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a132:	1e98      	subs	r0, r3, #2
 800a134:	2803      	cmp	r0, #3
 800a136:	d863      	bhi.n	800a200 <_dtoa_r+0x2a4>
 800a138:	f7f5 fff8 	bl	800012c <__gnu_thumb1_case_uqi>
 800a13c:	2b385654 	.word	0x2b385654
 800a140:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a142:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800a144:	18f6      	adds	r6, r6, r3
 800a146:	4b68      	ldr	r3, [pc, #416]	@ (800a2e8 <_dtoa_r+0x38c>)
 800a148:	18f2      	adds	r2, r6, r3
 800a14a:	2a20      	cmp	r2, #32
 800a14c:	dd0f      	ble.n	800a16e <_dtoa_r+0x212>
 800a14e:	2340      	movs	r3, #64	@ 0x40
 800a150:	1a9b      	subs	r3, r3, r2
 800a152:	409f      	lsls	r7, r3
 800a154:	4b65      	ldr	r3, [pc, #404]	@ (800a2ec <_dtoa_r+0x390>)
 800a156:	0038      	movs	r0, r7
 800a158:	18f3      	adds	r3, r6, r3
 800a15a:	40dc      	lsrs	r4, r3
 800a15c:	4320      	orrs	r0, r4
 800a15e:	f7f8 fc33 	bl	80029c8 <__aeabi_ui2d>
 800a162:	2201      	movs	r2, #1
 800a164:	4b62      	ldr	r3, [pc, #392]	@ (800a2f0 <_dtoa_r+0x394>)
 800a166:	1e77      	subs	r7, r6, #1
 800a168:	18cb      	adds	r3, r1, r3
 800a16a:	9218      	str	r2, [sp, #96]	@ 0x60
 800a16c:	e776      	b.n	800a05c <_dtoa_r+0x100>
 800a16e:	2320      	movs	r3, #32
 800a170:	0020      	movs	r0, r4
 800a172:	1a9b      	subs	r3, r3, r2
 800a174:	4098      	lsls	r0, r3
 800a176:	e7f2      	b.n	800a15e <_dtoa_r+0x202>
 800a178:	9015      	str	r0, [sp, #84]	@ 0x54
 800a17a:	e7ba      	b.n	800a0f2 <_dtoa_r+0x196>
 800a17c:	920d      	str	r2, [sp, #52]	@ 0x34
 800a17e:	e7c3      	b.n	800a108 <_dtoa_r+0x1ac>
 800a180:	9b06      	ldr	r3, [sp, #24]
 800a182:	9a04      	ldr	r2, [sp, #16]
 800a184:	1a9b      	subs	r3, r3, r2
 800a186:	9306      	str	r3, [sp, #24]
 800a188:	4253      	negs	r3, r2
 800a18a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a18c:	2300      	movs	r3, #0
 800a18e:	9314      	str	r3, [sp, #80]	@ 0x50
 800a190:	e7c5      	b.n	800a11e <_dtoa_r+0x1c2>
 800a192:	2301      	movs	r3, #1
 800a194:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a196:	9310      	str	r3, [sp, #64]	@ 0x40
 800a198:	4694      	mov	ip, r2
 800a19a:	9b04      	ldr	r3, [sp, #16]
 800a19c:	4463      	add	r3, ip
 800a19e:	930e      	str	r3, [sp, #56]	@ 0x38
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	dc08      	bgt.n	800a1ba <_dtoa_r+0x25e>
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e006      	b.n	800a1ba <_dtoa_r+0x25e>
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800a1b0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	dd28      	ble.n	800a208 <_dtoa_r+0x2ac>
 800a1b6:	930e      	str	r3, [sp, #56]	@ 0x38
 800a1b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1ba:	9a03      	ldr	r2, [sp, #12]
 800a1bc:	2100      	movs	r1, #0
 800a1be:	69d0      	ldr	r0, [r2, #28]
 800a1c0:	2204      	movs	r2, #4
 800a1c2:	0015      	movs	r5, r2
 800a1c4:	3514      	adds	r5, #20
 800a1c6:	429d      	cmp	r5, r3
 800a1c8:	d923      	bls.n	800a212 <_dtoa_r+0x2b6>
 800a1ca:	6041      	str	r1, [r0, #4]
 800a1cc:	9803      	ldr	r0, [sp, #12]
 800a1ce:	f000 fcff 	bl	800abd0 <_Balloc>
 800a1d2:	9008      	str	r0, [sp, #32]
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	d11f      	bne.n	800a218 <_dtoa_r+0x2bc>
 800a1d8:	21b0      	movs	r1, #176	@ 0xb0
 800a1da:	4b46      	ldr	r3, [pc, #280]	@ (800a2f4 <_dtoa_r+0x398>)
 800a1dc:	4831      	ldr	r0, [pc, #196]	@ (800a2a4 <_dtoa_r+0x348>)
 800a1de:	9a08      	ldr	r2, [sp, #32]
 800a1e0:	31ff      	adds	r1, #255	@ 0xff
 800a1e2:	e6d0      	b.n	8009f86 <_dtoa_r+0x2a>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	e7e2      	b.n	800a1ae <_dtoa_r+0x252>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	e7d3      	b.n	800a194 <_dtoa_r+0x238>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	9410      	str	r4, [sp, #64]	@ 0x40
 800a1f0:	9322      	str	r3, [sp, #136]	@ 0x88
 800a1f2:	3b01      	subs	r3, #1
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	930e      	str	r3, [sp, #56]	@ 0x38
 800a1f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1fa:	3313      	adds	r3, #19
 800a1fc:	9223      	str	r2, [sp, #140]	@ 0x8c
 800a1fe:	e7dc      	b.n	800a1ba <_dtoa_r+0x25e>
 800a200:	2301      	movs	r3, #1
 800a202:	9310      	str	r3, [sp, #64]	@ 0x40
 800a204:	3b02      	subs	r3, #2
 800a206:	e7f5      	b.n	800a1f4 <_dtoa_r+0x298>
 800a208:	2301      	movs	r3, #1
 800a20a:	001a      	movs	r2, r3
 800a20c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a20e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a210:	e7f4      	b.n	800a1fc <_dtoa_r+0x2a0>
 800a212:	3101      	adds	r1, #1
 800a214:	0052      	lsls	r2, r2, #1
 800a216:	e7d4      	b.n	800a1c2 <_dtoa_r+0x266>
 800a218:	9b03      	ldr	r3, [sp, #12]
 800a21a:	9a08      	ldr	r2, [sp, #32]
 800a21c:	69db      	ldr	r3, [r3, #28]
 800a21e:	601a      	str	r2, [r3, #0]
 800a220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a222:	2b0e      	cmp	r3, #14
 800a224:	d900      	bls.n	800a228 <_dtoa_r+0x2cc>
 800a226:	e0d6      	b.n	800a3d6 <_dtoa_r+0x47a>
 800a228:	2c00      	cmp	r4, #0
 800a22a:	d100      	bne.n	800a22e <_dtoa_r+0x2d2>
 800a22c:	e0d3      	b.n	800a3d6 <_dtoa_r+0x47a>
 800a22e:	9b04      	ldr	r3, [sp, #16]
 800a230:	2b00      	cmp	r3, #0
 800a232:	dd63      	ble.n	800a2fc <_dtoa_r+0x3a0>
 800a234:	210f      	movs	r1, #15
 800a236:	9a04      	ldr	r2, [sp, #16]
 800a238:	4b2a      	ldr	r3, [pc, #168]	@ (800a2e4 <_dtoa_r+0x388>)
 800a23a:	400a      	ands	r2, r1
 800a23c:	00d2      	lsls	r2, r2, #3
 800a23e:	189b      	adds	r3, r3, r2
 800a240:	681e      	ldr	r6, [r3, #0]
 800a242:	685f      	ldr	r7, [r3, #4]
 800a244:	9b04      	ldr	r3, [sp, #16]
 800a246:	2402      	movs	r4, #2
 800a248:	111d      	asrs	r5, r3, #4
 800a24a:	05db      	lsls	r3, r3, #23
 800a24c:	d50a      	bpl.n	800a264 <_dtoa_r+0x308>
 800a24e:	4b2a      	ldr	r3, [pc, #168]	@ (800a2f8 <_dtoa_r+0x39c>)
 800a250:	400d      	ands	r5, r1
 800a252:	6a1a      	ldr	r2, [r3, #32]
 800a254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a256:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a258:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a25a:	f7f6 ffff 	bl	800125c <__aeabi_ddiv>
 800a25e:	900a      	str	r0, [sp, #40]	@ 0x28
 800a260:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a262:	3401      	adds	r4, #1
 800a264:	4b24      	ldr	r3, [pc, #144]	@ (800a2f8 <_dtoa_r+0x39c>)
 800a266:	930c      	str	r3, [sp, #48]	@ 0x30
 800a268:	2d00      	cmp	r5, #0
 800a26a:	d108      	bne.n	800a27e <_dtoa_r+0x322>
 800a26c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a26e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a270:	0032      	movs	r2, r6
 800a272:	003b      	movs	r3, r7
 800a274:	f7f6 fff2 	bl	800125c <__aeabi_ddiv>
 800a278:	900a      	str	r0, [sp, #40]	@ 0x28
 800a27a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a27c:	e059      	b.n	800a332 <_dtoa_r+0x3d6>
 800a27e:	2301      	movs	r3, #1
 800a280:	421d      	tst	r5, r3
 800a282:	d009      	beq.n	800a298 <_dtoa_r+0x33c>
 800a284:	18e4      	adds	r4, r4, r3
 800a286:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a288:	0030      	movs	r0, r6
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	0039      	movs	r1, r7
 800a290:	f7f7 fc1e 	bl	8001ad0 <__aeabi_dmul>
 800a294:	0006      	movs	r6, r0
 800a296:	000f      	movs	r7, r1
 800a298:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a29a:	106d      	asrs	r5, r5, #1
 800a29c:	3308      	adds	r3, #8
 800a29e:	e7e2      	b.n	800a266 <_dtoa_r+0x30a>
 800a2a0:	0800d45b 	.word	0x0800d45b
 800a2a4:	0800d472 	.word	0x0800d472
 800a2a8:	7ff00000 	.word	0x7ff00000
 800a2ac:	0000270f 	.word	0x0000270f
 800a2b0:	0800d457 	.word	0x0800d457
 800a2b4:	0800d45a 	.word	0x0800d45a
 800a2b8:	0800d426 	.word	0x0800d426
 800a2bc:	0800d425 	.word	0x0800d425
 800a2c0:	3ff00000 	.word	0x3ff00000
 800a2c4:	fffffc01 	.word	0xfffffc01
 800a2c8:	3ff80000 	.word	0x3ff80000
 800a2cc:	636f4361 	.word	0x636f4361
 800a2d0:	3fd287a7 	.word	0x3fd287a7
 800a2d4:	8b60c8b3 	.word	0x8b60c8b3
 800a2d8:	3fc68a28 	.word	0x3fc68a28
 800a2dc:	509f79fb 	.word	0x509f79fb
 800a2e0:	3fd34413 	.word	0x3fd34413
 800a2e4:	0800d620 	.word	0x0800d620
 800a2e8:	00000432 	.word	0x00000432
 800a2ec:	00000412 	.word	0x00000412
 800a2f0:	fe100000 	.word	0xfe100000
 800a2f4:	0800d4ca 	.word	0x0800d4ca
 800a2f8:	0800d5f8 	.word	0x0800d5f8
 800a2fc:	9b04      	ldr	r3, [sp, #16]
 800a2fe:	2402      	movs	r4, #2
 800a300:	2b00      	cmp	r3, #0
 800a302:	d016      	beq.n	800a332 <_dtoa_r+0x3d6>
 800a304:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a306:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800a308:	220f      	movs	r2, #15
 800a30a:	425d      	negs	r5, r3
 800a30c:	402a      	ands	r2, r5
 800a30e:	4bd5      	ldr	r3, [pc, #852]	@ (800a664 <_dtoa_r+0x708>)
 800a310:	00d2      	lsls	r2, r2, #3
 800a312:	189b      	adds	r3, r3, r2
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	f7f7 fbda 	bl	8001ad0 <__aeabi_dmul>
 800a31c:	2701      	movs	r7, #1
 800a31e:	2300      	movs	r3, #0
 800a320:	900a      	str	r0, [sp, #40]	@ 0x28
 800a322:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a324:	4ed0      	ldr	r6, [pc, #832]	@ (800a668 <_dtoa_r+0x70c>)
 800a326:	112d      	asrs	r5, r5, #4
 800a328:	2d00      	cmp	r5, #0
 800a32a:	d000      	beq.n	800a32e <_dtoa_r+0x3d2>
 800a32c:	e095      	b.n	800a45a <_dtoa_r+0x4fe>
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d1a2      	bne.n	800a278 <_dtoa_r+0x31c>
 800a332:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a334:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a336:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d100      	bne.n	800a33e <_dtoa_r+0x3e2>
 800a33c:	e098      	b.n	800a470 <_dtoa_r+0x514>
 800a33e:	2200      	movs	r2, #0
 800a340:	0030      	movs	r0, r6
 800a342:	0039      	movs	r1, r7
 800a344:	4bc9      	ldr	r3, [pc, #804]	@ (800a66c <_dtoa_r+0x710>)
 800a346:	f7f6 f891 	bl	800046c <__aeabi_dcmplt>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	d100      	bne.n	800a350 <_dtoa_r+0x3f4>
 800a34e:	e08f      	b.n	800a470 <_dtoa_r+0x514>
 800a350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a352:	2b00      	cmp	r3, #0
 800a354:	d100      	bne.n	800a358 <_dtoa_r+0x3fc>
 800a356:	e08b      	b.n	800a470 <_dtoa_r+0x514>
 800a358:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	dd37      	ble.n	800a3ce <_dtoa_r+0x472>
 800a35e:	9b04      	ldr	r3, [sp, #16]
 800a360:	2200      	movs	r2, #0
 800a362:	3b01      	subs	r3, #1
 800a364:	930c      	str	r3, [sp, #48]	@ 0x30
 800a366:	0030      	movs	r0, r6
 800a368:	4bc1      	ldr	r3, [pc, #772]	@ (800a670 <_dtoa_r+0x714>)
 800a36a:	0039      	movs	r1, r7
 800a36c:	f7f7 fbb0 	bl	8001ad0 <__aeabi_dmul>
 800a370:	900a      	str	r0, [sp, #40]	@ 0x28
 800a372:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a374:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a376:	3401      	adds	r4, #1
 800a378:	0020      	movs	r0, r4
 800a37a:	9311      	str	r3, [sp, #68]	@ 0x44
 800a37c:	f7f8 faf6 	bl	800296c <__aeabi_i2d>
 800a380:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a382:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a384:	f7f7 fba4 	bl	8001ad0 <__aeabi_dmul>
 800a388:	4bba      	ldr	r3, [pc, #744]	@ (800a674 <_dtoa_r+0x718>)
 800a38a:	2200      	movs	r2, #0
 800a38c:	f7f6 fba0 	bl	8000ad0 <__aeabi_dadd>
 800a390:	4bb9      	ldr	r3, [pc, #740]	@ (800a678 <_dtoa_r+0x71c>)
 800a392:	0006      	movs	r6, r0
 800a394:	18cf      	adds	r7, r1, r3
 800a396:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d16d      	bne.n	800a478 <_dtoa_r+0x51c>
 800a39c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a39e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	4bb6      	ldr	r3, [pc, #728]	@ (800a67c <_dtoa_r+0x720>)
 800a3a4:	f7f7 fe7a 	bl	800209c <__aeabi_dsub>
 800a3a8:	0032      	movs	r2, r6
 800a3aa:	003b      	movs	r3, r7
 800a3ac:	0004      	movs	r4, r0
 800a3ae:	000d      	movs	r5, r1
 800a3b0:	f7f6 f870 	bl	8000494 <__aeabi_dcmpgt>
 800a3b4:	2800      	cmp	r0, #0
 800a3b6:	d000      	beq.n	800a3ba <_dtoa_r+0x45e>
 800a3b8:	e2b6      	b.n	800a928 <_dtoa_r+0x9cc>
 800a3ba:	2180      	movs	r1, #128	@ 0x80
 800a3bc:	0609      	lsls	r1, r1, #24
 800a3be:	187b      	adds	r3, r7, r1
 800a3c0:	0032      	movs	r2, r6
 800a3c2:	0020      	movs	r0, r4
 800a3c4:	0029      	movs	r1, r5
 800a3c6:	f7f6 f851 	bl	800046c <__aeabi_dcmplt>
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d128      	bne.n	800a420 <_dtoa_r+0x4c4>
 800a3ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a3d0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800a3d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3d4:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a3d6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	da00      	bge.n	800a3de <_dtoa_r+0x482>
 800a3dc:	e174      	b.n	800a6c8 <_dtoa_r+0x76c>
 800a3de:	9a04      	ldr	r2, [sp, #16]
 800a3e0:	2a0e      	cmp	r2, #14
 800a3e2:	dd00      	ble.n	800a3e6 <_dtoa_r+0x48a>
 800a3e4:	e170      	b.n	800a6c8 <_dtoa_r+0x76c>
 800a3e6:	4b9f      	ldr	r3, [pc, #636]	@ (800a664 <_dtoa_r+0x708>)
 800a3e8:	00d2      	lsls	r2, r2, #3
 800a3ea:	189b      	adds	r3, r3, r2
 800a3ec:	685c      	ldr	r4, [r3, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	9306      	str	r3, [sp, #24]
 800a3f2:	9407      	str	r4, [sp, #28]
 800a3f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	db00      	blt.n	800a3fc <_dtoa_r+0x4a0>
 800a3fa:	e0e7      	b.n	800a5cc <_dtoa_r+0x670>
 800a3fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	dd00      	ble.n	800a404 <_dtoa_r+0x4a8>
 800a402:	e0e3      	b.n	800a5cc <_dtoa_r+0x670>
 800a404:	d10c      	bne.n	800a420 <_dtoa_r+0x4c4>
 800a406:	9806      	ldr	r0, [sp, #24]
 800a408:	9907      	ldr	r1, [sp, #28]
 800a40a:	2200      	movs	r2, #0
 800a40c:	4b9b      	ldr	r3, [pc, #620]	@ (800a67c <_dtoa_r+0x720>)
 800a40e:	f7f7 fb5f 	bl	8001ad0 <__aeabi_dmul>
 800a412:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a414:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a416:	f7f6 f847 	bl	80004a8 <__aeabi_dcmpge>
 800a41a:	2800      	cmp	r0, #0
 800a41c:	d100      	bne.n	800a420 <_dtoa_r+0x4c4>
 800a41e:	e286      	b.n	800a92e <_dtoa_r+0x9d2>
 800a420:	2600      	movs	r6, #0
 800a422:	0037      	movs	r7, r6
 800a424:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a426:	9c08      	ldr	r4, [sp, #32]
 800a428:	43db      	mvns	r3, r3
 800a42a:	930c      	str	r3, [sp, #48]	@ 0x30
 800a42c:	9704      	str	r7, [sp, #16]
 800a42e:	2700      	movs	r7, #0
 800a430:	0031      	movs	r1, r6
 800a432:	9803      	ldr	r0, [sp, #12]
 800a434:	f000 fc10 	bl	800ac58 <_Bfree>
 800a438:	9b04      	ldr	r3, [sp, #16]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d100      	bne.n	800a440 <_dtoa_r+0x4e4>
 800a43e:	e0bb      	b.n	800a5b8 <_dtoa_r+0x65c>
 800a440:	2f00      	cmp	r7, #0
 800a442:	d005      	beq.n	800a450 <_dtoa_r+0x4f4>
 800a444:	429f      	cmp	r7, r3
 800a446:	d003      	beq.n	800a450 <_dtoa_r+0x4f4>
 800a448:	0039      	movs	r1, r7
 800a44a:	9803      	ldr	r0, [sp, #12]
 800a44c:	f000 fc04 	bl	800ac58 <_Bfree>
 800a450:	9904      	ldr	r1, [sp, #16]
 800a452:	9803      	ldr	r0, [sp, #12]
 800a454:	f000 fc00 	bl	800ac58 <_Bfree>
 800a458:	e0ae      	b.n	800a5b8 <_dtoa_r+0x65c>
 800a45a:	423d      	tst	r5, r7
 800a45c:	d005      	beq.n	800a46a <_dtoa_r+0x50e>
 800a45e:	6832      	ldr	r2, [r6, #0]
 800a460:	6873      	ldr	r3, [r6, #4]
 800a462:	f7f7 fb35 	bl	8001ad0 <__aeabi_dmul>
 800a466:	003b      	movs	r3, r7
 800a468:	3401      	adds	r4, #1
 800a46a:	106d      	asrs	r5, r5, #1
 800a46c:	3608      	adds	r6, #8
 800a46e:	e75b      	b.n	800a328 <_dtoa_r+0x3cc>
 800a470:	9b04      	ldr	r3, [sp, #16]
 800a472:	930c      	str	r3, [sp, #48]	@ 0x30
 800a474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a476:	e77f      	b.n	800a378 <_dtoa_r+0x41c>
 800a478:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a47a:	4b7a      	ldr	r3, [pc, #488]	@ (800a664 <_dtoa_r+0x708>)
 800a47c:	3a01      	subs	r2, #1
 800a47e:	00d2      	lsls	r2, r2, #3
 800a480:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800a482:	189b      	adds	r3, r3, r2
 800a484:	681a      	ldr	r2, [r3, #0]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	2900      	cmp	r1, #0
 800a48a:	d04c      	beq.n	800a526 <_dtoa_r+0x5ca>
 800a48c:	2000      	movs	r0, #0
 800a48e:	497c      	ldr	r1, [pc, #496]	@ (800a680 <_dtoa_r+0x724>)
 800a490:	f7f6 fee4 	bl	800125c <__aeabi_ddiv>
 800a494:	0032      	movs	r2, r6
 800a496:	003b      	movs	r3, r7
 800a498:	f7f7 fe00 	bl	800209c <__aeabi_dsub>
 800a49c:	9a08      	ldr	r2, [sp, #32]
 800a49e:	0006      	movs	r6, r0
 800a4a0:	4694      	mov	ip, r2
 800a4a2:	000f      	movs	r7, r1
 800a4a4:	9b08      	ldr	r3, [sp, #32]
 800a4a6:	9316      	str	r3, [sp, #88]	@ 0x58
 800a4a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a4aa:	4463      	add	r3, ip
 800a4ac:	9311      	str	r3, [sp, #68]	@ 0x44
 800a4ae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a4b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a4b2:	f7f8 fa1f 	bl	80028f4 <__aeabi_d2iz>
 800a4b6:	0005      	movs	r5, r0
 800a4b8:	f7f8 fa58 	bl	800296c <__aeabi_i2d>
 800a4bc:	0002      	movs	r2, r0
 800a4be:	000b      	movs	r3, r1
 800a4c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a4c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a4c4:	f7f7 fdea 	bl	800209c <__aeabi_dsub>
 800a4c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a4ca:	3530      	adds	r5, #48	@ 0x30
 800a4cc:	1c5c      	adds	r4, r3, #1
 800a4ce:	701d      	strb	r5, [r3, #0]
 800a4d0:	0032      	movs	r2, r6
 800a4d2:	003b      	movs	r3, r7
 800a4d4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a4d6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a4d8:	f7f5 ffc8 	bl	800046c <__aeabi_dcmplt>
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	d16b      	bne.n	800a5b8 <_dtoa_r+0x65c>
 800a4e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	4961      	ldr	r1, [pc, #388]	@ (800a66c <_dtoa_r+0x710>)
 800a4e8:	f7f7 fdd8 	bl	800209c <__aeabi_dsub>
 800a4ec:	0032      	movs	r2, r6
 800a4ee:	003b      	movs	r3, r7
 800a4f0:	f7f5 ffbc 	bl	800046c <__aeabi_dcmplt>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d000      	beq.n	800a4fa <_dtoa_r+0x59e>
 800a4f8:	e0c6      	b.n	800a688 <_dtoa_r+0x72c>
 800a4fa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a4fc:	42a3      	cmp	r3, r4
 800a4fe:	d100      	bne.n	800a502 <_dtoa_r+0x5a6>
 800a500:	e765      	b.n	800a3ce <_dtoa_r+0x472>
 800a502:	2200      	movs	r2, #0
 800a504:	0030      	movs	r0, r6
 800a506:	0039      	movs	r1, r7
 800a508:	4b59      	ldr	r3, [pc, #356]	@ (800a670 <_dtoa_r+0x714>)
 800a50a:	f7f7 fae1 	bl	8001ad0 <__aeabi_dmul>
 800a50e:	2200      	movs	r2, #0
 800a510:	0006      	movs	r6, r0
 800a512:	000f      	movs	r7, r1
 800a514:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a516:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a518:	4b55      	ldr	r3, [pc, #340]	@ (800a670 <_dtoa_r+0x714>)
 800a51a:	f7f7 fad9 	bl	8001ad0 <__aeabi_dmul>
 800a51e:	9416      	str	r4, [sp, #88]	@ 0x58
 800a520:	900a      	str	r0, [sp, #40]	@ 0x28
 800a522:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a524:	e7c3      	b.n	800a4ae <_dtoa_r+0x552>
 800a526:	0030      	movs	r0, r6
 800a528:	0039      	movs	r1, r7
 800a52a:	f7f7 fad1 	bl	8001ad0 <__aeabi_dmul>
 800a52e:	9d08      	ldr	r5, [sp, #32]
 800a530:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a532:	002b      	movs	r3, r5
 800a534:	4694      	mov	ip, r2
 800a536:	9016      	str	r0, [sp, #88]	@ 0x58
 800a538:	9117      	str	r1, [sp, #92]	@ 0x5c
 800a53a:	4463      	add	r3, ip
 800a53c:	9319      	str	r3, [sp, #100]	@ 0x64
 800a53e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a540:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a542:	f7f8 f9d7 	bl	80028f4 <__aeabi_d2iz>
 800a546:	0004      	movs	r4, r0
 800a548:	f7f8 fa10 	bl	800296c <__aeabi_i2d>
 800a54c:	000b      	movs	r3, r1
 800a54e:	0002      	movs	r2, r0
 800a550:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a552:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a554:	f7f7 fda2 	bl	800209c <__aeabi_dsub>
 800a558:	3430      	adds	r4, #48	@ 0x30
 800a55a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a55c:	702c      	strb	r4, [r5, #0]
 800a55e:	3501      	adds	r5, #1
 800a560:	0006      	movs	r6, r0
 800a562:	000f      	movs	r7, r1
 800a564:	42ab      	cmp	r3, r5
 800a566:	d12a      	bne.n	800a5be <_dtoa_r+0x662>
 800a568:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800a56a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800a56c:	9b08      	ldr	r3, [sp, #32]
 800a56e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800a570:	469c      	mov	ip, r3
 800a572:	2200      	movs	r2, #0
 800a574:	4b42      	ldr	r3, [pc, #264]	@ (800a680 <_dtoa_r+0x724>)
 800a576:	4464      	add	r4, ip
 800a578:	f7f6 faaa 	bl	8000ad0 <__aeabi_dadd>
 800a57c:	0002      	movs	r2, r0
 800a57e:	000b      	movs	r3, r1
 800a580:	0030      	movs	r0, r6
 800a582:	0039      	movs	r1, r7
 800a584:	f7f5 ff86 	bl	8000494 <__aeabi_dcmpgt>
 800a588:	2800      	cmp	r0, #0
 800a58a:	d000      	beq.n	800a58e <_dtoa_r+0x632>
 800a58c:	e07c      	b.n	800a688 <_dtoa_r+0x72c>
 800a58e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a590:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a592:	2000      	movs	r0, #0
 800a594:	493a      	ldr	r1, [pc, #232]	@ (800a680 <_dtoa_r+0x724>)
 800a596:	f7f7 fd81 	bl	800209c <__aeabi_dsub>
 800a59a:	0002      	movs	r2, r0
 800a59c:	000b      	movs	r3, r1
 800a59e:	0030      	movs	r0, r6
 800a5a0:	0039      	movs	r1, r7
 800a5a2:	f7f5 ff63 	bl	800046c <__aeabi_dcmplt>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d100      	bne.n	800a5ac <_dtoa_r+0x650>
 800a5aa:	e710      	b.n	800a3ce <_dtoa_r+0x472>
 800a5ac:	0023      	movs	r3, r4
 800a5ae:	3c01      	subs	r4, #1
 800a5b0:	7822      	ldrb	r2, [r4, #0]
 800a5b2:	2a30      	cmp	r2, #48	@ 0x30
 800a5b4:	d0fa      	beq.n	800a5ac <_dtoa_r+0x650>
 800a5b6:	001c      	movs	r4, r3
 800a5b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a5ba:	9304      	str	r3, [sp, #16]
 800a5bc:	e042      	b.n	800a644 <_dtoa_r+0x6e8>
 800a5be:	2200      	movs	r2, #0
 800a5c0:	4b2b      	ldr	r3, [pc, #172]	@ (800a670 <_dtoa_r+0x714>)
 800a5c2:	f7f7 fa85 	bl	8001ad0 <__aeabi_dmul>
 800a5c6:	900a      	str	r0, [sp, #40]	@ 0x28
 800a5c8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a5ca:	e7b8      	b.n	800a53e <_dtoa_r+0x5e2>
 800a5cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5ce:	9d08      	ldr	r5, [sp, #32]
 800a5d0:	3b01      	subs	r3, #1
 800a5d2:	195b      	adds	r3, r3, r5
 800a5d4:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a5d6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a5d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5da:	9a06      	ldr	r2, [sp, #24]
 800a5dc:	9b07      	ldr	r3, [sp, #28]
 800a5de:	0030      	movs	r0, r6
 800a5e0:	0039      	movs	r1, r7
 800a5e2:	f7f6 fe3b 	bl	800125c <__aeabi_ddiv>
 800a5e6:	f7f8 f985 	bl	80028f4 <__aeabi_d2iz>
 800a5ea:	9009      	str	r0, [sp, #36]	@ 0x24
 800a5ec:	f7f8 f9be 	bl	800296c <__aeabi_i2d>
 800a5f0:	9a06      	ldr	r2, [sp, #24]
 800a5f2:	9b07      	ldr	r3, [sp, #28]
 800a5f4:	f7f7 fa6c 	bl	8001ad0 <__aeabi_dmul>
 800a5f8:	0002      	movs	r2, r0
 800a5fa:	000b      	movs	r3, r1
 800a5fc:	0030      	movs	r0, r6
 800a5fe:	0039      	movs	r1, r7
 800a600:	f7f7 fd4c 	bl	800209c <__aeabi_dsub>
 800a604:	002b      	movs	r3, r5
 800a606:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a608:	3501      	adds	r5, #1
 800a60a:	3230      	adds	r2, #48	@ 0x30
 800a60c:	701a      	strb	r2, [r3, #0]
 800a60e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a610:	002c      	movs	r4, r5
 800a612:	429a      	cmp	r2, r3
 800a614:	d14b      	bne.n	800a6ae <_dtoa_r+0x752>
 800a616:	0002      	movs	r2, r0
 800a618:	000b      	movs	r3, r1
 800a61a:	f7f6 fa59 	bl	8000ad0 <__aeabi_dadd>
 800a61e:	9a06      	ldr	r2, [sp, #24]
 800a620:	9b07      	ldr	r3, [sp, #28]
 800a622:	0006      	movs	r6, r0
 800a624:	000f      	movs	r7, r1
 800a626:	f7f5 ff35 	bl	8000494 <__aeabi_dcmpgt>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	d12a      	bne.n	800a684 <_dtoa_r+0x728>
 800a62e:	9a06      	ldr	r2, [sp, #24]
 800a630:	9b07      	ldr	r3, [sp, #28]
 800a632:	0030      	movs	r0, r6
 800a634:	0039      	movs	r1, r7
 800a636:	f7f5 ff13 	bl	8000460 <__aeabi_dcmpeq>
 800a63a:	2800      	cmp	r0, #0
 800a63c:	d002      	beq.n	800a644 <_dtoa_r+0x6e8>
 800a63e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a640:	07dd      	lsls	r5, r3, #31
 800a642:	d41f      	bmi.n	800a684 <_dtoa_r+0x728>
 800a644:	9905      	ldr	r1, [sp, #20]
 800a646:	9803      	ldr	r0, [sp, #12]
 800a648:	f000 fb06 	bl	800ac58 <_Bfree>
 800a64c:	2300      	movs	r3, #0
 800a64e:	7023      	strb	r3, [r4, #0]
 800a650:	9b04      	ldr	r3, [sp, #16]
 800a652:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a654:	3301      	adds	r3, #1
 800a656:	6013      	str	r3, [r2, #0]
 800a658:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d100      	bne.n	800a660 <_dtoa_r+0x704>
 800a65e:	e4c7      	b.n	8009ff0 <_dtoa_r+0x94>
 800a660:	601c      	str	r4, [r3, #0]
 800a662:	e4c5      	b.n	8009ff0 <_dtoa_r+0x94>
 800a664:	0800d620 	.word	0x0800d620
 800a668:	0800d5f8 	.word	0x0800d5f8
 800a66c:	3ff00000 	.word	0x3ff00000
 800a670:	40240000 	.word	0x40240000
 800a674:	401c0000 	.word	0x401c0000
 800a678:	fcc00000 	.word	0xfcc00000
 800a67c:	40140000 	.word	0x40140000
 800a680:	3fe00000 	.word	0x3fe00000
 800a684:	9b04      	ldr	r3, [sp, #16]
 800a686:	930c      	str	r3, [sp, #48]	@ 0x30
 800a688:	0023      	movs	r3, r4
 800a68a:	001c      	movs	r4, r3
 800a68c:	3b01      	subs	r3, #1
 800a68e:	781a      	ldrb	r2, [r3, #0]
 800a690:	2a39      	cmp	r2, #57	@ 0x39
 800a692:	d108      	bne.n	800a6a6 <_dtoa_r+0x74a>
 800a694:	9a08      	ldr	r2, [sp, #32]
 800a696:	429a      	cmp	r2, r3
 800a698:	d1f7      	bne.n	800a68a <_dtoa_r+0x72e>
 800a69a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a69c:	9908      	ldr	r1, [sp, #32]
 800a69e:	3201      	adds	r2, #1
 800a6a0:	920c      	str	r2, [sp, #48]	@ 0x30
 800a6a2:	2230      	movs	r2, #48	@ 0x30
 800a6a4:	700a      	strb	r2, [r1, #0]
 800a6a6:	781a      	ldrb	r2, [r3, #0]
 800a6a8:	3201      	adds	r2, #1
 800a6aa:	701a      	strb	r2, [r3, #0]
 800a6ac:	e784      	b.n	800a5b8 <_dtoa_r+0x65c>
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	4bc6      	ldr	r3, [pc, #792]	@ (800a9cc <_dtoa_r+0xa70>)
 800a6b2:	f7f7 fa0d 	bl	8001ad0 <__aeabi_dmul>
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	0006      	movs	r6, r0
 800a6bc:	000f      	movs	r7, r1
 800a6be:	f7f5 fecf 	bl	8000460 <__aeabi_dcmpeq>
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	d089      	beq.n	800a5da <_dtoa_r+0x67e>
 800a6c6:	e7bd      	b.n	800a644 <_dtoa_r+0x6e8>
 800a6c8:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800a6ca:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a6cc:	9c06      	ldr	r4, [sp, #24]
 800a6ce:	2f00      	cmp	r7, #0
 800a6d0:	d014      	beq.n	800a6fc <_dtoa_r+0x7a0>
 800a6d2:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a6d4:	2a01      	cmp	r2, #1
 800a6d6:	dd00      	ble.n	800a6da <_dtoa_r+0x77e>
 800a6d8:	e0e4      	b.n	800a8a4 <_dtoa_r+0x948>
 800a6da:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800a6dc:	2a00      	cmp	r2, #0
 800a6de:	d100      	bne.n	800a6e2 <_dtoa_r+0x786>
 800a6e0:	e0da      	b.n	800a898 <_dtoa_r+0x93c>
 800a6e2:	4abb      	ldr	r2, [pc, #748]	@ (800a9d0 <_dtoa_r+0xa74>)
 800a6e4:	189b      	adds	r3, r3, r2
 800a6e6:	9a06      	ldr	r2, [sp, #24]
 800a6e8:	2101      	movs	r1, #1
 800a6ea:	18d2      	adds	r2, r2, r3
 800a6ec:	9206      	str	r2, [sp, #24]
 800a6ee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a6f0:	9803      	ldr	r0, [sp, #12]
 800a6f2:	18d3      	adds	r3, r2, r3
 800a6f4:	930d      	str	r3, [sp, #52]	@ 0x34
 800a6f6:	f000 fbb3 	bl	800ae60 <__i2b>
 800a6fa:	0007      	movs	r7, r0
 800a6fc:	2c00      	cmp	r4, #0
 800a6fe:	d00e      	beq.n	800a71e <_dtoa_r+0x7c2>
 800a700:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a702:	2b00      	cmp	r3, #0
 800a704:	dd0b      	ble.n	800a71e <_dtoa_r+0x7c2>
 800a706:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a708:	0023      	movs	r3, r4
 800a70a:	4294      	cmp	r4, r2
 800a70c:	dd00      	ble.n	800a710 <_dtoa_r+0x7b4>
 800a70e:	0013      	movs	r3, r2
 800a710:	9a06      	ldr	r2, [sp, #24]
 800a712:	1ae4      	subs	r4, r4, r3
 800a714:	1ad2      	subs	r2, r2, r3
 800a716:	9206      	str	r2, [sp, #24]
 800a718:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a71a:	1ad3      	subs	r3, r2, r3
 800a71c:	930d      	str	r3, [sp, #52]	@ 0x34
 800a71e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a720:	2b00      	cmp	r3, #0
 800a722:	d021      	beq.n	800a768 <_dtoa_r+0x80c>
 800a724:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a726:	2b00      	cmp	r3, #0
 800a728:	d100      	bne.n	800a72c <_dtoa_r+0x7d0>
 800a72a:	e0d3      	b.n	800a8d4 <_dtoa_r+0x978>
 800a72c:	9e05      	ldr	r6, [sp, #20]
 800a72e:	2d00      	cmp	r5, #0
 800a730:	d014      	beq.n	800a75c <_dtoa_r+0x800>
 800a732:	0039      	movs	r1, r7
 800a734:	002a      	movs	r2, r5
 800a736:	9803      	ldr	r0, [sp, #12]
 800a738:	f000 fc54 	bl	800afe4 <__pow5mult>
 800a73c:	9a05      	ldr	r2, [sp, #20]
 800a73e:	0001      	movs	r1, r0
 800a740:	0007      	movs	r7, r0
 800a742:	9803      	ldr	r0, [sp, #12]
 800a744:	f000 fba4 	bl	800ae90 <__multiply>
 800a748:	0006      	movs	r6, r0
 800a74a:	9905      	ldr	r1, [sp, #20]
 800a74c:	9803      	ldr	r0, [sp, #12]
 800a74e:	f000 fa83 	bl	800ac58 <_Bfree>
 800a752:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a754:	9605      	str	r6, [sp, #20]
 800a756:	1b5b      	subs	r3, r3, r5
 800a758:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a75a:	d005      	beq.n	800a768 <_dtoa_r+0x80c>
 800a75c:	0031      	movs	r1, r6
 800a75e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a760:	9803      	ldr	r0, [sp, #12]
 800a762:	f000 fc3f 	bl	800afe4 <__pow5mult>
 800a766:	9005      	str	r0, [sp, #20]
 800a768:	2101      	movs	r1, #1
 800a76a:	9803      	ldr	r0, [sp, #12]
 800a76c:	f000 fb78 	bl	800ae60 <__i2b>
 800a770:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a772:	0006      	movs	r6, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d100      	bne.n	800a77a <_dtoa_r+0x81e>
 800a778:	e1bc      	b.n	800aaf4 <_dtoa_r+0xb98>
 800a77a:	001a      	movs	r2, r3
 800a77c:	0001      	movs	r1, r0
 800a77e:	9803      	ldr	r0, [sp, #12]
 800a780:	f000 fc30 	bl	800afe4 <__pow5mult>
 800a784:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a786:	0006      	movs	r6, r0
 800a788:	2500      	movs	r5, #0
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	dc16      	bgt.n	800a7bc <_dtoa_r+0x860>
 800a78e:	2500      	movs	r5, #0
 800a790:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a792:	42ab      	cmp	r3, r5
 800a794:	d10e      	bne.n	800a7b4 <_dtoa_r+0x858>
 800a796:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a798:	031b      	lsls	r3, r3, #12
 800a79a:	42ab      	cmp	r3, r5
 800a79c:	d10a      	bne.n	800a7b4 <_dtoa_r+0x858>
 800a79e:	4b8d      	ldr	r3, [pc, #564]	@ (800a9d4 <_dtoa_r+0xa78>)
 800a7a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a7a2:	4213      	tst	r3, r2
 800a7a4:	d006      	beq.n	800a7b4 <_dtoa_r+0x858>
 800a7a6:	9b06      	ldr	r3, [sp, #24]
 800a7a8:	3501      	adds	r5, #1
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	9306      	str	r3, [sp, #24]
 800a7ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	930d      	str	r3, [sp, #52]	@ 0x34
 800a7b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a7b6:	2001      	movs	r0, #1
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d008      	beq.n	800a7ce <_dtoa_r+0x872>
 800a7bc:	6933      	ldr	r3, [r6, #16]
 800a7be:	3303      	adds	r3, #3
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	18f3      	adds	r3, r6, r3
 800a7c4:	6858      	ldr	r0, [r3, #4]
 800a7c6:	f000 fafb 	bl	800adc0 <__hi0bits>
 800a7ca:	2320      	movs	r3, #32
 800a7cc:	1a18      	subs	r0, r3, r0
 800a7ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7d0:	1818      	adds	r0, r3, r0
 800a7d2:	0002      	movs	r2, r0
 800a7d4:	231f      	movs	r3, #31
 800a7d6:	401a      	ands	r2, r3
 800a7d8:	4218      	tst	r0, r3
 800a7da:	d100      	bne.n	800a7de <_dtoa_r+0x882>
 800a7dc:	e081      	b.n	800a8e2 <_dtoa_r+0x986>
 800a7de:	3301      	adds	r3, #1
 800a7e0:	1a9b      	subs	r3, r3, r2
 800a7e2:	2b04      	cmp	r3, #4
 800a7e4:	dd79      	ble.n	800a8da <_dtoa_r+0x97e>
 800a7e6:	231c      	movs	r3, #28
 800a7e8:	1a9b      	subs	r3, r3, r2
 800a7ea:	9a06      	ldr	r2, [sp, #24]
 800a7ec:	18e4      	adds	r4, r4, r3
 800a7ee:	18d2      	adds	r2, r2, r3
 800a7f0:	9206      	str	r2, [sp, #24]
 800a7f2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a7f4:	18d3      	adds	r3, r2, r3
 800a7f6:	930d      	str	r3, [sp, #52]	@ 0x34
 800a7f8:	9b06      	ldr	r3, [sp, #24]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	dd05      	ble.n	800a80a <_dtoa_r+0x8ae>
 800a7fe:	001a      	movs	r2, r3
 800a800:	9905      	ldr	r1, [sp, #20]
 800a802:	9803      	ldr	r0, [sp, #12]
 800a804:	f000 fc4a 	bl	800b09c <__lshift>
 800a808:	9005      	str	r0, [sp, #20]
 800a80a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	dd05      	ble.n	800a81c <_dtoa_r+0x8c0>
 800a810:	0031      	movs	r1, r6
 800a812:	001a      	movs	r2, r3
 800a814:	9803      	ldr	r0, [sp, #12]
 800a816:	f000 fc41 	bl	800b09c <__lshift>
 800a81a:	0006      	movs	r6, r0
 800a81c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d061      	beq.n	800a8e6 <_dtoa_r+0x98a>
 800a822:	0031      	movs	r1, r6
 800a824:	9805      	ldr	r0, [sp, #20]
 800a826:	f000 fca5 	bl	800b174 <__mcmp>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	da5b      	bge.n	800a8e6 <_dtoa_r+0x98a>
 800a82e:	9b04      	ldr	r3, [sp, #16]
 800a830:	220a      	movs	r2, #10
 800a832:	3b01      	subs	r3, #1
 800a834:	930c      	str	r3, [sp, #48]	@ 0x30
 800a836:	9905      	ldr	r1, [sp, #20]
 800a838:	2300      	movs	r3, #0
 800a83a:	9803      	ldr	r0, [sp, #12]
 800a83c:	f000 fa30 	bl	800aca0 <__multadd>
 800a840:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a842:	9005      	str	r0, [sp, #20]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d100      	bne.n	800a84a <_dtoa_r+0x8ee>
 800a848:	e15b      	b.n	800ab02 <_dtoa_r+0xba6>
 800a84a:	2300      	movs	r3, #0
 800a84c:	0039      	movs	r1, r7
 800a84e:	220a      	movs	r2, #10
 800a850:	9803      	ldr	r0, [sp, #12]
 800a852:	f000 fa25 	bl	800aca0 <__multadd>
 800a856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a858:	0007      	movs	r7, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	dc4d      	bgt.n	800a8fa <_dtoa_r+0x99e>
 800a85e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a860:	2b02      	cmp	r3, #2
 800a862:	dd46      	ble.n	800a8f2 <_dtoa_r+0x996>
 800a864:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a866:	2b00      	cmp	r3, #0
 800a868:	d000      	beq.n	800a86c <_dtoa_r+0x910>
 800a86a:	e5db      	b.n	800a424 <_dtoa_r+0x4c8>
 800a86c:	0031      	movs	r1, r6
 800a86e:	2205      	movs	r2, #5
 800a870:	9803      	ldr	r0, [sp, #12]
 800a872:	f000 fa15 	bl	800aca0 <__multadd>
 800a876:	0006      	movs	r6, r0
 800a878:	0001      	movs	r1, r0
 800a87a:	9805      	ldr	r0, [sp, #20]
 800a87c:	f000 fc7a 	bl	800b174 <__mcmp>
 800a880:	2800      	cmp	r0, #0
 800a882:	dc00      	bgt.n	800a886 <_dtoa_r+0x92a>
 800a884:	e5ce      	b.n	800a424 <_dtoa_r+0x4c8>
 800a886:	9b08      	ldr	r3, [sp, #32]
 800a888:	9a08      	ldr	r2, [sp, #32]
 800a88a:	1c5c      	adds	r4, r3, #1
 800a88c:	2331      	movs	r3, #49	@ 0x31
 800a88e:	7013      	strb	r3, [r2, #0]
 800a890:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a892:	3301      	adds	r3, #1
 800a894:	930c      	str	r3, [sp, #48]	@ 0x30
 800a896:	e5c9      	b.n	800a42c <_dtoa_r+0x4d0>
 800a898:	2336      	movs	r3, #54	@ 0x36
 800a89a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a89c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800a89e:	1a9b      	subs	r3, r3, r2
 800a8a0:	9c06      	ldr	r4, [sp, #24]
 800a8a2:	e720      	b.n	800a6e6 <_dtoa_r+0x78a>
 800a8a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8a6:	1e5d      	subs	r5, r3, #1
 800a8a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8aa:	42ab      	cmp	r3, r5
 800a8ac:	db08      	blt.n	800a8c0 <_dtoa_r+0x964>
 800a8ae:	1b5d      	subs	r5, r3, r5
 800a8b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	daf4      	bge.n	800a8a0 <_dtoa_r+0x944>
 800a8b6:	9b06      	ldr	r3, [sp, #24]
 800a8b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8ba:	1a9c      	subs	r4, r3, r2
 800a8bc:	2300      	movs	r3, #0
 800a8be:	e712      	b.n	800a6e6 <_dtoa_r+0x78a>
 800a8c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8c2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a8c4:	1aeb      	subs	r3, r5, r3
 800a8c6:	18d3      	adds	r3, r2, r3
 800a8c8:	9314      	str	r3, [sp, #80]	@ 0x50
 800a8ca:	950f      	str	r5, [sp, #60]	@ 0x3c
 800a8cc:	9c06      	ldr	r4, [sp, #24]
 800a8ce:	2500      	movs	r5, #0
 800a8d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8d2:	e708      	b.n	800a6e6 <_dtoa_r+0x78a>
 800a8d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a8d6:	9905      	ldr	r1, [sp, #20]
 800a8d8:	e742      	b.n	800a760 <_dtoa_r+0x804>
 800a8da:	2b04      	cmp	r3, #4
 800a8dc:	d08c      	beq.n	800a7f8 <_dtoa_r+0x89c>
 800a8de:	331c      	adds	r3, #28
 800a8e0:	e783      	b.n	800a7ea <_dtoa_r+0x88e>
 800a8e2:	0013      	movs	r3, r2
 800a8e4:	e7fb      	b.n	800a8de <_dtoa_r+0x982>
 800a8e6:	9b04      	ldr	r3, [sp, #16]
 800a8e8:	930c      	str	r3, [sp, #48]	@ 0x30
 800a8ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ec:	930e      	str	r3, [sp, #56]	@ 0x38
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	ddb5      	ble.n	800a85e <_dtoa_r+0x902>
 800a8f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d100      	bne.n	800a8fa <_dtoa_r+0x99e>
 800a8f8:	e107      	b.n	800ab0a <_dtoa_r+0xbae>
 800a8fa:	2c00      	cmp	r4, #0
 800a8fc:	dd05      	ble.n	800a90a <_dtoa_r+0x9ae>
 800a8fe:	0039      	movs	r1, r7
 800a900:	0022      	movs	r2, r4
 800a902:	9803      	ldr	r0, [sp, #12]
 800a904:	f000 fbca 	bl	800b09c <__lshift>
 800a908:	0007      	movs	r7, r0
 800a90a:	9704      	str	r7, [sp, #16]
 800a90c:	2d00      	cmp	r5, #0
 800a90e:	d020      	beq.n	800a952 <_dtoa_r+0x9f6>
 800a910:	6879      	ldr	r1, [r7, #4]
 800a912:	9803      	ldr	r0, [sp, #12]
 800a914:	f000 f95c 	bl	800abd0 <_Balloc>
 800a918:	1e04      	subs	r4, r0, #0
 800a91a:	d10c      	bne.n	800a936 <_dtoa_r+0x9da>
 800a91c:	0022      	movs	r2, r4
 800a91e:	4b2e      	ldr	r3, [pc, #184]	@ (800a9d8 <_dtoa_r+0xa7c>)
 800a920:	482e      	ldr	r0, [pc, #184]	@ (800a9dc <_dtoa_r+0xa80>)
 800a922:	492f      	ldr	r1, [pc, #188]	@ (800a9e0 <_dtoa_r+0xa84>)
 800a924:	f7ff fb2f 	bl	8009f86 <_dtoa_r+0x2a>
 800a928:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800a92a:	0037      	movs	r7, r6
 800a92c:	e7ab      	b.n	800a886 <_dtoa_r+0x92a>
 800a92e:	9b04      	ldr	r3, [sp, #16]
 800a930:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800a932:	930c      	str	r3, [sp, #48]	@ 0x30
 800a934:	e7f9      	b.n	800a92a <_dtoa_r+0x9ce>
 800a936:	0039      	movs	r1, r7
 800a938:	693a      	ldr	r2, [r7, #16]
 800a93a:	310c      	adds	r1, #12
 800a93c:	3202      	adds	r2, #2
 800a93e:	0092      	lsls	r2, r2, #2
 800a940:	300c      	adds	r0, #12
 800a942:	f7ff fa77 	bl	8009e34 <memcpy>
 800a946:	2201      	movs	r2, #1
 800a948:	0021      	movs	r1, r4
 800a94a:	9803      	ldr	r0, [sp, #12]
 800a94c:	f000 fba6 	bl	800b09c <__lshift>
 800a950:	9004      	str	r0, [sp, #16]
 800a952:	9b08      	ldr	r3, [sp, #32]
 800a954:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a956:	9306      	str	r3, [sp, #24]
 800a958:	3b01      	subs	r3, #1
 800a95a:	189b      	adds	r3, r3, r2
 800a95c:	2201      	movs	r2, #1
 800a95e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a962:	4013      	ands	r3, r2
 800a964:	930e      	str	r3, [sp, #56]	@ 0x38
 800a966:	0031      	movs	r1, r6
 800a968:	9805      	ldr	r0, [sp, #20]
 800a96a:	f7ff fa71 	bl	8009e50 <quorem>
 800a96e:	0039      	movs	r1, r7
 800a970:	0005      	movs	r5, r0
 800a972:	900a      	str	r0, [sp, #40]	@ 0x28
 800a974:	9805      	ldr	r0, [sp, #20]
 800a976:	f000 fbfd 	bl	800b174 <__mcmp>
 800a97a:	9a04      	ldr	r2, [sp, #16]
 800a97c:	900d      	str	r0, [sp, #52]	@ 0x34
 800a97e:	0031      	movs	r1, r6
 800a980:	9803      	ldr	r0, [sp, #12]
 800a982:	f000 fc13 	bl	800b1ac <__mdiff>
 800a986:	2201      	movs	r2, #1
 800a988:	68c3      	ldr	r3, [r0, #12]
 800a98a:	0004      	movs	r4, r0
 800a98c:	3530      	adds	r5, #48	@ 0x30
 800a98e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a990:	2b00      	cmp	r3, #0
 800a992:	d104      	bne.n	800a99e <_dtoa_r+0xa42>
 800a994:	0001      	movs	r1, r0
 800a996:	9805      	ldr	r0, [sp, #20]
 800a998:	f000 fbec 	bl	800b174 <__mcmp>
 800a99c:	9009      	str	r0, [sp, #36]	@ 0x24
 800a99e:	0021      	movs	r1, r4
 800a9a0:	9803      	ldr	r0, [sp, #12]
 800a9a2:	f000 f959 	bl	800ac58 <_Bfree>
 800a9a6:	9b06      	ldr	r3, [sp, #24]
 800a9a8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a9aa:	1c5c      	adds	r4, r3, #1
 800a9ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	d116      	bne.n	800a9e4 <_dtoa_r+0xa88>
 800a9b6:	2d39      	cmp	r5, #57	@ 0x39
 800a9b8:	d02f      	beq.n	800aa1a <_dtoa_r+0xabe>
 800a9ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	dd01      	ble.n	800a9c4 <_dtoa_r+0xa68>
 800a9c0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800a9c2:	3531      	adds	r5, #49	@ 0x31
 800a9c4:	9b06      	ldr	r3, [sp, #24]
 800a9c6:	701d      	strb	r5, [r3, #0]
 800a9c8:	e532      	b.n	800a430 <_dtoa_r+0x4d4>
 800a9ca:	46c0      	nop			@ (mov r8, r8)
 800a9cc:	40240000 	.word	0x40240000
 800a9d0:	00000433 	.word	0x00000433
 800a9d4:	7ff00000 	.word	0x7ff00000
 800a9d8:	0800d4ca 	.word	0x0800d4ca
 800a9dc:	0800d472 	.word	0x0800d472
 800a9e0:	000002ef 	.word	0x000002ef
 800a9e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	db04      	blt.n	800a9f4 <_dtoa_r+0xa98>
 800a9ea:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	d11e      	bne.n	800aa32 <_dtoa_r+0xad6>
 800a9f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	dde4      	ble.n	800a9c4 <_dtoa_r+0xa68>
 800a9fa:	9905      	ldr	r1, [sp, #20]
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	9803      	ldr	r0, [sp, #12]
 800aa00:	f000 fb4c 	bl	800b09c <__lshift>
 800aa04:	0031      	movs	r1, r6
 800aa06:	9005      	str	r0, [sp, #20]
 800aa08:	f000 fbb4 	bl	800b174 <__mcmp>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	dc02      	bgt.n	800aa16 <_dtoa_r+0xaba>
 800aa10:	d1d8      	bne.n	800a9c4 <_dtoa_r+0xa68>
 800aa12:	07eb      	lsls	r3, r5, #31
 800aa14:	d5d6      	bpl.n	800a9c4 <_dtoa_r+0xa68>
 800aa16:	2d39      	cmp	r5, #57	@ 0x39
 800aa18:	d1d2      	bne.n	800a9c0 <_dtoa_r+0xa64>
 800aa1a:	2339      	movs	r3, #57	@ 0x39
 800aa1c:	9a06      	ldr	r2, [sp, #24]
 800aa1e:	7013      	strb	r3, [r2, #0]
 800aa20:	0023      	movs	r3, r4
 800aa22:	001c      	movs	r4, r3
 800aa24:	3b01      	subs	r3, #1
 800aa26:	781a      	ldrb	r2, [r3, #0]
 800aa28:	2a39      	cmp	r2, #57	@ 0x39
 800aa2a:	d050      	beq.n	800aace <_dtoa_r+0xb72>
 800aa2c:	3201      	adds	r2, #1
 800aa2e:	701a      	strb	r2, [r3, #0]
 800aa30:	e4fe      	b.n	800a430 <_dtoa_r+0x4d4>
 800aa32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	dd03      	ble.n	800aa40 <_dtoa_r+0xae4>
 800aa38:	2d39      	cmp	r5, #57	@ 0x39
 800aa3a:	d0ee      	beq.n	800aa1a <_dtoa_r+0xabe>
 800aa3c:	3501      	adds	r5, #1
 800aa3e:	e7c1      	b.n	800a9c4 <_dtoa_r+0xa68>
 800aa40:	9b06      	ldr	r3, [sp, #24]
 800aa42:	9a06      	ldr	r2, [sp, #24]
 800aa44:	701d      	strb	r5, [r3, #0]
 800aa46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d02b      	beq.n	800aaa4 <_dtoa_r+0xb48>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	220a      	movs	r2, #10
 800aa50:	9905      	ldr	r1, [sp, #20]
 800aa52:	9803      	ldr	r0, [sp, #12]
 800aa54:	f000 f924 	bl	800aca0 <__multadd>
 800aa58:	9b04      	ldr	r3, [sp, #16]
 800aa5a:	9005      	str	r0, [sp, #20]
 800aa5c:	429f      	cmp	r7, r3
 800aa5e:	d109      	bne.n	800aa74 <_dtoa_r+0xb18>
 800aa60:	0039      	movs	r1, r7
 800aa62:	2300      	movs	r3, #0
 800aa64:	220a      	movs	r2, #10
 800aa66:	9803      	ldr	r0, [sp, #12]
 800aa68:	f000 f91a 	bl	800aca0 <__multadd>
 800aa6c:	0007      	movs	r7, r0
 800aa6e:	9004      	str	r0, [sp, #16]
 800aa70:	9406      	str	r4, [sp, #24]
 800aa72:	e778      	b.n	800a966 <_dtoa_r+0xa0a>
 800aa74:	0039      	movs	r1, r7
 800aa76:	2300      	movs	r3, #0
 800aa78:	220a      	movs	r2, #10
 800aa7a:	9803      	ldr	r0, [sp, #12]
 800aa7c:	f000 f910 	bl	800aca0 <__multadd>
 800aa80:	2300      	movs	r3, #0
 800aa82:	0007      	movs	r7, r0
 800aa84:	220a      	movs	r2, #10
 800aa86:	9904      	ldr	r1, [sp, #16]
 800aa88:	9803      	ldr	r0, [sp, #12]
 800aa8a:	f000 f909 	bl	800aca0 <__multadd>
 800aa8e:	9004      	str	r0, [sp, #16]
 800aa90:	e7ee      	b.n	800aa70 <_dtoa_r+0xb14>
 800aa92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa94:	2401      	movs	r4, #1
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	dd00      	ble.n	800aa9c <_dtoa_r+0xb40>
 800aa9a:	001c      	movs	r4, r3
 800aa9c:	9704      	str	r7, [sp, #16]
 800aa9e:	2700      	movs	r7, #0
 800aaa0:	9b08      	ldr	r3, [sp, #32]
 800aaa2:	191c      	adds	r4, r3, r4
 800aaa4:	9905      	ldr	r1, [sp, #20]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	9803      	ldr	r0, [sp, #12]
 800aaaa:	f000 faf7 	bl	800b09c <__lshift>
 800aaae:	0031      	movs	r1, r6
 800aab0:	9005      	str	r0, [sp, #20]
 800aab2:	f000 fb5f 	bl	800b174 <__mcmp>
 800aab6:	2800      	cmp	r0, #0
 800aab8:	dcb2      	bgt.n	800aa20 <_dtoa_r+0xac4>
 800aaba:	d101      	bne.n	800aac0 <_dtoa_r+0xb64>
 800aabc:	07ed      	lsls	r5, r5, #31
 800aabe:	d4af      	bmi.n	800aa20 <_dtoa_r+0xac4>
 800aac0:	0023      	movs	r3, r4
 800aac2:	001c      	movs	r4, r3
 800aac4:	3b01      	subs	r3, #1
 800aac6:	781a      	ldrb	r2, [r3, #0]
 800aac8:	2a30      	cmp	r2, #48	@ 0x30
 800aaca:	d0fa      	beq.n	800aac2 <_dtoa_r+0xb66>
 800aacc:	e4b0      	b.n	800a430 <_dtoa_r+0x4d4>
 800aace:	9a08      	ldr	r2, [sp, #32]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d1a6      	bne.n	800aa22 <_dtoa_r+0xac6>
 800aad4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aad6:	3301      	adds	r3, #1
 800aad8:	930c      	str	r3, [sp, #48]	@ 0x30
 800aada:	2331      	movs	r3, #49	@ 0x31
 800aadc:	7013      	strb	r3, [r2, #0]
 800aade:	e4a7      	b.n	800a430 <_dtoa_r+0x4d4>
 800aae0:	4b14      	ldr	r3, [pc, #80]	@ (800ab34 <_dtoa_r+0xbd8>)
 800aae2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800aae4:	9308      	str	r3, [sp, #32]
 800aae6:	4b14      	ldr	r3, [pc, #80]	@ (800ab38 <_dtoa_r+0xbdc>)
 800aae8:	2a00      	cmp	r2, #0
 800aaea:	d001      	beq.n	800aaf0 <_dtoa_r+0xb94>
 800aaec:	f7ff fa7e 	bl	8009fec <_dtoa_r+0x90>
 800aaf0:	f7ff fa7e 	bl	8009ff0 <_dtoa_r+0x94>
 800aaf4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	dc00      	bgt.n	800aafc <_dtoa_r+0xba0>
 800aafa:	e648      	b.n	800a78e <_dtoa_r+0x832>
 800aafc:	2001      	movs	r0, #1
 800aafe:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800ab00:	e665      	b.n	800a7ce <_dtoa_r+0x872>
 800ab02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	dc00      	bgt.n	800ab0a <_dtoa_r+0xbae>
 800ab08:	e6a9      	b.n	800a85e <_dtoa_r+0x902>
 800ab0a:	2400      	movs	r4, #0
 800ab0c:	0031      	movs	r1, r6
 800ab0e:	9805      	ldr	r0, [sp, #20]
 800ab10:	f7ff f99e 	bl	8009e50 <quorem>
 800ab14:	9b08      	ldr	r3, [sp, #32]
 800ab16:	3030      	adds	r0, #48	@ 0x30
 800ab18:	5518      	strb	r0, [r3, r4]
 800ab1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab1c:	3401      	adds	r4, #1
 800ab1e:	0005      	movs	r5, r0
 800ab20:	42a3      	cmp	r3, r4
 800ab22:	ddb6      	ble.n	800aa92 <_dtoa_r+0xb36>
 800ab24:	2300      	movs	r3, #0
 800ab26:	220a      	movs	r2, #10
 800ab28:	9905      	ldr	r1, [sp, #20]
 800ab2a:	9803      	ldr	r0, [sp, #12]
 800ab2c:	f000 f8b8 	bl	800aca0 <__multadd>
 800ab30:	9005      	str	r0, [sp, #20]
 800ab32:	e7eb      	b.n	800ab0c <_dtoa_r+0xbb0>
 800ab34:	0800d44e 	.word	0x0800d44e
 800ab38:	0800d456 	.word	0x0800d456

0800ab3c <_free_r>:
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	0005      	movs	r5, r0
 800ab40:	1e0c      	subs	r4, r1, #0
 800ab42:	d010      	beq.n	800ab66 <_free_r+0x2a>
 800ab44:	3c04      	subs	r4, #4
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	da00      	bge.n	800ab4e <_free_r+0x12>
 800ab4c:	18e4      	adds	r4, r4, r3
 800ab4e:	0028      	movs	r0, r5
 800ab50:	f7fd ff18 	bl	8008984 <__malloc_lock>
 800ab54:	4a1d      	ldr	r2, [pc, #116]	@ (800abcc <_free_r+0x90>)
 800ab56:	6813      	ldr	r3, [r2, #0]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d105      	bne.n	800ab68 <_free_r+0x2c>
 800ab5c:	6063      	str	r3, [r4, #4]
 800ab5e:	6014      	str	r4, [r2, #0]
 800ab60:	0028      	movs	r0, r5
 800ab62:	f7fd ff17 	bl	8008994 <__malloc_unlock>
 800ab66:	bd70      	pop	{r4, r5, r6, pc}
 800ab68:	42a3      	cmp	r3, r4
 800ab6a:	d908      	bls.n	800ab7e <_free_r+0x42>
 800ab6c:	6820      	ldr	r0, [r4, #0]
 800ab6e:	1821      	adds	r1, r4, r0
 800ab70:	428b      	cmp	r3, r1
 800ab72:	d1f3      	bne.n	800ab5c <_free_r+0x20>
 800ab74:	6819      	ldr	r1, [r3, #0]
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	1809      	adds	r1, r1, r0
 800ab7a:	6021      	str	r1, [r4, #0]
 800ab7c:	e7ee      	b.n	800ab5c <_free_r+0x20>
 800ab7e:	001a      	movs	r2, r3
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d001      	beq.n	800ab8a <_free_r+0x4e>
 800ab86:	42a3      	cmp	r3, r4
 800ab88:	d9f9      	bls.n	800ab7e <_free_r+0x42>
 800ab8a:	6811      	ldr	r1, [r2, #0]
 800ab8c:	1850      	adds	r0, r2, r1
 800ab8e:	42a0      	cmp	r0, r4
 800ab90:	d10b      	bne.n	800abaa <_free_r+0x6e>
 800ab92:	6820      	ldr	r0, [r4, #0]
 800ab94:	1809      	adds	r1, r1, r0
 800ab96:	1850      	adds	r0, r2, r1
 800ab98:	6011      	str	r1, [r2, #0]
 800ab9a:	4283      	cmp	r3, r0
 800ab9c:	d1e0      	bne.n	800ab60 <_free_r+0x24>
 800ab9e:	6818      	ldr	r0, [r3, #0]
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	1841      	adds	r1, r0, r1
 800aba4:	6011      	str	r1, [r2, #0]
 800aba6:	6053      	str	r3, [r2, #4]
 800aba8:	e7da      	b.n	800ab60 <_free_r+0x24>
 800abaa:	42a0      	cmp	r0, r4
 800abac:	d902      	bls.n	800abb4 <_free_r+0x78>
 800abae:	230c      	movs	r3, #12
 800abb0:	602b      	str	r3, [r5, #0]
 800abb2:	e7d5      	b.n	800ab60 <_free_r+0x24>
 800abb4:	6820      	ldr	r0, [r4, #0]
 800abb6:	1821      	adds	r1, r4, r0
 800abb8:	428b      	cmp	r3, r1
 800abba:	d103      	bne.n	800abc4 <_free_r+0x88>
 800abbc:	6819      	ldr	r1, [r3, #0]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	1809      	adds	r1, r1, r0
 800abc2:	6021      	str	r1, [r4, #0]
 800abc4:	6063      	str	r3, [r4, #4]
 800abc6:	6054      	str	r4, [r2, #4]
 800abc8:	e7ca      	b.n	800ab60 <_free_r+0x24>
 800abca:	46c0      	nop			@ (mov r8, r8)
 800abcc:	20001300 	.word	0x20001300

0800abd0 <_Balloc>:
 800abd0:	b570      	push	{r4, r5, r6, lr}
 800abd2:	69c5      	ldr	r5, [r0, #28]
 800abd4:	0006      	movs	r6, r0
 800abd6:	000c      	movs	r4, r1
 800abd8:	2d00      	cmp	r5, #0
 800abda:	d10e      	bne.n	800abfa <_Balloc+0x2a>
 800abdc:	2010      	movs	r0, #16
 800abde:	f7fd fe1b 	bl	8008818 <malloc>
 800abe2:	1e02      	subs	r2, r0, #0
 800abe4:	61f0      	str	r0, [r6, #28]
 800abe6:	d104      	bne.n	800abf2 <_Balloc+0x22>
 800abe8:	216b      	movs	r1, #107	@ 0x6b
 800abea:	4b19      	ldr	r3, [pc, #100]	@ (800ac50 <_Balloc+0x80>)
 800abec:	4819      	ldr	r0, [pc, #100]	@ (800ac54 <_Balloc+0x84>)
 800abee:	f001 fd9f 	bl	800c730 <__assert_func>
 800abf2:	6045      	str	r5, [r0, #4]
 800abf4:	6085      	str	r5, [r0, #8]
 800abf6:	6005      	str	r5, [r0, #0]
 800abf8:	60c5      	str	r5, [r0, #12]
 800abfa:	69f5      	ldr	r5, [r6, #28]
 800abfc:	68eb      	ldr	r3, [r5, #12]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d013      	beq.n	800ac2a <_Balloc+0x5a>
 800ac02:	69f3      	ldr	r3, [r6, #28]
 800ac04:	00a2      	lsls	r2, r4, #2
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	189b      	adds	r3, r3, r2
 800ac0a:	6818      	ldr	r0, [r3, #0]
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	d118      	bne.n	800ac42 <_Balloc+0x72>
 800ac10:	2101      	movs	r1, #1
 800ac12:	000d      	movs	r5, r1
 800ac14:	40a5      	lsls	r5, r4
 800ac16:	1d6a      	adds	r2, r5, #5
 800ac18:	0030      	movs	r0, r6
 800ac1a:	0092      	lsls	r2, r2, #2
 800ac1c:	f001 fda6 	bl	800c76c <_calloc_r>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d00c      	beq.n	800ac3e <_Balloc+0x6e>
 800ac24:	6044      	str	r4, [r0, #4]
 800ac26:	6085      	str	r5, [r0, #8]
 800ac28:	e00d      	b.n	800ac46 <_Balloc+0x76>
 800ac2a:	2221      	movs	r2, #33	@ 0x21
 800ac2c:	2104      	movs	r1, #4
 800ac2e:	0030      	movs	r0, r6
 800ac30:	f001 fd9c 	bl	800c76c <_calloc_r>
 800ac34:	69f3      	ldr	r3, [r6, #28]
 800ac36:	60e8      	str	r0, [r5, #12]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1e1      	bne.n	800ac02 <_Balloc+0x32>
 800ac3e:	2000      	movs	r0, #0
 800ac40:	bd70      	pop	{r4, r5, r6, pc}
 800ac42:	6802      	ldr	r2, [r0, #0]
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	2300      	movs	r3, #0
 800ac48:	6103      	str	r3, [r0, #16]
 800ac4a:	60c3      	str	r3, [r0, #12]
 800ac4c:	e7f8      	b.n	800ac40 <_Balloc+0x70>
 800ac4e:	46c0      	nop			@ (mov r8, r8)
 800ac50:	0800d45b 	.word	0x0800d45b
 800ac54:	0800d4db 	.word	0x0800d4db

0800ac58 <_Bfree>:
 800ac58:	b570      	push	{r4, r5, r6, lr}
 800ac5a:	69c6      	ldr	r6, [r0, #28]
 800ac5c:	0005      	movs	r5, r0
 800ac5e:	000c      	movs	r4, r1
 800ac60:	2e00      	cmp	r6, #0
 800ac62:	d10e      	bne.n	800ac82 <_Bfree+0x2a>
 800ac64:	2010      	movs	r0, #16
 800ac66:	f7fd fdd7 	bl	8008818 <malloc>
 800ac6a:	1e02      	subs	r2, r0, #0
 800ac6c:	61e8      	str	r0, [r5, #28]
 800ac6e:	d104      	bne.n	800ac7a <_Bfree+0x22>
 800ac70:	218f      	movs	r1, #143	@ 0x8f
 800ac72:	4b09      	ldr	r3, [pc, #36]	@ (800ac98 <_Bfree+0x40>)
 800ac74:	4809      	ldr	r0, [pc, #36]	@ (800ac9c <_Bfree+0x44>)
 800ac76:	f001 fd5b 	bl	800c730 <__assert_func>
 800ac7a:	6046      	str	r6, [r0, #4]
 800ac7c:	6086      	str	r6, [r0, #8]
 800ac7e:	6006      	str	r6, [r0, #0]
 800ac80:	60c6      	str	r6, [r0, #12]
 800ac82:	2c00      	cmp	r4, #0
 800ac84:	d007      	beq.n	800ac96 <_Bfree+0x3e>
 800ac86:	69eb      	ldr	r3, [r5, #28]
 800ac88:	6862      	ldr	r2, [r4, #4]
 800ac8a:	68db      	ldr	r3, [r3, #12]
 800ac8c:	0092      	lsls	r2, r2, #2
 800ac8e:	189b      	adds	r3, r3, r2
 800ac90:	681a      	ldr	r2, [r3, #0]
 800ac92:	6022      	str	r2, [r4, #0]
 800ac94:	601c      	str	r4, [r3, #0]
 800ac96:	bd70      	pop	{r4, r5, r6, pc}
 800ac98:	0800d45b 	.word	0x0800d45b
 800ac9c:	0800d4db 	.word	0x0800d4db

0800aca0 <__multadd>:
 800aca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aca2:	000f      	movs	r7, r1
 800aca4:	9001      	str	r0, [sp, #4]
 800aca6:	000c      	movs	r4, r1
 800aca8:	001e      	movs	r6, r3
 800acaa:	2000      	movs	r0, #0
 800acac:	690d      	ldr	r5, [r1, #16]
 800acae:	3714      	adds	r7, #20
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	3001      	adds	r0, #1
 800acb4:	b299      	uxth	r1, r3
 800acb6:	4351      	muls	r1, r2
 800acb8:	0c1b      	lsrs	r3, r3, #16
 800acba:	4353      	muls	r3, r2
 800acbc:	1989      	adds	r1, r1, r6
 800acbe:	0c0e      	lsrs	r6, r1, #16
 800acc0:	199b      	adds	r3, r3, r6
 800acc2:	0c1e      	lsrs	r6, r3, #16
 800acc4:	b289      	uxth	r1, r1
 800acc6:	041b      	lsls	r3, r3, #16
 800acc8:	185b      	adds	r3, r3, r1
 800acca:	c708      	stmia	r7!, {r3}
 800accc:	4285      	cmp	r5, r0
 800acce:	dcef      	bgt.n	800acb0 <__multadd+0x10>
 800acd0:	2e00      	cmp	r6, #0
 800acd2:	d022      	beq.n	800ad1a <__multadd+0x7a>
 800acd4:	68a3      	ldr	r3, [r4, #8]
 800acd6:	42ab      	cmp	r3, r5
 800acd8:	dc19      	bgt.n	800ad0e <__multadd+0x6e>
 800acda:	6861      	ldr	r1, [r4, #4]
 800acdc:	9801      	ldr	r0, [sp, #4]
 800acde:	3101      	adds	r1, #1
 800ace0:	f7ff ff76 	bl	800abd0 <_Balloc>
 800ace4:	1e07      	subs	r7, r0, #0
 800ace6:	d105      	bne.n	800acf4 <__multadd+0x54>
 800ace8:	003a      	movs	r2, r7
 800acea:	21ba      	movs	r1, #186	@ 0xba
 800acec:	4b0c      	ldr	r3, [pc, #48]	@ (800ad20 <__multadd+0x80>)
 800acee:	480d      	ldr	r0, [pc, #52]	@ (800ad24 <__multadd+0x84>)
 800acf0:	f001 fd1e 	bl	800c730 <__assert_func>
 800acf4:	0021      	movs	r1, r4
 800acf6:	6922      	ldr	r2, [r4, #16]
 800acf8:	310c      	adds	r1, #12
 800acfa:	3202      	adds	r2, #2
 800acfc:	0092      	lsls	r2, r2, #2
 800acfe:	300c      	adds	r0, #12
 800ad00:	f7ff f898 	bl	8009e34 <memcpy>
 800ad04:	0021      	movs	r1, r4
 800ad06:	9801      	ldr	r0, [sp, #4]
 800ad08:	f7ff ffa6 	bl	800ac58 <_Bfree>
 800ad0c:	003c      	movs	r4, r7
 800ad0e:	1d2b      	adds	r3, r5, #4
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	18e3      	adds	r3, r4, r3
 800ad14:	3501      	adds	r5, #1
 800ad16:	605e      	str	r6, [r3, #4]
 800ad18:	6125      	str	r5, [r4, #16]
 800ad1a:	0020      	movs	r0, r4
 800ad1c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad1e:	46c0      	nop			@ (mov r8, r8)
 800ad20:	0800d4ca 	.word	0x0800d4ca
 800ad24:	0800d4db 	.word	0x0800d4db

0800ad28 <__s2b>:
 800ad28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad2a:	0007      	movs	r7, r0
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	000c      	movs	r4, r1
 800ad30:	3008      	adds	r0, #8
 800ad32:	2109      	movs	r1, #9
 800ad34:	9301      	str	r3, [sp, #4]
 800ad36:	0015      	movs	r5, r2
 800ad38:	f7f5 fa96 	bl	8000268 <__divsi3>
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	2100      	movs	r1, #0
 800ad40:	4283      	cmp	r3, r0
 800ad42:	db0a      	blt.n	800ad5a <__s2b+0x32>
 800ad44:	0038      	movs	r0, r7
 800ad46:	f7ff ff43 	bl	800abd0 <_Balloc>
 800ad4a:	1e01      	subs	r1, r0, #0
 800ad4c:	d108      	bne.n	800ad60 <__s2b+0x38>
 800ad4e:	000a      	movs	r2, r1
 800ad50:	4b19      	ldr	r3, [pc, #100]	@ (800adb8 <__s2b+0x90>)
 800ad52:	481a      	ldr	r0, [pc, #104]	@ (800adbc <__s2b+0x94>)
 800ad54:	31d3      	adds	r1, #211	@ 0xd3
 800ad56:	f001 fceb 	bl	800c730 <__assert_func>
 800ad5a:	005b      	lsls	r3, r3, #1
 800ad5c:	3101      	adds	r1, #1
 800ad5e:	e7ef      	b.n	800ad40 <__s2b+0x18>
 800ad60:	9b08      	ldr	r3, [sp, #32]
 800ad62:	6143      	str	r3, [r0, #20]
 800ad64:	2301      	movs	r3, #1
 800ad66:	6103      	str	r3, [r0, #16]
 800ad68:	2d09      	cmp	r5, #9
 800ad6a:	dd18      	ble.n	800ad9e <__s2b+0x76>
 800ad6c:	0023      	movs	r3, r4
 800ad6e:	3309      	adds	r3, #9
 800ad70:	001e      	movs	r6, r3
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	1964      	adds	r4, r4, r5
 800ad76:	7833      	ldrb	r3, [r6, #0]
 800ad78:	220a      	movs	r2, #10
 800ad7a:	0038      	movs	r0, r7
 800ad7c:	3b30      	subs	r3, #48	@ 0x30
 800ad7e:	f7ff ff8f 	bl	800aca0 <__multadd>
 800ad82:	3601      	adds	r6, #1
 800ad84:	0001      	movs	r1, r0
 800ad86:	42a6      	cmp	r6, r4
 800ad88:	d1f5      	bne.n	800ad76 <__s2b+0x4e>
 800ad8a:	002c      	movs	r4, r5
 800ad8c:	9b00      	ldr	r3, [sp, #0]
 800ad8e:	3c08      	subs	r4, #8
 800ad90:	191c      	adds	r4, r3, r4
 800ad92:	002e      	movs	r6, r5
 800ad94:	9b01      	ldr	r3, [sp, #4]
 800ad96:	429e      	cmp	r6, r3
 800ad98:	db04      	blt.n	800ada4 <__s2b+0x7c>
 800ad9a:	0008      	movs	r0, r1
 800ad9c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad9e:	2509      	movs	r5, #9
 800ada0:	340a      	adds	r4, #10
 800ada2:	e7f6      	b.n	800ad92 <__s2b+0x6a>
 800ada4:	1b63      	subs	r3, r4, r5
 800ada6:	5d9b      	ldrb	r3, [r3, r6]
 800ada8:	220a      	movs	r2, #10
 800adaa:	0038      	movs	r0, r7
 800adac:	3b30      	subs	r3, #48	@ 0x30
 800adae:	f7ff ff77 	bl	800aca0 <__multadd>
 800adb2:	3601      	adds	r6, #1
 800adb4:	0001      	movs	r1, r0
 800adb6:	e7ed      	b.n	800ad94 <__s2b+0x6c>
 800adb8:	0800d4ca 	.word	0x0800d4ca
 800adbc:	0800d4db 	.word	0x0800d4db

0800adc0 <__hi0bits>:
 800adc0:	2280      	movs	r2, #128	@ 0x80
 800adc2:	0003      	movs	r3, r0
 800adc4:	0252      	lsls	r2, r2, #9
 800adc6:	2000      	movs	r0, #0
 800adc8:	4293      	cmp	r3, r2
 800adca:	d201      	bcs.n	800add0 <__hi0bits+0x10>
 800adcc:	041b      	lsls	r3, r3, #16
 800adce:	3010      	adds	r0, #16
 800add0:	2280      	movs	r2, #128	@ 0x80
 800add2:	0452      	lsls	r2, r2, #17
 800add4:	4293      	cmp	r3, r2
 800add6:	d201      	bcs.n	800addc <__hi0bits+0x1c>
 800add8:	3008      	adds	r0, #8
 800adda:	021b      	lsls	r3, r3, #8
 800addc:	2280      	movs	r2, #128	@ 0x80
 800adde:	0552      	lsls	r2, r2, #21
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d201      	bcs.n	800ade8 <__hi0bits+0x28>
 800ade4:	3004      	adds	r0, #4
 800ade6:	011b      	lsls	r3, r3, #4
 800ade8:	2280      	movs	r2, #128	@ 0x80
 800adea:	05d2      	lsls	r2, r2, #23
 800adec:	4293      	cmp	r3, r2
 800adee:	d201      	bcs.n	800adf4 <__hi0bits+0x34>
 800adf0:	3002      	adds	r0, #2
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	db03      	blt.n	800ae00 <__hi0bits+0x40>
 800adf8:	3001      	adds	r0, #1
 800adfa:	4213      	tst	r3, r2
 800adfc:	d100      	bne.n	800ae00 <__hi0bits+0x40>
 800adfe:	2020      	movs	r0, #32
 800ae00:	4770      	bx	lr

0800ae02 <__lo0bits>:
 800ae02:	6803      	ldr	r3, [r0, #0]
 800ae04:	0001      	movs	r1, r0
 800ae06:	2207      	movs	r2, #7
 800ae08:	0018      	movs	r0, r3
 800ae0a:	4010      	ands	r0, r2
 800ae0c:	4213      	tst	r3, r2
 800ae0e:	d00d      	beq.n	800ae2c <__lo0bits+0x2a>
 800ae10:	3a06      	subs	r2, #6
 800ae12:	2000      	movs	r0, #0
 800ae14:	4213      	tst	r3, r2
 800ae16:	d105      	bne.n	800ae24 <__lo0bits+0x22>
 800ae18:	3002      	adds	r0, #2
 800ae1a:	4203      	tst	r3, r0
 800ae1c:	d003      	beq.n	800ae26 <__lo0bits+0x24>
 800ae1e:	40d3      	lsrs	r3, r2
 800ae20:	0010      	movs	r0, r2
 800ae22:	600b      	str	r3, [r1, #0]
 800ae24:	4770      	bx	lr
 800ae26:	089b      	lsrs	r3, r3, #2
 800ae28:	600b      	str	r3, [r1, #0]
 800ae2a:	e7fb      	b.n	800ae24 <__lo0bits+0x22>
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	2a00      	cmp	r2, #0
 800ae30:	d101      	bne.n	800ae36 <__lo0bits+0x34>
 800ae32:	2010      	movs	r0, #16
 800ae34:	0c1b      	lsrs	r3, r3, #16
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	2a00      	cmp	r2, #0
 800ae3a:	d101      	bne.n	800ae40 <__lo0bits+0x3e>
 800ae3c:	3008      	adds	r0, #8
 800ae3e:	0a1b      	lsrs	r3, r3, #8
 800ae40:	071a      	lsls	r2, r3, #28
 800ae42:	d101      	bne.n	800ae48 <__lo0bits+0x46>
 800ae44:	3004      	adds	r0, #4
 800ae46:	091b      	lsrs	r3, r3, #4
 800ae48:	079a      	lsls	r2, r3, #30
 800ae4a:	d101      	bne.n	800ae50 <__lo0bits+0x4e>
 800ae4c:	3002      	adds	r0, #2
 800ae4e:	089b      	lsrs	r3, r3, #2
 800ae50:	07da      	lsls	r2, r3, #31
 800ae52:	d4e9      	bmi.n	800ae28 <__lo0bits+0x26>
 800ae54:	3001      	adds	r0, #1
 800ae56:	085b      	lsrs	r3, r3, #1
 800ae58:	d1e6      	bne.n	800ae28 <__lo0bits+0x26>
 800ae5a:	2020      	movs	r0, #32
 800ae5c:	e7e2      	b.n	800ae24 <__lo0bits+0x22>
	...

0800ae60 <__i2b>:
 800ae60:	b510      	push	{r4, lr}
 800ae62:	000c      	movs	r4, r1
 800ae64:	2101      	movs	r1, #1
 800ae66:	f7ff feb3 	bl	800abd0 <_Balloc>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d107      	bne.n	800ae7e <__i2b+0x1e>
 800ae6e:	2146      	movs	r1, #70	@ 0x46
 800ae70:	4c05      	ldr	r4, [pc, #20]	@ (800ae88 <__i2b+0x28>)
 800ae72:	0002      	movs	r2, r0
 800ae74:	4b05      	ldr	r3, [pc, #20]	@ (800ae8c <__i2b+0x2c>)
 800ae76:	0020      	movs	r0, r4
 800ae78:	31ff      	adds	r1, #255	@ 0xff
 800ae7a:	f001 fc59 	bl	800c730 <__assert_func>
 800ae7e:	2301      	movs	r3, #1
 800ae80:	6144      	str	r4, [r0, #20]
 800ae82:	6103      	str	r3, [r0, #16]
 800ae84:	bd10      	pop	{r4, pc}
 800ae86:	46c0      	nop			@ (mov r8, r8)
 800ae88:	0800d4db 	.word	0x0800d4db
 800ae8c:	0800d4ca 	.word	0x0800d4ca

0800ae90 <__multiply>:
 800ae90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae92:	0014      	movs	r4, r2
 800ae94:	690a      	ldr	r2, [r1, #16]
 800ae96:	6923      	ldr	r3, [r4, #16]
 800ae98:	000d      	movs	r5, r1
 800ae9a:	b089      	sub	sp, #36	@ 0x24
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	db02      	blt.n	800aea6 <__multiply+0x16>
 800aea0:	0023      	movs	r3, r4
 800aea2:	000c      	movs	r4, r1
 800aea4:	001d      	movs	r5, r3
 800aea6:	6927      	ldr	r7, [r4, #16]
 800aea8:	692e      	ldr	r6, [r5, #16]
 800aeaa:	6861      	ldr	r1, [r4, #4]
 800aeac:	19bb      	adds	r3, r7, r6
 800aeae:	9300      	str	r3, [sp, #0]
 800aeb0:	68a3      	ldr	r3, [r4, #8]
 800aeb2:	19ba      	adds	r2, r7, r6
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	da00      	bge.n	800aeba <__multiply+0x2a>
 800aeb8:	3101      	adds	r1, #1
 800aeba:	f7ff fe89 	bl	800abd0 <_Balloc>
 800aebe:	4684      	mov	ip, r0
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d106      	bne.n	800aed2 <__multiply+0x42>
 800aec4:	21b1      	movs	r1, #177	@ 0xb1
 800aec6:	4662      	mov	r2, ip
 800aec8:	4b44      	ldr	r3, [pc, #272]	@ (800afdc <__multiply+0x14c>)
 800aeca:	4845      	ldr	r0, [pc, #276]	@ (800afe0 <__multiply+0x150>)
 800aecc:	0049      	lsls	r1, r1, #1
 800aece:	f001 fc2f 	bl	800c730 <__assert_func>
 800aed2:	0002      	movs	r2, r0
 800aed4:	19bb      	adds	r3, r7, r6
 800aed6:	3214      	adds	r2, #20
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	18d3      	adds	r3, r2, r3
 800aedc:	9301      	str	r3, [sp, #4]
 800aede:	2100      	movs	r1, #0
 800aee0:	0013      	movs	r3, r2
 800aee2:	9801      	ldr	r0, [sp, #4]
 800aee4:	4283      	cmp	r3, r0
 800aee6:	d328      	bcc.n	800af3a <__multiply+0xaa>
 800aee8:	0023      	movs	r3, r4
 800aeea:	00bf      	lsls	r7, r7, #2
 800aeec:	3314      	adds	r3, #20
 800aeee:	9304      	str	r3, [sp, #16]
 800aef0:	3514      	adds	r5, #20
 800aef2:	19db      	adds	r3, r3, r7
 800aef4:	00b6      	lsls	r6, r6, #2
 800aef6:	9302      	str	r3, [sp, #8]
 800aef8:	19ab      	adds	r3, r5, r6
 800aefa:	9307      	str	r3, [sp, #28]
 800aefc:	2304      	movs	r3, #4
 800aefe:	9305      	str	r3, [sp, #20]
 800af00:	0023      	movs	r3, r4
 800af02:	9902      	ldr	r1, [sp, #8]
 800af04:	3315      	adds	r3, #21
 800af06:	4299      	cmp	r1, r3
 800af08:	d305      	bcc.n	800af16 <__multiply+0x86>
 800af0a:	1b0c      	subs	r4, r1, r4
 800af0c:	3c15      	subs	r4, #21
 800af0e:	08a4      	lsrs	r4, r4, #2
 800af10:	3401      	adds	r4, #1
 800af12:	00a3      	lsls	r3, r4, #2
 800af14:	9305      	str	r3, [sp, #20]
 800af16:	9b07      	ldr	r3, [sp, #28]
 800af18:	429d      	cmp	r5, r3
 800af1a:	d310      	bcc.n	800af3e <__multiply+0xae>
 800af1c:	9b00      	ldr	r3, [sp, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	dd05      	ble.n	800af2e <__multiply+0x9e>
 800af22:	9b01      	ldr	r3, [sp, #4]
 800af24:	3b04      	subs	r3, #4
 800af26:	9301      	str	r3, [sp, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d052      	beq.n	800afd4 <__multiply+0x144>
 800af2e:	4663      	mov	r3, ip
 800af30:	4660      	mov	r0, ip
 800af32:	9a00      	ldr	r2, [sp, #0]
 800af34:	611a      	str	r2, [r3, #16]
 800af36:	b009      	add	sp, #36	@ 0x24
 800af38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af3a:	c302      	stmia	r3!, {r1}
 800af3c:	e7d1      	b.n	800aee2 <__multiply+0x52>
 800af3e:	682c      	ldr	r4, [r5, #0]
 800af40:	b2a4      	uxth	r4, r4
 800af42:	2c00      	cmp	r4, #0
 800af44:	d01f      	beq.n	800af86 <__multiply+0xf6>
 800af46:	2300      	movs	r3, #0
 800af48:	0017      	movs	r7, r2
 800af4a:	9e04      	ldr	r6, [sp, #16]
 800af4c:	9303      	str	r3, [sp, #12]
 800af4e:	ce08      	ldmia	r6!, {r3}
 800af50:	6839      	ldr	r1, [r7, #0]
 800af52:	9306      	str	r3, [sp, #24]
 800af54:	466b      	mov	r3, sp
 800af56:	8b1b      	ldrh	r3, [r3, #24]
 800af58:	b288      	uxth	r0, r1
 800af5a:	4363      	muls	r3, r4
 800af5c:	181b      	adds	r3, r3, r0
 800af5e:	9803      	ldr	r0, [sp, #12]
 800af60:	0c09      	lsrs	r1, r1, #16
 800af62:	181b      	adds	r3, r3, r0
 800af64:	9806      	ldr	r0, [sp, #24]
 800af66:	0c00      	lsrs	r0, r0, #16
 800af68:	4360      	muls	r0, r4
 800af6a:	1840      	adds	r0, r0, r1
 800af6c:	0c19      	lsrs	r1, r3, #16
 800af6e:	1841      	adds	r1, r0, r1
 800af70:	0c08      	lsrs	r0, r1, #16
 800af72:	b29b      	uxth	r3, r3
 800af74:	0409      	lsls	r1, r1, #16
 800af76:	4319      	orrs	r1, r3
 800af78:	9b02      	ldr	r3, [sp, #8]
 800af7a:	9003      	str	r0, [sp, #12]
 800af7c:	c702      	stmia	r7!, {r1}
 800af7e:	42b3      	cmp	r3, r6
 800af80:	d8e5      	bhi.n	800af4e <__multiply+0xbe>
 800af82:	9b05      	ldr	r3, [sp, #20]
 800af84:	50d0      	str	r0, [r2, r3]
 800af86:	682c      	ldr	r4, [r5, #0]
 800af88:	0c24      	lsrs	r4, r4, #16
 800af8a:	d020      	beq.n	800afce <__multiply+0x13e>
 800af8c:	2100      	movs	r1, #0
 800af8e:	0010      	movs	r0, r2
 800af90:	6813      	ldr	r3, [r2, #0]
 800af92:	9e04      	ldr	r6, [sp, #16]
 800af94:	9103      	str	r1, [sp, #12]
 800af96:	6831      	ldr	r1, [r6, #0]
 800af98:	6807      	ldr	r7, [r0, #0]
 800af9a:	b289      	uxth	r1, r1
 800af9c:	4361      	muls	r1, r4
 800af9e:	0c3f      	lsrs	r7, r7, #16
 800afa0:	19c9      	adds	r1, r1, r7
 800afa2:	9f03      	ldr	r7, [sp, #12]
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	19c9      	adds	r1, r1, r7
 800afa8:	040f      	lsls	r7, r1, #16
 800afaa:	431f      	orrs	r7, r3
 800afac:	6007      	str	r7, [r0, #0]
 800afae:	ce80      	ldmia	r6!, {r7}
 800afb0:	6843      	ldr	r3, [r0, #4]
 800afb2:	0c3f      	lsrs	r7, r7, #16
 800afb4:	4367      	muls	r7, r4
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	0c09      	lsrs	r1, r1, #16
 800afba:	18fb      	adds	r3, r7, r3
 800afbc:	185b      	adds	r3, r3, r1
 800afbe:	0c19      	lsrs	r1, r3, #16
 800afc0:	9103      	str	r1, [sp, #12]
 800afc2:	9902      	ldr	r1, [sp, #8]
 800afc4:	3004      	adds	r0, #4
 800afc6:	42b1      	cmp	r1, r6
 800afc8:	d8e5      	bhi.n	800af96 <__multiply+0x106>
 800afca:	9905      	ldr	r1, [sp, #20]
 800afcc:	5053      	str	r3, [r2, r1]
 800afce:	3504      	adds	r5, #4
 800afd0:	3204      	adds	r2, #4
 800afd2:	e7a0      	b.n	800af16 <__multiply+0x86>
 800afd4:	9b00      	ldr	r3, [sp, #0]
 800afd6:	3b01      	subs	r3, #1
 800afd8:	9300      	str	r3, [sp, #0]
 800afda:	e79f      	b.n	800af1c <__multiply+0x8c>
 800afdc:	0800d4ca 	.word	0x0800d4ca
 800afe0:	0800d4db 	.word	0x0800d4db

0800afe4 <__pow5mult>:
 800afe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afe6:	2303      	movs	r3, #3
 800afe8:	0015      	movs	r5, r2
 800afea:	0007      	movs	r7, r0
 800afec:	000e      	movs	r6, r1
 800afee:	401a      	ands	r2, r3
 800aff0:	421d      	tst	r5, r3
 800aff2:	d008      	beq.n	800b006 <__pow5mult+0x22>
 800aff4:	4925      	ldr	r1, [pc, #148]	@ (800b08c <__pow5mult+0xa8>)
 800aff6:	3a01      	subs	r2, #1
 800aff8:	0092      	lsls	r2, r2, #2
 800affa:	5852      	ldr	r2, [r2, r1]
 800affc:	2300      	movs	r3, #0
 800affe:	0031      	movs	r1, r6
 800b000:	f7ff fe4e 	bl	800aca0 <__multadd>
 800b004:	0006      	movs	r6, r0
 800b006:	10ad      	asrs	r5, r5, #2
 800b008:	d03d      	beq.n	800b086 <__pow5mult+0xa2>
 800b00a:	69fc      	ldr	r4, [r7, #28]
 800b00c:	2c00      	cmp	r4, #0
 800b00e:	d10f      	bne.n	800b030 <__pow5mult+0x4c>
 800b010:	2010      	movs	r0, #16
 800b012:	f7fd fc01 	bl	8008818 <malloc>
 800b016:	1e02      	subs	r2, r0, #0
 800b018:	61f8      	str	r0, [r7, #28]
 800b01a:	d105      	bne.n	800b028 <__pow5mult+0x44>
 800b01c:	21b4      	movs	r1, #180	@ 0xb4
 800b01e:	4b1c      	ldr	r3, [pc, #112]	@ (800b090 <__pow5mult+0xac>)
 800b020:	481c      	ldr	r0, [pc, #112]	@ (800b094 <__pow5mult+0xb0>)
 800b022:	31ff      	adds	r1, #255	@ 0xff
 800b024:	f001 fb84 	bl	800c730 <__assert_func>
 800b028:	6044      	str	r4, [r0, #4]
 800b02a:	6084      	str	r4, [r0, #8]
 800b02c:	6004      	str	r4, [r0, #0]
 800b02e:	60c4      	str	r4, [r0, #12]
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	689c      	ldr	r4, [r3, #8]
 800b034:	9301      	str	r3, [sp, #4]
 800b036:	2c00      	cmp	r4, #0
 800b038:	d108      	bne.n	800b04c <__pow5mult+0x68>
 800b03a:	0038      	movs	r0, r7
 800b03c:	4916      	ldr	r1, [pc, #88]	@ (800b098 <__pow5mult+0xb4>)
 800b03e:	f7ff ff0f 	bl	800ae60 <__i2b>
 800b042:	9b01      	ldr	r3, [sp, #4]
 800b044:	0004      	movs	r4, r0
 800b046:	6098      	str	r0, [r3, #8]
 800b048:	2300      	movs	r3, #0
 800b04a:	6003      	str	r3, [r0, #0]
 800b04c:	2301      	movs	r3, #1
 800b04e:	421d      	tst	r5, r3
 800b050:	d00a      	beq.n	800b068 <__pow5mult+0x84>
 800b052:	0031      	movs	r1, r6
 800b054:	0022      	movs	r2, r4
 800b056:	0038      	movs	r0, r7
 800b058:	f7ff ff1a 	bl	800ae90 <__multiply>
 800b05c:	0031      	movs	r1, r6
 800b05e:	9001      	str	r0, [sp, #4]
 800b060:	0038      	movs	r0, r7
 800b062:	f7ff fdf9 	bl	800ac58 <_Bfree>
 800b066:	9e01      	ldr	r6, [sp, #4]
 800b068:	106d      	asrs	r5, r5, #1
 800b06a:	d00c      	beq.n	800b086 <__pow5mult+0xa2>
 800b06c:	6820      	ldr	r0, [r4, #0]
 800b06e:	2800      	cmp	r0, #0
 800b070:	d107      	bne.n	800b082 <__pow5mult+0x9e>
 800b072:	0022      	movs	r2, r4
 800b074:	0021      	movs	r1, r4
 800b076:	0038      	movs	r0, r7
 800b078:	f7ff ff0a 	bl	800ae90 <__multiply>
 800b07c:	2300      	movs	r3, #0
 800b07e:	6020      	str	r0, [r4, #0]
 800b080:	6003      	str	r3, [r0, #0]
 800b082:	0004      	movs	r4, r0
 800b084:	e7e2      	b.n	800b04c <__pow5mult+0x68>
 800b086:	0030      	movs	r0, r6
 800b088:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b08a:	46c0      	nop			@ (mov r8, r8)
 800b08c:	0800d5ec 	.word	0x0800d5ec
 800b090:	0800d45b 	.word	0x0800d45b
 800b094:	0800d4db 	.word	0x0800d4db
 800b098:	00000271 	.word	0x00000271

0800b09c <__lshift>:
 800b09c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b09e:	000c      	movs	r4, r1
 800b0a0:	0016      	movs	r6, r2
 800b0a2:	6923      	ldr	r3, [r4, #16]
 800b0a4:	1157      	asrs	r7, r2, #5
 800b0a6:	b085      	sub	sp, #20
 800b0a8:	18fb      	adds	r3, r7, r3
 800b0aa:	9301      	str	r3, [sp, #4]
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	6849      	ldr	r1, [r1, #4]
 800b0b2:	68a3      	ldr	r3, [r4, #8]
 800b0b4:	9002      	str	r0, [sp, #8]
 800b0b6:	9a00      	ldr	r2, [sp, #0]
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	db10      	blt.n	800b0de <__lshift+0x42>
 800b0bc:	9802      	ldr	r0, [sp, #8]
 800b0be:	f7ff fd87 	bl	800abd0 <_Balloc>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	0001      	movs	r1, r0
 800b0c6:	0005      	movs	r5, r0
 800b0c8:	001a      	movs	r2, r3
 800b0ca:	3114      	adds	r1, #20
 800b0cc:	4298      	cmp	r0, r3
 800b0ce:	d10c      	bne.n	800b0ea <__lshift+0x4e>
 800b0d0:	21ef      	movs	r1, #239	@ 0xef
 800b0d2:	002a      	movs	r2, r5
 800b0d4:	4b25      	ldr	r3, [pc, #148]	@ (800b16c <__lshift+0xd0>)
 800b0d6:	4826      	ldr	r0, [pc, #152]	@ (800b170 <__lshift+0xd4>)
 800b0d8:	0049      	lsls	r1, r1, #1
 800b0da:	f001 fb29 	bl	800c730 <__assert_func>
 800b0de:	3101      	adds	r1, #1
 800b0e0:	005b      	lsls	r3, r3, #1
 800b0e2:	e7e8      	b.n	800b0b6 <__lshift+0x1a>
 800b0e4:	0098      	lsls	r0, r3, #2
 800b0e6:	500a      	str	r2, [r1, r0]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	42bb      	cmp	r3, r7
 800b0ec:	dbfa      	blt.n	800b0e4 <__lshift+0x48>
 800b0ee:	43fb      	mvns	r3, r7
 800b0f0:	17db      	asrs	r3, r3, #31
 800b0f2:	401f      	ands	r7, r3
 800b0f4:	00bf      	lsls	r7, r7, #2
 800b0f6:	0023      	movs	r3, r4
 800b0f8:	201f      	movs	r0, #31
 800b0fa:	19c9      	adds	r1, r1, r7
 800b0fc:	0037      	movs	r7, r6
 800b0fe:	6922      	ldr	r2, [r4, #16]
 800b100:	3314      	adds	r3, #20
 800b102:	0092      	lsls	r2, r2, #2
 800b104:	189a      	adds	r2, r3, r2
 800b106:	4007      	ands	r7, r0
 800b108:	4206      	tst	r6, r0
 800b10a:	d029      	beq.n	800b160 <__lshift+0xc4>
 800b10c:	3001      	adds	r0, #1
 800b10e:	1bc0      	subs	r0, r0, r7
 800b110:	9003      	str	r0, [sp, #12]
 800b112:	468c      	mov	ip, r1
 800b114:	2000      	movs	r0, #0
 800b116:	681e      	ldr	r6, [r3, #0]
 800b118:	40be      	lsls	r6, r7
 800b11a:	4306      	orrs	r6, r0
 800b11c:	4660      	mov	r0, ip
 800b11e:	c040      	stmia	r0!, {r6}
 800b120:	4684      	mov	ip, r0
 800b122:	9e03      	ldr	r6, [sp, #12]
 800b124:	cb01      	ldmia	r3!, {r0}
 800b126:	40f0      	lsrs	r0, r6
 800b128:	429a      	cmp	r2, r3
 800b12a:	d8f4      	bhi.n	800b116 <__lshift+0x7a>
 800b12c:	0026      	movs	r6, r4
 800b12e:	3615      	adds	r6, #21
 800b130:	2304      	movs	r3, #4
 800b132:	42b2      	cmp	r2, r6
 800b134:	d304      	bcc.n	800b140 <__lshift+0xa4>
 800b136:	1b13      	subs	r3, r2, r4
 800b138:	3b15      	subs	r3, #21
 800b13a:	089b      	lsrs	r3, r3, #2
 800b13c:	3301      	adds	r3, #1
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	50c8      	str	r0, [r1, r3]
 800b142:	2800      	cmp	r0, #0
 800b144:	d002      	beq.n	800b14c <__lshift+0xb0>
 800b146:	9b01      	ldr	r3, [sp, #4]
 800b148:	3302      	adds	r3, #2
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	9b00      	ldr	r3, [sp, #0]
 800b14e:	9802      	ldr	r0, [sp, #8]
 800b150:	3b01      	subs	r3, #1
 800b152:	0021      	movs	r1, r4
 800b154:	612b      	str	r3, [r5, #16]
 800b156:	f7ff fd7f 	bl	800ac58 <_Bfree>
 800b15a:	0028      	movs	r0, r5
 800b15c:	b005      	add	sp, #20
 800b15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b160:	cb01      	ldmia	r3!, {r0}
 800b162:	c101      	stmia	r1!, {r0}
 800b164:	429a      	cmp	r2, r3
 800b166:	d8fb      	bhi.n	800b160 <__lshift+0xc4>
 800b168:	e7f0      	b.n	800b14c <__lshift+0xb0>
 800b16a:	46c0      	nop			@ (mov r8, r8)
 800b16c:	0800d4ca 	.word	0x0800d4ca
 800b170:	0800d4db 	.word	0x0800d4db

0800b174 <__mcmp>:
 800b174:	b530      	push	{r4, r5, lr}
 800b176:	690b      	ldr	r3, [r1, #16]
 800b178:	6904      	ldr	r4, [r0, #16]
 800b17a:	0002      	movs	r2, r0
 800b17c:	1ae0      	subs	r0, r4, r3
 800b17e:	429c      	cmp	r4, r3
 800b180:	d10f      	bne.n	800b1a2 <__mcmp+0x2e>
 800b182:	3214      	adds	r2, #20
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	3114      	adds	r1, #20
 800b188:	0014      	movs	r4, r2
 800b18a:	18c9      	adds	r1, r1, r3
 800b18c:	18d2      	adds	r2, r2, r3
 800b18e:	3a04      	subs	r2, #4
 800b190:	3904      	subs	r1, #4
 800b192:	6815      	ldr	r5, [r2, #0]
 800b194:	680b      	ldr	r3, [r1, #0]
 800b196:	429d      	cmp	r5, r3
 800b198:	d004      	beq.n	800b1a4 <__mcmp+0x30>
 800b19a:	2001      	movs	r0, #1
 800b19c:	429d      	cmp	r5, r3
 800b19e:	d200      	bcs.n	800b1a2 <__mcmp+0x2e>
 800b1a0:	3802      	subs	r0, #2
 800b1a2:	bd30      	pop	{r4, r5, pc}
 800b1a4:	4294      	cmp	r4, r2
 800b1a6:	d3f2      	bcc.n	800b18e <__mcmp+0x1a>
 800b1a8:	e7fb      	b.n	800b1a2 <__mcmp+0x2e>
	...

0800b1ac <__mdiff>:
 800b1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ae:	000c      	movs	r4, r1
 800b1b0:	b087      	sub	sp, #28
 800b1b2:	9000      	str	r0, [sp, #0]
 800b1b4:	0011      	movs	r1, r2
 800b1b6:	0020      	movs	r0, r4
 800b1b8:	0017      	movs	r7, r2
 800b1ba:	f7ff ffdb 	bl	800b174 <__mcmp>
 800b1be:	1e05      	subs	r5, r0, #0
 800b1c0:	d110      	bne.n	800b1e4 <__mdiff+0x38>
 800b1c2:	0001      	movs	r1, r0
 800b1c4:	9800      	ldr	r0, [sp, #0]
 800b1c6:	f7ff fd03 	bl	800abd0 <_Balloc>
 800b1ca:	1e02      	subs	r2, r0, #0
 800b1cc:	d104      	bne.n	800b1d8 <__mdiff+0x2c>
 800b1ce:	4b40      	ldr	r3, [pc, #256]	@ (800b2d0 <__mdiff+0x124>)
 800b1d0:	4840      	ldr	r0, [pc, #256]	@ (800b2d4 <__mdiff+0x128>)
 800b1d2:	4941      	ldr	r1, [pc, #260]	@ (800b2d8 <__mdiff+0x12c>)
 800b1d4:	f001 faac 	bl	800c730 <__assert_func>
 800b1d8:	2301      	movs	r3, #1
 800b1da:	6145      	str	r5, [r0, #20]
 800b1dc:	6103      	str	r3, [r0, #16]
 800b1de:	0010      	movs	r0, r2
 800b1e0:	b007      	add	sp, #28
 800b1e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1e4:	2600      	movs	r6, #0
 800b1e6:	42b0      	cmp	r0, r6
 800b1e8:	da03      	bge.n	800b1f2 <__mdiff+0x46>
 800b1ea:	0023      	movs	r3, r4
 800b1ec:	003c      	movs	r4, r7
 800b1ee:	001f      	movs	r7, r3
 800b1f0:	3601      	adds	r6, #1
 800b1f2:	6861      	ldr	r1, [r4, #4]
 800b1f4:	9800      	ldr	r0, [sp, #0]
 800b1f6:	f7ff fceb 	bl	800abd0 <_Balloc>
 800b1fa:	1e02      	subs	r2, r0, #0
 800b1fc:	d103      	bne.n	800b206 <__mdiff+0x5a>
 800b1fe:	4b34      	ldr	r3, [pc, #208]	@ (800b2d0 <__mdiff+0x124>)
 800b200:	4834      	ldr	r0, [pc, #208]	@ (800b2d4 <__mdiff+0x128>)
 800b202:	4936      	ldr	r1, [pc, #216]	@ (800b2dc <__mdiff+0x130>)
 800b204:	e7e6      	b.n	800b1d4 <__mdiff+0x28>
 800b206:	6923      	ldr	r3, [r4, #16]
 800b208:	3414      	adds	r4, #20
 800b20a:	9300      	str	r3, [sp, #0]
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	18e3      	adds	r3, r4, r3
 800b210:	0021      	movs	r1, r4
 800b212:	9401      	str	r4, [sp, #4]
 800b214:	003c      	movs	r4, r7
 800b216:	9302      	str	r3, [sp, #8]
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	3414      	adds	r4, #20
 800b21c:	009b      	lsls	r3, r3, #2
 800b21e:	18e3      	adds	r3, r4, r3
 800b220:	9303      	str	r3, [sp, #12]
 800b222:	0003      	movs	r3, r0
 800b224:	60c6      	str	r6, [r0, #12]
 800b226:	468c      	mov	ip, r1
 800b228:	2000      	movs	r0, #0
 800b22a:	3314      	adds	r3, #20
 800b22c:	9304      	str	r3, [sp, #16]
 800b22e:	9305      	str	r3, [sp, #20]
 800b230:	4663      	mov	r3, ip
 800b232:	cb20      	ldmia	r3!, {r5}
 800b234:	b2a9      	uxth	r1, r5
 800b236:	000e      	movs	r6, r1
 800b238:	469c      	mov	ip, r3
 800b23a:	cc08      	ldmia	r4!, {r3}
 800b23c:	0c2d      	lsrs	r5, r5, #16
 800b23e:	b299      	uxth	r1, r3
 800b240:	1a71      	subs	r1, r6, r1
 800b242:	1809      	adds	r1, r1, r0
 800b244:	0c1b      	lsrs	r3, r3, #16
 800b246:	1408      	asrs	r0, r1, #16
 800b248:	1aeb      	subs	r3, r5, r3
 800b24a:	181b      	adds	r3, r3, r0
 800b24c:	1418      	asrs	r0, r3, #16
 800b24e:	b289      	uxth	r1, r1
 800b250:	041b      	lsls	r3, r3, #16
 800b252:	4319      	orrs	r1, r3
 800b254:	9b05      	ldr	r3, [sp, #20]
 800b256:	c302      	stmia	r3!, {r1}
 800b258:	9305      	str	r3, [sp, #20]
 800b25a:	9b03      	ldr	r3, [sp, #12]
 800b25c:	42a3      	cmp	r3, r4
 800b25e:	d8e7      	bhi.n	800b230 <__mdiff+0x84>
 800b260:	0039      	movs	r1, r7
 800b262:	9c03      	ldr	r4, [sp, #12]
 800b264:	3115      	adds	r1, #21
 800b266:	2304      	movs	r3, #4
 800b268:	428c      	cmp	r4, r1
 800b26a:	d304      	bcc.n	800b276 <__mdiff+0xca>
 800b26c:	1be3      	subs	r3, r4, r7
 800b26e:	3b15      	subs	r3, #21
 800b270:	089b      	lsrs	r3, r3, #2
 800b272:	3301      	adds	r3, #1
 800b274:	009b      	lsls	r3, r3, #2
 800b276:	9901      	ldr	r1, [sp, #4]
 800b278:	18cd      	adds	r5, r1, r3
 800b27a:	9904      	ldr	r1, [sp, #16]
 800b27c:	002e      	movs	r6, r5
 800b27e:	18cb      	adds	r3, r1, r3
 800b280:	001f      	movs	r7, r3
 800b282:	9902      	ldr	r1, [sp, #8]
 800b284:	428e      	cmp	r6, r1
 800b286:	d311      	bcc.n	800b2ac <__mdiff+0x100>
 800b288:	9c02      	ldr	r4, [sp, #8]
 800b28a:	1ee9      	subs	r1, r5, #3
 800b28c:	2000      	movs	r0, #0
 800b28e:	428c      	cmp	r4, r1
 800b290:	d304      	bcc.n	800b29c <__mdiff+0xf0>
 800b292:	0021      	movs	r1, r4
 800b294:	3103      	adds	r1, #3
 800b296:	1b49      	subs	r1, r1, r5
 800b298:	0889      	lsrs	r1, r1, #2
 800b29a:	0088      	lsls	r0, r1, #2
 800b29c:	181b      	adds	r3, r3, r0
 800b29e:	3b04      	subs	r3, #4
 800b2a0:	6819      	ldr	r1, [r3, #0]
 800b2a2:	2900      	cmp	r1, #0
 800b2a4:	d010      	beq.n	800b2c8 <__mdiff+0x11c>
 800b2a6:	9b00      	ldr	r3, [sp, #0]
 800b2a8:	6113      	str	r3, [r2, #16]
 800b2aa:	e798      	b.n	800b1de <__mdiff+0x32>
 800b2ac:	4684      	mov	ip, r0
 800b2ae:	ce02      	ldmia	r6!, {r1}
 800b2b0:	b288      	uxth	r0, r1
 800b2b2:	4460      	add	r0, ip
 800b2b4:	1400      	asrs	r0, r0, #16
 800b2b6:	0c0c      	lsrs	r4, r1, #16
 800b2b8:	1904      	adds	r4, r0, r4
 800b2ba:	4461      	add	r1, ip
 800b2bc:	1420      	asrs	r0, r4, #16
 800b2be:	b289      	uxth	r1, r1
 800b2c0:	0424      	lsls	r4, r4, #16
 800b2c2:	4321      	orrs	r1, r4
 800b2c4:	c702      	stmia	r7!, {r1}
 800b2c6:	e7dc      	b.n	800b282 <__mdiff+0xd6>
 800b2c8:	9900      	ldr	r1, [sp, #0]
 800b2ca:	3901      	subs	r1, #1
 800b2cc:	9100      	str	r1, [sp, #0]
 800b2ce:	e7e6      	b.n	800b29e <__mdiff+0xf2>
 800b2d0:	0800d4ca 	.word	0x0800d4ca
 800b2d4:	0800d4db 	.word	0x0800d4db
 800b2d8:	00000237 	.word	0x00000237
 800b2dc:	00000245 	.word	0x00000245

0800b2e0 <__ulp>:
 800b2e0:	b510      	push	{r4, lr}
 800b2e2:	2400      	movs	r4, #0
 800b2e4:	4b0c      	ldr	r3, [pc, #48]	@ (800b318 <__ulp+0x38>)
 800b2e6:	4a0d      	ldr	r2, [pc, #52]	@ (800b31c <__ulp+0x3c>)
 800b2e8:	400b      	ands	r3, r1
 800b2ea:	189b      	adds	r3, r3, r2
 800b2ec:	42a3      	cmp	r3, r4
 800b2ee:	dc06      	bgt.n	800b2fe <__ulp+0x1e>
 800b2f0:	425b      	negs	r3, r3
 800b2f2:	151a      	asrs	r2, r3, #20
 800b2f4:	2a13      	cmp	r2, #19
 800b2f6:	dc05      	bgt.n	800b304 <__ulp+0x24>
 800b2f8:	2380      	movs	r3, #128	@ 0x80
 800b2fa:	031b      	lsls	r3, r3, #12
 800b2fc:	4113      	asrs	r3, r2
 800b2fe:	0019      	movs	r1, r3
 800b300:	0020      	movs	r0, r4
 800b302:	bd10      	pop	{r4, pc}
 800b304:	3a14      	subs	r2, #20
 800b306:	2401      	movs	r4, #1
 800b308:	2a1e      	cmp	r2, #30
 800b30a:	dc02      	bgt.n	800b312 <__ulp+0x32>
 800b30c:	2480      	movs	r4, #128	@ 0x80
 800b30e:	0624      	lsls	r4, r4, #24
 800b310:	40d4      	lsrs	r4, r2
 800b312:	2300      	movs	r3, #0
 800b314:	e7f3      	b.n	800b2fe <__ulp+0x1e>
 800b316:	46c0      	nop			@ (mov r8, r8)
 800b318:	7ff00000 	.word	0x7ff00000
 800b31c:	fcc00000 	.word	0xfcc00000

0800b320 <__b2d>:
 800b320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b322:	0006      	movs	r6, r0
 800b324:	6903      	ldr	r3, [r0, #16]
 800b326:	3614      	adds	r6, #20
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	18f3      	adds	r3, r6, r3
 800b32c:	1f1d      	subs	r5, r3, #4
 800b32e:	682c      	ldr	r4, [r5, #0]
 800b330:	000f      	movs	r7, r1
 800b332:	0020      	movs	r0, r4
 800b334:	9301      	str	r3, [sp, #4]
 800b336:	f7ff fd43 	bl	800adc0 <__hi0bits>
 800b33a:	2220      	movs	r2, #32
 800b33c:	1a12      	subs	r2, r2, r0
 800b33e:	603a      	str	r2, [r7, #0]
 800b340:	0003      	movs	r3, r0
 800b342:	4a1c      	ldr	r2, [pc, #112]	@ (800b3b4 <__b2d+0x94>)
 800b344:	280a      	cmp	r0, #10
 800b346:	dc15      	bgt.n	800b374 <__b2d+0x54>
 800b348:	210b      	movs	r1, #11
 800b34a:	0027      	movs	r7, r4
 800b34c:	1a09      	subs	r1, r1, r0
 800b34e:	40cf      	lsrs	r7, r1
 800b350:	433a      	orrs	r2, r7
 800b352:	468c      	mov	ip, r1
 800b354:	0011      	movs	r1, r2
 800b356:	2200      	movs	r2, #0
 800b358:	42ae      	cmp	r6, r5
 800b35a:	d202      	bcs.n	800b362 <__b2d+0x42>
 800b35c:	9a01      	ldr	r2, [sp, #4]
 800b35e:	3a08      	subs	r2, #8
 800b360:	6812      	ldr	r2, [r2, #0]
 800b362:	3315      	adds	r3, #21
 800b364:	409c      	lsls	r4, r3
 800b366:	4663      	mov	r3, ip
 800b368:	0027      	movs	r7, r4
 800b36a:	40da      	lsrs	r2, r3
 800b36c:	4317      	orrs	r7, r2
 800b36e:	0038      	movs	r0, r7
 800b370:	b003      	add	sp, #12
 800b372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b374:	2700      	movs	r7, #0
 800b376:	42ae      	cmp	r6, r5
 800b378:	d202      	bcs.n	800b380 <__b2d+0x60>
 800b37a:	9d01      	ldr	r5, [sp, #4]
 800b37c:	3d08      	subs	r5, #8
 800b37e:	682f      	ldr	r7, [r5, #0]
 800b380:	210b      	movs	r1, #11
 800b382:	4249      	negs	r1, r1
 800b384:	468c      	mov	ip, r1
 800b386:	449c      	add	ip, r3
 800b388:	2b0b      	cmp	r3, #11
 800b38a:	d010      	beq.n	800b3ae <__b2d+0x8e>
 800b38c:	4661      	mov	r1, ip
 800b38e:	2320      	movs	r3, #32
 800b390:	408c      	lsls	r4, r1
 800b392:	1a5b      	subs	r3, r3, r1
 800b394:	0039      	movs	r1, r7
 800b396:	40d9      	lsrs	r1, r3
 800b398:	430c      	orrs	r4, r1
 800b39a:	4322      	orrs	r2, r4
 800b39c:	0011      	movs	r1, r2
 800b39e:	2200      	movs	r2, #0
 800b3a0:	42b5      	cmp	r5, r6
 800b3a2:	d901      	bls.n	800b3a8 <__b2d+0x88>
 800b3a4:	3d04      	subs	r5, #4
 800b3a6:	682a      	ldr	r2, [r5, #0]
 800b3a8:	4664      	mov	r4, ip
 800b3aa:	40a7      	lsls	r7, r4
 800b3ac:	e7dd      	b.n	800b36a <__b2d+0x4a>
 800b3ae:	4322      	orrs	r2, r4
 800b3b0:	0011      	movs	r1, r2
 800b3b2:	e7dc      	b.n	800b36e <__b2d+0x4e>
 800b3b4:	3ff00000 	.word	0x3ff00000

0800b3b8 <__d2b>:
 800b3b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3ba:	2101      	movs	r1, #1
 800b3bc:	0016      	movs	r6, r2
 800b3be:	001f      	movs	r7, r3
 800b3c0:	f7ff fc06 	bl	800abd0 <_Balloc>
 800b3c4:	1e04      	subs	r4, r0, #0
 800b3c6:	d105      	bne.n	800b3d4 <__d2b+0x1c>
 800b3c8:	0022      	movs	r2, r4
 800b3ca:	4b25      	ldr	r3, [pc, #148]	@ (800b460 <__d2b+0xa8>)
 800b3cc:	4825      	ldr	r0, [pc, #148]	@ (800b464 <__d2b+0xac>)
 800b3ce:	4926      	ldr	r1, [pc, #152]	@ (800b468 <__d2b+0xb0>)
 800b3d0:	f001 f9ae 	bl	800c730 <__assert_func>
 800b3d4:	033b      	lsls	r3, r7, #12
 800b3d6:	007d      	lsls	r5, r7, #1
 800b3d8:	0b1b      	lsrs	r3, r3, #12
 800b3da:	0d6d      	lsrs	r5, r5, #21
 800b3dc:	d002      	beq.n	800b3e4 <__d2b+0x2c>
 800b3de:	2280      	movs	r2, #128	@ 0x80
 800b3e0:	0352      	lsls	r2, r2, #13
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	9301      	str	r3, [sp, #4]
 800b3e6:	2e00      	cmp	r6, #0
 800b3e8:	d025      	beq.n	800b436 <__d2b+0x7e>
 800b3ea:	4668      	mov	r0, sp
 800b3ec:	9600      	str	r6, [sp, #0]
 800b3ee:	f7ff fd08 	bl	800ae02 <__lo0bits>
 800b3f2:	9b01      	ldr	r3, [sp, #4]
 800b3f4:	9900      	ldr	r1, [sp, #0]
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d01b      	beq.n	800b432 <__d2b+0x7a>
 800b3fa:	2220      	movs	r2, #32
 800b3fc:	001e      	movs	r6, r3
 800b3fe:	1a12      	subs	r2, r2, r0
 800b400:	4096      	lsls	r6, r2
 800b402:	0032      	movs	r2, r6
 800b404:	40c3      	lsrs	r3, r0
 800b406:	430a      	orrs	r2, r1
 800b408:	6162      	str	r2, [r4, #20]
 800b40a:	9301      	str	r3, [sp, #4]
 800b40c:	9e01      	ldr	r6, [sp, #4]
 800b40e:	61a6      	str	r6, [r4, #24]
 800b410:	1e73      	subs	r3, r6, #1
 800b412:	419e      	sbcs	r6, r3
 800b414:	3601      	adds	r6, #1
 800b416:	6126      	str	r6, [r4, #16]
 800b418:	2d00      	cmp	r5, #0
 800b41a:	d014      	beq.n	800b446 <__d2b+0x8e>
 800b41c:	2635      	movs	r6, #53	@ 0x35
 800b41e:	4b13      	ldr	r3, [pc, #76]	@ (800b46c <__d2b+0xb4>)
 800b420:	18ed      	adds	r5, r5, r3
 800b422:	9b08      	ldr	r3, [sp, #32]
 800b424:	182d      	adds	r5, r5, r0
 800b426:	601d      	str	r5, [r3, #0]
 800b428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b42a:	1a36      	subs	r6, r6, r0
 800b42c:	601e      	str	r6, [r3, #0]
 800b42e:	0020      	movs	r0, r4
 800b430:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b432:	6161      	str	r1, [r4, #20]
 800b434:	e7ea      	b.n	800b40c <__d2b+0x54>
 800b436:	a801      	add	r0, sp, #4
 800b438:	f7ff fce3 	bl	800ae02 <__lo0bits>
 800b43c:	9b01      	ldr	r3, [sp, #4]
 800b43e:	2601      	movs	r6, #1
 800b440:	6163      	str	r3, [r4, #20]
 800b442:	3020      	adds	r0, #32
 800b444:	e7e7      	b.n	800b416 <__d2b+0x5e>
 800b446:	4b0a      	ldr	r3, [pc, #40]	@ (800b470 <__d2b+0xb8>)
 800b448:	18c0      	adds	r0, r0, r3
 800b44a:	9b08      	ldr	r3, [sp, #32]
 800b44c:	6018      	str	r0, [r3, #0]
 800b44e:	4b09      	ldr	r3, [pc, #36]	@ (800b474 <__d2b+0xbc>)
 800b450:	18f3      	adds	r3, r6, r3
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	18e3      	adds	r3, r4, r3
 800b456:	6958      	ldr	r0, [r3, #20]
 800b458:	f7ff fcb2 	bl	800adc0 <__hi0bits>
 800b45c:	0176      	lsls	r6, r6, #5
 800b45e:	e7e3      	b.n	800b428 <__d2b+0x70>
 800b460:	0800d4ca 	.word	0x0800d4ca
 800b464:	0800d4db 	.word	0x0800d4db
 800b468:	0000030f 	.word	0x0000030f
 800b46c:	fffffbcd 	.word	0xfffffbcd
 800b470:	fffffbce 	.word	0xfffffbce
 800b474:	3fffffff 	.word	0x3fffffff

0800b478 <__ratio>:
 800b478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b47a:	b087      	sub	sp, #28
 800b47c:	000f      	movs	r7, r1
 800b47e:	a904      	add	r1, sp, #16
 800b480:	0006      	movs	r6, r0
 800b482:	f7ff ff4d 	bl	800b320 <__b2d>
 800b486:	9000      	str	r0, [sp, #0]
 800b488:	9101      	str	r1, [sp, #4]
 800b48a:	9b00      	ldr	r3, [sp, #0]
 800b48c:	9c01      	ldr	r4, [sp, #4]
 800b48e:	0038      	movs	r0, r7
 800b490:	a905      	add	r1, sp, #20
 800b492:	9302      	str	r3, [sp, #8]
 800b494:	9403      	str	r4, [sp, #12]
 800b496:	f7ff ff43 	bl	800b320 <__b2d>
 800b49a:	000d      	movs	r5, r1
 800b49c:	0002      	movs	r2, r0
 800b49e:	000b      	movs	r3, r1
 800b4a0:	6930      	ldr	r0, [r6, #16]
 800b4a2:	6939      	ldr	r1, [r7, #16]
 800b4a4:	9e04      	ldr	r6, [sp, #16]
 800b4a6:	1a40      	subs	r0, r0, r1
 800b4a8:	9905      	ldr	r1, [sp, #20]
 800b4aa:	0140      	lsls	r0, r0, #5
 800b4ac:	1a71      	subs	r1, r6, r1
 800b4ae:	1841      	adds	r1, r0, r1
 800b4b0:	0508      	lsls	r0, r1, #20
 800b4b2:	2900      	cmp	r1, #0
 800b4b4:	dd08      	ble.n	800b4c8 <__ratio+0x50>
 800b4b6:	9901      	ldr	r1, [sp, #4]
 800b4b8:	1841      	adds	r1, r0, r1
 800b4ba:	9103      	str	r1, [sp, #12]
 800b4bc:	9802      	ldr	r0, [sp, #8]
 800b4be:	9903      	ldr	r1, [sp, #12]
 800b4c0:	f7f5 fecc 	bl	800125c <__aeabi_ddiv>
 800b4c4:	b007      	add	sp, #28
 800b4c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4c8:	1a2b      	subs	r3, r5, r0
 800b4ca:	e7f7      	b.n	800b4bc <__ratio+0x44>

0800b4cc <__copybits>:
 800b4cc:	b570      	push	{r4, r5, r6, lr}
 800b4ce:	0014      	movs	r4, r2
 800b4d0:	0005      	movs	r5, r0
 800b4d2:	3901      	subs	r1, #1
 800b4d4:	6913      	ldr	r3, [r2, #16]
 800b4d6:	1149      	asrs	r1, r1, #5
 800b4d8:	3101      	adds	r1, #1
 800b4da:	0089      	lsls	r1, r1, #2
 800b4dc:	3414      	adds	r4, #20
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	1841      	adds	r1, r0, r1
 800b4e2:	18e3      	adds	r3, r4, r3
 800b4e4:	42a3      	cmp	r3, r4
 800b4e6:	d80d      	bhi.n	800b504 <__copybits+0x38>
 800b4e8:	0014      	movs	r4, r2
 800b4ea:	3411      	adds	r4, #17
 800b4ec:	2500      	movs	r5, #0
 800b4ee:	42a3      	cmp	r3, r4
 800b4f0:	d303      	bcc.n	800b4fa <__copybits+0x2e>
 800b4f2:	1a9b      	subs	r3, r3, r2
 800b4f4:	3b11      	subs	r3, #17
 800b4f6:	089b      	lsrs	r3, r3, #2
 800b4f8:	009d      	lsls	r5, r3, #2
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	1940      	adds	r0, r0, r5
 800b4fe:	4281      	cmp	r1, r0
 800b500:	d803      	bhi.n	800b50a <__copybits+0x3e>
 800b502:	bd70      	pop	{r4, r5, r6, pc}
 800b504:	cc40      	ldmia	r4!, {r6}
 800b506:	c540      	stmia	r5!, {r6}
 800b508:	e7ec      	b.n	800b4e4 <__copybits+0x18>
 800b50a:	c008      	stmia	r0!, {r3}
 800b50c:	e7f7      	b.n	800b4fe <__copybits+0x32>

0800b50e <__any_on>:
 800b50e:	0002      	movs	r2, r0
 800b510:	6900      	ldr	r0, [r0, #16]
 800b512:	b510      	push	{r4, lr}
 800b514:	3214      	adds	r2, #20
 800b516:	114b      	asrs	r3, r1, #5
 800b518:	4298      	cmp	r0, r3
 800b51a:	db13      	blt.n	800b544 <__any_on+0x36>
 800b51c:	dd0c      	ble.n	800b538 <__any_on+0x2a>
 800b51e:	241f      	movs	r4, #31
 800b520:	0008      	movs	r0, r1
 800b522:	4020      	ands	r0, r4
 800b524:	4221      	tst	r1, r4
 800b526:	d007      	beq.n	800b538 <__any_on+0x2a>
 800b528:	0099      	lsls	r1, r3, #2
 800b52a:	588c      	ldr	r4, [r1, r2]
 800b52c:	0021      	movs	r1, r4
 800b52e:	40c1      	lsrs	r1, r0
 800b530:	4081      	lsls	r1, r0
 800b532:	2001      	movs	r0, #1
 800b534:	428c      	cmp	r4, r1
 800b536:	d104      	bne.n	800b542 <__any_on+0x34>
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	18d3      	adds	r3, r2, r3
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d803      	bhi.n	800b548 <__any_on+0x3a>
 800b540:	2000      	movs	r0, #0
 800b542:	bd10      	pop	{r4, pc}
 800b544:	0003      	movs	r3, r0
 800b546:	e7f7      	b.n	800b538 <__any_on+0x2a>
 800b548:	3b04      	subs	r3, #4
 800b54a:	6819      	ldr	r1, [r3, #0]
 800b54c:	2900      	cmp	r1, #0
 800b54e:	d0f5      	beq.n	800b53c <__any_on+0x2e>
 800b550:	2001      	movs	r0, #1
 800b552:	e7f6      	b.n	800b542 <__any_on+0x34>

0800b554 <_malloc_usable_size_r>:
 800b554:	1f0b      	subs	r3, r1, #4
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	1f18      	subs	r0, r3, #4
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	da01      	bge.n	800b562 <_malloc_usable_size_r+0xe>
 800b55e:	580b      	ldr	r3, [r1, r0]
 800b560:	18c0      	adds	r0, r0, r3
 800b562:	4770      	bx	lr

0800b564 <sulp>:
 800b564:	b570      	push	{r4, r5, r6, lr}
 800b566:	0016      	movs	r6, r2
 800b568:	000d      	movs	r5, r1
 800b56a:	f7ff feb9 	bl	800b2e0 <__ulp>
 800b56e:	2e00      	cmp	r6, #0
 800b570:	d00d      	beq.n	800b58e <sulp+0x2a>
 800b572:	236b      	movs	r3, #107	@ 0x6b
 800b574:	006a      	lsls	r2, r5, #1
 800b576:	0d52      	lsrs	r2, r2, #21
 800b578:	1a9b      	subs	r3, r3, r2
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	dd07      	ble.n	800b58e <sulp+0x2a>
 800b57e:	2400      	movs	r4, #0
 800b580:	4a03      	ldr	r2, [pc, #12]	@ (800b590 <sulp+0x2c>)
 800b582:	051b      	lsls	r3, r3, #20
 800b584:	189d      	adds	r5, r3, r2
 800b586:	002b      	movs	r3, r5
 800b588:	0022      	movs	r2, r4
 800b58a:	f7f6 faa1 	bl	8001ad0 <__aeabi_dmul>
 800b58e:	bd70      	pop	{r4, r5, r6, pc}
 800b590:	3ff00000 	.word	0x3ff00000

0800b594 <_strtod_l>:
 800b594:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b596:	b0a3      	sub	sp, #140	@ 0x8c
 800b598:	921b      	str	r2, [sp, #108]	@ 0x6c
 800b59a:	2200      	movs	r2, #0
 800b59c:	2600      	movs	r6, #0
 800b59e:	2700      	movs	r7, #0
 800b5a0:	9005      	str	r0, [sp, #20]
 800b5a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b5a4:	921e      	str	r2, [sp, #120]	@ 0x78
 800b5a6:	911d      	str	r1, [sp, #116]	@ 0x74
 800b5a8:	780a      	ldrb	r2, [r1, #0]
 800b5aa:	2a2b      	cmp	r2, #43	@ 0x2b
 800b5ac:	d053      	beq.n	800b656 <_strtod_l+0xc2>
 800b5ae:	d83f      	bhi.n	800b630 <_strtod_l+0x9c>
 800b5b0:	2a0d      	cmp	r2, #13
 800b5b2:	d839      	bhi.n	800b628 <_strtod_l+0x94>
 800b5b4:	2a08      	cmp	r2, #8
 800b5b6:	d839      	bhi.n	800b62c <_strtod_l+0x98>
 800b5b8:	2a00      	cmp	r2, #0
 800b5ba:	d042      	beq.n	800b642 <_strtod_l+0xae>
 800b5bc:	2200      	movs	r2, #0
 800b5be:	9212      	str	r2, [sp, #72]	@ 0x48
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800b5c4:	910c      	str	r1, [sp, #48]	@ 0x30
 800b5c6:	782a      	ldrb	r2, [r5, #0]
 800b5c8:	2a30      	cmp	r2, #48	@ 0x30
 800b5ca:	d000      	beq.n	800b5ce <_strtod_l+0x3a>
 800b5cc:	e083      	b.n	800b6d6 <_strtod_l+0x142>
 800b5ce:	786a      	ldrb	r2, [r5, #1]
 800b5d0:	3120      	adds	r1, #32
 800b5d2:	438a      	bics	r2, r1
 800b5d4:	2a58      	cmp	r2, #88	@ 0x58
 800b5d6:	d000      	beq.n	800b5da <_strtod_l+0x46>
 800b5d8:	e073      	b.n	800b6c2 <_strtod_l+0x12e>
 800b5da:	9302      	str	r3, [sp, #8]
 800b5dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b5de:	4a9b      	ldr	r2, [pc, #620]	@ (800b84c <_strtod_l+0x2b8>)
 800b5e0:	9301      	str	r3, [sp, #4]
 800b5e2:	ab1e      	add	r3, sp, #120	@ 0x78
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	9805      	ldr	r0, [sp, #20]
 800b5e8:	ab1f      	add	r3, sp, #124	@ 0x7c
 800b5ea:	a91d      	add	r1, sp, #116	@ 0x74
 800b5ec:	f001 f954 	bl	800c898 <__gethex>
 800b5f0:	230f      	movs	r3, #15
 800b5f2:	0002      	movs	r2, r0
 800b5f4:	401a      	ands	r2, r3
 800b5f6:	0004      	movs	r4, r0
 800b5f8:	9206      	str	r2, [sp, #24]
 800b5fa:	4218      	tst	r0, r3
 800b5fc:	d005      	beq.n	800b60a <_strtod_l+0x76>
 800b5fe:	2a06      	cmp	r2, #6
 800b600:	d12b      	bne.n	800b65a <_strtod_l+0xc6>
 800b602:	2300      	movs	r3, #0
 800b604:	3501      	adds	r5, #1
 800b606:	951d      	str	r5, [sp, #116]	@ 0x74
 800b608:	9312      	str	r3, [sp, #72]	@ 0x48
 800b60a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d002      	beq.n	800b616 <_strtod_l+0x82>
 800b610:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b612:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b614:	6013      	str	r3, [r2, #0]
 800b616:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d019      	beq.n	800b650 <_strtod_l+0xbc>
 800b61c:	2380      	movs	r3, #128	@ 0x80
 800b61e:	0030      	movs	r0, r6
 800b620:	061b      	lsls	r3, r3, #24
 800b622:	18f9      	adds	r1, r7, r3
 800b624:	b023      	add	sp, #140	@ 0x8c
 800b626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b628:	2a20      	cmp	r2, #32
 800b62a:	d1c7      	bne.n	800b5bc <_strtod_l+0x28>
 800b62c:	3101      	adds	r1, #1
 800b62e:	e7ba      	b.n	800b5a6 <_strtod_l+0x12>
 800b630:	2a2d      	cmp	r2, #45	@ 0x2d
 800b632:	d1c3      	bne.n	800b5bc <_strtod_l+0x28>
 800b634:	3a2c      	subs	r2, #44	@ 0x2c
 800b636:	9212      	str	r2, [sp, #72]	@ 0x48
 800b638:	1c4a      	adds	r2, r1, #1
 800b63a:	921d      	str	r2, [sp, #116]	@ 0x74
 800b63c:	784a      	ldrb	r2, [r1, #1]
 800b63e:	2a00      	cmp	r2, #0
 800b640:	d1be      	bne.n	800b5c0 <_strtod_l+0x2c>
 800b642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b644:	931d      	str	r3, [sp, #116]	@ 0x74
 800b646:	2300      	movs	r3, #0
 800b648:	9312      	str	r3, [sp, #72]	@ 0x48
 800b64a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1df      	bne.n	800b610 <_strtod_l+0x7c>
 800b650:	0030      	movs	r0, r6
 800b652:	0039      	movs	r1, r7
 800b654:	e7e6      	b.n	800b624 <_strtod_l+0x90>
 800b656:	2200      	movs	r2, #0
 800b658:	e7ed      	b.n	800b636 <_strtod_l+0xa2>
 800b65a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800b65c:	2a00      	cmp	r2, #0
 800b65e:	d007      	beq.n	800b670 <_strtod_l+0xdc>
 800b660:	2135      	movs	r1, #53	@ 0x35
 800b662:	a820      	add	r0, sp, #128	@ 0x80
 800b664:	f7ff ff32 	bl	800b4cc <__copybits>
 800b668:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800b66a:	9805      	ldr	r0, [sp, #20]
 800b66c:	f7ff faf4 	bl	800ac58 <_Bfree>
 800b670:	9806      	ldr	r0, [sp, #24]
 800b672:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800b674:	3801      	subs	r0, #1
 800b676:	2804      	cmp	r0, #4
 800b678:	d806      	bhi.n	800b688 <_strtod_l+0xf4>
 800b67a:	f7f4 fd57 	bl	800012c <__gnu_thumb1_case_uqi>
 800b67e:	0312      	.short	0x0312
 800b680:	1e1c      	.short	0x1e1c
 800b682:	12          	.byte	0x12
 800b683:	00          	.byte	0x00
 800b684:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b686:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800b688:	05e4      	lsls	r4, r4, #23
 800b68a:	d502      	bpl.n	800b692 <_strtod_l+0xfe>
 800b68c:	2380      	movs	r3, #128	@ 0x80
 800b68e:	061b      	lsls	r3, r3, #24
 800b690:	431f      	orrs	r7, r3
 800b692:	4b6f      	ldr	r3, [pc, #444]	@ (800b850 <_strtod_l+0x2bc>)
 800b694:	423b      	tst	r3, r7
 800b696:	d1b8      	bne.n	800b60a <_strtod_l+0x76>
 800b698:	f7fe fb94 	bl	8009dc4 <__errno>
 800b69c:	2322      	movs	r3, #34	@ 0x22
 800b69e:	6003      	str	r3, [r0, #0]
 800b6a0:	e7b3      	b.n	800b60a <_strtod_l+0x76>
 800b6a2:	496c      	ldr	r1, [pc, #432]	@ (800b854 <_strtod_l+0x2c0>)
 800b6a4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b6a6:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b6a8:	400a      	ands	r2, r1
 800b6aa:	496b      	ldr	r1, [pc, #428]	@ (800b858 <_strtod_l+0x2c4>)
 800b6ac:	185b      	adds	r3, r3, r1
 800b6ae:	051b      	lsls	r3, r3, #20
 800b6b0:	431a      	orrs	r2, r3
 800b6b2:	0017      	movs	r7, r2
 800b6b4:	e7e8      	b.n	800b688 <_strtod_l+0xf4>
 800b6b6:	4f66      	ldr	r7, [pc, #408]	@ (800b850 <_strtod_l+0x2bc>)
 800b6b8:	e7e6      	b.n	800b688 <_strtod_l+0xf4>
 800b6ba:	2601      	movs	r6, #1
 800b6bc:	4f67      	ldr	r7, [pc, #412]	@ (800b85c <_strtod_l+0x2c8>)
 800b6be:	4276      	negs	r6, r6
 800b6c0:	e7e2      	b.n	800b688 <_strtod_l+0xf4>
 800b6c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b6c4:	1c5a      	adds	r2, r3, #1
 800b6c6:	921d      	str	r2, [sp, #116]	@ 0x74
 800b6c8:	785b      	ldrb	r3, [r3, #1]
 800b6ca:	2b30      	cmp	r3, #48	@ 0x30
 800b6cc:	d0f9      	beq.n	800b6c2 <_strtod_l+0x12e>
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d09b      	beq.n	800b60a <_strtod_l+0x76>
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800b6d6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b6d8:	220a      	movs	r2, #10
 800b6da:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b6dc:	2300      	movs	r3, #0
 800b6de:	9310      	str	r3, [sp, #64]	@ 0x40
 800b6e0:	930d      	str	r3, [sp, #52]	@ 0x34
 800b6e2:	9308      	str	r3, [sp, #32]
 800b6e4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800b6e6:	7804      	ldrb	r4, [r0, #0]
 800b6e8:	0023      	movs	r3, r4
 800b6ea:	3b30      	subs	r3, #48	@ 0x30
 800b6ec:	b2d9      	uxtb	r1, r3
 800b6ee:	2909      	cmp	r1, #9
 800b6f0:	d927      	bls.n	800b742 <_strtod_l+0x1ae>
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	495a      	ldr	r1, [pc, #360]	@ (800b860 <_strtod_l+0x2cc>)
 800b6f6:	f000 ffe0 	bl	800c6ba <strncmp>
 800b6fa:	2800      	cmp	r0, #0
 800b6fc:	d033      	beq.n	800b766 <_strtod_l+0x1d2>
 800b6fe:	2000      	movs	r0, #0
 800b700:	0023      	movs	r3, r4
 800b702:	4684      	mov	ip, r0
 800b704:	9a08      	ldr	r2, [sp, #32]
 800b706:	900e      	str	r0, [sp, #56]	@ 0x38
 800b708:	9206      	str	r2, [sp, #24]
 800b70a:	2220      	movs	r2, #32
 800b70c:	0019      	movs	r1, r3
 800b70e:	4391      	bics	r1, r2
 800b710:	000a      	movs	r2, r1
 800b712:	2100      	movs	r1, #0
 800b714:	9107      	str	r1, [sp, #28]
 800b716:	2a45      	cmp	r2, #69	@ 0x45
 800b718:	d000      	beq.n	800b71c <_strtod_l+0x188>
 800b71a:	e0cb      	b.n	800b8b4 <_strtod_l+0x320>
 800b71c:	9b06      	ldr	r3, [sp, #24]
 800b71e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b720:	4303      	orrs	r3, r0
 800b722:	4313      	orrs	r3, r2
 800b724:	428b      	cmp	r3, r1
 800b726:	d08c      	beq.n	800b642 <_strtod_l+0xae>
 800b728:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b72a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b72c:	3301      	adds	r3, #1
 800b72e:	931d      	str	r3, [sp, #116]	@ 0x74
 800b730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b732:	785b      	ldrb	r3, [r3, #1]
 800b734:	2b2b      	cmp	r3, #43	@ 0x2b
 800b736:	d07b      	beq.n	800b830 <_strtod_l+0x29c>
 800b738:	000c      	movs	r4, r1
 800b73a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b73c:	d17e      	bne.n	800b83c <_strtod_l+0x2a8>
 800b73e:	2401      	movs	r4, #1
 800b740:	e077      	b.n	800b832 <_strtod_l+0x29e>
 800b742:	9908      	ldr	r1, [sp, #32]
 800b744:	2908      	cmp	r1, #8
 800b746:	dc09      	bgt.n	800b75c <_strtod_l+0x1c8>
 800b748:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b74a:	4351      	muls	r1, r2
 800b74c:	185b      	adds	r3, r3, r1
 800b74e:	930d      	str	r3, [sp, #52]	@ 0x34
 800b750:	9b08      	ldr	r3, [sp, #32]
 800b752:	3001      	adds	r0, #1
 800b754:	3301      	adds	r3, #1
 800b756:	9308      	str	r3, [sp, #32]
 800b758:	901d      	str	r0, [sp, #116]	@ 0x74
 800b75a:	e7c3      	b.n	800b6e4 <_strtod_l+0x150>
 800b75c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800b75e:	4355      	muls	r5, r2
 800b760:	195b      	adds	r3, r3, r5
 800b762:	9310      	str	r3, [sp, #64]	@ 0x40
 800b764:	e7f4      	b.n	800b750 <_strtod_l+0x1bc>
 800b766:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	921d      	str	r2, [sp, #116]	@ 0x74
 800b76c:	9a08      	ldr	r2, [sp, #32]
 800b76e:	785b      	ldrb	r3, [r3, #1]
 800b770:	2a00      	cmp	r2, #0
 800b772:	d03e      	beq.n	800b7f2 <_strtod_l+0x25e>
 800b774:	900e      	str	r0, [sp, #56]	@ 0x38
 800b776:	9206      	str	r2, [sp, #24]
 800b778:	001a      	movs	r2, r3
 800b77a:	3a30      	subs	r2, #48	@ 0x30
 800b77c:	2a09      	cmp	r2, #9
 800b77e:	d912      	bls.n	800b7a6 <_strtod_l+0x212>
 800b780:	2201      	movs	r2, #1
 800b782:	4694      	mov	ip, r2
 800b784:	e7c1      	b.n	800b70a <_strtod_l+0x176>
 800b786:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b788:	3001      	adds	r0, #1
 800b78a:	1c5a      	adds	r2, r3, #1
 800b78c:	921d      	str	r2, [sp, #116]	@ 0x74
 800b78e:	785b      	ldrb	r3, [r3, #1]
 800b790:	2b30      	cmp	r3, #48	@ 0x30
 800b792:	d0f8      	beq.n	800b786 <_strtod_l+0x1f2>
 800b794:	001a      	movs	r2, r3
 800b796:	3a31      	subs	r2, #49	@ 0x31
 800b798:	2a08      	cmp	r2, #8
 800b79a:	d844      	bhi.n	800b826 <_strtod_l+0x292>
 800b79c:	900e      	str	r0, [sp, #56]	@ 0x38
 800b79e:	2000      	movs	r0, #0
 800b7a0:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b7a2:	9006      	str	r0, [sp, #24]
 800b7a4:	9213      	str	r2, [sp, #76]	@ 0x4c
 800b7a6:	001c      	movs	r4, r3
 800b7a8:	1c42      	adds	r2, r0, #1
 800b7aa:	3c30      	subs	r4, #48	@ 0x30
 800b7ac:	2b30      	cmp	r3, #48	@ 0x30
 800b7ae:	d01a      	beq.n	800b7e6 <_strtod_l+0x252>
 800b7b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7b2:	9906      	ldr	r1, [sp, #24]
 800b7b4:	189b      	adds	r3, r3, r2
 800b7b6:	930e      	str	r3, [sp, #56]	@ 0x38
 800b7b8:	230a      	movs	r3, #10
 800b7ba:	469c      	mov	ip, r3
 800b7bc:	9d06      	ldr	r5, [sp, #24]
 800b7be:	1c4b      	adds	r3, r1, #1
 800b7c0:	1b5d      	subs	r5, r3, r5
 800b7c2:	42aa      	cmp	r2, r5
 800b7c4:	dc17      	bgt.n	800b7f6 <_strtod_l+0x262>
 800b7c6:	43c3      	mvns	r3, r0
 800b7c8:	9a06      	ldr	r2, [sp, #24]
 800b7ca:	17db      	asrs	r3, r3, #31
 800b7cc:	4003      	ands	r3, r0
 800b7ce:	18d1      	adds	r1, r2, r3
 800b7d0:	3201      	adds	r2, #1
 800b7d2:	18d3      	adds	r3, r2, r3
 800b7d4:	9306      	str	r3, [sp, #24]
 800b7d6:	2908      	cmp	r1, #8
 800b7d8:	dc1c      	bgt.n	800b814 <_strtod_l+0x280>
 800b7da:	230a      	movs	r3, #10
 800b7dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b7de:	4353      	muls	r3, r2
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	18e3      	adds	r3, r4, r3
 800b7e4:	930d      	str	r3, [sp, #52]	@ 0x34
 800b7e6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b7e8:	0010      	movs	r0, r2
 800b7ea:	1c59      	adds	r1, r3, #1
 800b7ec:	911d      	str	r1, [sp, #116]	@ 0x74
 800b7ee:	785b      	ldrb	r3, [r3, #1]
 800b7f0:	e7c2      	b.n	800b778 <_strtod_l+0x1e4>
 800b7f2:	9808      	ldr	r0, [sp, #32]
 800b7f4:	e7cc      	b.n	800b790 <_strtod_l+0x1fc>
 800b7f6:	2908      	cmp	r1, #8
 800b7f8:	dc05      	bgt.n	800b806 <_strtod_l+0x272>
 800b7fa:	4665      	mov	r5, ip
 800b7fc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800b7fe:	4369      	muls	r1, r5
 800b800:	910d      	str	r1, [sp, #52]	@ 0x34
 800b802:	0019      	movs	r1, r3
 800b804:	e7da      	b.n	800b7bc <_strtod_l+0x228>
 800b806:	2b10      	cmp	r3, #16
 800b808:	dcfb      	bgt.n	800b802 <_strtod_l+0x26e>
 800b80a:	4661      	mov	r1, ip
 800b80c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800b80e:	434d      	muls	r5, r1
 800b810:	9510      	str	r5, [sp, #64]	@ 0x40
 800b812:	e7f6      	b.n	800b802 <_strtod_l+0x26e>
 800b814:	2200      	movs	r2, #0
 800b816:	290f      	cmp	r1, #15
 800b818:	dce5      	bgt.n	800b7e6 <_strtod_l+0x252>
 800b81a:	230a      	movs	r3, #10
 800b81c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800b81e:	435d      	muls	r5, r3
 800b820:	1963      	adds	r3, r4, r5
 800b822:	9310      	str	r3, [sp, #64]	@ 0x40
 800b824:	e7df      	b.n	800b7e6 <_strtod_l+0x252>
 800b826:	2200      	movs	r2, #0
 800b828:	920e      	str	r2, [sp, #56]	@ 0x38
 800b82a:	9206      	str	r2, [sp, #24]
 800b82c:	3201      	adds	r2, #1
 800b82e:	e7a8      	b.n	800b782 <_strtod_l+0x1ee>
 800b830:	2400      	movs	r4, #0
 800b832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b834:	3302      	adds	r3, #2
 800b836:	931d      	str	r3, [sp, #116]	@ 0x74
 800b838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b83a:	789b      	ldrb	r3, [r3, #2]
 800b83c:	001a      	movs	r2, r3
 800b83e:	3a30      	subs	r2, #48	@ 0x30
 800b840:	2a09      	cmp	r2, #9
 800b842:	d913      	bls.n	800b86c <_strtod_l+0x2d8>
 800b844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b846:	921d      	str	r2, [sp, #116]	@ 0x74
 800b848:	2200      	movs	r2, #0
 800b84a:	e032      	b.n	800b8b2 <_strtod_l+0x31e>
 800b84c:	0800d6fc 	.word	0x0800d6fc
 800b850:	7ff00000 	.word	0x7ff00000
 800b854:	ffefffff 	.word	0xffefffff
 800b858:	00000433 	.word	0x00000433
 800b85c:	7fffffff 	.word	0x7fffffff
 800b860:	0800d534 	.word	0x0800d534
 800b864:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b866:	1c5a      	adds	r2, r3, #1
 800b868:	921d      	str	r2, [sp, #116]	@ 0x74
 800b86a:	785b      	ldrb	r3, [r3, #1]
 800b86c:	2b30      	cmp	r3, #48	@ 0x30
 800b86e:	d0f9      	beq.n	800b864 <_strtod_l+0x2d0>
 800b870:	2200      	movs	r2, #0
 800b872:	9207      	str	r2, [sp, #28]
 800b874:	001a      	movs	r2, r3
 800b876:	3a31      	subs	r2, #49	@ 0x31
 800b878:	2a08      	cmp	r2, #8
 800b87a:	d81b      	bhi.n	800b8b4 <_strtod_l+0x320>
 800b87c:	3b30      	subs	r3, #48	@ 0x30
 800b87e:	001a      	movs	r2, r3
 800b880:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b882:	9307      	str	r3, [sp, #28]
 800b884:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b886:	1c59      	adds	r1, r3, #1
 800b888:	911d      	str	r1, [sp, #116]	@ 0x74
 800b88a:	785b      	ldrb	r3, [r3, #1]
 800b88c:	001d      	movs	r5, r3
 800b88e:	3d30      	subs	r5, #48	@ 0x30
 800b890:	2d09      	cmp	r5, #9
 800b892:	d93a      	bls.n	800b90a <_strtod_l+0x376>
 800b894:	9d07      	ldr	r5, [sp, #28]
 800b896:	1b49      	subs	r1, r1, r5
 800b898:	000d      	movs	r5, r1
 800b89a:	49b3      	ldr	r1, [pc, #716]	@ (800bb68 <_strtod_l+0x5d4>)
 800b89c:	9107      	str	r1, [sp, #28]
 800b89e:	2d08      	cmp	r5, #8
 800b8a0:	dc03      	bgt.n	800b8aa <_strtod_l+0x316>
 800b8a2:	9207      	str	r2, [sp, #28]
 800b8a4:	428a      	cmp	r2, r1
 800b8a6:	dd00      	ble.n	800b8aa <_strtod_l+0x316>
 800b8a8:	9107      	str	r1, [sp, #28]
 800b8aa:	2c00      	cmp	r4, #0
 800b8ac:	d002      	beq.n	800b8b4 <_strtod_l+0x320>
 800b8ae:	9a07      	ldr	r2, [sp, #28]
 800b8b0:	4252      	negs	r2, r2
 800b8b2:	9207      	str	r2, [sp, #28]
 800b8b4:	9a06      	ldr	r2, [sp, #24]
 800b8b6:	2a00      	cmp	r2, #0
 800b8b8:	d14b      	bne.n	800b952 <_strtod_l+0x3be>
 800b8ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b8bc:	4310      	orrs	r0, r2
 800b8be:	d000      	beq.n	800b8c2 <_strtod_l+0x32e>
 800b8c0:	e6a3      	b.n	800b60a <_strtod_l+0x76>
 800b8c2:	4662      	mov	r2, ip
 800b8c4:	2a00      	cmp	r2, #0
 800b8c6:	d000      	beq.n	800b8ca <_strtod_l+0x336>
 800b8c8:	e6bb      	b.n	800b642 <_strtod_l+0xae>
 800b8ca:	2b69      	cmp	r3, #105	@ 0x69
 800b8cc:	d025      	beq.n	800b91a <_strtod_l+0x386>
 800b8ce:	dc21      	bgt.n	800b914 <_strtod_l+0x380>
 800b8d0:	2b49      	cmp	r3, #73	@ 0x49
 800b8d2:	d022      	beq.n	800b91a <_strtod_l+0x386>
 800b8d4:	2b4e      	cmp	r3, #78	@ 0x4e
 800b8d6:	d000      	beq.n	800b8da <_strtod_l+0x346>
 800b8d8:	e6b3      	b.n	800b642 <_strtod_l+0xae>
 800b8da:	49a4      	ldr	r1, [pc, #656]	@ (800bb6c <_strtod_l+0x5d8>)
 800b8dc:	a81d      	add	r0, sp, #116	@ 0x74
 800b8de:	f001 fa11 	bl	800cd04 <__match>
 800b8e2:	2800      	cmp	r0, #0
 800b8e4:	d100      	bne.n	800b8e8 <_strtod_l+0x354>
 800b8e6:	e6ac      	b.n	800b642 <_strtod_l+0xae>
 800b8e8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	2b28      	cmp	r3, #40	@ 0x28
 800b8ee:	d12a      	bne.n	800b946 <_strtod_l+0x3b2>
 800b8f0:	499f      	ldr	r1, [pc, #636]	@ (800bb70 <_strtod_l+0x5dc>)
 800b8f2:	aa20      	add	r2, sp, #128	@ 0x80
 800b8f4:	a81d      	add	r0, sp, #116	@ 0x74
 800b8f6:	f001 fa19 	bl	800cd2c <__hexnan>
 800b8fa:	2805      	cmp	r0, #5
 800b8fc:	d123      	bne.n	800b946 <_strtod_l+0x3b2>
 800b8fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b900:	4a9c      	ldr	r2, [pc, #624]	@ (800bb74 <_strtod_l+0x5e0>)
 800b902:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800b904:	431a      	orrs	r2, r3
 800b906:	0017      	movs	r7, r2
 800b908:	e67f      	b.n	800b60a <_strtod_l+0x76>
 800b90a:	210a      	movs	r1, #10
 800b90c:	434a      	muls	r2, r1
 800b90e:	18d2      	adds	r2, r2, r3
 800b910:	3a30      	subs	r2, #48	@ 0x30
 800b912:	e7b7      	b.n	800b884 <_strtod_l+0x2f0>
 800b914:	2b6e      	cmp	r3, #110	@ 0x6e
 800b916:	d0e0      	beq.n	800b8da <_strtod_l+0x346>
 800b918:	e693      	b.n	800b642 <_strtod_l+0xae>
 800b91a:	4997      	ldr	r1, [pc, #604]	@ (800bb78 <_strtod_l+0x5e4>)
 800b91c:	a81d      	add	r0, sp, #116	@ 0x74
 800b91e:	f001 f9f1 	bl	800cd04 <__match>
 800b922:	2800      	cmp	r0, #0
 800b924:	d100      	bne.n	800b928 <_strtod_l+0x394>
 800b926:	e68c      	b.n	800b642 <_strtod_l+0xae>
 800b928:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b92a:	4994      	ldr	r1, [pc, #592]	@ (800bb7c <_strtod_l+0x5e8>)
 800b92c:	3b01      	subs	r3, #1
 800b92e:	a81d      	add	r0, sp, #116	@ 0x74
 800b930:	931d      	str	r3, [sp, #116]	@ 0x74
 800b932:	f001 f9e7 	bl	800cd04 <__match>
 800b936:	2800      	cmp	r0, #0
 800b938:	d102      	bne.n	800b940 <_strtod_l+0x3ac>
 800b93a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b93c:	3301      	adds	r3, #1
 800b93e:	931d      	str	r3, [sp, #116]	@ 0x74
 800b940:	2600      	movs	r6, #0
 800b942:	4f8c      	ldr	r7, [pc, #560]	@ (800bb74 <_strtod_l+0x5e0>)
 800b944:	e661      	b.n	800b60a <_strtod_l+0x76>
 800b946:	488e      	ldr	r0, [pc, #568]	@ (800bb80 <_strtod_l+0x5ec>)
 800b948:	f000 feec 	bl	800c724 <nan>
 800b94c:	0006      	movs	r6, r0
 800b94e:	000f      	movs	r7, r1
 800b950:	e65b      	b.n	800b60a <_strtod_l+0x76>
 800b952:	9b07      	ldr	r3, [sp, #28]
 800b954:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b956:	1a9b      	subs	r3, r3, r2
 800b958:	930c      	str	r3, [sp, #48]	@ 0x30
 800b95a:	9b08      	ldr	r3, [sp, #32]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d101      	bne.n	800b964 <_strtod_l+0x3d0>
 800b960:	9b06      	ldr	r3, [sp, #24]
 800b962:	9308      	str	r3, [sp, #32]
 800b964:	9c06      	ldr	r4, [sp, #24]
 800b966:	2c10      	cmp	r4, #16
 800b968:	dd00      	ble.n	800b96c <_strtod_l+0x3d8>
 800b96a:	2410      	movs	r4, #16
 800b96c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800b96e:	f7f7 f82b 	bl	80029c8 <__aeabi_ui2d>
 800b972:	9b06      	ldr	r3, [sp, #24]
 800b974:	0006      	movs	r6, r0
 800b976:	000f      	movs	r7, r1
 800b978:	2b09      	cmp	r3, #9
 800b97a:	dc13      	bgt.n	800b9a4 <_strtod_l+0x410>
 800b97c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d100      	bne.n	800b984 <_strtod_l+0x3f0>
 800b982:	e642      	b.n	800b60a <_strtod_l+0x76>
 800b984:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b986:	2b00      	cmp	r3, #0
 800b988:	dc00      	bgt.n	800b98c <_strtod_l+0x3f8>
 800b98a:	e07e      	b.n	800ba8a <_strtod_l+0x4f6>
 800b98c:	2b16      	cmp	r3, #22
 800b98e:	dc63      	bgt.n	800ba58 <_strtod_l+0x4c4>
 800b990:	497c      	ldr	r1, [pc, #496]	@ (800bb84 <_strtod_l+0x5f0>)
 800b992:	00db      	lsls	r3, r3, #3
 800b994:	18c9      	adds	r1, r1, r3
 800b996:	0032      	movs	r2, r6
 800b998:	6808      	ldr	r0, [r1, #0]
 800b99a:	6849      	ldr	r1, [r1, #4]
 800b99c:	003b      	movs	r3, r7
 800b99e:	f7f6 f897 	bl	8001ad0 <__aeabi_dmul>
 800b9a2:	e7d3      	b.n	800b94c <_strtod_l+0x3b8>
 800b9a4:	0022      	movs	r2, r4
 800b9a6:	4b77      	ldr	r3, [pc, #476]	@ (800bb84 <_strtod_l+0x5f0>)
 800b9a8:	3a09      	subs	r2, #9
 800b9aa:	00d2      	lsls	r2, r2, #3
 800b9ac:	189b      	adds	r3, r3, r2
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	f7f6 f88d 	bl	8001ad0 <__aeabi_dmul>
 800b9b6:	0006      	movs	r6, r0
 800b9b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b9ba:	000f      	movs	r7, r1
 800b9bc:	f7f7 f804 	bl	80029c8 <__aeabi_ui2d>
 800b9c0:	000b      	movs	r3, r1
 800b9c2:	0002      	movs	r2, r0
 800b9c4:	0039      	movs	r1, r7
 800b9c6:	0030      	movs	r0, r6
 800b9c8:	f7f5 f882 	bl	8000ad0 <__aeabi_dadd>
 800b9cc:	9b06      	ldr	r3, [sp, #24]
 800b9ce:	0006      	movs	r6, r0
 800b9d0:	000f      	movs	r7, r1
 800b9d2:	2b0f      	cmp	r3, #15
 800b9d4:	ddd2      	ble.n	800b97c <_strtod_l+0x3e8>
 800b9d6:	9b06      	ldr	r3, [sp, #24]
 800b9d8:	1b1c      	subs	r4, r3, r4
 800b9da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b9dc:	18e4      	adds	r4, r4, r3
 800b9de:	2c00      	cmp	r4, #0
 800b9e0:	dc00      	bgt.n	800b9e4 <_strtod_l+0x450>
 800b9e2:	e09b      	b.n	800bb1c <_strtod_l+0x588>
 800b9e4:	220f      	movs	r2, #15
 800b9e6:	0023      	movs	r3, r4
 800b9e8:	4013      	ands	r3, r2
 800b9ea:	4214      	tst	r4, r2
 800b9ec:	d00a      	beq.n	800ba04 <_strtod_l+0x470>
 800b9ee:	4965      	ldr	r1, [pc, #404]	@ (800bb84 <_strtod_l+0x5f0>)
 800b9f0:	00db      	lsls	r3, r3, #3
 800b9f2:	18c9      	adds	r1, r1, r3
 800b9f4:	0032      	movs	r2, r6
 800b9f6:	6808      	ldr	r0, [r1, #0]
 800b9f8:	6849      	ldr	r1, [r1, #4]
 800b9fa:	003b      	movs	r3, r7
 800b9fc:	f7f6 f868 	bl	8001ad0 <__aeabi_dmul>
 800ba00:	0006      	movs	r6, r0
 800ba02:	000f      	movs	r7, r1
 800ba04:	230f      	movs	r3, #15
 800ba06:	439c      	bics	r4, r3
 800ba08:	d073      	beq.n	800baf2 <_strtod_l+0x55e>
 800ba0a:	3326      	adds	r3, #38	@ 0x26
 800ba0c:	33ff      	adds	r3, #255	@ 0xff
 800ba0e:	429c      	cmp	r4, r3
 800ba10:	dd4b      	ble.n	800baaa <_strtod_l+0x516>
 800ba12:	2300      	movs	r3, #0
 800ba14:	9306      	str	r3, [sp, #24]
 800ba16:	9307      	str	r3, [sp, #28]
 800ba18:	930d      	str	r3, [sp, #52]	@ 0x34
 800ba1a:	9308      	str	r3, [sp, #32]
 800ba1c:	2322      	movs	r3, #34	@ 0x22
 800ba1e:	2600      	movs	r6, #0
 800ba20:	9a05      	ldr	r2, [sp, #20]
 800ba22:	4f54      	ldr	r7, [pc, #336]	@ (800bb74 <_strtod_l+0x5e0>)
 800ba24:	6013      	str	r3, [r2, #0]
 800ba26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ba28:	42b3      	cmp	r3, r6
 800ba2a:	d100      	bne.n	800ba2e <_strtod_l+0x49a>
 800ba2c:	e5ed      	b.n	800b60a <_strtod_l+0x76>
 800ba2e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800ba30:	9805      	ldr	r0, [sp, #20]
 800ba32:	f7ff f911 	bl	800ac58 <_Bfree>
 800ba36:	9908      	ldr	r1, [sp, #32]
 800ba38:	9805      	ldr	r0, [sp, #20]
 800ba3a:	f7ff f90d 	bl	800ac58 <_Bfree>
 800ba3e:	9907      	ldr	r1, [sp, #28]
 800ba40:	9805      	ldr	r0, [sp, #20]
 800ba42:	f7ff f909 	bl	800ac58 <_Bfree>
 800ba46:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ba48:	9805      	ldr	r0, [sp, #20]
 800ba4a:	f7ff f905 	bl	800ac58 <_Bfree>
 800ba4e:	9906      	ldr	r1, [sp, #24]
 800ba50:	9805      	ldr	r0, [sp, #20]
 800ba52:	f7ff f901 	bl	800ac58 <_Bfree>
 800ba56:	e5d8      	b.n	800b60a <_strtod_l+0x76>
 800ba58:	2325      	movs	r3, #37	@ 0x25
 800ba5a:	9a06      	ldr	r2, [sp, #24]
 800ba5c:	1a9b      	subs	r3, r3, r2
 800ba5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ba60:	4293      	cmp	r3, r2
 800ba62:	dbb8      	blt.n	800b9d6 <_strtod_l+0x442>
 800ba64:	240f      	movs	r4, #15
 800ba66:	9b06      	ldr	r3, [sp, #24]
 800ba68:	4d46      	ldr	r5, [pc, #280]	@ (800bb84 <_strtod_l+0x5f0>)
 800ba6a:	1ae4      	subs	r4, r4, r3
 800ba6c:	00e1      	lsls	r1, r4, #3
 800ba6e:	1869      	adds	r1, r5, r1
 800ba70:	0032      	movs	r2, r6
 800ba72:	6808      	ldr	r0, [r1, #0]
 800ba74:	6849      	ldr	r1, [r1, #4]
 800ba76:	003b      	movs	r3, r7
 800ba78:	f7f6 f82a 	bl	8001ad0 <__aeabi_dmul>
 800ba7c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba7e:	1b1c      	subs	r4, r3, r4
 800ba80:	00e4      	lsls	r4, r4, #3
 800ba82:	192d      	adds	r5, r5, r4
 800ba84:	682a      	ldr	r2, [r5, #0]
 800ba86:	686b      	ldr	r3, [r5, #4]
 800ba88:	e789      	b.n	800b99e <_strtod_l+0x40a>
 800ba8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba8c:	3316      	adds	r3, #22
 800ba8e:	dba2      	blt.n	800b9d6 <_strtod_l+0x442>
 800ba90:	9907      	ldr	r1, [sp, #28]
 800ba92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba94:	4b3b      	ldr	r3, [pc, #236]	@ (800bb84 <_strtod_l+0x5f0>)
 800ba96:	1a52      	subs	r2, r2, r1
 800ba98:	00d2      	lsls	r2, r2, #3
 800ba9a:	189b      	adds	r3, r3, r2
 800ba9c:	0030      	movs	r0, r6
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	0039      	movs	r1, r7
 800baa4:	f7f5 fbda 	bl	800125c <__aeabi_ddiv>
 800baa8:	e750      	b.n	800b94c <_strtod_l+0x3b8>
 800baaa:	2300      	movs	r3, #0
 800baac:	0030      	movs	r0, r6
 800baae:	0039      	movs	r1, r7
 800bab0:	4d35      	ldr	r5, [pc, #212]	@ (800bb88 <_strtod_l+0x5f4>)
 800bab2:	1124      	asrs	r4, r4, #4
 800bab4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bab6:	2c01      	cmp	r4, #1
 800bab8:	dc1e      	bgt.n	800baf8 <_strtod_l+0x564>
 800baba:	2b00      	cmp	r3, #0
 800babc:	d001      	beq.n	800bac2 <_strtod_l+0x52e>
 800babe:	0006      	movs	r6, r0
 800bac0:	000f      	movs	r7, r1
 800bac2:	4b32      	ldr	r3, [pc, #200]	@ (800bb8c <_strtod_l+0x5f8>)
 800bac4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bac6:	18ff      	adds	r7, r7, r3
 800bac8:	4b2f      	ldr	r3, [pc, #188]	@ (800bb88 <_strtod_l+0x5f4>)
 800baca:	00d5      	lsls	r5, r2, #3
 800bacc:	195d      	adds	r5, r3, r5
 800bace:	0032      	movs	r2, r6
 800bad0:	6828      	ldr	r0, [r5, #0]
 800bad2:	6869      	ldr	r1, [r5, #4]
 800bad4:	003b      	movs	r3, r7
 800bad6:	f7f5 fffb 	bl	8001ad0 <__aeabi_dmul>
 800bada:	4b26      	ldr	r3, [pc, #152]	@ (800bb74 <_strtod_l+0x5e0>)
 800badc:	4a2c      	ldr	r2, [pc, #176]	@ (800bb90 <_strtod_l+0x5fc>)
 800bade:	0006      	movs	r6, r0
 800bae0:	400b      	ands	r3, r1
 800bae2:	4293      	cmp	r3, r2
 800bae4:	d895      	bhi.n	800ba12 <_strtod_l+0x47e>
 800bae6:	4a2b      	ldr	r2, [pc, #172]	@ (800bb94 <_strtod_l+0x600>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d913      	bls.n	800bb14 <_strtod_l+0x580>
 800baec:	2601      	movs	r6, #1
 800baee:	4f2a      	ldr	r7, [pc, #168]	@ (800bb98 <_strtod_l+0x604>)
 800baf0:	4276      	negs	r6, r6
 800baf2:	2300      	movs	r3, #0
 800baf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800baf6:	e086      	b.n	800bc06 <_strtod_l+0x672>
 800baf8:	2201      	movs	r2, #1
 800bafa:	4214      	tst	r4, r2
 800bafc:	d004      	beq.n	800bb08 <_strtod_l+0x574>
 800bafe:	682a      	ldr	r2, [r5, #0]
 800bb00:	686b      	ldr	r3, [r5, #4]
 800bb02:	f7f5 ffe5 	bl	8001ad0 <__aeabi_dmul>
 800bb06:	2301      	movs	r3, #1
 800bb08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb0a:	1064      	asrs	r4, r4, #1
 800bb0c:	3201      	adds	r2, #1
 800bb0e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb10:	3508      	adds	r5, #8
 800bb12:	e7d0      	b.n	800bab6 <_strtod_l+0x522>
 800bb14:	23d4      	movs	r3, #212	@ 0xd4
 800bb16:	049b      	lsls	r3, r3, #18
 800bb18:	18cf      	adds	r7, r1, r3
 800bb1a:	e7ea      	b.n	800baf2 <_strtod_l+0x55e>
 800bb1c:	2c00      	cmp	r4, #0
 800bb1e:	d0e8      	beq.n	800baf2 <_strtod_l+0x55e>
 800bb20:	4264      	negs	r4, r4
 800bb22:	230f      	movs	r3, #15
 800bb24:	0022      	movs	r2, r4
 800bb26:	401a      	ands	r2, r3
 800bb28:	421c      	tst	r4, r3
 800bb2a:	d00a      	beq.n	800bb42 <_strtod_l+0x5ae>
 800bb2c:	4b15      	ldr	r3, [pc, #84]	@ (800bb84 <_strtod_l+0x5f0>)
 800bb2e:	00d2      	lsls	r2, r2, #3
 800bb30:	189b      	adds	r3, r3, r2
 800bb32:	0030      	movs	r0, r6
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	0039      	movs	r1, r7
 800bb3a:	f7f5 fb8f 	bl	800125c <__aeabi_ddiv>
 800bb3e:	0006      	movs	r6, r0
 800bb40:	000f      	movs	r7, r1
 800bb42:	1124      	asrs	r4, r4, #4
 800bb44:	d0d5      	beq.n	800baf2 <_strtod_l+0x55e>
 800bb46:	2c1f      	cmp	r4, #31
 800bb48:	dd28      	ble.n	800bb9c <_strtod_l+0x608>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	9306      	str	r3, [sp, #24]
 800bb4e:	9307      	str	r3, [sp, #28]
 800bb50:	930d      	str	r3, [sp, #52]	@ 0x34
 800bb52:	9308      	str	r3, [sp, #32]
 800bb54:	2322      	movs	r3, #34	@ 0x22
 800bb56:	9a05      	ldr	r2, [sp, #20]
 800bb58:	2600      	movs	r6, #0
 800bb5a:	6013      	str	r3, [r2, #0]
 800bb5c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bb5e:	2700      	movs	r7, #0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d000      	beq.n	800bb66 <_strtod_l+0x5d2>
 800bb64:	e763      	b.n	800ba2e <_strtod_l+0x49a>
 800bb66:	e550      	b.n	800b60a <_strtod_l+0x76>
 800bb68:	00004e1f 	.word	0x00004e1f
 800bb6c:	0800d422 	.word	0x0800d422
 800bb70:	0800d6e8 	.word	0x0800d6e8
 800bb74:	7ff00000 	.word	0x7ff00000
 800bb78:	0800d41a 	.word	0x0800d41a
 800bb7c:	0800d451 	.word	0x0800d451
 800bb80:	0800d58a 	.word	0x0800d58a
 800bb84:	0800d620 	.word	0x0800d620
 800bb88:	0800d5f8 	.word	0x0800d5f8
 800bb8c:	fcb00000 	.word	0xfcb00000
 800bb90:	7ca00000 	.word	0x7ca00000
 800bb94:	7c900000 	.word	0x7c900000
 800bb98:	7fefffff 	.word	0x7fefffff
 800bb9c:	2310      	movs	r3, #16
 800bb9e:	0022      	movs	r2, r4
 800bba0:	401a      	ands	r2, r3
 800bba2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bba4:	421c      	tst	r4, r3
 800bba6:	d001      	beq.n	800bbac <_strtod_l+0x618>
 800bba8:	335a      	adds	r3, #90	@ 0x5a
 800bbaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbac:	0030      	movs	r0, r6
 800bbae:	0039      	movs	r1, r7
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	4dc0      	ldr	r5, [pc, #768]	@ (800beb4 <_strtod_l+0x920>)
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	4214      	tst	r4, r2
 800bbb8:	d004      	beq.n	800bbc4 <_strtod_l+0x630>
 800bbba:	682a      	ldr	r2, [r5, #0]
 800bbbc:	686b      	ldr	r3, [r5, #4]
 800bbbe:	f7f5 ff87 	bl	8001ad0 <__aeabi_dmul>
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	1064      	asrs	r4, r4, #1
 800bbc6:	3508      	adds	r5, #8
 800bbc8:	2c00      	cmp	r4, #0
 800bbca:	d1f3      	bne.n	800bbb4 <_strtod_l+0x620>
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d001      	beq.n	800bbd4 <_strtod_l+0x640>
 800bbd0:	0006      	movs	r6, r0
 800bbd2:	000f      	movs	r7, r1
 800bbd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d00d      	beq.n	800bbf6 <_strtod_l+0x662>
 800bbda:	236b      	movs	r3, #107	@ 0x6b
 800bbdc:	007a      	lsls	r2, r7, #1
 800bbde:	0d52      	lsrs	r2, r2, #21
 800bbe0:	0039      	movs	r1, r7
 800bbe2:	1a9b      	subs	r3, r3, r2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	dd06      	ble.n	800bbf6 <_strtod_l+0x662>
 800bbe8:	2b1f      	cmp	r3, #31
 800bbea:	dd5c      	ble.n	800bca6 <_strtod_l+0x712>
 800bbec:	2600      	movs	r6, #0
 800bbee:	2b34      	cmp	r3, #52	@ 0x34
 800bbf0:	dd52      	ble.n	800bc98 <_strtod_l+0x704>
 800bbf2:	27dc      	movs	r7, #220	@ 0xdc
 800bbf4:	04bf      	lsls	r7, r7, #18
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	0030      	movs	r0, r6
 800bbfc:	0039      	movs	r1, r7
 800bbfe:	f7f4 fc2f 	bl	8000460 <__aeabi_dcmpeq>
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d1a1      	bne.n	800bb4a <_strtod_l+0x5b6>
 800bc06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc08:	9a08      	ldr	r2, [sp, #32]
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800bc0e:	9b06      	ldr	r3, [sp, #24]
 800bc10:	9805      	ldr	r0, [sp, #20]
 800bc12:	f7ff f889 	bl	800ad28 <__s2b>
 800bc16:	900d      	str	r0, [sp, #52]	@ 0x34
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d100      	bne.n	800bc1e <_strtod_l+0x68a>
 800bc1c:	e6f9      	b.n	800ba12 <_strtod_l+0x47e>
 800bc1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bc20:	9907      	ldr	r1, [sp, #28]
 800bc22:	43db      	mvns	r3, r3
 800bc24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc26:	17db      	asrs	r3, r3, #31
 800bc28:	1a52      	subs	r2, r2, r1
 800bc2a:	9214      	str	r2, [sp, #80]	@ 0x50
 800bc2c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bc2e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800bc30:	17d2      	asrs	r2, r2, #31
 800bc32:	4011      	ands	r1, r2
 800bc34:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800bc36:	9114      	str	r1, [sp, #80]	@ 0x50
 800bc38:	401a      	ands	r2, r3
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	921a      	str	r2, [sp, #104]	@ 0x68
 800bc3e:	9306      	str	r3, [sp, #24]
 800bc40:	9307      	str	r3, [sp, #28]
 800bc42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc44:	9805      	ldr	r0, [sp, #20]
 800bc46:	6859      	ldr	r1, [r3, #4]
 800bc48:	f7fe ffc2 	bl	800abd0 <_Balloc>
 800bc4c:	9008      	str	r0, [sp, #32]
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	d100      	bne.n	800bc54 <_strtod_l+0x6c0>
 800bc52:	e6e3      	b.n	800ba1c <_strtod_l+0x488>
 800bc54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc56:	300c      	adds	r0, #12
 800bc58:	0019      	movs	r1, r3
 800bc5a:	691a      	ldr	r2, [r3, #16]
 800bc5c:	310c      	adds	r1, #12
 800bc5e:	3202      	adds	r2, #2
 800bc60:	0092      	lsls	r2, r2, #2
 800bc62:	f7fe f8e7 	bl	8009e34 <memcpy>
 800bc66:	ab20      	add	r3, sp, #128	@ 0x80
 800bc68:	9301      	str	r3, [sp, #4]
 800bc6a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800bc6c:	9300      	str	r3, [sp, #0]
 800bc6e:	0032      	movs	r2, r6
 800bc70:	003b      	movs	r3, r7
 800bc72:	9805      	ldr	r0, [sp, #20]
 800bc74:	9610      	str	r6, [sp, #64]	@ 0x40
 800bc76:	9711      	str	r7, [sp, #68]	@ 0x44
 800bc78:	f7ff fb9e 	bl	800b3b8 <__d2b>
 800bc7c:	901e      	str	r0, [sp, #120]	@ 0x78
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d100      	bne.n	800bc84 <_strtod_l+0x6f0>
 800bc82:	e6cb      	b.n	800ba1c <_strtod_l+0x488>
 800bc84:	2101      	movs	r1, #1
 800bc86:	9805      	ldr	r0, [sp, #20]
 800bc88:	f7ff f8ea 	bl	800ae60 <__i2b>
 800bc8c:	9007      	str	r0, [sp, #28]
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d10e      	bne.n	800bcb0 <_strtod_l+0x71c>
 800bc92:	2300      	movs	r3, #0
 800bc94:	9307      	str	r3, [sp, #28]
 800bc96:	e6c1      	b.n	800ba1c <_strtod_l+0x488>
 800bc98:	234b      	movs	r3, #75	@ 0x4b
 800bc9a:	1a9a      	subs	r2, r3, r2
 800bc9c:	3b4c      	subs	r3, #76	@ 0x4c
 800bc9e:	4093      	lsls	r3, r2
 800bca0:	4019      	ands	r1, r3
 800bca2:	000f      	movs	r7, r1
 800bca4:	e7a7      	b.n	800bbf6 <_strtod_l+0x662>
 800bca6:	2201      	movs	r2, #1
 800bca8:	4252      	negs	r2, r2
 800bcaa:	409a      	lsls	r2, r3
 800bcac:	4016      	ands	r6, r2
 800bcae:	e7a2      	b.n	800bbf6 <_strtod_l+0x662>
 800bcb0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800bcb2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bcb4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800bcb6:	1ad4      	subs	r4, r2, r3
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	db01      	blt.n	800bcc0 <_strtod_l+0x72c>
 800bcbc:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 800bcbe:	195d      	adds	r5, r3, r5
 800bcc0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bcc2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bcc4:	1a5b      	subs	r3, r3, r1
 800bcc6:	2136      	movs	r1, #54	@ 0x36
 800bcc8:	189b      	adds	r3, r3, r2
 800bcca:	1a8a      	subs	r2, r1, r2
 800bccc:	497a      	ldr	r1, [pc, #488]	@ (800beb8 <_strtod_l+0x924>)
 800bcce:	2001      	movs	r0, #1
 800bcd0:	468c      	mov	ip, r1
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	3b01      	subs	r3, #1
 800bcd6:	9115      	str	r1, [sp, #84]	@ 0x54
 800bcd8:	9016      	str	r0, [sp, #88]	@ 0x58
 800bcda:	4563      	cmp	r3, ip
 800bcdc:	da06      	bge.n	800bcec <_strtod_l+0x758>
 800bcde:	4661      	mov	r1, ip
 800bce0:	1ac9      	subs	r1, r1, r3
 800bce2:	1a52      	subs	r2, r2, r1
 800bce4:	291f      	cmp	r1, #31
 800bce6:	dc3f      	bgt.n	800bd68 <_strtod_l+0x7d4>
 800bce8:	4088      	lsls	r0, r1
 800bcea:	9016      	str	r0, [sp, #88]	@ 0x58
 800bcec:	18ab      	adds	r3, r5, r2
 800bcee:	930e      	str	r3, [sp, #56]	@ 0x38
 800bcf0:	18a4      	adds	r4, r4, r2
 800bcf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcf4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcf6:	191c      	adds	r4, r3, r4
 800bcf8:	002b      	movs	r3, r5
 800bcfa:	4295      	cmp	r5, r2
 800bcfc:	dd00      	ble.n	800bd00 <_strtod_l+0x76c>
 800bcfe:	0013      	movs	r3, r2
 800bd00:	42a3      	cmp	r3, r4
 800bd02:	dd00      	ble.n	800bd06 <_strtod_l+0x772>
 800bd04:	0023      	movs	r3, r4
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	dd04      	ble.n	800bd14 <_strtod_l+0x780>
 800bd0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd0c:	1ae4      	subs	r4, r4, r3
 800bd0e:	1ad2      	subs	r2, r2, r3
 800bd10:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd12:	1aed      	subs	r5, r5, r3
 800bd14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	dd16      	ble.n	800bd48 <_strtod_l+0x7b4>
 800bd1a:	001a      	movs	r2, r3
 800bd1c:	9907      	ldr	r1, [sp, #28]
 800bd1e:	9805      	ldr	r0, [sp, #20]
 800bd20:	f7ff f960 	bl	800afe4 <__pow5mult>
 800bd24:	9007      	str	r0, [sp, #28]
 800bd26:	2800      	cmp	r0, #0
 800bd28:	d0b3      	beq.n	800bc92 <_strtod_l+0x6fe>
 800bd2a:	0001      	movs	r1, r0
 800bd2c:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800bd2e:	9805      	ldr	r0, [sp, #20]
 800bd30:	f7ff f8ae 	bl	800ae90 <__multiply>
 800bd34:	9013      	str	r0, [sp, #76]	@ 0x4c
 800bd36:	2800      	cmp	r0, #0
 800bd38:	d100      	bne.n	800bd3c <_strtod_l+0x7a8>
 800bd3a:	e66f      	b.n	800ba1c <_strtod_l+0x488>
 800bd3c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800bd3e:	9805      	ldr	r0, [sp, #20]
 800bd40:	f7fe ff8a 	bl	800ac58 <_Bfree>
 800bd44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bd46:	931e      	str	r3, [sp, #120]	@ 0x78
 800bd48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	dc12      	bgt.n	800bd74 <_strtod_l+0x7e0>
 800bd4e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	dd18      	ble.n	800bd86 <_strtod_l+0x7f2>
 800bd54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bd56:	9908      	ldr	r1, [sp, #32]
 800bd58:	9805      	ldr	r0, [sp, #20]
 800bd5a:	f7ff f943 	bl	800afe4 <__pow5mult>
 800bd5e:	9008      	str	r0, [sp, #32]
 800bd60:	2800      	cmp	r0, #0
 800bd62:	d110      	bne.n	800bd86 <_strtod_l+0x7f2>
 800bd64:	2300      	movs	r3, #0
 800bd66:	e658      	b.n	800ba1a <_strtod_l+0x486>
 800bd68:	4954      	ldr	r1, [pc, #336]	@ (800bebc <_strtod_l+0x928>)
 800bd6a:	1acb      	subs	r3, r1, r3
 800bd6c:	0001      	movs	r1, r0
 800bd6e:	4099      	lsls	r1, r3
 800bd70:	9115      	str	r1, [sp, #84]	@ 0x54
 800bd72:	e7ba      	b.n	800bcea <_strtod_l+0x756>
 800bd74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bd76:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800bd78:	9805      	ldr	r0, [sp, #20]
 800bd7a:	f7ff f98f 	bl	800b09c <__lshift>
 800bd7e:	901e      	str	r0, [sp, #120]	@ 0x78
 800bd80:	2800      	cmp	r0, #0
 800bd82:	d1e4      	bne.n	800bd4e <_strtod_l+0x7ba>
 800bd84:	e64a      	b.n	800ba1c <_strtod_l+0x488>
 800bd86:	2c00      	cmp	r4, #0
 800bd88:	dd07      	ble.n	800bd9a <_strtod_l+0x806>
 800bd8a:	0022      	movs	r2, r4
 800bd8c:	9908      	ldr	r1, [sp, #32]
 800bd8e:	9805      	ldr	r0, [sp, #20]
 800bd90:	f7ff f984 	bl	800b09c <__lshift>
 800bd94:	9008      	str	r0, [sp, #32]
 800bd96:	2800      	cmp	r0, #0
 800bd98:	d0e4      	beq.n	800bd64 <_strtod_l+0x7d0>
 800bd9a:	2d00      	cmp	r5, #0
 800bd9c:	dd08      	ble.n	800bdb0 <_strtod_l+0x81c>
 800bd9e:	002a      	movs	r2, r5
 800bda0:	9907      	ldr	r1, [sp, #28]
 800bda2:	9805      	ldr	r0, [sp, #20]
 800bda4:	f7ff f97a 	bl	800b09c <__lshift>
 800bda8:	9007      	str	r0, [sp, #28]
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	d100      	bne.n	800bdb0 <_strtod_l+0x81c>
 800bdae:	e635      	b.n	800ba1c <_strtod_l+0x488>
 800bdb0:	9a08      	ldr	r2, [sp, #32]
 800bdb2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800bdb4:	9805      	ldr	r0, [sp, #20]
 800bdb6:	f7ff f9f9 	bl	800b1ac <__mdiff>
 800bdba:	9006      	str	r0, [sp, #24]
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	d100      	bne.n	800bdc2 <_strtod_l+0x82e>
 800bdc0:	e62c      	b.n	800ba1c <_strtod_l+0x488>
 800bdc2:	68c3      	ldr	r3, [r0, #12]
 800bdc4:	9907      	ldr	r1, [sp, #28]
 800bdc6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bdc8:	2300      	movs	r3, #0
 800bdca:	60c3      	str	r3, [r0, #12]
 800bdcc:	f7ff f9d2 	bl	800b174 <__mcmp>
 800bdd0:	2800      	cmp	r0, #0
 800bdd2:	da3b      	bge.n	800be4c <_strtod_l+0x8b8>
 800bdd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bdd6:	4333      	orrs	r3, r6
 800bdd8:	d167      	bne.n	800beaa <_strtod_l+0x916>
 800bdda:	033b      	lsls	r3, r7, #12
 800bddc:	d165      	bne.n	800beaa <_strtod_l+0x916>
 800bdde:	22d6      	movs	r2, #214	@ 0xd6
 800bde0:	4b37      	ldr	r3, [pc, #220]	@ (800bec0 <_strtod_l+0x92c>)
 800bde2:	04d2      	lsls	r2, r2, #19
 800bde4:	403b      	ands	r3, r7
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d95f      	bls.n	800beaa <_strtod_l+0x916>
 800bdea:	9b06      	ldr	r3, [sp, #24]
 800bdec:	695b      	ldr	r3, [r3, #20]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d103      	bne.n	800bdfa <_strtod_l+0x866>
 800bdf2:	9b06      	ldr	r3, [sp, #24]
 800bdf4:	691b      	ldr	r3, [r3, #16]
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	dd57      	ble.n	800beaa <_strtod_l+0x916>
 800bdfa:	9906      	ldr	r1, [sp, #24]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	9805      	ldr	r0, [sp, #20]
 800be00:	f7ff f94c 	bl	800b09c <__lshift>
 800be04:	9907      	ldr	r1, [sp, #28]
 800be06:	9006      	str	r0, [sp, #24]
 800be08:	f7ff f9b4 	bl	800b174 <__mcmp>
 800be0c:	2800      	cmp	r0, #0
 800be0e:	dd4c      	ble.n	800beaa <_strtod_l+0x916>
 800be10:	4b2b      	ldr	r3, [pc, #172]	@ (800bec0 <_strtod_l+0x92c>)
 800be12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be14:	403b      	ands	r3, r7
 800be16:	2a00      	cmp	r2, #0
 800be18:	d074      	beq.n	800bf04 <_strtod_l+0x970>
 800be1a:	22d6      	movs	r2, #214	@ 0xd6
 800be1c:	04d2      	lsls	r2, r2, #19
 800be1e:	4293      	cmp	r3, r2
 800be20:	d870      	bhi.n	800bf04 <_strtod_l+0x970>
 800be22:	22dc      	movs	r2, #220	@ 0xdc
 800be24:	0492      	lsls	r2, r2, #18
 800be26:	4293      	cmp	r3, r2
 800be28:	d800      	bhi.n	800be2c <_strtod_l+0x898>
 800be2a:	e693      	b.n	800bb54 <_strtod_l+0x5c0>
 800be2c:	0030      	movs	r0, r6
 800be2e:	0039      	movs	r1, r7
 800be30:	4b24      	ldr	r3, [pc, #144]	@ (800bec4 <_strtod_l+0x930>)
 800be32:	2200      	movs	r2, #0
 800be34:	f7f5 fe4c 	bl	8001ad0 <__aeabi_dmul>
 800be38:	4b21      	ldr	r3, [pc, #132]	@ (800bec0 <_strtod_l+0x92c>)
 800be3a:	0006      	movs	r6, r0
 800be3c:	000f      	movs	r7, r1
 800be3e:	420b      	tst	r3, r1
 800be40:	d000      	beq.n	800be44 <_strtod_l+0x8b0>
 800be42:	e5f4      	b.n	800ba2e <_strtod_l+0x49a>
 800be44:	2322      	movs	r3, #34	@ 0x22
 800be46:	9a05      	ldr	r2, [sp, #20]
 800be48:	6013      	str	r3, [r2, #0]
 800be4a:	e5f0      	b.n	800ba2e <_strtod_l+0x49a>
 800be4c:	970e      	str	r7, [sp, #56]	@ 0x38
 800be4e:	2800      	cmp	r0, #0
 800be50:	d175      	bne.n	800bf3e <_strtod_l+0x9aa>
 800be52:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800be54:	033b      	lsls	r3, r7, #12
 800be56:	0b1b      	lsrs	r3, r3, #12
 800be58:	2a00      	cmp	r2, #0
 800be5a:	d039      	beq.n	800bed0 <_strtod_l+0x93c>
 800be5c:	4a1a      	ldr	r2, [pc, #104]	@ (800bec8 <_strtod_l+0x934>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d138      	bne.n	800bed4 <_strtod_l+0x940>
 800be62:	2101      	movs	r1, #1
 800be64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be66:	4249      	negs	r1, r1
 800be68:	0032      	movs	r2, r6
 800be6a:	0008      	movs	r0, r1
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d00b      	beq.n	800be88 <_strtod_l+0x8f4>
 800be70:	24d4      	movs	r4, #212	@ 0xd4
 800be72:	4b13      	ldr	r3, [pc, #76]	@ (800bec0 <_strtod_l+0x92c>)
 800be74:	0008      	movs	r0, r1
 800be76:	403b      	ands	r3, r7
 800be78:	04e4      	lsls	r4, r4, #19
 800be7a:	42a3      	cmp	r3, r4
 800be7c:	d804      	bhi.n	800be88 <_strtod_l+0x8f4>
 800be7e:	306c      	adds	r0, #108	@ 0x6c
 800be80:	0d1b      	lsrs	r3, r3, #20
 800be82:	1ac3      	subs	r3, r0, r3
 800be84:	4099      	lsls	r1, r3
 800be86:	0008      	movs	r0, r1
 800be88:	4282      	cmp	r2, r0
 800be8a:	d123      	bne.n	800bed4 <_strtod_l+0x940>
 800be8c:	4b0f      	ldr	r3, [pc, #60]	@ (800becc <_strtod_l+0x938>)
 800be8e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800be90:	4299      	cmp	r1, r3
 800be92:	d102      	bne.n	800be9a <_strtod_l+0x906>
 800be94:	3201      	adds	r2, #1
 800be96:	d100      	bne.n	800be9a <_strtod_l+0x906>
 800be98:	e5c0      	b.n	800ba1c <_strtod_l+0x488>
 800be9a:	4b09      	ldr	r3, [pc, #36]	@ (800bec0 <_strtod_l+0x92c>)
 800be9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be9e:	2600      	movs	r6, #0
 800bea0:	401a      	ands	r2, r3
 800bea2:	0013      	movs	r3, r2
 800bea4:	2280      	movs	r2, #128	@ 0x80
 800bea6:	0352      	lsls	r2, r2, #13
 800bea8:	189f      	adds	r7, r3, r2
 800beaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beac:	2b00      	cmp	r3, #0
 800beae:	d1bd      	bne.n	800be2c <_strtod_l+0x898>
 800beb0:	e5bd      	b.n	800ba2e <_strtod_l+0x49a>
 800beb2:	46c0      	nop			@ (mov r8, r8)
 800beb4:	0800d710 	.word	0x0800d710
 800beb8:	fffffc02 	.word	0xfffffc02
 800bebc:	fffffbe2 	.word	0xfffffbe2
 800bec0:	7ff00000 	.word	0x7ff00000
 800bec4:	39500000 	.word	0x39500000
 800bec8:	000fffff 	.word	0x000fffff
 800becc:	7fefffff 	.word	0x7fefffff
 800bed0:	4333      	orrs	r3, r6
 800bed2:	d09d      	beq.n	800be10 <_strtod_l+0x87c>
 800bed4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d01c      	beq.n	800bf14 <_strtod_l+0x980>
 800beda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bedc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bede:	4213      	tst	r3, r2
 800bee0:	d0e3      	beq.n	800beaa <_strtod_l+0x916>
 800bee2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bee4:	0030      	movs	r0, r6
 800bee6:	0039      	movs	r1, r7
 800bee8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800beea:	2b00      	cmp	r3, #0
 800beec:	d016      	beq.n	800bf1c <_strtod_l+0x988>
 800beee:	f7ff fb39 	bl	800b564 <sulp>
 800bef2:	0002      	movs	r2, r0
 800bef4:	000b      	movs	r3, r1
 800bef6:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800bef8:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800befa:	f7f4 fde9 	bl	8000ad0 <__aeabi_dadd>
 800befe:	0006      	movs	r6, r0
 800bf00:	000f      	movs	r7, r1
 800bf02:	e7d2      	b.n	800beaa <_strtod_l+0x916>
 800bf04:	2601      	movs	r6, #1
 800bf06:	4a92      	ldr	r2, [pc, #584]	@ (800c150 <_strtod_l+0xbbc>)
 800bf08:	4276      	negs	r6, r6
 800bf0a:	189b      	adds	r3, r3, r2
 800bf0c:	4a91      	ldr	r2, [pc, #580]	@ (800c154 <_strtod_l+0xbc0>)
 800bf0e:	431a      	orrs	r2, r3
 800bf10:	0017      	movs	r7, r2
 800bf12:	e7ca      	b.n	800beaa <_strtod_l+0x916>
 800bf14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bf16:	4233      	tst	r3, r6
 800bf18:	d0c7      	beq.n	800beaa <_strtod_l+0x916>
 800bf1a:	e7e2      	b.n	800bee2 <_strtod_l+0x94e>
 800bf1c:	f7ff fb22 	bl	800b564 <sulp>
 800bf20:	0002      	movs	r2, r0
 800bf22:	000b      	movs	r3, r1
 800bf24:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800bf26:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800bf28:	f7f6 f8b8 	bl	800209c <__aeabi_dsub>
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	2300      	movs	r3, #0
 800bf30:	0006      	movs	r6, r0
 800bf32:	000f      	movs	r7, r1
 800bf34:	f7f4 fa94 	bl	8000460 <__aeabi_dcmpeq>
 800bf38:	2800      	cmp	r0, #0
 800bf3a:	d0b6      	beq.n	800beaa <_strtod_l+0x916>
 800bf3c:	e60a      	b.n	800bb54 <_strtod_l+0x5c0>
 800bf3e:	9907      	ldr	r1, [sp, #28]
 800bf40:	9806      	ldr	r0, [sp, #24]
 800bf42:	f7ff fa99 	bl	800b478 <__ratio>
 800bf46:	2380      	movs	r3, #128	@ 0x80
 800bf48:	2200      	movs	r2, #0
 800bf4a:	05db      	lsls	r3, r3, #23
 800bf4c:	0004      	movs	r4, r0
 800bf4e:	000d      	movs	r5, r1
 800bf50:	f7f4 fa96 	bl	8000480 <__aeabi_dcmple>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d06c      	beq.n	800c032 <_strtod_l+0xa9e>
 800bf58:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d177      	bne.n	800c04e <_strtod_l+0xaba>
 800bf5e:	2e00      	cmp	r6, #0
 800bf60:	d157      	bne.n	800c012 <_strtod_l+0xa7e>
 800bf62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf64:	031b      	lsls	r3, r3, #12
 800bf66:	d15a      	bne.n	800c01e <_strtod_l+0xa8a>
 800bf68:	2200      	movs	r2, #0
 800bf6a:	0020      	movs	r0, r4
 800bf6c:	0029      	movs	r1, r5
 800bf6e:	4b7a      	ldr	r3, [pc, #488]	@ (800c158 <_strtod_l+0xbc4>)
 800bf70:	f7f4 fa7c 	bl	800046c <__aeabi_dcmplt>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	d159      	bne.n	800c02c <_strtod_l+0xa98>
 800bf78:	0020      	movs	r0, r4
 800bf7a:	0029      	movs	r1, r5
 800bf7c:	2200      	movs	r2, #0
 800bf7e:	4b77      	ldr	r3, [pc, #476]	@ (800c15c <_strtod_l+0xbc8>)
 800bf80:	f7f5 fda6 	bl	8001ad0 <__aeabi_dmul>
 800bf84:	0004      	movs	r4, r0
 800bf86:	000d      	movs	r5, r1
 800bf88:	2380      	movs	r3, #128	@ 0x80
 800bf8a:	061b      	lsls	r3, r3, #24
 800bf8c:	18eb      	adds	r3, r5, r3
 800bf8e:	940a      	str	r4, [sp, #40]	@ 0x28
 800bf90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bf94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf96:	9216      	str	r2, [sp, #88]	@ 0x58
 800bf98:	9317      	str	r3, [sp, #92]	@ 0x5c
 800bf9a:	4a71      	ldr	r2, [pc, #452]	@ (800c160 <_strtod_l+0xbcc>)
 800bf9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf9e:	4013      	ands	r3, r2
 800bfa0:	9315      	str	r3, [sp, #84]	@ 0x54
 800bfa2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800bfa4:	4b6f      	ldr	r3, [pc, #444]	@ (800c164 <_strtod_l+0xbd0>)
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d000      	beq.n	800bfac <_strtod_l+0xa18>
 800bfaa:	e087      	b.n	800c0bc <_strtod_l+0xb28>
 800bfac:	4a6e      	ldr	r2, [pc, #440]	@ (800c168 <_strtod_l+0xbd4>)
 800bfae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bfb0:	4694      	mov	ip, r2
 800bfb2:	4463      	add	r3, ip
 800bfb4:	001f      	movs	r7, r3
 800bfb6:	0030      	movs	r0, r6
 800bfb8:	0019      	movs	r1, r3
 800bfba:	f7ff f991 	bl	800b2e0 <__ulp>
 800bfbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bfc0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfc2:	f7f5 fd85 	bl	8001ad0 <__aeabi_dmul>
 800bfc6:	0032      	movs	r2, r6
 800bfc8:	003b      	movs	r3, r7
 800bfca:	f7f4 fd81 	bl	8000ad0 <__aeabi_dadd>
 800bfce:	4a64      	ldr	r2, [pc, #400]	@ (800c160 <_strtod_l+0xbcc>)
 800bfd0:	4b66      	ldr	r3, [pc, #408]	@ (800c16c <_strtod_l+0xbd8>)
 800bfd2:	0006      	movs	r6, r0
 800bfd4:	400a      	ands	r2, r1
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d940      	bls.n	800c05c <_strtod_l+0xac8>
 800bfda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bfdc:	4a64      	ldr	r2, [pc, #400]	@ (800c170 <_strtod_l+0xbdc>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d103      	bne.n	800bfea <_strtod_l+0xa56>
 800bfe2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bfe4:	3301      	adds	r3, #1
 800bfe6:	d100      	bne.n	800bfea <_strtod_l+0xa56>
 800bfe8:	e518      	b.n	800ba1c <_strtod_l+0x488>
 800bfea:	2601      	movs	r6, #1
 800bfec:	4f60      	ldr	r7, [pc, #384]	@ (800c170 <_strtod_l+0xbdc>)
 800bfee:	4276      	negs	r6, r6
 800bff0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800bff2:	9805      	ldr	r0, [sp, #20]
 800bff4:	f7fe fe30 	bl	800ac58 <_Bfree>
 800bff8:	9908      	ldr	r1, [sp, #32]
 800bffa:	9805      	ldr	r0, [sp, #20]
 800bffc:	f7fe fe2c 	bl	800ac58 <_Bfree>
 800c000:	9907      	ldr	r1, [sp, #28]
 800c002:	9805      	ldr	r0, [sp, #20]
 800c004:	f7fe fe28 	bl	800ac58 <_Bfree>
 800c008:	9906      	ldr	r1, [sp, #24]
 800c00a:	9805      	ldr	r0, [sp, #20]
 800c00c:	f7fe fe24 	bl	800ac58 <_Bfree>
 800c010:	e617      	b.n	800bc42 <_strtod_l+0x6ae>
 800c012:	2e01      	cmp	r6, #1
 800c014:	d103      	bne.n	800c01e <_strtod_l+0xa8a>
 800c016:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d100      	bne.n	800c01e <_strtod_l+0xa8a>
 800c01c:	e59a      	b.n	800bb54 <_strtod_l+0x5c0>
 800c01e:	2300      	movs	r3, #0
 800c020:	4c54      	ldr	r4, [pc, #336]	@ (800c174 <_strtod_l+0xbe0>)
 800c022:	4d4d      	ldr	r5, [pc, #308]	@ (800c158 <_strtod_l+0xbc4>)
 800c024:	930a      	str	r3, [sp, #40]	@ 0x28
 800c026:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c028:	2400      	movs	r4, #0
 800c02a:	e7b2      	b.n	800bf92 <_strtod_l+0x9fe>
 800c02c:	2400      	movs	r4, #0
 800c02e:	4d4b      	ldr	r5, [pc, #300]	@ (800c15c <_strtod_l+0xbc8>)
 800c030:	e7aa      	b.n	800bf88 <_strtod_l+0x9f4>
 800c032:	0020      	movs	r0, r4
 800c034:	0029      	movs	r1, r5
 800c036:	4b49      	ldr	r3, [pc, #292]	@ (800c15c <_strtod_l+0xbc8>)
 800c038:	2200      	movs	r2, #0
 800c03a:	f7f5 fd49 	bl	8001ad0 <__aeabi_dmul>
 800c03e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c040:	0004      	movs	r4, r0
 800c042:	000d      	movs	r5, r1
 800c044:	2b00      	cmp	r3, #0
 800c046:	d09f      	beq.n	800bf88 <_strtod_l+0x9f4>
 800c048:	940a      	str	r4, [sp, #40]	@ 0x28
 800c04a:	950b      	str	r5, [sp, #44]	@ 0x2c
 800c04c:	e7a1      	b.n	800bf92 <_strtod_l+0x9fe>
 800c04e:	2300      	movs	r3, #0
 800c050:	4c41      	ldr	r4, [pc, #260]	@ (800c158 <_strtod_l+0xbc4>)
 800c052:	0025      	movs	r5, r4
 800c054:	930a      	str	r3, [sp, #40]	@ 0x28
 800c056:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c058:	001c      	movs	r4, r3
 800c05a:	e79a      	b.n	800bf92 <_strtod_l+0x9fe>
 800c05c:	23d4      	movs	r3, #212	@ 0xd4
 800c05e:	049b      	lsls	r3, r3, #18
 800c060:	18cf      	adds	r7, r1, r3
 800c062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c064:	9710      	str	r7, [sp, #64]	@ 0x40
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1c2      	bne.n	800bff0 <_strtod_l+0xa5c>
 800c06a:	4b3d      	ldr	r3, [pc, #244]	@ (800c160 <_strtod_l+0xbcc>)
 800c06c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c06e:	403b      	ands	r3, r7
 800c070:	429a      	cmp	r2, r3
 800c072:	d1bd      	bne.n	800bff0 <_strtod_l+0xa5c>
 800c074:	0020      	movs	r0, r4
 800c076:	0029      	movs	r1, r5
 800c078:	f7f4 fa78 	bl	800056c <__aeabi_d2lz>
 800c07c:	f7f4 fab0 	bl	80005e0 <__aeabi_l2d>
 800c080:	0002      	movs	r2, r0
 800c082:	000b      	movs	r3, r1
 800c084:	0020      	movs	r0, r4
 800c086:	0029      	movs	r1, r5
 800c088:	f7f6 f808 	bl	800209c <__aeabi_dsub>
 800c08c:	033c      	lsls	r4, r7, #12
 800c08e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c090:	0b24      	lsrs	r4, r4, #12
 800c092:	4334      	orrs	r4, r6
 800c094:	900e      	str	r0, [sp, #56]	@ 0x38
 800c096:	910f      	str	r1, [sp, #60]	@ 0x3c
 800c098:	4a37      	ldr	r2, [pc, #220]	@ (800c178 <_strtod_l+0xbe4>)
 800c09a:	431c      	orrs	r4, r3
 800c09c:	d052      	beq.n	800c144 <_strtod_l+0xbb0>
 800c09e:	4b37      	ldr	r3, [pc, #220]	@ (800c17c <_strtod_l+0xbe8>)
 800c0a0:	f7f4 f9e4 	bl	800046c <__aeabi_dcmplt>
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	d000      	beq.n	800c0aa <_strtod_l+0xb16>
 800c0a8:	e4c1      	b.n	800ba2e <_strtod_l+0x49a>
 800c0aa:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800c0ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c0ae:	4a34      	ldr	r2, [pc, #208]	@ (800c180 <_strtod_l+0xbec>)
 800c0b0:	4b2a      	ldr	r3, [pc, #168]	@ (800c15c <_strtod_l+0xbc8>)
 800c0b2:	f7f4 f9ef 	bl	8000494 <__aeabi_dcmpgt>
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	d09a      	beq.n	800bff0 <_strtod_l+0xa5c>
 800c0ba:	e4b8      	b.n	800ba2e <_strtod_l+0x49a>
 800c0bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d02a      	beq.n	800c118 <_strtod_l+0xb84>
 800c0c2:	23d4      	movs	r3, #212	@ 0xd4
 800c0c4:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c0c6:	04db      	lsls	r3, r3, #19
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d825      	bhi.n	800c118 <_strtod_l+0xb84>
 800c0cc:	0020      	movs	r0, r4
 800c0ce:	0029      	movs	r1, r5
 800c0d0:	4a2c      	ldr	r2, [pc, #176]	@ (800c184 <_strtod_l+0xbf0>)
 800c0d2:	4b2d      	ldr	r3, [pc, #180]	@ (800c188 <_strtod_l+0xbf4>)
 800c0d4:	f7f4 f9d4 	bl	8000480 <__aeabi_dcmple>
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	d016      	beq.n	800c10a <_strtod_l+0xb76>
 800c0dc:	0020      	movs	r0, r4
 800c0de:	0029      	movs	r1, r5
 800c0e0:	f7f4 fa26 	bl	8000530 <__aeabi_d2uiz>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d100      	bne.n	800c0ea <_strtod_l+0xb56>
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	f7f6 fc6d 	bl	80029c8 <__aeabi_ui2d>
 800c0ee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c0f0:	0004      	movs	r4, r0
 800c0f2:	000d      	movs	r5, r1
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d122      	bne.n	800c13e <_strtod_l+0xbaa>
 800c0f8:	2380      	movs	r3, #128	@ 0x80
 800c0fa:	061b      	lsls	r3, r3, #24
 800c0fc:	18cb      	adds	r3, r1, r3
 800c0fe:	9018      	str	r0, [sp, #96]	@ 0x60
 800c100:	9319      	str	r3, [sp, #100]	@ 0x64
 800c102:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800c104:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c106:	9216      	str	r2, [sp, #88]	@ 0x58
 800c108:	9317      	str	r3, [sp, #92]	@ 0x5c
 800c10a:	22d6      	movs	r2, #214	@ 0xd6
 800c10c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c10e:	04d2      	lsls	r2, r2, #19
 800c110:	189b      	adds	r3, r3, r2
 800c112:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c114:	1a9b      	subs	r3, r3, r2
 800c116:	9317      	str	r3, [sp, #92]	@ 0x5c
 800c118:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800c11a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800c11c:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800c11e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800c120:	f7ff f8de 	bl	800b2e0 <__ulp>
 800c124:	0002      	movs	r2, r0
 800c126:	000b      	movs	r3, r1
 800c128:	0030      	movs	r0, r6
 800c12a:	0039      	movs	r1, r7
 800c12c:	f7f5 fcd0 	bl	8001ad0 <__aeabi_dmul>
 800c130:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c132:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c134:	f7f4 fccc 	bl	8000ad0 <__aeabi_dadd>
 800c138:	0006      	movs	r6, r0
 800c13a:	000f      	movs	r7, r1
 800c13c:	e791      	b.n	800c062 <_strtod_l+0xace>
 800c13e:	9418      	str	r4, [sp, #96]	@ 0x60
 800c140:	9519      	str	r5, [sp, #100]	@ 0x64
 800c142:	e7de      	b.n	800c102 <_strtod_l+0xb6e>
 800c144:	4b11      	ldr	r3, [pc, #68]	@ (800c18c <_strtod_l+0xbf8>)
 800c146:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800c148:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800c14a:	f7f4 f98f 	bl	800046c <__aeabi_dcmplt>
 800c14e:	e7b2      	b.n	800c0b6 <_strtod_l+0xb22>
 800c150:	fff00000 	.word	0xfff00000
 800c154:	000fffff 	.word	0x000fffff
 800c158:	3ff00000 	.word	0x3ff00000
 800c15c:	3fe00000 	.word	0x3fe00000
 800c160:	7ff00000 	.word	0x7ff00000
 800c164:	7fe00000 	.word	0x7fe00000
 800c168:	fcb00000 	.word	0xfcb00000
 800c16c:	7c9fffff 	.word	0x7c9fffff
 800c170:	7fefffff 	.word	0x7fefffff
 800c174:	bff00000 	.word	0xbff00000
 800c178:	94a03595 	.word	0x94a03595
 800c17c:	3fdfffff 	.word	0x3fdfffff
 800c180:	35afe535 	.word	0x35afe535
 800c184:	ffc00000 	.word	0xffc00000
 800c188:	41dfffff 	.word	0x41dfffff
 800c18c:	3fcfffff 	.word	0x3fcfffff

0800c190 <_strtod_r>:
 800c190:	b510      	push	{r4, lr}
 800c192:	4b02      	ldr	r3, [pc, #8]	@ (800c19c <_strtod_r+0xc>)
 800c194:	f7ff f9fe 	bl	800b594 <_strtod_l>
 800c198:	bd10      	pop	{r4, pc}
 800c19a:	46c0      	nop			@ (mov r8, r8)
 800c19c:	20000080 	.word	0x20000080

0800c1a0 <__ssputs_r>:
 800c1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1a2:	688e      	ldr	r6, [r1, #8]
 800c1a4:	b085      	sub	sp, #20
 800c1a6:	001f      	movs	r7, r3
 800c1a8:	000c      	movs	r4, r1
 800c1aa:	680b      	ldr	r3, [r1, #0]
 800c1ac:	9002      	str	r0, [sp, #8]
 800c1ae:	9203      	str	r2, [sp, #12]
 800c1b0:	42be      	cmp	r6, r7
 800c1b2:	d830      	bhi.n	800c216 <__ssputs_r+0x76>
 800c1b4:	210c      	movs	r1, #12
 800c1b6:	5e62      	ldrsh	r2, [r4, r1]
 800c1b8:	2190      	movs	r1, #144	@ 0x90
 800c1ba:	00c9      	lsls	r1, r1, #3
 800c1bc:	420a      	tst	r2, r1
 800c1be:	d028      	beq.n	800c212 <__ssputs_r+0x72>
 800c1c0:	2003      	movs	r0, #3
 800c1c2:	6921      	ldr	r1, [r4, #16]
 800c1c4:	1a5b      	subs	r3, r3, r1
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	6963      	ldr	r3, [r4, #20]
 800c1ca:	4343      	muls	r3, r0
 800c1cc:	9801      	ldr	r0, [sp, #4]
 800c1ce:	0fdd      	lsrs	r5, r3, #31
 800c1d0:	18ed      	adds	r5, r5, r3
 800c1d2:	1c7b      	adds	r3, r7, #1
 800c1d4:	181b      	adds	r3, r3, r0
 800c1d6:	106d      	asrs	r5, r5, #1
 800c1d8:	42ab      	cmp	r3, r5
 800c1da:	d900      	bls.n	800c1de <__ssputs_r+0x3e>
 800c1dc:	001d      	movs	r5, r3
 800c1de:	0552      	lsls	r2, r2, #21
 800c1e0:	d528      	bpl.n	800c234 <__ssputs_r+0x94>
 800c1e2:	0029      	movs	r1, r5
 800c1e4:	9802      	ldr	r0, [sp, #8]
 800c1e6:	f7fc fb4d 	bl	8008884 <_malloc_r>
 800c1ea:	1e06      	subs	r6, r0, #0
 800c1ec:	d02c      	beq.n	800c248 <__ssputs_r+0xa8>
 800c1ee:	9a01      	ldr	r2, [sp, #4]
 800c1f0:	6921      	ldr	r1, [r4, #16]
 800c1f2:	f7fd fe1f 	bl	8009e34 <memcpy>
 800c1f6:	89a2      	ldrh	r2, [r4, #12]
 800c1f8:	4b18      	ldr	r3, [pc, #96]	@ (800c25c <__ssputs_r+0xbc>)
 800c1fa:	401a      	ands	r2, r3
 800c1fc:	2380      	movs	r3, #128	@ 0x80
 800c1fe:	4313      	orrs	r3, r2
 800c200:	81a3      	strh	r3, [r4, #12]
 800c202:	9b01      	ldr	r3, [sp, #4]
 800c204:	6126      	str	r6, [r4, #16]
 800c206:	18f6      	adds	r6, r6, r3
 800c208:	6026      	str	r6, [r4, #0]
 800c20a:	003e      	movs	r6, r7
 800c20c:	6165      	str	r5, [r4, #20]
 800c20e:	1aed      	subs	r5, r5, r3
 800c210:	60a5      	str	r5, [r4, #8]
 800c212:	42be      	cmp	r6, r7
 800c214:	d900      	bls.n	800c218 <__ssputs_r+0x78>
 800c216:	003e      	movs	r6, r7
 800c218:	0032      	movs	r2, r6
 800c21a:	9903      	ldr	r1, [sp, #12]
 800c21c:	6820      	ldr	r0, [r4, #0]
 800c21e:	f000 fa3a 	bl	800c696 <memmove>
 800c222:	2000      	movs	r0, #0
 800c224:	68a3      	ldr	r3, [r4, #8]
 800c226:	1b9b      	subs	r3, r3, r6
 800c228:	60a3      	str	r3, [r4, #8]
 800c22a:	6823      	ldr	r3, [r4, #0]
 800c22c:	199b      	adds	r3, r3, r6
 800c22e:	6023      	str	r3, [r4, #0]
 800c230:	b005      	add	sp, #20
 800c232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c234:	002a      	movs	r2, r5
 800c236:	9802      	ldr	r0, [sp, #8]
 800c238:	f7fc fbbe 	bl	80089b8 <_realloc_r>
 800c23c:	1e06      	subs	r6, r0, #0
 800c23e:	d1e0      	bne.n	800c202 <__ssputs_r+0x62>
 800c240:	6921      	ldr	r1, [r4, #16]
 800c242:	9802      	ldr	r0, [sp, #8]
 800c244:	f7fe fc7a 	bl	800ab3c <_free_r>
 800c248:	230c      	movs	r3, #12
 800c24a:	2001      	movs	r0, #1
 800c24c:	9a02      	ldr	r2, [sp, #8]
 800c24e:	4240      	negs	r0, r0
 800c250:	6013      	str	r3, [r2, #0]
 800c252:	89a2      	ldrh	r2, [r4, #12]
 800c254:	3334      	adds	r3, #52	@ 0x34
 800c256:	4313      	orrs	r3, r2
 800c258:	81a3      	strh	r3, [r4, #12]
 800c25a:	e7e9      	b.n	800c230 <__ssputs_r+0x90>
 800c25c:	fffffb7f 	.word	0xfffffb7f

0800c260 <_svfiprintf_r>:
 800c260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c262:	b0a1      	sub	sp, #132	@ 0x84
 800c264:	9003      	str	r0, [sp, #12]
 800c266:	001d      	movs	r5, r3
 800c268:	898b      	ldrh	r3, [r1, #12]
 800c26a:	000f      	movs	r7, r1
 800c26c:	0016      	movs	r6, r2
 800c26e:	061b      	lsls	r3, r3, #24
 800c270:	d511      	bpl.n	800c296 <_svfiprintf_r+0x36>
 800c272:	690b      	ldr	r3, [r1, #16]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d10e      	bne.n	800c296 <_svfiprintf_r+0x36>
 800c278:	2140      	movs	r1, #64	@ 0x40
 800c27a:	f7fc fb03 	bl	8008884 <_malloc_r>
 800c27e:	6038      	str	r0, [r7, #0]
 800c280:	6138      	str	r0, [r7, #16]
 800c282:	2800      	cmp	r0, #0
 800c284:	d105      	bne.n	800c292 <_svfiprintf_r+0x32>
 800c286:	230c      	movs	r3, #12
 800c288:	9a03      	ldr	r2, [sp, #12]
 800c28a:	6013      	str	r3, [r2, #0]
 800c28c:	2001      	movs	r0, #1
 800c28e:	4240      	negs	r0, r0
 800c290:	e0cf      	b.n	800c432 <_svfiprintf_r+0x1d2>
 800c292:	2340      	movs	r3, #64	@ 0x40
 800c294:	617b      	str	r3, [r7, #20]
 800c296:	2300      	movs	r3, #0
 800c298:	ac08      	add	r4, sp, #32
 800c29a:	6163      	str	r3, [r4, #20]
 800c29c:	3320      	adds	r3, #32
 800c29e:	7663      	strb	r3, [r4, #25]
 800c2a0:	3310      	adds	r3, #16
 800c2a2:	76a3      	strb	r3, [r4, #26]
 800c2a4:	9507      	str	r5, [sp, #28]
 800c2a6:	0035      	movs	r5, r6
 800c2a8:	782b      	ldrb	r3, [r5, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d001      	beq.n	800c2b2 <_svfiprintf_r+0x52>
 800c2ae:	2b25      	cmp	r3, #37	@ 0x25
 800c2b0:	d148      	bne.n	800c344 <_svfiprintf_r+0xe4>
 800c2b2:	1bab      	subs	r3, r5, r6
 800c2b4:	9305      	str	r3, [sp, #20]
 800c2b6:	42b5      	cmp	r5, r6
 800c2b8:	d00b      	beq.n	800c2d2 <_svfiprintf_r+0x72>
 800c2ba:	0032      	movs	r2, r6
 800c2bc:	0039      	movs	r1, r7
 800c2be:	9803      	ldr	r0, [sp, #12]
 800c2c0:	f7ff ff6e 	bl	800c1a0 <__ssputs_r>
 800c2c4:	3001      	adds	r0, #1
 800c2c6:	d100      	bne.n	800c2ca <_svfiprintf_r+0x6a>
 800c2c8:	e0ae      	b.n	800c428 <_svfiprintf_r+0x1c8>
 800c2ca:	6963      	ldr	r3, [r4, #20]
 800c2cc:	9a05      	ldr	r2, [sp, #20]
 800c2ce:	189b      	adds	r3, r3, r2
 800c2d0:	6163      	str	r3, [r4, #20]
 800c2d2:	782b      	ldrb	r3, [r5, #0]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d100      	bne.n	800c2da <_svfiprintf_r+0x7a>
 800c2d8:	e0a6      	b.n	800c428 <_svfiprintf_r+0x1c8>
 800c2da:	2201      	movs	r2, #1
 800c2dc:	2300      	movs	r3, #0
 800c2de:	4252      	negs	r2, r2
 800c2e0:	6062      	str	r2, [r4, #4]
 800c2e2:	a904      	add	r1, sp, #16
 800c2e4:	3254      	adds	r2, #84	@ 0x54
 800c2e6:	1852      	adds	r2, r2, r1
 800c2e8:	1c6e      	adds	r6, r5, #1
 800c2ea:	6023      	str	r3, [r4, #0]
 800c2ec:	60e3      	str	r3, [r4, #12]
 800c2ee:	60a3      	str	r3, [r4, #8]
 800c2f0:	7013      	strb	r3, [r2, #0]
 800c2f2:	65a3      	str	r3, [r4, #88]	@ 0x58
 800c2f4:	4b54      	ldr	r3, [pc, #336]	@ (800c448 <_svfiprintf_r+0x1e8>)
 800c2f6:	2205      	movs	r2, #5
 800c2f8:	0018      	movs	r0, r3
 800c2fa:	7831      	ldrb	r1, [r6, #0]
 800c2fc:	9305      	str	r3, [sp, #20]
 800c2fe:	f7fd fd8e 	bl	8009e1e <memchr>
 800c302:	1c75      	adds	r5, r6, #1
 800c304:	2800      	cmp	r0, #0
 800c306:	d11f      	bne.n	800c348 <_svfiprintf_r+0xe8>
 800c308:	6822      	ldr	r2, [r4, #0]
 800c30a:	06d3      	lsls	r3, r2, #27
 800c30c:	d504      	bpl.n	800c318 <_svfiprintf_r+0xb8>
 800c30e:	2353      	movs	r3, #83	@ 0x53
 800c310:	a904      	add	r1, sp, #16
 800c312:	185b      	adds	r3, r3, r1
 800c314:	2120      	movs	r1, #32
 800c316:	7019      	strb	r1, [r3, #0]
 800c318:	0713      	lsls	r3, r2, #28
 800c31a:	d504      	bpl.n	800c326 <_svfiprintf_r+0xc6>
 800c31c:	2353      	movs	r3, #83	@ 0x53
 800c31e:	a904      	add	r1, sp, #16
 800c320:	185b      	adds	r3, r3, r1
 800c322:	212b      	movs	r1, #43	@ 0x2b
 800c324:	7019      	strb	r1, [r3, #0]
 800c326:	7833      	ldrb	r3, [r6, #0]
 800c328:	2b2a      	cmp	r3, #42	@ 0x2a
 800c32a:	d016      	beq.n	800c35a <_svfiprintf_r+0xfa>
 800c32c:	0035      	movs	r5, r6
 800c32e:	2100      	movs	r1, #0
 800c330:	200a      	movs	r0, #10
 800c332:	68e3      	ldr	r3, [r4, #12]
 800c334:	782a      	ldrb	r2, [r5, #0]
 800c336:	1c6e      	adds	r6, r5, #1
 800c338:	3a30      	subs	r2, #48	@ 0x30
 800c33a:	2a09      	cmp	r2, #9
 800c33c:	d950      	bls.n	800c3e0 <_svfiprintf_r+0x180>
 800c33e:	2900      	cmp	r1, #0
 800c340:	d111      	bne.n	800c366 <_svfiprintf_r+0x106>
 800c342:	e017      	b.n	800c374 <_svfiprintf_r+0x114>
 800c344:	3501      	adds	r5, #1
 800c346:	e7af      	b.n	800c2a8 <_svfiprintf_r+0x48>
 800c348:	9b05      	ldr	r3, [sp, #20]
 800c34a:	6822      	ldr	r2, [r4, #0]
 800c34c:	1ac0      	subs	r0, r0, r3
 800c34e:	2301      	movs	r3, #1
 800c350:	4083      	lsls	r3, r0
 800c352:	4313      	orrs	r3, r2
 800c354:	002e      	movs	r6, r5
 800c356:	6023      	str	r3, [r4, #0]
 800c358:	e7cc      	b.n	800c2f4 <_svfiprintf_r+0x94>
 800c35a:	9b07      	ldr	r3, [sp, #28]
 800c35c:	1d19      	adds	r1, r3, #4
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	9107      	str	r1, [sp, #28]
 800c362:	2b00      	cmp	r3, #0
 800c364:	db01      	blt.n	800c36a <_svfiprintf_r+0x10a>
 800c366:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c368:	e004      	b.n	800c374 <_svfiprintf_r+0x114>
 800c36a:	425b      	negs	r3, r3
 800c36c:	60e3      	str	r3, [r4, #12]
 800c36e:	2302      	movs	r3, #2
 800c370:	4313      	orrs	r3, r2
 800c372:	6023      	str	r3, [r4, #0]
 800c374:	782b      	ldrb	r3, [r5, #0]
 800c376:	2b2e      	cmp	r3, #46	@ 0x2e
 800c378:	d10c      	bne.n	800c394 <_svfiprintf_r+0x134>
 800c37a:	786b      	ldrb	r3, [r5, #1]
 800c37c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c37e:	d134      	bne.n	800c3ea <_svfiprintf_r+0x18a>
 800c380:	9b07      	ldr	r3, [sp, #28]
 800c382:	3502      	adds	r5, #2
 800c384:	1d1a      	adds	r2, r3, #4
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	9207      	str	r2, [sp, #28]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	da01      	bge.n	800c392 <_svfiprintf_r+0x132>
 800c38e:	2301      	movs	r3, #1
 800c390:	425b      	negs	r3, r3
 800c392:	9309      	str	r3, [sp, #36]	@ 0x24
 800c394:	4e2d      	ldr	r6, [pc, #180]	@ (800c44c <_svfiprintf_r+0x1ec>)
 800c396:	2203      	movs	r2, #3
 800c398:	0030      	movs	r0, r6
 800c39a:	7829      	ldrb	r1, [r5, #0]
 800c39c:	f7fd fd3f 	bl	8009e1e <memchr>
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	d006      	beq.n	800c3b2 <_svfiprintf_r+0x152>
 800c3a4:	2340      	movs	r3, #64	@ 0x40
 800c3a6:	1b80      	subs	r0, r0, r6
 800c3a8:	4083      	lsls	r3, r0
 800c3aa:	6822      	ldr	r2, [r4, #0]
 800c3ac:	3501      	adds	r5, #1
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	6023      	str	r3, [r4, #0]
 800c3b2:	7829      	ldrb	r1, [r5, #0]
 800c3b4:	2206      	movs	r2, #6
 800c3b6:	4826      	ldr	r0, [pc, #152]	@ (800c450 <_svfiprintf_r+0x1f0>)
 800c3b8:	1c6e      	adds	r6, r5, #1
 800c3ba:	7621      	strb	r1, [r4, #24]
 800c3bc:	f7fd fd2f 	bl	8009e1e <memchr>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d038      	beq.n	800c436 <_svfiprintf_r+0x1d6>
 800c3c4:	4b23      	ldr	r3, [pc, #140]	@ (800c454 <_svfiprintf_r+0x1f4>)
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d122      	bne.n	800c410 <_svfiprintf_r+0x1b0>
 800c3ca:	2207      	movs	r2, #7
 800c3cc:	9b07      	ldr	r3, [sp, #28]
 800c3ce:	3307      	adds	r3, #7
 800c3d0:	4393      	bics	r3, r2
 800c3d2:	3308      	adds	r3, #8
 800c3d4:	9307      	str	r3, [sp, #28]
 800c3d6:	6963      	ldr	r3, [r4, #20]
 800c3d8:	9a04      	ldr	r2, [sp, #16]
 800c3da:	189b      	adds	r3, r3, r2
 800c3dc:	6163      	str	r3, [r4, #20]
 800c3de:	e762      	b.n	800c2a6 <_svfiprintf_r+0x46>
 800c3e0:	4343      	muls	r3, r0
 800c3e2:	0035      	movs	r5, r6
 800c3e4:	2101      	movs	r1, #1
 800c3e6:	189b      	adds	r3, r3, r2
 800c3e8:	e7a4      	b.n	800c334 <_svfiprintf_r+0xd4>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	200a      	movs	r0, #10
 800c3ee:	0019      	movs	r1, r3
 800c3f0:	3501      	adds	r5, #1
 800c3f2:	6063      	str	r3, [r4, #4]
 800c3f4:	782a      	ldrb	r2, [r5, #0]
 800c3f6:	1c6e      	adds	r6, r5, #1
 800c3f8:	3a30      	subs	r2, #48	@ 0x30
 800c3fa:	2a09      	cmp	r2, #9
 800c3fc:	d903      	bls.n	800c406 <_svfiprintf_r+0x1a6>
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d0c8      	beq.n	800c394 <_svfiprintf_r+0x134>
 800c402:	9109      	str	r1, [sp, #36]	@ 0x24
 800c404:	e7c6      	b.n	800c394 <_svfiprintf_r+0x134>
 800c406:	4341      	muls	r1, r0
 800c408:	0035      	movs	r5, r6
 800c40a:	2301      	movs	r3, #1
 800c40c:	1889      	adds	r1, r1, r2
 800c40e:	e7f1      	b.n	800c3f4 <_svfiprintf_r+0x194>
 800c410:	aa07      	add	r2, sp, #28
 800c412:	9200      	str	r2, [sp, #0]
 800c414:	0021      	movs	r1, r4
 800c416:	003a      	movs	r2, r7
 800c418:	4b0f      	ldr	r3, [pc, #60]	@ (800c458 <_svfiprintf_r+0x1f8>)
 800c41a:	9803      	ldr	r0, [sp, #12]
 800c41c:	f7fc fc3c 	bl	8008c98 <_printf_float>
 800c420:	9004      	str	r0, [sp, #16]
 800c422:	9b04      	ldr	r3, [sp, #16]
 800c424:	3301      	adds	r3, #1
 800c426:	d1d6      	bne.n	800c3d6 <_svfiprintf_r+0x176>
 800c428:	89bb      	ldrh	r3, [r7, #12]
 800c42a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800c42c:	065b      	lsls	r3, r3, #25
 800c42e:	d500      	bpl.n	800c432 <_svfiprintf_r+0x1d2>
 800c430:	e72c      	b.n	800c28c <_svfiprintf_r+0x2c>
 800c432:	b021      	add	sp, #132	@ 0x84
 800c434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c436:	aa07      	add	r2, sp, #28
 800c438:	9200      	str	r2, [sp, #0]
 800c43a:	0021      	movs	r1, r4
 800c43c:	003a      	movs	r2, r7
 800c43e:	4b06      	ldr	r3, [pc, #24]	@ (800c458 <_svfiprintf_r+0x1f8>)
 800c440:	9803      	ldr	r0, [sp, #12]
 800c442:	f7fc fed7 	bl	80091f4 <_printf_i>
 800c446:	e7eb      	b.n	800c420 <_svfiprintf_r+0x1c0>
 800c448:	0800d536 	.word	0x0800d536
 800c44c:	0800d53c 	.word	0x0800d53c
 800c450:	0800d540 	.word	0x0800d540
 800c454:	08008c99 	.word	0x08008c99
 800c458:	0800c1a1 	.word	0x0800c1a1

0800c45c <__sflush_r>:
 800c45c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c45e:	220c      	movs	r2, #12
 800c460:	5e8b      	ldrsh	r3, [r1, r2]
 800c462:	0005      	movs	r5, r0
 800c464:	000c      	movs	r4, r1
 800c466:	071a      	lsls	r2, r3, #28
 800c468:	d456      	bmi.n	800c518 <__sflush_r+0xbc>
 800c46a:	684a      	ldr	r2, [r1, #4]
 800c46c:	2a00      	cmp	r2, #0
 800c46e:	dc02      	bgt.n	800c476 <__sflush_r+0x1a>
 800c470:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800c472:	2a00      	cmp	r2, #0
 800c474:	dd4e      	ble.n	800c514 <__sflush_r+0xb8>
 800c476:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c478:	2f00      	cmp	r7, #0
 800c47a:	d04b      	beq.n	800c514 <__sflush_r+0xb8>
 800c47c:	2200      	movs	r2, #0
 800c47e:	2080      	movs	r0, #128	@ 0x80
 800c480:	682e      	ldr	r6, [r5, #0]
 800c482:	602a      	str	r2, [r5, #0]
 800c484:	001a      	movs	r2, r3
 800c486:	0140      	lsls	r0, r0, #5
 800c488:	6a21      	ldr	r1, [r4, #32]
 800c48a:	4002      	ands	r2, r0
 800c48c:	4203      	tst	r3, r0
 800c48e:	d033      	beq.n	800c4f8 <__sflush_r+0x9c>
 800c490:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c492:	89a3      	ldrh	r3, [r4, #12]
 800c494:	075b      	lsls	r3, r3, #29
 800c496:	d506      	bpl.n	800c4a6 <__sflush_r+0x4a>
 800c498:	6863      	ldr	r3, [r4, #4]
 800c49a:	1ad2      	subs	r2, r2, r3
 800c49c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d001      	beq.n	800c4a6 <__sflush_r+0x4a>
 800c4a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c4a4:	1ad2      	subs	r2, r2, r3
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	0028      	movs	r0, r5
 800c4aa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800c4ac:	6a21      	ldr	r1, [r4, #32]
 800c4ae:	47b8      	blx	r7
 800c4b0:	89a2      	ldrh	r2, [r4, #12]
 800c4b2:	1c43      	adds	r3, r0, #1
 800c4b4:	d106      	bne.n	800c4c4 <__sflush_r+0x68>
 800c4b6:	6829      	ldr	r1, [r5, #0]
 800c4b8:	291d      	cmp	r1, #29
 800c4ba:	d846      	bhi.n	800c54a <__sflush_r+0xee>
 800c4bc:	4b29      	ldr	r3, [pc, #164]	@ (800c564 <__sflush_r+0x108>)
 800c4be:	40cb      	lsrs	r3, r1
 800c4c0:	07db      	lsls	r3, r3, #31
 800c4c2:	d542      	bpl.n	800c54a <__sflush_r+0xee>
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	6063      	str	r3, [r4, #4]
 800c4c8:	6923      	ldr	r3, [r4, #16]
 800c4ca:	6023      	str	r3, [r4, #0]
 800c4cc:	04d2      	lsls	r2, r2, #19
 800c4ce:	d505      	bpl.n	800c4dc <__sflush_r+0x80>
 800c4d0:	1c43      	adds	r3, r0, #1
 800c4d2:	d102      	bne.n	800c4da <__sflush_r+0x7e>
 800c4d4:	682b      	ldr	r3, [r5, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d100      	bne.n	800c4dc <__sflush_r+0x80>
 800c4da:	6560      	str	r0, [r4, #84]	@ 0x54
 800c4dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4de:	602e      	str	r6, [r5, #0]
 800c4e0:	2900      	cmp	r1, #0
 800c4e2:	d017      	beq.n	800c514 <__sflush_r+0xb8>
 800c4e4:	0023      	movs	r3, r4
 800c4e6:	3344      	adds	r3, #68	@ 0x44
 800c4e8:	4299      	cmp	r1, r3
 800c4ea:	d002      	beq.n	800c4f2 <__sflush_r+0x96>
 800c4ec:	0028      	movs	r0, r5
 800c4ee:	f7fe fb25 	bl	800ab3c <_free_r>
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	6363      	str	r3, [r4, #52]	@ 0x34
 800c4f6:	e00d      	b.n	800c514 <__sflush_r+0xb8>
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	0028      	movs	r0, r5
 800c4fc:	47b8      	blx	r7
 800c4fe:	0002      	movs	r2, r0
 800c500:	1c43      	adds	r3, r0, #1
 800c502:	d1c6      	bne.n	800c492 <__sflush_r+0x36>
 800c504:	682b      	ldr	r3, [r5, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d0c3      	beq.n	800c492 <__sflush_r+0x36>
 800c50a:	2b1d      	cmp	r3, #29
 800c50c:	d001      	beq.n	800c512 <__sflush_r+0xb6>
 800c50e:	2b16      	cmp	r3, #22
 800c510:	d11a      	bne.n	800c548 <__sflush_r+0xec>
 800c512:	602e      	str	r6, [r5, #0]
 800c514:	2000      	movs	r0, #0
 800c516:	e01e      	b.n	800c556 <__sflush_r+0xfa>
 800c518:	690e      	ldr	r6, [r1, #16]
 800c51a:	2e00      	cmp	r6, #0
 800c51c:	d0fa      	beq.n	800c514 <__sflush_r+0xb8>
 800c51e:	680f      	ldr	r7, [r1, #0]
 800c520:	600e      	str	r6, [r1, #0]
 800c522:	1bba      	subs	r2, r7, r6
 800c524:	9201      	str	r2, [sp, #4]
 800c526:	2200      	movs	r2, #0
 800c528:	079b      	lsls	r3, r3, #30
 800c52a:	d100      	bne.n	800c52e <__sflush_r+0xd2>
 800c52c:	694a      	ldr	r2, [r1, #20]
 800c52e:	60a2      	str	r2, [r4, #8]
 800c530:	9b01      	ldr	r3, [sp, #4]
 800c532:	2b00      	cmp	r3, #0
 800c534:	ddee      	ble.n	800c514 <__sflush_r+0xb8>
 800c536:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c538:	0032      	movs	r2, r6
 800c53a:	001f      	movs	r7, r3
 800c53c:	0028      	movs	r0, r5
 800c53e:	9b01      	ldr	r3, [sp, #4]
 800c540:	6a21      	ldr	r1, [r4, #32]
 800c542:	47b8      	blx	r7
 800c544:	2800      	cmp	r0, #0
 800c546:	dc07      	bgt.n	800c558 <__sflush_r+0xfc>
 800c548:	89a2      	ldrh	r2, [r4, #12]
 800c54a:	2340      	movs	r3, #64	@ 0x40
 800c54c:	2001      	movs	r0, #1
 800c54e:	4313      	orrs	r3, r2
 800c550:	b21b      	sxth	r3, r3
 800c552:	81a3      	strh	r3, [r4, #12]
 800c554:	4240      	negs	r0, r0
 800c556:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c558:	9b01      	ldr	r3, [sp, #4]
 800c55a:	1836      	adds	r6, r6, r0
 800c55c:	1a1b      	subs	r3, r3, r0
 800c55e:	9301      	str	r3, [sp, #4]
 800c560:	e7e6      	b.n	800c530 <__sflush_r+0xd4>
 800c562:	46c0      	nop			@ (mov r8, r8)
 800c564:	20400001 	.word	0x20400001

0800c568 <_fflush_r>:
 800c568:	690b      	ldr	r3, [r1, #16]
 800c56a:	b570      	push	{r4, r5, r6, lr}
 800c56c:	0005      	movs	r5, r0
 800c56e:	000c      	movs	r4, r1
 800c570:	2b00      	cmp	r3, #0
 800c572:	d102      	bne.n	800c57a <_fflush_r+0x12>
 800c574:	2500      	movs	r5, #0
 800c576:	0028      	movs	r0, r5
 800c578:	bd70      	pop	{r4, r5, r6, pc}
 800c57a:	2800      	cmp	r0, #0
 800c57c:	d004      	beq.n	800c588 <_fflush_r+0x20>
 800c57e:	6a03      	ldr	r3, [r0, #32]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d101      	bne.n	800c588 <_fflush_r+0x20>
 800c584:	f7fd f9de 	bl	8009944 <__sinit>
 800c588:	220c      	movs	r2, #12
 800c58a:	5ea3      	ldrsh	r3, [r4, r2]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d0f1      	beq.n	800c574 <_fflush_r+0xc>
 800c590:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c592:	07d2      	lsls	r2, r2, #31
 800c594:	d404      	bmi.n	800c5a0 <_fflush_r+0x38>
 800c596:	059b      	lsls	r3, r3, #22
 800c598:	d402      	bmi.n	800c5a0 <_fflush_r+0x38>
 800c59a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c59c:	f7fd fc3d 	bl	8009e1a <__retarget_lock_acquire_recursive>
 800c5a0:	0028      	movs	r0, r5
 800c5a2:	0021      	movs	r1, r4
 800c5a4:	f7ff ff5a 	bl	800c45c <__sflush_r>
 800c5a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5aa:	0005      	movs	r5, r0
 800c5ac:	07db      	lsls	r3, r3, #31
 800c5ae:	d4e2      	bmi.n	800c576 <_fflush_r+0xe>
 800c5b0:	89a3      	ldrh	r3, [r4, #12]
 800c5b2:	059b      	lsls	r3, r3, #22
 800c5b4:	d4df      	bmi.n	800c576 <_fflush_r+0xe>
 800c5b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5b8:	f7fd fc30 	bl	8009e1c <__retarget_lock_release_recursive>
 800c5bc:	e7db      	b.n	800c576 <_fflush_r+0xe>
	...

0800c5c0 <__swhatbuf_r>:
 800c5c0:	b570      	push	{r4, r5, r6, lr}
 800c5c2:	000e      	movs	r6, r1
 800c5c4:	001d      	movs	r5, r3
 800c5c6:	230e      	movs	r3, #14
 800c5c8:	5ec9      	ldrsh	r1, [r1, r3]
 800c5ca:	0014      	movs	r4, r2
 800c5cc:	b096      	sub	sp, #88	@ 0x58
 800c5ce:	2900      	cmp	r1, #0
 800c5d0:	da0c      	bge.n	800c5ec <__swhatbuf_r+0x2c>
 800c5d2:	89b2      	ldrh	r2, [r6, #12]
 800c5d4:	2380      	movs	r3, #128	@ 0x80
 800c5d6:	0011      	movs	r1, r2
 800c5d8:	4019      	ands	r1, r3
 800c5da:	421a      	tst	r2, r3
 800c5dc:	d114      	bne.n	800c608 <__swhatbuf_r+0x48>
 800c5de:	2380      	movs	r3, #128	@ 0x80
 800c5e0:	00db      	lsls	r3, r3, #3
 800c5e2:	2000      	movs	r0, #0
 800c5e4:	6029      	str	r1, [r5, #0]
 800c5e6:	6023      	str	r3, [r4, #0]
 800c5e8:	b016      	add	sp, #88	@ 0x58
 800c5ea:	bd70      	pop	{r4, r5, r6, pc}
 800c5ec:	466a      	mov	r2, sp
 800c5ee:	f000 f875 	bl	800c6dc <_fstat_r>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	dbed      	blt.n	800c5d2 <__swhatbuf_r+0x12>
 800c5f6:	23f0      	movs	r3, #240	@ 0xf0
 800c5f8:	9901      	ldr	r1, [sp, #4]
 800c5fa:	021b      	lsls	r3, r3, #8
 800c5fc:	4019      	ands	r1, r3
 800c5fe:	4b04      	ldr	r3, [pc, #16]	@ (800c610 <__swhatbuf_r+0x50>)
 800c600:	18c9      	adds	r1, r1, r3
 800c602:	424b      	negs	r3, r1
 800c604:	4159      	adcs	r1, r3
 800c606:	e7ea      	b.n	800c5de <__swhatbuf_r+0x1e>
 800c608:	2100      	movs	r1, #0
 800c60a:	2340      	movs	r3, #64	@ 0x40
 800c60c:	e7e9      	b.n	800c5e2 <__swhatbuf_r+0x22>
 800c60e:	46c0      	nop			@ (mov r8, r8)
 800c610:	ffffe000 	.word	0xffffe000

0800c614 <__smakebuf_r>:
 800c614:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c616:	2602      	movs	r6, #2
 800c618:	898b      	ldrh	r3, [r1, #12]
 800c61a:	0005      	movs	r5, r0
 800c61c:	000c      	movs	r4, r1
 800c61e:	b085      	sub	sp, #20
 800c620:	4233      	tst	r3, r6
 800c622:	d007      	beq.n	800c634 <__smakebuf_r+0x20>
 800c624:	0023      	movs	r3, r4
 800c626:	3347      	adds	r3, #71	@ 0x47
 800c628:	6023      	str	r3, [r4, #0]
 800c62a:	6123      	str	r3, [r4, #16]
 800c62c:	2301      	movs	r3, #1
 800c62e:	6163      	str	r3, [r4, #20]
 800c630:	b005      	add	sp, #20
 800c632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c634:	ab03      	add	r3, sp, #12
 800c636:	aa02      	add	r2, sp, #8
 800c638:	f7ff ffc2 	bl	800c5c0 <__swhatbuf_r>
 800c63c:	9f02      	ldr	r7, [sp, #8]
 800c63e:	9001      	str	r0, [sp, #4]
 800c640:	0039      	movs	r1, r7
 800c642:	0028      	movs	r0, r5
 800c644:	f7fc f91e 	bl	8008884 <_malloc_r>
 800c648:	2800      	cmp	r0, #0
 800c64a:	d108      	bne.n	800c65e <__smakebuf_r+0x4a>
 800c64c:	220c      	movs	r2, #12
 800c64e:	5ea3      	ldrsh	r3, [r4, r2]
 800c650:	059a      	lsls	r2, r3, #22
 800c652:	d4ed      	bmi.n	800c630 <__smakebuf_r+0x1c>
 800c654:	2203      	movs	r2, #3
 800c656:	4393      	bics	r3, r2
 800c658:	431e      	orrs	r6, r3
 800c65a:	81a6      	strh	r6, [r4, #12]
 800c65c:	e7e2      	b.n	800c624 <__smakebuf_r+0x10>
 800c65e:	2380      	movs	r3, #128	@ 0x80
 800c660:	89a2      	ldrh	r2, [r4, #12]
 800c662:	6020      	str	r0, [r4, #0]
 800c664:	4313      	orrs	r3, r2
 800c666:	81a3      	strh	r3, [r4, #12]
 800c668:	9b03      	ldr	r3, [sp, #12]
 800c66a:	6120      	str	r0, [r4, #16]
 800c66c:	6167      	str	r7, [r4, #20]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00c      	beq.n	800c68c <__smakebuf_r+0x78>
 800c672:	0028      	movs	r0, r5
 800c674:	230e      	movs	r3, #14
 800c676:	5ee1      	ldrsh	r1, [r4, r3]
 800c678:	f000 f842 	bl	800c700 <_isatty_r>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	d005      	beq.n	800c68c <__smakebuf_r+0x78>
 800c680:	2303      	movs	r3, #3
 800c682:	89a2      	ldrh	r2, [r4, #12]
 800c684:	439a      	bics	r2, r3
 800c686:	3b02      	subs	r3, #2
 800c688:	4313      	orrs	r3, r2
 800c68a:	81a3      	strh	r3, [r4, #12]
 800c68c:	89a3      	ldrh	r3, [r4, #12]
 800c68e:	9a01      	ldr	r2, [sp, #4]
 800c690:	4313      	orrs	r3, r2
 800c692:	81a3      	strh	r3, [r4, #12]
 800c694:	e7cc      	b.n	800c630 <__smakebuf_r+0x1c>

0800c696 <memmove>:
 800c696:	b510      	push	{r4, lr}
 800c698:	4288      	cmp	r0, r1
 800c69a:	d902      	bls.n	800c6a2 <memmove+0xc>
 800c69c:	188b      	adds	r3, r1, r2
 800c69e:	4298      	cmp	r0, r3
 800c6a0:	d308      	bcc.n	800c6b4 <memmove+0x1e>
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d007      	beq.n	800c6b8 <memmove+0x22>
 800c6a8:	5ccc      	ldrb	r4, [r1, r3]
 800c6aa:	54c4      	strb	r4, [r0, r3]
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	e7f9      	b.n	800c6a4 <memmove+0xe>
 800c6b0:	5c8b      	ldrb	r3, [r1, r2]
 800c6b2:	5483      	strb	r3, [r0, r2]
 800c6b4:	3a01      	subs	r2, #1
 800c6b6:	d2fb      	bcs.n	800c6b0 <memmove+0x1a>
 800c6b8:	bd10      	pop	{r4, pc}

0800c6ba <strncmp>:
 800c6ba:	b530      	push	{r4, r5, lr}
 800c6bc:	0005      	movs	r5, r0
 800c6be:	1e10      	subs	r0, r2, #0
 800c6c0:	d00b      	beq.n	800c6da <strncmp+0x20>
 800c6c2:	2400      	movs	r4, #0
 800c6c4:	3a01      	subs	r2, #1
 800c6c6:	5d2b      	ldrb	r3, [r5, r4]
 800c6c8:	5d08      	ldrb	r0, [r1, r4]
 800c6ca:	4283      	cmp	r3, r0
 800c6cc:	d104      	bne.n	800c6d8 <strncmp+0x1e>
 800c6ce:	4294      	cmp	r4, r2
 800c6d0:	d002      	beq.n	800c6d8 <strncmp+0x1e>
 800c6d2:	3401      	adds	r4, #1
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d1f6      	bne.n	800c6c6 <strncmp+0xc>
 800c6d8:	1a18      	subs	r0, r3, r0
 800c6da:	bd30      	pop	{r4, r5, pc}

0800c6dc <_fstat_r>:
 800c6dc:	2300      	movs	r3, #0
 800c6de:	b570      	push	{r4, r5, r6, lr}
 800c6e0:	4d06      	ldr	r5, [pc, #24]	@ (800c6fc <_fstat_r+0x20>)
 800c6e2:	0004      	movs	r4, r0
 800c6e4:	0008      	movs	r0, r1
 800c6e6:	0011      	movs	r1, r2
 800c6e8:	602b      	str	r3, [r5, #0]
 800c6ea:	f7f7 fcb9 	bl	8004060 <_fstat>
 800c6ee:	1c43      	adds	r3, r0, #1
 800c6f0:	d103      	bne.n	800c6fa <_fstat_r+0x1e>
 800c6f2:	682b      	ldr	r3, [r5, #0]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d000      	beq.n	800c6fa <_fstat_r+0x1e>
 800c6f8:	6023      	str	r3, [r4, #0]
 800c6fa:	bd70      	pop	{r4, r5, r6, pc}
 800c6fc:	20001440 	.word	0x20001440

0800c700 <_isatty_r>:
 800c700:	2300      	movs	r3, #0
 800c702:	b570      	push	{r4, r5, r6, lr}
 800c704:	4d06      	ldr	r5, [pc, #24]	@ (800c720 <_isatty_r+0x20>)
 800c706:	0004      	movs	r4, r0
 800c708:	0008      	movs	r0, r1
 800c70a:	602b      	str	r3, [r5, #0]
 800c70c:	f7f7 fcb6 	bl	800407c <_isatty>
 800c710:	1c43      	adds	r3, r0, #1
 800c712:	d103      	bne.n	800c71c <_isatty_r+0x1c>
 800c714:	682b      	ldr	r3, [r5, #0]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d000      	beq.n	800c71c <_isatty_r+0x1c>
 800c71a:	6023      	str	r3, [r4, #0]
 800c71c:	bd70      	pop	{r4, r5, r6, pc}
 800c71e:	46c0      	nop			@ (mov r8, r8)
 800c720:	20001440 	.word	0x20001440

0800c724 <nan>:
 800c724:	2000      	movs	r0, #0
 800c726:	4901      	ldr	r1, [pc, #4]	@ (800c72c <nan+0x8>)
 800c728:	4770      	bx	lr
 800c72a:	46c0      	nop			@ (mov r8, r8)
 800c72c:	7ff80000 	.word	0x7ff80000

0800c730 <__assert_func>:
 800c730:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c732:	0014      	movs	r4, r2
 800c734:	001a      	movs	r2, r3
 800c736:	4b09      	ldr	r3, [pc, #36]	@ (800c75c <__assert_func+0x2c>)
 800c738:	0005      	movs	r5, r0
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	000e      	movs	r6, r1
 800c73e:	68d8      	ldr	r0, [r3, #12]
 800c740:	4b07      	ldr	r3, [pc, #28]	@ (800c760 <__assert_func+0x30>)
 800c742:	2c00      	cmp	r4, #0
 800c744:	d101      	bne.n	800c74a <__assert_func+0x1a>
 800c746:	4b07      	ldr	r3, [pc, #28]	@ (800c764 <__assert_func+0x34>)
 800c748:	001c      	movs	r4, r3
 800c74a:	4907      	ldr	r1, [pc, #28]	@ (800c768 <__assert_func+0x38>)
 800c74c:	9301      	str	r3, [sp, #4]
 800c74e:	9402      	str	r4, [sp, #8]
 800c750:	002b      	movs	r3, r5
 800c752:	9600      	str	r6, [sp, #0]
 800c754:	f000 fbb2 	bl	800cebc <fiprintf>
 800c758:	f000 fbc0 	bl	800cedc <abort>
 800c75c:	20000030 	.word	0x20000030
 800c760:	0800d54f 	.word	0x0800d54f
 800c764:	0800d58a 	.word	0x0800d58a
 800c768:	0800d55c 	.word	0x0800d55c

0800c76c <_calloc_r>:
 800c76c:	b570      	push	{r4, r5, r6, lr}
 800c76e:	0c0b      	lsrs	r3, r1, #16
 800c770:	0c15      	lsrs	r5, r2, #16
 800c772:	2b00      	cmp	r3, #0
 800c774:	d11e      	bne.n	800c7b4 <_calloc_r+0x48>
 800c776:	2d00      	cmp	r5, #0
 800c778:	d10c      	bne.n	800c794 <_calloc_r+0x28>
 800c77a:	b289      	uxth	r1, r1
 800c77c:	b294      	uxth	r4, r2
 800c77e:	434c      	muls	r4, r1
 800c780:	0021      	movs	r1, r4
 800c782:	f7fc f87f 	bl	8008884 <_malloc_r>
 800c786:	1e05      	subs	r5, r0, #0
 800c788:	d01b      	beq.n	800c7c2 <_calloc_r+0x56>
 800c78a:	0022      	movs	r2, r4
 800c78c:	2100      	movs	r1, #0
 800c78e:	f7fd faad 	bl	8009cec <memset>
 800c792:	e016      	b.n	800c7c2 <_calloc_r+0x56>
 800c794:	1c2b      	adds	r3, r5, #0
 800c796:	1c0c      	adds	r4, r1, #0
 800c798:	b289      	uxth	r1, r1
 800c79a:	b292      	uxth	r2, r2
 800c79c:	434a      	muls	r2, r1
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	b2a1      	uxth	r1, r4
 800c7a2:	4359      	muls	r1, r3
 800c7a4:	0c14      	lsrs	r4, r2, #16
 800c7a6:	190c      	adds	r4, r1, r4
 800c7a8:	0c23      	lsrs	r3, r4, #16
 800c7aa:	d107      	bne.n	800c7bc <_calloc_r+0x50>
 800c7ac:	0424      	lsls	r4, r4, #16
 800c7ae:	b292      	uxth	r2, r2
 800c7b0:	4314      	orrs	r4, r2
 800c7b2:	e7e5      	b.n	800c780 <_calloc_r+0x14>
 800c7b4:	2d00      	cmp	r5, #0
 800c7b6:	d101      	bne.n	800c7bc <_calloc_r+0x50>
 800c7b8:	1c14      	adds	r4, r2, #0
 800c7ba:	e7ed      	b.n	800c798 <_calloc_r+0x2c>
 800c7bc:	230c      	movs	r3, #12
 800c7be:	2500      	movs	r5, #0
 800c7c0:	6003      	str	r3, [r0, #0]
 800c7c2:	0028      	movs	r0, r5
 800c7c4:	bd70      	pop	{r4, r5, r6, pc}

0800c7c6 <rshift>:
 800c7c6:	0002      	movs	r2, r0
 800c7c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c7ca:	6904      	ldr	r4, [r0, #16]
 800c7cc:	b085      	sub	sp, #20
 800c7ce:	3214      	adds	r2, #20
 800c7d0:	114b      	asrs	r3, r1, #5
 800c7d2:	0016      	movs	r6, r2
 800c7d4:	9302      	str	r3, [sp, #8]
 800c7d6:	429c      	cmp	r4, r3
 800c7d8:	dd31      	ble.n	800c83e <rshift+0x78>
 800c7da:	261f      	movs	r6, #31
 800c7dc:	000f      	movs	r7, r1
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	00a5      	lsls	r5, r4, #2
 800c7e2:	18d3      	adds	r3, r2, r3
 800c7e4:	4037      	ands	r7, r6
 800c7e6:	1955      	adds	r5, r2, r5
 800c7e8:	9300      	str	r3, [sp, #0]
 800c7ea:	9701      	str	r7, [sp, #4]
 800c7ec:	4231      	tst	r1, r6
 800c7ee:	d10d      	bne.n	800c80c <rshift+0x46>
 800c7f0:	0016      	movs	r6, r2
 800c7f2:	0019      	movs	r1, r3
 800c7f4:	428d      	cmp	r5, r1
 800c7f6:	d836      	bhi.n	800c866 <rshift+0xa0>
 800c7f8:	9b00      	ldr	r3, [sp, #0]
 800c7fa:	2600      	movs	r6, #0
 800c7fc:	3b03      	subs	r3, #3
 800c7fe:	429d      	cmp	r5, r3
 800c800:	d302      	bcc.n	800c808 <rshift+0x42>
 800c802:	9b02      	ldr	r3, [sp, #8]
 800c804:	1ae4      	subs	r4, r4, r3
 800c806:	00a6      	lsls	r6, r4, #2
 800c808:	1996      	adds	r6, r2, r6
 800c80a:	e018      	b.n	800c83e <rshift+0x78>
 800c80c:	2120      	movs	r1, #32
 800c80e:	9e01      	ldr	r6, [sp, #4]
 800c810:	9f01      	ldr	r7, [sp, #4]
 800c812:	1b89      	subs	r1, r1, r6
 800c814:	9e00      	ldr	r6, [sp, #0]
 800c816:	9103      	str	r1, [sp, #12]
 800c818:	ce02      	ldmia	r6!, {r1}
 800c81a:	4694      	mov	ip, r2
 800c81c:	40f9      	lsrs	r1, r7
 800c81e:	42b5      	cmp	r5, r6
 800c820:	d816      	bhi.n	800c850 <rshift+0x8a>
 800c822:	9b00      	ldr	r3, [sp, #0]
 800c824:	2600      	movs	r6, #0
 800c826:	3301      	adds	r3, #1
 800c828:	429d      	cmp	r5, r3
 800c82a:	d303      	bcc.n	800c834 <rshift+0x6e>
 800c82c:	9b02      	ldr	r3, [sp, #8]
 800c82e:	1ae4      	subs	r4, r4, r3
 800c830:	00a6      	lsls	r6, r4, #2
 800c832:	3e04      	subs	r6, #4
 800c834:	1996      	adds	r6, r2, r6
 800c836:	6031      	str	r1, [r6, #0]
 800c838:	2900      	cmp	r1, #0
 800c83a:	d000      	beq.n	800c83e <rshift+0x78>
 800c83c:	3604      	adds	r6, #4
 800c83e:	1ab1      	subs	r1, r6, r2
 800c840:	1089      	asrs	r1, r1, #2
 800c842:	6101      	str	r1, [r0, #16]
 800c844:	4296      	cmp	r6, r2
 800c846:	d101      	bne.n	800c84c <rshift+0x86>
 800c848:	2300      	movs	r3, #0
 800c84a:	6143      	str	r3, [r0, #20]
 800c84c:	b005      	add	sp, #20
 800c84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c850:	6837      	ldr	r7, [r6, #0]
 800c852:	9b03      	ldr	r3, [sp, #12]
 800c854:	409f      	lsls	r7, r3
 800c856:	430f      	orrs	r7, r1
 800c858:	4661      	mov	r1, ip
 800c85a:	c180      	stmia	r1!, {r7}
 800c85c:	468c      	mov	ip, r1
 800c85e:	9b01      	ldr	r3, [sp, #4]
 800c860:	ce02      	ldmia	r6!, {r1}
 800c862:	40d9      	lsrs	r1, r3
 800c864:	e7db      	b.n	800c81e <rshift+0x58>
 800c866:	c980      	ldmia	r1!, {r7}
 800c868:	c680      	stmia	r6!, {r7}
 800c86a:	e7c3      	b.n	800c7f4 <rshift+0x2e>

0800c86c <__hexdig_fun>:
 800c86c:	0002      	movs	r2, r0
 800c86e:	3a30      	subs	r2, #48	@ 0x30
 800c870:	0003      	movs	r3, r0
 800c872:	2a09      	cmp	r2, #9
 800c874:	d802      	bhi.n	800c87c <__hexdig_fun+0x10>
 800c876:	3b20      	subs	r3, #32
 800c878:	b2d8      	uxtb	r0, r3
 800c87a:	4770      	bx	lr
 800c87c:	0002      	movs	r2, r0
 800c87e:	3a61      	subs	r2, #97	@ 0x61
 800c880:	2a05      	cmp	r2, #5
 800c882:	d801      	bhi.n	800c888 <__hexdig_fun+0x1c>
 800c884:	3b47      	subs	r3, #71	@ 0x47
 800c886:	e7f7      	b.n	800c878 <__hexdig_fun+0xc>
 800c888:	001a      	movs	r2, r3
 800c88a:	3a41      	subs	r2, #65	@ 0x41
 800c88c:	2000      	movs	r0, #0
 800c88e:	2a05      	cmp	r2, #5
 800c890:	d8f3      	bhi.n	800c87a <__hexdig_fun+0xe>
 800c892:	3b27      	subs	r3, #39	@ 0x27
 800c894:	e7f0      	b.n	800c878 <__hexdig_fun+0xc>
	...

0800c898 <__gethex>:
 800c898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c89a:	b089      	sub	sp, #36	@ 0x24
 800c89c:	9307      	str	r3, [sp, #28]
 800c89e:	680b      	ldr	r3, [r1, #0]
 800c8a0:	9201      	str	r2, [sp, #4]
 800c8a2:	9003      	str	r0, [sp, #12]
 800c8a4:	9106      	str	r1, [sp, #24]
 800c8a6:	1c9a      	adds	r2, r3, #2
 800c8a8:	0011      	movs	r1, r2
 800c8aa:	3201      	adds	r2, #1
 800c8ac:	1e50      	subs	r0, r2, #1
 800c8ae:	7800      	ldrb	r0, [r0, #0]
 800c8b0:	2830      	cmp	r0, #48	@ 0x30
 800c8b2:	d0f9      	beq.n	800c8a8 <__gethex+0x10>
 800c8b4:	1acb      	subs	r3, r1, r3
 800c8b6:	3b02      	subs	r3, #2
 800c8b8:	9305      	str	r3, [sp, #20]
 800c8ba:	9100      	str	r1, [sp, #0]
 800c8bc:	f7ff ffd6 	bl	800c86c <__hexdig_fun>
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	001d      	movs	r5, r3
 800c8c4:	9302      	str	r3, [sp, #8]
 800c8c6:	4298      	cmp	r0, r3
 800c8c8:	d11e      	bne.n	800c908 <__gethex+0x70>
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	49a6      	ldr	r1, [pc, #664]	@ (800cb68 <__gethex+0x2d0>)
 800c8ce:	9800      	ldr	r0, [sp, #0]
 800c8d0:	f7ff fef3 	bl	800c6ba <strncmp>
 800c8d4:	0007      	movs	r7, r0
 800c8d6:	42a8      	cmp	r0, r5
 800c8d8:	d000      	beq.n	800c8dc <__gethex+0x44>
 800c8da:	e06a      	b.n	800c9b2 <__gethex+0x11a>
 800c8dc:	9b00      	ldr	r3, [sp, #0]
 800c8de:	7858      	ldrb	r0, [r3, #1]
 800c8e0:	1c5c      	adds	r4, r3, #1
 800c8e2:	f7ff ffc3 	bl	800c86c <__hexdig_fun>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	9302      	str	r3, [sp, #8]
 800c8ea:	42a8      	cmp	r0, r5
 800c8ec:	d02f      	beq.n	800c94e <__gethex+0xb6>
 800c8ee:	9400      	str	r4, [sp, #0]
 800c8f0:	9b00      	ldr	r3, [sp, #0]
 800c8f2:	7818      	ldrb	r0, [r3, #0]
 800c8f4:	2830      	cmp	r0, #48	@ 0x30
 800c8f6:	d009      	beq.n	800c90c <__gethex+0x74>
 800c8f8:	f7ff ffb8 	bl	800c86c <__hexdig_fun>
 800c8fc:	4242      	negs	r2, r0
 800c8fe:	4142      	adcs	r2, r0
 800c900:	2301      	movs	r3, #1
 800c902:	0025      	movs	r5, r4
 800c904:	9202      	str	r2, [sp, #8]
 800c906:	9305      	str	r3, [sp, #20]
 800c908:	9c00      	ldr	r4, [sp, #0]
 800c90a:	e004      	b.n	800c916 <__gethex+0x7e>
 800c90c:	9b00      	ldr	r3, [sp, #0]
 800c90e:	3301      	adds	r3, #1
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	e7ed      	b.n	800c8f0 <__gethex+0x58>
 800c914:	3401      	adds	r4, #1
 800c916:	7820      	ldrb	r0, [r4, #0]
 800c918:	f7ff ffa8 	bl	800c86c <__hexdig_fun>
 800c91c:	1e07      	subs	r7, r0, #0
 800c91e:	d1f9      	bne.n	800c914 <__gethex+0x7c>
 800c920:	2201      	movs	r2, #1
 800c922:	0020      	movs	r0, r4
 800c924:	4990      	ldr	r1, [pc, #576]	@ (800cb68 <__gethex+0x2d0>)
 800c926:	f7ff fec8 	bl	800c6ba <strncmp>
 800c92a:	2800      	cmp	r0, #0
 800c92c:	d10d      	bne.n	800c94a <__gethex+0xb2>
 800c92e:	2d00      	cmp	r5, #0
 800c930:	d106      	bne.n	800c940 <__gethex+0xa8>
 800c932:	3401      	adds	r4, #1
 800c934:	0025      	movs	r5, r4
 800c936:	7820      	ldrb	r0, [r4, #0]
 800c938:	f7ff ff98 	bl	800c86c <__hexdig_fun>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	d102      	bne.n	800c946 <__gethex+0xae>
 800c940:	1b2d      	subs	r5, r5, r4
 800c942:	00af      	lsls	r7, r5, #2
 800c944:	e003      	b.n	800c94e <__gethex+0xb6>
 800c946:	3401      	adds	r4, #1
 800c948:	e7f5      	b.n	800c936 <__gethex+0x9e>
 800c94a:	2d00      	cmp	r5, #0
 800c94c:	d1f8      	bne.n	800c940 <__gethex+0xa8>
 800c94e:	2220      	movs	r2, #32
 800c950:	7823      	ldrb	r3, [r4, #0]
 800c952:	0026      	movs	r6, r4
 800c954:	4393      	bics	r3, r2
 800c956:	2b50      	cmp	r3, #80	@ 0x50
 800c958:	d11d      	bne.n	800c996 <__gethex+0xfe>
 800c95a:	7863      	ldrb	r3, [r4, #1]
 800c95c:	2b2b      	cmp	r3, #43	@ 0x2b
 800c95e:	d02d      	beq.n	800c9bc <__gethex+0x124>
 800c960:	2b2d      	cmp	r3, #45	@ 0x2d
 800c962:	d02f      	beq.n	800c9c4 <__gethex+0x12c>
 800c964:	2300      	movs	r3, #0
 800c966:	1c66      	adds	r6, r4, #1
 800c968:	9304      	str	r3, [sp, #16]
 800c96a:	7830      	ldrb	r0, [r6, #0]
 800c96c:	f7ff ff7e 	bl	800c86c <__hexdig_fun>
 800c970:	1e43      	subs	r3, r0, #1
 800c972:	b2db      	uxtb	r3, r3
 800c974:	0005      	movs	r5, r0
 800c976:	2b18      	cmp	r3, #24
 800c978:	d82a      	bhi.n	800c9d0 <__gethex+0x138>
 800c97a:	7870      	ldrb	r0, [r6, #1]
 800c97c:	f7ff ff76 	bl	800c86c <__hexdig_fun>
 800c980:	1e43      	subs	r3, r0, #1
 800c982:	b2db      	uxtb	r3, r3
 800c984:	3601      	adds	r6, #1
 800c986:	3d10      	subs	r5, #16
 800c988:	2b18      	cmp	r3, #24
 800c98a:	d91d      	bls.n	800c9c8 <__gethex+0x130>
 800c98c:	9b04      	ldr	r3, [sp, #16]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d000      	beq.n	800c994 <__gethex+0xfc>
 800c992:	426d      	negs	r5, r5
 800c994:	197f      	adds	r7, r7, r5
 800c996:	9b06      	ldr	r3, [sp, #24]
 800c998:	601e      	str	r6, [r3, #0]
 800c99a:	9b02      	ldr	r3, [sp, #8]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d019      	beq.n	800c9d4 <__gethex+0x13c>
 800c9a0:	9b05      	ldr	r3, [sp, #20]
 800c9a2:	2606      	movs	r6, #6
 800c9a4:	425a      	negs	r2, r3
 800c9a6:	4153      	adcs	r3, r2
 800c9a8:	425b      	negs	r3, r3
 800c9aa:	401e      	ands	r6, r3
 800c9ac:	0030      	movs	r0, r6
 800c9ae:	b009      	add	sp, #36	@ 0x24
 800c9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	2700      	movs	r7, #0
 800c9b6:	9c00      	ldr	r4, [sp, #0]
 800c9b8:	9302      	str	r3, [sp, #8]
 800c9ba:	e7c8      	b.n	800c94e <__gethex+0xb6>
 800c9bc:	2300      	movs	r3, #0
 800c9be:	9304      	str	r3, [sp, #16]
 800c9c0:	1ca6      	adds	r6, r4, #2
 800c9c2:	e7d2      	b.n	800c96a <__gethex+0xd2>
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	e7fa      	b.n	800c9be <__gethex+0x126>
 800c9c8:	230a      	movs	r3, #10
 800c9ca:	435d      	muls	r5, r3
 800c9cc:	182d      	adds	r5, r5, r0
 800c9ce:	e7d4      	b.n	800c97a <__gethex+0xe2>
 800c9d0:	0026      	movs	r6, r4
 800c9d2:	e7e0      	b.n	800c996 <__gethex+0xfe>
 800c9d4:	9b00      	ldr	r3, [sp, #0]
 800c9d6:	9902      	ldr	r1, [sp, #8]
 800c9d8:	1ae3      	subs	r3, r4, r3
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	2b07      	cmp	r3, #7
 800c9de:	dc0a      	bgt.n	800c9f6 <__gethex+0x15e>
 800c9e0:	9803      	ldr	r0, [sp, #12]
 800c9e2:	f7fe f8f5 	bl	800abd0 <_Balloc>
 800c9e6:	1e05      	subs	r5, r0, #0
 800c9e8:	d108      	bne.n	800c9fc <__gethex+0x164>
 800c9ea:	002a      	movs	r2, r5
 800c9ec:	21e4      	movs	r1, #228	@ 0xe4
 800c9ee:	4b5f      	ldr	r3, [pc, #380]	@ (800cb6c <__gethex+0x2d4>)
 800c9f0:	485f      	ldr	r0, [pc, #380]	@ (800cb70 <__gethex+0x2d8>)
 800c9f2:	f7ff fe9d 	bl	800c730 <__assert_func>
 800c9f6:	3101      	adds	r1, #1
 800c9f8:	105b      	asrs	r3, r3, #1
 800c9fa:	e7ef      	b.n	800c9dc <__gethex+0x144>
 800c9fc:	0003      	movs	r3, r0
 800c9fe:	3314      	adds	r3, #20
 800ca00:	9302      	str	r3, [sp, #8]
 800ca02:	9305      	str	r3, [sp, #20]
 800ca04:	2300      	movs	r3, #0
 800ca06:	001e      	movs	r6, r3
 800ca08:	9304      	str	r3, [sp, #16]
 800ca0a:	9b00      	ldr	r3, [sp, #0]
 800ca0c:	42a3      	cmp	r3, r4
 800ca0e:	d338      	bcc.n	800ca82 <__gethex+0x1ea>
 800ca10:	9c05      	ldr	r4, [sp, #20]
 800ca12:	9b02      	ldr	r3, [sp, #8]
 800ca14:	c440      	stmia	r4!, {r6}
 800ca16:	1ae4      	subs	r4, r4, r3
 800ca18:	10a4      	asrs	r4, r4, #2
 800ca1a:	0030      	movs	r0, r6
 800ca1c:	612c      	str	r4, [r5, #16]
 800ca1e:	f7fe f9cf 	bl	800adc0 <__hi0bits>
 800ca22:	9b01      	ldr	r3, [sp, #4]
 800ca24:	0164      	lsls	r4, r4, #5
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	1a26      	subs	r6, r4, r0
 800ca2a:	9300      	str	r3, [sp, #0]
 800ca2c:	429e      	cmp	r6, r3
 800ca2e:	dd52      	ble.n	800cad6 <__gethex+0x23e>
 800ca30:	1af6      	subs	r6, r6, r3
 800ca32:	0031      	movs	r1, r6
 800ca34:	0028      	movs	r0, r5
 800ca36:	f7fe fd6a 	bl	800b50e <__any_on>
 800ca3a:	1e04      	subs	r4, r0, #0
 800ca3c:	d00f      	beq.n	800ca5e <__gethex+0x1c6>
 800ca3e:	2401      	movs	r4, #1
 800ca40:	211f      	movs	r1, #31
 800ca42:	0020      	movs	r0, r4
 800ca44:	1e73      	subs	r3, r6, #1
 800ca46:	4019      	ands	r1, r3
 800ca48:	4088      	lsls	r0, r1
 800ca4a:	0001      	movs	r1, r0
 800ca4c:	115a      	asrs	r2, r3, #5
 800ca4e:	9802      	ldr	r0, [sp, #8]
 800ca50:	0092      	lsls	r2, r2, #2
 800ca52:	5812      	ldr	r2, [r2, r0]
 800ca54:	420a      	tst	r2, r1
 800ca56:	d002      	beq.n	800ca5e <__gethex+0x1c6>
 800ca58:	42a3      	cmp	r3, r4
 800ca5a:	dc34      	bgt.n	800cac6 <__gethex+0x22e>
 800ca5c:	2402      	movs	r4, #2
 800ca5e:	0031      	movs	r1, r6
 800ca60:	0028      	movs	r0, r5
 800ca62:	f7ff feb0 	bl	800c7c6 <rshift>
 800ca66:	19bf      	adds	r7, r7, r6
 800ca68:	9b01      	ldr	r3, [sp, #4]
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	42bb      	cmp	r3, r7
 800ca6e:	da42      	bge.n	800caf6 <__gethex+0x25e>
 800ca70:	0029      	movs	r1, r5
 800ca72:	9803      	ldr	r0, [sp, #12]
 800ca74:	f7fe f8f0 	bl	800ac58 <_Bfree>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ca7c:	26a3      	movs	r6, #163	@ 0xa3
 800ca7e:	6013      	str	r3, [r2, #0]
 800ca80:	e794      	b.n	800c9ac <__gethex+0x114>
 800ca82:	3c01      	subs	r4, #1
 800ca84:	7823      	ldrb	r3, [r4, #0]
 800ca86:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca88:	d012      	beq.n	800cab0 <__gethex+0x218>
 800ca8a:	9b04      	ldr	r3, [sp, #16]
 800ca8c:	2b20      	cmp	r3, #32
 800ca8e:	d104      	bne.n	800ca9a <__gethex+0x202>
 800ca90:	9b05      	ldr	r3, [sp, #20]
 800ca92:	c340      	stmia	r3!, {r6}
 800ca94:	2600      	movs	r6, #0
 800ca96:	9305      	str	r3, [sp, #20]
 800ca98:	9604      	str	r6, [sp, #16]
 800ca9a:	7820      	ldrb	r0, [r4, #0]
 800ca9c:	f7ff fee6 	bl	800c86c <__hexdig_fun>
 800caa0:	230f      	movs	r3, #15
 800caa2:	4018      	ands	r0, r3
 800caa4:	9b04      	ldr	r3, [sp, #16]
 800caa6:	4098      	lsls	r0, r3
 800caa8:	3304      	adds	r3, #4
 800caaa:	4306      	orrs	r6, r0
 800caac:	9304      	str	r3, [sp, #16]
 800caae:	e7ac      	b.n	800ca0a <__gethex+0x172>
 800cab0:	9b00      	ldr	r3, [sp, #0]
 800cab2:	42a3      	cmp	r3, r4
 800cab4:	d8e9      	bhi.n	800ca8a <__gethex+0x1f2>
 800cab6:	2201      	movs	r2, #1
 800cab8:	0020      	movs	r0, r4
 800caba:	492b      	ldr	r1, [pc, #172]	@ (800cb68 <__gethex+0x2d0>)
 800cabc:	f7ff fdfd 	bl	800c6ba <strncmp>
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d1e2      	bne.n	800ca8a <__gethex+0x1f2>
 800cac4:	e7a1      	b.n	800ca0a <__gethex+0x172>
 800cac6:	0028      	movs	r0, r5
 800cac8:	1eb1      	subs	r1, r6, #2
 800caca:	f7fe fd20 	bl	800b50e <__any_on>
 800cace:	2800      	cmp	r0, #0
 800cad0:	d0c4      	beq.n	800ca5c <__gethex+0x1c4>
 800cad2:	2403      	movs	r4, #3
 800cad4:	e7c3      	b.n	800ca5e <__gethex+0x1c6>
 800cad6:	9b00      	ldr	r3, [sp, #0]
 800cad8:	2400      	movs	r4, #0
 800cada:	429e      	cmp	r6, r3
 800cadc:	dac4      	bge.n	800ca68 <__gethex+0x1d0>
 800cade:	1b9e      	subs	r6, r3, r6
 800cae0:	0029      	movs	r1, r5
 800cae2:	0032      	movs	r2, r6
 800cae4:	9803      	ldr	r0, [sp, #12]
 800cae6:	f7fe fad9 	bl	800b09c <__lshift>
 800caea:	0003      	movs	r3, r0
 800caec:	3314      	adds	r3, #20
 800caee:	0005      	movs	r5, r0
 800caf0:	1bbf      	subs	r7, r7, r6
 800caf2:	9302      	str	r3, [sp, #8]
 800caf4:	e7b8      	b.n	800ca68 <__gethex+0x1d0>
 800caf6:	9b01      	ldr	r3, [sp, #4]
 800caf8:	685e      	ldr	r6, [r3, #4]
 800cafa:	42be      	cmp	r6, r7
 800cafc:	dd6f      	ble.n	800cbde <__gethex+0x346>
 800cafe:	9b00      	ldr	r3, [sp, #0]
 800cb00:	1bf6      	subs	r6, r6, r7
 800cb02:	42b3      	cmp	r3, r6
 800cb04:	dc36      	bgt.n	800cb74 <__gethex+0x2dc>
 800cb06:	9b01      	ldr	r3, [sp, #4]
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	2b02      	cmp	r3, #2
 800cb0c:	d024      	beq.n	800cb58 <__gethex+0x2c0>
 800cb0e:	2b03      	cmp	r3, #3
 800cb10:	d026      	beq.n	800cb60 <__gethex+0x2c8>
 800cb12:	2b01      	cmp	r3, #1
 800cb14:	d117      	bne.n	800cb46 <__gethex+0x2ae>
 800cb16:	9b00      	ldr	r3, [sp, #0]
 800cb18:	42b3      	cmp	r3, r6
 800cb1a:	d114      	bne.n	800cb46 <__gethex+0x2ae>
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d10b      	bne.n	800cb38 <__gethex+0x2a0>
 800cb20:	9b01      	ldr	r3, [sp, #4]
 800cb22:	9a07      	ldr	r2, [sp, #28]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	2662      	movs	r6, #98	@ 0x62
 800cb28:	6013      	str	r3, [r2, #0]
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	9a02      	ldr	r2, [sp, #8]
 800cb2e:	612b      	str	r3, [r5, #16]
 800cb30:	6013      	str	r3, [r2, #0]
 800cb32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb34:	601d      	str	r5, [r3, #0]
 800cb36:	e739      	b.n	800c9ac <__gethex+0x114>
 800cb38:	9900      	ldr	r1, [sp, #0]
 800cb3a:	0028      	movs	r0, r5
 800cb3c:	3901      	subs	r1, #1
 800cb3e:	f7fe fce6 	bl	800b50e <__any_on>
 800cb42:	2800      	cmp	r0, #0
 800cb44:	d1ec      	bne.n	800cb20 <__gethex+0x288>
 800cb46:	0029      	movs	r1, r5
 800cb48:	9803      	ldr	r0, [sp, #12]
 800cb4a:	f7fe f885 	bl	800ac58 <_Bfree>
 800cb4e:	2300      	movs	r3, #0
 800cb50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cb52:	2650      	movs	r6, #80	@ 0x50
 800cb54:	6013      	str	r3, [r2, #0]
 800cb56:	e729      	b.n	800c9ac <__gethex+0x114>
 800cb58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d1f3      	bne.n	800cb46 <__gethex+0x2ae>
 800cb5e:	e7df      	b.n	800cb20 <__gethex+0x288>
 800cb60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d1dc      	bne.n	800cb20 <__gethex+0x288>
 800cb66:	e7ee      	b.n	800cb46 <__gethex+0x2ae>
 800cb68:	0800d534 	.word	0x0800d534
 800cb6c:	0800d4ca 	.word	0x0800d4ca
 800cb70:	0800d58b 	.word	0x0800d58b
 800cb74:	1e77      	subs	r7, r6, #1
 800cb76:	2c00      	cmp	r4, #0
 800cb78:	d12f      	bne.n	800cbda <__gethex+0x342>
 800cb7a:	2f00      	cmp	r7, #0
 800cb7c:	d004      	beq.n	800cb88 <__gethex+0x2f0>
 800cb7e:	0039      	movs	r1, r7
 800cb80:	0028      	movs	r0, r5
 800cb82:	f7fe fcc4 	bl	800b50e <__any_on>
 800cb86:	0004      	movs	r4, r0
 800cb88:	231f      	movs	r3, #31
 800cb8a:	117a      	asrs	r2, r7, #5
 800cb8c:	401f      	ands	r7, r3
 800cb8e:	3b1e      	subs	r3, #30
 800cb90:	40bb      	lsls	r3, r7
 800cb92:	9902      	ldr	r1, [sp, #8]
 800cb94:	0092      	lsls	r2, r2, #2
 800cb96:	5852      	ldr	r2, [r2, r1]
 800cb98:	421a      	tst	r2, r3
 800cb9a:	d001      	beq.n	800cba0 <__gethex+0x308>
 800cb9c:	2302      	movs	r3, #2
 800cb9e:	431c      	orrs	r4, r3
 800cba0:	9b00      	ldr	r3, [sp, #0]
 800cba2:	0031      	movs	r1, r6
 800cba4:	1b9b      	subs	r3, r3, r6
 800cba6:	2602      	movs	r6, #2
 800cba8:	0028      	movs	r0, r5
 800cbaa:	9300      	str	r3, [sp, #0]
 800cbac:	f7ff fe0b 	bl	800c7c6 <rshift>
 800cbb0:	9b01      	ldr	r3, [sp, #4]
 800cbb2:	685f      	ldr	r7, [r3, #4]
 800cbb4:	2c00      	cmp	r4, #0
 800cbb6:	d03f      	beq.n	800cc38 <__gethex+0x3a0>
 800cbb8:	9b01      	ldr	r3, [sp, #4]
 800cbba:	68db      	ldr	r3, [r3, #12]
 800cbbc:	2b02      	cmp	r3, #2
 800cbbe:	d010      	beq.n	800cbe2 <__gethex+0x34a>
 800cbc0:	2b03      	cmp	r3, #3
 800cbc2:	d012      	beq.n	800cbea <__gethex+0x352>
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d106      	bne.n	800cbd6 <__gethex+0x33e>
 800cbc8:	07a2      	lsls	r2, r4, #30
 800cbca:	d504      	bpl.n	800cbd6 <__gethex+0x33e>
 800cbcc:	9a02      	ldr	r2, [sp, #8]
 800cbce:	6812      	ldr	r2, [r2, #0]
 800cbd0:	4314      	orrs	r4, r2
 800cbd2:	421c      	tst	r4, r3
 800cbd4:	d10c      	bne.n	800cbf0 <__gethex+0x358>
 800cbd6:	2310      	movs	r3, #16
 800cbd8:	e02d      	b.n	800cc36 <__gethex+0x39e>
 800cbda:	2401      	movs	r4, #1
 800cbdc:	e7d4      	b.n	800cb88 <__gethex+0x2f0>
 800cbde:	2601      	movs	r6, #1
 800cbe0:	e7e8      	b.n	800cbb4 <__gethex+0x31c>
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800cbe6:	1a9b      	subs	r3, r3, r2
 800cbe8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cbea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d0f2      	beq.n	800cbd6 <__gethex+0x33e>
 800cbf0:	692b      	ldr	r3, [r5, #16]
 800cbf2:	2000      	movs	r0, #0
 800cbf4:	9302      	str	r3, [sp, #8]
 800cbf6:	009b      	lsls	r3, r3, #2
 800cbf8:	9304      	str	r3, [sp, #16]
 800cbfa:	002b      	movs	r3, r5
 800cbfc:	9a04      	ldr	r2, [sp, #16]
 800cbfe:	3314      	adds	r3, #20
 800cc00:	1899      	adds	r1, r3, r2
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	1c54      	adds	r4, r2, #1
 800cc06:	d01c      	beq.n	800cc42 <__gethex+0x3aa>
 800cc08:	3201      	adds	r2, #1
 800cc0a:	601a      	str	r2, [r3, #0]
 800cc0c:	002b      	movs	r3, r5
 800cc0e:	3314      	adds	r3, #20
 800cc10:	2e02      	cmp	r6, #2
 800cc12:	d13f      	bne.n	800cc94 <__gethex+0x3fc>
 800cc14:	9a01      	ldr	r2, [sp, #4]
 800cc16:	9900      	ldr	r1, [sp, #0]
 800cc18:	6812      	ldr	r2, [r2, #0]
 800cc1a:	3a01      	subs	r2, #1
 800cc1c:	428a      	cmp	r2, r1
 800cc1e:	d109      	bne.n	800cc34 <__gethex+0x39c>
 800cc20:	000a      	movs	r2, r1
 800cc22:	201f      	movs	r0, #31
 800cc24:	4010      	ands	r0, r2
 800cc26:	2201      	movs	r2, #1
 800cc28:	4082      	lsls	r2, r0
 800cc2a:	1149      	asrs	r1, r1, #5
 800cc2c:	0089      	lsls	r1, r1, #2
 800cc2e:	58cb      	ldr	r3, [r1, r3]
 800cc30:	4213      	tst	r3, r2
 800cc32:	d13d      	bne.n	800ccb0 <__gethex+0x418>
 800cc34:	2320      	movs	r3, #32
 800cc36:	431e      	orrs	r6, r3
 800cc38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc3a:	601d      	str	r5, [r3, #0]
 800cc3c:	9b07      	ldr	r3, [sp, #28]
 800cc3e:	601f      	str	r7, [r3, #0]
 800cc40:	e6b4      	b.n	800c9ac <__gethex+0x114>
 800cc42:	c301      	stmia	r3!, {r0}
 800cc44:	4299      	cmp	r1, r3
 800cc46:	d8dc      	bhi.n	800cc02 <__gethex+0x36a>
 800cc48:	68ab      	ldr	r3, [r5, #8]
 800cc4a:	9a02      	ldr	r2, [sp, #8]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	db18      	blt.n	800cc82 <__gethex+0x3ea>
 800cc50:	6869      	ldr	r1, [r5, #4]
 800cc52:	9803      	ldr	r0, [sp, #12]
 800cc54:	3101      	adds	r1, #1
 800cc56:	f7fd ffbb 	bl	800abd0 <_Balloc>
 800cc5a:	1e04      	subs	r4, r0, #0
 800cc5c:	d104      	bne.n	800cc68 <__gethex+0x3d0>
 800cc5e:	0022      	movs	r2, r4
 800cc60:	2184      	movs	r1, #132	@ 0x84
 800cc62:	4b1d      	ldr	r3, [pc, #116]	@ (800ccd8 <__gethex+0x440>)
 800cc64:	481d      	ldr	r0, [pc, #116]	@ (800ccdc <__gethex+0x444>)
 800cc66:	e6c4      	b.n	800c9f2 <__gethex+0x15a>
 800cc68:	0029      	movs	r1, r5
 800cc6a:	692a      	ldr	r2, [r5, #16]
 800cc6c:	310c      	adds	r1, #12
 800cc6e:	3202      	adds	r2, #2
 800cc70:	0092      	lsls	r2, r2, #2
 800cc72:	300c      	adds	r0, #12
 800cc74:	f7fd f8de 	bl	8009e34 <memcpy>
 800cc78:	0029      	movs	r1, r5
 800cc7a:	9803      	ldr	r0, [sp, #12]
 800cc7c:	f7fd ffec 	bl	800ac58 <_Bfree>
 800cc80:	0025      	movs	r5, r4
 800cc82:	692b      	ldr	r3, [r5, #16]
 800cc84:	1c5a      	adds	r2, r3, #1
 800cc86:	612a      	str	r2, [r5, #16]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	3304      	adds	r3, #4
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	18eb      	adds	r3, r5, r3
 800cc90:	605a      	str	r2, [r3, #4]
 800cc92:	e7bb      	b.n	800cc0c <__gethex+0x374>
 800cc94:	692a      	ldr	r2, [r5, #16]
 800cc96:	9902      	ldr	r1, [sp, #8]
 800cc98:	428a      	cmp	r2, r1
 800cc9a:	dd0b      	ble.n	800ccb4 <__gethex+0x41c>
 800cc9c:	2101      	movs	r1, #1
 800cc9e:	0028      	movs	r0, r5
 800cca0:	f7ff fd91 	bl	800c7c6 <rshift>
 800cca4:	9b01      	ldr	r3, [sp, #4]
 800cca6:	3701      	adds	r7, #1
 800cca8:	689b      	ldr	r3, [r3, #8]
 800ccaa:	42bb      	cmp	r3, r7
 800ccac:	da00      	bge.n	800ccb0 <__gethex+0x418>
 800ccae:	e6df      	b.n	800ca70 <__gethex+0x1d8>
 800ccb0:	2601      	movs	r6, #1
 800ccb2:	e7bf      	b.n	800cc34 <__gethex+0x39c>
 800ccb4:	221f      	movs	r2, #31
 800ccb6:	9c00      	ldr	r4, [sp, #0]
 800ccb8:	9900      	ldr	r1, [sp, #0]
 800ccba:	4014      	ands	r4, r2
 800ccbc:	4211      	tst	r1, r2
 800ccbe:	d0f7      	beq.n	800ccb0 <__gethex+0x418>
 800ccc0:	9a04      	ldr	r2, [sp, #16]
 800ccc2:	189b      	adds	r3, r3, r2
 800ccc4:	3b04      	subs	r3, #4
 800ccc6:	6818      	ldr	r0, [r3, #0]
 800ccc8:	f7fe f87a 	bl	800adc0 <__hi0bits>
 800cccc:	2320      	movs	r3, #32
 800ccce:	1b1b      	subs	r3, r3, r4
 800ccd0:	4298      	cmp	r0, r3
 800ccd2:	dbe3      	blt.n	800cc9c <__gethex+0x404>
 800ccd4:	e7ec      	b.n	800ccb0 <__gethex+0x418>
 800ccd6:	46c0      	nop			@ (mov r8, r8)
 800ccd8:	0800d4ca 	.word	0x0800d4ca
 800ccdc:	0800d58b 	.word	0x0800d58b

0800cce0 <L_shift>:
 800cce0:	2308      	movs	r3, #8
 800cce2:	b570      	push	{r4, r5, r6, lr}
 800cce4:	2520      	movs	r5, #32
 800cce6:	1a9a      	subs	r2, r3, r2
 800cce8:	0092      	lsls	r2, r2, #2
 800ccea:	1aad      	subs	r5, r5, r2
 800ccec:	6843      	ldr	r3, [r0, #4]
 800ccee:	6804      	ldr	r4, [r0, #0]
 800ccf0:	001e      	movs	r6, r3
 800ccf2:	40ae      	lsls	r6, r5
 800ccf4:	40d3      	lsrs	r3, r2
 800ccf6:	4334      	orrs	r4, r6
 800ccf8:	6004      	str	r4, [r0, #0]
 800ccfa:	6043      	str	r3, [r0, #4]
 800ccfc:	3004      	adds	r0, #4
 800ccfe:	4288      	cmp	r0, r1
 800cd00:	d3f4      	bcc.n	800ccec <L_shift+0xc>
 800cd02:	bd70      	pop	{r4, r5, r6, pc}

0800cd04 <__match>:
 800cd04:	b530      	push	{r4, r5, lr}
 800cd06:	6803      	ldr	r3, [r0, #0]
 800cd08:	780c      	ldrb	r4, [r1, #0]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	2c00      	cmp	r4, #0
 800cd0e:	d102      	bne.n	800cd16 <__match+0x12>
 800cd10:	6003      	str	r3, [r0, #0]
 800cd12:	2001      	movs	r0, #1
 800cd14:	bd30      	pop	{r4, r5, pc}
 800cd16:	781a      	ldrb	r2, [r3, #0]
 800cd18:	0015      	movs	r5, r2
 800cd1a:	3d41      	subs	r5, #65	@ 0x41
 800cd1c:	2d19      	cmp	r5, #25
 800cd1e:	d800      	bhi.n	800cd22 <__match+0x1e>
 800cd20:	3220      	adds	r2, #32
 800cd22:	3101      	adds	r1, #1
 800cd24:	42a2      	cmp	r2, r4
 800cd26:	d0ef      	beq.n	800cd08 <__match+0x4>
 800cd28:	2000      	movs	r0, #0
 800cd2a:	e7f3      	b.n	800cd14 <__match+0x10>

0800cd2c <__hexnan>:
 800cd2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd2e:	680b      	ldr	r3, [r1, #0]
 800cd30:	b08b      	sub	sp, #44	@ 0x2c
 800cd32:	9201      	str	r2, [sp, #4]
 800cd34:	9901      	ldr	r1, [sp, #4]
 800cd36:	115a      	asrs	r2, r3, #5
 800cd38:	0092      	lsls	r2, r2, #2
 800cd3a:	188a      	adds	r2, r1, r2
 800cd3c:	9202      	str	r2, [sp, #8]
 800cd3e:	0019      	movs	r1, r3
 800cd40:	221f      	movs	r2, #31
 800cd42:	4011      	ands	r1, r2
 800cd44:	9008      	str	r0, [sp, #32]
 800cd46:	9106      	str	r1, [sp, #24]
 800cd48:	4213      	tst	r3, r2
 800cd4a:	d002      	beq.n	800cd52 <__hexnan+0x26>
 800cd4c:	9b02      	ldr	r3, [sp, #8]
 800cd4e:	3304      	adds	r3, #4
 800cd50:	9302      	str	r3, [sp, #8]
 800cd52:	9b02      	ldr	r3, [sp, #8]
 800cd54:	2500      	movs	r5, #0
 800cd56:	1f1f      	subs	r7, r3, #4
 800cd58:	003e      	movs	r6, r7
 800cd5a:	003c      	movs	r4, r7
 800cd5c:	9b08      	ldr	r3, [sp, #32]
 800cd5e:	603d      	str	r5, [r7, #0]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	9507      	str	r5, [sp, #28]
 800cd64:	9305      	str	r3, [sp, #20]
 800cd66:	9503      	str	r5, [sp, #12]
 800cd68:	9b05      	ldr	r3, [sp, #20]
 800cd6a:	3301      	adds	r3, #1
 800cd6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd6e:	9b05      	ldr	r3, [sp, #20]
 800cd70:	785b      	ldrb	r3, [r3, #1]
 800cd72:	9304      	str	r3, [sp, #16]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d028      	beq.n	800cdca <__hexnan+0x9e>
 800cd78:	9804      	ldr	r0, [sp, #16]
 800cd7a:	f7ff fd77 	bl	800c86c <__hexdig_fun>
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	d155      	bne.n	800ce2e <__hexnan+0x102>
 800cd82:	9b04      	ldr	r3, [sp, #16]
 800cd84:	2b20      	cmp	r3, #32
 800cd86:	d819      	bhi.n	800cdbc <__hexnan+0x90>
 800cd88:	9b03      	ldr	r3, [sp, #12]
 800cd8a:	9a07      	ldr	r2, [sp, #28]
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	dd12      	ble.n	800cdb6 <__hexnan+0x8a>
 800cd90:	42b4      	cmp	r4, r6
 800cd92:	d206      	bcs.n	800cda2 <__hexnan+0x76>
 800cd94:	2d07      	cmp	r5, #7
 800cd96:	dc04      	bgt.n	800cda2 <__hexnan+0x76>
 800cd98:	002a      	movs	r2, r5
 800cd9a:	0031      	movs	r1, r6
 800cd9c:	0020      	movs	r0, r4
 800cd9e:	f7ff ff9f 	bl	800cce0 <L_shift>
 800cda2:	9b01      	ldr	r3, [sp, #4]
 800cda4:	2508      	movs	r5, #8
 800cda6:	429c      	cmp	r4, r3
 800cda8:	d905      	bls.n	800cdb6 <__hexnan+0x8a>
 800cdaa:	1f26      	subs	r6, r4, #4
 800cdac:	2500      	movs	r5, #0
 800cdae:	0034      	movs	r4, r6
 800cdb0:	9b03      	ldr	r3, [sp, #12]
 800cdb2:	6035      	str	r5, [r6, #0]
 800cdb4:	9307      	str	r3, [sp, #28]
 800cdb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdb8:	9305      	str	r3, [sp, #20]
 800cdba:	e7d5      	b.n	800cd68 <__hexnan+0x3c>
 800cdbc:	9b04      	ldr	r3, [sp, #16]
 800cdbe:	2b29      	cmp	r3, #41	@ 0x29
 800cdc0:	d15a      	bne.n	800ce78 <__hexnan+0x14c>
 800cdc2:	9b05      	ldr	r3, [sp, #20]
 800cdc4:	9a08      	ldr	r2, [sp, #32]
 800cdc6:	3302      	adds	r3, #2
 800cdc8:	6013      	str	r3, [r2, #0]
 800cdca:	9b03      	ldr	r3, [sp, #12]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d053      	beq.n	800ce78 <__hexnan+0x14c>
 800cdd0:	42b4      	cmp	r4, r6
 800cdd2:	d206      	bcs.n	800cde2 <__hexnan+0xb6>
 800cdd4:	2d07      	cmp	r5, #7
 800cdd6:	dc04      	bgt.n	800cde2 <__hexnan+0xb6>
 800cdd8:	002a      	movs	r2, r5
 800cdda:	0031      	movs	r1, r6
 800cddc:	0020      	movs	r0, r4
 800cdde:	f7ff ff7f 	bl	800cce0 <L_shift>
 800cde2:	9b01      	ldr	r3, [sp, #4]
 800cde4:	429c      	cmp	r4, r3
 800cde6:	d936      	bls.n	800ce56 <__hexnan+0x12a>
 800cde8:	001a      	movs	r2, r3
 800cdea:	0023      	movs	r3, r4
 800cdec:	cb02      	ldmia	r3!, {r1}
 800cdee:	c202      	stmia	r2!, {r1}
 800cdf0:	429f      	cmp	r7, r3
 800cdf2:	d2fb      	bcs.n	800cdec <__hexnan+0xc0>
 800cdf4:	9b02      	ldr	r3, [sp, #8]
 800cdf6:	1c62      	adds	r2, r4, #1
 800cdf8:	1ed9      	subs	r1, r3, #3
 800cdfa:	2304      	movs	r3, #4
 800cdfc:	4291      	cmp	r1, r2
 800cdfe:	d305      	bcc.n	800ce0c <__hexnan+0xe0>
 800ce00:	9b02      	ldr	r3, [sp, #8]
 800ce02:	3b04      	subs	r3, #4
 800ce04:	1b1b      	subs	r3, r3, r4
 800ce06:	089b      	lsrs	r3, r3, #2
 800ce08:	3301      	adds	r3, #1
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	9a01      	ldr	r2, [sp, #4]
 800ce0e:	18d3      	adds	r3, r2, r3
 800ce10:	2200      	movs	r2, #0
 800ce12:	c304      	stmia	r3!, {r2}
 800ce14:	429f      	cmp	r7, r3
 800ce16:	d2fc      	bcs.n	800ce12 <__hexnan+0xe6>
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d104      	bne.n	800ce28 <__hexnan+0xfc>
 800ce1e:	9b01      	ldr	r3, [sp, #4]
 800ce20:	429f      	cmp	r7, r3
 800ce22:	d127      	bne.n	800ce74 <__hexnan+0x148>
 800ce24:	2301      	movs	r3, #1
 800ce26:	603b      	str	r3, [r7, #0]
 800ce28:	2005      	movs	r0, #5
 800ce2a:	b00b      	add	sp, #44	@ 0x2c
 800ce2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce2e:	9b03      	ldr	r3, [sp, #12]
 800ce30:	3501      	adds	r5, #1
 800ce32:	3301      	adds	r3, #1
 800ce34:	9303      	str	r3, [sp, #12]
 800ce36:	2d08      	cmp	r5, #8
 800ce38:	dd06      	ble.n	800ce48 <__hexnan+0x11c>
 800ce3a:	9b01      	ldr	r3, [sp, #4]
 800ce3c:	429c      	cmp	r4, r3
 800ce3e:	d9ba      	bls.n	800cdb6 <__hexnan+0x8a>
 800ce40:	2300      	movs	r3, #0
 800ce42:	2501      	movs	r5, #1
 800ce44:	3c04      	subs	r4, #4
 800ce46:	6023      	str	r3, [r4, #0]
 800ce48:	220f      	movs	r2, #15
 800ce4a:	6823      	ldr	r3, [r4, #0]
 800ce4c:	4010      	ands	r0, r2
 800ce4e:	011b      	lsls	r3, r3, #4
 800ce50:	4303      	orrs	r3, r0
 800ce52:	6023      	str	r3, [r4, #0]
 800ce54:	e7af      	b.n	800cdb6 <__hexnan+0x8a>
 800ce56:	9b06      	ldr	r3, [sp, #24]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d0dd      	beq.n	800ce18 <__hexnan+0xec>
 800ce5c:	2320      	movs	r3, #32
 800ce5e:	9a06      	ldr	r2, [sp, #24]
 800ce60:	9902      	ldr	r1, [sp, #8]
 800ce62:	1a9b      	subs	r3, r3, r2
 800ce64:	2201      	movs	r2, #1
 800ce66:	4252      	negs	r2, r2
 800ce68:	40da      	lsrs	r2, r3
 800ce6a:	3904      	subs	r1, #4
 800ce6c:	680b      	ldr	r3, [r1, #0]
 800ce6e:	4013      	ands	r3, r2
 800ce70:	600b      	str	r3, [r1, #0]
 800ce72:	e7d1      	b.n	800ce18 <__hexnan+0xec>
 800ce74:	3f04      	subs	r7, #4
 800ce76:	e7cf      	b.n	800ce18 <__hexnan+0xec>
 800ce78:	2004      	movs	r0, #4
 800ce7a:	e7d6      	b.n	800ce2a <__hexnan+0xfe>

0800ce7c <__ascii_mbtowc>:
 800ce7c:	b082      	sub	sp, #8
 800ce7e:	2900      	cmp	r1, #0
 800ce80:	d100      	bne.n	800ce84 <__ascii_mbtowc+0x8>
 800ce82:	a901      	add	r1, sp, #4
 800ce84:	1e10      	subs	r0, r2, #0
 800ce86:	d006      	beq.n	800ce96 <__ascii_mbtowc+0x1a>
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d006      	beq.n	800ce9a <__ascii_mbtowc+0x1e>
 800ce8c:	7813      	ldrb	r3, [r2, #0]
 800ce8e:	600b      	str	r3, [r1, #0]
 800ce90:	7810      	ldrb	r0, [r2, #0]
 800ce92:	1e43      	subs	r3, r0, #1
 800ce94:	4198      	sbcs	r0, r3
 800ce96:	b002      	add	sp, #8
 800ce98:	4770      	bx	lr
 800ce9a:	2002      	movs	r0, #2
 800ce9c:	4240      	negs	r0, r0
 800ce9e:	e7fa      	b.n	800ce96 <__ascii_mbtowc+0x1a>

0800cea0 <__ascii_wctomb>:
 800cea0:	0003      	movs	r3, r0
 800cea2:	1e08      	subs	r0, r1, #0
 800cea4:	d005      	beq.n	800ceb2 <__ascii_wctomb+0x12>
 800cea6:	2aff      	cmp	r2, #255	@ 0xff
 800cea8:	d904      	bls.n	800ceb4 <__ascii_wctomb+0x14>
 800ceaa:	228a      	movs	r2, #138	@ 0x8a
 800ceac:	2001      	movs	r0, #1
 800ceae:	601a      	str	r2, [r3, #0]
 800ceb0:	4240      	negs	r0, r0
 800ceb2:	4770      	bx	lr
 800ceb4:	2001      	movs	r0, #1
 800ceb6:	700a      	strb	r2, [r1, #0]
 800ceb8:	e7fb      	b.n	800ceb2 <__ascii_wctomb+0x12>
	...

0800cebc <fiprintf>:
 800cebc:	b40e      	push	{r1, r2, r3}
 800cebe:	b517      	push	{r0, r1, r2, r4, lr}
 800cec0:	4c05      	ldr	r4, [pc, #20]	@ (800ced8 <fiprintf+0x1c>)
 800cec2:	ab05      	add	r3, sp, #20
 800cec4:	cb04      	ldmia	r3!, {r2}
 800cec6:	0001      	movs	r1, r0
 800cec8:	6820      	ldr	r0, [r4, #0]
 800ceca:	9301      	str	r3, [sp, #4]
 800cecc:	f000 f834 	bl	800cf38 <_vfiprintf_r>
 800ced0:	bc1e      	pop	{r1, r2, r3, r4}
 800ced2:	bc08      	pop	{r3}
 800ced4:	b003      	add	sp, #12
 800ced6:	4718      	bx	r3
 800ced8:	20000030 	.word	0x20000030

0800cedc <abort>:
 800cedc:	2006      	movs	r0, #6
 800cede:	b510      	push	{r4, lr}
 800cee0:	f000 f970 	bl	800d1c4 <raise>
 800cee4:	2001      	movs	r0, #1
 800cee6:	f7f7 f86b 	bl	8003fc0 <_exit>

0800ceea <__sfputc_r>:
 800ceea:	6893      	ldr	r3, [r2, #8]
 800ceec:	b510      	push	{r4, lr}
 800ceee:	3b01      	subs	r3, #1
 800cef0:	6093      	str	r3, [r2, #8]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	da04      	bge.n	800cf00 <__sfputc_r+0x16>
 800cef6:	6994      	ldr	r4, [r2, #24]
 800cef8:	42a3      	cmp	r3, r4
 800cefa:	db07      	blt.n	800cf0c <__sfputc_r+0x22>
 800cefc:	290a      	cmp	r1, #10
 800cefe:	d005      	beq.n	800cf0c <__sfputc_r+0x22>
 800cf00:	6813      	ldr	r3, [r2, #0]
 800cf02:	1c58      	adds	r0, r3, #1
 800cf04:	6010      	str	r0, [r2, #0]
 800cf06:	7019      	strb	r1, [r3, #0]
 800cf08:	0008      	movs	r0, r1
 800cf0a:	bd10      	pop	{r4, pc}
 800cf0c:	f7fc fe4e 	bl	8009bac <__swbuf_r>
 800cf10:	0001      	movs	r1, r0
 800cf12:	e7f9      	b.n	800cf08 <__sfputc_r+0x1e>

0800cf14 <__sfputs_r>:
 800cf14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf16:	0006      	movs	r6, r0
 800cf18:	000f      	movs	r7, r1
 800cf1a:	0014      	movs	r4, r2
 800cf1c:	18d5      	adds	r5, r2, r3
 800cf1e:	42ac      	cmp	r4, r5
 800cf20:	d101      	bne.n	800cf26 <__sfputs_r+0x12>
 800cf22:	2000      	movs	r0, #0
 800cf24:	e007      	b.n	800cf36 <__sfputs_r+0x22>
 800cf26:	7821      	ldrb	r1, [r4, #0]
 800cf28:	003a      	movs	r2, r7
 800cf2a:	0030      	movs	r0, r6
 800cf2c:	f7ff ffdd 	bl	800ceea <__sfputc_r>
 800cf30:	3401      	adds	r4, #1
 800cf32:	1c43      	adds	r3, r0, #1
 800cf34:	d1f3      	bne.n	800cf1e <__sfputs_r+0xa>
 800cf36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cf38 <_vfiprintf_r>:
 800cf38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf3a:	b0a1      	sub	sp, #132	@ 0x84
 800cf3c:	000f      	movs	r7, r1
 800cf3e:	0015      	movs	r5, r2
 800cf40:	001e      	movs	r6, r3
 800cf42:	9003      	str	r0, [sp, #12]
 800cf44:	2800      	cmp	r0, #0
 800cf46:	d004      	beq.n	800cf52 <_vfiprintf_r+0x1a>
 800cf48:	6a03      	ldr	r3, [r0, #32]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d101      	bne.n	800cf52 <_vfiprintf_r+0x1a>
 800cf4e:	f7fc fcf9 	bl	8009944 <__sinit>
 800cf52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf54:	07db      	lsls	r3, r3, #31
 800cf56:	d405      	bmi.n	800cf64 <_vfiprintf_r+0x2c>
 800cf58:	89bb      	ldrh	r3, [r7, #12]
 800cf5a:	059b      	lsls	r3, r3, #22
 800cf5c:	d402      	bmi.n	800cf64 <_vfiprintf_r+0x2c>
 800cf5e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800cf60:	f7fc ff5b 	bl	8009e1a <__retarget_lock_acquire_recursive>
 800cf64:	89bb      	ldrh	r3, [r7, #12]
 800cf66:	071b      	lsls	r3, r3, #28
 800cf68:	d502      	bpl.n	800cf70 <_vfiprintf_r+0x38>
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d113      	bne.n	800cf98 <_vfiprintf_r+0x60>
 800cf70:	0039      	movs	r1, r7
 800cf72:	9803      	ldr	r0, [sp, #12]
 800cf74:	f7fc fe5c 	bl	8009c30 <__swsetup_r>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	d00d      	beq.n	800cf98 <_vfiprintf_r+0x60>
 800cf7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf7e:	07db      	lsls	r3, r3, #31
 800cf80:	d503      	bpl.n	800cf8a <_vfiprintf_r+0x52>
 800cf82:	2001      	movs	r0, #1
 800cf84:	4240      	negs	r0, r0
 800cf86:	b021      	add	sp, #132	@ 0x84
 800cf88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf8a:	89bb      	ldrh	r3, [r7, #12]
 800cf8c:	059b      	lsls	r3, r3, #22
 800cf8e:	d4f8      	bmi.n	800cf82 <_vfiprintf_r+0x4a>
 800cf90:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800cf92:	f7fc ff43 	bl	8009e1c <__retarget_lock_release_recursive>
 800cf96:	e7f4      	b.n	800cf82 <_vfiprintf_r+0x4a>
 800cf98:	2300      	movs	r3, #0
 800cf9a:	ac08      	add	r4, sp, #32
 800cf9c:	6163      	str	r3, [r4, #20]
 800cf9e:	3320      	adds	r3, #32
 800cfa0:	7663      	strb	r3, [r4, #25]
 800cfa2:	3310      	adds	r3, #16
 800cfa4:	76a3      	strb	r3, [r4, #26]
 800cfa6:	9607      	str	r6, [sp, #28]
 800cfa8:	002e      	movs	r6, r5
 800cfaa:	7833      	ldrb	r3, [r6, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d001      	beq.n	800cfb4 <_vfiprintf_r+0x7c>
 800cfb0:	2b25      	cmp	r3, #37	@ 0x25
 800cfb2:	d148      	bne.n	800d046 <_vfiprintf_r+0x10e>
 800cfb4:	1b73      	subs	r3, r6, r5
 800cfb6:	9305      	str	r3, [sp, #20]
 800cfb8:	42ae      	cmp	r6, r5
 800cfba:	d00b      	beq.n	800cfd4 <_vfiprintf_r+0x9c>
 800cfbc:	002a      	movs	r2, r5
 800cfbe:	0039      	movs	r1, r7
 800cfc0:	9803      	ldr	r0, [sp, #12]
 800cfc2:	f7ff ffa7 	bl	800cf14 <__sfputs_r>
 800cfc6:	3001      	adds	r0, #1
 800cfc8:	d100      	bne.n	800cfcc <_vfiprintf_r+0x94>
 800cfca:	e0ae      	b.n	800d12a <_vfiprintf_r+0x1f2>
 800cfcc:	6963      	ldr	r3, [r4, #20]
 800cfce:	9a05      	ldr	r2, [sp, #20]
 800cfd0:	189b      	adds	r3, r3, r2
 800cfd2:	6163      	str	r3, [r4, #20]
 800cfd4:	7833      	ldrb	r3, [r6, #0]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d100      	bne.n	800cfdc <_vfiprintf_r+0xa4>
 800cfda:	e0a6      	b.n	800d12a <_vfiprintf_r+0x1f2>
 800cfdc:	2201      	movs	r2, #1
 800cfde:	2300      	movs	r3, #0
 800cfe0:	4252      	negs	r2, r2
 800cfe2:	6062      	str	r2, [r4, #4]
 800cfe4:	a904      	add	r1, sp, #16
 800cfe6:	3254      	adds	r2, #84	@ 0x54
 800cfe8:	1852      	adds	r2, r2, r1
 800cfea:	1c75      	adds	r5, r6, #1
 800cfec:	6023      	str	r3, [r4, #0]
 800cfee:	60e3      	str	r3, [r4, #12]
 800cff0:	60a3      	str	r3, [r4, #8]
 800cff2:	7013      	strb	r3, [r2, #0]
 800cff4:	65a3      	str	r3, [r4, #88]	@ 0x58
 800cff6:	4b59      	ldr	r3, [pc, #356]	@ (800d15c <_vfiprintf_r+0x224>)
 800cff8:	2205      	movs	r2, #5
 800cffa:	0018      	movs	r0, r3
 800cffc:	7829      	ldrb	r1, [r5, #0]
 800cffe:	9305      	str	r3, [sp, #20]
 800d000:	f7fc ff0d 	bl	8009e1e <memchr>
 800d004:	1c6e      	adds	r6, r5, #1
 800d006:	2800      	cmp	r0, #0
 800d008:	d11f      	bne.n	800d04a <_vfiprintf_r+0x112>
 800d00a:	6822      	ldr	r2, [r4, #0]
 800d00c:	06d3      	lsls	r3, r2, #27
 800d00e:	d504      	bpl.n	800d01a <_vfiprintf_r+0xe2>
 800d010:	2353      	movs	r3, #83	@ 0x53
 800d012:	a904      	add	r1, sp, #16
 800d014:	185b      	adds	r3, r3, r1
 800d016:	2120      	movs	r1, #32
 800d018:	7019      	strb	r1, [r3, #0]
 800d01a:	0713      	lsls	r3, r2, #28
 800d01c:	d504      	bpl.n	800d028 <_vfiprintf_r+0xf0>
 800d01e:	2353      	movs	r3, #83	@ 0x53
 800d020:	a904      	add	r1, sp, #16
 800d022:	185b      	adds	r3, r3, r1
 800d024:	212b      	movs	r1, #43	@ 0x2b
 800d026:	7019      	strb	r1, [r3, #0]
 800d028:	782b      	ldrb	r3, [r5, #0]
 800d02a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d02c:	d016      	beq.n	800d05c <_vfiprintf_r+0x124>
 800d02e:	002e      	movs	r6, r5
 800d030:	2100      	movs	r1, #0
 800d032:	200a      	movs	r0, #10
 800d034:	68e3      	ldr	r3, [r4, #12]
 800d036:	7832      	ldrb	r2, [r6, #0]
 800d038:	1c75      	adds	r5, r6, #1
 800d03a:	3a30      	subs	r2, #48	@ 0x30
 800d03c:	2a09      	cmp	r2, #9
 800d03e:	d950      	bls.n	800d0e2 <_vfiprintf_r+0x1aa>
 800d040:	2900      	cmp	r1, #0
 800d042:	d111      	bne.n	800d068 <_vfiprintf_r+0x130>
 800d044:	e017      	b.n	800d076 <_vfiprintf_r+0x13e>
 800d046:	3601      	adds	r6, #1
 800d048:	e7af      	b.n	800cfaa <_vfiprintf_r+0x72>
 800d04a:	9b05      	ldr	r3, [sp, #20]
 800d04c:	6822      	ldr	r2, [r4, #0]
 800d04e:	1ac0      	subs	r0, r0, r3
 800d050:	2301      	movs	r3, #1
 800d052:	4083      	lsls	r3, r0
 800d054:	4313      	orrs	r3, r2
 800d056:	0035      	movs	r5, r6
 800d058:	6023      	str	r3, [r4, #0]
 800d05a:	e7cc      	b.n	800cff6 <_vfiprintf_r+0xbe>
 800d05c:	9b07      	ldr	r3, [sp, #28]
 800d05e:	1d19      	adds	r1, r3, #4
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	9107      	str	r1, [sp, #28]
 800d064:	2b00      	cmp	r3, #0
 800d066:	db01      	blt.n	800d06c <_vfiprintf_r+0x134>
 800d068:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d06a:	e004      	b.n	800d076 <_vfiprintf_r+0x13e>
 800d06c:	425b      	negs	r3, r3
 800d06e:	60e3      	str	r3, [r4, #12]
 800d070:	2302      	movs	r3, #2
 800d072:	4313      	orrs	r3, r2
 800d074:	6023      	str	r3, [r4, #0]
 800d076:	7833      	ldrb	r3, [r6, #0]
 800d078:	2b2e      	cmp	r3, #46	@ 0x2e
 800d07a:	d10c      	bne.n	800d096 <_vfiprintf_r+0x15e>
 800d07c:	7873      	ldrb	r3, [r6, #1]
 800d07e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d080:	d134      	bne.n	800d0ec <_vfiprintf_r+0x1b4>
 800d082:	9b07      	ldr	r3, [sp, #28]
 800d084:	3602      	adds	r6, #2
 800d086:	1d1a      	adds	r2, r3, #4
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	9207      	str	r2, [sp, #28]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	da01      	bge.n	800d094 <_vfiprintf_r+0x15c>
 800d090:	2301      	movs	r3, #1
 800d092:	425b      	negs	r3, r3
 800d094:	9309      	str	r3, [sp, #36]	@ 0x24
 800d096:	4d32      	ldr	r5, [pc, #200]	@ (800d160 <_vfiprintf_r+0x228>)
 800d098:	2203      	movs	r2, #3
 800d09a:	0028      	movs	r0, r5
 800d09c:	7831      	ldrb	r1, [r6, #0]
 800d09e:	f7fc febe 	bl	8009e1e <memchr>
 800d0a2:	2800      	cmp	r0, #0
 800d0a4:	d006      	beq.n	800d0b4 <_vfiprintf_r+0x17c>
 800d0a6:	2340      	movs	r3, #64	@ 0x40
 800d0a8:	1b40      	subs	r0, r0, r5
 800d0aa:	4083      	lsls	r3, r0
 800d0ac:	6822      	ldr	r2, [r4, #0]
 800d0ae:	3601      	adds	r6, #1
 800d0b0:	4313      	orrs	r3, r2
 800d0b2:	6023      	str	r3, [r4, #0]
 800d0b4:	7831      	ldrb	r1, [r6, #0]
 800d0b6:	2206      	movs	r2, #6
 800d0b8:	482a      	ldr	r0, [pc, #168]	@ (800d164 <_vfiprintf_r+0x22c>)
 800d0ba:	1c75      	adds	r5, r6, #1
 800d0bc:	7621      	strb	r1, [r4, #24]
 800d0be:	f7fc feae 	bl	8009e1e <memchr>
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	d040      	beq.n	800d148 <_vfiprintf_r+0x210>
 800d0c6:	4b28      	ldr	r3, [pc, #160]	@ (800d168 <_vfiprintf_r+0x230>)
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d122      	bne.n	800d112 <_vfiprintf_r+0x1da>
 800d0cc:	2207      	movs	r2, #7
 800d0ce:	9b07      	ldr	r3, [sp, #28]
 800d0d0:	3307      	adds	r3, #7
 800d0d2:	4393      	bics	r3, r2
 800d0d4:	3308      	adds	r3, #8
 800d0d6:	9307      	str	r3, [sp, #28]
 800d0d8:	6963      	ldr	r3, [r4, #20]
 800d0da:	9a04      	ldr	r2, [sp, #16]
 800d0dc:	189b      	adds	r3, r3, r2
 800d0de:	6163      	str	r3, [r4, #20]
 800d0e0:	e762      	b.n	800cfa8 <_vfiprintf_r+0x70>
 800d0e2:	4343      	muls	r3, r0
 800d0e4:	002e      	movs	r6, r5
 800d0e6:	2101      	movs	r1, #1
 800d0e8:	189b      	adds	r3, r3, r2
 800d0ea:	e7a4      	b.n	800d036 <_vfiprintf_r+0xfe>
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	200a      	movs	r0, #10
 800d0f0:	0019      	movs	r1, r3
 800d0f2:	3601      	adds	r6, #1
 800d0f4:	6063      	str	r3, [r4, #4]
 800d0f6:	7832      	ldrb	r2, [r6, #0]
 800d0f8:	1c75      	adds	r5, r6, #1
 800d0fa:	3a30      	subs	r2, #48	@ 0x30
 800d0fc:	2a09      	cmp	r2, #9
 800d0fe:	d903      	bls.n	800d108 <_vfiprintf_r+0x1d0>
 800d100:	2b00      	cmp	r3, #0
 800d102:	d0c8      	beq.n	800d096 <_vfiprintf_r+0x15e>
 800d104:	9109      	str	r1, [sp, #36]	@ 0x24
 800d106:	e7c6      	b.n	800d096 <_vfiprintf_r+0x15e>
 800d108:	4341      	muls	r1, r0
 800d10a:	002e      	movs	r6, r5
 800d10c:	2301      	movs	r3, #1
 800d10e:	1889      	adds	r1, r1, r2
 800d110:	e7f1      	b.n	800d0f6 <_vfiprintf_r+0x1be>
 800d112:	aa07      	add	r2, sp, #28
 800d114:	9200      	str	r2, [sp, #0]
 800d116:	0021      	movs	r1, r4
 800d118:	003a      	movs	r2, r7
 800d11a:	4b14      	ldr	r3, [pc, #80]	@ (800d16c <_vfiprintf_r+0x234>)
 800d11c:	9803      	ldr	r0, [sp, #12]
 800d11e:	f7fb fdbb 	bl	8008c98 <_printf_float>
 800d122:	9004      	str	r0, [sp, #16]
 800d124:	9b04      	ldr	r3, [sp, #16]
 800d126:	3301      	adds	r3, #1
 800d128:	d1d6      	bne.n	800d0d8 <_vfiprintf_r+0x1a0>
 800d12a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d12c:	07db      	lsls	r3, r3, #31
 800d12e:	d405      	bmi.n	800d13c <_vfiprintf_r+0x204>
 800d130:	89bb      	ldrh	r3, [r7, #12]
 800d132:	059b      	lsls	r3, r3, #22
 800d134:	d402      	bmi.n	800d13c <_vfiprintf_r+0x204>
 800d136:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d138:	f7fc fe70 	bl	8009e1c <__retarget_lock_release_recursive>
 800d13c:	89bb      	ldrh	r3, [r7, #12]
 800d13e:	065b      	lsls	r3, r3, #25
 800d140:	d500      	bpl.n	800d144 <_vfiprintf_r+0x20c>
 800d142:	e71e      	b.n	800cf82 <_vfiprintf_r+0x4a>
 800d144:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d146:	e71e      	b.n	800cf86 <_vfiprintf_r+0x4e>
 800d148:	aa07      	add	r2, sp, #28
 800d14a:	9200      	str	r2, [sp, #0]
 800d14c:	0021      	movs	r1, r4
 800d14e:	003a      	movs	r2, r7
 800d150:	4b06      	ldr	r3, [pc, #24]	@ (800d16c <_vfiprintf_r+0x234>)
 800d152:	9803      	ldr	r0, [sp, #12]
 800d154:	f7fc f84e 	bl	80091f4 <_printf_i>
 800d158:	e7e3      	b.n	800d122 <_vfiprintf_r+0x1ea>
 800d15a:	46c0      	nop			@ (mov r8, r8)
 800d15c:	0800d536 	.word	0x0800d536
 800d160:	0800d53c 	.word	0x0800d53c
 800d164:	0800d540 	.word	0x0800d540
 800d168:	08008c99 	.word	0x08008c99
 800d16c:	0800cf15 	.word	0x0800cf15

0800d170 <_raise_r>:
 800d170:	b570      	push	{r4, r5, r6, lr}
 800d172:	0004      	movs	r4, r0
 800d174:	000d      	movs	r5, r1
 800d176:	291f      	cmp	r1, #31
 800d178:	d904      	bls.n	800d184 <_raise_r+0x14>
 800d17a:	2316      	movs	r3, #22
 800d17c:	6003      	str	r3, [r0, #0]
 800d17e:	2001      	movs	r0, #1
 800d180:	4240      	negs	r0, r0
 800d182:	bd70      	pop	{r4, r5, r6, pc}
 800d184:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800d186:	2b00      	cmp	r3, #0
 800d188:	d004      	beq.n	800d194 <_raise_r+0x24>
 800d18a:	008a      	lsls	r2, r1, #2
 800d18c:	189b      	adds	r3, r3, r2
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	2a00      	cmp	r2, #0
 800d192:	d108      	bne.n	800d1a6 <_raise_r+0x36>
 800d194:	0020      	movs	r0, r4
 800d196:	f000 f831 	bl	800d1fc <_getpid_r>
 800d19a:	002a      	movs	r2, r5
 800d19c:	0001      	movs	r1, r0
 800d19e:	0020      	movs	r0, r4
 800d1a0:	f000 f81a 	bl	800d1d8 <_kill_r>
 800d1a4:	e7ed      	b.n	800d182 <_raise_r+0x12>
 800d1a6:	2a01      	cmp	r2, #1
 800d1a8:	d009      	beq.n	800d1be <_raise_r+0x4e>
 800d1aa:	1c51      	adds	r1, r2, #1
 800d1ac:	d103      	bne.n	800d1b6 <_raise_r+0x46>
 800d1ae:	2316      	movs	r3, #22
 800d1b0:	6003      	str	r3, [r0, #0]
 800d1b2:	2001      	movs	r0, #1
 800d1b4:	e7e5      	b.n	800d182 <_raise_r+0x12>
 800d1b6:	2100      	movs	r1, #0
 800d1b8:	0028      	movs	r0, r5
 800d1ba:	6019      	str	r1, [r3, #0]
 800d1bc:	4790      	blx	r2
 800d1be:	2000      	movs	r0, #0
 800d1c0:	e7df      	b.n	800d182 <_raise_r+0x12>
	...

0800d1c4 <raise>:
 800d1c4:	b510      	push	{r4, lr}
 800d1c6:	4b03      	ldr	r3, [pc, #12]	@ (800d1d4 <raise+0x10>)
 800d1c8:	0001      	movs	r1, r0
 800d1ca:	6818      	ldr	r0, [r3, #0]
 800d1cc:	f7ff ffd0 	bl	800d170 <_raise_r>
 800d1d0:	bd10      	pop	{r4, pc}
 800d1d2:	46c0      	nop			@ (mov r8, r8)
 800d1d4:	20000030 	.word	0x20000030

0800d1d8 <_kill_r>:
 800d1d8:	2300      	movs	r3, #0
 800d1da:	b570      	push	{r4, r5, r6, lr}
 800d1dc:	4d06      	ldr	r5, [pc, #24]	@ (800d1f8 <_kill_r+0x20>)
 800d1de:	0004      	movs	r4, r0
 800d1e0:	0008      	movs	r0, r1
 800d1e2:	0011      	movs	r1, r2
 800d1e4:	602b      	str	r3, [r5, #0]
 800d1e6:	f7f6 fedb 	bl	8003fa0 <_kill>
 800d1ea:	1c43      	adds	r3, r0, #1
 800d1ec:	d103      	bne.n	800d1f6 <_kill_r+0x1e>
 800d1ee:	682b      	ldr	r3, [r5, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d000      	beq.n	800d1f6 <_kill_r+0x1e>
 800d1f4:	6023      	str	r3, [r4, #0]
 800d1f6:	bd70      	pop	{r4, r5, r6, pc}
 800d1f8:	20001440 	.word	0x20001440

0800d1fc <_getpid_r>:
 800d1fc:	b510      	push	{r4, lr}
 800d1fe:	f7f6 fec9 	bl	8003f94 <_getpid>
 800d202:	bd10      	pop	{r4, pc}

0800d204 <_init>:
 800d204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d206:	46c0      	nop			@ (mov r8, r8)
 800d208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d20a:	bc08      	pop	{r3}
 800d20c:	469e      	mov	lr, r3
 800d20e:	4770      	bx	lr

0800d210 <_fini>:
 800d210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d212:	46c0      	nop			@ (mov r8, r8)
 800d214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d216:	bc08      	pop	{r3}
 800d218:	469e      	mov	lr, r3
 800d21a:	4770      	bx	lr
