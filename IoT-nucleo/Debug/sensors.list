
sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac9c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800ad60  0800ad60  0000bd60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b21c  0800b21c  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800b21c  0800b21c  0000d1d4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800b21c  0800b21c  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b21c  0800b21c  0000c21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b220  0800b220  0000c220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b224  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a50  200001d4  0800b3f8  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c24  0800b3f8  0000dc24  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b84f  00000000  00000000  0000d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d83  00000000  00000000  00018a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0001a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d0  00000000  00000000  0001b1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010b56  00000000  00000000  0001b9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df67  00000000  00000000  0002c506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fd72  00000000  00000000  0003a46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009a1df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003950  00000000  00000000  0009a224  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0009db74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800ad44 	.word	0x0800ad44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800ad44 	.word	0x0800ad44

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 facf 	bl	80019e0 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fa13 	bl	8001878 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fac1 	bl	80019e0 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fab7 	bl	80019e0 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa3d 	bl	8001900 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fa33 	bl	8001900 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 f911 	bl	80006d8 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 f899 	bl	80005f8 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f903 	bl	80006d8 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 f8f9 	bl	80006d8 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 f8a7 	bl	8000648 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 f89d 	bl	8000648 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_d2uiz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <__aeabi_d2uiz+0x38>)
 8000522:	0004      	movs	r4, r0
 8000524:	000d      	movs	r5, r1
 8000526:	f7ff ffb5 	bl	8000494 <__aeabi_dcmpge>
 800052a:	2800      	cmp	r0, #0
 800052c:	d104      	bne.n	8000538 <__aeabi_d2uiz+0x1c>
 800052e:	0020      	movs	r0, r4
 8000530:	0029      	movs	r1, r5
 8000532:	f002 f9d5 	bl	80028e0 <__aeabi_d2iz>
 8000536:	bd70      	pop	{r4, r5, r6, pc}
 8000538:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <__aeabi_d2uiz+0x38>)
 800053a:	2200      	movs	r2, #0
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f001 fda2 	bl	8002088 <__aeabi_dsub>
 8000544:	f002 f9cc 	bl	80028e0 <__aeabi_d2iz>
 8000548:	2380      	movs	r3, #128	@ 0x80
 800054a:	061b      	lsls	r3, r3, #24
 800054c:	469c      	mov	ip, r3
 800054e:	4460      	add	r0, ip
 8000550:	e7f1      	b.n	8000536 <__aeabi_d2uiz+0x1a>
 8000552:	46c0      	nop			@ (mov r8, r8)
 8000554:	41e00000 	.word	0x41e00000

08000558 <__aeabi_d2lz>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	2200      	movs	r2, #0
 800055c:	2300      	movs	r3, #0
 800055e:	0004      	movs	r4, r0
 8000560:	000d      	movs	r5, r1
 8000562:	f7ff ff79 	bl	8000458 <__aeabi_dcmplt>
 8000566:	2800      	cmp	r0, #0
 8000568:	d108      	bne.n	800057c <__aeabi_d2lz+0x24>
 800056a:	0020      	movs	r0, r4
 800056c:	0029      	movs	r1, r5
 800056e:	f000 f80f 	bl	8000590 <__aeabi_d2ulz>
 8000572:	0002      	movs	r2, r0
 8000574:	000b      	movs	r3, r1
 8000576:	0010      	movs	r0, r2
 8000578:	0019      	movs	r1, r3
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	2380      	movs	r3, #128	@ 0x80
 800057e:	061b      	lsls	r3, r3, #24
 8000580:	18e9      	adds	r1, r5, r3
 8000582:	0020      	movs	r0, r4
 8000584:	f000 f804 	bl	8000590 <__aeabi_d2ulz>
 8000588:	2300      	movs	r3, #0
 800058a:	4242      	negs	r2, r0
 800058c:	418b      	sbcs	r3, r1
 800058e:	e7f2      	b.n	8000576 <__aeabi_d2lz+0x1e>

08000590 <__aeabi_d2ulz>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	2200      	movs	r2, #0
 8000594:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <__aeabi_d2ulz+0x34>)
 8000596:	000d      	movs	r5, r1
 8000598:	0004      	movs	r4, r0
 800059a:	f001 fa8f 	bl	8001abc <__aeabi_dmul>
 800059e:	f7ff ffbd 	bl	800051c <__aeabi_d2uiz>
 80005a2:	0006      	movs	r6, r0
 80005a4:	f002 fa06 	bl	80029b4 <__aeabi_ui2d>
 80005a8:	2200      	movs	r2, #0
 80005aa:	4b07      	ldr	r3, [pc, #28]	@ (80005c8 <__aeabi_d2ulz+0x38>)
 80005ac:	f001 fa86 	bl	8001abc <__aeabi_dmul>
 80005b0:	0002      	movs	r2, r0
 80005b2:	000b      	movs	r3, r1
 80005b4:	0020      	movs	r0, r4
 80005b6:	0029      	movs	r1, r5
 80005b8:	f001 fd66 	bl	8002088 <__aeabi_dsub>
 80005bc:	f7ff ffae 	bl	800051c <__aeabi_d2uiz>
 80005c0:	0031      	movs	r1, r6
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	3df00000 	.word	0x3df00000
 80005c8:	41f00000 	.word	0x41f00000

080005cc <__aeabi_l2d>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	0006      	movs	r6, r0
 80005d0:	0008      	movs	r0, r1
 80005d2:	f002 f9c1 	bl	8002958 <__aeabi_i2d>
 80005d6:	2200      	movs	r2, #0
 80005d8:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <__aeabi_l2d+0x28>)
 80005da:	f001 fa6f 	bl	8001abc <__aeabi_dmul>
 80005de:	000d      	movs	r5, r1
 80005e0:	0004      	movs	r4, r0
 80005e2:	0030      	movs	r0, r6
 80005e4:	f002 f9e6 	bl	80029b4 <__aeabi_ui2d>
 80005e8:	002b      	movs	r3, r5
 80005ea:	0022      	movs	r2, r4
 80005ec:	f000 fa66 	bl	8000abc <__aeabi_dadd>
 80005f0:	bd70      	pop	{r4, r5, r6, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	41f00000 	.word	0x41f00000

080005f8 <__eqsf2>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	0042      	lsls	r2, r0, #1
 80005fc:	024e      	lsls	r6, r1, #9
 80005fe:	004c      	lsls	r4, r1, #1
 8000600:	0245      	lsls	r5, r0, #9
 8000602:	0a6d      	lsrs	r5, r5, #9
 8000604:	0e12      	lsrs	r2, r2, #24
 8000606:	0fc3      	lsrs	r3, r0, #31
 8000608:	0a76      	lsrs	r6, r6, #9
 800060a:	0e24      	lsrs	r4, r4, #24
 800060c:	0fc9      	lsrs	r1, r1, #31
 800060e:	2aff      	cmp	r2, #255	@ 0xff
 8000610:	d010      	beq.n	8000634 <__eqsf2+0x3c>
 8000612:	2cff      	cmp	r4, #255	@ 0xff
 8000614:	d00c      	beq.n	8000630 <__eqsf2+0x38>
 8000616:	2001      	movs	r0, #1
 8000618:	42a2      	cmp	r2, r4
 800061a:	d10a      	bne.n	8000632 <__eqsf2+0x3a>
 800061c:	42b5      	cmp	r5, r6
 800061e:	d108      	bne.n	8000632 <__eqsf2+0x3a>
 8000620:	428b      	cmp	r3, r1
 8000622:	d00f      	beq.n	8000644 <__eqsf2+0x4c>
 8000624:	2a00      	cmp	r2, #0
 8000626:	d104      	bne.n	8000632 <__eqsf2+0x3a>
 8000628:	0028      	movs	r0, r5
 800062a:	1e43      	subs	r3, r0, #1
 800062c:	4198      	sbcs	r0, r3
 800062e:	e000      	b.n	8000632 <__eqsf2+0x3a>
 8000630:	2001      	movs	r0, #1
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	2001      	movs	r0, #1
 8000636:	2cff      	cmp	r4, #255	@ 0xff
 8000638:	d1fb      	bne.n	8000632 <__eqsf2+0x3a>
 800063a:	4335      	orrs	r5, r6
 800063c:	d1f9      	bne.n	8000632 <__eqsf2+0x3a>
 800063e:	404b      	eors	r3, r1
 8000640:	0018      	movs	r0, r3
 8000642:	e7f6      	b.n	8000632 <__eqsf2+0x3a>
 8000644:	2000      	movs	r0, #0
 8000646:	e7f4      	b.n	8000632 <__eqsf2+0x3a>

08000648 <__gesf2>:
 8000648:	b530      	push	{r4, r5, lr}
 800064a:	0042      	lsls	r2, r0, #1
 800064c:	0244      	lsls	r4, r0, #9
 800064e:	024d      	lsls	r5, r1, #9
 8000650:	0fc3      	lsrs	r3, r0, #31
 8000652:	0048      	lsls	r0, r1, #1
 8000654:	0a64      	lsrs	r4, r4, #9
 8000656:	0e12      	lsrs	r2, r2, #24
 8000658:	0a6d      	lsrs	r5, r5, #9
 800065a:	0e00      	lsrs	r0, r0, #24
 800065c:	0fc9      	lsrs	r1, r1, #31
 800065e:	2aff      	cmp	r2, #255	@ 0xff
 8000660:	d018      	beq.n	8000694 <__gesf2+0x4c>
 8000662:	28ff      	cmp	r0, #255	@ 0xff
 8000664:	d00a      	beq.n	800067c <__gesf2+0x34>
 8000666:	2a00      	cmp	r2, #0
 8000668:	d11e      	bne.n	80006a8 <__gesf2+0x60>
 800066a:	2800      	cmp	r0, #0
 800066c:	d10a      	bne.n	8000684 <__gesf2+0x3c>
 800066e:	2d00      	cmp	r5, #0
 8000670:	d029      	beq.n	80006c6 <__gesf2+0x7e>
 8000672:	2c00      	cmp	r4, #0
 8000674:	d12d      	bne.n	80006d2 <__gesf2+0x8a>
 8000676:	0048      	lsls	r0, r1, #1
 8000678:	3801      	subs	r0, #1
 800067a:	bd30      	pop	{r4, r5, pc}
 800067c:	2d00      	cmp	r5, #0
 800067e:	d125      	bne.n	80006cc <__gesf2+0x84>
 8000680:	2a00      	cmp	r2, #0
 8000682:	d101      	bne.n	8000688 <__gesf2+0x40>
 8000684:	2c00      	cmp	r4, #0
 8000686:	d0f6      	beq.n	8000676 <__gesf2+0x2e>
 8000688:	428b      	cmp	r3, r1
 800068a:	d019      	beq.n	80006c0 <__gesf2+0x78>
 800068c:	2001      	movs	r0, #1
 800068e:	425b      	negs	r3, r3
 8000690:	4318      	orrs	r0, r3
 8000692:	e7f2      	b.n	800067a <__gesf2+0x32>
 8000694:	2c00      	cmp	r4, #0
 8000696:	d119      	bne.n	80006cc <__gesf2+0x84>
 8000698:	28ff      	cmp	r0, #255	@ 0xff
 800069a:	d1f7      	bne.n	800068c <__gesf2+0x44>
 800069c:	2d00      	cmp	r5, #0
 800069e:	d115      	bne.n	80006cc <__gesf2+0x84>
 80006a0:	2000      	movs	r0, #0
 80006a2:	428b      	cmp	r3, r1
 80006a4:	d1f2      	bne.n	800068c <__gesf2+0x44>
 80006a6:	e7e8      	b.n	800067a <__gesf2+0x32>
 80006a8:	2800      	cmp	r0, #0
 80006aa:	d0ef      	beq.n	800068c <__gesf2+0x44>
 80006ac:	428b      	cmp	r3, r1
 80006ae:	d1ed      	bne.n	800068c <__gesf2+0x44>
 80006b0:	4282      	cmp	r2, r0
 80006b2:	dceb      	bgt.n	800068c <__gesf2+0x44>
 80006b4:	db04      	blt.n	80006c0 <__gesf2+0x78>
 80006b6:	42ac      	cmp	r4, r5
 80006b8:	d8e8      	bhi.n	800068c <__gesf2+0x44>
 80006ba:	2000      	movs	r0, #0
 80006bc:	42ac      	cmp	r4, r5
 80006be:	d2dc      	bcs.n	800067a <__gesf2+0x32>
 80006c0:	0058      	lsls	r0, r3, #1
 80006c2:	3801      	subs	r0, #1
 80006c4:	e7d9      	b.n	800067a <__gesf2+0x32>
 80006c6:	2c00      	cmp	r4, #0
 80006c8:	d0d7      	beq.n	800067a <__gesf2+0x32>
 80006ca:	e7df      	b.n	800068c <__gesf2+0x44>
 80006cc:	2002      	movs	r0, #2
 80006ce:	4240      	negs	r0, r0
 80006d0:	e7d3      	b.n	800067a <__gesf2+0x32>
 80006d2:	428b      	cmp	r3, r1
 80006d4:	d1da      	bne.n	800068c <__gesf2+0x44>
 80006d6:	e7ee      	b.n	80006b6 <__gesf2+0x6e>

080006d8 <__lesf2>:
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	0042      	lsls	r2, r0, #1
 80006dc:	0244      	lsls	r4, r0, #9
 80006de:	024d      	lsls	r5, r1, #9
 80006e0:	0fc3      	lsrs	r3, r0, #31
 80006e2:	0048      	lsls	r0, r1, #1
 80006e4:	0a64      	lsrs	r4, r4, #9
 80006e6:	0e12      	lsrs	r2, r2, #24
 80006e8:	0a6d      	lsrs	r5, r5, #9
 80006ea:	0e00      	lsrs	r0, r0, #24
 80006ec:	0fc9      	lsrs	r1, r1, #31
 80006ee:	2aff      	cmp	r2, #255	@ 0xff
 80006f0:	d017      	beq.n	8000722 <__lesf2+0x4a>
 80006f2:	28ff      	cmp	r0, #255	@ 0xff
 80006f4:	d00a      	beq.n	800070c <__lesf2+0x34>
 80006f6:	2a00      	cmp	r2, #0
 80006f8:	d11b      	bne.n	8000732 <__lesf2+0x5a>
 80006fa:	2800      	cmp	r0, #0
 80006fc:	d10a      	bne.n	8000714 <__lesf2+0x3c>
 80006fe:	2d00      	cmp	r5, #0
 8000700:	d01d      	beq.n	800073e <__lesf2+0x66>
 8000702:	2c00      	cmp	r4, #0
 8000704:	d12d      	bne.n	8000762 <__lesf2+0x8a>
 8000706:	0048      	lsls	r0, r1, #1
 8000708:	3801      	subs	r0, #1
 800070a:	e011      	b.n	8000730 <__lesf2+0x58>
 800070c:	2d00      	cmp	r5, #0
 800070e:	d10e      	bne.n	800072e <__lesf2+0x56>
 8000710:	2a00      	cmp	r2, #0
 8000712:	d101      	bne.n	8000718 <__lesf2+0x40>
 8000714:	2c00      	cmp	r4, #0
 8000716:	d0f6      	beq.n	8000706 <__lesf2+0x2e>
 8000718:	428b      	cmp	r3, r1
 800071a:	d10c      	bne.n	8000736 <__lesf2+0x5e>
 800071c:	0058      	lsls	r0, r3, #1
 800071e:	3801      	subs	r0, #1
 8000720:	e006      	b.n	8000730 <__lesf2+0x58>
 8000722:	2c00      	cmp	r4, #0
 8000724:	d103      	bne.n	800072e <__lesf2+0x56>
 8000726:	28ff      	cmp	r0, #255	@ 0xff
 8000728:	d105      	bne.n	8000736 <__lesf2+0x5e>
 800072a:	2d00      	cmp	r5, #0
 800072c:	d015      	beq.n	800075a <__lesf2+0x82>
 800072e:	2002      	movs	r0, #2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	2800      	cmp	r0, #0
 8000734:	d106      	bne.n	8000744 <__lesf2+0x6c>
 8000736:	2001      	movs	r0, #1
 8000738:	425b      	negs	r3, r3
 800073a:	4318      	orrs	r0, r3
 800073c:	e7f8      	b.n	8000730 <__lesf2+0x58>
 800073e:	2c00      	cmp	r4, #0
 8000740:	d0f6      	beq.n	8000730 <__lesf2+0x58>
 8000742:	e7f8      	b.n	8000736 <__lesf2+0x5e>
 8000744:	428b      	cmp	r3, r1
 8000746:	d1f6      	bne.n	8000736 <__lesf2+0x5e>
 8000748:	4282      	cmp	r2, r0
 800074a:	dcf4      	bgt.n	8000736 <__lesf2+0x5e>
 800074c:	dbe6      	blt.n	800071c <__lesf2+0x44>
 800074e:	42ac      	cmp	r4, r5
 8000750:	d8f1      	bhi.n	8000736 <__lesf2+0x5e>
 8000752:	2000      	movs	r0, #0
 8000754:	42ac      	cmp	r4, r5
 8000756:	d2eb      	bcs.n	8000730 <__lesf2+0x58>
 8000758:	e7e0      	b.n	800071c <__lesf2+0x44>
 800075a:	2000      	movs	r0, #0
 800075c:	428b      	cmp	r3, r1
 800075e:	d1ea      	bne.n	8000736 <__lesf2+0x5e>
 8000760:	e7e6      	b.n	8000730 <__lesf2+0x58>
 8000762:	428b      	cmp	r3, r1
 8000764:	d1e7      	bne.n	8000736 <__lesf2+0x5e>
 8000766:	e7f2      	b.n	800074e <__lesf2+0x76>

08000768 <__aeabi_fmul>:
 8000768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800076a:	464f      	mov	r7, r9
 800076c:	4646      	mov	r6, r8
 800076e:	46d6      	mov	lr, sl
 8000770:	0044      	lsls	r4, r0, #1
 8000772:	b5c0      	push	{r6, r7, lr}
 8000774:	0246      	lsls	r6, r0, #9
 8000776:	1c0f      	adds	r7, r1, #0
 8000778:	0a76      	lsrs	r6, r6, #9
 800077a:	0e24      	lsrs	r4, r4, #24
 800077c:	0fc5      	lsrs	r5, r0, #31
 800077e:	2c00      	cmp	r4, #0
 8000780:	d100      	bne.n	8000784 <__aeabi_fmul+0x1c>
 8000782:	e0da      	b.n	800093a <__aeabi_fmul+0x1d2>
 8000784:	2cff      	cmp	r4, #255	@ 0xff
 8000786:	d074      	beq.n	8000872 <__aeabi_fmul+0x10a>
 8000788:	2380      	movs	r3, #128	@ 0x80
 800078a:	00f6      	lsls	r6, r6, #3
 800078c:	04db      	lsls	r3, r3, #19
 800078e:	431e      	orrs	r6, r3
 8000790:	2300      	movs	r3, #0
 8000792:	4699      	mov	r9, r3
 8000794:	469a      	mov	sl, r3
 8000796:	3c7f      	subs	r4, #127	@ 0x7f
 8000798:	027b      	lsls	r3, r7, #9
 800079a:	0a5b      	lsrs	r3, r3, #9
 800079c:	4698      	mov	r8, r3
 800079e:	007b      	lsls	r3, r7, #1
 80007a0:	0e1b      	lsrs	r3, r3, #24
 80007a2:	0fff      	lsrs	r7, r7, #31
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d074      	beq.n	8000892 <__aeabi_fmul+0x12a>
 80007a8:	2bff      	cmp	r3, #255	@ 0xff
 80007aa:	d100      	bne.n	80007ae <__aeabi_fmul+0x46>
 80007ac:	e08e      	b.n	80008cc <__aeabi_fmul+0x164>
 80007ae:	4642      	mov	r2, r8
 80007b0:	2180      	movs	r1, #128	@ 0x80
 80007b2:	00d2      	lsls	r2, r2, #3
 80007b4:	04c9      	lsls	r1, r1, #19
 80007b6:	4311      	orrs	r1, r2
 80007b8:	3b7f      	subs	r3, #127	@ 0x7f
 80007ba:	002a      	movs	r2, r5
 80007bc:	18e4      	adds	r4, r4, r3
 80007be:	464b      	mov	r3, r9
 80007c0:	407a      	eors	r2, r7
 80007c2:	4688      	mov	r8, r1
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	2b0a      	cmp	r3, #10
 80007c8:	dc75      	bgt.n	80008b6 <__aeabi_fmul+0x14e>
 80007ca:	464b      	mov	r3, r9
 80007cc:	2000      	movs	r0, #0
 80007ce:	2b02      	cmp	r3, #2
 80007d0:	dd0f      	ble.n	80007f2 <__aeabi_fmul+0x8a>
 80007d2:	4649      	mov	r1, r9
 80007d4:	2301      	movs	r3, #1
 80007d6:	408b      	lsls	r3, r1
 80007d8:	21a6      	movs	r1, #166	@ 0xa6
 80007da:	00c9      	lsls	r1, r1, #3
 80007dc:	420b      	tst	r3, r1
 80007de:	d169      	bne.n	80008b4 <__aeabi_fmul+0x14c>
 80007e0:	2190      	movs	r1, #144	@ 0x90
 80007e2:	0089      	lsls	r1, r1, #2
 80007e4:	420b      	tst	r3, r1
 80007e6:	d000      	beq.n	80007ea <__aeabi_fmul+0x82>
 80007e8:	e100      	b.n	80009ec <__aeabi_fmul+0x284>
 80007ea:	2188      	movs	r1, #136	@ 0x88
 80007ec:	4219      	tst	r1, r3
 80007ee:	d000      	beq.n	80007f2 <__aeabi_fmul+0x8a>
 80007f0:	e0f5      	b.n	80009de <__aeabi_fmul+0x276>
 80007f2:	4641      	mov	r1, r8
 80007f4:	0409      	lsls	r1, r1, #16
 80007f6:	0c09      	lsrs	r1, r1, #16
 80007f8:	4643      	mov	r3, r8
 80007fa:	0008      	movs	r0, r1
 80007fc:	0c35      	lsrs	r5, r6, #16
 80007fe:	0436      	lsls	r6, r6, #16
 8000800:	0c1b      	lsrs	r3, r3, #16
 8000802:	0c36      	lsrs	r6, r6, #16
 8000804:	4370      	muls	r0, r6
 8000806:	4369      	muls	r1, r5
 8000808:	435e      	muls	r6, r3
 800080a:	435d      	muls	r5, r3
 800080c:	1876      	adds	r6, r6, r1
 800080e:	0c03      	lsrs	r3, r0, #16
 8000810:	199b      	adds	r3, r3, r6
 8000812:	4299      	cmp	r1, r3
 8000814:	d903      	bls.n	800081e <__aeabi_fmul+0xb6>
 8000816:	2180      	movs	r1, #128	@ 0x80
 8000818:	0249      	lsls	r1, r1, #9
 800081a:	468c      	mov	ip, r1
 800081c:	4465      	add	r5, ip
 800081e:	0400      	lsls	r0, r0, #16
 8000820:	0419      	lsls	r1, r3, #16
 8000822:	0c00      	lsrs	r0, r0, #16
 8000824:	1809      	adds	r1, r1, r0
 8000826:	018e      	lsls	r6, r1, #6
 8000828:	1e70      	subs	r0, r6, #1
 800082a:	4186      	sbcs	r6, r0
 800082c:	0c1b      	lsrs	r3, r3, #16
 800082e:	0e89      	lsrs	r1, r1, #26
 8000830:	195b      	adds	r3, r3, r5
 8000832:	430e      	orrs	r6, r1
 8000834:	019b      	lsls	r3, r3, #6
 8000836:	431e      	orrs	r6, r3
 8000838:	011b      	lsls	r3, r3, #4
 800083a:	d46c      	bmi.n	8000916 <__aeabi_fmul+0x1ae>
 800083c:	0023      	movs	r3, r4
 800083e:	337f      	adds	r3, #127	@ 0x7f
 8000840:	2b00      	cmp	r3, #0
 8000842:	dc00      	bgt.n	8000846 <__aeabi_fmul+0xde>
 8000844:	e0b1      	b.n	80009aa <__aeabi_fmul+0x242>
 8000846:	0015      	movs	r5, r2
 8000848:	0771      	lsls	r1, r6, #29
 800084a:	d00b      	beq.n	8000864 <__aeabi_fmul+0xfc>
 800084c:	200f      	movs	r0, #15
 800084e:	0021      	movs	r1, r4
 8000850:	4030      	ands	r0, r6
 8000852:	2804      	cmp	r0, #4
 8000854:	d006      	beq.n	8000864 <__aeabi_fmul+0xfc>
 8000856:	3604      	adds	r6, #4
 8000858:	0132      	lsls	r2, r6, #4
 800085a:	d503      	bpl.n	8000864 <__aeabi_fmul+0xfc>
 800085c:	4b6e      	ldr	r3, [pc, #440]	@ (8000a18 <__aeabi_fmul+0x2b0>)
 800085e:	401e      	ands	r6, r3
 8000860:	000b      	movs	r3, r1
 8000862:	3380      	adds	r3, #128	@ 0x80
 8000864:	2bfe      	cmp	r3, #254	@ 0xfe
 8000866:	dd00      	ble.n	800086a <__aeabi_fmul+0x102>
 8000868:	e0bd      	b.n	80009e6 <__aeabi_fmul+0x27e>
 800086a:	01b2      	lsls	r2, r6, #6
 800086c:	0a52      	lsrs	r2, r2, #9
 800086e:	b2db      	uxtb	r3, r3
 8000870:	e048      	b.n	8000904 <__aeabi_fmul+0x19c>
 8000872:	2e00      	cmp	r6, #0
 8000874:	d000      	beq.n	8000878 <__aeabi_fmul+0x110>
 8000876:	e092      	b.n	800099e <__aeabi_fmul+0x236>
 8000878:	2308      	movs	r3, #8
 800087a:	4699      	mov	r9, r3
 800087c:	3b06      	subs	r3, #6
 800087e:	469a      	mov	sl, r3
 8000880:	027b      	lsls	r3, r7, #9
 8000882:	0a5b      	lsrs	r3, r3, #9
 8000884:	4698      	mov	r8, r3
 8000886:	007b      	lsls	r3, r7, #1
 8000888:	24ff      	movs	r4, #255	@ 0xff
 800088a:	0e1b      	lsrs	r3, r3, #24
 800088c:	0fff      	lsrs	r7, r7, #31
 800088e:	2b00      	cmp	r3, #0
 8000890:	d18a      	bne.n	80007a8 <__aeabi_fmul+0x40>
 8000892:	4642      	mov	r2, r8
 8000894:	2a00      	cmp	r2, #0
 8000896:	d164      	bne.n	8000962 <__aeabi_fmul+0x1fa>
 8000898:	4649      	mov	r1, r9
 800089a:	3201      	adds	r2, #1
 800089c:	4311      	orrs	r1, r2
 800089e:	4689      	mov	r9, r1
 80008a0:	290a      	cmp	r1, #10
 80008a2:	dc08      	bgt.n	80008b6 <__aeabi_fmul+0x14e>
 80008a4:	407d      	eors	r5, r7
 80008a6:	2001      	movs	r0, #1
 80008a8:	b2ea      	uxtb	r2, r5
 80008aa:	2902      	cmp	r1, #2
 80008ac:	dc91      	bgt.n	80007d2 <__aeabi_fmul+0x6a>
 80008ae:	0015      	movs	r5, r2
 80008b0:	2200      	movs	r2, #0
 80008b2:	e027      	b.n	8000904 <__aeabi_fmul+0x19c>
 80008b4:	0015      	movs	r5, r2
 80008b6:	4653      	mov	r3, sl
 80008b8:	2b02      	cmp	r3, #2
 80008ba:	d100      	bne.n	80008be <__aeabi_fmul+0x156>
 80008bc:	e093      	b.n	80009e6 <__aeabi_fmul+0x27e>
 80008be:	2b03      	cmp	r3, #3
 80008c0:	d01a      	beq.n	80008f8 <__aeabi_fmul+0x190>
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d12c      	bne.n	8000920 <__aeabi_fmul+0x1b8>
 80008c6:	2300      	movs	r3, #0
 80008c8:	2200      	movs	r2, #0
 80008ca:	e01b      	b.n	8000904 <__aeabi_fmul+0x19c>
 80008cc:	4643      	mov	r3, r8
 80008ce:	34ff      	adds	r4, #255	@ 0xff
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d055      	beq.n	8000980 <__aeabi_fmul+0x218>
 80008d4:	2103      	movs	r1, #3
 80008d6:	464b      	mov	r3, r9
 80008d8:	430b      	orrs	r3, r1
 80008da:	0019      	movs	r1, r3
 80008dc:	2b0a      	cmp	r3, #10
 80008de:	dc00      	bgt.n	80008e2 <__aeabi_fmul+0x17a>
 80008e0:	e092      	b.n	8000a08 <__aeabi_fmul+0x2a0>
 80008e2:	2b0f      	cmp	r3, #15
 80008e4:	d000      	beq.n	80008e8 <__aeabi_fmul+0x180>
 80008e6:	e08c      	b.n	8000a02 <__aeabi_fmul+0x29a>
 80008e8:	2280      	movs	r2, #128	@ 0x80
 80008ea:	03d2      	lsls	r2, r2, #15
 80008ec:	4216      	tst	r6, r2
 80008ee:	d003      	beq.n	80008f8 <__aeabi_fmul+0x190>
 80008f0:	4643      	mov	r3, r8
 80008f2:	4213      	tst	r3, r2
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fmul+0x190>
 80008f6:	e07d      	b.n	80009f4 <__aeabi_fmul+0x28c>
 80008f8:	2280      	movs	r2, #128	@ 0x80
 80008fa:	03d2      	lsls	r2, r2, #15
 80008fc:	4332      	orrs	r2, r6
 80008fe:	0252      	lsls	r2, r2, #9
 8000900:	0a52      	lsrs	r2, r2, #9
 8000902:	23ff      	movs	r3, #255	@ 0xff
 8000904:	05d8      	lsls	r0, r3, #23
 8000906:	07ed      	lsls	r5, r5, #31
 8000908:	4310      	orrs	r0, r2
 800090a:	4328      	orrs	r0, r5
 800090c:	bce0      	pop	{r5, r6, r7}
 800090e:	46ba      	mov	sl, r7
 8000910:	46b1      	mov	r9, r6
 8000912:	46a8      	mov	r8, r5
 8000914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000916:	2301      	movs	r3, #1
 8000918:	0015      	movs	r5, r2
 800091a:	0871      	lsrs	r1, r6, #1
 800091c:	401e      	ands	r6, r3
 800091e:	430e      	orrs	r6, r1
 8000920:	0023      	movs	r3, r4
 8000922:	3380      	adds	r3, #128	@ 0x80
 8000924:	1c61      	adds	r1, r4, #1
 8000926:	2b00      	cmp	r3, #0
 8000928:	dd41      	ble.n	80009ae <__aeabi_fmul+0x246>
 800092a:	0772      	lsls	r2, r6, #29
 800092c:	d094      	beq.n	8000858 <__aeabi_fmul+0xf0>
 800092e:	220f      	movs	r2, #15
 8000930:	4032      	ands	r2, r6
 8000932:	2a04      	cmp	r2, #4
 8000934:	d000      	beq.n	8000938 <__aeabi_fmul+0x1d0>
 8000936:	e78e      	b.n	8000856 <__aeabi_fmul+0xee>
 8000938:	e78e      	b.n	8000858 <__aeabi_fmul+0xf0>
 800093a:	2e00      	cmp	r6, #0
 800093c:	d105      	bne.n	800094a <__aeabi_fmul+0x1e2>
 800093e:	2304      	movs	r3, #4
 8000940:	4699      	mov	r9, r3
 8000942:	3b03      	subs	r3, #3
 8000944:	2400      	movs	r4, #0
 8000946:	469a      	mov	sl, r3
 8000948:	e726      	b.n	8000798 <__aeabi_fmul+0x30>
 800094a:	0030      	movs	r0, r6
 800094c:	f002 f920 	bl	8002b90 <__clzsi2>
 8000950:	2476      	movs	r4, #118	@ 0x76
 8000952:	1f43      	subs	r3, r0, #5
 8000954:	409e      	lsls	r6, r3
 8000956:	2300      	movs	r3, #0
 8000958:	4264      	negs	r4, r4
 800095a:	4699      	mov	r9, r3
 800095c:	469a      	mov	sl, r3
 800095e:	1a24      	subs	r4, r4, r0
 8000960:	e71a      	b.n	8000798 <__aeabi_fmul+0x30>
 8000962:	4640      	mov	r0, r8
 8000964:	f002 f914 	bl	8002b90 <__clzsi2>
 8000968:	464b      	mov	r3, r9
 800096a:	1a24      	subs	r4, r4, r0
 800096c:	3c76      	subs	r4, #118	@ 0x76
 800096e:	2b0a      	cmp	r3, #10
 8000970:	dca1      	bgt.n	80008b6 <__aeabi_fmul+0x14e>
 8000972:	4643      	mov	r3, r8
 8000974:	3805      	subs	r0, #5
 8000976:	4083      	lsls	r3, r0
 8000978:	407d      	eors	r5, r7
 800097a:	4698      	mov	r8, r3
 800097c:	b2ea      	uxtb	r2, r5
 800097e:	e724      	b.n	80007ca <__aeabi_fmul+0x62>
 8000980:	464a      	mov	r2, r9
 8000982:	3302      	adds	r3, #2
 8000984:	4313      	orrs	r3, r2
 8000986:	002a      	movs	r2, r5
 8000988:	407a      	eors	r2, r7
 800098a:	b2d2      	uxtb	r2, r2
 800098c:	2b0a      	cmp	r3, #10
 800098e:	dc92      	bgt.n	80008b6 <__aeabi_fmul+0x14e>
 8000990:	4649      	mov	r1, r9
 8000992:	0015      	movs	r5, r2
 8000994:	2900      	cmp	r1, #0
 8000996:	d026      	beq.n	80009e6 <__aeabi_fmul+0x27e>
 8000998:	4699      	mov	r9, r3
 800099a:	2002      	movs	r0, #2
 800099c:	e719      	b.n	80007d2 <__aeabi_fmul+0x6a>
 800099e:	230c      	movs	r3, #12
 80009a0:	4699      	mov	r9, r3
 80009a2:	3b09      	subs	r3, #9
 80009a4:	24ff      	movs	r4, #255	@ 0xff
 80009a6:	469a      	mov	sl, r3
 80009a8:	e6f6      	b.n	8000798 <__aeabi_fmul+0x30>
 80009aa:	0015      	movs	r5, r2
 80009ac:	0021      	movs	r1, r4
 80009ae:	2201      	movs	r2, #1
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	2b1b      	cmp	r3, #27
 80009b4:	dd00      	ble.n	80009b8 <__aeabi_fmul+0x250>
 80009b6:	e786      	b.n	80008c6 <__aeabi_fmul+0x15e>
 80009b8:	319e      	adds	r1, #158	@ 0x9e
 80009ba:	0032      	movs	r2, r6
 80009bc:	408e      	lsls	r6, r1
 80009be:	40da      	lsrs	r2, r3
 80009c0:	1e73      	subs	r3, r6, #1
 80009c2:	419e      	sbcs	r6, r3
 80009c4:	4332      	orrs	r2, r6
 80009c6:	0753      	lsls	r3, r2, #29
 80009c8:	d004      	beq.n	80009d4 <__aeabi_fmul+0x26c>
 80009ca:	230f      	movs	r3, #15
 80009cc:	4013      	ands	r3, r2
 80009ce:	2b04      	cmp	r3, #4
 80009d0:	d000      	beq.n	80009d4 <__aeabi_fmul+0x26c>
 80009d2:	3204      	adds	r2, #4
 80009d4:	0153      	lsls	r3, r2, #5
 80009d6:	d510      	bpl.n	80009fa <__aeabi_fmul+0x292>
 80009d8:	2301      	movs	r3, #1
 80009da:	2200      	movs	r2, #0
 80009dc:	e792      	b.n	8000904 <__aeabi_fmul+0x19c>
 80009de:	003d      	movs	r5, r7
 80009e0:	4646      	mov	r6, r8
 80009e2:	4682      	mov	sl, r0
 80009e4:	e767      	b.n	80008b6 <__aeabi_fmul+0x14e>
 80009e6:	23ff      	movs	r3, #255	@ 0xff
 80009e8:	2200      	movs	r2, #0
 80009ea:	e78b      	b.n	8000904 <__aeabi_fmul+0x19c>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	2500      	movs	r5, #0
 80009f0:	03d2      	lsls	r2, r2, #15
 80009f2:	e786      	b.n	8000902 <__aeabi_fmul+0x19a>
 80009f4:	003d      	movs	r5, r7
 80009f6:	431a      	orrs	r2, r3
 80009f8:	e783      	b.n	8000902 <__aeabi_fmul+0x19a>
 80009fa:	0192      	lsls	r2, r2, #6
 80009fc:	2300      	movs	r3, #0
 80009fe:	0a52      	lsrs	r2, r2, #9
 8000a00:	e780      	b.n	8000904 <__aeabi_fmul+0x19c>
 8000a02:	003d      	movs	r5, r7
 8000a04:	4646      	mov	r6, r8
 8000a06:	e777      	b.n	80008f8 <__aeabi_fmul+0x190>
 8000a08:	002a      	movs	r2, r5
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	407a      	eors	r2, r7
 8000a0e:	408b      	lsls	r3, r1
 8000a10:	2003      	movs	r0, #3
 8000a12:	b2d2      	uxtb	r2, r2
 8000a14:	e6e9      	b.n	80007ea <__aeabi_fmul+0x82>
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	f7ffffff 	.word	0xf7ffffff

08000a1c <__aeabi_i2f>:
 8000a1c:	b570      	push	{r4, r5, r6, lr}
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	d012      	beq.n	8000a48 <__aeabi_i2f+0x2c>
 8000a22:	17c3      	asrs	r3, r0, #31
 8000a24:	18c5      	adds	r5, r0, r3
 8000a26:	405d      	eors	r5, r3
 8000a28:	0fc4      	lsrs	r4, r0, #31
 8000a2a:	0028      	movs	r0, r5
 8000a2c:	f002 f8b0 	bl	8002b90 <__clzsi2>
 8000a30:	239e      	movs	r3, #158	@ 0x9e
 8000a32:	1a1b      	subs	r3, r3, r0
 8000a34:	2b96      	cmp	r3, #150	@ 0x96
 8000a36:	dc0f      	bgt.n	8000a58 <__aeabi_i2f+0x3c>
 8000a38:	2808      	cmp	r0, #8
 8000a3a:	d038      	beq.n	8000aae <__aeabi_i2f+0x92>
 8000a3c:	3808      	subs	r0, #8
 8000a3e:	4085      	lsls	r5, r0
 8000a40:	026d      	lsls	r5, r5, #9
 8000a42:	0a6d      	lsrs	r5, r5, #9
 8000a44:	b2d8      	uxtb	r0, r3
 8000a46:	e002      	b.n	8000a4e <__aeabi_i2f+0x32>
 8000a48:	2400      	movs	r4, #0
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	2500      	movs	r5, #0
 8000a4e:	05c0      	lsls	r0, r0, #23
 8000a50:	4328      	orrs	r0, r5
 8000a52:	07e4      	lsls	r4, r4, #31
 8000a54:	4320      	orrs	r0, r4
 8000a56:	bd70      	pop	{r4, r5, r6, pc}
 8000a58:	2b99      	cmp	r3, #153	@ 0x99
 8000a5a:	dc14      	bgt.n	8000a86 <__aeabi_i2f+0x6a>
 8000a5c:	1f42      	subs	r2, r0, #5
 8000a5e:	4095      	lsls	r5, r2
 8000a60:	002a      	movs	r2, r5
 8000a62:	4915      	ldr	r1, [pc, #84]	@ (8000ab8 <__aeabi_i2f+0x9c>)
 8000a64:	4011      	ands	r1, r2
 8000a66:	0755      	lsls	r5, r2, #29
 8000a68:	d01c      	beq.n	8000aa4 <__aeabi_i2f+0x88>
 8000a6a:	250f      	movs	r5, #15
 8000a6c:	402a      	ands	r2, r5
 8000a6e:	2a04      	cmp	r2, #4
 8000a70:	d018      	beq.n	8000aa4 <__aeabi_i2f+0x88>
 8000a72:	3104      	adds	r1, #4
 8000a74:	08ca      	lsrs	r2, r1, #3
 8000a76:	0149      	lsls	r1, r1, #5
 8000a78:	d515      	bpl.n	8000aa6 <__aeabi_i2f+0x8a>
 8000a7a:	239f      	movs	r3, #159	@ 0x9f
 8000a7c:	0252      	lsls	r2, r2, #9
 8000a7e:	1a18      	subs	r0, r3, r0
 8000a80:	0a55      	lsrs	r5, r2, #9
 8000a82:	b2c0      	uxtb	r0, r0
 8000a84:	e7e3      	b.n	8000a4e <__aeabi_i2f+0x32>
 8000a86:	2205      	movs	r2, #5
 8000a88:	0029      	movs	r1, r5
 8000a8a:	1a12      	subs	r2, r2, r0
 8000a8c:	40d1      	lsrs	r1, r2
 8000a8e:	0002      	movs	r2, r0
 8000a90:	321b      	adds	r2, #27
 8000a92:	4095      	lsls	r5, r2
 8000a94:	002a      	movs	r2, r5
 8000a96:	1e55      	subs	r5, r2, #1
 8000a98:	41aa      	sbcs	r2, r5
 8000a9a:	430a      	orrs	r2, r1
 8000a9c:	4906      	ldr	r1, [pc, #24]	@ (8000ab8 <__aeabi_i2f+0x9c>)
 8000a9e:	4011      	ands	r1, r2
 8000aa0:	0755      	lsls	r5, r2, #29
 8000aa2:	d1e2      	bne.n	8000a6a <__aeabi_i2f+0x4e>
 8000aa4:	08ca      	lsrs	r2, r1, #3
 8000aa6:	0252      	lsls	r2, r2, #9
 8000aa8:	0a55      	lsrs	r5, r2, #9
 8000aaa:	b2d8      	uxtb	r0, r3
 8000aac:	e7cf      	b.n	8000a4e <__aeabi_i2f+0x32>
 8000aae:	026d      	lsls	r5, r5, #9
 8000ab0:	0a6d      	lsrs	r5, r5, #9
 8000ab2:	308e      	adds	r0, #142	@ 0x8e
 8000ab4:	e7cb      	b.n	8000a4e <__aeabi_i2f+0x32>
 8000ab6:	46c0      	nop			@ (mov r8, r8)
 8000ab8:	fbffffff 	.word	0xfbffffff

08000abc <__aeabi_dadd>:
 8000abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000abe:	464f      	mov	r7, r9
 8000ac0:	4646      	mov	r6, r8
 8000ac2:	46d6      	mov	lr, sl
 8000ac4:	b5c0      	push	{r6, r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	9000      	str	r0, [sp, #0]
 8000aca:	9101      	str	r1, [sp, #4]
 8000acc:	030e      	lsls	r6, r1, #12
 8000ace:	004c      	lsls	r4, r1, #1
 8000ad0:	0fcd      	lsrs	r5, r1, #31
 8000ad2:	0a71      	lsrs	r1, r6, #9
 8000ad4:	9e00      	ldr	r6, [sp, #0]
 8000ad6:	005f      	lsls	r7, r3, #1
 8000ad8:	0f76      	lsrs	r6, r6, #29
 8000ada:	430e      	orrs	r6, r1
 8000adc:	9900      	ldr	r1, [sp, #0]
 8000ade:	9200      	str	r2, [sp, #0]
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	00c9      	lsls	r1, r1, #3
 8000ae4:	4689      	mov	r9, r1
 8000ae6:	0319      	lsls	r1, r3, #12
 8000ae8:	0d7b      	lsrs	r3, r7, #21
 8000aea:	4698      	mov	r8, r3
 8000aec:	9b01      	ldr	r3, [sp, #4]
 8000aee:	0a49      	lsrs	r1, r1, #9
 8000af0:	0fdb      	lsrs	r3, r3, #31
 8000af2:	469c      	mov	ip, r3
 8000af4:	9b00      	ldr	r3, [sp, #0]
 8000af6:	9a00      	ldr	r2, [sp, #0]
 8000af8:	0f5b      	lsrs	r3, r3, #29
 8000afa:	430b      	orrs	r3, r1
 8000afc:	4641      	mov	r1, r8
 8000afe:	0d64      	lsrs	r4, r4, #21
 8000b00:	00d2      	lsls	r2, r2, #3
 8000b02:	1a61      	subs	r1, r4, r1
 8000b04:	4565      	cmp	r5, ip
 8000b06:	d100      	bne.n	8000b0a <__aeabi_dadd+0x4e>
 8000b08:	e0a6      	b.n	8000c58 <__aeabi_dadd+0x19c>
 8000b0a:	2900      	cmp	r1, #0
 8000b0c:	dd72      	ble.n	8000bf4 <__aeabi_dadd+0x138>
 8000b0e:	4647      	mov	r7, r8
 8000b10:	2f00      	cmp	r7, #0
 8000b12:	d100      	bne.n	8000b16 <__aeabi_dadd+0x5a>
 8000b14:	e0dd      	b.n	8000cd2 <__aeabi_dadd+0x216>
 8000b16:	4fcc      	ldr	r7, [pc, #816]	@ (8000e48 <__aeabi_dadd+0x38c>)
 8000b18:	42bc      	cmp	r4, r7
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_dadd+0x62>
 8000b1c:	e19a      	b.n	8000e54 <__aeabi_dadd+0x398>
 8000b1e:	2701      	movs	r7, #1
 8000b20:	2938      	cmp	r1, #56	@ 0x38
 8000b22:	dc17      	bgt.n	8000b54 <__aeabi_dadd+0x98>
 8000b24:	2780      	movs	r7, #128	@ 0x80
 8000b26:	043f      	lsls	r7, r7, #16
 8000b28:	433b      	orrs	r3, r7
 8000b2a:	291f      	cmp	r1, #31
 8000b2c:	dd00      	ble.n	8000b30 <__aeabi_dadd+0x74>
 8000b2e:	e1dd      	b.n	8000eec <__aeabi_dadd+0x430>
 8000b30:	2720      	movs	r7, #32
 8000b32:	1a78      	subs	r0, r7, r1
 8000b34:	001f      	movs	r7, r3
 8000b36:	4087      	lsls	r7, r0
 8000b38:	46ba      	mov	sl, r7
 8000b3a:	0017      	movs	r7, r2
 8000b3c:	40cf      	lsrs	r7, r1
 8000b3e:	4684      	mov	ip, r0
 8000b40:	0038      	movs	r0, r7
 8000b42:	4657      	mov	r7, sl
 8000b44:	4307      	orrs	r7, r0
 8000b46:	4660      	mov	r0, ip
 8000b48:	4082      	lsls	r2, r0
 8000b4a:	40cb      	lsrs	r3, r1
 8000b4c:	1e50      	subs	r0, r2, #1
 8000b4e:	4182      	sbcs	r2, r0
 8000b50:	1af6      	subs	r6, r6, r3
 8000b52:	4317      	orrs	r7, r2
 8000b54:	464b      	mov	r3, r9
 8000b56:	1bdf      	subs	r7, r3, r7
 8000b58:	45b9      	cmp	r9, r7
 8000b5a:	4180      	sbcs	r0, r0
 8000b5c:	4240      	negs	r0, r0
 8000b5e:	1a36      	subs	r6, r6, r0
 8000b60:	0233      	lsls	r3, r6, #8
 8000b62:	d400      	bmi.n	8000b66 <__aeabi_dadd+0xaa>
 8000b64:	e0ff      	b.n	8000d66 <__aeabi_dadd+0x2aa>
 8000b66:	0276      	lsls	r6, r6, #9
 8000b68:	0a76      	lsrs	r6, r6, #9
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	d100      	bne.n	8000b70 <__aeabi_dadd+0xb4>
 8000b6e:	e13c      	b.n	8000dea <__aeabi_dadd+0x32e>
 8000b70:	0030      	movs	r0, r6
 8000b72:	f002 f80d 	bl	8002b90 <__clzsi2>
 8000b76:	0003      	movs	r3, r0
 8000b78:	3b08      	subs	r3, #8
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	0038      	movs	r0, r7
 8000b7e:	1aca      	subs	r2, r1, r3
 8000b80:	40d0      	lsrs	r0, r2
 8000b82:	409e      	lsls	r6, r3
 8000b84:	0002      	movs	r2, r0
 8000b86:	409f      	lsls	r7, r3
 8000b88:	4332      	orrs	r2, r6
 8000b8a:	429c      	cmp	r4, r3
 8000b8c:	dd00      	ble.n	8000b90 <__aeabi_dadd+0xd4>
 8000b8e:	e1a6      	b.n	8000ede <__aeabi_dadd+0x422>
 8000b90:	1b18      	subs	r0, r3, r4
 8000b92:	3001      	adds	r0, #1
 8000b94:	1a09      	subs	r1, r1, r0
 8000b96:	003e      	movs	r6, r7
 8000b98:	408f      	lsls	r7, r1
 8000b9a:	40c6      	lsrs	r6, r0
 8000b9c:	1e7b      	subs	r3, r7, #1
 8000b9e:	419f      	sbcs	r7, r3
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	408b      	lsls	r3, r1
 8000ba4:	4337      	orrs	r7, r6
 8000ba6:	431f      	orrs	r7, r3
 8000ba8:	40c2      	lsrs	r2, r0
 8000baa:	003b      	movs	r3, r7
 8000bac:	0016      	movs	r6, r2
 8000bae:	2400      	movs	r4, #0
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_dadd+0xfa>
 8000bb4:	e1df      	b.n	8000f76 <__aeabi_dadd+0x4ba>
 8000bb6:	077b      	lsls	r3, r7, #29
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_dadd+0x100>
 8000bba:	e332      	b.n	8001222 <__aeabi_dadd+0x766>
 8000bbc:	230f      	movs	r3, #15
 8000bbe:	003a      	movs	r2, r7
 8000bc0:	403b      	ands	r3, r7
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d004      	beq.n	8000bd0 <__aeabi_dadd+0x114>
 8000bc6:	1d3a      	adds	r2, r7, #4
 8000bc8:	42ba      	cmp	r2, r7
 8000bca:	41bf      	sbcs	r7, r7
 8000bcc:	427f      	negs	r7, r7
 8000bce:	19f6      	adds	r6, r6, r7
 8000bd0:	0233      	lsls	r3, r6, #8
 8000bd2:	d400      	bmi.n	8000bd6 <__aeabi_dadd+0x11a>
 8000bd4:	e323      	b.n	800121e <__aeabi_dadd+0x762>
 8000bd6:	4b9c      	ldr	r3, [pc, #624]	@ (8000e48 <__aeabi_dadd+0x38c>)
 8000bd8:	3401      	adds	r4, #1
 8000bda:	429c      	cmp	r4, r3
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_dadd+0x124>
 8000bde:	e0b4      	b.n	8000d4a <__aeabi_dadd+0x28e>
 8000be0:	4b9a      	ldr	r3, [pc, #616]	@ (8000e4c <__aeabi_dadd+0x390>)
 8000be2:	0564      	lsls	r4, r4, #21
 8000be4:	401e      	ands	r6, r3
 8000be6:	0d64      	lsrs	r4, r4, #21
 8000be8:	0777      	lsls	r7, r6, #29
 8000bea:	08d2      	lsrs	r2, r2, #3
 8000bec:	0276      	lsls	r6, r6, #9
 8000bee:	4317      	orrs	r7, r2
 8000bf0:	0b36      	lsrs	r6, r6, #12
 8000bf2:	e0ac      	b.n	8000d4e <__aeabi_dadd+0x292>
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_dadd+0x13e>
 8000bf8:	e07e      	b.n	8000cf8 <__aeabi_dadd+0x23c>
 8000bfa:	4641      	mov	r1, r8
 8000bfc:	1b09      	subs	r1, r1, r4
 8000bfe:	2c00      	cmp	r4, #0
 8000c00:	d000      	beq.n	8000c04 <__aeabi_dadd+0x148>
 8000c02:	e160      	b.n	8000ec6 <__aeabi_dadd+0x40a>
 8000c04:	0034      	movs	r4, r6
 8000c06:	4648      	mov	r0, r9
 8000c08:	4304      	orrs	r4, r0
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_dadd+0x152>
 8000c0c:	e1c9      	b.n	8000fa2 <__aeabi_dadd+0x4e6>
 8000c0e:	1e4c      	subs	r4, r1, #1
 8000c10:	2901      	cmp	r1, #1
 8000c12:	d100      	bne.n	8000c16 <__aeabi_dadd+0x15a>
 8000c14:	e22e      	b.n	8001074 <__aeabi_dadd+0x5b8>
 8000c16:	4d8c      	ldr	r5, [pc, #560]	@ (8000e48 <__aeabi_dadd+0x38c>)
 8000c18:	42a9      	cmp	r1, r5
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dadd+0x162>
 8000c1c:	e224      	b.n	8001068 <__aeabi_dadd+0x5ac>
 8000c1e:	2701      	movs	r7, #1
 8000c20:	2c38      	cmp	r4, #56	@ 0x38
 8000c22:	dc11      	bgt.n	8000c48 <__aeabi_dadd+0x18c>
 8000c24:	0021      	movs	r1, r4
 8000c26:	291f      	cmp	r1, #31
 8000c28:	dd00      	ble.n	8000c2c <__aeabi_dadd+0x170>
 8000c2a:	e20b      	b.n	8001044 <__aeabi_dadd+0x588>
 8000c2c:	2420      	movs	r4, #32
 8000c2e:	0037      	movs	r7, r6
 8000c30:	4648      	mov	r0, r9
 8000c32:	1a64      	subs	r4, r4, r1
 8000c34:	40a7      	lsls	r7, r4
 8000c36:	40c8      	lsrs	r0, r1
 8000c38:	4307      	orrs	r7, r0
 8000c3a:	4648      	mov	r0, r9
 8000c3c:	40a0      	lsls	r0, r4
 8000c3e:	40ce      	lsrs	r6, r1
 8000c40:	1e44      	subs	r4, r0, #1
 8000c42:	41a0      	sbcs	r0, r4
 8000c44:	1b9b      	subs	r3, r3, r6
 8000c46:	4307      	orrs	r7, r0
 8000c48:	1bd7      	subs	r7, r2, r7
 8000c4a:	42ba      	cmp	r2, r7
 8000c4c:	4192      	sbcs	r2, r2
 8000c4e:	4252      	negs	r2, r2
 8000c50:	4665      	mov	r5, ip
 8000c52:	4644      	mov	r4, r8
 8000c54:	1a9e      	subs	r6, r3, r2
 8000c56:	e783      	b.n	8000b60 <__aeabi_dadd+0xa4>
 8000c58:	2900      	cmp	r1, #0
 8000c5a:	dc00      	bgt.n	8000c5e <__aeabi_dadd+0x1a2>
 8000c5c:	e09c      	b.n	8000d98 <__aeabi_dadd+0x2dc>
 8000c5e:	4647      	mov	r7, r8
 8000c60:	2f00      	cmp	r7, #0
 8000c62:	d167      	bne.n	8000d34 <__aeabi_dadd+0x278>
 8000c64:	001f      	movs	r7, r3
 8000c66:	4317      	orrs	r7, r2
 8000c68:	d100      	bne.n	8000c6c <__aeabi_dadd+0x1b0>
 8000c6a:	e0e4      	b.n	8000e36 <__aeabi_dadd+0x37a>
 8000c6c:	1e48      	subs	r0, r1, #1
 8000c6e:	2901      	cmp	r1, #1
 8000c70:	d100      	bne.n	8000c74 <__aeabi_dadd+0x1b8>
 8000c72:	e19b      	b.n	8000fac <__aeabi_dadd+0x4f0>
 8000c74:	4f74      	ldr	r7, [pc, #464]	@ (8000e48 <__aeabi_dadd+0x38c>)
 8000c76:	42b9      	cmp	r1, r7
 8000c78:	d100      	bne.n	8000c7c <__aeabi_dadd+0x1c0>
 8000c7a:	e0eb      	b.n	8000e54 <__aeabi_dadd+0x398>
 8000c7c:	2701      	movs	r7, #1
 8000c7e:	0001      	movs	r1, r0
 8000c80:	2838      	cmp	r0, #56	@ 0x38
 8000c82:	dc11      	bgt.n	8000ca8 <__aeabi_dadd+0x1ec>
 8000c84:	291f      	cmp	r1, #31
 8000c86:	dd00      	ble.n	8000c8a <__aeabi_dadd+0x1ce>
 8000c88:	e1c7      	b.n	800101a <__aeabi_dadd+0x55e>
 8000c8a:	2720      	movs	r7, #32
 8000c8c:	1a78      	subs	r0, r7, r1
 8000c8e:	001f      	movs	r7, r3
 8000c90:	4684      	mov	ip, r0
 8000c92:	4087      	lsls	r7, r0
 8000c94:	0010      	movs	r0, r2
 8000c96:	40c8      	lsrs	r0, r1
 8000c98:	4307      	orrs	r7, r0
 8000c9a:	4660      	mov	r0, ip
 8000c9c:	4082      	lsls	r2, r0
 8000c9e:	40cb      	lsrs	r3, r1
 8000ca0:	1e50      	subs	r0, r2, #1
 8000ca2:	4182      	sbcs	r2, r0
 8000ca4:	18f6      	adds	r6, r6, r3
 8000ca6:	4317      	orrs	r7, r2
 8000ca8:	444f      	add	r7, r9
 8000caa:	454f      	cmp	r7, r9
 8000cac:	4180      	sbcs	r0, r0
 8000cae:	4240      	negs	r0, r0
 8000cb0:	1836      	adds	r6, r6, r0
 8000cb2:	0233      	lsls	r3, r6, #8
 8000cb4:	d557      	bpl.n	8000d66 <__aeabi_dadd+0x2aa>
 8000cb6:	4b64      	ldr	r3, [pc, #400]	@ (8000e48 <__aeabi_dadd+0x38c>)
 8000cb8:	3401      	adds	r4, #1
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	d045      	beq.n	8000d4a <__aeabi_dadd+0x28e>
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4b62      	ldr	r3, [pc, #392]	@ (8000e4c <__aeabi_dadd+0x390>)
 8000cc2:	087a      	lsrs	r2, r7, #1
 8000cc4:	401e      	ands	r6, r3
 8000cc6:	4039      	ands	r1, r7
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	07f7      	lsls	r7, r6, #31
 8000ccc:	4317      	orrs	r7, r2
 8000cce:	0876      	lsrs	r6, r6, #1
 8000cd0:	e771      	b.n	8000bb6 <__aeabi_dadd+0xfa>
 8000cd2:	001f      	movs	r7, r3
 8000cd4:	4317      	orrs	r7, r2
 8000cd6:	d100      	bne.n	8000cda <__aeabi_dadd+0x21e>
 8000cd8:	e0ad      	b.n	8000e36 <__aeabi_dadd+0x37a>
 8000cda:	1e4f      	subs	r7, r1, #1
 8000cdc:	46bc      	mov	ip, r7
 8000cde:	2901      	cmp	r1, #1
 8000ce0:	d100      	bne.n	8000ce4 <__aeabi_dadd+0x228>
 8000ce2:	e182      	b.n	8000fea <__aeabi_dadd+0x52e>
 8000ce4:	4f58      	ldr	r7, [pc, #352]	@ (8000e48 <__aeabi_dadd+0x38c>)
 8000ce6:	42b9      	cmp	r1, r7
 8000ce8:	d100      	bne.n	8000cec <__aeabi_dadd+0x230>
 8000cea:	e190      	b.n	800100e <__aeabi_dadd+0x552>
 8000cec:	4661      	mov	r1, ip
 8000cee:	2701      	movs	r7, #1
 8000cf0:	2938      	cmp	r1, #56	@ 0x38
 8000cf2:	dd00      	ble.n	8000cf6 <__aeabi_dadd+0x23a>
 8000cf4:	e72e      	b.n	8000b54 <__aeabi_dadd+0x98>
 8000cf6:	e718      	b.n	8000b2a <__aeabi_dadd+0x6e>
 8000cf8:	4f55      	ldr	r7, [pc, #340]	@ (8000e50 <__aeabi_dadd+0x394>)
 8000cfa:	1c61      	adds	r1, r4, #1
 8000cfc:	4239      	tst	r1, r7
 8000cfe:	d000      	beq.n	8000d02 <__aeabi_dadd+0x246>
 8000d00:	e0d0      	b.n	8000ea4 <__aeabi_dadd+0x3e8>
 8000d02:	0031      	movs	r1, r6
 8000d04:	4648      	mov	r0, r9
 8000d06:	001f      	movs	r7, r3
 8000d08:	4301      	orrs	r1, r0
 8000d0a:	4317      	orrs	r7, r2
 8000d0c:	2c00      	cmp	r4, #0
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_dadd+0x256>
 8000d10:	e13d      	b.n	8000f8e <__aeabi_dadd+0x4d2>
 8000d12:	2900      	cmp	r1, #0
 8000d14:	d100      	bne.n	8000d18 <__aeabi_dadd+0x25c>
 8000d16:	e1bc      	b.n	8001092 <__aeabi_dadd+0x5d6>
 8000d18:	2f00      	cmp	r7, #0
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_dadd+0x262>
 8000d1c:	e1bf      	b.n	800109e <__aeabi_dadd+0x5e2>
 8000d1e:	464b      	mov	r3, r9
 8000d20:	2100      	movs	r1, #0
 8000d22:	08d8      	lsrs	r0, r3, #3
 8000d24:	0777      	lsls	r7, r6, #29
 8000d26:	4307      	orrs	r7, r0
 8000d28:	08f0      	lsrs	r0, r6, #3
 8000d2a:	0306      	lsls	r6, r0, #12
 8000d2c:	054c      	lsls	r4, r1, #21
 8000d2e:	0b36      	lsrs	r6, r6, #12
 8000d30:	0d64      	lsrs	r4, r4, #21
 8000d32:	e00c      	b.n	8000d4e <__aeabi_dadd+0x292>
 8000d34:	4f44      	ldr	r7, [pc, #272]	@ (8000e48 <__aeabi_dadd+0x38c>)
 8000d36:	42bc      	cmp	r4, r7
 8000d38:	d100      	bne.n	8000d3c <__aeabi_dadd+0x280>
 8000d3a:	e08b      	b.n	8000e54 <__aeabi_dadd+0x398>
 8000d3c:	2701      	movs	r7, #1
 8000d3e:	2938      	cmp	r1, #56	@ 0x38
 8000d40:	dcb2      	bgt.n	8000ca8 <__aeabi_dadd+0x1ec>
 8000d42:	2780      	movs	r7, #128	@ 0x80
 8000d44:	043f      	lsls	r7, r7, #16
 8000d46:	433b      	orrs	r3, r7
 8000d48:	e79c      	b.n	8000c84 <__aeabi_dadd+0x1c8>
 8000d4a:	2600      	movs	r6, #0
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	0524      	lsls	r4, r4, #20
 8000d50:	4334      	orrs	r4, r6
 8000d52:	07ed      	lsls	r5, r5, #31
 8000d54:	432c      	orrs	r4, r5
 8000d56:	0038      	movs	r0, r7
 8000d58:	0021      	movs	r1, r4
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bce0      	pop	{r5, r6, r7}
 8000d5e:	46ba      	mov	sl, r7
 8000d60:	46b1      	mov	r9, r6
 8000d62:	46a8      	mov	r8, r5
 8000d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d66:	077b      	lsls	r3, r7, #29
 8000d68:	d004      	beq.n	8000d74 <__aeabi_dadd+0x2b8>
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	403b      	ands	r3, r7
 8000d6e:	2b04      	cmp	r3, #4
 8000d70:	d000      	beq.n	8000d74 <__aeabi_dadd+0x2b8>
 8000d72:	e728      	b.n	8000bc6 <__aeabi_dadd+0x10a>
 8000d74:	08f8      	lsrs	r0, r7, #3
 8000d76:	4b34      	ldr	r3, [pc, #208]	@ (8000e48 <__aeabi_dadd+0x38c>)
 8000d78:	0777      	lsls	r7, r6, #29
 8000d7a:	4307      	orrs	r7, r0
 8000d7c:	08f0      	lsrs	r0, r6, #3
 8000d7e:	429c      	cmp	r4, r3
 8000d80:	d000      	beq.n	8000d84 <__aeabi_dadd+0x2c8>
 8000d82:	e24a      	b.n	800121a <__aeabi_dadd+0x75e>
 8000d84:	003b      	movs	r3, r7
 8000d86:	4303      	orrs	r3, r0
 8000d88:	d059      	beq.n	8000e3e <__aeabi_dadd+0x382>
 8000d8a:	2680      	movs	r6, #128	@ 0x80
 8000d8c:	0336      	lsls	r6, r6, #12
 8000d8e:	4306      	orrs	r6, r0
 8000d90:	0336      	lsls	r6, r6, #12
 8000d92:	4c2d      	ldr	r4, [pc, #180]	@ (8000e48 <__aeabi_dadd+0x38c>)
 8000d94:	0b36      	lsrs	r6, r6, #12
 8000d96:	e7da      	b.n	8000d4e <__aeabi_dadd+0x292>
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d061      	beq.n	8000e60 <__aeabi_dadd+0x3a4>
 8000d9c:	4641      	mov	r1, r8
 8000d9e:	1b09      	subs	r1, r1, r4
 8000da0:	2c00      	cmp	r4, #0
 8000da2:	d100      	bne.n	8000da6 <__aeabi_dadd+0x2ea>
 8000da4:	e0b9      	b.n	8000f1a <__aeabi_dadd+0x45e>
 8000da6:	4c28      	ldr	r4, [pc, #160]	@ (8000e48 <__aeabi_dadd+0x38c>)
 8000da8:	45a0      	cmp	r8, r4
 8000daa:	d100      	bne.n	8000dae <__aeabi_dadd+0x2f2>
 8000dac:	e1a5      	b.n	80010fa <__aeabi_dadd+0x63e>
 8000dae:	2701      	movs	r7, #1
 8000db0:	2938      	cmp	r1, #56	@ 0x38
 8000db2:	dc13      	bgt.n	8000ddc <__aeabi_dadd+0x320>
 8000db4:	2480      	movs	r4, #128	@ 0x80
 8000db6:	0424      	lsls	r4, r4, #16
 8000db8:	4326      	orrs	r6, r4
 8000dba:	291f      	cmp	r1, #31
 8000dbc:	dd00      	ble.n	8000dc0 <__aeabi_dadd+0x304>
 8000dbe:	e1c8      	b.n	8001152 <__aeabi_dadd+0x696>
 8000dc0:	2420      	movs	r4, #32
 8000dc2:	0037      	movs	r7, r6
 8000dc4:	4648      	mov	r0, r9
 8000dc6:	1a64      	subs	r4, r4, r1
 8000dc8:	40a7      	lsls	r7, r4
 8000dca:	40c8      	lsrs	r0, r1
 8000dcc:	4307      	orrs	r7, r0
 8000dce:	4648      	mov	r0, r9
 8000dd0:	40a0      	lsls	r0, r4
 8000dd2:	40ce      	lsrs	r6, r1
 8000dd4:	1e44      	subs	r4, r0, #1
 8000dd6:	41a0      	sbcs	r0, r4
 8000dd8:	199b      	adds	r3, r3, r6
 8000dda:	4307      	orrs	r7, r0
 8000ddc:	18bf      	adds	r7, r7, r2
 8000dde:	4297      	cmp	r7, r2
 8000de0:	4192      	sbcs	r2, r2
 8000de2:	4252      	negs	r2, r2
 8000de4:	4644      	mov	r4, r8
 8000de6:	18d6      	adds	r6, r2, r3
 8000de8:	e763      	b.n	8000cb2 <__aeabi_dadd+0x1f6>
 8000dea:	0038      	movs	r0, r7
 8000dec:	f001 fed0 	bl	8002b90 <__clzsi2>
 8000df0:	0003      	movs	r3, r0
 8000df2:	3318      	adds	r3, #24
 8000df4:	2b1f      	cmp	r3, #31
 8000df6:	dc00      	bgt.n	8000dfa <__aeabi_dadd+0x33e>
 8000df8:	e6bf      	b.n	8000b7a <__aeabi_dadd+0xbe>
 8000dfa:	003a      	movs	r2, r7
 8000dfc:	3808      	subs	r0, #8
 8000dfe:	4082      	lsls	r2, r0
 8000e00:	429c      	cmp	r4, r3
 8000e02:	dd00      	ble.n	8000e06 <__aeabi_dadd+0x34a>
 8000e04:	e083      	b.n	8000f0e <__aeabi_dadd+0x452>
 8000e06:	1b1b      	subs	r3, r3, r4
 8000e08:	1c58      	adds	r0, r3, #1
 8000e0a:	281f      	cmp	r0, #31
 8000e0c:	dc00      	bgt.n	8000e10 <__aeabi_dadd+0x354>
 8000e0e:	e1b4      	b.n	800117a <__aeabi_dadd+0x6be>
 8000e10:	0017      	movs	r7, r2
 8000e12:	3b1f      	subs	r3, #31
 8000e14:	40df      	lsrs	r7, r3
 8000e16:	2820      	cmp	r0, #32
 8000e18:	d005      	beq.n	8000e26 <__aeabi_dadd+0x36a>
 8000e1a:	2340      	movs	r3, #64	@ 0x40
 8000e1c:	1a1b      	subs	r3, r3, r0
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	1e53      	subs	r3, r2, #1
 8000e22:	419a      	sbcs	r2, r3
 8000e24:	4317      	orrs	r7, r2
 8000e26:	2400      	movs	r4, #0
 8000e28:	2f00      	cmp	r7, #0
 8000e2a:	d00a      	beq.n	8000e42 <__aeabi_dadd+0x386>
 8000e2c:	077b      	lsls	r3, r7, #29
 8000e2e:	d000      	beq.n	8000e32 <__aeabi_dadd+0x376>
 8000e30:	e6c4      	b.n	8000bbc <__aeabi_dadd+0x100>
 8000e32:	0026      	movs	r6, r4
 8000e34:	e79e      	b.n	8000d74 <__aeabi_dadd+0x2b8>
 8000e36:	464b      	mov	r3, r9
 8000e38:	000c      	movs	r4, r1
 8000e3a:	08d8      	lsrs	r0, r3, #3
 8000e3c:	e79b      	b.n	8000d76 <__aeabi_dadd+0x2ba>
 8000e3e:	2700      	movs	r7, #0
 8000e40:	4c01      	ldr	r4, [pc, #4]	@ (8000e48 <__aeabi_dadd+0x38c>)
 8000e42:	2600      	movs	r6, #0
 8000e44:	e783      	b.n	8000d4e <__aeabi_dadd+0x292>
 8000e46:	46c0      	nop			@ (mov r8, r8)
 8000e48:	000007ff 	.word	0x000007ff
 8000e4c:	ff7fffff 	.word	0xff7fffff
 8000e50:	000007fe 	.word	0x000007fe
 8000e54:	464b      	mov	r3, r9
 8000e56:	0777      	lsls	r7, r6, #29
 8000e58:	08d8      	lsrs	r0, r3, #3
 8000e5a:	4307      	orrs	r7, r0
 8000e5c:	08f0      	lsrs	r0, r6, #3
 8000e5e:	e791      	b.n	8000d84 <__aeabi_dadd+0x2c8>
 8000e60:	4fcd      	ldr	r7, [pc, #820]	@ (8001198 <__aeabi_dadd+0x6dc>)
 8000e62:	1c61      	adds	r1, r4, #1
 8000e64:	4239      	tst	r1, r7
 8000e66:	d16b      	bne.n	8000f40 <__aeabi_dadd+0x484>
 8000e68:	0031      	movs	r1, r6
 8000e6a:	4648      	mov	r0, r9
 8000e6c:	4301      	orrs	r1, r0
 8000e6e:	2c00      	cmp	r4, #0
 8000e70:	d000      	beq.n	8000e74 <__aeabi_dadd+0x3b8>
 8000e72:	e14b      	b.n	800110c <__aeabi_dadd+0x650>
 8000e74:	001f      	movs	r7, r3
 8000e76:	4317      	orrs	r7, r2
 8000e78:	2900      	cmp	r1, #0
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_dadd+0x3c2>
 8000e7c:	e181      	b.n	8001182 <__aeabi_dadd+0x6c6>
 8000e7e:	2f00      	cmp	r7, #0
 8000e80:	d100      	bne.n	8000e84 <__aeabi_dadd+0x3c8>
 8000e82:	e74c      	b.n	8000d1e <__aeabi_dadd+0x262>
 8000e84:	444a      	add	r2, r9
 8000e86:	454a      	cmp	r2, r9
 8000e88:	4180      	sbcs	r0, r0
 8000e8a:	18f6      	adds	r6, r6, r3
 8000e8c:	4240      	negs	r0, r0
 8000e8e:	1836      	adds	r6, r6, r0
 8000e90:	0233      	lsls	r3, r6, #8
 8000e92:	d500      	bpl.n	8000e96 <__aeabi_dadd+0x3da>
 8000e94:	e1b0      	b.n	80011f8 <__aeabi_dadd+0x73c>
 8000e96:	0017      	movs	r7, r2
 8000e98:	4691      	mov	r9, r2
 8000e9a:	4337      	orrs	r7, r6
 8000e9c:	d000      	beq.n	8000ea0 <__aeabi_dadd+0x3e4>
 8000e9e:	e73e      	b.n	8000d1e <__aeabi_dadd+0x262>
 8000ea0:	2600      	movs	r6, #0
 8000ea2:	e754      	b.n	8000d4e <__aeabi_dadd+0x292>
 8000ea4:	4649      	mov	r1, r9
 8000ea6:	1a89      	subs	r1, r1, r2
 8000ea8:	4688      	mov	r8, r1
 8000eaa:	45c1      	cmp	r9, r8
 8000eac:	41bf      	sbcs	r7, r7
 8000eae:	1af1      	subs	r1, r6, r3
 8000eb0:	427f      	negs	r7, r7
 8000eb2:	1bc9      	subs	r1, r1, r7
 8000eb4:	020f      	lsls	r7, r1, #8
 8000eb6:	d461      	bmi.n	8000f7c <__aeabi_dadd+0x4c0>
 8000eb8:	4647      	mov	r7, r8
 8000eba:	430f      	orrs	r7, r1
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_dadd+0x404>
 8000ebe:	e0bd      	b.n	800103c <__aeabi_dadd+0x580>
 8000ec0:	000e      	movs	r6, r1
 8000ec2:	4647      	mov	r7, r8
 8000ec4:	e651      	b.n	8000b6a <__aeabi_dadd+0xae>
 8000ec6:	4cb5      	ldr	r4, [pc, #724]	@ (800119c <__aeabi_dadd+0x6e0>)
 8000ec8:	45a0      	cmp	r8, r4
 8000eca:	d100      	bne.n	8000ece <__aeabi_dadd+0x412>
 8000ecc:	e100      	b.n	80010d0 <__aeabi_dadd+0x614>
 8000ece:	2701      	movs	r7, #1
 8000ed0:	2938      	cmp	r1, #56	@ 0x38
 8000ed2:	dd00      	ble.n	8000ed6 <__aeabi_dadd+0x41a>
 8000ed4:	e6b8      	b.n	8000c48 <__aeabi_dadd+0x18c>
 8000ed6:	2480      	movs	r4, #128	@ 0x80
 8000ed8:	0424      	lsls	r4, r4, #16
 8000eda:	4326      	orrs	r6, r4
 8000edc:	e6a3      	b.n	8000c26 <__aeabi_dadd+0x16a>
 8000ede:	4eb0      	ldr	r6, [pc, #704]	@ (80011a0 <__aeabi_dadd+0x6e4>)
 8000ee0:	1ae4      	subs	r4, r4, r3
 8000ee2:	4016      	ands	r6, r2
 8000ee4:	077b      	lsls	r3, r7, #29
 8000ee6:	d000      	beq.n	8000eea <__aeabi_dadd+0x42e>
 8000ee8:	e73f      	b.n	8000d6a <__aeabi_dadd+0x2ae>
 8000eea:	e743      	b.n	8000d74 <__aeabi_dadd+0x2b8>
 8000eec:	000f      	movs	r7, r1
 8000eee:	0018      	movs	r0, r3
 8000ef0:	3f20      	subs	r7, #32
 8000ef2:	40f8      	lsrs	r0, r7
 8000ef4:	4684      	mov	ip, r0
 8000ef6:	2920      	cmp	r1, #32
 8000ef8:	d003      	beq.n	8000f02 <__aeabi_dadd+0x446>
 8000efa:	2740      	movs	r7, #64	@ 0x40
 8000efc:	1a79      	subs	r1, r7, r1
 8000efe:	408b      	lsls	r3, r1
 8000f00:	431a      	orrs	r2, r3
 8000f02:	1e53      	subs	r3, r2, #1
 8000f04:	419a      	sbcs	r2, r3
 8000f06:	4663      	mov	r3, ip
 8000f08:	0017      	movs	r7, r2
 8000f0a:	431f      	orrs	r7, r3
 8000f0c:	e622      	b.n	8000b54 <__aeabi_dadd+0x98>
 8000f0e:	48a4      	ldr	r0, [pc, #656]	@ (80011a0 <__aeabi_dadd+0x6e4>)
 8000f10:	1ae1      	subs	r1, r4, r3
 8000f12:	4010      	ands	r0, r2
 8000f14:	0747      	lsls	r7, r0, #29
 8000f16:	08c0      	lsrs	r0, r0, #3
 8000f18:	e707      	b.n	8000d2a <__aeabi_dadd+0x26e>
 8000f1a:	0034      	movs	r4, r6
 8000f1c:	4648      	mov	r0, r9
 8000f1e:	4304      	orrs	r4, r0
 8000f20:	d100      	bne.n	8000f24 <__aeabi_dadd+0x468>
 8000f22:	e0fa      	b.n	800111a <__aeabi_dadd+0x65e>
 8000f24:	1e4c      	subs	r4, r1, #1
 8000f26:	2901      	cmp	r1, #1
 8000f28:	d100      	bne.n	8000f2c <__aeabi_dadd+0x470>
 8000f2a:	e0d7      	b.n	80010dc <__aeabi_dadd+0x620>
 8000f2c:	4f9b      	ldr	r7, [pc, #620]	@ (800119c <__aeabi_dadd+0x6e0>)
 8000f2e:	42b9      	cmp	r1, r7
 8000f30:	d100      	bne.n	8000f34 <__aeabi_dadd+0x478>
 8000f32:	e0e2      	b.n	80010fa <__aeabi_dadd+0x63e>
 8000f34:	2701      	movs	r7, #1
 8000f36:	2c38      	cmp	r4, #56	@ 0x38
 8000f38:	dd00      	ble.n	8000f3c <__aeabi_dadd+0x480>
 8000f3a:	e74f      	b.n	8000ddc <__aeabi_dadd+0x320>
 8000f3c:	0021      	movs	r1, r4
 8000f3e:	e73c      	b.n	8000dba <__aeabi_dadd+0x2fe>
 8000f40:	4c96      	ldr	r4, [pc, #600]	@ (800119c <__aeabi_dadd+0x6e0>)
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dadd+0x48c>
 8000f46:	e0dd      	b.n	8001104 <__aeabi_dadd+0x648>
 8000f48:	444a      	add	r2, r9
 8000f4a:	454a      	cmp	r2, r9
 8000f4c:	4180      	sbcs	r0, r0
 8000f4e:	18f3      	adds	r3, r6, r3
 8000f50:	4240      	negs	r0, r0
 8000f52:	1818      	adds	r0, r3, r0
 8000f54:	07c7      	lsls	r7, r0, #31
 8000f56:	0852      	lsrs	r2, r2, #1
 8000f58:	4317      	orrs	r7, r2
 8000f5a:	0846      	lsrs	r6, r0, #1
 8000f5c:	0752      	lsls	r2, r2, #29
 8000f5e:	d005      	beq.n	8000f6c <__aeabi_dadd+0x4b0>
 8000f60:	220f      	movs	r2, #15
 8000f62:	000c      	movs	r4, r1
 8000f64:	403a      	ands	r2, r7
 8000f66:	2a04      	cmp	r2, #4
 8000f68:	d000      	beq.n	8000f6c <__aeabi_dadd+0x4b0>
 8000f6a:	e62c      	b.n	8000bc6 <__aeabi_dadd+0x10a>
 8000f6c:	0776      	lsls	r6, r6, #29
 8000f6e:	08ff      	lsrs	r7, r7, #3
 8000f70:	4337      	orrs	r7, r6
 8000f72:	0900      	lsrs	r0, r0, #4
 8000f74:	e6d9      	b.n	8000d2a <__aeabi_dadd+0x26e>
 8000f76:	2700      	movs	r7, #0
 8000f78:	2600      	movs	r6, #0
 8000f7a:	e6e8      	b.n	8000d4e <__aeabi_dadd+0x292>
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	1a57      	subs	r7, r2, r1
 8000f80:	42ba      	cmp	r2, r7
 8000f82:	4192      	sbcs	r2, r2
 8000f84:	1b9e      	subs	r6, r3, r6
 8000f86:	4252      	negs	r2, r2
 8000f88:	4665      	mov	r5, ip
 8000f8a:	1ab6      	subs	r6, r6, r2
 8000f8c:	e5ed      	b.n	8000b6a <__aeabi_dadd+0xae>
 8000f8e:	2900      	cmp	r1, #0
 8000f90:	d000      	beq.n	8000f94 <__aeabi_dadd+0x4d8>
 8000f92:	e0c6      	b.n	8001122 <__aeabi_dadd+0x666>
 8000f94:	2f00      	cmp	r7, #0
 8000f96:	d167      	bne.n	8001068 <__aeabi_dadd+0x5ac>
 8000f98:	2680      	movs	r6, #128	@ 0x80
 8000f9a:	2500      	movs	r5, #0
 8000f9c:	4c7f      	ldr	r4, [pc, #508]	@ (800119c <__aeabi_dadd+0x6e0>)
 8000f9e:	0336      	lsls	r6, r6, #12
 8000fa0:	e6d5      	b.n	8000d4e <__aeabi_dadd+0x292>
 8000fa2:	4665      	mov	r5, ip
 8000fa4:	000c      	movs	r4, r1
 8000fa6:	001e      	movs	r6, r3
 8000fa8:	08d0      	lsrs	r0, r2, #3
 8000faa:	e6e4      	b.n	8000d76 <__aeabi_dadd+0x2ba>
 8000fac:	444a      	add	r2, r9
 8000fae:	454a      	cmp	r2, r9
 8000fb0:	4180      	sbcs	r0, r0
 8000fb2:	18f3      	adds	r3, r6, r3
 8000fb4:	4240      	negs	r0, r0
 8000fb6:	1818      	adds	r0, r3, r0
 8000fb8:	0011      	movs	r1, r2
 8000fba:	0203      	lsls	r3, r0, #8
 8000fbc:	d400      	bmi.n	8000fc0 <__aeabi_dadd+0x504>
 8000fbe:	e096      	b.n	80010ee <__aeabi_dadd+0x632>
 8000fc0:	4b77      	ldr	r3, [pc, #476]	@ (80011a0 <__aeabi_dadd+0x6e4>)
 8000fc2:	0849      	lsrs	r1, r1, #1
 8000fc4:	4018      	ands	r0, r3
 8000fc6:	07c3      	lsls	r3, r0, #31
 8000fc8:	430b      	orrs	r3, r1
 8000fca:	0844      	lsrs	r4, r0, #1
 8000fcc:	0749      	lsls	r1, r1, #29
 8000fce:	d100      	bne.n	8000fd2 <__aeabi_dadd+0x516>
 8000fd0:	e129      	b.n	8001226 <__aeabi_dadd+0x76a>
 8000fd2:	220f      	movs	r2, #15
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	2a04      	cmp	r2, #4
 8000fd8:	d100      	bne.n	8000fdc <__aeabi_dadd+0x520>
 8000fda:	e0ea      	b.n	80011b2 <__aeabi_dadd+0x6f6>
 8000fdc:	1d1f      	adds	r7, r3, #4
 8000fde:	429f      	cmp	r7, r3
 8000fe0:	41b6      	sbcs	r6, r6
 8000fe2:	4276      	negs	r6, r6
 8000fe4:	1936      	adds	r6, r6, r4
 8000fe6:	2402      	movs	r4, #2
 8000fe8:	e6c4      	b.n	8000d74 <__aeabi_dadd+0x2b8>
 8000fea:	4649      	mov	r1, r9
 8000fec:	1a8f      	subs	r7, r1, r2
 8000fee:	45b9      	cmp	r9, r7
 8000ff0:	4180      	sbcs	r0, r0
 8000ff2:	1af6      	subs	r6, r6, r3
 8000ff4:	4240      	negs	r0, r0
 8000ff6:	1a36      	subs	r6, r6, r0
 8000ff8:	0233      	lsls	r3, r6, #8
 8000ffa:	d406      	bmi.n	800100a <__aeabi_dadd+0x54e>
 8000ffc:	0773      	lsls	r3, r6, #29
 8000ffe:	08ff      	lsrs	r7, r7, #3
 8001000:	2101      	movs	r1, #1
 8001002:	431f      	orrs	r7, r3
 8001004:	08f0      	lsrs	r0, r6, #3
 8001006:	e690      	b.n	8000d2a <__aeabi_dadd+0x26e>
 8001008:	4665      	mov	r5, ip
 800100a:	2401      	movs	r4, #1
 800100c:	e5ab      	b.n	8000b66 <__aeabi_dadd+0xaa>
 800100e:	464b      	mov	r3, r9
 8001010:	0777      	lsls	r7, r6, #29
 8001012:	08d8      	lsrs	r0, r3, #3
 8001014:	4307      	orrs	r7, r0
 8001016:	08f0      	lsrs	r0, r6, #3
 8001018:	e6b4      	b.n	8000d84 <__aeabi_dadd+0x2c8>
 800101a:	000f      	movs	r7, r1
 800101c:	0018      	movs	r0, r3
 800101e:	3f20      	subs	r7, #32
 8001020:	40f8      	lsrs	r0, r7
 8001022:	4684      	mov	ip, r0
 8001024:	2920      	cmp	r1, #32
 8001026:	d003      	beq.n	8001030 <__aeabi_dadd+0x574>
 8001028:	2740      	movs	r7, #64	@ 0x40
 800102a:	1a79      	subs	r1, r7, r1
 800102c:	408b      	lsls	r3, r1
 800102e:	431a      	orrs	r2, r3
 8001030:	1e53      	subs	r3, r2, #1
 8001032:	419a      	sbcs	r2, r3
 8001034:	4663      	mov	r3, ip
 8001036:	0017      	movs	r7, r2
 8001038:	431f      	orrs	r7, r3
 800103a:	e635      	b.n	8000ca8 <__aeabi_dadd+0x1ec>
 800103c:	2500      	movs	r5, #0
 800103e:	2400      	movs	r4, #0
 8001040:	2600      	movs	r6, #0
 8001042:	e684      	b.n	8000d4e <__aeabi_dadd+0x292>
 8001044:	000c      	movs	r4, r1
 8001046:	0035      	movs	r5, r6
 8001048:	3c20      	subs	r4, #32
 800104a:	40e5      	lsrs	r5, r4
 800104c:	2920      	cmp	r1, #32
 800104e:	d005      	beq.n	800105c <__aeabi_dadd+0x5a0>
 8001050:	2440      	movs	r4, #64	@ 0x40
 8001052:	1a61      	subs	r1, r4, r1
 8001054:	408e      	lsls	r6, r1
 8001056:	4649      	mov	r1, r9
 8001058:	4331      	orrs	r1, r6
 800105a:	4689      	mov	r9, r1
 800105c:	4648      	mov	r0, r9
 800105e:	1e41      	subs	r1, r0, #1
 8001060:	4188      	sbcs	r0, r1
 8001062:	0007      	movs	r7, r0
 8001064:	432f      	orrs	r7, r5
 8001066:	e5ef      	b.n	8000c48 <__aeabi_dadd+0x18c>
 8001068:	08d2      	lsrs	r2, r2, #3
 800106a:	075f      	lsls	r7, r3, #29
 800106c:	4665      	mov	r5, ip
 800106e:	4317      	orrs	r7, r2
 8001070:	08d8      	lsrs	r0, r3, #3
 8001072:	e687      	b.n	8000d84 <__aeabi_dadd+0x2c8>
 8001074:	1a17      	subs	r7, r2, r0
 8001076:	42ba      	cmp	r2, r7
 8001078:	4192      	sbcs	r2, r2
 800107a:	1b9e      	subs	r6, r3, r6
 800107c:	4252      	negs	r2, r2
 800107e:	1ab6      	subs	r6, r6, r2
 8001080:	0233      	lsls	r3, r6, #8
 8001082:	d4c1      	bmi.n	8001008 <__aeabi_dadd+0x54c>
 8001084:	0773      	lsls	r3, r6, #29
 8001086:	08ff      	lsrs	r7, r7, #3
 8001088:	4665      	mov	r5, ip
 800108a:	2101      	movs	r1, #1
 800108c:	431f      	orrs	r7, r3
 800108e:	08f0      	lsrs	r0, r6, #3
 8001090:	e64b      	b.n	8000d2a <__aeabi_dadd+0x26e>
 8001092:	2f00      	cmp	r7, #0
 8001094:	d07b      	beq.n	800118e <__aeabi_dadd+0x6d2>
 8001096:	4665      	mov	r5, ip
 8001098:	001e      	movs	r6, r3
 800109a:	4691      	mov	r9, r2
 800109c:	e63f      	b.n	8000d1e <__aeabi_dadd+0x262>
 800109e:	1a81      	subs	r1, r0, r2
 80010a0:	4688      	mov	r8, r1
 80010a2:	45c1      	cmp	r9, r8
 80010a4:	41a4      	sbcs	r4, r4
 80010a6:	1af1      	subs	r1, r6, r3
 80010a8:	4264      	negs	r4, r4
 80010aa:	1b09      	subs	r1, r1, r4
 80010ac:	2480      	movs	r4, #128	@ 0x80
 80010ae:	0424      	lsls	r4, r4, #16
 80010b0:	4221      	tst	r1, r4
 80010b2:	d077      	beq.n	80011a4 <__aeabi_dadd+0x6e8>
 80010b4:	1a10      	subs	r0, r2, r0
 80010b6:	4282      	cmp	r2, r0
 80010b8:	4192      	sbcs	r2, r2
 80010ba:	0007      	movs	r7, r0
 80010bc:	1b9e      	subs	r6, r3, r6
 80010be:	4252      	negs	r2, r2
 80010c0:	1ab6      	subs	r6, r6, r2
 80010c2:	4337      	orrs	r7, r6
 80010c4:	d000      	beq.n	80010c8 <__aeabi_dadd+0x60c>
 80010c6:	e0a0      	b.n	800120a <__aeabi_dadd+0x74e>
 80010c8:	4665      	mov	r5, ip
 80010ca:	2400      	movs	r4, #0
 80010cc:	2600      	movs	r6, #0
 80010ce:	e63e      	b.n	8000d4e <__aeabi_dadd+0x292>
 80010d0:	075f      	lsls	r7, r3, #29
 80010d2:	08d2      	lsrs	r2, r2, #3
 80010d4:	4665      	mov	r5, ip
 80010d6:	4317      	orrs	r7, r2
 80010d8:	08d8      	lsrs	r0, r3, #3
 80010da:	e653      	b.n	8000d84 <__aeabi_dadd+0x2c8>
 80010dc:	1881      	adds	r1, r0, r2
 80010de:	4291      	cmp	r1, r2
 80010e0:	4192      	sbcs	r2, r2
 80010e2:	18f0      	adds	r0, r6, r3
 80010e4:	4252      	negs	r2, r2
 80010e6:	1880      	adds	r0, r0, r2
 80010e8:	0203      	lsls	r3, r0, #8
 80010ea:	d500      	bpl.n	80010ee <__aeabi_dadd+0x632>
 80010ec:	e768      	b.n	8000fc0 <__aeabi_dadd+0x504>
 80010ee:	0747      	lsls	r7, r0, #29
 80010f0:	08c9      	lsrs	r1, r1, #3
 80010f2:	430f      	orrs	r7, r1
 80010f4:	08c0      	lsrs	r0, r0, #3
 80010f6:	2101      	movs	r1, #1
 80010f8:	e617      	b.n	8000d2a <__aeabi_dadd+0x26e>
 80010fa:	08d2      	lsrs	r2, r2, #3
 80010fc:	075f      	lsls	r7, r3, #29
 80010fe:	4317      	orrs	r7, r2
 8001100:	08d8      	lsrs	r0, r3, #3
 8001102:	e63f      	b.n	8000d84 <__aeabi_dadd+0x2c8>
 8001104:	000c      	movs	r4, r1
 8001106:	2600      	movs	r6, #0
 8001108:	2700      	movs	r7, #0
 800110a:	e620      	b.n	8000d4e <__aeabi_dadd+0x292>
 800110c:	2900      	cmp	r1, #0
 800110e:	d156      	bne.n	80011be <__aeabi_dadd+0x702>
 8001110:	075f      	lsls	r7, r3, #29
 8001112:	08d2      	lsrs	r2, r2, #3
 8001114:	4317      	orrs	r7, r2
 8001116:	08d8      	lsrs	r0, r3, #3
 8001118:	e634      	b.n	8000d84 <__aeabi_dadd+0x2c8>
 800111a:	000c      	movs	r4, r1
 800111c:	001e      	movs	r6, r3
 800111e:	08d0      	lsrs	r0, r2, #3
 8001120:	e629      	b.n	8000d76 <__aeabi_dadd+0x2ba>
 8001122:	08c1      	lsrs	r1, r0, #3
 8001124:	0770      	lsls	r0, r6, #29
 8001126:	4301      	orrs	r1, r0
 8001128:	08f0      	lsrs	r0, r6, #3
 800112a:	2f00      	cmp	r7, #0
 800112c:	d062      	beq.n	80011f4 <__aeabi_dadd+0x738>
 800112e:	2480      	movs	r4, #128	@ 0x80
 8001130:	0324      	lsls	r4, r4, #12
 8001132:	4220      	tst	r0, r4
 8001134:	d007      	beq.n	8001146 <__aeabi_dadd+0x68a>
 8001136:	08de      	lsrs	r6, r3, #3
 8001138:	4226      	tst	r6, r4
 800113a:	d104      	bne.n	8001146 <__aeabi_dadd+0x68a>
 800113c:	4665      	mov	r5, ip
 800113e:	0030      	movs	r0, r6
 8001140:	08d1      	lsrs	r1, r2, #3
 8001142:	075b      	lsls	r3, r3, #29
 8001144:	4319      	orrs	r1, r3
 8001146:	0f4f      	lsrs	r7, r1, #29
 8001148:	00c9      	lsls	r1, r1, #3
 800114a:	08c9      	lsrs	r1, r1, #3
 800114c:	077f      	lsls	r7, r7, #29
 800114e:	430f      	orrs	r7, r1
 8001150:	e618      	b.n	8000d84 <__aeabi_dadd+0x2c8>
 8001152:	000c      	movs	r4, r1
 8001154:	0030      	movs	r0, r6
 8001156:	3c20      	subs	r4, #32
 8001158:	40e0      	lsrs	r0, r4
 800115a:	4684      	mov	ip, r0
 800115c:	2920      	cmp	r1, #32
 800115e:	d005      	beq.n	800116c <__aeabi_dadd+0x6b0>
 8001160:	2440      	movs	r4, #64	@ 0x40
 8001162:	1a61      	subs	r1, r4, r1
 8001164:	408e      	lsls	r6, r1
 8001166:	4649      	mov	r1, r9
 8001168:	4331      	orrs	r1, r6
 800116a:	4689      	mov	r9, r1
 800116c:	4648      	mov	r0, r9
 800116e:	1e41      	subs	r1, r0, #1
 8001170:	4188      	sbcs	r0, r1
 8001172:	4661      	mov	r1, ip
 8001174:	0007      	movs	r7, r0
 8001176:	430f      	orrs	r7, r1
 8001178:	e630      	b.n	8000ddc <__aeabi_dadd+0x320>
 800117a:	2120      	movs	r1, #32
 800117c:	2700      	movs	r7, #0
 800117e:	1a09      	subs	r1, r1, r0
 8001180:	e50e      	b.n	8000ba0 <__aeabi_dadd+0xe4>
 8001182:	001e      	movs	r6, r3
 8001184:	2f00      	cmp	r7, #0
 8001186:	d000      	beq.n	800118a <__aeabi_dadd+0x6ce>
 8001188:	e522      	b.n	8000bd0 <__aeabi_dadd+0x114>
 800118a:	2400      	movs	r4, #0
 800118c:	e758      	b.n	8001040 <__aeabi_dadd+0x584>
 800118e:	2500      	movs	r5, #0
 8001190:	2400      	movs	r4, #0
 8001192:	2600      	movs	r6, #0
 8001194:	e5db      	b.n	8000d4e <__aeabi_dadd+0x292>
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	000007fe 	.word	0x000007fe
 800119c:	000007ff 	.word	0x000007ff
 80011a0:	ff7fffff 	.word	0xff7fffff
 80011a4:	4647      	mov	r7, r8
 80011a6:	430f      	orrs	r7, r1
 80011a8:	d100      	bne.n	80011ac <__aeabi_dadd+0x6f0>
 80011aa:	e747      	b.n	800103c <__aeabi_dadd+0x580>
 80011ac:	000e      	movs	r6, r1
 80011ae:	46c1      	mov	r9, r8
 80011b0:	e5b5      	b.n	8000d1e <__aeabi_dadd+0x262>
 80011b2:	08df      	lsrs	r7, r3, #3
 80011b4:	0764      	lsls	r4, r4, #29
 80011b6:	2102      	movs	r1, #2
 80011b8:	4327      	orrs	r7, r4
 80011ba:	0900      	lsrs	r0, r0, #4
 80011bc:	e5b5      	b.n	8000d2a <__aeabi_dadd+0x26e>
 80011be:	0019      	movs	r1, r3
 80011c0:	08c0      	lsrs	r0, r0, #3
 80011c2:	0777      	lsls	r7, r6, #29
 80011c4:	4307      	orrs	r7, r0
 80011c6:	4311      	orrs	r1, r2
 80011c8:	08f0      	lsrs	r0, r6, #3
 80011ca:	2900      	cmp	r1, #0
 80011cc:	d100      	bne.n	80011d0 <__aeabi_dadd+0x714>
 80011ce:	e5d9      	b.n	8000d84 <__aeabi_dadd+0x2c8>
 80011d0:	2180      	movs	r1, #128	@ 0x80
 80011d2:	0309      	lsls	r1, r1, #12
 80011d4:	4208      	tst	r0, r1
 80011d6:	d007      	beq.n	80011e8 <__aeabi_dadd+0x72c>
 80011d8:	08dc      	lsrs	r4, r3, #3
 80011da:	420c      	tst	r4, r1
 80011dc:	d104      	bne.n	80011e8 <__aeabi_dadd+0x72c>
 80011de:	08d2      	lsrs	r2, r2, #3
 80011e0:	075b      	lsls	r3, r3, #29
 80011e2:	431a      	orrs	r2, r3
 80011e4:	0017      	movs	r7, r2
 80011e6:	0020      	movs	r0, r4
 80011e8:	0f7b      	lsrs	r3, r7, #29
 80011ea:	00ff      	lsls	r7, r7, #3
 80011ec:	08ff      	lsrs	r7, r7, #3
 80011ee:	075b      	lsls	r3, r3, #29
 80011f0:	431f      	orrs	r7, r3
 80011f2:	e5c7      	b.n	8000d84 <__aeabi_dadd+0x2c8>
 80011f4:	000f      	movs	r7, r1
 80011f6:	e5c5      	b.n	8000d84 <__aeabi_dadd+0x2c8>
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <__aeabi_dadd+0x788>)
 80011fa:	08d2      	lsrs	r2, r2, #3
 80011fc:	4033      	ands	r3, r6
 80011fe:	075f      	lsls	r7, r3, #29
 8001200:	025b      	lsls	r3, r3, #9
 8001202:	2401      	movs	r4, #1
 8001204:	4317      	orrs	r7, r2
 8001206:	0b1e      	lsrs	r6, r3, #12
 8001208:	e5a1      	b.n	8000d4e <__aeabi_dadd+0x292>
 800120a:	4226      	tst	r6, r4
 800120c:	d012      	beq.n	8001234 <__aeabi_dadd+0x778>
 800120e:	4b0d      	ldr	r3, [pc, #52]	@ (8001244 <__aeabi_dadd+0x788>)
 8001210:	4665      	mov	r5, ip
 8001212:	0002      	movs	r2, r0
 8001214:	2401      	movs	r4, #1
 8001216:	401e      	ands	r6, r3
 8001218:	e4e6      	b.n	8000be8 <__aeabi_dadd+0x12c>
 800121a:	0021      	movs	r1, r4
 800121c:	e585      	b.n	8000d2a <__aeabi_dadd+0x26e>
 800121e:	0017      	movs	r7, r2
 8001220:	e5a8      	b.n	8000d74 <__aeabi_dadd+0x2b8>
 8001222:	003a      	movs	r2, r7
 8001224:	e4d4      	b.n	8000bd0 <__aeabi_dadd+0x114>
 8001226:	08db      	lsrs	r3, r3, #3
 8001228:	0764      	lsls	r4, r4, #29
 800122a:	431c      	orrs	r4, r3
 800122c:	0027      	movs	r7, r4
 800122e:	2102      	movs	r1, #2
 8001230:	0900      	lsrs	r0, r0, #4
 8001232:	e57a      	b.n	8000d2a <__aeabi_dadd+0x26e>
 8001234:	08c0      	lsrs	r0, r0, #3
 8001236:	0777      	lsls	r7, r6, #29
 8001238:	4307      	orrs	r7, r0
 800123a:	4665      	mov	r5, ip
 800123c:	2100      	movs	r1, #0
 800123e:	08f0      	lsrs	r0, r6, #3
 8001240:	e573      	b.n	8000d2a <__aeabi_dadd+0x26e>
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	ff7fffff 	.word	0xff7fffff

08001248 <__aeabi_ddiv>:
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	46de      	mov	lr, fp
 800124c:	4645      	mov	r5, r8
 800124e:	4657      	mov	r7, sl
 8001250:	464e      	mov	r6, r9
 8001252:	b5e0      	push	{r5, r6, r7, lr}
 8001254:	b087      	sub	sp, #28
 8001256:	9200      	str	r2, [sp, #0]
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	030b      	lsls	r3, r1, #12
 800125c:	0b1b      	lsrs	r3, r3, #12
 800125e:	469b      	mov	fp, r3
 8001260:	0fca      	lsrs	r2, r1, #31
 8001262:	004b      	lsls	r3, r1, #1
 8001264:	0004      	movs	r4, r0
 8001266:	4680      	mov	r8, r0
 8001268:	0d5b      	lsrs	r3, r3, #21
 800126a:	9202      	str	r2, [sp, #8]
 800126c:	d100      	bne.n	8001270 <__aeabi_ddiv+0x28>
 800126e:	e098      	b.n	80013a2 <__aeabi_ddiv+0x15a>
 8001270:	4a7c      	ldr	r2, [pc, #496]	@ (8001464 <__aeabi_ddiv+0x21c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d037      	beq.n	80012e6 <__aeabi_ddiv+0x9e>
 8001276:	4659      	mov	r1, fp
 8001278:	0f42      	lsrs	r2, r0, #29
 800127a:	00c9      	lsls	r1, r1, #3
 800127c:	430a      	orrs	r2, r1
 800127e:	2180      	movs	r1, #128	@ 0x80
 8001280:	0409      	lsls	r1, r1, #16
 8001282:	4311      	orrs	r1, r2
 8001284:	00c2      	lsls	r2, r0, #3
 8001286:	4690      	mov	r8, r2
 8001288:	4a77      	ldr	r2, [pc, #476]	@ (8001468 <__aeabi_ddiv+0x220>)
 800128a:	4689      	mov	r9, r1
 800128c:	4692      	mov	sl, r2
 800128e:	449a      	add	sl, r3
 8001290:	2300      	movs	r3, #0
 8001292:	2400      	movs	r4, #0
 8001294:	9303      	str	r3, [sp, #12]
 8001296:	9e00      	ldr	r6, [sp, #0]
 8001298:	9f01      	ldr	r7, [sp, #4]
 800129a:	033b      	lsls	r3, r7, #12
 800129c:	0b1b      	lsrs	r3, r3, #12
 800129e:	469b      	mov	fp, r3
 80012a0:	007b      	lsls	r3, r7, #1
 80012a2:	0030      	movs	r0, r6
 80012a4:	0d5b      	lsrs	r3, r3, #21
 80012a6:	0ffd      	lsrs	r5, r7, #31
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d059      	beq.n	8001360 <__aeabi_ddiv+0x118>
 80012ac:	4a6d      	ldr	r2, [pc, #436]	@ (8001464 <__aeabi_ddiv+0x21c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d048      	beq.n	8001344 <__aeabi_ddiv+0xfc>
 80012b2:	4659      	mov	r1, fp
 80012b4:	0f72      	lsrs	r2, r6, #29
 80012b6:	00c9      	lsls	r1, r1, #3
 80012b8:	430a      	orrs	r2, r1
 80012ba:	2180      	movs	r1, #128	@ 0x80
 80012bc:	0409      	lsls	r1, r1, #16
 80012be:	4311      	orrs	r1, r2
 80012c0:	468b      	mov	fp, r1
 80012c2:	4969      	ldr	r1, [pc, #420]	@ (8001468 <__aeabi_ddiv+0x220>)
 80012c4:	00f2      	lsls	r2, r6, #3
 80012c6:	468c      	mov	ip, r1
 80012c8:	4651      	mov	r1, sl
 80012ca:	4463      	add	r3, ip
 80012cc:	1acb      	subs	r3, r1, r3
 80012ce:	469a      	mov	sl, r3
 80012d0:	2100      	movs	r1, #0
 80012d2:	9e02      	ldr	r6, [sp, #8]
 80012d4:	406e      	eors	r6, r5
 80012d6:	b2f6      	uxtb	r6, r6
 80012d8:	2c0f      	cmp	r4, #15
 80012da:	d900      	bls.n	80012de <__aeabi_ddiv+0x96>
 80012dc:	e0ce      	b.n	800147c <__aeabi_ddiv+0x234>
 80012de:	4b63      	ldr	r3, [pc, #396]	@ (800146c <__aeabi_ddiv+0x224>)
 80012e0:	00a4      	lsls	r4, r4, #2
 80012e2:	591b      	ldr	r3, [r3, r4]
 80012e4:	469f      	mov	pc, r3
 80012e6:	465a      	mov	r2, fp
 80012e8:	4302      	orrs	r2, r0
 80012ea:	4691      	mov	r9, r2
 80012ec:	d000      	beq.n	80012f0 <__aeabi_ddiv+0xa8>
 80012ee:	e090      	b.n	8001412 <__aeabi_ddiv+0x1ca>
 80012f0:	469a      	mov	sl, r3
 80012f2:	2302      	movs	r3, #2
 80012f4:	4690      	mov	r8, r2
 80012f6:	2408      	movs	r4, #8
 80012f8:	9303      	str	r3, [sp, #12]
 80012fa:	e7cc      	b.n	8001296 <__aeabi_ddiv+0x4e>
 80012fc:	46cb      	mov	fp, r9
 80012fe:	4642      	mov	r2, r8
 8001300:	9d02      	ldr	r5, [sp, #8]
 8001302:	9903      	ldr	r1, [sp, #12]
 8001304:	2902      	cmp	r1, #2
 8001306:	d100      	bne.n	800130a <__aeabi_ddiv+0xc2>
 8001308:	e1de      	b.n	80016c8 <__aeabi_ddiv+0x480>
 800130a:	2903      	cmp	r1, #3
 800130c:	d100      	bne.n	8001310 <__aeabi_ddiv+0xc8>
 800130e:	e08d      	b.n	800142c <__aeabi_ddiv+0x1e4>
 8001310:	2901      	cmp	r1, #1
 8001312:	d000      	beq.n	8001316 <__aeabi_ddiv+0xce>
 8001314:	e179      	b.n	800160a <__aeabi_ddiv+0x3c2>
 8001316:	002e      	movs	r6, r5
 8001318:	2200      	movs	r2, #0
 800131a:	2300      	movs	r3, #0
 800131c:	2400      	movs	r4, #0
 800131e:	4690      	mov	r8, r2
 8001320:	051b      	lsls	r3, r3, #20
 8001322:	4323      	orrs	r3, r4
 8001324:	07f6      	lsls	r6, r6, #31
 8001326:	4333      	orrs	r3, r6
 8001328:	4640      	mov	r0, r8
 800132a:	0019      	movs	r1, r3
 800132c:	b007      	add	sp, #28
 800132e:	bcf0      	pop	{r4, r5, r6, r7}
 8001330:	46bb      	mov	fp, r7
 8001332:	46b2      	mov	sl, r6
 8001334:	46a9      	mov	r9, r5
 8001336:	46a0      	mov	r8, r4
 8001338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800133a:	2200      	movs	r2, #0
 800133c:	2400      	movs	r4, #0
 800133e:	4690      	mov	r8, r2
 8001340:	4b48      	ldr	r3, [pc, #288]	@ (8001464 <__aeabi_ddiv+0x21c>)
 8001342:	e7ed      	b.n	8001320 <__aeabi_ddiv+0xd8>
 8001344:	465a      	mov	r2, fp
 8001346:	9b00      	ldr	r3, [sp, #0]
 8001348:	431a      	orrs	r2, r3
 800134a:	4b49      	ldr	r3, [pc, #292]	@ (8001470 <__aeabi_ddiv+0x228>)
 800134c:	469c      	mov	ip, r3
 800134e:	44e2      	add	sl, ip
 8001350:	2a00      	cmp	r2, #0
 8001352:	d159      	bne.n	8001408 <__aeabi_ddiv+0x1c0>
 8001354:	2302      	movs	r3, #2
 8001356:	431c      	orrs	r4, r3
 8001358:	2300      	movs	r3, #0
 800135a:	2102      	movs	r1, #2
 800135c:	469b      	mov	fp, r3
 800135e:	e7b8      	b.n	80012d2 <__aeabi_ddiv+0x8a>
 8001360:	465a      	mov	r2, fp
 8001362:	9b00      	ldr	r3, [sp, #0]
 8001364:	431a      	orrs	r2, r3
 8001366:	d049      	beq.n	80013fc <__aeabi_ddiv+0x1b4>
 8001368:	465b      	mov	r3, fp
 800136a:	2b00      	cmp	r3, #0
 800136c:	d100      	bne.n	8001370 <__aeabi_ddiv+0x128>
 800136e:	e19c      	b.n	80016aa <__aeabi_ddiv+0x462>
 8001370:	4658      	mov	r0, fp
 8001372:	f001 fc0d 	bl	8002b90 <__clzsi2>
 8001376:	0002      	movs	r2, r0
 8001378:	0003      	movs	r3, r0
 800137a:	3a0b      	subs	r2, #11
 800137c:	271d      	movs	r7, #29
 800137e:	9e00      	ldr	r6, [sp, #0]
 8001380:	1aba      	subs	r2, r7, r2
 8001382:	0019      	movs	r1, r3
 8001384:	4658      	mov	r0, fp
 8001386:	40d6      	lsrs	r6, r2
 8001388:	3908      	subs	r1, #8
 800138a:	4088      	lsls	r0, r1
 800138c:	0032      	movs	r2, r6
 800138e:	4302      	orrs	r2, r0
 8001390:	4693      	mov	fp, r2
 8001392:	9a00      	ldr	r2, [sp, #0]
 8001394:	408a      	lsls	r2, r1
 8001396:	4937      	ldr	r1, [pc, #220]	@ (8001474 <__aeabi_ddiv+0x22c>)
 8001398:	4453      	add	r3, sl
 800139a:	468a      	mov	sl, r1
 800139c:	2100      	movs	r1, #0
 800139e:	449a      	add	sl, r3
 80013a0:	e797      	b.n	80012d2 <__aeabi_ddiv+0x8a>
 80013a2:	465b      	mov	r3, fp
 80013a4:	4303      	orrs	r3, r0
 80013a6:	4699      	mov	r9, r3
 80013a8:	d021      	beq.n	80013ee <__aeabi_ddiv+0x1a6>
 80013aa:	465b      	mov	r3, fp
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d100      	bne.n	80013b2 <__aeabi_ddiv+0x16a>
 80013b0:	e169      	b.n	8001686 <__aeabi_ddiv+0x43e>
 80013b2:	4658      	mov	r0, fp
 80013b4:	f001 fbec 	bl	8002b90 <__clzsi2>
 80013b8:	230b      	movs	r3, #11
 80013ba:	425b      	negs	r3, r3
 80013bc:	469c      	mov	ip, r3
 80013be:	0002      	movs	r2, r0
 80013c0:	4484      	add	ip, r0
 80013c2:	4666      	mov	r6, ip
 80013c4:	231d      	movs	r3, #29
 80013c6:	1b9b      	subs	r3, r3, r6
 80013c8:	0026      	movs	r6, r4
 80013ca:	0011      	movs	r1, r2
 80013cc:	4658      	mov	r0, fp
 80013ce:	40de      	lsrs	r6, r3
 80013d0:	3908      	subs	r1, #8
 80013d2:	4088      	lsls	r0, r1
 80013d4:	0033      	movs	r3, r6
 80013d6:	4303      	orrs	r3, r0
 80013d8:	4699      	mov	r9, r3
 80013da:	0023      	movs	r3, r4
 80013dc:	408b      	lsls	r3, r1
 80013de:	4698      	mov	r8, r3
 80013e0:	4b25      	ldr	r3, [pc, #148]	@ (8001478 <__aeabi_ddiv+0x230>)
 80013e2:	2400      	movs	r4, #0
 80013e4:	1a9b      	subs	r3, r3, r2
 80013e6:	469a      	mov	sl, r3
 80013e8:	2300      	movs	r3, #0
 80013ea:	9303      	str	r3, [sp, #12]
 80013ec:	e753      	b.n	8001296 <__aeabi_ddiv+0x4e>
 80013ee:	2300      	movs	r3, #0
 80013f0:	4698      	mov	r8, r3
 80013f2:	469a      	mov	sl, r3
 80013f4:	3301      	adds	r3, #1
 80013f6:	2404      	movs	r4, #4
 80013f8:	9303      	str	r3, [sp, #12]
 80013fa:	e74c      	b.n	8001296 <__aeabi_ddiv+0x4e>
 80013fc:	2301      	movs	r3, #1
 80013fe:	431c      	orrs	r4, r3
 8001400:	2300      	movs	r3, #0
 8001402:	2101      	movs	r1, #1
 8001404:	469b      	mov	fp, r3
 8001406:	e764      	b.n	80012d2 <__aeabi_ddiv+0x8a>
 8001408:	2303      	movs	r3, #3
 800140a:	0032      	movs	r2, r6
 800140c:	2103      	movs	r1, #3
 800140e:	431c      	orrs	r4, r3
 8001410:	e75f      	b.n	80012d2 <__aeabi_ddiv+0x8a>
 8001412:	469a      	mov	sl, r3
 8001414:	2303      	movs	r3, #3
 8001416:	46d9      	mov	r9, fp
 8001418:	240c      	movs	r4, #12
 800141a:	9303      	str	r3, [sp, #12]
 800141c:	e73b      	b.n	8001296 <__aeabi_ddiv+0x4e>
 800141e:	2300      	movs	r3, #0
 8001420:	2480      	movs	r4, #128	@ 0x80
 8001422:	4698      	mov	r8, r3
 8001424:	2600      	movs	r6, #0
 8001426:	4b0f      	ldr	r3, [pc, #60]	@ (8001464 <__aeabi_ddiv+0x21c>)
 8001428:	0324      	lsls	r4, r4, #12
 800142a:	e779      	b.n	8001320 <__aeabi_ddiv+0xd8>
 800142c:	2480      	movs	r4, #128	@ 0x80
 800142e:	465b      	mov	r3, fp
 8001430:	0324      	lsls	r4, r4, #12
 8001432:	431c      	orrs	r4, r3
 8001434:	0324      	lsls	r4, r4, #12
 8001436:	002e      	movs	r6, r5
 8001438:	4690      	mov	r8, r2
 800143a:	4b0a      	ldr	r3, [pc, #40]	@ (8001464 <__aeabi_ddiv+0x21c>)
 800143c:	0b24      	lsrs	r4, r4, #12
 800143e:	e76f      	b.n	8001320 <__aeabi_ddiv+0xd8>
 8001440:	2480      	movs	r4, #128	@ 0x80
 8001442:	464b      	mov	r3, r9
 8001444:	0324      	lsls	r4, r4, #12
 8001446:	4223      	tst	r3, r4
 8001448:	d002      	beq.n	8001450 <__aeabi_ddiv+0x208>
 800144a:	465b      	mov	r3, fp
 800144c:	4223      	tst	r3, r4
 800144e:	d0f0      	beq.n	8001432 <__aeabi_ddiv+0x1ea>
 8001450:	2480      	movs	r4, #128	@ 0x80
 8001452:	464b      	mov	r3, r9
 8001454:	0324      	lsls	r4, r4, #12
 8001456:	431c      	orrs	r4, r3
 8001458:	0324      	lsls	r4, r4, #12
 800145a:	9e02      	ldr	r6, [sp, #8]
 800145c:	4b01      	ldr	r3, [pc, #4]	@ (8001464 <__aeabi_ddiv+0x21c>)
 800145e:	0b24      	lsrs	r4, r4, #12
 8001460:	e75e      	b.n	8001320 <__aeabi_ddiv+0xd8>
 8001462:	46c0      	nop			@ (mov r8, r8)
 8001464:	000007ff 	.word	0x000007ff
 8001468:	fffffc01 	.word	0xfffffc01
 800146c:	0800ad78 	.word	0x0800ad78
 8001470:	fffff801 	.word	0xfffff801
 8001474:	000003f3 	.word	0x000003f3
 8001478:	fffffc0d 	.word	0xfffffc0d
 800147c:	45cb      	cmp	fp, r9
 800147e:	d200      	bcs.n	8001482 <__aeabi_ddiv+0x23a>
 8001480:	e0f8      	b.n	8001674 <__aeabi_ddiv+0x42c>
 8001482:	d100      	bne.n	8001486 <__aeabi_ddiv+0x23e>
 8001484:	e0f3      	b.n	800166e <__aeabi_ddiv+0x426>
 8001486:	2301      	movs	r3, #1
 8001488:	425b      	negs	r3, r3
 800148a:	469c      	mov	ip, r3
 800148c:	4644      	mov	r4, r8
 800148e:	4648      	mov	r0, r9
 8001490:	2500      	movs	r5, #0
 8001492:	44e2      	add	sl, ip
 8001494:	465b      	mov	r3, fp
 8001496:	0e17      	lsrs	r7, r2, #24
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	431f      	orrs	r7, r3
 800149c:	0c19      	lsrs	r1, r3, #16
 800149e:	043b      	lsls	r3, r7, #16
 80014a0:	0212      	lsls	r2, r2, #8
 80014a2:	9700      	str	r7, [sp, #0]
 80014a4:	0c1f      	lsrs	r7, r3, #16
 80014a6:	4691      	mov	r9, r2
 80014a8:	9102      	str	r1, [sp, #8]
 80014aa:	9703      	str	r7, [sp, #12]
 80014ac:	f7fe fece 	bl	800024c <__aeabi_uidivmod>
 80014b0:	0002      	movs	r2, r0
 80014b2:	437a      	muls	r2, r7
 80014b4:	040b      	lsls	r3, r1, #16
 80014b6:	0c21      	lsrs	r1, r4, #16
 80014b8:	4680      	mov	r8, r0
 80014ba:	4319      	orrs	r1, r3
 80014bc:	428a      	cmp	r2, r1
 80014be:	d909      	bls.n	80014d4 <__aeabi_ddiv+0x28c>
 80014c0:	9f00      	ldr	r7, [sp, #0]
 80014c2:	2301      	movs	r3, #1
 80014c4:	46bc      	mov	ip, r7
 80014c6:	425b      	negs	r3, r3
 80014c8:	4461      	add	r1, ip
 80014ca:	469c      	mov	ip, r3
 80014cc:	44e0      	add	r8, ip
 80014ce:	428f      	cmp	r7, r1
 80014d0:	d800      	bhi.n	80014d4 <__aeabi_ddiv+0x28c>
 80014d2:	e15c      	b.n	800178e <__aeabi_ddiv+0x546>
 80014d4:	1a88      	subs	r0, r1, r2
 80014d6:	9902      	ldr	r1, [sp, #8]
 80014d8:	f7fe feb8 	bl	800024c <__aeabi_uidivmod>
 80014dc:	9a03      	ldr	r2, [sp, #12]
 80014de:	0424      	lsls	r4, r4, #16
 80014e0:	4342      	muls	r2, r0
 80014e2:	0409      	lsls	r1, r1, #16
 80014e4:	0c24      	lsrs	r4, r4, #16
 80014e6:	0003      	movs	r3, r0
 80014e8:	430c      	orrs	r4, r1
 80014ea:	42a2      	cmp	r2, r4
 80014ec:	d906      	bls.n	80014fc <__aeabi_ddiv+0x2b4>
 80014ee:	9900      	ldr	r1, [sp, #0]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	468c      	mov	ip, r1
 80014f4:	4464      	add	r4, ip
 80014f6:	42a1      	cmp	r1, r4
 80014f8:	d800      	bhi.n	80014fc <__aeabi_ddiv+0x2b4>
 80014fa:	e142      	b.n	8001782 <__aeabi_ddiv+0x53a>
 80014fc:	1aa0      	subs	r0, r4, r2
 80014fe:	4642      	mov	r2, r8
 8001500:	0412      	lsls	r2, r2, #16
 8001502:	431a      	orrs	r2, r3
 8001504:	4693      	mov	fp, r2
 8001506:	464b      	mov	r3, r9
 8001508:	4659      	mov	r1, fp
 800150a:	0c1b      	lsrs	r3, r3, #16
 800150c:	001f      	movs	r7, r3
 800150e:	9304      	str	r3, [sp, #16]
 8001510:	040b      	lsls	r3, r1, #16
 8001512:	4649      	mov	r1, r9
 8001514:	0409      	lsls	r1, r1, #16
 8001516:	0c09      	lsrs	r1, r1, #16
 8001518:	000c      	movs	r4, r1
 800151a:	0c1b      	lsrs	r3, r3, #16
 800151c:	435c      	muls	r4, r3
 800151e:	0c12      	lsrs	r2, r2, #16
 8001520:	437b      	muls	r3, r7
 8001522:	4688      	mov	r8, r1
 8001524:	4351      	muls	r1, r2
 8001526:	437a      	muls	r2, r7
 8001528:	0c27      	lsrs	r7, r4, #16
 800152a:	46bc      	mov	ip, r7
 800152c:	185b      	adds	r3, r3, r1
 800152e:	4463      	add	r3, ip
 8001530:	4299      	cmp	r1, r3
 8001532:	d903      	bls.n	800153c <__aeabi_ddiv+0x2f4>
 8001534:	2180      	movs	r1, #128	@ 0x80
 8001536:	0249      	lsls	r1, r1, #9
 8001538:	468c      	mov	ip, r1
 800153a:	4462      	add	r2, ip
 800153c:	0c19      	lsrs	r1, r3, #16
 800153e:	0424      	lsls	r4, r4, #16
 8001540:	041b      	lsls	r3, r3, #16
 8001542:	0c24      	lsrs	r4, r4, #16
 8001544:	188a      	adds	r2, r1, r2
 8001546:	191c      	adds	r4, r3, r4
 8001548:	4290      	cmp	r0, r2
 800154a:	d302      	bcc.n	8001552 <__aeabi_ddiv+0x30a>
 800154c:	d116      	bne.n	800157c <__aeabi_ddiv+0x334>
 800154e:	42a5      	cmp	r5, r4
 8001550:	d214      	bcs.n	800157c <__aeabi_ddiv+0x334>
 8001552:	465b      	mov	r3, fp
 8001554:	9f00      	ldr	r7, [sp, #0]
 8001556:	3b01      	subs	r3, #1
 8001558:	444d      	add	r5, r9
 800155a:	9305      	str	r3, [sp, #20]
 800155c:	454d      	cmp	r5, r9
 800155e:	419b      	sbcs	r3, r3
 8001560:	46bc      	mov	ip, r7
 8001562:	425b      	negs	r3, r3
 8001564:	4463      	add	r3, ip
 8001566:	18c0      	adds	r0, r0, r3
 8001568:	4287      	cmp	r7, r0
 800156a:	d300      	bcc.n	800156e <__aeabi_ddiv+0x326>
 800156c:	e102      	b.n	8001774 <__aeabi_ddiv+0x52c>
 800156e:	4282      	cmp	r2, r0
 8001570:	d900      	bls.n	8001574 <__aeabi_ddiv+0x32c>
 8001572:	e129      	b.n	80017c8 <__aeabi_ddiv+0x580>
 8001574:	d100      	bne.n	8001578 <__aeabi_ddiv+0x330>
 8001576:	e124      	b.n	80017c2 <__aeabi_ddiv+0x57a>
 8001578:	9b05      	ldr	r3, [sp, #20]
 800157a:	469b      	mov	fp, r3
 800157c:	1b2c      	subs	r4, r5, r4
 800157e:	42a5      	cmp	r5, r4
 8001580:	41ad      	sbcs	r5, r5
 8001582:	9b00      	ldr	r3, [sp, #0]
 8001584:	1a80      	subs	r0, r0, r2
 8001586:	426d      	negs	r5, r5
 8001588:	1b40      	subs	r0, r0, r5
 800158a:	4283      	cmp	r3, r0
 800158c:	d100      	bne.n	8001590 <__aeabi_ddiv+0x348>
 800158e:	e10f      	b.n	80017b0 <__aeabi_ddiv+0x568>
 8001590:	9902      	ldr	r1, [sp, #8]
 8001592:	f7fe fe5b 	bl	800024c <__aeabi_uidivmod>
 8001596:	9a03      	ldr	r2, [sp, #12]
 8001598:	040b      	lsls	r3, r1, #16
 800159a:	4342      	muls	r2, r0
 800159c:	0c21      	lsrs	r1, r4, #16
 800159e:	0005      	movs	r5, r0
 80015a0:	4319      	orrs	r1, r3
 80015a2:	428a      	cmp	r2, r1
 80015a4:	d900      	bls.n	80015a8 <__aeabi_ddiv+0x360>
 80015a6:	e0cb      	b.n	8001740 <__aeabi_ddiv+0x4f8>
 80015a8:	1a88      	subs	r0, r1, r2
 80015aa:	9902      	ldr	r1, [sp, #8]
 80015ac:	f7fe fe4e 	bl	800024c <__aeabi_uidivmod>
 80015b0:	9a03      	ldr	r2, [sp, #12]
 80015b2:	0424      	lsls	r4, r4, #16
 80015b4:	4342      	muls	r2, r0
 80015b6:	0409      	lsls	r1, r1, #16
 80015b8:	0c24      	lsrs	r4, r4, #16
 80015ba:	0003      	movs	r3, r0
 80015bc:	430c      	orrs	r4, r1
 80015be:	42a2      	cmp	r2, r4
 80015c0:	d900      	bls.n	80015c4 <__aeabi_ddiv+0x37c>
 80015c2:	e0ca      	b.n	800175a <__aeabi_ddiv+0x512>
 80015c4:	4641      	mov	r1, r8
 80015c6:	1aa4      	subs	r4, r4, r2
 80015c8:	042a      	lsls	r2, r5, #16
 80015ca:	431a      	orrs	r2, r3
 80015cc:	9f04      	ldr	r7, [sp, #16]
 80015ce:	0413      	lsls	r3, r2, #16
 80015d0:	0c1b      	lsrs	r3, r3, #16
 80015d2:	4359      	muls	r1, r3
 80015d4:	4640      	mov	r0, r8
 80015d6:	437b      	muls	r3, r7
 80015d8:	469c      	mov	ip, r3
 80015da:	0c15      	lsrs	r5, r2, #16
 80015dc:	4368      	muls	r0, r5
 80015de:	0c0b      	lsrs	r3, r1, #16
 80015e0:	4484      	add	ip, r0
 80015e2:	4463      	add	r3, ip
 80015e4:	437d      	muls	r5, r7
 80015e6:	4298      	cmp	r0, r3
 80015e8:	d903      	bls.n	80015f2 <__aeabi_ddiv+0x3aa>
 80015ea:	2080      	movs	r0, #128	@ 0x80
 80015ec:	0240      	lsls	r0, r0, #9
 80015ee:	4684      	mov	ip, r0
 80015f0:	4465      	add	r5, ip
 80015f2:	0c18      	lsrs	r0, r3, #16
 80015f4:	0409      	lsls	r1, r1, #16
 80015f6:	041b      	lsls	r3, r3, #16
 80015f8:	0c09      	lsrs	r1, r1, #16
 80015fa:	1940      	adds	r0, r0, r5
 80015fc:	185b      	adds	r3, r3, r1
 80015fe:	4284      	cmp	r4, r0
 8001600:	d327      	bcc.n	8001652 <__aeabi_ddiv+0x40a>
 8001602:	d023      	beq.n	800164c <__aeabi_ddiv+0x404>
 8001604:	2301      	movs	r3, #1
 8001606:	0035      	movs	r5, r6
 8001608:	431a      	orrs	r2, r3
 800160a:	4b94      	ldr	r3, [pc, #592]	@ (800185c <__aeabi_ddiv+0x614>)
 800160c:	4453      	add	r3, sl
 800160e:	2b00      	cmp	r3, #0
 8001610:	dd60      	ble.n	80016d4 <__aeabi_ddiv+0x48c>
 8001612:	0751      	lsls	r1, r2, #29
 8001614:	d000      	beq.n	8001618 <__aeabi_ddiv+0x3d0>
 8001616:	e086      	b.n	8001726 <__aeabi_ddiv+0x4de>
 8001618:	002e      	movs	r6, r5
 800161a:	08d1      	lsrs	r1, r2, #3
 800161c:	465a      	mov	r2, fp
 800161e:	01d2      	lsls	r2, r2, #7
 8001620:	d506      	bpl.n	8001630 <__aeabi_ddiv+0x3e8>
 8001622:	465a      	mov	r2, fp
 8001624:	4b8e      	ldr	r3, [pc, #568]	@ (8001860 <__aeabi_ddiv+0x618>)
 8001626:	401a      	ands	r2, r3
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	4693      	mov	fp, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4453      	add	r3, sl
 8001630:	4a8c      	ldr	r2, [pc, #560]	@ (8001864 <__aeabi_ddiv+0x61c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	dd00      	ble.n	8001638 <__aeabi_ddiv+0x3f0>
 8001636:	e680      	b.n	800133a <__aeabi_ddiv+0xf2>
 8001638:	465a      	mov	r2, fp
 800163a:	0752      	lsls	r2, r2, #29
 800163c:	430a      	orrs	r2, r1
 800163e:	4690      	mov	r8, r2
 8001640:	465a      	mov	r2, fp
 8001642:	055b      	lsls	r3, r3, #21
 8001644:	0254      	lsls	r4, r2, #9
 8001646:	0b24      	lsrs	r4, r4, #12
 8001648:	0d5b      	lsrs	r3, r3, #21
 800164a:	e669      	b.n	8001320 <__aeabi_ddiv+0xd8>
 800164c:	0035      	movs	r5, r6
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0db      	beq.n	800160a <__aeabi_ddiv+0x3c2>
 8001652:	9d00      	ldr	r5, [sp, #0]
 8001654:	1e51      	subs	r1, r2, #1
 8001656:	46ac      	mov	ip, r5
 8001658:	4464      	add	r4, ip
 800165a:	42ac      	cmp	r4, r5
 800165c:	d200      	bcs.n	8001660 <__aeabi_ddiv+0x418>
 800165e:	e09e      	b.n	800179e <__aeabi_ddiv+0x556>
 8001660:	4284      	cmp	r4, r0
 8001662:	d200      	bcs.n	8001666 <__aeabi_ddiv+0x41e>
 8001664:	e0e1      	b.n	800182a <__aeabi_ddiv+0x5e2>
 8001666:	d100      	bne.n	800166a <__aeabi_ddiv+0x422>
 8001668:	e0ee      	b.n	8001848 <__aeabi_ddiv+0x600>
 800166a:	000a      	movs	r2, r1
 800166c:	e7ca      	b.n	8001604 <__aeabi_ddiv+0x3bc>
 800166e:	4542      	cmp	r2, r8
 8001670:	d900      	bls.n	8001674 <__aeabi_ddiv+0x42c>
 8001672:	e708      	b.n	8001486 <__aeabi_ddiv+0x23e>
 8001674:	464b      	mov	r3, r9
 8001676:	07dc      	lsls	r4, r3, #31
 8001678:	0858      	lsrs	r0, r3, #1
 800167a:	4643      	mov	r3, r8
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	431c      	orrs	r4, r3
 8001680:	4643      	mov	r3, r8
 8001682:	07dd      	lsls	r5, r3, #31
 8001684:	e706      	b.n	8001494 <__aeabi_ddiv+0x24c>
 8001686:	f001 fa83 	bl	8002b90 <__clzsi2>
 800168a:	2315      	movs	r3, #21
 800168c:	469c      	mov	ip, r3
 800168e:	4484      	add	ip, r0
 8001690:	0002      	movs	r2, r0
 8001692:	4663      	mov	r3, ip
 8001694:	3220      	adds	r2, #32
 8001696:	2b1c      	cmp	r3, #28
 8001698:	dc00      	bgt.n	800169c <__aeabi_ddiv+0x454>
 800169a:	e692      	b.n	80013c2 <__aeabi_ddiv+0x17a>
 800169c:	0023      	movs	r3, r4
 800169e:	3808      	subs	r0, #8
 80016a0:	4083      	lsls	r3, r0
 80016a2:	4699      	mov	r9, r3
 80016a4:	2300      	movs	r3, #0
 80016a6:	4698      	mov	r8, r3
 80016a8:	e69a      	b.n	80013e0 <__aeabi_ddiv+0x198>
 80016aa:	f001 fa71 	bl	8002b90 <__clzsi2>
 80016ae:	0002      	movs	r2, r0
 80016b0:	0003      	movs	r3, r0
 80016b2:	3215      	adds	r2, #21
 80016b4:	3320      	adds	r3, #32
 80016b6:	2a1c      	cmp	r2, #28
 80016b8:	dc00      	bgt.n	80016bc <__aeabi_ddiv+0x474>
 80016ba:	e65f      	b.n	800137c <__aeabi_ddiv+0x134>
 80016bc:	9900      	ldr	r1, [sp, #0]
 80016be:	3808      	subs	r0, #8
 80016c0:	4081      	lsls	r1, r0
 80016c2:	2200      	movs	r2, #0
 80016c4:	468b      	mov	fp, r1
 80016c6:	e666      	b.n	8001396 <__aeabi_ddiv+0x14e>
 80016c8:	2200      	movs	r2, #0
 80016ca:	002e      	movs	r6, r5
 80016cc:	2400      	movs	r4, #0
 80016ce:	4690      	mov	r8, r2
 80016d0:	4b65      	ldr	r3, [pc, #404]	@ (8001868 <__aeabi_ddiv+0x620>)
 80016d2:	e625      	b.n	8001320 <__aeabi_ddiv+0xd8>
 80016d4:	002e      	movs	r6, r5
 80016d6:	2101      	movs	r1, #1
 80016d8:	1ac9      	subs	r1, r1, r3
 80016da:	2938      	cmp	r1, #56	@ 0x38
 80016dc:	dd00      	ble.n	80016e0 <__aeabi_ddiv+0x498>
 80016de:	e61b      	b.n	8001318 <__aeabi_ddiv+0xd0>
 80016e0:	291f      	cmp	r1, #31
 80016e2:	dc7e      	bgt.n	80017e2 <__aeabi_ddiv+0x59a>
 80016e4:	4861      	ldr	r0, [pc, #388]	@ (800186c <__aeabi_ddiv+0x624>)
 80016e6:	0014      	movs	r4, r2
 80016e8:	4450      	add	r0, sl
 80016ea:	465b      	mov	r3, fp
 80016ec:	4082      	lsls	r2, r0
 80016ee:	4083      	lsls	r3, r0
 80016f0:	40cc      	lsrs	r4, r1
 80016f2:	1e50      	subs	r0, r2, #1
 80016f4:	4182      	sbcs	r2, r0
 80016f6:	4323      	orrs	r3, r4
 80016f8:	431a      	orrs	r2, r3
 80016fa:	465b      	mov	r3, fp
 80016fc:	40cb      	lsrs	r3, r1
 80016fe:	0751      	lsls	r1, r2, #29
 8001700:	d009      	beq.n	8001716 <__aeabi_ddiv+0x4ce>
 8001702:	210f      	movs	r1, #15
 8001704:	4011      	ands	r1, r2
 8001706:	2904      	cmp	r1, #4
 8001708:	d005      	beq.n	8001716 <__aeabi_ddiv+0x4ce>
 800170a:	1d11      	adds	r1, r2, #4
 800170c:	4291      	cmp	r1, r2
 800170e:	4192      	sbcs	r2, r2
 8001710:	4252      	negs	r2, r2
 8001712:	189b      	adds	r3, r3, r2
 8001714:	000a      	movs	r2, r1
 8001716:	0219      	lsls	r1, r3, #8
 8001718:	d400      	bmi.n	800171c <__aeabi_ddiv+0x4d4>
 800171a:	e09b      	b.n	8001854 <__aeabi_ddiv+0x60c>
 800171c:	2200      	movs	r2, #0
 800171e:	2301      	movs	r3, #1
 8001720:	2400      	movs	r4, #0
 8001722:	4690      	mov	r8, r2
 8001724:	e5fc      	b.n	8001320 <__aeabi_ddiv+0xd8>
 8001726:	210f      	movs	r1, #15
 8001728:	4011      	ands	r1, r2
 800172a:	2904      	cmp	r1, #4
 800172c:	d100      	bne.n	8001730 <__aeabi_ddiv+0x4e8>
 800172e:	e773      	b.n	8001618 <__aeabi_ddiv+0x3d0>
 8001730:	1d11      	adds	r1, r2, #4
 8001732:	4291      	cmp	r1, r2
 8001734:	4192      	sbcs	r2, r2
 8001736:	4252      	negs	r2, r2
 8001738:	002e      	movs	r6, r5
 800173a:	08c9      	lsrs	r1, r1, #3
 800173c:	4493      	add	fp, r2
 800173e:	e76d      	b.n	800161c <__aeabi_ddiv+0x3d4>
 8001740:	9b00      	ldr	r3, [sp, #0]
 8001742:	3d01      	subs	r5, #1
 8001744:	469c      	mov	ip, r3
 8001746:	4461      	add	r1, ip
 8001748:	428b      	cmp	r3, r1
 800174a:	d900      	bls.n	800174e <__aeabi_ddiv+0x506>
 800174c:	e72c      	b.n	80015a8 <__aeabi_ddiv+0x360>
 800174e:	428a      	cmp	r2, r1
 8001750:	d800      	bhi.n	8001754 <__aeabi_ddiv+0x50c>
 8001752:	e729      	b.n	80015a8 <__aeabi_ddiv+0x360>
 8001754:	1e85      	subs	r5, r0, #2
 8001756:	4461      	add	r1, ip
 8001758:	e726      	b.n	80015a8 <__aeabi_ddiv+0x360>
 800175a:	9900      	ldr	r1, [sp, #0]
 800175c:	3b01      	subs	r3, #1
 800175e:	468c      	mov	ip, r1
 8001760:	4464      	add	r4, ip
 8001762:	42a1      	cmp	r1, r4
 8001764:	d900      	bls.n	8001768 <__aeabi_ddiv+0x520>
 8001766:	e72d      	b.n	80015c4 <__aeabi_ddiv+0x37c>
 8001768:	42a2      	cmp	r2, r4
 800176a:	d800      	bhi.n	800176e <__aeabi_ddiv+0x526>
 800176c:	e72a      	b.n	80015c4 <__aeabi_ddiv+0x37c>
 800176e:	1e83      	subs	r3, r0, #2
 8001770:	4464      	add	r4, ip
 8001772:	e727      	b.n	80015c4 <__aeabi_ddiv+0x37c>
 8001774:	4287      	cmp	r7, r0
 8001776:	d000      	beq.n	800177a <__aeabi_ddiv+0x532>
 8001778:	e6fe      	b.n	8001578 <__aeabi_ddiv+0x330>
 800177a:	45a9      	cmp	r9, r5
 800177c:	d900      	bls.n	8001780 <__aeabi_ddiv+0x538>
 800177e:	e6fb      	b.n	8001578 <__aeabi_ddiv+0x330>
 8001780:	e6f5      	b.n	800156e <__aeabi_ddiv+0x326>
 8001782:	42a2      	cmp	r2, r4
 8001784:	d800      	bhi.n	8001788 <__aeabi_ddiv+0x540>
 8001786:	e6b9      	b.n	80014fc <__aeabi_ddiv+0x2b4>
 8001788:	1e83      	subs	r3, r0, #2
 800178a:	4464      	add	r4, ip
 800178c:	e6b6      	b.n	80014fc <__aeabi_ddiv+0x2b4>
 800178e:	428a      	cmp	r2, r1
 8001790:	d800      	bhi.n	8001794 <__aeabi_ddiv+0x54c>
 8001792:	e69f      	b.n	80014d4 <__aeabi_ddiv+0x28c>
 8001794:	46bc      	mov	ip, r7
 8001796:	1e83      	subs	r3, r0, #2
 8001798:	4698      	mov	r8, r3
 800179a:	4461      	add	r1, ip
 800179c:	e69a      	b.n	80014d4 <__aeabi_ddiv+0x28c>
 800179e:	000a      	movs	r2, r1
 80017a0:	4284      	cmp	r4, r0
 80017a2:	d000      	beq.n	80017a6 <__aeabi_ddiv+0x55e>
 80017a4:	e72e      	b.n	8001604 <__aeabi_ddiv+0x3bc>
 80017a6:	454b      	cmp	r3, r9
 80017a8:	d000      	beq.n	80017ac <__aeabi_ddiv+0x564>
 80017aa:	e72b      	b.n	8001604 <__aeabi_ddiv+0x3bc>
 80017ac:	0035      	movs	r5, r6
 80017ae:	e72c      	b.n	800160a <__aeabi_ddiv+0x3c2>
 80017b0:	4b2a      	ldr	r3, [pc, #168]	@ (800185c <__aeabi_ddiv+0x614>)
 80017b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001870 <__aeabi_ddiv+0x628>)
 80017b4:	4453      	add	r3, sl
 80017b6:	4592      	cmp	sl, r2
 80017b8:	db43      	blt.n	8001842 <__aeabi_ddiv+0x5fa>
 80017ba:	2201      	movs	r2, #1
 80017bc:	2100      	movs	r1, #0
 80017be:	4493      	add	fp, r2
 80017c0:	e72c      	b.n	800161c <__aeabi_ddiv+0x3d4>
 80017c2:	42ac      	cmp	r4, r5
 80017c4:	d800      	bhi.n	80017c8 <__aeabi_ddiv+0x580>
 80017c6:	e6d7      	b.n	8001578 <__aeabi_ddiv+0x330>
 80017c8:	2302      	movs	r3, #2
 80017ca:	425b      	negs	r3, r3
 80017cc:	469c      	mov	ip, r3
 80017ce:	9900      	ldr	r1, [sp, #0]
 80017d0:	444d      	add	r5, r9
 80017d2:	454d      	cmp	r5, r9
 80017d4:	419b      	sbcs	r3, r3
 80017d6:	44e3      	add	fp, ip
 80017d8:	468c      	mov	ip, r1
 80017da:	425b      	negs	r3, r3
 80017dc:	4463      	add	r3, ip
 80017de:	18c0      	adds	r0, r0, r3
 80017e0:	e6cc      	b.n	800157c <__aeabi_ddiv+0x334>
 80017e2:	201f      	movs	r0, #31
 80017e4:	4240      	negs	r0, r0
 80017e6:	1ac3      	subs	r3, r0, r3
 80017e8:	4658      	mov	r0, fp
 80017ea:	40d8      	lsrs	r0, r3
 80017ec:	2920      	cmp	r1, #32
 80017ee:	d004      	beq.n	80017fa <__aeabi_ddiv+0x5b2>
 80017f0:	4659      	mov	r1, fp
 80017f2:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <__aeabi_ddiv+0x62c>)
 80017f4:	4453      	add	r3, sl
 80017f6:	4099      	lsls	r1, r3
 80017f8:	430a      	orrs	r2, r1
 80017fa:	1e53      	subs	r3, r2, #1
 80017fc:	419a      	sbcs	r2, r3
 80017fe:	2307      	movs	r3, #7
 8001800:	0019      	movs	r1, r3
 8001802:	4302      	orrs	r2, r0
 8001804:	2400      	movs	r4, #0
 8001806:	4011      	ands	r1, r2
 8001808:	4213      	tst	r3, r2
 800180a:	d009      	beq.n	8001820 <__aeabi_ddiv+0x5d8>
 800180c:	3308      	adds	r3, #8
 800180e:	4013      	ands	r3, r2
 8001810:	2b04      	cmp	r3, #4
 8001812:	d01d      	beq.n	8001850 <__aeabi_ddiv+0x608>
 8001814:	1d13      	adds	r3, r2, #4
 8001816:	4293      	cmp	r3, r2
 8001818:	4189      	sbcs	r1, r1
 800181a:	001a      	movs	r2, r3
 800181c:	4249      	negs	r1, r1
 800181e:	0749      	lsls	r1, r1, #29
 8001820:	08d2      	lsrs	r2, r2, #3
 8001822:	430a      	orrs	r2, r1
 8001824:	4690      	mov	r8, r2
 8001826:	2300      	movs	r3, #0
 8001828:	e57a      	b.n	8001320 <__aeabi_ddiv+0xd8>
 800182a:	4649      	mov	r1, r9
 800182c:	9f00      	ldr	r7, [sp, #0]
 800182e:	004d      	lsls	r5, r1, #1
 8001830:	454d      	cmp	r5, r9
 8001832:	4189      	sbcs	r1, r1
 8001834:	46bc      	mov	ip, r7
 8001836:	4249      	negs	r1, r1
 8001838:	4461      	add	r1, ip
 800183a:	46a9      	mov	r9, r5
 800183c:	3a02      	subs	r2, #2
 800183e:	1864      	adds	r4, r4, r1
 8001840:	e7ae      	b.n	80017a0 <__aeabi_ddiv+0x558>
 8001842:	2201      	movs	r2, #1
 8001844:	4252      	negs	r2, r2
 8001846:	e746      	b.n	80016d6 <__aeabi_ddiv+0x48e>
 8001848:	4599      	cmp	r9, r3
 800184a:	d3ee      	bcc.n	800182a <__aeabi_ddiv+0x5e2>
 800184c:	000a      	movs	r2, r1
 800184e:	e7aa      	b.n	80017a6 <__aeabi_ddiv+0x55e>
 8001850:	2100      	movs	r1, #0
 8001852:	e7e5      	b.n	8001820 <__aeabi_ddiv+0x5d8>
 8001854:	0759      	lsls	r1, r3, #29
 8001856:	025b      	lsls	r3, r3, #9
 8001858:	0b1c      	lsrs	r4, r3, #12
 800185a:	e7e1      	b.n	8001820 <__aeabi_ddiv+0x5d8>
 800185c:	000003ff 	.word	0x000003ff
 8001860:	feffffff 	.word	0xfeffffff
 8001864:	000007fe 	.word	0x000007fe
 8001868:	000007ff 	.word	0x000007ff
 800186c:	0000041e 	.word	0x0000041e
 8001870:	fffffc02 	.word	0xfffffc02
 8001874:	0000043e 	.word	0x0000043e

08001878 <__eqdf2>:
 8001878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187a:	4657      	mov	r7, sl
 800187c:	46de      	mov	lr, fp
 800187e:	464e      	mov	r6, r9
 8001880:	4645      	mov	r5, r8
 8001882:	b5e0      	push	{r5, r6, r7, lr}
 8001884:	000d      	movs	r5, r1
 8001886:	0004      	movs	r4, r0
 8001888:	0fe8      	lsrs	r0, r5, #31
 800188a:	4683      	mov	fp, r0
 800188c:	0309      	lsls	r1, r1, #12
 800188e:	0fd8      	lsrs	r0, r3, #31
 8001890:	0b09      	lsrs	r1, r1, #12
 8001892:	4682      	mov	sl, r0
 8001894:	4819      	ldr	r0, [pc, #100]	@ (80018fc <__eqdf2+0x84>)
 8001896:	468c      	mov	ip, r1
 8001898:	031f      	lsls	r7, r3, #12
 800189a:	0069      	lsls	r1, r5, #1
 800189c:	005e      	lsls	r6, r3, #1
 800189e:	0d49      	lsrs	r1, r1, #21
 80018a0:	0b3f      	lsrs	r7, r7, #12
 80018a2:	0d76      	lsrs	r6, r6, #21
 80018a4:	4281      	cmp	r1, r0
 80018a6:	d018      	beq.n	80018da <__eqdf2+0x62>
 80018a8:	4286      	cmp	r6, r0
 80018aa:	d00f      	beq.n	80018cc <__eqdf2+0x54>
 80018ac:	2001      	movs	r0, #1
 80018ae:	42b1      	cmp	r1, r6
 80018b0:	d10d      	bne.n	80018ce <__eqdf2+0x56>
 80018b2:	45bc      	cmp	ip, r7
 80018b4:	d10b      	bne.n	80018ce <__eqdf2+0x56>
 80018b6:	4294      	cmp	r4, r2
 80018b8:	d109      	bne.n	80018ce <__eqdf2+0x56>
 80018ba:	45d3      	cmp	fp, sl
 80018bc:	d01c      	beq.n	80018f8 <__eqdf2+0x80>
 80018be:	2900      	cmp	r1, #0
 80018c0:	d105      	bne.n	80018ce <__eqdf2+0x56>
 80018c2:	4660      	mov	r0, ip
 80018c4:	4320      	orrs	r0, r4
 80018c6:	1e43      	subs	r3, r0, #1
 80018c8:	4198      	sbcs	r0, r3
 80018ca:	e000      	b.n	80018ce <__eqdf2+0x56>
 80018cc:	2001      	movs	r0, #1
 80018ce:	bcf0      	pop	{r4, r5, r6, r7}
 80018d0:	46bb      	mov	fp, r7
 80018d2:	46b2      	mov	sl, r6
 80018d4:	46a9      	mov	r9, r5
 80018d6:	46a0      	mov	r8, r4
 80018d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018da:	2001      	movs	r0, #1
 80018dc:	428e      	cmp	r6, r1
 80018de:	d1f6      	bne.n	80018ce <__eqdf2+0x56>
 80018e0:	4661      	mov	r1, ip
 80018e2:	4339      	orrs	r1, r7
 80018e4:	000f      	movs	r7, r1
 80018e6:	4317      	orrs	r7, r2
 80018e8:	4327      	orrs	r7, r4
 80018ea:	d1f0      	bne.n	80018ce <__eqdf2+0x56>
 80018ec:	465b      	mov	r3, fp
 80018ee:	4652      	mov	r2, sl
 80018f0:	1a98      	subs	r0, r3, r2
 80018f2:	1e43      	subs	r3, r0, #1
 80018f4:	4198      	sbcs	r0, r3
 80018f6:	e7ea      	b.n	80018ce <__eqdf2+0x56>
 80018f8:	2000      	movs	r0, #0
 80018fa:	e7e8      	b.n	80018ce <__eqdf2+0x56>
 80018fc:	000007ff 	.word	0x000007ff

08001900 <__gedf2>:
 8001900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001902:	4657      	mov	r7, sl
 8001904:	464e      	mov	r6, r9
 8001906:	4645      	mov	r5, r8
 8001908:	46de      	mov	lr, fp
 800190a:	b5e0      	push	{r5, r6, r7, lr}
 800190c:	000d      	movs	r5, r1
 800190e:	030e      	lsls	r6, r1, #12
 8001910:	0049      	lsls	r1, r1, #1
 8001912:	0d49      	lsrs	r1, r1, #21
 8001914:	468a      	mov	sl, r1
 8001916:	0fdf      	lsrs	r7, r3, #31
 8001918:	0fe9      	lsrs	r1, r5, #31
 800191a:	46bc      	mov	ip, r7
 800191c:	b083      	sub	sp, #12
 800191e:	4f2f      	ldr	r7, [pc, #188]	@ (80019dc <__gedf2+0xdc>)
 8001920:	0004      	movs	r4, r0
 8001922:	4680      	mov	r8, r0
 8001924:	9101      	str	r1, [sp, #4]
 8001926:	0058      	lsls	r0, r3, #1
 8001928:	0319      	lsls	r1, r3, #12
 800192a:	4691      	mov	r9, r2
 800192c:	0b36      	lsrs	r6, r6, #12
 800192e:	0b09      	lsrs	r1, r1, #12
 8001930:	0d40      	lsrs	r0, r0, #21
 8001932:	45ba      	cmp	sl, r7
 8001934:	d01d      	beq.n	8001972 <__gedf2+0x72>
 8001936:	42b8      	cmp	r0, r7
 8001938:	d00d      	beq.n	8001956 <__gedf2+0x56>
 800193a:	4657      	mov	r7, sl
 800193c:	2f00      	cmp	r7, #0
 800193e:	d12a      	bne.n	8001996 <__gedf2+0x96>
 8001940:	4334      	orrs	r4, r6
 8001942:	2800      	cmp	r0, #0
 8001944:	d124      	bne.n	8001990 <__gedf2+0x90>
 8001946:	430a      	orrs	r2, r1
 8001948:	d036      	beq.n	80019b8 <__gedf2+0xb8>
 800194a:	2c00      	cmp	r4, #0
 800194c:	d141      	bne.n	80019d2 <__gedf2+0xd2>
 800194e:	4663      	mov	r3, ip
 8001950:	0058      	lsls	r0, r3, #1
 8001952:	3801      	subs	r0, #1
 8001954:	e015      	b.n	8001982 <__gedf2+0x82>
 8001956:	4311      	orrs	r1, r2
 8001958:	d138      	bne.n	80019cc <__gedf2+0xcc>
 800195a:	4653      	mov	r3, sl
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <__gedf2+0x64>
 8001960:	4326      	orrs	r6, r4
 8001962:	d0f4      	beq.n	800194e <__gedf2+0x4e>
 8001964:	9b01      	ldr	r3, [sp, #4]
 8001966:	4563      	cmp	r3, ip
 8001968:	d107      	bne.n	800197a <__gedf2+0x7a>
 800196a:	9b01      	ldr	r3, [sp, #4]
 800196c:	0058      	lsls	r0, r3, #1
 800196e:	3801      	subs	r0, #1
 8001970:	e007      	b.n	8001982 <__gedf2+0x82>
 8001972:	4326      	orrs	r6, r4
 8001974:	d12a      	bne.n	80019cc <__gedf2+0xcc>
 8001976:	4550      	cmp	r0, sl
 8001978:	d021      	beq.n	80019be <__gedf2+0xbe>
 800197a:	2001      	movs	r0, #1
 800197c:	9b01      	ldr	r3, [sp, #4]
 800197e:	425f      	negs	r7, r3
 8001980:	4338      	orrs	r0, r7
 8001982:	b003      	add	sp, #12
 8001984:	bcf0      	pop	{r4, r5, r6, r7}
 8001986:	46bb      	mov	fp, r7
 8001988:	46b2      	mov	sl, r6
 800198a:	46a9      	mov	r9, r5
 800198c:	46a0      	mov	r8, r4
 800198e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001990:	2c00      	cmp	r4, #0
 8001992:	d0dc      	beq.n	800194e <__gedf2+0x4e>
 8001994:	e7e6      	b.n	8001964 <__gedf2+0x64>
 8001996:	2800      	cmp	r0, #0
 8001998:	d0ef      	beq.n	800197a <__gedf2+0x7a>
 800199a:	9b01      	ldr	r3, [sp, #4]
 800199c:	4563      	cmp	r3, ip
 800199e:	d1ec      	bne.n	800197a <__gedf2+0x7a>
 80019a0:	4582      	cmp	sl, r0
 80019a2:	dcea      	bgt.n	800197a <__gedf2+0x7a>
 80019a4:	dbe1      	blt.n	800196a <__gedf2+0x6a>
 80019a6:	428e      	cmp	r6, r1
 80019a8:	d8e7      	bhi.n	800197a <__gedf2+0x7a>
 80019aa:	d1de      	bne.n	800196a <__gedf2+0x6a>
 80019ac:	45c8      	cmp	r8, r9
 80019ae:	d8e4      	bhi.n	800197a <__gedf2+0x7a>
 80019b0:	2000      	movs	r0, #0
 80019b2:	45c8      	cmp	r8, r9
 80019b4:	d2e5      	bcs.n	8001982 <__gedf2+0x82>
 80019b6:	e7d8      	b.n	800196a <__gedf2+0x6a>
 80019b8:	2c00      	cmp	r4, #0
 80019ba:	d0e2      	beq.n	8001982 <__gedf2+0x82>
 80019bc:	e7dd      	b.n	800197a <__gedf2+0x7a>
 80019be:	4311      	orrs	r1, r2
 80019c0:	d104      	bne.n	80019cc <__gedf2+0xcc>
 80019c2:	9b01      	ldr	r3, [sp, #4]
 80019c4:	4563      	cmp	r3, ip
 80019c6:	d1d8      	bne.n	800197a <__gedf2+0x7a>
 80019c8:	2000      	movs	r0, #0
 80019ca:	e7da      	b.n	8001982 <__gedf2+0x82>
 80019cc:	2002      	movs	r0, #2
 80019ce:	4240      	negs	r0, r0
 80019d0:	e7d7      	b.n	8001982 <__gedf2+0x82>
 80019d2:	9b01      	ldr	r3, [sp, #4]
 80019d4:	4563      	cmp	r3, ip
 80019d6:	d0e6      	beq.n	80019a6 <__gedf2+0xa6>
 80019d8:	e7cf      	b.n	800197a <__gedf2+0x7a>
 80019da:	46c0      	nop			@ (mov r8, r8)
 80019dc:	000007ff 	.word	0x000007ff

080019e0 <__ledf2>:
 80019e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019e2:	4657      	mov	r7, sl
 80019e4:	464e      	mov	r6, r9
 80019e6:	4645      	mov	r5, r8
 80019e8:	46de      	mov	lr, fp
 80019ea:	b5e0      	push	{r5, r6, r7, lr}
 80019ec:	000d      	movs	r5, r1
 80019ee:	030e      	lsls	r6, r1, #12
 80019f0:	0049      	lsls	r1, r1, #1
 80019f2:	0d49      	lsrs	r1, r1, #21
 80019f4:	468a      	mov	sl, r1
 80019f6:	0fdf      	lsrs	r7, r3, #31
 80019f8:	0fe9      	lsrs	r1, r5, #31
 80019fa:	46bc      	mov	ip, r7
 80019fc:	b083      	sub	sp, #12
 80019fe:	4f2e      	ldr	r7, [pc, #184]	@ (8001ab8 <__ledf2+0xd8>)
 8001a00:	0004      	movs	r4, r0
 8001a02:	4680      	mov	r8, r0
 8001a04:	9101      	str	r1, [sp, #4]
 8001a06:	0058      	lsls	r0, r3, #1
 8001a08:	0319      	lsls	r1, r3, #12
 8001a0a:	4691      	mov	r9, r2
 8001a0c:	0b36      	lsrs	r6, r6, #12
 8001a0e:	0b09      	lsrs	r1, r1, #12
 8001a10:	0d40      	lsrs	r0, r0, #21
 8001a12:	45ba      	cmp	sl, r7
 8001a14:	d01e      	beq.n	8001a54 <__ledf2+0x74>
 8001a16:	42b8      	cmp	r0, r7
 8001a18:	d00d      	beq.n	8001a36 <__ledf2+0x56>
 8001a1a:	4657      	mov	r7, sl
 8001a1c:	2f00      	cmp	r7, #0
 8001a1e:	d127      	bne.n	8001a70 <__ledf2+0x90>
 8001a20:	4334      	orrs	r4, r6
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d133      	bne.n	8001a8e <__ledf2+0xae>
 8001a26:	430a      	orrs	r2, r1
 8001a28:	d034      	beq.n	8001a94 <__ledf2+0xb4>
 8001a2a:	2c00      	cmp	r4, #0
 8001a2c:	d140      	bne.n	8001ab0 <__ledf2+0xd0>
 8001a2e:	4663      	mov	r3, ip
 8001a30:	0058      	lsls	r0, r3, #1
 8001a32:	3801      	subs	r0, #1
 8001a34:	e015      	b.n	8001a62 <__ledf2+0x82>
 8001a36:	4311      	orrs	r1, r2
 8001a38:	d112      	bne.n	8001a60 <__ledf2+0x80>
 8001a3a:	4653      	mov	r3, sl
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <__ledf2+0x64>
 8001a40:	4326      	orrs	r6, r4
 8001a42:	d0f4      	beq.n	8001a2e <__ledf2+0x4e>
 8001a44:	9b01      	ldr	r3, [sp, #4]
 8001a46:	4563      	cmp	r3, ip
 8001a48:	d01d      	beq.n	8001a86 <__ledf2+0xa6>
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	9b01      	ldr	r3, [sp, #4]
 8001a4e:	425f      	negs	r7, r3
 8001a50:	4338      	orrs	r0, r7
 8001a52:	e006      	b.n	8001a62 <__ledf2+0x82>
 8001a54:	4326      	orrs	r6, r4
 8001a56:	d103      	bne.n	8001a60 <__ledf2+0x80>
 8001a58:	4550      	cmp	r0, sl
 8001a5a:	d1f6      	bne.n	8001a4a <__ledf2+0x6a>
 8001a5c:	4311      	orrs	r1, r2
 8001a5e:	d01c      	beq.n	8001a9a <__ledf2+0xba>
 8001a60:	2002      	movs	r0, #2
 8001a62:	b003      	add	sp, #12
 8001a64:	bcf0      	pop	{r4, r5, r6, r7}
 8001a66:	46bb      	mov	fp, r7
 8001a68:	46b2      	mov	sl, r6
 8001a6a:	46a9      	mov	r9, r5
 8001a6c:	46a0      	mov	r8, r4
 8001a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d0ea      	beq.n	8001a4a <__ledf2+0x6a>
 8001a74:	9b01      	ldr	r3, [sp, #4]
 8001a76:	4563      	cmp	r3, ip
 8001a78:	d1e7      	bne.n	8001a4a <__ledf2+0x6a>
 8001a7a:	4582      	cmp	sl, r0
 8001a7c:	dce5      	bgt.n	8001a4a <__ledf2+0x6a>
 8001a7e:	db02      	blt.n	8001a86 <__ledf2+0xa6>
 8001a80:	428e      	cmp	r6, r1
 8001a82:	d8e2      	bhi.n	8001a4a <__ledf2+0x6a>
 8001a84:	d00e      	beq.n	8001aa4 <__ledf2+0xc4>
 8001a86:	9b01      	ldr	r3, [sp, #4]
 8001a88:	0058      	lsls	r0, r3, #1
 8001a8a:	3801      	subs	r0, #1
 8001a8c:	e7e9      	b.n	8001a62 <__ledf2+0x82>
 8001a8e:	2c00      	cmp	r4, #0
 8001a90:	d0cd      	beq.n	8001a2e <__ledf2+0x4e>
 8001a92:	e7d7      	b.n	8001a44 <__ledf2+0x64>
 8001a94:	2c00      	cmp	r4, #0
 8001a96:	d0e4      	beq.n	8001a62 <__ledf2+0x82>
 8001a98:	e7d7      	b.n	8001a4a <__ledf2+0x6a>
 8001a9a:	9b01      	ldr	r3, [sp, #4]
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	4563      	cmp	r3, ip
 8001aa0:	d0df      	beq.n	8001a62 <__ledf2+0x82>
 8001aa2:	e7d2      	b.n	8001a4a <__ledf2+0x6a>
 8001aa4:	45c8      	cmp	r8, r9
 8001aa6:	d8d0      	bhi.n	8001a4a <__ledf2+0x6a>
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	45c8      	cmp	r8, r9
 8001aac:	d2d9      	bcs.n	8001a62 <__ledf2+0x82>
 8001aae:	e7ea      	b.n	8001a86 <__ledf2+0xa6>
 8001ab0:	9b01      	ldr	r3, [sp, #4]
 8001ab2:	4563      	cmp	r3, ip
 8001ab4:	d0e4      	beq.n	8001a80 <__ledf2+0xa0>
 8001ab6:	e7c8      	b.n	8001a4a <__ledf2+0x6a>
 8001ab8:	000007ff 	.word	0x000007ff

08001abc <__aeabi_dmul>:
 8001abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001abe:	4657      	mov	r7, sl
 8001ac0:	464e      	mov	r6, r9
 8001ac2:	46de      	mov	lr, fp
 8001ac4:	4645      	mov	r5, r8
 8001ac6:	b5e0      	push	{r5, r6, r7, lr}
 8001ac8:	001f      	movs	r7, r3
 8001aca:	030b      	lsls	r3, r1, #12
 8001acc:	0b1b      	lsrs	r3, r3, #12
 8001ace:	0016      	movs	r6, r2
 8001ad0:	469a      	mov	sl, r3
 8001ad2:	0fca      	lsrs	r2, r1, #31
 8001ad4:	004b      	lsls	r3, r1, #1
 8001ad6:	0004      	movs	r4, r0
 8001ad8:	4691      	mov	r9, r2
 8001ada:	b085      	sub	sp, #20
 8001adc:	0d5b      	lsrs	r3, r3, #21
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_dmul+0x26>
 8001ae0:	e1cf      	b.n	8001e82 <__aeabi_dmul+0x3c6>
 8001ae2:	4acd      	ldr	r2, [pc, #820]	@ (8001e18 <__aeabi_dmul+0x35c>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d055      	beq.n	8001b94 <__aeabi_dmul+0xd8>
 8001ae8:	4651      	mov	r1, sl
 8001aea:	0f42      	lsrs	r2, r0, #29
 8001aec:	00c9      	lsls	r1, r1, #3
 8001aee:	430a      	orrs	r2, r1
 8001af0:	2180      	movs	r1, #128	@ 0x80
 8001af2:	0409      	lsls	r1, r1, #16
 8001af4:	4311      	orrs	r1, r2
 8001af6:	00c2      	lsls	r2, r0, #3
 8001af8:	4690      	mov	r8, r2
 8001afa:	4ac8      	ldr	r2, [pc, #800]	@ (8001e1c <__aeabi_dmul+0x360>)
 8001afc:	468a      	mov	sl, r1
 8001afe:	4693      	mov	fp, r2
 8001b00:	449b      	add	fp, r3
 8001b02:	2300      	movs	r3, #0
 8001b04:	2500      	movs	r5, #0
 8001b06:	9302      	str	r3, [sp, #8]
 8001b08:	033c      	lsls	r4, r7, #12
 8001b0a:	007b      	lsls	r3, r7, #1
 8001b0c:	0ffa      	lsrs	r2, r7, #31
 8001b0e:	9601      	str	r6, [sp, #4]
 8001b10:	0b24      	lsrs	r4, r4, #12
 8001b12:	0d5b      	lsrs	r3, r3, #21
 8001b14:	9200      	str	r2, [sp, #0]
 8001b16:	d100      	bne.n	8001b1a <__aeabi_dmul+0x5e>
 8001b18:	e188      	b.n	8001e2c <__aeabi_dmul+0x370>
 8001b1a:	4abf      	ldr	r2, [pc, #764]	@ (8001e18 <__aeabi_dmul+0x35c>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dmul+0x66>
 8001b20:	e092      	b.n	8001c48 <__aeabi_dmul+0x18c>
 8001b22:	4abe      	ldr	r2, [pc, #760]	@ (8001e1c <__aeabi_dmul+0x360>)
 8001b24:	4694      	mov	ip, r2
 8001b26:	4463      	add	r3, ip
 8001b28:	449b      	add	fp, r3
 8001b2a:	2d0a      	cmp	r5, #10
 8001b2c:	dc42      	bgt.n	8001bb4 <__aeabi_dmul+0xf8>
 8001b2e:	00e4      	lsls	r4, r4, #3
 8001b30:	0f73      	lsrs	r3, r6, #29
 8001b32:	4323      	orrs	r3, r4
 8001b34:	2480      	movs	r4, #128	@ 0x80
 8001b36:	4649      	mov	r1, r9
 8001b38:	0424      	lsls	r4, r4, #16
 8001b3a:	431c      	orrs	r4, r3
 8001b3c:	00f3      	lsls	r3, r6, #3
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	9b00      	ldr	r3, [sp, #0]
 8001b42:	2000      	movs	r0, #0
 8001b44:	4059      	eors	r1, r3
 8001b46:	b2cb      	uxtb	r3, r1
 8001b48:	9303      	str	r3, [sp, #12]
 8001b4a:	2d02      	cmp	r5, #2
 8001b4c:	dc00      	bgt.n	8001b50 <__aeabi_dmul+0x94>
 8001b4e:	e094      	b.n	8001c7a <__aeabi_dmul+0x1be>
 8001b50:	2301      	movs	r3, #1
 8001b52:	40ab      	lsls	r3, r5
 8001b54:	001d      	movs	r5, r3
 8001b56:	23a6      	movs	r3, #166	@ 0xa6
 8001b58:	002a      	movs	r2, r5
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	421d      	tst	r5, r3
 8001b60:	d000      	beq.n	8001b64 <__aeabi_dmul+0xa8>
 8001b62:	e229      	b.n	8001fb8 <__aeabi_dmul+0x4fc>
 8001b64:	2390      	movs	r3, #144	@ 0x90
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	421d      	tst	r5, r3
 8001b6a:	d100      	bne.n	8001b6e <__aeabi_dmul+0xb2>
 8001b6c:	e24d      	b.n	800200a <__aeabi_dmul+0x54e>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	2480      	movs	r4, #128	@ 0x80
 8001b72:	4699      	mov	r9, r3
 8001b74:	0324      	lsls	r4, r4, #12
 8001b76:	4ba8      	ldr	r3, [pc, #672]	@ (8001e18 <__aeabi_dmul+0x35c>)
 8001b78:	0010      	movs	r0, r2
 8001b7a:	464a      	mov	r2, r9
 8001b7c:	051b      	lsls	r3, r3, #20
 8001b7e:	4323      	orrs	r3, r4
 8001b80:	07d2      	lsls	r2, r2, #31
 8001b82:	4313      	orrs	r3, r2
 8001b84:	0019      	movs	r1, r3
 8001b86:	b005      	add	sp, #20
 8001b88:	bcf0      	pop	{r4, r5, r6, r7}
 8001b8a:	46bb      	mov	fp, r7
 8001b8c:	46b2      	mov	sl, r6
 8001b8e:	46a9      	mov	r9, r5
 8001b90:	46a0      	mov	r8, r4
 8001b92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b94:	4652      	mov	r2, sl
 8001b96:	4302      	orrs	r2, r0
 8001b98:	4690      	mov	r8, r2
 8001b9a:	d000      	beq.n	8001b9e <__aeabi_dmul+0xe2>
 8001b9c:	e1ac      	b.n	8001ef8 <__aeabi_dmul+0x43c>
 8001b9e:	469b      	mov	fp, r3
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	4692      	mov	sl, r2
 8001ba4:	2508      	movs	r5, #8
 8001ba6:	9302      	str	r3, [sp, #8]
 8001ba8:	e7ae      	b.n	8001b08 <__aeabi_dmul+0x4c>
 8001baa:	9b00      	ldr	r3, [sp, #0]
 8001bac:	46a2      	mov	sl, r4
 8001bae:	4699      	mov	r9, r3
 8001bb0:	9b01      	ldr	r3, [sp, #4]
 8001bb2:	4698      	mov	r8, r3
 8001bb4:	9b02      	ldr	r3, [sp, #8]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d100      	bne.n	8001bbc <__aeabi_dmul+0x100>
 8001bba:	e1ca      	b.n	8001f52 <__aeabi_dmul+0x496>
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_dmul+0x106>
 8001bc0:	e192      	b.n	8001ee8 <__aeabi_dmul+0x42c>
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d110      	bne.n	8001be8 <__aeabi_dmul+0x12c>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	2400      	movs	r4, #0
 8001bca:	2200      	movs	r2, #0
 8001bcc:	e7d4      	b.n	8001b78 <__aeabi_dmul+0xbc>
 8001bce:	2201      	movs	r2, #1
 8001bd0:	087b      	lsrs	r3, r7, #1
 8001bd2:	403a      	ands	r2, r7
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	4652      	mov	r2, sl
 8001bd8:	07d2      	lsls	r2, r2, #31
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	4698      	mov	r8, r3
 8001bde:	4653      	mov	r3, sl
 8001be0:	085b      	lsrs	r3, r3, #1
 8001be2:	469a      	mov	sl, r3
 8001be4:	9b03      	ldr	r3, [sp, #12]
 8001be6:	4699      	mov	r9, r3
 8001be8:	465b      	mov	r3, fp
 8001bea:	1c58      	adds	r0, r3, #1
 8001bec:	2380      	movs	r3, #128	@ 0x80
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	445b      	add	r3, fp
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	dc00      	bgt.n	8001bf8 <__aeabi_dmul+0x13c>
 8001bf6:	e1b1      	b.n	8001f5c <__aeabi_dmul+0x4a0>
 8001bf8:	4642      	mov	r2, r8
 8001bfa:	0752      	lsls	r2, r2, #29
 8001bfc:	d00b      	beq.n	8001c16 <__aeabi_dmul+0x15a>
 8001bfe:	220f      	movs	r2, #15
 8001c00:	4641      	mov	r1, r8
 8001c02:	400a      	ands	r2, r1
 8001c04:	2a04      	cmp	r2, #4
 8001c06:	d006      	beq.n	8001c16 <__aeabi_dmul+0x15a>
 8001c08:	4642      	mov	r2, r8
 8001c0a:	1d11      	adds	r1, r2, #4
 8001c0c:	4541      	cmp	r1, r8
 8001c0e:	4192      	sbcs	r2, r2
 8001c10:	4688      	mov	r8, r1
 8001c12:	4252      	negs	r2, r2
 8001c14:	4492      	add	sl, r2
 8001c16:	4652      	mov	r2, sl
 8001c18:	01d2      	lsls	r2, r2, #7
 8001c1a:	d506      	bpl.n	8001c2a <__aeabi_dmul+0x16e>
 8001c1c:	4652      	mov	r2, sl
 8001c1e:	4b80      	ldr	r3, [pc, #512]	@ (8001e20 <__aeabi_dmul+0x364>)
 8001c20:	401a      	ands	r2, r3
 8001c22:	2380      	movs	r3, #128	@ 0x80
 8001c24:	4692      	mov	sl, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	18c3      	adds	r3, r0, r3
 8001c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e24 <__aeabi_dmul+0x368>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	dd00      	ble.n	8001c32 <__aeabi_dmul+0x176>
 8001c30:	e18f      	b.n	8001f52 <__aeabi_dmul+0x496>
 8001c32:	4642      	mov	r2, r8
 8001c34:	08d1      	lsrs	r1, r2, #3
 8001c36:	4652      	mov	r2, sl
 8001c38:	0752      	lsls	r2, r2, #29
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	4651      	mov	r1, sl
 8001c3e:	055b      	lsls	r3, r3, #21
 8001c40:	024c      	lsls	r4, r1, #9
 8001c42:	0b24      	lsrs	r4, r4, #12
 8001c44:	0d5b      	lsrs	r3, r3, #21
 8001c46:	e797      	b.n	8001b78 <__aeabi_dmul+0xbc>
 8001c48:	4b73      	ldr	r3, [pc, #460]	@ (8001e18 <__aeabi_dmul+0x35c>)
 8001c4a:	4326      	orrs	r6, r4
 8001c4c:	469c      	mov	ip, r3
 8001c4e:	44e3      	add	fp, ip
 8001c50:	2e00      	cmp	r6, #0
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dmul+0x19a>
 8001c54:	e16f      	b.n	8001f36 <__aeabi_dmul+0x47a>
 8001c56:	2303      	movs	r3, #3
 8001c58:	4649      	mov	r1, r9
 8001c5a:	431d      	orrs	r5, r3
 8001c5c:	9b00      	ldr	r3, [sp, #0]
 8001c5e:	4059      	eors	r1, r3
 8001c60:	b2cb      	uxtb	r3, r1
 8001c62:	9303      	str	r3, [sp, #12]
 8001c64:	2d0a      	cmp	r5, #10
 8001c66:	dd00      	ble.n	8001c6a <__aeabi_dmul+0x1ae>
 8001c68:	e133      	b.n	8001ed2 <__aeabi_dmul+0x416>
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	40ab      	lsls	r3, r5
 8001c6e:	001d      	movs	r5, r3
 8001c70:	2303      	movs	r3, #3
 8001c72:	9302      	str	r3, [sp, #8]
 8001c74:	2288      	movs	r2, #136	@ 0x88
 8001c76:	422a      	tst	r2, r5
 8001c78:	d197      	bne.n	8001baa <__aeabi_dmul+0xee>
 8001c7a:	4642      	mov	r2, r8
 8001c7c:	4643      	mov	r3, r8
 8001c7e:	0412      	lsls	r2, r2, #16
 8001c80:	0c12      	lsrs	r2, r2, #16
 8001c82:	0016      	movs	r6, r2
 8001c84:	9801      	ldr	r0, [sp, #4]
 8001c86:	0c1d      	lsrs	r5, r3, #16
 8001c88:	0c03      	lsrs	r3, r0, #16
 8001c8a:	0400      	lsls	r0, r0, #16
 8001c8c:	0c00      	lsrs	r0, r0, #16
 8001c8e:	4346      	muls	r6, r0
 8001c90:	46b4      	mov	ip, r6
 8001c92:	001e      	movs	r6, r3
 8001c94:	436e      	muls	r6, r5
 8001c96:	9600      	str	r6, [sp, #0]
 8001c98:	0016      	movs	r6, r2
 8001c9a:	0007      	movs	r7, r0
 8001c9c:	435e      	muls	r6, r3
 8001c9e:	4661      	mov	r1, ip
 8001ca0:	46b0      	mov	r8, r6
 8001ca2:	436f      	muls	r7, r5
 8001ca4:	0c0e      	lsrs	r6, r1, #16
 8001ca6:	44b8      	add	r8, r7
 8001ca8:	4446      	add	r6, r8
 8001caa:	42b7      	cmp	r7, r6
 8001cac:	d905      	bls.n	8001cba <__aeabi_dmul+0x1fe>
 8001cae:	2180      	movs	r1, #128	@ 0x80
 8001cb0:	0249      	lsls	r1, r1, #9
 8001cb2:	4688      	mov	r8, r1
 8001cb4:	9f00      	ldr	r7, [sp, #0]
 8001cb6:	4447      	add	r7, r8
 8001cb8:	9700      	str	r7, [sp, #0]
 8001cba:	4661      	mov	r1, ip
 8001cbc:	0409      	lsls	r1, r1, #16
 8001cbe:	0c09      	lsrs	r1, r1, #16
 8001cc0:	0c37      	lsrs	r7, r6, #16
 8001cc2:	0436      	lsls	r6, r6, #16
 8001cc4:	468c      	mov	ip, r1
 8001cc6:	0031      	movs	r1, r6
 8001cc8:	4461      	add	r1, ip
 8001cca:	9101      	str	r1, [sp, #4]
 8001ccc:	0011      	movs	r1, r2
 8001cce:	0c26      	lsrs	r6, r4, #16
 8001cd0:	0424      	lsls	r4, r4, #16
 8001cd2:	0c24      	lsrs	r4, r4, #16
 8001cd4:	4361      	muls	r1, r4
 8001cd6:	468c      	mov	ip, r1
 8001cd8:	0021      	movs	r1, r4
 8001cda:	4369      	muls	r1, r5
 8001cdc:	4689      	mov	r9, r1
 8001cde:	4661      	mov	r1, ip
 8001ce0:	0c09      	lsrs	r1, r1, #16
 8001ce2:	4688      	mov	r8, r1
 8001ce4:	4372      	muls	r2, r6
 8001ce6:	444a      	add	r2, r9
 8001ce8:	4442      	add	r2, r8
 8001cea:	4375      	muls	r5, r6
 8001cec:	4591      	cmp	r9, r2
 8001cee:	d903      	bls.n	8001cf8 <__aeabi_dmul+0x23c>
 8001cf0:	2180      	movs	r1, #128	@ 0x80
 8001cf2:	0249      	lsls	r1, r1, #9
 8001cf4:	4688      	mov	r8, r1
 8001cf6:	4445      	add	r5, r8
 8001cf8:	0c11      	lsrs	r1, r2, #16
 8001cfa:	4688      	mov	r8, r1
 8001cfc:	4661      	mov	r1, ip
 8001cfe:	0409      	lsls	r1, r1, #16
 8001d00:	0c09      	lsrs	r1, r1, #16
 8001d02:	468c      	mov	ip, r1
 8001d04:	0412      	lsls	r2, r2, #16
 8001d06:	4462      	add	r2, ip
 8001d08:	18b9      	adds	r1, r7, r2
 8001d0a:	9102      	str	r1, [sp, #8]
 8001d0c:	4651      	mov	r1, sl
 8001d0e:	0c09      	lsrs	r1, r1, #16
 8001d10:	468c      	mov	ip, r1
 8001d12:	4651      	mov	r1, sl
 8001d14:	040f      	lsls	r7, r1, #16
 8001d16:	0c3f      	lsrs	r7, r7, #16
 8001d18:	0039      	movs	r1, r7
 8001d1a:	4341      	muls	r1, r0
 8001d1c:	4445      	add	r5, r8
 8001d1e:	4688      	mov	r8, r1
 8001d20:	4661      	mov	r1, ip
 8001d22:	4341      	muls	r1, r0
 8001d24:	468a      	mov	sl, r1
 8001d26:	4641      	mov	r1, r8
 8001d28:	4660      	mov	r0, ip
 8001d2a:	0c09      	lsrs	r1, r1, #16
 8001d2c:	4689      	mov	r9, r1
 8001d2e:	4358      	muls	r0, r3
 8001d30:	437b      	muls	r3, r7
 8001d32:	4453      	add	r3, sl
 8001d34:	444b      	add	r3, r9
 8001d36:	459a      	cmp	sl, r3
 8001d38:	d903      	bls.n	8001d42 <__aeabi_dmul+0x286>
 8001d3a:	2180      	movs	r1, #128	@ 0x80
 8001d3c:	0249      	lsls	r1, r1, #9
 8001d3e:	4689      	mov	r9, r1
 8001d40:	4448      	add	r0, r9
 8001d42:	0c19      	lsrs	r1, r3, #16
 8001d44:	4689      	mov	r9, r1
 8001d46:	4641      	mov	r1, r8
 8001d48:	0409      	lsls	r1, r1, #16
 8001d4a:	0c09      	lsrs	r1, r1, #16
 8001d4c:	4688      	mov	r8, r1
 8001d4e:	0039      	movs	r1, r7
 8001d50:	4361      	muls	r1, r4
 8001d52:	041b      	lsls	r3, r3, #16
 8001d54:	4443      	add	r3, r8
 8001d56:	4688      	mov	r8, r1
 8001d58:	4661      	mov	r1, ip
 8001d5a:	434c      	muls	r4, r1
 8001d5c:	4371      	muls	r1, r6
 8001d5e:	468c      	mov	ip, r1
 8001d60:	4641      	mov	r1, r8
 8001d62:	4377      	muls	r7, r6
 8001d64:	0c0e      	lsrs	r6, r1, #16
 8001d66:	193f      	adds	r7, r7, r4
 8001d68:	19f6      	adds	r6, r6, r7
 8001d6a:	4448      	add	r0, r9
 8001d6c:	42b4      	cmp	r4, r6
 8001d6e:	d903      	bls.n	8001d78 <__aeabi_dmul+0x2bc>
 8001d70:	2180      	movs	r1, #128	@ 0x80
 8001d72:	0249      	lsls	r1, r1, #9
 8001d74:	4689      	mov	r9, r1
 8001d76:	44cc      	add	ip, r9
 8001d78:	9902      	ldr	r1, [sp, #8]
 8001d7a:	9f00      	ldr	r7, [sp, #0]
 8001d7c:	4689      	mov	r9, r1
 8001d7e:	0431      	lsls	r1, r6, #16
 8001d80:	444f      	add	r7, r9
 8001d82:	4689      	mov	r9, r1
 8001d84:	4641      	mov	r1, r8
 8001d86:	4297      	cmp	r7, r2
 8001d88:	4192      	sbcs	r2, r2
 8001d8a:	040c      	lsls	r4, r1, #16
 8001d8c:	0c24      	lsrs	r4, r4, #16
 8001d8e:	444c      	add	r4, r9
 8001d90:	18ff      	adds	r7, r7, r3
 8001d92:	4252      	negs	r2, r2
 8001d94:	1964      	adds	r4, r4, r5
 8001d96:	18a1      	adds	r1, r4, r2
 8001d98:	429f      	cmp	r7, r3
 8001d9a:	419b      	sbcs	r3, r3
 8001d9c:	4688      	mov	r8, r1
 8001d9e:	4682      	mov	sl, r0
 8001da0:	425b      	negs	r3, r3
 8001da2:	4699      	mov	r9, r3
 8001da4:	4590      	cmp	r8, r2
 8001da6:	4192      	sbcs	r2, r2
 8001da8:	42ac      	cmp	r4, r5
 8001daa:	41a4      	sbcs	r4, r4
 8001dac:	44c2      	add	sl, r8
 8001dae:	44d1      	add	r9, sl
 8001db0:	4252      	negs	r2, r2
 8001db2:	4264      	negs	r4, r4
 8001db4:	4314      	orrs	r4, r2
 8001db6:	4599      	cmp	r9, r3
 8001db8:	419b      	sbcs	r3, r3
 8001dba:	4582      	cmp	sl, r0
 8001dbc:	4192      	sbcs	r2, r2
 8001dbe:	425b      	negs	r3, r3
 8001dc0:	4252      	negs	r2, r2
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	464a      	mov	r2, r9
 8001dc6:	0c36      	lsrs	r6, r6, #16
 8001dc8:	19a4      	adds	r4, r4, r6
 8001dca:	18e3      	adds	r3, r4, r3
 8001dcc:	4463      	add	r3, ip
 8001dce:	025b      	lsls	r3, r3, #9
 8001dd0:	0dd2      	lsrs	r2, r2, #23
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	9901      	ldr	r1, [sp, #4]
 8001dd6:	4692      	mov	sl, r2
 8001dd8:	027a      	lsls	r2, r7, #9
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	1e50      	subs	r0, r2, #1
 8001dde:	4182      	sbcs	r2, r0
 8001de0:	0dff      	lsrs	r7, r7, #23
 8001de2:	4317      	orrs	r7, r2
 8001de4:	464a      	mov	r2, r9
 8001de6:	0252      	lsls	r2, r2, #9
 8001de8:	4317      	orrs	r7, r2
 8001dea:	46b8      	mov	r8, r7
 8001dec:	01db      	lsls	r3, r3, #7
 8001dee:	d500      	bpl.n	8001df2 <__aeabi_dmul+0x336>
 8001df0:	e6ed      	b.n	8001bce <__aeabi_dmul+0x112>
 8001df2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e28 <__aeabi_dmul+0x36c>)
 8001df4:	9a03      	ldr	r2, [sp, #12]
 8001df6:	445b      	add	r3, fp
 8001df8:	4691      	mov	r9, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	dc00      	bgt.n	8001e00 <__aeabi_dmul+0x344>
 8001dfe:	e0ac      	b.n	8001f5a <__aeabi_dmul+0x49e>
 8001e00:	003a      	movs	r2, r7
 8001e02:	0752      	lsls	r2, r2, #29
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dmul+0x34c>
 8001e06:	e710      	b.n	8001c2a <__aeabi_dmul+0x16e>
 8001e08:	220f      	movs	r2, #15
 8001e0a:	4658      	mov	r0, fp
 8001e0c:	403a      	ands	r2, r7
 8001e0e:	2a04      	cmp	r2, #4
 8001e10:	d000      	beq.n	8001e14 <__aeabi_dmul+0x358>
 8001e12:	e6f9      	b.n	8001c08 <__aeabi_dmul+0x14c>
 8001e14:	e709      	b.n	8001c2a <__aeabi_dmul+0x16e>
 8001e16:	46c0      	nop			@ (mov r8, r8)
 8001e18:	000007ff 	.word	0x000007ff
 8001e1c:	fffffc01 	.word	0xfffffc01
 8001e20:	feffffff 	.word	0xfeffffff
 8001e24:	000007fe 	.word	0x000007fe
 8001e28:	000003ff 	.word	0x000003ff
 8001e2c:	0022      	movs	r2, r4
 8001e2e:	4332      	orrs	r2, r6
 8001e30:	d06f      	beq.n	8001f12 <__aeabi_dmul+0x456>
 8001e32:	2c00      	cmp	r4, #0
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dmul+0x37c>
 8001e36:	e0c2      	b.n	8001fbe <__aeabi_dmul+0x502>
 8001e38:	0020      	movs	r0, r4
 8001e3a:	f000 fea9 	bl	8002b90 <__clzsi2>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	0003      	movs	r3, r0
 8001e42:	3a0b      	subs	r2, #11
 8001e44:	201d      	movs	r0, #29
 8001e46:	1a82      	subs	r2, r0, r2
 8001e48:	0030      	movs	r0, r6
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	40d0      	lsrs	r0, r2
 8001e4e:	3908      	subs	r1, #8
 8001e50:	408c      	lsls	r4, r1
 8001e52:	0002      	movs	r2, r0
 8001e54:	4322      	orrs	r2, r4
 8001e56:	0034      	movs	r4, r6
 8001e58:	408c      	lsls	r4, r1
 8001e5a:	4659      	mov	r1, fp
 8001e5c:	1acb      	subs	r3, r1, r3
 8001e5e:	4986      	ldr	r1, [pc, #536]	@ (8002078 <__aeabi_dmul+0x5bc>)
 8001e60:	468b      	mov	fp, r1
 8001e62:	449b      	add	fp, r3
 8001e64:	2d0a      	cmp	r5, #10
 8001e66:	dd00      	ble.n	8001e6a <__aeabi_dmul+0x3ae>
 8001e68:	e6a4      	b.n	8001bb4 <__aeabi_dmul+0xf8>
 8001e6a:	4649      	mov	r1, r9
 8001e6c:	9b00      	ldr	r3, [sp, #0]
 8001e6e:	9401      	str	r4, [sp, #4]
 8001e70:	4059      	eors	r1, r3
 8001e72:	b2cb      	uxtb	r3, r1
 8001e74:	0014      	movs	r4, r2
 8001e76:	2000      	movs	r0, #0
 8001e78:	9303      	str	r3, [sp, #12]
 8001e7a:	2d02      	cmp	r5, #2
 8001e7c:	dd00      	ble.n	8001e80 <__aeabi_dmul+0x3c4>
 8001e7e:	e667      	b.n	8001b50 <__aeabi_dmul+0x94>
 8001e80:	e6fb      	b.n	8001c7a <__aeabi_dmul+0x1be>
 8001e82:	4653      	mov	r3, sl
 8001e84:	4303      	orrs	r3, r0
 8001e86:	4698      	mov	r8, r3
 8001e88:	d03c      	beq.n	8001f04 <__aeabi_dmul+0x448>
 8001e8a:	4653      	mov	r3, sl
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d100      	bne.n	8001e92 <__aeabi_dmul+0x3d6>
 8001e90:	e0a3      	b.n	8001fda <__aeabi_dmul+0x51e>
 8001e92:	4650      	mov	r0, sl
 8001e94:	f000 fe7c 	bl	8002b90 <__clzsi2>
 8001e98:	230b      	movs	r3, #11
 8001e9a:	425b      	negs	r3, r3
 8001e9c:	469c      	mov	ip, r3
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	4484      	add	ip, r0
 8001ea2:	0011      	movs	r1, r2
 8001ea4:	4650      	mov	r0, sl
 8001ea6:	3908      	subs	r1, #8
 8001ea8:	4088      	lsls	r0, r1
 8001eaa:	231d      	movs	r3, #29
 8001eac:	4680      	mov	r8, r0
 8001eae:	4660      	mov	r0, ip
 8001eb0:	1a1b      	subs	r3, r3, r0
 8001eb2:	0020      	movs	r0, r4
 8001eb4:	40d8      	lsrs	r0, r3
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	4640      	mov	r0, r8
 8001eba:	4303      	orrs	r3, r0
 8001ebc:	469a      	mov	sl, r3
 8001ebe:	0023      	movs	r3, r4
 8001ec0:	408b      	lsls	r3, r1
 8001ec2:	4698      	mov	r8, r3
 8001ec4:	4b6c      	ldr	r3, [pc, #432]	@ (8002078 <__aeabi_dmul+0x5bc>)
 8001ec6:	2500      	movs	r5, #0
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	469b      	mov	fp, r3
 8001ecc:	2300      	movs	r3, #0
 8001ece:	9302      	str	r3, [sp, #8]
 8001ed0:	e61a      	b.n	8001b08 <__aeabi_dmul+0x4c>
 8001ed2:	2d0f      	cmp	r5, #15
 8001ed4:	d000      	beq.n	8001ed8 <__aeabi_dmul+0x41c>
 8001ed6:	e0c9      	b.n	800206c <__aeabi_dmul+0x5b0>
 8001ed8:	2380      	movs	r3, #128	@ 0x80
 8001eda:	4652      	mov	r2, sl
 8001edc:	031b      	lsls	r3, r3, #12
 8001ede:	421a      	tst	r2, r3
 8001ee0:	d002      	beq.n	8001ee8 <__aeabi_dmul+0x42c>
 8001ee2:	421c      	tst	r4, r3
 8001ee4:	d100      	bne.n	8001ee8 <__aeabi_dmul+0x42c>
 8001ee6:	e092      	b.n	800200e <__aeabi_dmul+0x552>
 8001ee8:	2480      	movs	r4, #128	@ 0x80
 8001eea:	4653      	mov	r3, sl
 8001eec:	0324      	lsls	r4, r4, #12
 8001eee:	431c      	orrs	r4, r3
 8001ef0:	0324      	lsls	r4, r4, #12
 8001ef2:	4642      	mov	r2, r8
 8001ef4:	0b24      	lsrs	r4, r4, #12
 8001ef6:	e63e      	b.n	8001b76 <__aeabi_dmul+0xba>
 8001ef8:	469b      	mov	fp, r3
 8001efa:	2303      	movs	r3, #3
 8001efc:	4680      	mov	r8, r0
 8001efe:	250c      	movs	r5, #12
 8001f00:	9302      	str	r3, [sp, #8]
 8001f02:	e601      	b.n	8001b08 <__aeabi_dmul+0x4c>
 8001f04:	2300      	movs	r3, #0
 8001f06:	469a      	mov	sl, r3
 8001f08:	469b      	mov	fp, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	2504      	movs	r5, #4
 8001f0e:	9302      	str	r3, [sp, #8]
 8001f10:	e5fa      	b.n	8001b08 <__aeabi_dmul+0x4c>
 8001f12:	2101      	movs	r1, #1
 8001f14:	430d      	orrs	r5, r1
 8001f16:	2d0a      	cmp	r5, #10
 8001f18:	dd00      	ble.n	8001f1c <__aeabi_dmul+0x460>
 8001f1a:	e64b      	b.n	8001bb4 <__aeabi_dmul+0xf8>
 8001f1c:	4649      	mov	r1, r9
 8001f1e:	9800      	ldr	r0, [sp, #0]
 8001f20:	4041      	eors	r1, r0
 8001f22:	b2c9      	uxtb	r1, r1
 8001f24:	9103      	str	r1, [sp, #12]
 8001f26:	2d02      	cmp	r5, #2
 8001f28:	dc00      	bgt.n	8001f2c <__aeabi_dmul+0x470>
 8001f2a:	e096      	b.n	800205a <__aeabi_dmul+0x59e>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	2400      	movs	r4, #0
 8001f30:	2001      	movs	r0, #1
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	e60c      	b.n	8001b50 <__aeabi_dmul+0x94>
 8001f36:	4649      	mov	r1, r9
 8001f38:	2302      	movs	r3, #2
 8001f3a:	9a00      	ldr	r2, [sp, #0]
 8001f3c:	432b      	orrs	r3, r5
 8001f3e:	4051      	eors	r1, r2
 8001f40:	b2ca      	uxtb	r2, r1
 8001f42:	9203      	str	r2, [sp, #12]
 8001f44:	2b0a      	cmp	r3, #10
 8001f46:	dd00      	ble.n	8001f4a <__aeabi_dmul+0x48e>
 8001f48:	e634      	b.n	8001bb4 <__aeabi_dmul+0xf8>
 8001f4a:	2d00      	cmp	r5, #0
 8001f4c:	d157      	bne.n	8001ffe <__aeabi_dmul+0x542>
 8001f4e:	9b03      	ldr	r3, [sp, #12]
 8001f50:	4699      	mov	r9, r3
 8001f52:	2400      	movs	r4, #0
 8001f54:	2200      	movs	r2, #0
 8001f56:	4b49      	ldr	r3, [pc, #292]	@ (800207c <__aeabi_dmul+0x5c0>)
 8001f58:	e60e      	b.n	8001b78 <__aeabi_dmul+0xbc>
 8001f5a:	4658      	mov	r0, fp
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	1ac9      	subs	r1, r1, r3
 8001f60:	2938      	cmp	r1, #56	@ 0x38
 8001f62:	dd00      	ble.n	8001f66 <__aeabi_dmul+0x4aa>
 8001f64:	e62f      	b.n	8001bc6 <__aeabi_dmul+0x10a>
 8001f66:	291f      	cmp	r1, #31
 8001f68:	dd56      	ble.n	8002018 <__aeabi_dmul+0x55c>
 8001f6a:	221f      	movs	r2, #31
 8001f6c:	4654      	mov	r4, sl
 8001f6e:	4252      	negs	r2, r2
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	40dc      	lsrs	r4, r3
 8001f74:	2920      	cmp	r1, #32
 8001f76:	d007      	beq.n	8001f88 <__aeabi_dmul+0x4cc>
 8001f78:	4b41      	ldr	r3, [pc, #260]	@ (8002080 <__aeabi_dmul+0x5c4>)
 8001f7a:	4642      	mov	r2, r8
 8001f7c:	469c      	mov	ip, r3
 8001f7e:	4653      	mov	r3, sl
 8001f80:	4460      	add	r0, ip
 8001f82:	4083      	lsls	r3, r0
 8001f84:	431a      	orrs	r2, r3
 8001f86:	4690      	mov	r8, r2
 8001f88:	4642      	mov	r2, r8
 8001f8a:	2107      	movs	r1, #7
 8001f8c:	1e53      	subs	r3, r2, #1
 8001f8e:	419a      	sbcs	r2, r3
 8001f90:	000b      	movs	r3, r1
 8001f92:	4322      	orrs	r2, r4
 8001f94:	4013      	ands	r3, r2
 8001f96:	2400      	movs	r4, #0
 8001f98:	4211      	tst	r1, r2
 8001f9a:	d009      	beq.n	8001fb0 <__aeabi_dmul+0x4f4>
 8001f9c:	230f      	movs	r3, #15
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b04      	cmp	r3, #4
 8001fa2:	d05d      	beq.n	8002060 <__aeabi_dmul+0x5a4>
 8001fa4:	1d11      	adds	r1, r2, #4
 8001fa6:	4291      	cmp	r1, r2
 8001fa8:	419b      	sbcs	r3, r3
 8001faa:	000a      	movs	r2, r1
 8001fac:	425b      	negs	r3, r3
 8001fae:	075b      	lsls	r3, r3, #29
 8001fb0:	08d2      	lsrs	r2, r2, #3
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	e5df      	b.n	8001b78 <__aeabi_dmul+0xbc>
 8001fb8:	9b03      	ldr	r3, [sp, #12]
 8001fba:	4699      	mov	r9, r3
 8001fbc:	e5fa      	b.n	8001bb4 <__aeabi_dmul+0xf8>
 8001fbe:	9801      	ldr	r0, [sp, #4]
 8001fc0:	f000 fde6 	bl	8002b90 <__clzsi2>
 8001fc4:	0002      	movs	r2, r0
 8001fc6:	0003      	movs	r3, r0
 8001fc8:	3215      	adds	r2, #21
 8001fca:	3320      	adds	r3, #32
 8001fcc:	2a1c      	cmp	r2, #28
 8001fce:	dc00      	bgt.n	8001fd2 <__aeabi_dmul+0x516>
 8001fd0:	e738      	b.n	8001e44 <__aeabi_dmul+0x388>
 8001fd2:	9a01      	ldr	r2, [sp, #4]
 8001fd4:	3808      	subs	r0, #8
 8001fd6:	4082      	lsls	r2, r0
 8001fd8:	e73f      	b.n	8001e5a <__aeabi_dmul+0x39e>
 8001fda:	f000 fdd9 	bl	8002b90 <__clzsi2>
 8001fde:	2315      	movs	r3, #21
 8001fe0:	469c      	mov	ip, r3
 8001fe2:	4484      	add	ip, r0
 8001fe4:	0002      	movs	r2, r0
 8001fe6:	4663      	mov	r3, ip
 8001fe8:	3220      	adds	r2, #32
 8001fea:	2b1c      	cmp	r3, #28
 8001fec:	dc00      	bgt.n	8001ff0 <__aeabi_dmul+0x534>
 8001fee:	e758      	b.n	8001ea2 <__aeabi_dmul+0x3e6>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	4698      	mov	r8, r3
 8001ff4:	0023      	movs	r3, r4
 8001ff6:	3808      	subs	r0, #8
 8001ff8:	4083      	lsls	r3, r0
 8001ffa:	469a      	mov	sl, r3
 8001ffc:	e762      	b.n	8001ec4 <__aeabi_dmul+0x408>
 8001ffe:	001d      	movs	r5, r3
 8002000:	2300      	movs	r3, #0
 8002002:	2400      	movs	r4, #0
 8002004:	2002      	movs	r0, #2
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	e5a2      	b.n	8001b50 <__aeabi_dmul+0x94>
 800200a:	9002      	str	r0, [sp, #8]
 800200c:	e632      	b.n	8001c74 <__aeabi_dmul+0x1b8>
 800200e:	431c      	orrs	r4, r3
 8002010:	9b00      	ldr	r3, [sp, #0]
 8002012:	9a01      	ldr	r2, [sp, #4]
 8002014:	4699      	mov	r9, r3
 8002016:	e5ae      	b.n	8001b76 <__aeabi_dmul+0xba>
 8002018:	4b1a      	ldr	r3, [pc, #104]	@ (8002084 <__aeabi_dmul+0x5c8>)
 800201a:	4652      	mov	r2, sl
 800201c:	18c3      	adds	r3, r0, r3
 800201e:	4640      	mov	r0, r8
 8002020:	409a      	lsls	r2, r3
 8002022:	40c8      	lsrs	r0, r1
 8002024:	4302      	orrs	r2, r0
 8002026:	4640      	mov	r0, r8
 8002028:	4098      	lsls	r0, r3
 800202a:	0003      	movs	r3, r0
 800202c:	1e58      	subs	r0, r3, #1
 800202e:	4183      	sbcs	r3, r0
 8002030:	4654      	mov	r4, sl
 8002032:	431a      	orrs	r2, r3
 8002034:	40cc      	lsrs	r4, r1
 8002036:	0753      	lsls	r3, r2, #29
 8002038:	d009      	beq.n	800204e <__aeabi_dmul+0x592>
 800203a:	230f      	movs	r3, #15
 800203c:	4013      	ands	r3, r2
 800203e:	2b04      	cmp	r3, #4
 8002040:	d005      	beq.n	800204e <__aeabi_dmul+0x592>
 8002042:	1d13      	adds	r3, r2, #4
 8002044:	4293      	cmp	r3, r2
 8002046:	4192      	sbcs	r2, r2
 8002048:	4252      	negs	r2, r2
 800204a:	18a4      	adds	r4, r4, r2
 800204c:	001a      	movs	r2, r3
 800204e:	0223      	lsls	r3, r4, #8
 8002050:	d508      	bpl.n	8002064 <__aeabi_dmul+0x5a8>
 8002052:	2301      	movs	r3, #1
 8002054:	2400      	movs	r4, #0
 8002056:	2200      	movs	r2, #0
 8002058:	e58e      	b.n	8001b78 <__aeabi_dmul+0xbc>
 800205a:	4689      	mov	r9, r1
 800205c:	2400      	movs	r4, #0
 800205e:	e58b      	b.n	8001b78 <__aeabi_dmul+0xbc>
 8002060:	2300      	movs	r3, #0
 8002062:	e7a5      	b.n	8001fb0 <__aeabi_dmul+0x4f4>
 8002064:	0763      	lsls	r3, r4, #29
 8002066:	0264      	lsls	r4, r4, #9
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	e7a1      	b.n	8001fb0 <__aeabi_dmul+0x4f4>
 800206c:	9b00      	ldr	r3, [sp, #0]
 800206e:	46a2      	mov	sl, r4
 8002070:	4699      	mov	r9, r3
 8002072:	9b01      	ldr	r3, [sp, #4]
 8002074:	4698      	mov	r8, r3
 8002076:	e737      	b.n	8001ee8 <__aeabi_dmul+0x42c>
 8002078:	fffffc0d 	.word	0xfffffc0d
 800207c:	000007ff 	.word	0x000007ff
 8002080:	0000043e 	.word	0x0000043e
 8002084:	0000041e 	.word	0x0000041e

08002088 <__aeabi_dsub>:
 8002088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800208a:	4657      	mov	r7, sl
 800208c:	464e      	mov	r6, r9
 800208e:	4645      	mov	r5, r8
 8002090:	46de      	mov	lr, fp
 8002092:	b5e0      	push	{r5, r6, r7, lr}
 8002094:	b083      	sub	sp, #12
 8002096:	9000      	str	r0, [sp, #0]
 8002098:	9101      	str	r1, [sp, #4]
 800209a:	030c      	lsls	r4, r1, #12
 800209c:	004d      	lsls	r5, r1, #1
 800209e:	0fce      	lsrs	r6, r1, #31
 80020a0:	0a61      	lsrs	r1, r4, #9
 80020a2:	9c00      	ldr	r4, [sp, #0]
 80020a4:	005f      	lsls	r7, r3, #1
 80020a6:	0f64      	lsrs	r4, r4, #29
 80020a8:	430c      	orrs	r4, r1
 80020aa:	9900      	ldr	r1, [sp, #0]
 80020ac:	9200      	str	r2, [sp, #0]
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	00c8      	lsls	r0, r1, #3
 80020b2:	0319      	lsls	r1, r3, #12
 80020b4:	0d7b      	lsrs	r3, r7, #21
 80020b6:	4699      	mov	r9, r3
 80020b8:	9b01      	ldr	r3, [sp, #4]
 80020ba:	4fcc      	ldr	r7, [pc, #816]	@ (80023ec <__aeabi_dsub+0x364>)
 80020bc:	0fdb      	lsrs	r3, r3, #31
 80020be:	469c      	mov	ip, r3
 80020c0:	0a4b      	lsrs	r3, r1, #9
 80020c2:	9900      	ldr	r1, [sp, #0]
 80020c4:	4680      	mov	r8, r0
 80020c6:	0f49      	lsrs	r1, r1, #29
 80020c8:	4319      	orrs	r1, r3
 80020ca:	9b00      	ldr	r3, [sp, #0]
 80020cc:	468b      	mov	fp, r1
 80020ce:	00da      	lsls	r2, r3, #3
 80020d0:	4692      	mov	sl, r2
 80020d2:	0d6d      	lsrs	r5, r5, #21
 80020d4:	45b9      	cmp	r9, r7
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x52>
 80020d8:	e0bf      	b.n	800225a <__aeabi_dsub+0x1d2>
 80020da:	2301      	movs	r3, #1
 80020dc:	4661      	mov	r1, ip
 80020de:	4059      	eors	r1, r3
 80020e0:	464b      	mov	r3, r9
 80020e2:	468c      	mov	ip, r1
 80020e4:	1aeb      	subs	r3, r5, r3
 80020e6:	428e      	cmp	r6, r1
 80020e8:	d075      	beq.n	80021d6 <__aeabi_dsub+0x14e>
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	dc00      	bgt.n	80020f0 <__aeabi_dsub+0x68>
 80020ee:	e2a3      	b.n	8002638 <__aeabi_dsub+0x5b0>
 80020f0:	4649      	mov	r1, r9
 80020f2:	2900      	cmp	r1, #0
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dsub+0x70>
 80020f6:	e0ce      	b.n	8002296 <__aeabi_dsub+0x20e>
 80020f8:	42bd      	cmp	r5, r7
 80020fa:	d100      	bne.n	80020fe <__aeabi_dsub+0x76>
 80020fc:	e200      	b.n	8002500 <__aeabi_dsub+0x478>
 80020fe:	2701      	movs	r7, #1
 8002100:	2b38      	cmp	r3, #56	@ 0x38
 8002102:	dc19      	bgt.n	8002138 <__aeabi_dsub+0xb0>
 8002104:	2780      	movs	r7, #128	@ 0x80
 8002106:	4659      	mov	r1, fp
 8002108:	043f      	lsls	r7, r7, #16
 800210a:	4339      	orrs	r1, r7
 800210c:	468b      	mov	fp, r1
 800210e:	2b1f      	cmp	r3, #31
 8002110:	dd00      	ble.n	8002114 <__aeabi_dsub+0x8c>
 8002112:	e1fa      	b.n	800250a <__aeabi_dsub+0x482>
 8002114:	2720      	movs	r7, #32
 8002116:	1af9      	subs	r1, r7, r3
 8002118:	468c      	mov	ip, r1
 800211a:	4659      	mov	r1, fp
 800211c:	4667      	mov	r7, ip
 800211e:	40b9      	lsls	r1, r7
 8002120:	000f      	movs	r7, r1
 8002122:	0011      	movs	r1, r2
 8002124:	40d9      	lsrs	r1, r3
 8002126:	430f      	orrs	r7, r1
 8002128:	4661      	mov	r1, ip
 800212a:	408a      	lsls	r2, r1
 800212c:	1e51      	subs	r1, r2, #1
 800212e:	418a      	sbcs	r2, r1
 8002130:	4659      	mov	r1, fp
 8002132:	40d9      	lsrs	r1, r3
 8002134:	4317      	orrs	r7, r2
 8002136:	1a64      	subs	r4, r4, r1
 8002138:	1bc7      	subs	r7, r0, r7
 800213a:	42b8      	cmp	r0, r7
 800213c:	4180      	sbcs	r0, r0
 800213e:	4240      	negs	r0, r0
 8002140:	1a24      	subs	r4, r4, r0
 8002142:	0223      	lsls	r3, r4, #8
 8002144:	d400      	bmi.n	8002148 <__aeabi_dsub+0xc0>
 8002146:	e140      	b.n	80023ca <__aeabi_dsub+0x342>
 8002148:	0264      	lsls	r4, r4, #9
 800214a:	0a64      	lsrs	r4, r4, #9
 800214c:	2c00      	cmp	r4, #0
 800214e:	d100      	bne.n	8002152 <__aeabi_dsub+0xca>
 8002150:	e154      	b.n	80023fc <__aeabi_dsub+0x374>
 8002152:	0020      	movs	r0, r4
 8002154:	f000 fd1c 	bl	8002b90 <__clzsi2>
 8002158:	0003      	movs	r3, r0
 800215a:	3b08      	subs	r3, #8
 800215c:	2120      	movs	r1, #32
 800215e:	0038      	movs	r0, r7
 8002160:	1aca      	subs	r2, r1, r3
 8002162:	40d0      	lsrs	r0, r2
 8002164:	409c      	lsls	r4, r3
 8002166:	0002      	movs	r2, r0
 8002168:	409f      	lsls	r7, r3
 800216a:	4322      	orrs	r2, r4
 800216c:	429d      	cmp	r5, r3
 800216e:	dd00      	ble.n	8002172 <__aeabi_dsub+0xea>
 8002170:	e1a6      	b.n	80024c0 <__aeabi_dsub+0x438>
 8002172:	1b58      	subs	r0, r3, r5
 8002174:	3001      	adds	r0, #1
 8002176:	1a09      	subs	r1, r1, r0
 8002178:	003c      	movs	r4, r7
 800217a:	408f      	lsls	r7, r1
 800217c:	40c4      	lsrs	r4, r0
 800217e:	1e7b      	subs	r3, r7, #1
 8002180:	419f      	sbcs	r7, r3
 8002182:	0013      	movs	r3, r2
 8002184:	408b      	lsls	r3, r1
 8002186:	4327      	orrs	r7, r4
 8002188:	431f      	orrs	r7, r3
 800218a:	40c2      	lsrs	r2, r0
 800218c:	003b      	movs	r3, r7
 800218e:	0014      	movs	r4, r2
 8002190:	2500      	movs	r5, #0
 8002192:	4313      	orrs	r3, r2
 8002194:	d100      	bne.n	8002198 <__aeabi_dsub+0x110>
 8002196:	e1f7      	b.n	8002588 <__aeabi_dsub+0x500>
 8002198:	077b      	lsls	r3, r7, #29
 800219a:	d100      	bne.n	800219e <__aeabi_dsub+0x116>
 800219c:	e377      	b.n	800288e <__aeabi_dsub+0x806>
 800219e:	230f      	movs	r3, #15
 80021a0:	0038      	movs	r0, r7
 80021a2:	403b      	ands	r3, r7
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d004      	beq.n	80021b2 <__aeabi_dsub+0x12a>
 80021a8:	1d38      	adds	r0, r7, #4
 80021aa:	42b8      	cmp	r0, r7
 80021ac:	41bf      	sbcs	r7, r7
 80021ae:	427f      	negs	r7, r7
 80021b0:	19e4      	adds	r4, r4, r7
 80021b2:	0223      	lsls	r3, r4, #8
 80021b4:	d400      	bmi.n	80021b8 <__aeabi_dsub+0x130>
 80021b6:	e368      	b.n	800288a <__aeabi_dsub+0x802>
 80021b8:	4b8c      	ldr	r3, [pc, #560]	@ (80023ec <__aeabi_dsub+0x364>)
 80021ba:	3501      	adds	r5, #1
 80021bc:	429d      	cmp	r5, r3
 80021be:	d100      	bne.n	80021c2 <__aeabi_dsub+0x13a>
 80021c0:	e0f4      	b.n	80023ac <__aeabi_dsub+0x324>
 80021c2:	4b8b      	ldr	r3, [pc, #556]	@ (80023f0 <__aeabi_dsub+0x368>)
 80021c4:	056d      	lsls	r5, r5, #21
 80021c6:	401c      	ands	r4, r3
 80021c8:	0d6d      	lsrs	r5, r5, #21
 80021ca:	0767      	lsls	r7, r4, #29
 80021cc:	08c0      	lsrs	r0, r0, #3
 80021ce:	0264      	lsls	r4, r4, #9
 80021d0:	4307      	orrs	r7, r0
 80021d2:	0b24      	lsrs	r4, r4, #12
 80021d4:	e0ec      	b.n	80023b0 <__aeabi_dsub+0x328>
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	dc00      	bgt.n	80021dc <__aeabi_dsub+0x154>
 80021da:	e329      	b.n	8002830 <__aeabi_dsub+0x7a8>
 80021dc:	4649      	mov	r1, r9
 80021de:	2900      	cmp	r1, #0
 80021e0:	d000      	beq.n	80021e4 <__aeabi_dsub+0x15c>
 80021e2:	e0d6      	b.n	8002392 <__aeabi_dsub+0x30a>
 80021e4:	4659      	mov	r1, fp
 80021e6:	4311      	orrs	r1, r2
 80021e8:	d100      	bne.n	80021ec <__aeabi_dsub+0x164>
 80021ea:	e12e      	b.n	800244a <__aeabi_dsub+0x3c2>
 80021ec:	1e59      	subs	r1, r3, #1
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d100      	bne.n	80021f4 <__aeabi_dsub+0x16c>
 80021f2:	e1e6      	b.n	80025c2 <__aeabi_dsub+0x53a>
 80021f4:	42bb      	cmp	r3, r7
 80021f6:	d100      	bne.n	80021fa <__aeabi_dsub+0x172>
 80021f8:	e182      	b.n	8002500 <__aeabi_dsub+0x478>
 80021fa:	2701      	movs	r7, #1
 80021fc:	000b      	movs	r3, r1
 80021fe:	2938      	cmp	r1, #56	@ 0x38
 8002200:	dc14      	bgt.n	800222c <__aeabi_dsub+0x1a4>
 8002202:	2b1f      	cmp	r3, #31
 8002204:	dd00      	ble.n	8002208 <__aeabi_dsub+0x180>
 8002206:	e23c      	b.n	8002682 <__aeabi_dsub+0x5fa>
 8002208:	2720      	movs	r7, #32
 800220a:	1af9      	subs	r1, r7, r3
 800220c:	468c      	mov	ip, r1
 800220e:	4659      	mov	r1, fp
 8002210:	4667      	mov	r7, ip
 8002212:	40b9      	lsls	r1, r7
 8002214:	000f      	movs	r7, r1
 8002216:	0011      	movs	r1, r2
 8002218:	40d9      	lsrs	r1, r3
 800221a:	430f      	orrs	r7, r1
 800221c:	4661      	mov	r1, ip
 800221e:	408a      	lsls	r2, r1
 8002220:	1e51      	subs	r1, r2, #1
 8002222:	418a      	sbcs	r2, r1
 8002224:	4659      	mov	r1, fp
 8002226:	40d9      	lsrs	r1, r3
 8002228:	4317      	orrs	r7, r2
 800222a:	1864      	adds	r4, r4, r1
 800222c:	183f      	adds	r7, r7, r0
 800222e:	4287      	cmp	r7, r0
 8002230:	4180      	sbcs	r0, r0
 8002232:	4240      	negs	r0, r0
 8002234:	1824      	adds	r4, r4, r0
 8002236:	0223      	lsls	r3, r4, #8
 8002238:	d400      	bmi.n	800223c <__aeabi_dsub+0x1b4>
 800223a:	e0c6      	b.n	80023ca <__aeabi_dsub+0x342>
 800223c:	4b6b      	ldr	r3, [pc, #428]	@ (80023ec <__aeabi_dsub+0x364>)
 800223e:	3501      	adds	r5, #1
 8002240:	429d      	cmp	r5, r3
 8002242:	d100      	bne.n	8002246 <__aeabi_dsub+0x1be>
 8002244:	e0b2      	b.n	80023ac <__aeabi_dsub+0x324>
 8002246:	2101      	movs	r1, #1
 8002248:	4b69      	ldr	r3, [pc, #420]	@ (80023f0 <__aeabi_dsub+0x368>)
 800224a:	087a      	lsrs	r2, r7, #1
 800224c:	401c      	ands	r4, r3
 800224e:	4039      	ands	r1, r7
 8002250:	430a      	orrs	r2, r1
 8002252:	07e7      	lsls	r7, r4, #31
 8002254:	4317      	orrs	r7, r2
 8002256:	0864      	lsrs	r4, r4, #1
 8002258:	e79e      	b.n	8002198 <__aeabi_dsub+0x110>
 800225a:	4b66      	ldr	r3, [pc, #408]	@ (80023f4 <__aeabi_dsub+0x36c>)
 800225c:	4311      	orrs	r1, r2
 800225e:	468a      	mov	sl, r1
 8002260:	18eb      	adds	r3, r5, r3
 8002262:	2900      	cmp	r1, #0
 8002264:	d028      	beq.n	80022b8 <__aeabi_dsub+0x230>
 8002266:	4566      	cmp	r6, ip
 8002268:	d02c      	beq.n	80022c4 <__aeabi_dsub+0x23c>
 800226a:	2b00      	cmp	r3, #0
 800226c:	d05b      	beq.n	8002326 <__aeabi_dsub+0x29e>
 800226e:	2d00      	cmp	r5, #0
 8002270:	d100      	bne.n	8002274 <__aeabi_dsub+0x1ec>
 8002272:	e12c      	b.n	80024ce <__aeabi_dsub+0x446>
 8002274:	465b      	mov	r3, fp
 8002276:	4666      	mov	r6, ip
 8002278:	075f      	lsls	r7, r3, #29
 800227a:	08d2      	lsrs	r2, r2, #3
 800227c:	4317      	orrs	r7, r2
 800227e:	08dd      	lsrs	r5, r3, #3
 8002280:	003b      	movs	r3, r7
 8002282:	432b      	orrs	r3, r5
 8002284:	d100      	bne.n	8002288 <__aeabi_dsub+0x200>
 8002286:	e0e2      	b.n	800244e <__aeabi_dsub+0x3c6>
 8002288:	2480      	movs	r4, #128	@ 0x80
 800228a:	0324      	lsls	r4, r4, #12
 800228c:	432c      	orrs	r4, r5
 800228e:	0324      	lsls	r4, r4, #12
 8002290:	4d56      	ldr	r5, [pc, #344]	@ (80023ec <__aeabi_dsub+0x364>)
 8002292:	0b24      	lsrs	r4, r4, #12
 8002294:	e08c      	b.n	80023b0 <__aeabi_dsub+0x328>
 8002296:	4659      	mov	r1, fp
 8002298:	4311      	orrs	r1, r2
 800229a:	d100      	bne.n	800229e <__aeabi_dsub+0x216>
 800229c:	e0d5      	b.n	800244a <__aeabi_dsub+0x3c2>
 800229e:	1e59      	subs	r1, r3, #1
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d100      	bne.n	80022a6 <__aeabi_dsub+0x21e>
 80022a4:	e1b9      	b.n	800261a <__aeabi_dsub+0x592>
 80022a6:	42bb      	cmp	r3, r7
 80022a8:	d100      	bne.n	80022ac <__aeabi_dsub+0x224>
 80022aa:	e1b1      	b.n	8002610 <__aeabi_dsub+0x588>
 80022ac:	2701      	movs	r7, #1
 80022ae:	000b      	movs	r3, r1
 80022b0:	2938      	cmp	r1, #56	@ 0x38
 80022b2:	dd00      	ble.n	80022b6 <__aeabi_dsub+0x22e>
 80022b4:	e740      	b.n	8002138 <__aeabi_dsub+0xb0>
 80022b6:	e72a      	b.n	800210e <__aeabi_dsub+0x86>
 80022b8:	4661      	mov	r1, ip
 80022ba:	2701      	movs	r7, #1
 80022bc:	4079      	eors	r1, r7
 80022be:	468c      	mov	ip, r1
 80022c0:	4566      	cmp	r6, ip
 80022c2:	d1d2      	bne.n	800226a <__aeabi_dsub+0x1e2>
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d100      	bne.n	80022ca <__aeabi_dsub+0x242>
 80022c8:	e0c5      	b.n	8002456 <__aeabi_dsub+0x3ce>
 80022ca:	2d00      	cmp	r5, #0
 80022cc:	d000      	beq.n	80022d0 <__aeabi_dsub+0x248>
 80022ce:	e155      	b.n	800257c <__aeabi_dsub+0x4f4>
 80022d0:	464b      	mov	r3, r9
 80022d2:	0025      	movs	r5, r4
 80022d4:	4305      	orrs	r5, r0
 80022d6:	d100      	bne.n	80022da <__aeabi_dsub+0x252>
 80022d8:	e212      	b.n	8002700 <__aeabi_dsub+0x678>
 80022da:	1e59      	subs	r1, r3, #1
 80022dc:	468c      	mov	ip, r1
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d100      	bne.n	80022e4 <__aeabi_dsub+0x25c>
 80022e2:	e249      	b.n	8002778 <__aeabi_dsub+0x6f0>
 80022e4:	4d41      	ldr	r5, [pc, #260]	@ (80023ec <__aeabi_dsub+0x364>)
 80022e6:	42ab      	cmp	r3, r5
 80022e8:	d100      	bne.n	80022ec <__aeabi_dsub+0x264>
 80022ea:	e28f      	b.n	800280c <__aeabi_dsub+0x784>
 80022ec:	2701      	movs	r7, #1
 80022ee:	2938      	cmp	r1, #56	@ 0x38
 80022f0:	dc11      	bgt.n	8002316 <__aeabi_dsub+0x28e>
 80022f2:	4663      	mov	r3, ip
 80022f4:	2b1f      	cmp	r3, #31
 80022f6:	dd00      	ble.n	80022fa <__aeabi_dsub+0x272>
 80022f8:	e25b      	b.n	80027b2 <__aeabi_dsub+0x72a>
 80022fa:	4661      	mov	r1, ip
 80022fc:	2320      	movs	r3, #32
 80022fe:	0027      	movs	r7, r4
 8002300:	1a5b      	subs	r3, r3, r1
 8002302:	0005      	movs	r5, r0
 8002304:	4098      	lsls	r0, r3
 8002306:	409f      	lsls	r7, r3
 8002308:	40cd      	lsrs	r5, r1
 800230a:	1e43      	subs	r3, r0, #1
 800230c:	4198      	sbcs	r0, r3
 800230e:	40cc      	lsrs	r4, r1
 8002310:	432f      	orrs	r7, r5
 8002312:	4307      	orrs	r7, r0
 8002314:	44a3      	add	fp, r4
 8002316:	18bf      	adds	r7, r7, r2
 8002318:	4297      	cmp	r7, r2
 800231a:	4192      	sbcs	r2, r2
 800231c:	4252      	negs	r2, r2
 800231e:	445a      	add	r2, fp
 8002320:	0014      	movs	r4, r2
 8002322:	464d      	mov	r5, r9
 8002324:	e787      	b.n	8002236 <__aeabi_dsub+0x1ae>
 8002326:	4f34      	ldr	r7, [pc, #208]	@ (80023f8 <__aeabi_dsub+0x370>)
 8002328:	1c6b      	adds	r3, r5, #1
 800232a:	423b      	tst	r3, r7
 800232c:	d000      	beq.n	8002330 <__aeabi_dsub+0x2a8>
 800232e:	e0b6      	b.n	800249e <__aeabi_dsub+0x416>
 8002330:	4659      	mov	r1, fp
 8002332:	0023      	movs	r3, r4
 8002334:	4311      	orrs	r1, r2
 8002336:	000f      	movs	r7, r1
 8002338:	4303      	orrs	r3, r0
 800233a:	2d00      	cmp	r5, #0
 800233c:	d000      	beq.n	8002340 <__aeabi_dsub+0x2b8>
 800233e:	e126      	b.n	800258e <__aeabi_dsub+0x506>
 8002340:	2b00      	cmp	r3, #0
 8002342:	d100      	bne.n	8002346 <__aeabi_dsub+0x2be>
 8002344:	e1c0      	b.n	80026c8 <__aeabi_dsub+0x640>
 8002346:	2900      	cmp	r1, #0
 8002348:	d100      	bne.n	800234c <__aeabi_dsub+0x2c4>
 800234a:	e0a1      	b.n	8002490 <__aeabi_dsub+0x408>
 800234c:	1a83      	subs	r3, r0, r2
 800234e:	4698      	mov	r8, r3
 8002350:	465b      	mov	r3, fp
 8002352:	4540      	cmp	r0, r8
 8002354:	41ad      	sbcs	r5, r5
 8002356:	1ae3      	subs	r3, r4, r3
 8002358:	426d      	negs	r5, r5
 800235a:	1b5b      	subs	r3, r3, r5
 800235c:	2580      	movs	r5, #128	@ 0x80
 800235e:	042d      	lsls	r5, r5, #16
 8002360:	422b      	tst	r3, r5
 8002362:	d100      	bne.n	8002366 <__aeabi_dsub+0x2de>
 8002364:	e14b      	b.n	80025fe <__aeabi_dsub+0x576>
 8002366:	465b      	mov	r3, fp
 8002368:	1a10      	subs	r0, r2, r0
 800236a:	4282      	cmp	r2, r0
 800236c:	4192      	sbcs	r2, r2
 800236e:	1b1c      	subs	r4, r3, r4
 8002370:	0007      	movs	r7, r0
 8002372:	2601      	movs	r6, #1
 8002374:	4663      	mov	r3, ip
 8002376:	4252      	negs	r2, r2
 8002378:	1aa4      	subs	r4, r4, r2
 800237a:	4327      	orrs	r7, r4
 800237c:	401e      	ands	r6, r3
 800237e:	2f00      	cmp	r7, #0
 8002380:	d100      	bne.n	8002384 <__aeabi_dsub+0x2fc>
 8002382:	e142      	b.n	800260a <__aeabi_dsub+0x582>
 8002384:	422c      	tst	r4, r5
 8002386:	d100      	bne.n	800238a <__aeabi_dsub+0x302>
 8002388:	e26d      	b.n	8002866 <__aeabi_dsub+0x7de>
 800238a:	4b19      	ldr	r3, [pc, #100]	@ (80023f0 <__aeabi_dsub+0x368>)
 800238c:	2501      	movs	r5, #1
 800238e:	401c      	ands	r4, r3
 8002390:	e71b      	b.n	80021ca <__aeabi_dsub+0x142>
 8002392:	42bd      	cmp	r5, r7
 8002394:	d100      	bne.n	8002398 <__aeabi_dsub+0x310>
 8002396:	e13b      	b.n	8002610 <__aeabi_dsub+0x588>
 8002398:	2701      	movs	r7, #1
 800239a:	2b38      	cmp	r3, #56	@ 0x38
 800239c:	dd00      	ble.n	80023a0 <__aeabi_dsub+0x318>
 800239e:	e745      	b.n	800222c <__aeabi_dsub+0x1a4>
 80023a0:	2780      	movs	r7, #128	@ 0x80
 80023a2:	4659      	mov	r1, fp
 80023a4:	043f      	lsls	r7, r7, #16
 80023a6:	4339      	orrs	r1, r7
 80023a8:	468b      	mov	fp, r1
 80023aa:	e72a      	b.n	8002202 <__aeabi_dsub+0x17a>
 80023ac:	2400      	movs	r4, #0
 80023ae:	2700      	movs	r7, #0
 80023b0:	052d      	lsls	r5, r5, #20
 80023b2:	4325      	orrs	r5, r4
 80023b4:	07f6      	lsls	r6, r6, #31
 80023b6:	4335      	orrs	r5, r6
 80023b8:	0038      	movs	r0, r7
 80023ba:	0029      	movs	r1, r5
 80023bc:	b003      	add	sp, #12
 80023be:	bcf0      	pop	{r4, r5, r6, r7}
 80023c0:	46bb      	mov	fp, r7
 80023c2:	46b2      	mov	sl, r6
 80023c4:	46a9      	mov	r9, r5
 80023c6:	46a0      	mov	r8, r4
 80023c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023ca:	077b      	lsls	r3, r7, #29
 80023cc:	d004      	beq.n	80023d8 <__aeabi_dsub+0x350>
 80023ce:	230f      	movs	r3, #15
 80023d0:	403b      	ands	r3, r7
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d000      	beq.n	80023d8 <__aeabi_dsub+0x350>
 80023d6:	e6e7      	b.n	80021a8 <__aeabi_dsub+0x120>
 80023d8:	002b      	movs	r3, r5
 80023da:	08f8      	lsrs	r0, r7, #3
 80023dc:	4a03      	ldr	r2, [pc, #12]	@ (80023ec <__aeabi_dsub+0x364>)
 80023de:	0767      	lsls	r7, r4, #29
 80023e0:	4307      	orrs	r7, r0
 80023e2:	08e5      	lsrs	r5, r4, #3
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d100      	bne.n	80023ea <__aeabi_dsub+0x362>
 80023e8:	e74a      	b.n	8002280 <__aeabi_dsub+0x1f8>
 80023ea:	e0a5      	b.n	8002538 <__aeabi_dsub+0x4b0>
 80023ec:	000007ff 	.word	0x000007ff
 80023f0:	ff7fffff 	.word	0xff7fffff
 80023f4:	fffff801 	.word	0xfffff801
 80023f8:	000007fe 	.word	0x000007fe
 80023fc:	0038      	movs	r0, r7
 80023fe:	f000 fbc7 	bl	8002b90 <__clzsi2>
 8002402:	0003      	movs	r3, r0
 8002404:	3318      	adds	r3, #24
 8002406:	2b1f      	cmp	r3, #31
 8002408:	dc00      	bgt.n	800240c <__aeabi_dsub+0x384>
 800240a:	e6a7      	b.n	800215c <__aeabi_dsub+0xd4>
 800240c:	003a      	movs	r2, r7
 800240e:	3808      	subs	r0, #8
 8002410:	4082      	lsls	r2, r0
 8002412:	429d      	cmp	r5, r3
 8002414:	dd00      	ble.n	8002418 <__aeabi_dsub+0x390>
 8002416:	e08a      	b.n	800252e <__aeabi_dsub+0x4a6>
 8002418:	1b5b      	subs	r3, r3, r5
 800241a:	1c58      	adds	r0, r3, #1
 800241c:	281f      	cmp	r0, #31
 800241e:	dc00      	bgt.n	8002422 <__aeabi_dsub+0x39a>
 8002420:	e1d8      	b.n	80027d4 <__aeabi_dsub+0x74c>
 8002422:	0017      	movs	r7, r2
 8002424:	3b1f      	subs	r3, #31
 8002426:	40df      	lsrs	r7, r3
 8002428:	2820      	cmp	r0, #32
 800242a:	d005      	beq.n	8002438 <__aeabi_dsub+0x3b0>
 800242c:	2340      	movs	r3, #64	@ 0x40
 800242e:	1a1b      	subs	r3, r3, r0
 8002430:	409a      	lsls	r2, r3
 8002432:	1e53      	subs	r3, r2, #1
 8002434:	419a      	sbcs	r2, r3
 8002436:	4317      	orrs	r7, r2
 8002438:	2500      	movs	r5, #0
 800243a:	2f00      	cmp	r7, #0
 800243c:	d100      	bne.n	8002440 <__aeabi_dsub+0x3b8>
 800243e:	e0e5      	b.n	800260c <__aeabi_dsub+0x584>
 8002440:	077b      	lsls	r3, r7, #29
 8002442:	d000      	beq.n	8002446 <__aeabi_dsub+0x3be>
 8002444:	e6ab      	b.n	800219e <__aeabi_dsub+0x116>
 8002446:	002c      	movs	r4, r5
 8002448:	e7c6      	b.n	80023d8 <__aeabi_dsub+0x350>
 800244a:	08c0      	lsrs	r0, r0, #3
 800244c:	e7c6      	b.n	80023dc <__aeabi_dsub+0x354>
 800244e:	2700      	movs	r7, #0
 8002450:	2400      	movs	r4, #0
 8002452:	4dd1      	ldr	r5, [pc, #836]	@ (8002798 <__aeabi_dsub+0x710>)
 8002454:	e7ac      	b.n	80023b0 <__aeabi_dsub+0x328>
 8002456:	4fd1      	ldr	r7, [pc, #836]	@ (800279c <__aeabi_dsub+0x714>)
 8002458:	1c6b      	adds	r3, r5, #1
 800245a:	423b      	tst	r3, r7
 800245c:	d171      	bne.n	8002542 <__aeabi_dsub+0x4ba>
 800245e:	0023      	movs	r3, r4
 8002460:	4303      	orrs	r3, r0
 8002462:	2d00      	cmp	r5, #0
 8002464:	d000      	beq.n	8002468 <__aeabi_dsub+0x3e0>
 8002466:	e14e      	b.n	8002706 <__aeabi_dsub+0x67e>
 8002468:	4657      	mov	r7, sl
 800246a:	2b00      	cmp	r3, #0
 800246c:	d100      	bne.n	8002470 <__aeabi_dsub+0x3e8>
 800246e:	e1b5      	b.n	80027dc <__aeabi_dsub+0x754>
 8002470:	2f00      	cmp	r7, #0
 8002472:	d00d      	beq.n	8002490 <__aeabi_dsub+0x408>
 8002474:	1883      	adds	r3, r0, r2
 8002476:	4283      	cmp	r3, r0
 8002478:	4180      	sbcs	r0, r0
 800247a:	445c      	add	r4, fp
 800247c:	4240      	negs	r0, r0
 800247e:	1824      	adds	r4, r4, r0
 8002480:	0222      	lsls	r2, r4, #8
 8002482:	d500      	bpl.n	8002486 <__aeabi_dsub+0x3fe>
 8002484:	e1c8      	b.n	8002818 <__aeabi_dsub+0x790>
 8002486:	001f      	movs	r7, r3
 8002488:	4698      	mov	r8, r3
 800248a:	4327      	orrs	r7, r4
 800248c:	d100      	bne.n	8002490 <__aeabi_dsub+0x408>
 800248e:	e0bc      	b.n	800260a <__aeabi_dsub+0x582>
 8002490:	4643      	mov	r3, r8
 8002492:	0767      	lsls	r7, r4, #29
 8002494:	08db      	lsrs	r3, r3, #3
 8002496:	431f      	orrs	r7, r3
 8002498:	08e5      	lsrs	r5, r4, #3
 800249a:	2300      	movs	r3, #0
 800249c:	e04c      	b.n	8002538 <__aeabi_dsub+0x4b0>
 800249e:	1a83      	subs	r3, r0, r2
 80024a0:	4698      	mov	r8, r3
 80024a2:	465b      	mov	r3, fp
 80024a4:	4540      	cmp	r0, r8
 80024a6:	41bf      	sbcs	r7, r7
 80024a8:	1ae3      	subs	r3, r4, r3
 80024aa:	427f      	negs	r7, r7
 80024ac:	1bdb      	subs	r3, r3, r7
 80024ae:	021f      	lsls	r7, r3, #8
 80024b0:	d47c      	bmi.n	80025ac <__aeabi_dsub+0x524>
 80024b2:	4647      	mov	r7, r8
 80024b4:	431f      	orrs	r7, r3
 80024b6:	d100      	bne.n	80024ba <__aeabi_dsub+0x432>
 80024b8:	e0a6      	b.n	8002608 <__aeabi_dsub+0x580>
 80024ba:	001c      	movs	r4, r3
 80024bc:	4647      	mov	r7, r8
 80024be:	e645      	b.n	800214c <__aeabi_dsub+0xc4>
 80024c0:	4cb7      	ldr	r4, [pc, #732]	@ (80027a0 <__aeabi_dsub+0x718>)
 80024c2:	1aed      	subs	r5, r5, r3
 80024c4:	4014      	ands	r4, r2
 80024c6:	077b      	lsls	r3, r7, #29
 80024c8:	d000      	beq.n	80024cc <__aeabi_dsub+0x444>
 80024ca:	e780      	b.n	80023ce <__aeabi_dsub+0x346>
 80024cc:	e784      	b.n	80023d8 <__aeabi_dsub+0x350>
 80024ce:	464b      	mov	r3, r9
 80024d0:	0025      	movs	r5, r4
 80024d2:	4305      	orrs	r5, r0
 80024d4:	d066      	beq.n	80025a4 <__aeabi_dsub+0x51c>
 80024d6:	1e5f      	subs	r7, r3, #1
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d100      	bne.n	80024de <__aeabi_dsub+0x456>
 80024dc:	e0fc      	b.n	80026d8 <__aeabi_dsub+0x650>
 80024de:	4dae      	ldr	r5, [pc, #696]	@ (8002798 <__aeabi_dsub+0x710>)
 80024e0:	42ab      	cmp	r3, r5
 80024e2:	d100      	bne.n	80024e6 <__aeabi_dsub+0x45e>
 80024e4:	e15e      	b.n	80027a4 <__aeabi_dsub+0x71c>
 80024e6:	4666      	mov	r6, ip
 80024e8:	2f38      	cmp	r7, #56	@ 0x38
 80024ea:	dc00      	bgt.n	80024ee <__aeabi_dsub+0x466>
 80024ec:	e0b4      	b.n	8002658 <__aeabi_dsub+0x5d0>
 80024ee:	2001      	movs	r0, #1
 80024f0:	1a17      	subs	r7, r2, r0
 80024f2:	42ba      	cmp	r2, r7
 80024f4:	4192      	sbcs	r2, r2
 80024f6:	465b      	mov	r3, fp
 80024f8:	4252      	negs	r2, r2
 80024fa:	464d      	mov	r5, r9
 80024fc:	1a9c      	subs	r4, r3, r2
 80024fe:	e620      	b.n	8002142 <__aeabi_dsub+0xba>
 8002500:	0767      	lsls	r7, r4, #29
 8002502:	08c0      	lsrs	r0, r0, #3
 8002504:	4307      	orrs	r7, r0
 8002506:	08e5      	lsrs	r5, r4, #3
 8002508:	e6ba      	b.n	8002280 <__aeabi_dsub+0x1f8>
 800250a:	001f      	movs	r7, r3
 800250c:	4659      	mov	r1, fp
 800250e:	3f20      	subs	r7, #32
 8002510:	40f9      	lsrs	r1, r7
 8002512:	000f      	movs	r7, r1
 8002514:	2b20      	cmp	r3, #32
 8002516:	d005      	beq.n	8002524 <__aeabi_dsub+0x49c>
 8002518:	2140      	movs	r1, #64	@ 0x40
 800251a:	1acb      	subs	r3, r1, r3
 800251c:	4659      	mov	r1, fp
 800251e:	4099      	lsls	r1, r3
 8002520:	430a      	orrs	r2, r1
 8002522:	4692      	mov	sl, r2
 8002524:	4653      	mov	r3, sl
 8002526:	1e5a      	subs	r2, r3, #1
 8002528:	4193      	sbcs	r3, r2
 800252a:	431f      	orrs	r7, r3
 800252c:	e604      	b.n	8002138 <__aeabi_dsub+0xb0>
 800252e:	1aeb      	subs	r3, r5, r3
 8002530:	4d9b      	ldr	r5, [pc, #620]	@ (80027a0 <__aeabi_dsub+0x718>)
 8002532:	4015      	ands	r5, r2
 8002534:	076f      	lsls	r7, r5, #29
 8002536:	08ed      	lsrs	r5, r5, #3
 8002538:	032c      	lsls	r4, r5, #12
 800253a:	055d      	lsls	r5, r3, #21
 800253c:	0b24      	lsrs	r4, r4, #12
 800253e:	0d6d      	lsrs	r5, r5, #21
 8002540:	e736      	b.n	80023b0 <__aeabi_dsub+0x328>
 8002542:	4d95      	ldr	r5, [pc, #596]	@ (8002798 <__aeabi_dsub+0x710>)
 8002544:	42ab      	cmp	r3, r5
 8002546:	d100      	bne.n	800254a <__aeabi_dsub+0x4c2>
 8002548:	e0d6      	b.n	80026f8 <__aeabi_dsub+0x670>
 800254a:	1882      	adds	r2, r0, r2
 800254c:	0021      	movs	r1, r4
 800254e:	4282      	cmp	r2, r0
 8002550:	4180      	sbcs	r0, r0
 8002552:	4459      	add	r1, fp
 8002554:	4240      	negs	r0, r0
 8002556:	1808      	adds	r0, r1, r0
 8002558:	07c7      	lsls	r7, r0, #31
 800255a:	0852      	lsrs	r2, r2, #1
 800255c:	4317      	orrs	r7, r2
 800255e:	0844      	lsrs	r4, r0, #1
 8002560:	0752      	lsls	r2, r2, #29
 8002562:	d400      	bmi.n	8002566 <__aeabi_dsub+0x4de>
 8002564:	e185      	b.n	8002872 <__aeabi_dsub+0x7ea>
 8002566:	220f      	movs	r2, #15
 8002568:	001d      	movs	r5, r3
 800256a:	403a      	ands	r2, r7
 800256c:	2a04      	cmp	r2, #4
 800256e:	d000      	beq.n	8002572 <__aeabi_dsub+0x4ea>
 8002570:	e61a      	b.n	80021a8 <__aeabi_dsub+0x120>
 8002572:	08ff      	lsrs	r7, r7, #3
 8002574:	0764      	lsls	r4, r4, #29
 8002576:	4327      	orrs	r7, r4
 8002578:	0905      	lsrs	r5, r0, #4
 800257a:	e7dd      	b.n	8002538 <__aeabi_dsub+0x4b0>
 800257c:	465b      	mov	r3, fp
 800257e:	08d2      	lsrs	r2, r2, #3
 8002580:	075f      	lsls	r7, r3, #29
 8002582:	4317      	orrs	r7, r2
 8002584:	08dd      	lsrs	r5, r3, #3
 8002586:	e67b      	b.n	8002280 <__aeabi_dsub+0x1f8>
 8002588:	2700      	movs	r7, #0
 800258a:	2400      	movs	r4, #0
 800258c:	e710      	b.n	80023b0 <__aeabi_dsub+0x328>
 800258e:	2b00      	cmp	r3, #0
 8002590:	d000      	beq.n	8002594 <__aeabi_dsub+0x50c>
 8002592:	e0d6      	b.n	8002742 <__aeabi_dsub+0x6ba>
 8002594:	2900      	cmp	r1, #0
 8002596:	d000      	beq.n	800259a <__aeabi_dsub+0x512>
 8002598:	e12f      	b.n	80027fa <__aeabi_dsub+0x772>
 800259a:	2480      	movs	r4, #128	@ 0x80
 800259c:	2600      	movs	r6, #0
 800259e:	4d7e      	ldr	r5, [pc, #504]	@ (8002798 <__aeabi_dsub+0x710>)
 80025a0:	0324      	lsls	r4, r4, #12
 80025a2:	e705      	b.n	80023b0 <__aeabi_dsub+0x328>
 80025a4:	4666      	mov	r6, ip
 80025a6:	465c      	mov	r4, fp
 80025a8:	08d0      	lsrs	r0, r2, #3
 80025aa:	e717      	b.n	80023dc <__aeabi_dsub+0x354>
 80025ac:	465b      	mov	r3, fp
 80025ae:	1a17      	subs	r7, r2, r0
 80025b0:	42ba      	cmp	r2, r7
 80025b2:	4192      	sbcs	r2, r2
 80025b4:	1b1c      	subs	r4, r3, r4
 80025b6:	2601      	movs	r6, #1
 80025b8:	4663      	mov	r3, ip
 80025ba:	4252      	negs	r2, r2
 80025bc:	1aa4      	subs	r4, r4, r2
 80025be:	401e      	ands	r6, r3
 80025c0:	e5c4      	b.n	800214c <__aeabi_dsub+0xc4>
 80025c2:	1883      	adds	r3, r0, r2
 80025c4:	4283      	cmp	r3, r0
 80025c6:	4180      	sbcs	r0, r0
 80025c8:	445c      	add	r4, fp
 80025ca:	4240      	negs	r0, r0
 80025cc:	1825      	adds	r5, r4, r0
 80025ce:	022a      	lsls	r2, r5, #8
 80025d0:	d400      	bmi.n	80025d4 <__aeabi_dsub+0x54c>
 80025d2:	e0da      	b.n	800278a <__aeabi_dsub+0x702>
 80025d4:	4a72      	ldr	r2, [pc, #456]	@ (80027a0 <__aeabi_dsub+0x718>)
 80025d6:	085b      	lsrs	r3, r3, #1
 80025d8:	4015      	ands	r5, r2
 80025da:	07ea      	lsls	r2, r5, #31
 80025dc:	431a      	orrs	r2, r3
 80025de:	0869      	lsrs	r1, r5, #1
 80025e0:	075b      	lsls	r3, r3, #29
 80025e2:	d400      	bmi.n	80025e6 <__aeabi_dsub+0x55e>
 80025e4:	e14a      	b.n	800287c <__aeabi_dsub+0x7f4>
 80025e6:	230f      	movs	r3, #15
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d100      	bne.n	80025f0 <__aeabi_dsub+0x568>
 80025ee:	e0fc      	b.n	80027ea <__aeabi_dsub+0x762>
 80025f0:	1d17      	adds	r7, r2, #4
 80025f2:	4297      	cmp	r7, r2
 80025f4:	41a4      	sbcs	r4, r4
 80025f6:	4264      	negs	r4, r4
 80025f8:	2502      	movs	r5, #2
 80025fa:	1864      	adds	r4, r4, r1
 80025fc:	e6ec      	b.n	80023d8 <__aeabi_dsub+0x350>
 80025fe:	4647      	mov	r7, r8
 8002600:	001c      	movs	r4, r3
 8002602:	431f      	orrs	r7, r3
 8002604:	d000      	beq.n	8002608 <__aeabi_dsub+0x580>
 8002606:	e743      	b.n	8002490 <__aeabi_dsub+0x408>
 8002608:	2600      	movs	r6, #0
 800260a:	2500      	movs	r5, #0
 800260c:	2400      	movs	r4, #0
 800260e:	e6cf      	b.n	80023b0 <__aeabi_dsub+0x328>
 8002610:	08c0      	lsrs	r0, r0, #3
 8002612:	0767      	lsls	r7, r4, #29
 8002614:	4307      	orrs	r7, r0
 8002616:	08e5      	lsrs	r5, r4, #3
 8002618:	e632      	b.n	8002280 <__aeabi_dsub+0x1f8>
 800261a:	1a87      	subs	r7, r0, r2
 800261c:	465b      	mov	r3, fp
 800261e:	42b8      	cmp	r0, r7
 8002620:	4180      	sbcs	r0, r0
 8002622:	1ae4      	subs	r4, r4, r3
 8002624:	4240      	negs	r0, r0
 8002626:	1a24      	subs	r4, r4, r0
 8002628:	0223      	lsls	r3, r4, #8
 800262a:	d428      	bmi.n	800267e <__aeabi_dsub+0x5f6>
 800262c:	0763      	lsls	r3, r4, #29
 800262e:	08ff      	lsrs	r7, r7, #3
 8002630:	431f      	orrs	r7, r3
 8002632:	08e5      	lsrs	r5, r4, #3
 8002634:	2301      	movs	r3, #1
 8002636:	e77f      	b.n	8002538 <__aeabi_dsub+0x4b0>
 8002638:	2b00      	cmp	r3, #0
 800263a:	d100      	bne.n	800263e <__aeabi_dsub+0x5b6>
 800263c:	e673      	b.n	8002326 <__aeabi_dsub+0x29e>
 800263e:	464b      	mov	r3, r9
 8002640:	1b5f      	subs	r7, r3, r5
 8002642:	003b      	movs	r3, r7
 8002644:	2d00      	cmp	r5, #0
 8002646:	d100      	bne.n	800264a <__aeabi_dsub+0x5c2>
 8002648:	e742      	b.n	80024d0 <__aeabi_dsub+0x448>
 800264a:	2f38      	cmp	r7, #56	@ 0x38
 800264c:	dd00      	ble.n	8002650 <__aeabi_dsub+0x5c8>
 800264e:	e0ec      	b.n	800282a <__aeabi_dsub+0x7a2>
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	000e      	movs	r6, r1
 8002654:	041b      	lsls	r3, r3, #16
 8002656:	431c      	orrs	r4, r3
 8002658:	2f1f      	cmp	r7, #31
 800265a:	dc25      	bgt.n	80026a8 <__aeabi_dsub+0x620>
 800265c:	2520      	movs	r5, #32
 800265e:	0023      	movs	r3, r4
 8002660:	1bed      	subs	r5, r5, r7
 8002662:	0001      	movs	r1, r0
 8002664:	40a8      	lsls	r0, r5
 8002666:	40ab      	lsls	r3, r5
 8002668:	40f9      	lsrs	r1, r7
 800266a:	1e45      	subs	r5, r0, #1
 800266c:	41a8      	sbcs	r0, r5
 800266e:	430b      	orrs	r3, r1
 8002670:	40fc      	lsrs	r4, r7
 8002672:	4318      	orrs	r0, r3
 8002674:	465b      	mov	r3, fp
 8002676:	1b1b      	subs	r3, r3, r4
 8002678:	469b      	mov	fp, r3
 800267a:	e739      	b.n	80024f0 <__aeabi_dsub+0x468>
 800267c:	4666      	mov	r6, ip
 800267e:	2501      	movs	r5, #1
 8002680:	e562      	b.n	8002148 <__aeabi_dsub+0xc0>
 8002682:	001f      	movs	r7, r3
 8002684:	4659      	mov	r1, fp
 8002686:	3f20      	subs	r7, #32
 8002688:	40f9      	lsrs	r1, r7
 800268a:	468c      	mov	ip, r1
 800268c:	2b20      	cmp	r3, #32
 800268e:	d005      	beq.n	800269c <__aeabi_dsub+0x614>
 8002690:	2740      	movs	r7, #64	@ 0x40
 8002692:	4659      	mov	r1, fp
 8002694:	1afb      	subs	r3, r7, r3
 8002696:	4099      	lsls	r1, r3
 8002698:	430a      	orrs	r2, r1
 800269a:	4692      	mov	sl, r2
 800269c:	4657      	mov	r7, sl
 800269e:	1e7b      	subs	r3, r7, #1
 80026a0:	419f      	sbcs	r7, r3
 80026a2:	4663      	mov	r3, ip
 80026a4:	431f      	orrs	r7, r3
 80026a6:	e5c1      	b.n	800222c <__aeabi_dsub+0x1a4>
 80026a8:	003b      	movs	r3, r7
 80026aa:	0025      	movs	r5, r4
 80026ac:	3b20      	subs	r3, #32
 80026ae:	40dd      	lsrs	r5, r3
 80026b0:	2f20      	cmp	r7, #32
 80026b2:	d004      	beq.n	80026be <__aeabi_dsub+0x636>
 80026b4:	2340      	movs	r3, #64	@ 0x40
 80026b6:	1bdb      	subs	r3, r3, r7
 80026b8:	409c      	lsls	r4, r3
 80026ba:	4320      	orrs	r0, r4
 80026bc:	4680      	mov	r8, r0
 80026be:	4640      	mov	r0, r8
 80026c0:	1e43      	subs	r3, r0, #1
 80026c2:	4198      	sbcs	r0, r3
 80026c4:	4328      	orrs	r0, r5
 80026c6:	e713      	b.n	80024f0 <__aeabi_dsub+0x468>
 80026c8:	2900      	cmp	r1, #0
 80026ca:	d09d      	beq.n	8002608 <__aeabi_dsub+0x580>
 80026cc:	2601      	movs	r6, #1
 80026ce:	4663      	mov	r3, ip
 80026d0:	465c      	mov	r4, fp
 80026d2:	4690      	mov	r8, r2
 80026d4:	401e      	ands	r6, r3
 80026d6:	e6db      	b.n	8002490 <__aeabi_dsub+0x408>
 80026d8:	1a17      	subs	r7, r2, r0
 80026da:	465b      	mov	r3, fp
 80026dc:	42ba      	cmp	r2, r7
 80026de:	4192      	sbcs	r2, r2
 80026e0:	1b1c      	subs	r4, r3, r4
 80026e2:	4252      	negs	r2, r2
 80026e4:	1aa4      	subs	r4, r4, r2
 80026e6:	0223      	lsls	r3, r4, #8
 80026e8:	d4c8      	bmi.n	800267c <__aeabi_dsub+0x5f4>
 80026ea:	0763      	lsls	r3, r4, #29
 80026ec:	08ff      	lsrs	r7, r7, #3
 80026ee:	431f      	orrs	r7, r3
 80026f0:	4666      	mov	r6, ip
 80026f2:	2301      	movs	r3, #1
 80026f4:	08e5      	lsrs	r5, r4, #3
 80026f6:	e71f      	b.n	8002538 <__aeabi_dsub+0x4b0>
 80026f8:	001d      	movs	r5, r3
 80026fa:	2400      	movs	r4, #0
 80026fc:	2700      	movs	r7, #0
 80026fe:	e657      	b.n	80023b0 <__aeabi_dsub+0x328>
 8002700:	465c      	mov	r4, fp
 8002702:	08d0      	lsrs	r0, r2, #3
 8002704:	e66a      	b.n	80023dc <__aeabi_dsub+0x354>
 8002706:	2b00      	cmp	r3, #0
 8002708:	d100      	bne.n	800270c <__aeabi_dsub+0x684>
 800270a:	e737      	b.n	800257c <__aeabi_dsub+0x4f4>
 800270c:	4653      	mov	r3, sl
 800270e:	08c0      	lsrs	r0, r0, #3
 8002710:	0767      	lsls	r7, r4, #29
 8002712:	4307      	orrs	r7, r0
 8002714:	08e5      	lsrs	r5, r4, #3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d100      	bne.n	800271c <__aeabi_dsub+0x694>
 800271a:	e5b1      	b.n	8002280 <__aeabi_dsub+0x1f8>
 800271c:	2380      	movs	r3, #128	@ 0x80
 800271e:	031b      	lsls	r3, r3, #12
 8002720:	421d      	tst	r5, r3
 8002722:	d008      	beq.n	8002736 <__aeabi_dsub+0x6ae>
 8002724:	4659      	mov	r1, fp
 8002726:	08c8      	lsrs	r0, r1, #3
 8002728:	4218      	tst	r0, r3
 800272a:	d104      	bne.n	8002736 <__aeabi_dsub+0x6ae>
 800272c:	08d2      	lsrs	r2, r2, #3
 800272e:	0749      	lsls	r1, r1, #29
 8002730:	430a      	orrs	r2, r1
 8002732:	0017      	movs	r7, r2
 8002734:	0005      	movs	r5, r0
 8002736:	0f7b      	lsrs	r3, r7, #29
 8002738:	00ff      	lsls	r7, r7, #3
 800273a:	08ff      	lsrs	r7, r7, #3
 800273c:	075b      	lsls	r3, r3, #29
 800273e:	431f      	orrs	r7, r3
 8002740:	e59e      	b.n	8002280 <__aeabi_dsub+0x1f8>
 8002742:	08c0      	lsrs	r0, r0, #3
 8002744:	0763      	lsls	r3, r4, #29
 8002746:	4318      	orrs	r0, r3
 8002748:	08e5      	lsrs	r5, r4, #3
 800274a:	2900      	cmp	r1, #0
 800274c:	d053      	beq.n	80027f6 <__aeabi_dsub+0x76e>
 800274e:	2380      	movs	r3, #128	@ 0x80
 8002750:	031b      	lsls	r3, r3, #12
 8002752:	421d      	tst	r5, r3
 8002754:	d00a      	beq.n	800276c <__aeabi_dsub+0x6e4>
 8002756:	4659      	mov	r1, fp
 8002758:	08cc      	lsrs	r4, r1, #3
 800275a:	421c      	tst	r4, r3
 800275c:	d106      	bne.n	800276c <__aeabi_dsub+0x6e4>
 800275e:	2601      	movs	r6, #1
 8002760:	4663      	mov	r3, ip
 8002762:	0025      	movs	r5, r4
 8002764:	08d0      	lsrs	r0, r2, #3
 8002766:	0749      	lsls	r1, r1, #29
 8002768:	4308      	orrs	r0, r1
 800276a:	401e      	ands	r6, r3
 800276c:	0f47      	lsrs	r7, r0, #29
 800276e:	00c0      	lsls	r0, r0, #3
 8002770:	08c0      	lsrs	r0, r0, #3
 8002772:	077f      	lsls	r7, r7, #29
 8002774:	4307      	orrs	r7, r0
 8002776:	e583      	b.n	8002280 <__aeabi_dsub+0x1f8>
 8002778:	1883      	adds	r3, r0, r2
 800277a:	4293      	cmp	r3, r2
 800277c:	4192      	sbcs	r2, r2
 800277e:	445c      	add	r4, fp
 8002780:	4252      	negs	r2, r2
 8002782:	18a5      	adds	r5, r4, r2
 8002784:	022a      	lsls	r2, r5, #8
 8002786:	d500      	bpl.n	800278a <__aeabi_dsub+0x702>
 8002788:	e724      	b.n	80025d4 <__aeabi_dsub+0x54c>
 800278a:	076f      	lsls	r7, r5, #29
 800278c:	08db      	lsrs	r3, r3, #3
 800278e:	431f      	orrs	r7, r3
 8002790:	08ed      	lsrs	r5, r5, #3
 8002792:	2301      	movs	r3, #1
 8002794:	e6d0      	b.n	8002538 <__aeabi_dsub+0x4b0>
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	000007ff 	.word	0x000007ff
 800279c:	000007fe 	.word	0x000007fe
 80027a0:	ff7fffff 	.word	0xff7fffff
 80027a4:	465b      	mov	r3, fp
 80027a6:	08d2      	lsrs	r2, r2, #3
 80027a8:	075f      	lsls	r7, r3, #29
 80027aa:	4666      	mov	r6, ip
 80027ac:	4317      	orrs	r7, r2
 80027ae:	08dd      	lsrs	r5, r3, #3
 80027b0:	e566      	b.n	8002280 <__aeabi_dsub+0x1f8>
 80027b2:	0025      	movs	r5, r4
 80027b4:	3b20      	subs	r3, #32
 80027b6:	40dd      	lsrs	r5, r3
 80027b8:	4663      	mov	r3, ip
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	d005      	beq.n	80027ca <__aeabi_dsub+0x742>
 80027be:	2340      	movs	r3, #64	@ 0x40
 80027c0:	4661      	mov	r1, ip
 80027c2:	1a5b      	subs	r3, r3, r1
 80027c4:	409c      	lsls	r4, r3
 80027c6:	4320      	orrs	r0, r4
 80027c8:	4680      	mov	r8, r0
 80027ca:	4647      	mov	r7, r8
 80027cc:	1e7b      	subs	r3, r7, #1
 80027ce:	419f      	sbcs	r7, r3
 80027d0:	432f      	orrs	r7, r5
 80027d2:	e5a0      	b.n	8002316 <__aeabi_dsub+0x28e>
 80027d4:	2120      	movs	r1, #32
 80027d6:	2700      	movs	r7, #0
 80027d8:	1a09      	subs	r1, r1, r0
 80027da:	e4d2      	b.n	8002182 <__aeabi_dsub+0xfa>
 80027dc:	2f00      	cmp	r7, #0
 80027de:	d100      	bne.n	80027e2 <__aeabi_dsub+0x75a>
 80027e0:	e713      	b.n	800260a <__aeabi_dsub+0x582>
 80027e2:	465c      	mov	r4, fp
 80027e4:	0017      	movs	r7, r2
 80027e6:	2500      	movs	r5, #0
 80027e8:	e5f6      	b.n	80023d8 <__aeabi_dsub+0x350>
 80027ea:	08d7      	lsrs	r7, r2, #3
 80027ec:	0749      	lsls	r1, r1, #29
 80027ee:	2302      	movs	r3, #2
 80027f0:	430f      	orrs	r7, r1
 80027f2:	092d      	lsrs	r5, r5, #4
 80027f4:	e6a0      	b.n	8002538 <__aeabi_dsub+0x4b0>
 80027f6:	0007      	movs	r7, r0
 80027f8:	e542      	b.n	8002280 <__aeabi_dsub+0x1f8>
 80027fa:	465b      	mov	r3, fp
 80027fc:	2601      	movs	r6, #1
 80027fe:	075f      	lsls	r7, r3, #29
 8002800:	08dd      	lsrs	r5, r3, #3
 8002802:	4663      	mov	r3, ip
 8002804:	08d2      	lsrs	r2, r2, #3
 8002806:	4317      	orrs	r7, r2
 8002808:	401e      	ands	r6, r3
 800280a:	e539      	b.n	8002280 <__aeabi_dsub+0x1f8>
 800280c:	465b      	mov	r3, fp
 800280e:	08d2      	lsrs	r2, r2, #3
 8002810:	075f      	lsls	r7, r3, #29
 8002812:	4317      	orrs	r7, r2
 8002814:	08dd      	lsrs	r5, r3, #3
 8002816:	e533      	b.n	8002280 <__aeabi_dsub+0x1f8>
 8002818:	4a1e      	ldr	r2, [pc, #120]	@ (8002894 <__aeabi_dsub+0x80c>)
 800281a:	08db      	lsrs	r3, r3, #3
 800281c:	4022      	ands	r2, r4
 800281e:	0757      	lsls	r7, r2, #29
 8002820:	0252      	lsls	r2, r2, #9
 8002822:	2501      	movs	r5, #1
 8002824:	431f      	orrs	r7, r3
 8002826:	0b14      	lsrs	r4, r2, #12
 8002828:	e5c2      	b.n	80023b0 <__aeabi_dsub+0x328>
 800282a:	000e      	movs	r6, r1
 800282c:	2001      	movs	r0, #1
 800282e:	e65f      	b.n	80024f0 <__aeabi_dsub+0x468>
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00d      	beq.n	8002850 <__aeabi_dsub+0x7c8>
 8002834:	464b      	mov	r3, r9
 8002836:	1b5b      	subs	r3, r3, r5
 8002838:	469c      	mov	ip, r3
 800283a:	2d00      	cmp	r5, #0
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x7b8>
 800283e:	e548      	b.n	80022d2 <__aeabi_dsub+0x24a>
 8002840:	2701      	movs	r7, #1
 8002842:	2b38      	cmp	r3, #56	@ 0x38
 8002844:	dd00      	ble.n	8002848 <__aeabi_dsub+0x7c0>
 8002846:	e566      	b.n	8002316 <__aeabi_dsub+0x28e>
 8002848:	2380      	movs	r3, #128	@ 0x80
 800284a:	041b      	lsls	r3, r3, #16
 800284c:	431c      	orrs	r4, r3
 800284e:	e550      	b.n	80022f2 <__aeabi_dsub+0x26a>
 8002850:	1c6b      	adds	r3, r5, #1
 8002852:	4d11      	ldr	r5, [pc, #68]	@ (8002898 <__aeabi_dsub+0x810>)
 8002854:	422b      	tst	r3, r5
 8002856:	d000      	beq.n	800285a <__aeabi_dsub+0x7d2>
 8002858:	e673      	b.n	8002542 <__aeabi_dsub+0x4ba>
 800285a:	4659      	mov	r1, fp
 800285c:	0023      	movs	r3, r4
 800285e:	4311      	orrs	r1, r2
 8002860:	468a      	mov	sl, r1
 8002862:	4303      	orrs	r3, r0
 8002864:	e600      	b.n	8002468 <__aeabi_dsub+0x3e0>
 8002866:	0767      	lsls	r7, r4, #29
 8002868:	08c0      	lsrs	r0, r0, #3
 800286a:	2300      	movs	r3, #0
 800286c:	4307      	orrs	r7, r0
 800286e:	08e5      	lsrs	r5, r4, #3
 8002870:	e662      	b.n	8002538 <__aeabi_dsub+0x4b0>
 8002872:	0764      	lsls	r4, r4, #29
 8002874:	08ff      	lsrs	r7, r7, #3
 8002876:	4327      	orrs	r7, r4
 8002878:	0905      	lsrs	r5, r0, #4
 800287a:	e65d      	b.n	8002538 <__aeabi_dsub+0x4b0>
 800287c:	08d2      	lsrs	r2, r2, #3
 800287e:	0749      	lsls	r1, r1, #29
 8002880:	4311      	orrs	r1, r2
 8002882:	000f      	movs	r7, r1
 8002884:	2302      	movs	r3, #2
 8002886:	092d      	lsrs	r5, r5, #4
 8002888:	e656      	b.n	8002538 <__aeabi_dsub+0x4b0>
 800288a:	0007      	movs	r7, r0
 800288c:	e5a4      	b.n	80023d8 <__aeabi_dsub+0x350>
 800288e:	0038      	movs	r0, r7
 8002890:	e48f      	b.n	80021b2 <__aeabi_dsub+0x12a>
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	ff7fffff 	.word	0xff7fffff
 8002898:	000007fe 	.word	0x000007fe

0800289c <__aeabi_dcmpun>:
 800289c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800289e:	46c6      	mov	lr, r8
 80028a0:	031e      	lsls	r6, r3, #12
 80028a2:	0b36      	lsrs	r6, r6, #12
 80028a4:	46b0      	mov	r8, r6
 80028a6:	4e0d      	ldr	r6, [pc, #52]	@ (80028dc <__aeabi_dcmpun+0x40>)
 80028a8:	030c      	lsls	r4, r1, #12
 80028aa:	004d      	lsls	r5, r1, #1
 80028ac:	005f      	lsls	r7, r3, #1
 80028ae:	b500      	push	{lr}
 80028b0:	0b24      	lsrs	r4, r4, #12
 80028b2:	0d6d      	lsrs	r5, r5, #21
 80028b4:	0d7f      	lsrs	r7, r7, #21
 80028b6:	42b5      	cmp	r5, r6
 80028b8:	d00b      	beq.n	80028d2 <__aeabi_dcmpun+0x36>
 80028ba:	4908      	ldr	r1, [pc, #32]	@ (80028dc <__aeabi_dcmpun+0x40>)
 80028bc:	2000      	movs	r0, #0
 80028be:	428f      	cmp	r7, r1
 80028c0:	d104      	bne.n	80028cc <__aeabi_dcmpun+0x30>
 80028c2:	4646      	mov	r6, r8
 80028c4:	4316      	orrs	r6, r2
 80028c6:	0030      	movs	r0, r6
 80028c8:	1e43      	subs	r3, r0, #1
 80028ca:	4198      	sbcs	r0, r3
 80028cc:	bc80      	pop	{r7}
 80028ce:	46b8      	mov	r8, r7
 80028d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028d2:	4304      	orrs	r4, r0
 80028d4:	2001      	movs	r0, #1
 80028d6:	2c00      	cmp	r4, #0
 80028d8:	d1f8      	bne.n	80028cc <__aeabi_dcmpun+0x30>
 80028da:	e7ee      	b.n	80028ba <__aeabi_dcmpun+0x1e>
 80028dc:	000007ff 	.word	0x000007ff

080028e0 <__aeabi_d2iz>:
 80028e0:	000b      	movs	r3, r1
 80028e2:	0002      	movs	r2, r0
 80028e4:	b570      	push	{r4, r5, r6, lr}
 80028e6:	4d16      	ldr	r5, [pc, #88]	@ (8002940 <__aeabi_d2iz+0x60>)
 80028e8:	030c      	lsls	r4, r1, #12
 80028ea:	b082      	sub	sp, #8
 80028ec:	0049      	lsls	r1, r1, #1
 80028ee:	2000      	movs	r0, #0
 80028f0:	9200      	str	r2, [sp, #0]
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	0b24      	lsrs	r4, r4, #12
 80028f6:	0d49      	lsrs	r1, r1, #21
 80028f8:	0fde      	lsrs	r6, r3, #31
 80028fa:	42a9      	cmp	r1, r5
 80028fc:	dd04      	ble.n	8002908 <__aeabi_d2iz+0x28>
 80028fe:	4811      	ldr	r0, [pc, #68]	@ (8002944 <__aeabi_d2iz+0x64>)
 8002900:	4281      	cmp	r1, r0
 8002902:	dd03      	ble.n	800290c <__aeabi_d2iz+0x2c>
 8002904:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <__aeabi_d2iz+0x68>)
 8002906:	18f0      	adds	r0, r6, r3
 8002908:	b002      	add	sp, #8
 800290a:	bd70      	pop	{r4, r5, r6, pc}
 800290c:	2080      	movs	r0, #128	@ 0x80
 800290e:	0340      	lsls	r0, r0, #13
 8002910:	4320      	orrs	r0, r4
 8002912:	4c0e      	ldr	r4, [pc, #56]	@ (800294c <__aeabi_d2iz+0x6c>)
 8002914:	1a64      	subs	r4, r4, r1
 8002916:	2c1f      	cmp	r4, #31
 8002918:	dd08      	ble.n	800292c <__aeabi_d2iz+0x4c>
 800291a:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <__aeabi_d2iz+0x70>)
 800291c:	1a5b      	subs	r3, r3, r1
 800291e:	40d8      	lsrs	r0, r3
 8002920:	0003      	movs	r3, r0
 8002922:	4258      	negs	r0, r3
 8002924:	2e00      	cmp	r6, #0
 8002926:	d1ef      	bne.n	8002908 <__aeabi_d2iz+0x28>
 8002928:	0018      	movs	r0, r3
 800292a:	e7ed      	b.n	8002908 <__aeabi_d2iz+0x28>
 800292c:	4b09      	ldr	r3, [pc, #36]	@ (8002954 <__aeabi_d2iz+0x74>)
 800292e:	9a00      	ldr	r2, [sp, #0]
 8002930:	469c      	mov	ip, r3
 8002932:	0003      	movs	r3, r0
 8002934:	4461      	add	r1, ip
 8002936:	408b      	lsls	r3, r1
 8002938:	40e2      	lsrs	r2, r4
 800293a:	4313      	orrs	r3, r2
 800293c:	e7f1      	b.n	8002922 <__aeabi_d2iz+0x42>
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	000003fe 	.word	0x000003fe
 8002944:	0000041d 	.word	0x0000041d
 8002948:	7fffffff 	.word	0x7fffffff
 800294c:	00000433 	.word	0x00000433
 8002950:	00000413 	.word	0x00000413
 8002954:	fffffbed 	.word	0xfffffbed

08002958 <__aeabi_i2d>:
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	2800      	cmp	r0, #0
 800295c:	d016      	beq.n	800298c <__aeabi_i2d+0x34>
 800295e:	17c3      	asrs	r3, r0, #31
 8002960:	18c5      	adds	r5, r0, r3
 8002962:	405d      	eors	r5, r3
 8002964:	0fc4      	lsrs	r4, r0, #31
 8002966:	0028      	movs	r0, r5
 8002968:	f000 f912 	bl	8002b90 <__clzsi2>
 800296c:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <__aeabi_i2d+0x58>)
 800296e:	1a1b      	subs	r3, r3, r0
 8002970:	055b      	lsls	r3, r3, #21
 8002972:	0d5b      	lsrs	r3, r3, #21
 8002974:	280a      	cmp	r0, #10
 8002976:	dc14      	bgt.n	80029a2 <__aeabi_i2d+0x4a>
 8002978:	0002      	movs	r2, r0
 800297a:	002e      	movs	r6, r5
 800297c:	3215      	adds	r2, #21
 800297e:	4096      	lsls	r6, r2
 8002980:	220b      	movs	r2, #11
 8002982:	1a12      	subs	r2, r2, r0
 8002984:	40d5      	lsrs	r5, r2
 8002986:	032d      	lsls	r5, r5, #12
 8002988:	0b2d      	lsrs	r5, r5, #12
 800298a:	e003      	b.n	8002994 <__aeabi_i2d+0x3c>
 800298c:	2400      	movs	r4, #0
 800298e:	2300      	movs	r3, #0
 8002990:	2500      	movs	r5, #0
 8002992:	2600      	movs	r6, #0
 8002994:	051b      	lsls	r3, r3, #20
 8002996:	432b      	orrs	r3, r5
 8002998:	07e4      	lsls	r4, r4, #31
 800299a:	4323      	orrs	r3, r4
 800299c:	0030      	movs	r0, r6
 800299e:	0019      	movs	r1, r3
 80029a0:	bd70      	pop	{r4, r5, r6, pc}
 80029a2:	380b      	subs	r0, #11
 80029a4:	4085      	lsls	r5, r0
 80029a6:	032d      	lsls	r5, r5, #12
 80029a8:	2600      	movs	r6, #0
 80029aa:	0b2d      	lsrs	r5, r5, #12
 80029ac:	e7f2      	b.n	8002994 <__aeabi_i2d+0x3c>
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	0000041e 	.word	0x0000041e

080029b4 <__aeabi_ui2d>:
 80029b4:	b510      	push	{r4, lr}
 80029b6:	1e04      	subs	r4, r0, #0
 80029b8:	d010      	beq.n	80029dc <__aeabi_ui2d+0x28>
 80029ba:	f000 f8e9 	bl	8002b90 <__clzsi2>
 80029be:	4b0e      	ldr	r3, [pc, #56]	@ (80029f8 <__aeabi_ui2d+0x44>)
 80029c0:	1a1b      	subs	r3, r3, r0
 80029c2:	055b      	lsls	r3, r3, #21
 80029c4:	0d5b      	lsrs	r3, r3, #21
 80029c6:	280a      	cmp	r0, #10
 80029c8:	dc0f      	bgt.n	80029ea <__aeabi_ui2d+0x36>
 80029ca:	220b      	movs	r2, #11
 80029cc:	0021      	movs	r1, r4
 80029ce:	1a12      	subs	r2, r2, r0
 80029d0:	40d1      	lsrs	r1, r2
 80029d2:	3015      	adds	r0, #21
 80029d4:	030a      	lsls	r2, r1, #12
 80029d6:	4084      	lsls	r4, r0
 80029d8:	0b12      	lsrs	r2, r2, #12
 80029da:	e001      	b.n	80029e0 <__aeabi_ui2d+0x2c>
 80029dc:	2300      	movs	r3, #0
 80029de:	2200      	movs	r2, #0
 80029e0:	051b      	lsls	r3, r3, #20
 80029e2:	4313      	orrs	r3, r2
 80029e4:	0020      	movs	r0, r4
 80029e6:	0019      	movs	r1, r3
 80029e8:	bd10      	pop	{r4, pc}
 80029ea:	0022      	movs	r2, r4
 80029ec:	380b      	subs	r0, #11
 80029ee:	4082      	lsls	r2, r0
 80029f0:	0312      	lsls	r2, r2, #12
 80029f2:	2400      	movs	r4, #0
 80029f4:	0b12      	lsrs	r2, r2, #12
 80029f6:	e7f3      	b.n	80029e0 <__aeabi_ui2d+0x2c>
 80029f8:	0000041e 	.word	0x0000041e

080029fc <__aeabi_f2d>:
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	0242      	lsls	r2, r0, #9
 8002a00:	0043      	lsls	r3, r0, #1
 8002a02:	0fc4      	lsrs	r4, r0, #31
 8002a04:	20fe      	movs	r0, #254	@ 0xfe
 8002a06:	0e1b      	lsrs	r3, r3, #24
 8002a08:	1c59      	adds	r1, r3, #1
 8002a0a:	0a55      	lsrs	r5, r2, #9
 8002a0c:	4208      	tst	r0, r1
 8002a0e:	d00c      	beq.n	8002a2a <__aeabi_f2d+0x2e>
 8002a10:	21e0      	movs	r1, #224	@ 0xe0
 8002a12:	0089      	lsls	r1, r1, #2
 8002a14:	468c      	mov	ip, r1
 8002a16:	076d      	lsls	r5, r5, #29
 8002a18:	0b12      	lsrs	r2, r2, #12
 8002a1a:	4463      	add	r3, ip
 8002a1c:	051b      	lsls	r3, r3, #20
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	07e4      	lsls	r4, r4, #31
 8002a22:	4323      	orrs	r3, r4
 8002a24:	0028      	movs	r0, r5
 8002a26:	0019      	movs	r1, r3
 8002a28:	bd70      	pop	{r4, r5, r6, pc}
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d114      	bne.n	8002a58 <__aeabi_f2d+0x5c>
 8002a2e:	2d00      	cmp	r5, #0
 8002a30:	d01b      	beq.n	8002a6a <__aeabi_f2d+0x6e>
 8002a32:	0028      	movs	r0, r5
 8002a34:	f000 f8ac 	bl	8002b90 <__clzsi2>
 8002a38:	280a      	cmp	r0, #10
 8002a3a:	dc1c      	bgt.n	8002a76 <__aeabi_f2d+0x7a>
 8002a3c:	230b      	movs	r3, #11
 8002a3e:	002a      	movs	r2, r5
 8002a40:	1a1b      	subs	r3, r3, r0
 8002a42:	40da      	lsrs	r2, r3
 8002a44:	0003      	movs	r3, r0
 8002a46:	3315      	adds	r3, #21
 8002a48:	409d      	lsls	r5, r3
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a84 <__aeabi_f2d+0x88>)
 8002a4c:	0312      	lsls	r2, r2, #12
 8002a4e:	1a1b      	subs	r3, r3, r0
 8002a50:	055b      	lsls	r3, r3, #21
 8002a52:	0b12      	lsrs	r2, r2, #12
 8002a54:	0d5b      	lsrs	r3, r3, #21
 8002a56:	e7e1      	b.n	8002a1c <__aeabi_f2d+0x20>
 8002a58:	2d00      	cmp	r5, #0
 8002a5a:	d009      	beq.n	8002a70 <__aeabi_f2d+0x74>
 8002a5c:	0b13      	lsrs	r3, r2, #12
 8002a5e:	2280      	movs	r2, #128	@ 0x80
 8002a60:	0312      	lsls	r2, r2, #12
 8002a62:	431a      	orrs	r2, r3
 8002a64:	076d      	lsls	r5, r5, #29
 8002a66:	4b08      	ldr	r3, [pc, #32]	@ (8002a88 <__aeabi_f2d+0x8c>)
 8002a68:	e7d8      	b.n	8002a1c <__aeabi_f2d+0x20>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	e7d5      	b.n	8002a1c <__aeabi_f2d+0x20>
 8002a70:	2200      	movs	r2, #0
 8002a72:	4b05      	ldr	r3, [pc, #20]	@ (8002a88 <__aeabi_f2d+0x8c>)
 8002a74:	e7d2      	b.n	8002a1c <__aeabi_f2d+0x20>
 8002a76:	0003      	movs	r3, r0
 8002a78:	002a      	movs	r2, r5
 8002a7a:	3b0b      	subs	r3, #11
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	2500      	movs	r5, #0
 8002a80:	e7e3      	b.n	8002a4a <__aeabi_f2d+0x4e>
 8002a82:	46c0      	nop			@ (mov r8, r8)
 8002a84:	00000389 	.word	0x00000389
 8002a88:	000007ff 	.word	0x000007ff

08002a8c <__aeabi_d2f>:
 8002a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a8e:	004b      	lsls	r3, r1, #1
 8002a90:	030f      	lsls	r7, r1, #12
 8002a92:	0d5b      	lsrs	r3, r3, #21
 8002a94:	4c3a      	ldr	r4, [pc, #232]	@ (8002b80 <__aeabi_d2f+0xf4>)
 8002a96:	0f45      	lsrs	r5, r0, #29
 8002a98:	b083      	sub	sp, #12
 8002a9a:	0a7f      	lsrs	r7, r7, #9
 8002a9c:	1c5e      	adds	r6, r3, #1
 8002a9e:	432f      	orrs	r7, r5
 8002aa0:	9000      	str	r0, [sp, #0]
 8002aa2:	9101      	str	r1, [sp, #4]
 8002aa4:	0fca      	lsrs	r2, r1, #31
 8002aa6:	00c5      	lsls	r5, r0, #3
 8002aa8:	4226      	tst	r6, r4
 8002aaa:	d00b      	beq.n	8002ac4 <__aeabi_d2f+0x38>
 8002aac:	4935      	ldr	r1, [pc, #212]	@ (8002b84 <__aeabi_d2f+0xf8>)
 8002aae:	185c      	adds	r4, r3, r1
 8002ab0:	2cfe      	cmp	r4, #254	@ 0xfe
 8002ab2:	dd13      	ble.n	8002adc <__aeabi_d2f+0x50>
 8002ab4:	20ff      	movs	r0, #255	@ 0xff
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	05c0      	lsls	r0, r0, #23
 8002aba:	4318      	orrs	r0, r3
 8002abc:	07d2      	lsls	r2, r2, #31
 8002abe:	4310      	orrs	r0, r2
 8002ac0:	b003      	add	sp, #12
 8002ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ac4:	433d      	orrs	r5, r7
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <__aeabi_d2f+0x42>
 8002aca:	2000      	movs	r0, #0
 8002acc:	e7f4      	b.n	8002ab8 <__aeabi_d2f+0x2c>
 8002ace:	2d00      	cmp	r5, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <__aeabi_d2f+0x28>
 8002ad2:	2380      	movs	r3, #128	@ 0x80
 8002ad4:	03db      	lsls	r3, r3, #15
 8002ad6:	20ff      	movs	r0, #255	@ 0xff
 8002ad8:	433b      	orrs	r3, r7
 8002ada:	e7ed      	b.n	8002ab8 <__aeabi_d2f+0x2c>
 8002adc:	2c00      	cmp	r4, #0
 8002ade:	dd0c      	ble.n	8002afa <__aeabi_d2f+0x6e>
 8002ae0:	9b00      	ldr	r3, [sp, #0]
 8002ae2:	00ff      	lsls	r7, r7, #3
 8002ae4:	019b      	lsls	r3, r3, #6
 8002ae6:	1e58      	subs	r0, r3, #1
 8002ae8:	4183      	sbcs	r3, r0
 8002aea:	0f69      	lsrs	r1, r5, #29
 8002aec:	433b      	orrs	r3, r7
 8002aee:	430b      	orrs	r3, r1
 8002af0:	0759      	lsls	r1, r3, #29
 8002af2:	d127      	bne.n	8002b44 <__aeabi_d2f+0xb8>
 8002af4:	08db      	lsrs	r3, r3, #3
 8002af6:	b2e0      	uxtb	r0, r4
 8002af8:	e7de      	b.n	8002ab8 <__aeabi_d2f+0x2c>
 8002afa:	0021      	movs	r1, r4
 8002afc:	3117      	adds	r1, #23
 8002afe:	db31      	blt.n	8002b64 <__aeabi_d2f+0xd8>
 8002b00:	2180      	movs	r1, #128	@ 0x80
 8002b02:	201e      	movs	r0, #30
 8002b04:	0409      	lsls	r1, r1, #16
 8002b06:	4339      	orrs	r1, r7
 8002b08:	1b00      	subs	r0, r0, r4
 8002b0a:	281f      	cmp	r0, #31
 8002b0c:	dd2d      	ble.n	8002b6a <__aeabi_d2f+0xde>
 8002b0e:	2602      	movs	r6, #2
 8002b10:	4276      	negs	r6, r6
 8002b12:	1b34      	subs	r4, r6, r4
 8002b14:	000e      	movs	r6, r1
 8002b16:	40e6      	lsrs	r6, r4
 8002b18:	0034      	movs	r4, r6
 8002b1a:	2820      	cmp	r0, #32
 8002b1c:	d004      	beq.n	8002b28 <__aeabi_d2f+0x9c>
 8002b1e:	481a      	ldr	r0, [pc, #104]	@ (8002b88 <__aeabi_d2f+0xfc>)
 8002b20:	4684      	mov	ip, r0
 8002b22:	4463      	add	r3, ip
 8002b24:	4099      	lsls	r1, r3
 8002b26:	430d      	orrs	r5, r1
 8002b28:	002b      	movs	r3, r5
 8002b2a:	1e59      	subs	r1, r3, #1
 8002b2c:	418b      	sbcs	r3, r1
 8002b2e:	4323      	orrs	r3, r4
 8002b30:	0759      	lsls	r1, r3, #29
 8002b32:	d003      	beq.n	8002b3c <__aeabi_d2f+0xb0>
 8002b34:	210f      	movs	r1, #15
 8002b36:	4019      	ands	r1, r3
 8002b38:	2904      	cmp	r1, #4
 8002b3a:	d10b      	bne.n	8002b54 <__aeabi_d2f+0xc8>
 8002b3c:	019b      	lsls	r3, r3, #6
 8002b3e:	2000      	movs	r0, #0
 8002b40:	0a5b      	lsrs	r3, r3, #9
 8002b42:	e7b9      	b.n	8002ab8 <__aeabi_d2f+0x2c>
 8002b44:	210f      	movs	r1, #15
 8002b46:	4019      	ands	r1, r3
 8002b48:	2904      	cmp	r1, #4
 8002b4a:	d104      	bne.n	8002b56 <__aeabi_d2f+0xca>
 8002b4c:	019b      	lsls	r3, r3, #6
 8002b4e:	0a5b      	lsrs	r3, r3, #9
 8002b50:	b2e0      	uxtb	r0, r4
 8002b52:	e7b1      	b.n	8002ab8 <__aeabi_d2f+0x2c>
 8002b54:	2400      	movs	r4, #0
 8002b56:	3304      	adds	r3, #4
 8002b58:	0159      	lsls	r1, r3, #5
 8002b5a:	d5f7      	bpl.n	8002b4c <__aeabi_d2f+0xc0>
 8002b5c:	3401      	adds	r4, #1
 8002b5e:	2300      	movs	r3, #0
 8002b60:	b2e0      	uxtb	r0, r4
 8002b62:	e7a9      	b.n	8002ab8 <__aeabi_d2f+0x2c>
 8002b64:	2000      	movs	r0, #0
 8002b66:	2300      	movs	r3, #0
 8002b68:	e7a6      	b.n	8002ab8 <__aeabi_d2f+0x2c>
 8002b6a:	4c08      	ldr	r4, [pc, #32]	@ (8002b8c <__aeabi_d2f+0x100>)
 8002b6c:	191c      	adds	r4, r3, r4
 8002b6e:	002b      	movs	r3, r5
 8002b70:	40a5      	lsls	r5, r4
 8002b72:	40c3      	lsrs	r3, r0
 8002b74:	40a1      	lsls	r1, r4
 8002b76:	1e68      	subs	r0, r5, #1
 8002b78:	4185      	sbcs	r5, r0
 8002b7a:	4329      	orrs	r1, r5
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	e7d7      	b.n	8002b30 <__aeabi_d2f+0xa4>
 8002b80:	000007fe 	.word	0x000007fe
 8002b84:	fffffc80 	.word	0xfffffc80
 8002b88:	fffffca2 	.word	0xfffffca2
 8002b8c:	fffffc82 	.word	0xfffffc82

08002b90 <__clzsi2>:
 8002b90:	211c      	movs	r1, #28
 8002b92:	2301      	movs	r3, #1
 8002b94:	041b      	lsls	r3, r3, #16
 8002b96:	4298      	cmp	r0, r3
 8002b98:	d301      	bcc.n	8002b9e <__clzsi2+0xe>
 8002b9a:	0c00      	lsrs	r0, r0, #16
 8002b9c:	3910      	subs	r1, #16
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	4298      	cmp	r0, r3
 8002ba2:	d301      	bcc.n	8002ba8 <__clzsi2+0x18>
 8002ba4:	0a00      	lsrs	r0, r0, #8
 8002ba6:	3908      	subs	r1, #8
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	4298      	cmp	r0, r3
 8002bac:	d301      	bcc.n	8002bb2 <__clzsi2+0x22>
 8002bae:	0900      	lsrs	r0, r0, #4
 8002bb0:	3904      	subs	r1, #4
 8002bb2:	a202      	add	r2, pc, #8	@ (adr r2, 8002bbc <__clzsi2+0x2c>)
 8002bb4:	5c10      	ldrb	r0, [r2, r0]
 8002bb6:	1840      	adds	r0, r0, r1
 8002bb8:	4770      	bx	lr
 8002bba:	46c0      	nop			@ (mov r8, r8)
 8002bbc:	02020304 	.word	0x02020304
 8002bc0:	01010101 	.word	0x01010101
	...

08002bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b0a5      	sub	sp, #148	@ 0x94
 8002bd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bd2:	f000 fc47 	bl	8003464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bd6:	f000 f85f 	bl	8002c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bda:	f000 f92f 	bl	8002e3c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002bde:	f000 f8bd 	bl	8002d5c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002be2:	f000 f8fb 	bl	8002ddc <MX_USART2_UART_Init>

  // Start UART reception with interrupts


  char buffer[128];
  sendString("Enter a word:");
 8002be6:	4b24      	ldr	r3, [pc, #144]	@ (8002c78 <main+0xac>)
 8002be8:	0018      	movs	r0, r3
 8002bea:	f000 f9b9 	bl	8002f60 <sendString>
  HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8002bee:	4923      	ldr	r1, [pc, #140]	@ (8002c7c <main+0xb0>)
 8002bf0:	4b23      	ldr	r3, [pc, #140]	@ (8002c80 <main+0xb4>)
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	0018      	movs	r0, r3
 8002bf6:	f002 fad0 	bl	800519a <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (RxCompleteFlag)
 8002bfa:	4b22      	ldr	r3, [pc, #136]	@ (8002c84 <main+0xb8>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d016      	beq.n	8002c30 <main+0x64>
	      {
		  if(paritate == 0)
 8002c02:	4b21      	ldr	r3, [pc, #132]	@ (8002c88 <main+0xbc>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d103      	bne.n	8002c12 <main+0x46>
			  	 paritate = 1;
 8002c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8002c88 <main+0xbc>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
 8002c10:	e002      	b.n	8002c18 <main+0x4c>
		  else
			  paritate=0;
 8002c12:	4b1d      	ldr	r3, [pc, #116]	@ (8002c88 <main+0xbc>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
	        // Send back the received data
//	        HAL_UART_Transmit(&huart2, RxData, RxIndex, HAL_MAX_DELAY);
//		  sendString("data recieved");
	        // Reset for next reception
	        RxIndex = 0;
 8002c18:	4b1c      	ldr	r3, [pc, #112]	@ (8002c8c <main+0xc0>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
	        RxCompleteFlag = 0;
 8002c1e:	4b19      	ldr	r3, [pc, #100]	@ (8002c84 <main+0xb8>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]

	        // Restart interrupt reception
	        HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8002c24:	4915      	ldr	r1, [pc, #84]	@ (8002c7c <main+0xb0>)
 8002c26:	4b16      	ldr	r3, [pc, #88]	@ (8002c80 <main+0xb4>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f002 fab5 	bl	800519a <HAL_UART_Receive_IT>
	      }
    float temperature = getTemp();
 8002c30:	f000 f9ac 	bl	8002f8c <getTemp>
 8002c34:	1c03      	adds	r3, r0, #0
 8002c36:	2484      	movs	r4, #132	@ 0x84
 8002c38:	193a      	adds	r2, r7, r4
 8002c3a:	6013      	str	r3, [r2, #0]
    //! to string
    if (temperature != -1.0f)
 8002c3c:	4914      	ldr	r1, [pc, #80]	@ (8002c90 <main+0xc4>)
 8002c3e:	193b      	adds	r3, r7, r4
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	f7fd fc3d 	bl	80004c0 <__aeabi_fcmpeq>
 8002c46:	1e03      	subs	r3, r0, #0
 8002c48:	d111      	bne.n	8002c6e <main+0xa2>
    {
        snprintf(buffer, sizeof(buffer), "%.2f\r\n", temperature);
 8002c4a:	193b      	adds	r3, r7, r4
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	f7ff fed5 	bl	80029fc <__aeabi_f2d>
 8002c52:	0002      	movs	r2, r0
 8002c54:	000b      	movs	r3, r1
 8002c56:	490f      	ldr	r1, [pc, #60]	@ (8002c94 <main+0xc8>)
 8002c58:	1d38      	adds	r0, r7, #4
 8002c5a:	9200      	str	r2, [sp, #0]
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	000a      	movs	r2, r1
 8002c60:	2180      	movs	r1, #128	@ 0x80
 8002c62:	f004 fb25 	bl	80072b0 <sniprintf>
        sendString(buffer);
 8002c66:	1d3b      	adds	r3, r7, #4
 8002c68:	0018      	movs	r0, r3
 8002c6a:	f000 f979 	bl	8002f60 <sendString>
    }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(100);
 8002c6e:	2064      	movs	r0, #100	@ 0x64
 8002c70:	f000 fc5c 	bl	800352c <HAL_Delay>
  {
 8002c74:	e7c1      	b.n	8002bfa <main+0x2e>
 8002c76:	46c0      	nop			@ (mov r8, r8)
 8002c78:	0800ad60 	.word	0x0800ad60
 8002c7c:	200002cc 	.word	0x200002cc
 8002c80:	20000244 	.word	0x20000244
 8002c84:	20000acd 	.word	0x20000acd
 8002c88:	20000ace 	.word	0x20000ace
 8002c8c:	20000acc 	.word	0x20000acc
 8002c90:	bf800000 	.word	0xbf800000
 8002c94:	0800ad70 	.word	0x0800ad70

08002c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c98:	b590      	push	{r4, r7, lr}
 8002c9a:	b095      	sub	sp, #84	@ 0x54
 8002c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c9e:	2420      	movs	r4, #32
 8002ca0:	193b      	adds	r3, r7, r4
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	2330      	movs	r3, #48	@ 0x30
 8002ca6:	001a      	movs	r2, r3
 8002ca8:	2100      	movs	r1, #0
 8002caa:	f004 fba5 	bl	80073f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cae:	2310      	movs	r3, #16
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	001a      	movs	r2, r3
 8002cb8:	2100      	movs	r1, #0
 8002cba:	f004 fb9d 	bl	80073f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002cbe:	003b      	movs	r3, r7
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	2310      	movs	r3, #16
 8002cc4:	001a      	movs	r2, r3
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	f004 fb96 	bl	80073f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ccc:	0021      	movs	r1, r4
 8002cce:	187b      	adds	r3, r7, r1
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cd4:	187b      	adds	r3, r7, r1
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cda:	187b      	adds	r3, r7, r1
 8002cdc:	2210      	movs	r2, #16
 8002cde:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ce0:	187b      	adds	r3, r7, r1
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002ce6:	187b      	adds	r3, r7, r1
 8002ce8:	2200      	movs	r2, #0
 8002cea:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002cec:	187b      	adds	r3, r7, r1
 8002cee:	22a0      	movs	r2, #160	@ 0xa0
 8002cf0:	0392      	lsls	r2, r2, #14
 8002cf2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cfa:	187b      	adds	r3, r7, r1
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f001 fc2d 	bl	800455c <HAL_RCC_OscConfig>
 8002d02:	1e03      	subs	r3, r0, #0
 8002d04:	d001      	beq.n	8002d0a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002d06:	f000 f9cd 	bl	80030a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d0a:	2110      	movs	r1, #16
 8002d0c:	187b      	adds	r3, r7, r1
 8002d0e:	2207      	movs	r2, #7
 8002d10:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d12:	187b      	adds	r3, r7, r1
 8002d14:	2202      	movs	r2, #2
 8002d16:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d18:	187b      	adds	r3, r7, r1
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d1e:	187b      	adds	r3, r7, r1
 8002d20:	2200      	movs	r2, #0
 8002d22:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d24:	187b      	adds	r3, r7, r1
 8002d26:	2101      	movs	r1, #1
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f001 ff31 	bl	8004b90 <HAL_RCC_ClockConfig>
 8002d2e:	1e03      	subs	r3, r0, #0
 8002d30:	d001      	beq.n	8002d36 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002d32:	f000 f9b7 	bl	80030a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002d36:	003b      	movs	r3, r7
 8002d38:	2220      	movs	r2, #32
 8002d3a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002d3c:	003b      	movs	r3, r7
 8002d3e:	2200      	movs	r2, #0
 8002d40:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d42:	003b      	movs	r3, r7
 8002d44:	0018      	movs	r0, r3
 8002d46:	f002 f867 	bl	8004e18 <HAL_RCCEx_PeriphCLKConfig>
 8002d4a:	1e03      	subs	r3, r0, #0
 8002d4c:	d001      	beq.n	8002d52 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002d4e:	f000 f9a9 	bl	80030a4 <Error_Handler>
  }
}
 8002d52:	46c0      	nop			@ (mov r8, r8)
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b015      	add	sp, #84	@ 0x54
 8002d58:	bd90      	pop	{r4, r7, pc}
	...

08002d5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d60:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd0 <MX_I2C1_Init+0x74>)
 8002d62:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd4 <MX_I2C1_Init+0x78>)
 8002d64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8002d66:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd0 <MX_I2C1_Init+0x74>)
 8002d68:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd8 <MX_I2C1_Init+0x7c>)
 8002d6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d6c:	4b18      	ldr	r3, [pc, #96]	@ (8002dd0 <MX_I2C1_Init+0x74>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d72:	4b17      	ldr	r3, [pc, #92]	@ (8002dd0 <MX_I2C1_Init+0x74>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d78:	4b15      	ldr	r3, [pc, #84]	@ (8002dd0 <MX_I2C1_Init+0x74>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d7e:	4b14      	ldr	r3, [pc, #80]	@ (8002dd0 <MX_I2C1_Init+0x74>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d84:	4b12      	ldr	r3, [pc, #72]	@ (8002dd0 <MX_I2C1_Init+0x74>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d8a:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <MX_I2C1_Init+0x74>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d90:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd0 <MX_I2C1_Init+0x74>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d96:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd0 <MX_I2C1_Init+0x74>)
 8002d98:	0018      	movs	r0, r3
 8002d9a:	f000 fed5 	bl	8003b48 <HAL_I2C_Init>
 8002d9e:	1e03      	subs	r3, r0, #0
 8002da0:	d001      	beq.n	8002da6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002da2:	f000 f97f 	bl	80030a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002da6:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd0 <MX_I2C1_Init+0x74>)
 8002da8:	2100      	movs	r1, #0
 8002daa:	0018      	movs	r0, r3
 8002dac:	f001 fb3e 	bl	800442c <HAL_I2CEx_ConfigAnalogFilter>
 8002db0:	1e03      	subs	r3, r0, #0
 8002db2:	d001      	beq.n	8002db8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002db4:	f000 f976 	bl	80030a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002db8:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <MX_I2C1_Init+0x74>)
 8002dba:	2100      	movs	r1, #0
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f001 fb81 	bl	80044c4 <HAL_I2CEx_ConfigDigitalFilter>
 8002dc2:	1e03      	subs	r3, r0, #0
 8002dc4:	d001      	beq.n	8002dca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002dc6:	f000 f96d 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002dca:	46c0      	nop			@ (mov r8, r8)
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	200001f0 	.word	0x200001f0
 8002dd4:	40005400 	.word	0x40005400
 8002dd8:	00201d2b 	.word	0x00201d2b

08002ddc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002de0:	4b14      	ldr	r3, [pc, #80]	@ (8002e34 <MX_USART2_UART_Init+0x58>)
 8002de2:	4a15      	ldr	r2, [pc, #84]	@ (8002e38 <MX_USART2_UART_Init+0x5c>)
 8002de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002de6:	4b13      	ldr	r3, [pc, #76]	@ (8002e34 <MX_USART2_UART_Init+0x58>)
 8002de8:	2296      	movs	r2, #150	@ 0x96
 8002dea:	0212      	lsls	r2, r2, #8
 8002dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002dee:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <MX_USART2_UART_Init+0x58>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002df4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e34 <MX_USART2_UART_Init+0x58>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8002e34 <MX_USART2_UART_Init+0x58>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e00:	4b0c      	ldr	r3, [pc, #48]	@ (8002e34 <MX_USART2_UART_Init+0x58>)
 8002e02:	220c      	movs	r2, #12
 8002e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e06:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <MX_USART2_UART_Init+0x58>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e0c:	4b09      	ldr	r3, [pc, #36]	@ (8002e34 <MX_USART2_UART_Init+0x58>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e12:	4b08      	ldr	r3, [pc, #32]	@ (8002e34 <MX_USART2_UART_Init+0x58>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e18:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <MX_USART2_UART_Init+0x58>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e1e:	4b05      	ldr	r3, [pc, #20]	@ (8002e34 <MX_USART2_UART_Init+0x58>)
 8002e20:	0018      	movs	r0, r3
 8002e22:	f002 f8c7 	bl	8004fb4 <HAL_UART_Init>
 8002e26:	1e03      	subs	r3, r0, #0
 8002e28:	d001      	beq.n	8002e2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002e2a:	f000 f93b 	bl	80030a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e2e:	46c0      	nop			@ (mov r8, r8)
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000244 	.word	0x20000244
 8002e38:	40004400 	.word	0x40004400

08002e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e3c:	b590      	push	{r4, r7, lr}
 8002e3e:	b08b      	sub	sp, #44	@ 0x2c
 8002e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e42:	2414      	movs	r4, #20
 8002e44:	193b      	adds	r3, r7, r4
 8002e46:	0018      	movs	r0, r3
 8002e48:	2314      	movs	r3, #20
 8002e4a:	001a      	movs	r2, r3
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	f004 fad3 	bl	80073f8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e52:	4b40      	ldr	r3, [pc, #256]	@ (8002f54 <MX_GPIO_Init+0x118>)
 8002e54:	695a      	ldr	r2, [r3, #20]
 8002e56:	4b3f      	ldr	r3, [pc, #252]	@ (8002f54 <MX_GPIO_Init+0x118>)
 8002e58:	2180      	movs	r1, #128	@ 0x80
 8002e5a:	0309      	lsls	r1, r1, #12
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	615a      	str	r2, [r3, #20]
 8002e60:	4b3c      	ldr	r3, [pc, #240]	@ (8002f54 <MX_GPIO_Init+0x118>)
 8002e62:	695a      	ldr	r2, [r3, #20]
 8002e64:	2380      	movs	r3, #128	@ 0x80
 8002e66:	031b      	lsls	r3, r3, #12
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e6e:	4b39      	ldr	r3, [pc, #228]	@ (8002f54 <MX_GPIO_Init+0x118>)
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	4b38      	ldr	r3, [pc, #224]	@ (8002f54 <MX_GPIO_Init+0x118>)
 8002e74:	2180      	movs	r1, #128	@ 0x80
 8002e76:	03c9      	lsls	r1, r1, #15
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	615a      	str	r2, [r3, #20]
 8002e7c:	4b35      	ldr	r3, [pc, #212]	@ (8002f54 <MX_GPIO_Init+0x118>)
 8002e7e:	695a      	ldr	r2, [r3, #20]
 8002e80:	2380      	movs	r3, #128	@ 0x80
 8002e82:	03db      	lsls	r3, r3, #15
 8002e84:	4013      	ands	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e8a:	4b32      	ldr	r3, [pc, #200]	@ (8002f54 <MX_GPIO_Init+0x118>)
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	4b31      	ldr	r3, [pc, #196]	@ (8002f54 <MX_GPIO_Init+0x118>)
 8002e90:	2180      	movs	r1, #128	@ 0x80
 8002e92:	0289      	lsls	r1, r1, #10
 8002e94:	430a      	orrs	r2, r1
 8002e96:	615a      	str	r2, [r3, #20]
 8002e98:	4b2e      	ldr	r3, [pc, #184]	@ (8002f54 <MX_GPIO_Init+0x118>)
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	2380      	movs	r3, #128	@ 0x80
 8002e9e:	029b      	lsls	r3, r3, #10
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8002f54 <MX_GPIO_Init+0x118>)
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	4b2a      	ldr	r3, [pc, #168]	@ (8002f54 <MX_GPIO_Init+0x118>)
 8002eac:	2180      	movs	r1, #128	@ 0x80
 8002eae:	02c9      	lsls	r1, r1, #11
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	615a      	str	r2, [r3, #20]
 8002eb4:	4b27      	ldr	r3, [pc, #156]	@ (8002f54 <MX_GPIO_Init+0x118>)
 8002eb6:	695a      	ldr	r2, [r3, #20]
 8002eb8:	2380      	movs	r3, #128	@ 0x80
 8002eba:	02db      	lsls	r3, r3, #11
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8002ec2:	2390      	movs	r3, #144	@ 0x90
 8002ec4:	05db      	lsls	r3, r3, #23
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2120      	movs	r1, #32
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 fe1e 	bl	8003b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002ed0:	4b21      	ldr	r3, [pc, #132]	@ (8002f58 <MX_GPIO_Init+0x11c>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2120      	movs	r1, #32
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f000 fe18 	bl	8003b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002edc:	193b      	adds	r3, r7, r4
 8002ede:	2280      	movs	r2, #128	@ 0x80
 8002ee0:	0192      	lsls	r2, r2, #6
 8002ee2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ee4:	193b      	adds	r3, r7, r4
 8002ee6:	2284      	movs	r2, #132	@ 0x84
 8002ee8:	0392      	lsls	r2, r2, #14
 8002eea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eec:	193b      	adds	r3, r7, r4
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ef2:	193b      	adds	r3, r7, r4
 8002ef4:	4a19      	ldr	r2, [pc, #100]	@ (8002f5c <MX_GPIO_Init+0x120>)
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	0010      	movs	r0, r2
 8002efa:	f000 fc97 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002efe:	193b      	adds	r3, r7, r4
 8002f00:	2220      	movs	r2, #32
 8002f02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f04:	193b      	adds	r3, r7, r4
 8002f06:	2201      	movs	r2, #1
 8002f08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	193b      	adds	r3, r7, r4
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	193b      	adds	r3, r7, r4
 8002f12:	2200      	movs	r2, #0
 8002f14:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f16:	193a      	adds	r2, r7, r4
 8002f18:	2390      	movs	r3, #144	@ 0x90
 8002f1a:	05db      	lsls	r3, r3, #23
 8002f1c:	0011      	movs	r1, r2
 8002f1e:	0018      	movs	r0, r3
 8002f20:	f000 fc84 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f24:	0021      	movs	r1, r4
 8002f26:	187b      	adds	r3, r7, r1
 8002f28:	2220      	movs	r2, #32
 8002f2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f2c:	187b      	adds	r3, r7, r1
 8002f2e:	2201      	movs	r2, #1
 8002f30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	187b      	adds	r3, r7, r1
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	187b      	adds	r3, r7, r1
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3e:	187b      	adds	r3, r7, r1
 8002f40:	4a05      	ldr	r2, [pc, #20]	@ (8002f58 <MX_GPIO_Init+0x11c>)
 8002f42:	0019      	movs	r1, r3
 8002f44:	0010      	movs	r0, r2
 8002f46:	f000 fc71 	bl	800382c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b00b      	add	sp, #44	@ 0x2c
 8002f50:	bd90      	pop	{r4, r7, pc}
 8002f52:	46c0      	nop			@ (mov r8, r8)
 8002f54:	40021000 	.word	0x40021000
 8002f58:	48000400 	.word	0x48000400
 8002f5c:	48000800 	.word	0x48000800

08002f60 <sendString>:

/* USER CODE BEGIN 4 */
static void sendString(char *str)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	f7fd f8cc 	bl	8000108 <strlen>
 8002f70:	0003      	movs	r3, r0
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	2301      	movs	r3, #1
 8002f76:	425b      	negs	r3, r3
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4803      	ldr	r0, [pc, #12]	@ (8002f88 <sendString+0x28>)
 8002f7c:	f002 f86e 	bl	800505c <HAL_UART_Transmit>
}
 8002f80:	46c0      	nop			@ (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b002      	add	sp, #8
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	20000244 	.word	0x20000244

08002f8c <getTemp>:

static float getTemp(void){
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af04      	add	r7, sp, #16
    uint8_t tempData[2];    // Buffer
    int16_t rawTemp;        //
    float temperature;      // Temperature in Celsius.
    if (HAL_I2C_Mem_Read(&hi2c1, TMP102_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, tempData, 2, HAL_MAX_DELAY) != HAL_OK)
 8002f92:	4819      	ldr	r0, [pc, #100]	@ (8002ff8 <getTemp+0x6c>)
 8002f94:	2301      	movs	r3, #1
 8002f96:	425b      	negs	r3, r3
 8002f98:	9302      	str	r3, [sp, #8]
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	1d3b      	adds	r3, r7, #4
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2190      	movs	r1, #144	@ 0x90
 8002fa8:	f000 fe74 	bl	8003c94 <HAL_I2C_Mem_Read>
 8002fac:	1e03      	subs	r3, r0, #0
 8002fae:	d001      	beq.n	8002fb4 <getTemp+0x28>
    {
        return -1.0f;
 8002fb0:	4b12      	ldr	r3, [pc, #72]	@ (8002ffc <getTemp+0x70>)
 8002fb2:	e01c      	b.n	8002fee <getTemp+0x62>
    }
    rawTemp = (int16_t)((tempData[0] << 4) | (tempData[1] >> 4));
 8002fb4:	1d3b      	adds	r3, r7, #4
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	b21b      	sxth	r3, r3
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	b219      	sxth	r1, r3
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	785b      	ldrb	r3, [r3, #1]
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	b21a      	sxth	r2, r3
 8002fc8:	200e      	movs	r0, #14
 8002fca:	183b      	adds	r3, r7, r0
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	801a      	strh	r2, [r3, #0]
    temperature = rawTemp * 0.0625f;  // TMP102 0.0625°C.
 8002fd0:	183b      	adds	r3, r7, r0
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	5e9b      	ldrsh	r3, [r3, r2]
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	f7fd fd20 	bl	8000a1c <__aeabi_i2f>
 8002fdc:	1c03      	adds	r3, r0, #0
 8002fde:	21f6      	movs	r1, #246	@ 0xf6
 8002fe0:	0589      	lsls	r1, r1, #22
 8002fe2:	1c18      	adds	r0, r3, #0
 8002fe4:	f7fd fbc0 	bl	8000768 <__aeabi_fmul>
 8002fe8:	1c03      	adds	r3, r0, #0
 8002fea:	60bb      	str	r3, [r7, #8]
    return temperature;
 8002fec:	68bb      	ldr	r3, [r7, #8]
}
 8002fee:	1c18      	adds	r0, r3, #0
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b004      	add	sp, #16
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	46c0      	nop			@ (mov r8, r8)
 8002ff8:	200001f0 	.word	0x200001f0
 8002ffc:	bf800000 	.word	0xbf800000

08003000 <HAL_UART_RxCpltCallback>:
//    sendString("message recieved");
//    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);    // Blue LED
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a1d      	ldr	r2, [pc, #116]	@ (8003084 <HAL_UART_RxCpltCallback+0x84>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d134      	bne.n	800307c <HAL_UART_RxCpltCallback+0x7c>
    {
        // Check if we haven't filled the buffer
        if (RxIndex < RX_BUFFER_SIZE - 1)
        {
            // Store the received byte
            RxData[RxIndex++] = RxBuffer[0];
 8003012:	4b1d      	ldr	r3, [pc, #116]	@ (8003088 <HAL_UART_RxCpltCallback+0x88>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	b2d1      	uxtb	r1, r2
 800301a:	4a1b      	ldr	r2, [pc, #108]	@ (8003088 <HAL_UART_RxCpltCallback+0x88>)
 800301c:	7011      	strb	r1, [r2, #0]
 800301e:	001a      	movs	r2, r3
 8003020:	4b1a      	ldr	r3, [pc, #104]	@ (800308c <HAL_UART_RxCpltCallback+0x8c>)
 8003022:	7819      	ldrb	r1, [r3, #0]
 8003024:	4b1a      	ldr	r3, [pc, #104]	@ (8003090 <HAL_UART_RxCpltCallback+0x90>)
 8003026:	5499      	strb	r1, [r3, r2]

            // Check for end of message (newline or carriage return)
            if (RxBuffer[0] == '\r' || RxBuffer[0] == '\n')
 8003028:	4b18      	ldr	r3, [pc, #96]	@ (800308c <HAL_UART_RxCpltCallback+0x8c>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b0d      	cmp	r3, #13
 800302e:	d003      	beq.n	8003038 <HAL_UART_RxCpltCallback+0x38>
 8003030:	4b16      	ldr	r3, [pc, #88]	@ (800308c <HAL_UART_RxCpltCallback+0x8c>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b0a      	cmp	r3, #10
 8003036:	d11a      	bne.n	800306e <HAL_UART_RxCpltCallback+0x6e>
            {
                RxData[RxIndex] = '\0';  // Null-terminate the string
 8003038:	4b13      	ldr	r3, [pc, #76]	@ (8003088 <HAL_UART_RxCpltCallback+0x88>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	001a      	movs	r2, r3
 800303e:	4b14      	ldr	r3, [pc, #80]	@ (8003090 <HAL_UART_RxCpltCallback+0x90>)
 8003040:	2100      	movs	r1, #0
 8003042:	5499      	strb	r1, [r3, r2]
                RxCompleteFlag = 1;
 8003044:	4b13      	ldr	r3, [pc, #76]	@ (8003094 <HAL_UART_RxCpltCallback+0x94>)
 8003046:	2201      	movs	r2, #1
 8003048:	701a      	strb	r2, [r3, #0]

                // Turn on Blue LED
                if(paritate == 0)
 800304a:	4b13      	ldr	r3, [pc, #76]	@ (8003098 <HAL_UART_RxCpltCallback+0x98>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_UART_RxCpltCallback+0x60>
                	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8003052:	4b12      	ldr	r3, [pc, #72]	@ (800309c <HAL_UART_RxCpltCallback+0x9c>)
 8003054:	2201      	movs	r2, #1
 8003056:	2120      	movs	r1, #32
 8003058:	0018      	movs	r0, r3
 800305a:	f000 fd57 	bl	8003b0c <HAL_GPIO_WritePin>
                if(paritate == 0)
 800305e:	e00d      	b.n	800307c <HAL_UART_RxCpltCallback+0x7c>
                else
                	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8003060:	4b0e      	ldr	r3, [pc, #56]	@ (800309c <HAL_UART_RxCpltCallback+0x9c>)
 8003062:	2200      	movs	r2, #0
 8003064:	2120      	movs	r1, #32
 8003066:	0018      	movs	r0, r3
 8003068:	f000 fd50 	bl	8003b0c <HAL_GPIO_WritePin>
                if(paritate == 0)
 800306c:	e006      	b.n	800307c <HAL_UART_RxCpltCallback+0x7c>
            }
            else
            {
                // Continue receiving next byte
                HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 800306e:	4907      	ldr	r1, [pc, #28]	@ (800308c <HAL_UART_RxCpltCallback+0x8c>)
 8003070:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <HAL_UART_RxCpltCallback+0xa0>)
 8003072:	2201      	movs	r2, #1
 8003074:	0018      	movs	r0, r3
 8003076:	f002 f890 	bl	800519a <HAL_UART_Receive_IT>
            // Buffer full, reset
            RxIndex = 0;
            HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
        }
    }
}
 800307a:	e7ff      	b.n	800307c <HAL_UART_RxCpltCallback+0x7c>
 800307c:	46c0      	nop			@ (mov r8, r8)
 800307e:	46bd      	mov	sp, r7
 8003080:	b002      	add	sp, #8
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40004400 	.word	0x40004400
 8003088:	20000acc 	.word	0x20000acc
 800308c:	200002cc 	.word	0x200002cc
 8003090:	200006cc 	.word	0x200006cc
 8003094:	20000acd 	.word	0x20000acd
 8003098:	20000ace 	.word	0x20000ace
 800309c:	48000400 	.word	0x48000400
 80030a0:	20000244 	.word	0x20000244

080030a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030a8:	b672      	cpsid	i
}
 80030aa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030ac:	46c0      	nop			@ (mov r8, r8)
 80030ae:	e7fd      	b.n	80030ac <Error_Handler+0x8>

080030b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030b6:	4b0f      	ldr	r3, [pc, #60]	@ (80030f4 <HAL_MspInit+0x44>)
 80030b8:	699a      	ldr	r2, [r3, #24]
 80030ba:	4b0e      	ldr	r3, [pc, #56]	@ (80030f4 <HAL_MspInit+0x44>)
 80030bc:	2101      	movs	r1, #1
 80030be:	430a      	orrs	r2, r1
 80030c0:	619a      	str	r2, [r3, #24]
 80030c2:	4b0c      	ldr	r3, [pc, #48]	@ (80030f4 <HAL_MspInit+0x44>)
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2201      	movs	r2, #1
 80030c8:	4013      	ands	r3, r2
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ce:	4b09      	ldr	r3, [pc, #36]	@ (80030f4 <HAL_MspInit+0x44>)
 80030d0:	69da      	ldr	r2, [r3, #28]
 80030d2:	4b08      	ldr	r3, [pc, #32]	@ (80030f4 <HAL_MspInit+0x44>)
 80030d4:	2180      	movs	r1, #128	@ 0x80
 80030d6:	0549      	lsls	r1, r1, #21
 80030d8:	430a      	orrs	r2, r1
 80030da:	61da      	str	r2, [r3, #28]
 80030dc:	4b05      	ldr	r3, [pc, #20]	@ (80030f4 <HAL_MspInit+0x44>)
 80030de:	69da      	ldr	r2, [r3, #28]
 80030e0:	2380      	movs	r3, #128	@ 0x80
 80030e2:	055b      	lsls	r3, r3, #21
 80030e4:	4013      	ands	r3, r2
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030ea:	46c0      	nop			@ (mov r8, r8)
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b002      	add	sp, #8
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	40021000 	.word	0x40021000

080030f8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	b08b      	sub	sp, #44	@ 0x2c
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003100:	2414      	movs	r4, #20
 8003102:	193b      	adds	r3, r7, r4
 8003104:	0018      	movs	r0, r3
 8003106:	2314      	movs	r3, #20
 8003108:	001a      	movs	r2, r3
 800310a:	2100      	movs	r1, #0
 800310c:	f004 f974 	bl	80073f8 <memset>
  if(hi2c->Instance==I2C1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1c      	ldr	r2, [pc, #112]	@ (8003188 <HAL_I2C_MspInit+0x90>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d131      	bne.n	800317e <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800311a:	4b1c      	ldr	r3, [pc, #112]	@ (800318c <HAL_I2C_MspInit+0x94>)
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	4b1b      	ldr	r3, [pc, #108]	@ (800318c <HAL_I2C_MspInit+0x94>)
 8003120:	2180      	movs	r1, #128	@ 0x80
 8003122:	02c9      	lsls	r1, r1, #11
 8003124:	430a      	orrs	r2, r1
 8003126:	615a      	str	r2, [r3, #20]
 8003128:	4b18      	ldr	r3, [pc, #96]	@ (800318c <HAL_I2C_MspInit+0x94>)
 800312a:	695a      	ldr	r2, [r3, #20]
 800312c:	2380      	movs	r3, #128	@ 0x80
 800312e:	02db      	lsls	r3, r3, #11
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003136:	0021      	movs	r1, r4
 8003138:	187b      	adds	r3, r7, r1
 800313a:	22c0      	movs	r2, #192	@ 0xc0
 800313c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800313e:	187b      	adds	r3, r7, r1
 8003140:	2212      	movs	r2, #18
 8003142:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	187b      	adds	r3, r7, r1
 8003146:	2200      	movs	r2, #0
 8003148:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800314a:	187b      	adds	r3, r7, r1
 800314c:	2203      	movs	r2, #3
 800314e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003150:	187b      	adds	r3, r7, r1
 8003152:	2201      	movs	r2, #1
 8003154:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003156:	187b      	adds	r3, r7, r1
 8003158:	4a0d      	ldr	r2, [pc, #52]	@ (8003190 <HAL_I2C_MspInit+0x98>)
 800315a:	0019      	movs	r1, r3
 800315c:	0010      	movs	r0, r2
 800315e:	f000 fb65 	bl	800382c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003162:	4b0a      	ldr	r3, [pc, #40]	@ (800318c <HAL_I2C_MspInit+0x94>)
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	4b09      	ldr	r3, [pc, #36]	@ (800318c <HAL_I2C_MspInit+0x94>)
 8003168:	2180      	movs	r1, #128	@ 0x80
 800316a:	0389      	lsls	r1, r1, #14
 800316c:	430a      	orrs	r2, r1
 800316e:	61da      	str	r2, [r3, #28]
 8003170:	4b06      	ldr	r3, [pc, #24]	@ (800318c <HAL_I2C_MspInit+0x94>)
 8003172:	69da      	ldr	r2, [r3, #28]
 8003174:	2380      	movs	r3, #128	@ 0x80
 8003176:	039b      	lsls	r3, r3, #14
 8003178:	4013      	ands	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800317e:	46c0      	nop			@ (mov r8, r8)
 8003180:	46bd      	mov	sp, r7
 8003182:	b00b      	add	sp, #44	@ 0x2c
 8003184:	bd90      	pop	{r4, r7, pc}
 8003186:	46c0      	nop			@ (mov r8, r8)
 8003188:	40005400 	.word	0x40005400
 800318c:	40021000 	.word	0x40021000
 8003190:	48000400 	.word	0x48000400

08003194 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b08b      	sub	sp, #44	@ 0x2c
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319c:	2414      	movs	r4, #20
 800319e:	193b      	adds	r3, r7, r4
 80031a0:	0018      	movs	r0, r3
 80031a2:	2314      	movs	r3, #20
 80031a4:	001a      	movs	r2, r3
 80031a6:	2100      	movs	r1, #0
 80031a8:	f004 f926 	bl	80073f8 <memset>
  if(huart->Instance==USART2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a20      	ldr	r2, [pc, #128]	@ (8003234 <HAL_UART_MspInit+0xa0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d13a      	bne.n	800322c <HAL_UART_MspInit+0x98>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031b6:	4b20      	ldr	r3, [pc, #128]	@ (8003238 <HAL_UART_MspInit+0xa4>)
 80031b8:	69da      	ldr	r2, [r3, #28]
 80031ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003238 <HAL_UART_MspInit+0xa4>)
 80031bc:	2180      	movs	r1, #128	@ 0x80
 80031be:	0289      	lsls	r1, r1, #10
 80031c0:	430a      	orrs	r2, r1
 80031c2:	61da      	str	r2, [r3, #28]
 80031c4:	4b1c      	ldr	r3, [pc, #112]	@ (8003238 <HAL_UART_MspInit+0xa4>)
 80031c6:	69da      	ldr	r2, [r3, #28]
 80031c8:	2380      	movs	r3, #128	@ 0x80
 80031ca:	029b      	lsls	r3, r3, #10
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d2:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <HAL_UART_MspInit+0xa4>)
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	4b18      	ldr	r3, [pc, #96]	@ (8003238 <HAL_UART_MspInit+0xa4>)
 80031d8:	2180      	movs	r1, #128	@ 0x80
 80031da:	0289      	lsls	r1, r1, #10
 80031dc:	430a      	orrs	r2, r1
 80031de:	615a      	str	r2, [r3, #20]
 80031e0:	4b15      	ldr	r3, [pc, #84]	@ (8003238 <HAL_UART_MspInit+0xa4>)
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	2380      	movs	r3, #128	@ 0x80
 80031e6:	029b      	lsls	r3, r3, #10
 80031e8:	4013      	ands	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80031ee:	0021      	movs	r1, r4
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	220c      	movs	r2, #12
 80031f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f6:	187b      	adds	r3, r7, r1
 80031f8:	2202      	movs	r2, #2
 80031fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	187b      	adds	r3, r7, r1
 8003204:	2200      	movs	r2, #0
 8003206:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003208:	187b      	adds	r3, r7, r1
 800320a:	2201      	movs	r2, #1
 800320c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320e:	187a      	adds	r2, r7, r1
 8003210:	2390      	movs	r3, #144	@ 0x90
 8003212:	05db      	lsls	r3, r3, #23
 8003214:	0011      	movs	r1, r2
 8003216:	0018      	movs	r0, r3
 8003218:	f000 fb08 	bl	800382c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800321c:	2200      	movs	r2, #0
 800321e:	2100      	movs	r1, #0
 8003220:	201c      	movs	r0, #28
 8003222:	f000 fa53 	bl	80036cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003226:	201c      	movs	r0, #28
 8003228:	f000 fa65 	bl	80036f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800322c:	46c0      	nop			@ (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	b00b      	add	sp, #44	@ 0x2c
 8003232:	bd90      	pop	{r4, r7, pc}
 8003234:	40004400 	.word	0x40004400
 8003238:	40021000 	.word	0x40021000

0800323c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003240:	46c0      	nop			@ (mov r8, r8)
 8003242:	e7fd      	b.n	8003240 <NMI_Handler+0x4>

08003244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003248:	46c0      	nop			@ (mov r8, r8)
 800324a:	e7fd      	b.n	8003248 <HardFault_Handler+0x4>

0800324c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003250:	46c0      	nop			@ (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800325a:	46c0      	nop			@ (mov r8, r8)
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003264:	f000 f946 	bl	80034f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003268:	46c0      	nop			@ (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003274:	4b03      	ldr	r3, [pc, #12]	@ (8003284 <USART2_IRQHandler+0x14>)
 8003276:	0018      	movs	r0, r3
 8003278:	f001 ffe6 	bl	8005248 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800327c:	46c0      	nop			@ (mov r8, r8)
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	46c0      	nop			@ (mov r8, r8)
 8003284:	20000244 	.word	0x20000244

08003288 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  return 1;
 800328c:	2301      	movs	r3, #1
}
 800328e:	0018      	movs	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <_kill>:

int _kill(int pid, int sig)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800329e:	f004 f905 	bl	80074ac <__errno>
 80032a2:	0003      	movs	r3, r0
 80032a4:	2216      	movs	r2, #22
 80032a6:	601a      	str	r2, [r3, #0]
  return -1;
 80032a8:	2301      	movs	r3, #1
 80032aa:	425b      	negs	r3, r3
}
 80032ac:	0018      	movs	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b002      	add	sp, #8
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <_exit>:

void _exit (int status)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032bc:	2301      	movs	r3, #1
 80032be:	425a      	negs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	0011      	movs	r1, r2
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7ff ffe5 	bl	8003294 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	e7fd      	b.n	80032ca <_exit+0x16>

080032ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b086      	sub	sp, #24
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	60f8      	str	r0, [r7, #12]
 80032d6:	60b9      	str	r1, [r7, #8]
 80032d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032da:	2300      	movs	r3, #0
 80032dc:	617b      	str	r3, [r7, #20]
 80032de:	e00a      	b.n	80032f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032e0:	e000      	b.n	80032e4 <_read+0x16>
 80032e2:	bf00      	nop
 80032e4:	0001      	movs	r1, r0
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	60ba      	str	r2, [r7, #8]
 80032ec:	b2ca      	uxtb	r2, r1
 80032ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	3301      	adds	r3, #1
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	dbf0      	blt.n	80032e0 <_read+0x12>
  }

  return len;
 80032fe:	687b      	ldr	r3, [r7, #4]
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b006      	add	sp, #24
 8003306:	bd80      	pop	{r7, pc}

08003308 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	e009      	b.n	800332e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	60ba      	str	r2, [r7, #8]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	0018      	movs	r0, r3
 8003324:	e000      	b.n	8003328 <_write+0x20>
 8003326:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	3301      	adds	r3, #1
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	429a      	cmp	r2, r3
 8003334:	dbf1      	blt.n	800331a <_write+0x12>
  }
  return len;
 8003336:	687b      	ldr	r3, [r7, #4]
}
 8003338:	0018      	movs	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	b006      	add	sp, #24
 800333e:	bd80      	pop	{r7, pc}

08003340 <_close>:

int _close(int file)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003348:	2301      	movs	r3, #1
 800334a:	425b      	negs	r3, r3
}
 800334c:	0018      	movs	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	b002      	add	sp, #8
 8003352:	bd80      	pop	{r7, pc}

08003354 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2280      	movs	r2, #128	@ 0x80
 8003362:	0192      	lsls	r2, r2, #6
 8003364:	605a      	str	r2, [r3, #4]
  return 0;
 8003366:	2300      	movs	r3, #0
}
 8003368:	0018      	movs	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	b002      	add	sp, #8
 800336e:	bd80      	pop	{r7, pc}

08003370 <_isatty>:

int _isatty(int file)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003378:	2301      	movs	r3, #1
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b002      	add	sp, #8
 8003380:	bd80      	pop	{r7, pc}

08003382 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800338e:	2300      	movs	r3, #0
}
 8003390:	0018      	movs	r0, r3
 8003392:	46bd      	mov	sp, r7
 8003394:	b004      	add	sp, #16
 8003396:	bd80      	pop	{r7, pc}

08003398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033a0:	4a14      	ldr	r2, [pc, #80]	@ (80033f4 <_sbrk+0x5c>)
 80033a2:	4b15      	ldr	r3, [pc, #84]	@ (80033f8 <_sbrk+0x60>)
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033ac:	4b13      	ldr	r3, [pc, #76]	@ (80033fc <_sbrk+0x64>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d102      	bne.n	80033ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033b4:	4b11      	ldr	r3, [pc, #68]	@ (80033fc <_sbrk+0x64>)
 80033b6:	4a12      	ldr	r2, [pc, #72]	@ (8003400 <_sbrk+0x68>)
 80033b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033ba:	4b10      	ldr	r3, [pc, #64]	@ (80033fc <_sbrk+0x64>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	18d3      	adds	r3, r2, r3
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d207      	bcs.n	80033d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033c8:	f004 f870 	bl	80074ac <__errno>
 80033cc:	0003      	movs	r3, r0
 80033ce:	220c      	movs	r2, #12
 80033d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033d2:	2301      	movs	r3, #1
 80033d4:	425b      	negs	r3, r3
 80033d6:	e009      	b.n	80033ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033d8:	4b08      	ldr	r3, [pc, #32]	@ (80033fc <_sbrk+0x64>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033de:	4b07      	ldr	r3, [pc, #28]	@ (80033fc <_sbrk+0x64>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	18d2      	adds	r2, r2, r3
 80033e6:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <_sbrk+0x64>)
 80033e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80033ea:	68fb      	ldr	r3, [r7, #12]
}
 80033ec:	0018      	movs	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b006      	add	sp, #24
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20002000 	.word	0x20002000
 80033f8:	00000400 	.word	0x00000400
 80033fc:	20000ad0 	.word	0x20000ad0
 8003400:	20000c28 	.word	0x20000c28

08003404 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003408:	46c0      	nop			@ (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003410:	480d      	ldr	r0, [pc, #52]	@ (8003448 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003412:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003414:	f7ff fff6 	bl	8003404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003418:	480c      	ldr	r0, [pc, #48]	@ (800344c <LoopForever+0x6>)
  ldr r1, =_edata
 800341a:	490d      	ldr	r1, [pc, #52]	@ (8003450 <LoopForever+0xa>)
  ldr r2, =_sidata
 800341c:	4a0d      	ldr	r2, [pc, #52]	@ (8003454 <LoopForever+0xe>)
  movs r3, #0
 800341e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003420:	e002      	b.n	8003428 <LoopCopyDataInit>

08003422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003426:	3304      	adds	r3, #4

08003428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800342a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800342c:	d3f9      	bcc.n	8003422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800342e:	4a0a      	ldr	r2, [pc, #40]	@ (8003458 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003430:	4c0a      	ldr	r4, [pc, #40]	@ (800345c <LoopForever+0x16>)
  movs r3, #0
 8003432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003434:	e001      	b.n	800343a <LoopFillZerobss>

08003436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003438:	3204      	adds	r2, #4

0800343a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800343a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800343c:	d3fb      	bcc.n	8003436 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800343e:	f004 f83b 	bl	80074b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003442:	f7ff fbc3 	bl	8002bcc <main>

08003446 <LoopForever>:

LoopForever:
    b LoopForever
 8003446:	e7fe      	b.n	8003446 <LoopForever>
  ldr   r0, =_estack
 8003448:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800344c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003450:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003454:	0800b224 	.word	0x0800b224
  ldr r2, =_sbss
 8003458:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800345c:	20000c24 	.word	0x20000c24

08003460 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003460:	e7fe      	b.n	8003460 <ADC1_IRQHandler>
	...

08003464 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003468:	4b07      	ldr	r3, [pc, #28]	@ (8003488 <HAL_Init+0x24>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b06      	ldr	r3, [pc, #24]	@ (8003488 <HAL_Init+0x24>)
 800346e:	2110      	movs	r1, #16
 8003470:	430a      	orrs	r2, r1
 8003472:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003474:	2000      	movs	r0, #0
 8003476:	f000 f809 	bl	800348c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800347a:	f7ff fe19 	bl	80030b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	0018      	movs	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	46c0      	nop			@ (mov r8, r8)
 8003488:	40022000 	.word	0x40022000

0800348c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800348c:	b590      	push	{r4, r7, lr}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003494:	4b14      	ldr	r3, [pc, #80]	@ (80034e8 <HAL_InitTick+0x5c>)
 8003496:	681c      	ldr	r4, [r3, #0]
 8003498:	4b14      	ldr	r3, [pc, #80]	@ (80034ec <HAL_InitTick+0x60>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	0019      	movs	r1, r3
 800349e:	23fa      	movs	r3, #250	@ 0xfa
 80034a0:	0098      	lsls	r0, r3, #2
 80034a2:	f7fc fe4d 	bl	8000140 <__udivsi3>
 80034a6:	0003      	movs	r3, r0
 80034a8:	0019      	movs	r1, r3
 80034aa:	0020      	movs	r0, r4
 80034ac:	f7fc fe48 	bl	8000140 <__udivsi3>
 80034b0:	0003      	movs	r3, r0
 80034b2:	0018      	movs	r0, r3
 80034b4:	f000 f92f 	bl	8003716 <HAL_SYSTICK_Config>
 80034b8:	1e03      	subs	r3, r0, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e00f      	b.n	80034e0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d80b      	bhi.n	80034de <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	2301      	movs	r3, #1
 80034ca:	425b      	negs	r3, r3
 80034cc:	2200      	movs	r2, #0
 80034ce:	0018      	movs	r0, r3
 80034d0:	f000 f8fc 	bl	80036cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034d4:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <HAL_InitTick+0x64>)
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
}
 80034e0:	0018      	movs	r0, r3
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b003      	add	sp, #12
 80034e6:	bd90      	pop	{r4, r7, pc}
 80034e8:	20000000 	.word	0x20000000
 80034ec:	20000008 	.word	0x20000008
 80034f0:	20000004 	.word	0x20000004

080034f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034f8:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <HAL_IncTick+0x1c>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	001a      	movs	r2, r3
 80034fe:	4b05      	ldr	r3, [pc, #20]	@ (8003514 <HAL_IncTick+0x20>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	18d2      	adds	r2, r2, r3
 8003504:	4b03      	ldr	r3, [pc, #12]	@ (8003514 <HAL_IncTick+0x20>)
 8003506:	601a      	str	r2, [r3, #0]
}
 8003508:	46c0      	nop			@ (mov r8, r8)
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			@ (mov r8, r8)
 8003510:	20000008 	.word	0x20000008
 8003514:	20000ad4 	.word	0x20000ad4

08003518 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  return uwTick;
 800351c:	4b02      	ldr	r3, [pc, #8]	@ (8003528 <HAL_GetTick+0x10>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	0018      	movs	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			@ (mov r8, r8)
 8003528:	20000ad4 	.word	0x20000ad4

0800352c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003534:	f7ff fff0 	bl	8003518 <HAL_GetTick>
 8003538:	0003      	movs	r3, r0
 800353a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	3301      	adds	r3, #1
 8003544:	d005      	beq.n	8003552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003546:	4b0a      	ldr	r3, [pc, #40]	@ (8003570 <HAL_Delay+0x44>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	001a      	movs	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	189b      	adds	r3, r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	f7ff ffe0 	bl	8003518 <HAL_GetTick>
 8003558:	0002      	movs	r2, r0
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	429a      	cmp	r2, r3
 8003562:	d8f7      	bhi.n	8003554 <HAL_Delay+0x28>
  {
  }
}
 8003564:	46c0      	nop			@ (mov r8, r8)
 8003566:	46c0      	nop			@ (mov r8, r8)
 8003568:	46bd      	mov	sp, r7
 800356a:	b004      	add	sp, #16
 800356c:	bd80      	pop	{r7, pc}
 800356e:	46c0      	nop			@ (mov r8, r8)
 8003570:	20000008 	.word	0x20000008

08003574 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	0002      	movs	r2, r0
 800357c:	1dfb      	adds	r3, r7, #7
 800357e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003580:	1dfb      	adds	r3, r7, #7
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b7f      	cmp	r3, #127	@ 0x7f
 8003586:	d809      	bhi.n	800359c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003588:	1dfb      	adds	r3, r7, #7
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	001a      	movs	r2, r3
 800358e:	231f      	movs	r3, #31
 8003590:	401a      	ands	r2, r3
 8003592:	4b04      	ldr	r3, [pc, #16]	@ (80035a4 <__NVIC_EnableIRQ+0x30>)
 8003594:	2101      	movs	r1, #1
 8003596:	4091      	lsls	r1, r2
 8003598:	000a      	movs	r2, r1
 800359a:	601a      	str	r2, [r3, #0]
  }
}
 800359c:	46c0      	nop			@ (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b002      	add	sp, #8
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	e000e100 	.word	0xe000e100

080035a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a8:	b590      	push	{r4, r7, lr}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	0002      	movs	r2, r0
 80035b0:	6039      	str	r1, [r7, #0]
 80035b2:	1dfb      	adds	r3, r7, #7
 80035b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035b6:	1dfb      	adds	r3, r7, #7
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80035bc:	d828      	bhi.n	8003610 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035be:	4a2f      	ldr	r2, [pc, #188]	@ (800367c <__NVIC_SetPriority+0xd4>)
 80035c0:	1dfb      	adds	r3, r7, #7
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	b25b      	sxtb	r3, r3
 80035c6:	089b      	lsrs	r3, r3, #2
 80035c8:	33c0      	adds	r3, #192	@ 0xc0
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	589b      	ldr	r3, [r3, r2]
 80035ce:	1dfa      	adds	r2, r7, #7
 80035d0:	7812      	ldrb	r2, [r2, #0]
 80035d2:	0011      	movs	r1, r2
 80035d4:	2203      	movs	r2, #3
 80035d6:	400a      	ands	r2, r1
 80035d8:	00d2      	lsls	r2, r2, #3
 80035da:	21ff      	movs	r1, #255	@ 0xff
 80035dc:	4091      	lsls	r1, r2
 80035de:	000a      	movs	r2, r1
 80035e0:	43d2      	mvns	r2, r2
 80035e2:	401a      	ands	r2, r3
 80035e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	019b      	lsls	r3, r3, #6
 80035ea:	22ff      	movs	r2, #255	@ 0xff
 80035ec:	401a      	ands	r2, r3
 80035ee:	1dfb      	adds	r3, r7, #7
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	0018      	movs	r0, r3
 80035f4:	2303      	movs	r3, #3
 80035f6:	4003      	ands	r3, r0
 80035f8:	00db      	lsls	r3, r3, #3
 80035fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80035fc:	481f      	ldr	r0, [pc, #124]	@ (800367c <__NVIC_SetPriority+0xd4>)
 80035fe:	1dfb      	adds	r3, r7, #7
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	b25b      	sxtb	r3, r3
 8003604:	089b      	lsrs	r3, r3, #2
 8003606:	430a      	orrs	r2, r1
 8003608:	33c0      	adds	r3, #192	@ 0xc0
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800360e:	e031      	b.n	8003674 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003610:	4a1b      	ldr	r2, [pc, #108]	@ (8003680 <__NVIC_SetPriority+0xd8>)
 8003612:	1dfb      	adds	r3, r7, #7
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	0019      	movs	r1, r3
 8003618:	230f      	movs	r3, #15
 800361a:	400b      	ands	r3, r1
 800361c:	3b08      	subs	r3, #8
 800361e:	089b      	lsrs	r3, r3, #2
 8003620:	3306      	adds	r3, #6
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	18d3      	adds	r3, r2, r3
 8003626:	3304      	adds	r3, #4
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	1dfa      	adds	r2, r7, #7
 800362c:	7812      	ldrb	r2, [r2, #0]
 800362e:	0011      	movs	r1, r2
 8003630:	2203      	movs	r2, #3
 8003632:	400a      	ands	r2, r1
 8003634:	00d2      	lsls	r2, r2, #3
 8003636:	21ff      	movs	r1, #255	@ 0xff
 8003638:	4091      	lsls	r1, r2
 800363a:	000a      	movs	r2, r1
 800363c:	43d2      	mvns	r2, r2
 800363e:	401a      	ands	r2, r3
 8003640:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	019b      	lsls	r3, r3, #6
 8003646:	22ff      	movs	r2, #255	@ 0xff
 8003648:	401a      	ands	r2, r3
 800364a:	1dfb      	adds	r3, r7, #7
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	0018      	movs	r0, r3
 8003650:	2303      	movs	r3, #3
 8003652:	4003      	ands	r3, r0
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003658:	4809      	ldr	r0, [pc, #36]	@ (8003680 <__NVIC_SetPriority+0xd8>)
 800365a:	1dfb      	adds	r3, r7, #7
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	001c      	movs	r4, r3
 8003660:	230f      	movs	r3, #15
 8003662:	4023      	ands	r3, r4
 8003664:	3b08      	subs	r3, #8
 8003666:	089b      	lsrs	r3, r3, #2
 8003668:	430a      	orrs	r2, r1
 800366a:	3306      	adds	r3, #6
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	18c3      	adds	r3, r0, r3
 8003670:	3304      	adds	r3, #4
 8003672:	601a      	str	r2, [r3, #0]
}
 8003674:	46c0      	nop			@ (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	b003      	add	sp, #12
 800367a:	bd90      	pop	{r4, r7, pc}
 800367c:	e000e100 	.word	0xe000e100
 8003680:	e000ed00 	.word	0xe000ed00

08003684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	1e5a      	subs	r2, r3, #1
 8003690:	2380      	movs	r3, #128	@ 0x80
 8003692:	045b      	lsls	r3, r3, #17
 8003694:	429a      	cmp	r2, r3
 8003696:	d301      	bcc.n	800369c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003698:	2301      	movs	r3, #1
 800369a:	e010      	b.n	80036be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800369c:	4b0a      	ldr	r3, [pc, #40]	@ (80036c8 <SysTick_Config+0x44>)
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	3a01      	subs	r2, #1
 80036a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036a4:	2301      	movs	r3, #1
 80036a6:	425b      	negs	r3, r3
 80036a8:	2103      	movs	r1, #3
 80036aa:	0018      	movs	r0, r3
 80036ac:	f7ff ff7c 	bl	80035a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036b0:	4b05      	ldr	r3, [pc, #20]	@ (80036c8 <SysTick_Config+0x44>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036b6:	4b04      	ldr	r3, [pc, #16]	@ (80036c8 <SysTick_Config+0x44>)
 80036b8:	2207      	movs	r2, #7
 80036ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036bc:	2300      	movs	r3, #0
}
 80036be:	0018      	movs	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b002      	add	sp, #8
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	e000e010 	.word	0xe000e010

080036cc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60b9      	str	r1, [r7, #8]
 80036d4:	607a      	str	r2, [r7, #4]
 80036d6:	210f      	movs	r1, #15
 80036d8:	187b      	adds	r3, r7, r1
 80036da:	1c02      	adds	r2, r0, #0
 80036dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	187b      	adds	r3, r7, r1
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	b25b      	sxtb	r3, r3
 80036e6:	0011      	movs	r1, r2
 80036e8:	0018      	movs	r0, r3
 80036ea:	f7ff ff5d 	bl	80035a8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b004      	add	sp, #16
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	0002      	movs	r2, r0
 80036fe:	1dfb      	adds	r3, r7, #7
 8003700:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003702:	1dfb      	adds	r3, r7, #7
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	b25b      	sxtb	r3, r3
 8003708:	0018      	movs	r0, r3
 800370a:	f7ff ff33 	bl	8003574 <__NVIC_EnableIRQ>
}
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	46bd      	mov	sp, r7
 8003712:	b002      	add	sp, #8
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	0018      	movs	r0, r3
 8003722:	f7ff ffaf 	bl	8003684 <SysTick_Config>
 8003726:	0003      	movs	r3, r0
}
 8003728:	0018      	movs	r0, r3
 800372a:	46bd      	mov	sp, r7
 800372c:	b002      	add	sp, #8
 800372e:	bd80      	pop	{r7, pc}

08003730 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2221      	movs	r2, #33	@ 0x21
 800373c:	5c9b      	ldrb	r3, [r3, r2]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d008      	beq.n	8003756 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2204      	movs	r2, #4
 8003748:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2220      	movs	r2, #32
 800374e:	2100      	movs	r1, #0
 8003750:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e020      	b.n	8003798 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	210e      	movs	r1, #14
 8003762:	438a      	bics	r2, r1
 8003764:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2101      	movs	r1, #1
 8003772:	438a      	bics	r2, r1
 8003774:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377e:	2101      	movs	r1, #1
 8003780:	4091      	lsls	r1, r2
 8003782:	000a      	movs	r2, r1
 8003784:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2221      	movs	r2, #33	@ 0x21
 800378a:	2101      	movs	r1, #1
 800378c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	2100      	movs	r1, #0
 8003794:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	0018      	movs	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	b002      	add	sp, #8
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037a8:	210f      	movs	r1, #15
 80037aa:	187b      	adds	r3, r7, r1
 80037ac:	2200      	movs	r2, #0
 80037ae:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2221      	movs	r2, #33	@ 0x21
 80037b4:	5c9b      	ldrb	r3, [r3, r2]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d006      	beq.n	80037ca <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2204      	movs	r2, #4
 80037c0:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80037c2:	187b      	adds	r3, r7, r1
 80037c4:	2201      	movs	r2, #1
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	e028      	b.n	800381c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	210e      	movs	r1, #14
 80037d6:	438a      	bics	r2, r1
 80037d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2101      	movs	r1, #1
 80037e6:	438a      	bics	r2, r1
 80037e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f2:	2101      	movs	r1, #1
 80037f4:	4091      	lsls	r1, r2
 80037f6:	000a      	movs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2221      	movs	r2, #33	@ 0x21
 80037fe:	2101      	movs	r1, #1
 8003800:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	2100      	movs	r1, #0
 8003808:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800380e:	2b00      	cmp	r3, #0
 8003810:	d004      	beq.n	800381c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	0010      	movs	r0, r2
 800381a:	4798      	blx	r3
    }
  }
  return status;
 800381c:	230f      	movs	r3, #15
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	781b      	ldrb	r3, [r3, #0]
}
 8003822:	0018      	movs	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	b004      	add	sp, #16
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800383a:	e14f      	b.n	8003adc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2101      	movs	r1, #1
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4091      	lsls	r1, r2
 8003846:	000a      	movs	r2, r1
 8003848:	4013      	ands	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d100      	bne.n	8003854 <HAL_GPIO_Init+0x28>
 8003852:	e140      	b.n	8003ad6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2203      	movs	r2, #3
 800385a:	4013      	ands	r3, r2
 800385c:	2b01      	cmp	r3, #1
 800385e:	d005      	beq.n	800386c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2203      	movs	r2, #3
 8003866:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003868:	2b02      	cmp	r3, #2
 800386a:	d130      	bne.n	80038ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	2203      	movs	r2, #3
 8003878:	409a      	lsls	r2, r3
 800387a:	0013      	movs	r3, r2
 800387c:	43da      	mvns	r2, r3
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	4013      	ands	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	409a      	lsls	r2, r3
 800388e:	0013      	movs	r3, r2
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038a2:	2201      	movs	r2, #1
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	409a      	lsls	r2, r3
 80038a8:	0013      	movs	r3, r2
 80038aa:	43da      	mvns	r2, r3
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	4013      	ands	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	2201      	movs	r2, #1
 80038ba:	401a      	ands	r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	409a      	lsls	r2, r3
 80038c0:	0013      	movs	r3, r2
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2203      	movs	r2, #3
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d017      	beq.n	800390a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	2203      	movs	r2, #3
 80038e6:	409a      	lsls	r2, r3
 80038e8:	0013      	movs	r3, r2
 80038ea:	43da      	mvns	r2, r3
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4013      	ands	r3, r2
 80038f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	409a      	lsls	r2, r3
 80038fc:	0013      	movs	r3, r2
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2203      	movs	r2, #3
 8003910:	4013      	ands	r3, r2
 8003912:	2b02      	cmp	r3, #2
 8003914:	d123      	bne.n	800395e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	08da      	lsrs	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3208      	adds	r2, #8
 800391e:	0092      	lsls	r2, r2, #2
 8003920:	58d3      	ldr	r3, [r2, r3]
 8003922:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2207      	movs	r2, #7
 8003928:	4013      	ands	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	220f      	movs	r2, #15
 800392e:	409a      	lsls	r2, r3
 8003930:	0013      	movs	r3, r2
 8003932:	43da      	mvns	r2, r3
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	4013      	ands	r3, r2
 8003938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	691a      	ldr	r2, [r3, #16]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2107      	movs	r1, #7
 8003942:	400b      	ands	r3, r1
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	409a      	lsls	r2, r3
 8003948:	0013      	movs	r3, r2
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	08da      	lsrs	r2, r3, #3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3208      	adds	r2, #8
 8003958:	0092      	lsls	r2, r2, #2
 800395a:	6939      	ldr	r1, [r7, #16]
 800395c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	2203      	movs	r2, #3
 800396a:	409a      	lsls	r2, r3
 800396c:	0013      	movs	r3, r2
 800396e:	43da      	mvns	r2, r3
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4013      	ands	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2203      	movs	r2, #3
 800397c:	401a      	ands	r2, r3
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	409a      	lsls	r2, r3
 8003984:	0013      	movs	r3, r2
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	23c0      	movs	r3, #192	@ 0xc0
 8003998:	029b      	lsls	r3, r3, #10
 800399a:	4013      	ands	r3, r2
 800399c:	d100      	bne.n	80039a0 <HAL_GPIO_Init+0x174>
 800399e:	e09a      	b.n	8003ad6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a0:	4b54      	ldr	r3, [pc, #336]	@ (8003af4 <HAL_GPIO_Init+0x2c8>)
 80039a2:	699a      	ldr	r2, [r3, #24]
 80039a4:	4b53      	ldr	r3, [pc, #332]	@ (8003af4 <HAL_GPIO_Init+0x2c8>)
 80039a6:	2101      	movs	r1, #1
 80039a8:	430a      	orrs	r2, r1
 80039aa:	619a      	str	r2, [r3, #24]
 80039ac:	4b51      	ldr	r3, [pc, #324]	@ (8003af4 <HAL_GPIO_Init+0x2c8>)
 80039ae:	699b      	ldr	r3, [r3, #24]
 80039b0:	2201      	movs	r2, #1
 80039b2:	4013      	ands	r3, r2
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039b8:	4a4f      	ldr	r2, [pc, #316]	@ (8003af8 <HAL_GPIO_Init+0x2cc>)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	089b      	lsrs	r3, r3, #2
 80039be:	3302      	adds	r3, #2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	589b      	ldr	r3, [r3, r2]
 80039c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2203      	movs	r2, #3
 80039ca:	4013      	ands	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	220f      	movs	r2, #15
 80039d0:	409a      	lsls	r2, r3
 80039d2:	0013      	movs	r3, r2
 80039d4:	43da      	mvns	r2, r3
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4013      	ands	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	2390      	movs	r3, #144	@ 0x90
 80039e0:	05db      	lsls	r3, r3, #23
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d013      	beq.n	8003a0e <HAL_GPIO_Init+0x1e2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a44      	ldr	r2, [pc, #272]	@ (8003afc <HAL_GPIO_Init+0x2d0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00d      	beq.n	8003a0a <HAL_GPIO_Init+0x1de>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a43      	ldr	r2, [pc, #268]	@ (8003b00 <HAL_GPIO_Init+0x2d4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d007      	beq.n	8003a06 <HAL_GPIO_Init+0x1da>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a42      	ldr	r2, [pc, #264]	@ (8003b04 <HAL_GPIO_Init+0x2d8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d101      	bne.n	8003a02 <HAL_GPIO_Init+0x1d6>
 80039fe:	2303      	movs	r3, #3
 8003a00:	e006      	b.n	8003a10 <HAL_GPIO_Init+0x1e4>
 8003a02:	2305      	movs	r3, #5
 8003a04:	e004      	b.n	8003a10 <HAL_GPIO_Init+0x1e4>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e002      	b.n	8003a10 <HAL_GPIO_Init+0x1e4>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <HAL_GPIO_Init+0x1e4>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	2103      	movs	r1, #3
 8003a14:	400a      	ands	r2, r1
 8003a16:	0092      	lsls	r2, r2, #2
 8003a18:	4093      	lsls	r3, r2
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a20:	4935      	ldr	r1, [pc, #212]	@ (8003af8 <HAL_GPIO_Init+0x2cc>)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	3302      	adds	r3, #2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a2e:	4b36      	ldr	r3, [pc, #216]	@ (8003b08 <HAL_GPIO_Init+0x2dc>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	43da      	mvns	r2, r3
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	2380      	movs	r3, #128	@ 0x80
 8003a44:	035b      	lsls	r3, r3, #13
 8003a46:	4013      	ands	r3, r2
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003a52:	4b2d      	ldr	r3, [pc, #180]	@ (8003b08 <HAL_GPIO_Init+0x2dc>)
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003a58:	4b2b      	ldr	r3, [pc, #172]	@ (8003b08 <HAL_GPIO_Init+0x2dc>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	43da      	mvns	r2, r3
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	2380      	movs	r3, #128	@ 0x80
 8003a6e:	039b      	lsls	r3, r3, #14
 8003a70:	4013      	ands	r3, r2
 8003a72:	d003      	beq.n	8003a7c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003a7c:	4b22      	ldr	r3, [pc, #136]	@ (8003b08 <HAL_GPIO_Init+0x2dc>)
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003a82:	4b21      	ldr	r3, [pc, #132]	@ (8003b08 <HAL_GPIO_Init+0x2dc>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	2380      	movs	r3, #128	@ 0x80
 8003a98:	029b      	lsls	r3, r3, #10
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003aa6:	4b18      	ldr	r3, [pc, #96]	@ (8003b08 <HAL_GPIO_Init+0x2dc>)
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8003aac:	4b16      	ldr	r3, [pc, #88]	@ (8003b08 <HAL_GPIO_Init+0x2dc>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	2380      	movs	r3, #128	@ 0x80
 8003ac2:	025b      	lsls	r3, r3, #9
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d003      	beq.n	8003ad0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8003b08 <HAL_GPIO_Init+0x2dc>)
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	40da      	lsrs	r2, r3
 8003ae4:	1e13      	subs	r3, r2, #0
 8003ae6:	d000      	beq.n	8003aea <HAL_GPIO_Init+0x2be>
 8003ae8:	e6a8      	b.n	800383c <HAL_GPIO_Init+0x10>
  } 
}
 8003aea:	46c0      	nop			@ (mov r8, r8)
 8003aec:	46c0      	nop			@ (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b006      	add	sp, #24
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40010000 	.word	0x40010000
 8003afc:	48000400 	.word	0x48000400
 8003b00:	48000800 	.word	0x48000800
 8003b04:	48000c00 	.word	0x48000c00
 8003b08:	40010400 	.word	0x40010400

08003b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	0008      	movs	r0, r1
 8003b16:	0011      	movs	r1, r2
 8003b18:	1cbb      	adds	r3, r7, #2
 8003b1a:	1c02      	adds	r2, r0, #0
 8003b1c:	801a      	strh	r2, [r3, #0]
 8003b1e:	1c7b      	adds	r3, r7, #1
 8003b20:	1c0a      	adds	r2, r1, #0
 8003b22:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b24:	1c7b      	adds	r3, r7, #1
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d004      	beq.n	8003b36 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b2c:	1cbb      	adds	r3, r7, #2
 8003b2e:	881a      	ldrh	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b34:	e003      	b.n	8003b3e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b36:	1cbb      	adds	r3, r7, #2
 8003b38:	881a      	ldrh	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b3e:	46c0      	nop			@ (mov r8, r8)
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b002      	add	sp, #8
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d101      	bne.n	8003b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e08f      	b.n	8003c7a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2241      	movs	r2, #65	@ 0x41
 8003b5e:	5c9b      	ldrb	r3, [r3, r2]
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d107      	bne.n	8003b76 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2240      	movs	r2, #64	@ 0x40
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	0018      	movs	r0, r3
 8003b72:	f7ff fac1 	bl	80030f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2241      	movs	r2, #65	@ 0x41
 8003b7a:	2124      	movs	r1, #36	@ 0x24
 8003b7c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2101      	movs	r1, #1
 8003b8a:	438a      	bics	r2, r1
 8003b8c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	493b      	ldr	r1, [pc, #236]	@ (8003c84 <HAL_I2C_Init+0x13c>)
 8003b98:	400a      	ands	r2, r1
 8003b9a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4938      	ldr	r1, [pc, #224]	@ (8003c88 <HAL_I2C_Init+0x140>)
 8003ba8:	400a      	ands	r2, r1
 8003baa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d108      	bne.n	8003bc6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2180      	movs	r1, #128	@ 0x80
 8003bbe:	0209      	lsls	r1, r1, #8
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	609a      	str	r2, [r3, #8]
 8003bc4:	e007      	b.n	8003bd6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2184      	movs	r1, #132	@ 0x84
 8003bd0:	0209      	lsls	r1, r1, #8
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d109      	bne.n	8003bf2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2180      	movs	r1, #128	@ 0x80
 8003bea:	0109      	lsls	r1, r1, #4
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]
 8003bf0:	e007      	b.n	8003c02 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4923      	ldr	r1, [pc, #140]	@ (8003c8c <HAL_I2C_Init+0x144>)
 8003bfe:	400a      	ands	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4920      	ldr	r1, [pc, #128]	@ (8003c90 <HAL_I2C_Init+0x148>)
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	491a      	ldr	r1, [pc, #104]	@ (8003c88 <HAL_I2C_Init+0x140>)
 8003c1e:	400a      	ands	r2, r1
 8003c20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69d9      	ldr	r1, [r3, #28]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1a      	ldr	r2, [r3, #32]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2101      	movs	r1, #1
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2241      	movs	r2, #65	@ 0x41
 8003c66:	2120      	movs	r1, #32
 8003c68:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2242      	movs	r2, #66	@ 0x42
 8003c74:	2100      	movs	r1, #0
 8003c76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b002      	add	sp, #8
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	46c0      	nop			@ (mov r8, r8)
 8003c84:	f0ffffff 	.word	0xf0ffffff
 8003c88:	ffff7fff 	.word	0xffff7fff
 8003c8c:	fffff7ff 	.word	0xfffff7ff
 8003c90:	02008000 	.word	0x02008000

08003c94 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c94:	b590      	push	{r4, r7, lr}
 8003c96:	b089      	sub	sp, #36	@ 0x24
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	000c      	movs	r4, r1
 8003c9e:	0010      	movs	r0, r2
 8003ca0:	0019      	movs	r1, r3
 8003ca2:	230a      	movs	r3, #10
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	1c22      	adds	r2, r4, #0
 8003ca8:	801a      	strh	r2, [r3, #0]
 8003caa:	2308      	movs	r3, #8
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	1c02      	adds	r2, r0, #0
 8003cb0:	801a      	strh	r2, [r3, #0]
 8003cb2:	1dbb      	adds	r3, r7, #6
 8003cb4:	1c0a      	adds	r2, r1, #0
 8003cb6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2241      	movs	r2, #65	@ 0x41
 8003cbc:	5c9b      	ldrb	r3, [r3, r2]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d000      	beq.n	8003cc6 <HAL_I2C_Mem_Read+0x32>
 8003cc4:	e110      	b.n	8003ee8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d004      	beq.n	8003cd6 <HAL_I2C_Mem_Read+0x42>
 8003ccc:	232c      	movs	r3, #44	@ 0x2c
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	881b      	ldrh	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d105      	bne.n	8003ce2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2280      	movs	r2, #128	@ 0x80
 8003cda:	0092      	lsls	r2, r2, #2
 8003cdc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e103      	b.n	8003eea <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2240      	movs	r2, #64	@ 0x40
 8003ce6:	5c9b      	ldrb	r3, [r3, r2]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_I2C_Mem_Read+0x5c>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e0fc      	b.n	8003eea <HAL_I2C_Mem_Read+0x256>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2240      	movs	r2, #64	@ 0x40
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cf8:	f7ff fc0e 	bl	8003518 <HAL_GetTick>
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d00:	2380      	movs	r3, #128	@ 0x80
 8003d02:	0219      	lsls	r1, r3, #8
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	2319      	movs	r3, #25
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f000 f979 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003d12:	1e03      	subs	r3, r0, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e0e7      	b.n	8003eea <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2241      	movs	r2, #65	@ 0x41
 8003d1e:	2122      	movs	r1, #34	@ 0x22
 8003d20:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2242      	movs	r2, #66	@ 0x42
 8003d26:	2140      	movs	r1, #64	@ 0x40
 8003d28:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	222c      	movs	r2, #44	@ 0x2c
 8003d3a:	18ba      	adds	r2, r7, r2
 8003d3c:	8812      	ldrh	r2, [r2, #0]
 8003d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d46:	1dbb      	adds	r3, r7, #6
 8003d48:	881c      	ldrh	r4, [r3, #0]
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	18fb      	adds	r3, r7, r3
 8003d4e:	881a      	ldrh	r2, [r3, #0]
 8003d50:	230a      	movs	r3, #10
 8003d52:	18fb      	adds	r3, r7, r3
 8003d54:	8819      	ldrh	r1, [r3, #0]
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	0023      	movs	r3, r4
 8003d62:	f000 f8cb 	bl	8003efc <I2C_RequestMemoryRead>
 8003d66:	1e03      	subs	r3, r0, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2240      	movs	r2, #64	@ 0x40
 8003d6e:	2100      	movs	r1, #0
 8003d70:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e0b9      	b.n	8003eea <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2bff      	cmp	r3, #255	@ 0xff
 8003d7e:	d911      	bls.n	8003da4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = 1U;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2201      	movs	r2, #1
 8003d84:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	2380      	movs	r3, #128	@ 0x80
 8003d8e:	045c      	lsls	r4, r3, #17
 8003d90:	230a      	movs	r3, #10
 8003d92:	18fb      	adds	r3, r7, r3
 8003d94:	8819      	ldrh	r1, [r3, #0]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	4b56      	ldr	r3, [pc, #344]	@ (8003ef4 <HAL_I2C_Mem_Read+0x260>)
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	0023      	movs	r3, r4
 8003d9e:	f000 fb0b 	bl	80043b8 <I2C_TransferConfig>
 8003da2:	e012      	b.n	8003dca <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	2380      	movs	r3, #128	@ 0x80
 8003db6:	049c      	lsls	r4, r3, #18
 8003db8:	230a      	movs	r3, #10
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	8819      	ldrh	r1, [r3, #0]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	4b4c      	ldr	r3, [pc, #304]	@ (8003ef4 <HAL_I2C_Mem_Read+0x260>)
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	0023      	movs	r3, r4
 8003dc6:	f000 faf7 	bl	80043b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dcc:	68f8      	ldr	r0, [r7, #12]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	0013      	movs	r3, r2
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2104      	movs	r1, #4
 8003dd8:	f000 f914 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003ddc:	1e03      	subs	r3, r0, #0
 8003dde:	d001      	beq.n	8003de4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e082      	b.n	8003eea <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dee:	b2d2      	uxtb	r2, r2
 8003df0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d03a      	beq.n	8003e96 <HAL_I2C_Mem_Read+0x202>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d136      	bne.n	8003e96 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	0013      	movs	r3, r2
 8003e32:	2200      	movs	r2, #0
 8003e34:	2180      	movs	r1, #128	@ 0x80
 8003e36:	f000 f8e5 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003e3a:	1e03      	subs	r3, r0, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e053      	b.n	8003eea <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2bff      	cmp	r3, #255	@ 0xff
 8003e4a:	d911      	bls.n	8003e70 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = 1U;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	2380      	movs	r3, #128	@ 0x80
 8003e5a:	045c      	lsls	r4, r3, #17
 8003e5c:	230a      	movs	r3, #10
 8003e5e:	18fb      	adds	r3, r7, r3
 8003e60:	8819      	ldrh	r1, [r3, #0]
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	2300      	movs	r3, #0
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	0023      	movs	r3, r4
 8003e6a:	f000 faa5 	bl	80043b8 <I2C_TransferConfig>
 8003e6e:	e012      	b.n	8003e96 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	2380      	movs	r3, #128	@ 0x80
 8003e82:	049c      	lsls	r4, r3, #18
 8003e84:	230a      	movs	r3, #10
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	8819      	ldrh	r1, [r3, #0]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	0023      	movs	r3, r4
 8003e92:	f000 fa91 	bl	80043b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d194      	bne.n	8003dca <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f000 f94a 	bl	8004140 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003eac:	1e03      	subs	r3, r0, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e01a      	b.n	8003eea <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	490c      	ldr	r1, [pc, #48]	@ (8003ef8 <HAL_I2C_Mem_Read+0x264>)
 8003ec8:	400a      	ands	r2, r1
 8003eca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2241      	movs	r2, #65	@ 0x41
 8003ed0:	2120      	movs	r1, #32
 8003ed2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2242      	movs	r2, #66	@ 0x42
 8003ed8:	2100      	movs	r1, #0
 8003eda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2240      	movs	r2, #64	@ 0x40
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
  }
}
 8003eea:	0018      	movs	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b007      	add	sp, #28
 8003ef0:	bd90      	pop	{r4, r7, pc}
 8003ef2:	46c0      	nop			@ (mov r8, r8)
 8003ef4:	80002400 	.word	0x80002400
 8003ef8:	fe00e800 	.word	0xfe00e800

08003efc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003efc:	b5b0      	push	{r4, r5, r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	000c      	movs	r4, r1
 8003f06:	0010      	movs	r0, r2
 8003f08:	0019      	movs	r1, r3
 8003f0a:	250a      	movs	r5, #10
 8003f0c:	197b      	adds	r3, r7, r5
 8003f0e:	1c22      	adds	r2, r4, #0
 8003f10:	801a      	strh	r2, [r3, #0]
 8003f12:	2308      	movs	r3, #8
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	1c02      	adds	r2, r0, #0
 8003f18:	801a      	strh	r2, [r3, #0]
 8003f1a:	1dbb      	adds	r3, r7, #6
 8003f1c:	1c0a      	adds	r2, r1, #0
 8003f1e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f20:	1dbb      	adds	r3, r7, #6
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	197b      	adds	r3, r7, r5
 8003f28:	8819      	ldrh	r1, [r3, #0]
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	4b23      	ldr	r3, [pc, #140]	@ (8003fbc <I2C_RequestMemoryRead+0xc0>)
 8003f2e:	9300      	str	r3, [sp, #0]
 8003f30:	2300      	movs	r3, #0
 8003f32:	f000 fa41 	bl	80043b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f38:	6a39      	ldr	r1, [r7, #32]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f000 f8b9 	bl	80040b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f42:	1e03      	subs	r3, r0, #0
 8003f44:	d001      	beq.n	8003f4a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e033      	b.n	8003fb2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f4a:	1dbb      	adds	r3, r7, #6
 8003f4c:	881b      	ldrh	r3, [r3, #0]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d107      	bne.n	8003f62 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f52:	2308      	movs	r3, #8
 8003f54:	18fb      	adds	r3, r7, r3
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f60:	e019      	b.n	8003f96 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f62:	2308      	movs	r3, #8
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	881b      	ldrh	r3, [r3, #0]
 8003f68:	0a1b      	lsrs	r3, r3, #8
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f76:	6a39      	ldr	r1, [r7, #32]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f000 f89a 	bl	80040b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f80:	1e03      	subs	r3, r0, #0
 8003f82:	d001      	beq.n	8003f88 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e014      	b.n	8003fb2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f88:	2308      	movs	r3, #8
 8003f8a:	18fb      	adds	r3, r7, r3
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003f96:	6a3a      	ldr	r2, [r7, #32]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9c:	9300      	str	r3, [sp, #0]
 8003f9e:	0013      	movs	r3, r2
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	2140      	movs	r1, #64	@ 0x40
 8003fa4:	f000 f82e 	bl	8004004 <I2C_WaitOnFlagUntilTimeout>
 8003fa8:	1e03      	subs	r3, r0, #0
 8003faa:	d001      	beq.n	8003fb0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	0018      	movs	r0, r3
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	b004      	add	sp, #16
 8003fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8003fba:	46c0      	nop			@ (mov r8, r8)
 8003fbc:	80002000 	.word	0x80002000

08003fc0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d103      	bne.n	8003fde <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d007      	beq.n	8003ffc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699a      	ldr	r2, [r3, #24]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	619a      	str	r2, [r3, #24]
  }
}
 8003ffc:	46c0      	nop			@ (mov r8, r8)
 8003ffe:	46bd      	mov	sp, r7
 8004000:	b002      	add	sp, #8
 8004002:	bd80      	pop	{r7, pc}

08004004 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	1dfb      	adds	r3, r7, #7
 8004012:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004014:	e03a      	b.n	800408c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	6839      	ldr	r1, [r7, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	0018      	movs	r0, r3
 800401e:	f000 f8d3 	bl	80041c8 <I2C_IsErrorOccurred>
 8004022:	1e03      	subs	r3, r0, #0
 8004024:	d001      	beq.n	800402a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e040      	b.n	80040ac <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	3301      	adds	r3, #1
 800402e:	d02d      	beq.n	800408c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004030:	f7ff fa72 	bl	8003518 <HAL_GetTick>
 8004034:	0002      	movs	r2, r0
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d302      	bcc.n	8004046 <I2C_WaitOnFlagUntilTimeout+0x42>
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d122      	bne.n	800408c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	4013      	ands	r3, r2
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	425a      	negs	r2, r3
 8004056:	4153      	adcs	r3, r2
 8004058:	b2db      	uxtb	r3, r3
 800405a:	001a      	movs	r2, r3
 800405c:	1dfb      	adds	r3, r7, #7
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d113      	bne.n	800408c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004068:	2220      	movs	r2, #32
 800406a:	431a      	orrs	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2241      	movs	r2, #65	@ 0x41
 8004074:	2120      	movs	r1, #32
 8004076:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2242      	movs	r2, #66	@ 0x42
 800407c:	2100      	movs	r1, #0
 800407e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2240      	movs	r2, #64	@ 0x40
 8004084:	2100      	movs	r1, #0
 8004086:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e00f      	b.n	80040ac <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	4013      	ands	r3, r2
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	425a      	negs	r2, r3
 800409c:	4153      	adcs	r3, r2
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	001a      	movs	r2, r3
 80040a2:	1dfb      	adds	r3, r7, #7
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d0b5      	beq.n	8004016 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	0018      	movs	r0, r3
 80040ae:	46bd      	mov	sp, r7
 80040b0:	b004      	add	sp, #16
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040c0:	e032      	b.n	8004128 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	68b9      	ldr	r1, [r7, #8]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	0018      	movs	r0, r3
 80040ca:	f000 f87d 	bl	80041c8 <I2C_IsErrorOccurred>
 80040ce:	1e03      	subs	r3, r0, #0
 80040d0:	d001      	beq.n	80040d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e030      	b.n	8004138 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	3301      	adds	r3, #1
 80040da:	d025      	beq.n	8004128 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040dc:	f7ff fa1c 	bl	8003518 <HAL_GetTick>
 80040e0:	0002      	movs	r2, r0
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d302      	bcc.n	80040f2 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d11a      	bne.n	8004128 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	2202      	movs	r2, #2
 80040fa:	4013      	ands	r3, r2
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d013      	beq.n	8004128 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004104:	2220      	movs	r2, #32
 8004106:	431a      	orrs	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2241      	movs	r2, #65	@ 0x41
 8004110:	2120      	movs	r1, #32
 8004112:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2242      	movs	r2, #66	@ 0x42
 8004118:	2100      	movs	r1, #0
 800411a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2240      	movs	r2, #64	@ 0x40
 8004120:	2100      	movs	r1, #0
 8004122:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e007      	b.n	8004138 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	2202      	movs	r2, #2
 8004130:	4013      	ands	r3, r2
 8004132:	2b02      	cmp	r3, #2
 8004134:	d1c5      	bne.n	80040c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	0018      	movs	r0, r3
 800413a:	46bd      	mov	sp, r7
 800413c:	b004      	add	sp, #16
 800413e:	bd80      	pop	{r7, pc}

08004140 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800414c:	e02f      	b.n	80041ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	0018      	movs	r0, r3
 8004156:	f000 f837 	bl	80041c8 <I2C_IsErrorOccurred>
 800415a:	1e03      	subs	r3, r0, #0
 800415c:	d001      	beq.n	8004162 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e02d      	b.n	80041be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004162:	f7ff f9d9 	bl	8003518 <HAL_GetTick>
 8004166:	0002      	movs	r2, r0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	429a      	cmp	r2, r3
 8004170:	d302      	bcc.n	8004178 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d11a      	bne.n	80041ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2220      	movs	r2, #32
 8004180:	4013      	ands	r3, r2
 8004182:	2b20      	cmp	r3, #32
 8004184:	d013      	beq.n	80041ae <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	2220      	movs	r2, #32
 800418c:	431a      	orrs	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2241      	movs	r2, #65	@ 0x41
 8004196:	2120      	movs	r1, #32
 8004198:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2242      	movs	r2, #66	@ 0x42
 800419e:	2100      	movs	r1, #0
 80041a0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2240      	movs	r2, #64	@ 0x40
 80041a6:	2100      	movs	r1, #0
 80041a8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e007      	b.n	80041be <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	2220      	movs	r2, #32
 80041b6:	4013      	ands	r3, r2
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d1c8      	bne.n	800414e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	0018      	movs	r0, r3
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b004      	add	sp, #16
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08a      	sub	sp, #40	@ 0x28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d4:	2327      	movs	r3, #39	@ 0x27
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	2210      	movs	r2, #16
 80041f0:	4013      	ands	r3, r2
 80041f2:	d100      	bne.n	80041f6 <I2C_IsErrorOccurred+0x2e>
 80041f4:	e079      	b.n	80042ea <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2210      	movs	r2, #16
 80041fc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041fe:	e057      	b.n	80042b0 <I2C_IsErrorOccurred+0xe8>
 8004200:	2227      	movs	r2, #39	@ 0x27
 8004202:	18bb      	adds	r3, r7, r2
 8004204:	18ba      	adds	r2, r7, r2
 8004206:	7812      	ldrb	r2, [r2, #0]
 8004208:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	3301      	adds	r3, #1
 800420e:	d04f      	beq.n	80042b0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004210:	f7ff f982 	bl	8003518 <HAL_GetTick>
 8004214:	0002      	movs	r2, r0
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	429a      	cmp	r2, r3
 800421e:	d302      	bcc.n	8004226 <I2C_IsErrorOccurred+0x5e>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d144      	bne.n	80042b0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	2380      	movs	r3, #128	@ 0x80
 800422e:	01db      	lsls	r3, r3, #7
 8004230:	4013      	ands	r3, r2
 8004232:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004234:	2013      	movs	r0, #19
 8004236:	183b      	adds	r3, r7, r0
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	2142      	movs	r1, #66	@ 0x42
 800423c:	5c52      	ldrb	r2, [r2, r1]
 800423e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	699a      	ldr	r2, [r3, #24]
 8004246:	2380      	movs	r3, #128	@ 0x80
 8004248:	021b      	lsls	r3, r3, #8
 800424a:	401a      	ands	r2, r3
 800424c:	2380      	movs	r3, #128	@ 0x80
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	429a      	cmp	r2, r3
 8004252:	d126      	bne.n	80042a2 <I2C_IsErrorOccurred+0xda>
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	2380      	movs	r3, #128	@ 0x80
 8004258:	01db      	lsls	r3, r3, #7
 800425a:	429a      	cmp	r2, r3
 800425c:	d021      	beq.n	80042a2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800425e:	183b      	adds	r3, r7, r0
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b20      	cmp	r3, #32
 8004264:	d01d      	beq.n	80042a2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2180      	movs	r1, #128	@ 0x80
 8004272:	01c9      	lsls	r1, r1, #7
 8004274:	430a      	orrs	r2, r1
 8004276:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004278:	f7ff f94e 	bl	8003518 <HAL_GetTick>
 800427c:	0003      	movs	r3, r0
 800427e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004280:	e00f      	b.n	80042a2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004282:	f7ff f949 	bl	8003518 <HAL_GetTick>
 8004286:	0002      	movs	r2, r0
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b19      	cmp	r3, #25
 800428e:	d908      	bls.n	80042a2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	2220      	movs	r2, #32
 8004294:	4313      	orrs	r3, r2
 8004296:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004298:	2327      	movs	r3, #39	@ 0x27
 800429a:	18fb      	adds	r3, r7, r3
 800429c:	2201      	movs	r2, #1
 800429e:	701a      	strb	r2, [r3, #0]

              break;
 80042a0:	e006      	b.n	80042b0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	2220      	movs	r2, #32
 80042aa:	4013      	ands	r3, r2
 80042ac:	2b20      	cmp	r3, #32
 80042ae:	d1e8      	bne.n	8004282 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	2220      	movs	r2, #32
 80042b8:	4013      	ands	r3, r2
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d004      	beq.n	80042c8 <I2C_IsErrorOccurred+0x100>
 80042be:	2327      	movs	r3, #39	@ 0x27
 80042c0:	18fb      	adds	r3, r7, r3
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d09b      	beq.n	8004200 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80042c8:	2327      	movs	r3, #39	@ 0x27
 80042ca:	18fb      	adds	r3, r7, r3
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d103      	bne.n	80042da <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2220      	movs	r2, #32
 80042d8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	2204      	movs	r2, #4
 80042de:	4313      	orrs	r3, r2
 80042e0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80042e2:	2327      	movs	r3, #39	@ 0x27
 80042e4:	18fb      	adds	r3, r7, r3
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	2380      	movs	r3, #128	@ 0x80
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	4013      	ands	r3, r2
 80042fa:	d00c      	beq.n	8004316 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	2201      	movs	r2, #1
 8004300:	4313      	orrs	r3, r2
 8004302:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2280      	movs	r2, #128	@ 0x80
 800430a:	0052      	lsls	r2, r2, #1
 800430c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800430e:	2327      	movs	r3, #39	@ 0x27
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	2201      	movs	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004316:	69ba      	ldr	r2, [r7, #24]
 8004318:	2380      	movs	r3, #128	@ 0x80
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4013      	ands	r3, r2
 800431e:	d00c      	beq.n	800433a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	2208      	movs	r2, #8
 8004324:	4313      	orrs	r3, r2
 8004326:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2280      	movs	r2, #128	@ 0x80
 800432e:	00d2      	lsls	r2, r2, #3
 8004330:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004332:	2327      	movs	r3, #39	@ 0x27
 8004334:	18fb      	adds	r3, r7, r3
 8004336:	2201      	movs	r2, #1
 8004338:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	2380      	movs	r3, #128	@ 0x80
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4013      	ands	r3, r2
 8004342:	d00c      	beq.n	800435e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	2202      	movs	r2, #2
 8004348:	4313      	orrs	r3, r2
 800434a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2280      	movs	r2, #128	@ 0x80
 8004352:	0092      	lsls	r2, r2, #2
 8004354:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004356:	2327      	movs	r3, #39	@ 0x27
 8004358:	18fb      	adds	r3, r7, r3
 800435a:	2201      	movs	r2, #1
 800435c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800435e:	2327      	movs	r3, #39	@ 0x27
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01d      	beq.n	80043a4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	0018      	movs	r0, r3
 800436c:	f7ff fe28 	bl	8003fc0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	490e      	ldr	r1, [pc, #56]	@ (80043b4 <I2C_IsErrorOccurred+0x1ec>)
 800437c:	400a      	ands	r2, r1
 800437e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	431a      	orrs	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2241      	movs	r2, #65	@ 0x41
 8004390:	2120      	movs	r1, #32
 8004392:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2242      	movs	r2, #66	@ 0x42
 8004398:	2100      	movs	r1, #0
 800439a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2240      	movs	r2, #64	@ 0x40
 80043a0:	2100      	movs	r1, #0
 80043a2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80043a4:	2327      	movs	r3, #39	@ 0x27
 80043a6:	18fb      	adds	r3, r7, r3
 80043a8:	781b      	ldrb	r3, [r3, #0]
}
 80043aa:	0018      	movs	r0, r3
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b00a      	add	sp, #40	@ 0x28
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	46c0      	nop			@ (mov r8, r8)
 80043b4:	fe00e800 	.word	0xfe00e800

080043b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043b8:	b590      	push	{r4, r7, lr}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	0008      	movs	r0, r1
 80043c2:	0011      	movs	r1, r2
 80043c4:	607b      	str	r3, [r7, #4]
 80043c6:	240a      	movs	r4, #10
 80043c8:	193b      	adds	r3, r7, r4
 80043ca:	1c02      	adds	r2, r0, #0
 80043cc:	801a      	strh	r2, [r3, #0]
 80043ce:	2009      	movs	r0, #9
 80043d0:	183b      	adds	r3, r7, r0
 80043d2:	1c0a      	adds	r2, r1, #0
 80043d4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043d6:	193b      	adds	r3, r7, r4
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	059b      	lsls	r3, r3, #22
 80043dc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043de:	183b      	adds	r3, r7, r0
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	0419      	lsls	r1, r3, #16
 80043e4:	23ff      	movs	r3, #255	@ 0xff
 80043e6:	041b      	lsls	r3, r3, #16
 80043e8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043ea:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f2:	4313      	orrs	r3, r2
 80043f4:	005b      	lsls	r3, r3, #1
 80043f6:	085b      	lsrs	r3, r3, #1
 80043f8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004402:	0d51      	lsrs	r1, r2, #21
 8004404:	2280      	movs	r2, #128	@ 0x80
 8004406:	00d2      	lsls	r2, r2, #3
 8004408:	400a      	ands	r2, r1
 800440a:	4907      	ldr	r1, [pc, #28]	@ (8004428 <I2C_TransferConfig+0x70>)
 800440c:	430a      	orrs	r2, r1
 800440e:	43d2      	mvns	r2, r2
 8004410:	401a      	ands	r2, r3
 8004412:	0011      	movs	r1, r2
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	430a      	orrs	r2, r1
 800441c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800441e:	46c0      	nop			@ (mov r8, r8)
 8004420:	46bd      	mov	sp, r7
 8004422:	b007      	add	sp, #28
 8004424:	bd90      	pop	{r4, r7, pc}
 8004426:	46c0      	nop			@ (mov r8, r8)
 8004428:	03ff63ff 	.word	0x03ff63ff

0800442c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2241      	movs	r2, #65	@ 0x41
 800443a:	5c9b      	ldrb	r3, [r3, r2]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b20      	cmp	r3, #32
 8004440:	d138      	bne.n	80044b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2240      	movs	r2, #64	@ 0x40
 8004446:	5c9b      	ldrb	r3, [r3, r2]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d101      	bne.n	8004450 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800444c:	2302      	movs	r3, #2
 800444e:	e032      	b.n	80044b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2240      	movs	r2, #64	@ 0x40
 8004454:	2101      	movs	r1, #1
 8004456:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2241      	movs	r2, #65	@ 0x41
 800445c:	2124      	movs	r1, #36	@ 0x24
 800445e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2101      	movs	r1, #1
 800446c:	438a      	bics	r2, r1
 800446e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4911      	ldr	r1, [pc, #68]	@ (80044c0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800447c:	400a      	ands	r2, r1
 800447e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6819      	ldr	r1, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2101      	movs	r1, #1
 800449c:	430a      	orrs	r2, r1
 800449e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2241      	movs	r2, #65	@ 0x41
 80044a4:	2120      	movs	r1, #32
 80044a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2240      	movs	r2, #64	@ 0x40
 80044ac:	2100      	movs	r1, #0
 80044ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	e000      	b.n	80044b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044b4:	2302      	movs	r3, #2
  }
}
 80044b6:	0018      	movs	r0, r3
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b002      	add	sp, #8
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	46c0      	nop			@ (mov r8, r8)
 80044c0:	ffffefff 	.word	0xffffefff

080044c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2241      	movs	r2, #65	@ 0x41
 80044d2:	5c9b      	ldrb	r3, [r3, r2]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d139      	bne.n	800454e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2240      	movs	r2, #64	@ 0x40
 80044de:	5c9b      	ldrb	r3, [r3, r2]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e033      	b.n	8004550 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2240      	movs	r2, #64	@ 0x40
 80044ec:	2101      	movs	r1, #1
 80044ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2241      	movs	r2, #65	@ 0x41
 80044f4:	2124      	movs	r1, #36	@ 0x24
 80044f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2101      	movs	r1, #1
 8004504:	438a      	bics	r2, r1
 8004506:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4a11      	ldr	r2, [pc, #68]	@ (8004558 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004514:	4013      	ands	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	021b      	lsls	r3, r3, #8
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2101      	movs	r1, #1
 8004536:	430a      	orrs	r2, r1
 8004538:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2241      	movs	r2, #65	@ 0x41
 800453e:	2120      	movs	r1, #32
 8004540:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2240      	movs	r2, #64	@ 0x40
 8004546:	2100      	movs	r1, #0
 8004548:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e000      	b.n	8004550 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800454e:	2302      	movs	r3, #2
  }
}
 8004550:	0018      	movs	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	b004      	add	sp, #16
 8004556:	bd80      	pop	{r7, pc}
 8004558:	fffff0ff 	.word	0xfffff0ff

0800455c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e301      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2201      	movs	r2, #1
 8004574:	4013      	ands	r3, r2
 8004576:	d100      	bne.n	800457a <HAL_RCC_OscConfig+0x1e>
 8004578:	e08d      	b.n	8004696 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800457a:	4bc3      	ldr	r3, [pc, #780]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	220c      	movs	r2, #12
 8004580:	4013      	ands	r3, r2
 8004582:	2b04      	cmp	r3, #4
 8004584:	d00e      	beq.n	80045a4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004586:	4bc0      	ldr	r3, [pc, #768]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	220c      	movs	r2, #12
 800458c:	4013      	ands	r3, r2
 800458e:	2b08      	cmp	r3, #8
 8004590:	d116      	bne.n	80045c0 <HAL_RCC_OscConfig+0x64>
 8004592:	4bbd      	ldr	r3, [pc, #756]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	2380      	movs	r3, #128	@ 0x80
 8004598:	025b      	lsls	r3, r3, #9
 800459a:	401a      	ands	r2, r3
 800459c:	2380      	movs	r3, #128	@ 0x80
 800459e:	025b      	lsls	r3, r3, #9
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d10d      	bne.n	80045c0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045a4:	4bb8      	ldr	r3, [pc, #736]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	2380      	movs	r3, #128	@ 0x80
 80045aa:	029b      	lsls	r3, r3, #10
 80045ac:	4013      	ands	r3, r2
 80045ae:	d100      	bne.n	80045b2 <HAL_RCC_OscConfig+0x56>
 80045b0:	e070      	b.n	8004694 <HAL_RCC_OscConfig+0x138>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d000      	beq.n	80045bc <HAL_RCC_OscConfig+0x60>
 80045ba:	e06b      	b.n	8004694 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e2d8      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d107      	bne.n	80045d8 <HAL_RCC_OscConfig+0x7c>
 80045c8:	4baf      	ldr	r3, [pc, #700]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	4bae      	ldr	r3, [pc, #696]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80045ce:	2180      	movs	r1, #128	@ 0x80
 80045d0:	0249      	lsls	r1, r1, #9
 80045d2:	430a      	orrs	r2, r1
 80045d4:	601a      	str	r2, [r3, #0]
 80045d6:	e02f      	b.n	8004638 <HAL_RCC_OscConfig+0xdc>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10c      	bne.n	80045fa <HAL_RCC_OscConfig+0x9e>
 80045e0:	4ba9      	ldr	r3, [pc, #676]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	4ba8      	ldr	r3, [pc, #672]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80045e6:	49a9      	ldr	r1, [pc, #676]	@ (800488c <HAL_RCC_OscConfig+0x330>)
 80045e8:	400a      	ands	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	4ba6      	ldr	r3, [pc, #664]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	4ba5      	ldr	r3, [pc, #660]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80045f2:	49a7      	ldr	r1, [pc, #668]	@ (8004890 <HAL_RCC_OscConfig+0x334>)
 80045f4:	400a      	ands	r2, r1
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	e01e      	b.n	8004638 <HAL_RCC_OscConfig+0xdc>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b05      	cmp	r3, #5
 8004600:	d10e      	bne.n	8004620 <HAL_RCC_OscConfig+0xc4>
 8004602:	4ba1      	ldr	r3, [pc, #644]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	4ba0      	ldr	r3, [pc, #640]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 8004608:	2180      	movs	r1, #128	@ 0x80
 800460a:	02c9      	lsls	r1, r1, #11
 800460c:	430a      	orrs	r2, r1
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	4b9d      	ldr	r3, [pc, #628]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4b9c      	ldr	r3, [pc, #624]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 8004616:	2180      	movs	r1, #128	@ 0x80
 8004618:	0249      	lsls	r1, r1, #9
 800461a:	430a      	orrs	r2, r1
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	e00b      	b.n	8004638 <HAL_RCC_OscConfig+0xdc>
 8004620:	4b99      	ldr	r3, [pc, #612]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	4b98      	ldr	r3, [pc, #608]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 8004626:	4999      	ldr	r1, [pc, #612]	@ (800488c <HAL_RCC_OscConfig+0x330>)
 8004628:	400a      	ands	r2, r1
 800462a:	601a      	str	r2, [r3, #0]
 800462c:	4b96      	ldr	r3, [pc, #600]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	4b95      	ldr	r3, [pc, #596]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 8004632:	4997      	ldr	r1, [pc, #604]	@ (8004890 <HAL_RCC_OscConfig+0x334>)
 8004634:	400a      	ands	r2, r1
 8004636:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d014      	beq.n	800466a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004640:	f7fe ff6a 	bl	8003518 <HAL_GetTick>
 8004644:	0003      	movs	r3, r0
 8004646:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800464a:	f7fe ff65 	bl	8003518 <HAL_GetTick>
 800464e:	0002      	movs	r2, r0
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b64      	cmp	r3, #100	@ 0x64
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e28a      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465c:	4b8a      	ldr	r3, [pc, #552]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	2380      	movs	r3, #128	@ 0x80
 8004662:	029b      	lsls	r3, r3, #10
 8004664:	4013      	ands	r3, r2
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0xee>
 8004668:	e015      	b.n	8004696 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466a:	f7fe ff55 	bl	8003518 <HAL_GetTick>
 800466e:	0003      	movs	r3, r0
 8004670:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004674:	f7fe ff50 	bl	8003518 <HAL_GetTick>
 8004678:	0002      	movs	r2, r0
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b64      	cmp	r3, #100	@ 0x64
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e275      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004686:	4b80      	ldr	r3, [pc, #512]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	2380      	movs	r3, #128	@ 0x80
 800468c:	029b      	lsls	r3, r3, #10
 800468e:	4013      	ands	r3, r2
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0x118>
 8004692:	e000      	b.n	8004696 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004694:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2202      	movs	r2, #2
 800469c:	4013      	ands	r3, r2
 800469e:	d100      	bne.n	80046a2 <HAL_RCC_OscConfig+0x146>
 80046a0:	e069      	b.n	8004776 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80046a2:	4b79      	ldr	r3, [pc, #484]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	220c      	movs	r2, #12
 80046a8:	4013      	ands	r3, r2
 80046aa:	d00b      	beq.n	80046c4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80046ac:	4b76      	ldr	r3, [pc, #472]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	220c      	movs	r2, #12
 80046b2:	4013      	ands	r3, r2
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d11c      	bne.n	80046f2 <HAL_RCC_OscConfig+0x196>
 80046b8:	4b73      	ldr	r3, [pc, #460]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	2380      	movs	r3, #128	@ 0x80
 80046be:	025b      	lsls	r3, r3, #9
 80046c0:	4013      	ands	r3, r2
 80046c2:	d116      	bne.n	80046f2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c4:	4b70      	ldr	r3, [pc, #448]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2202      	movs	r2, #2
 80046ca:	4013      	ands	r3, r2
 80046cc:	d005      	beq.n	80046da <HAL_RCC_OscConfig+0x17e>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d001      	beq.n	80046da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e24b      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046da:	4b6b      	ldr	r3, [pc, #428]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	22f8      	movs	r2, #248	@ 0xf8
 80046e0:	4393      	bics	r3, r2
 80046e2:	0019      	movs	r1, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	00da      	lsls	r2, r3, #3
 80046ea:	4b67      	ldr	r3, [pc, #412]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80046ec:	430a      	orrs	r2, r1
 80046ee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046f0:	e041      	b.n	8004776 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d024      	beq.n	8004744 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046fa:	4b63      	ldr	r3, [pc, #396]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	4b62      	ldr	r3, [pc, #392]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 8004700:	2101      	movs	r1, #1
 8004702:	430a      	orrs	r2, r1
 8004704:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004706:	f7fe ff07 	bl	8003518 <HAL_GetTick>
 800470a:	0003      	movs	r3, r0
 800470c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004710:	f7fe ff02 	bl	8003518 <HAL_GetTick>
 8004714:	0002      	movs	r2, r0
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e227      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004722:	4b59      	ldr	r3, [pc, #356]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2202      	movs	r2, #2
 8004728:	4013      	ands	r3, r2
 800472a:	d0f1      	beq.n	8004710 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800472c:	4b56      	ldr	r3, [pc, #344]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	22f8      	movs	r2, #248	@ 0xf8
 8004732:	4393      	bics	r3, r2
 8004734:	0019      	movs	r1, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	00da      	lsls	r2, r3, #3
 800473c:	4b52      	ldr	r3, [pc, #328]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 800473e:	430a      	orrs	r2, r1
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	e018      	b.n	8004776 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004744:	4b50      	ldr	r3, [pc, #320]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b4f      	ldr	r3, [pc, #316]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 800474a:	2101      	movs	r1, #1
 800474c:	438a      	bics	r2, r1
 800474e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004750:	f7fe fee2 	bl	8003518 <HAL_GetTick>
 8004754:	0003      	movs	r3, r0
 8004756:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004758:	e008      	b.n	800476c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800475a:	f7fe fedd 	bl	8003518 <HAL_GetTick>
 800475e:	0002      	movs	r2, r0
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b02      	cmp	r3, #2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e202      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476c:	4b46      	ldr	r3, [pc, #280]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2202      	movs	r2, #2
 8004772:	4013      	ands	r3, r2
 8004774:	d1f1      	bne.n	800475a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2208      	movs	r2, #8
 800477c:	4013      	ands	r3, r2
 800477e:	d036      	beq.n	80047ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d019      	beq.n	80047bc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004788:	4b3f      	ldr	r3, [pc, #252]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 800478a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800478c:	4b3e      	ldr	r3, [pc, #248]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 800478e:	2101      	movs	r1, #1
 8004790:	430a      	orrs	r2, r1
 8004792:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004794:	f7fe fec0 	bl	8003518 <HAL_GetTick>
 8004798:	0003      	movs	r3, r0
 800479a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800479e:	f7fe febb 	bl	8003518 <HAL_GetTick>
 80047a2:	0002      	movs	r2, r0
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e1e0      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047b0:	4b35      	ldr	r3, [pc, #212]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80047b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b4:	2202      	movs	r2, #2
 80047b6:	4013      	ands	r3, r2
 80047b8:	d0f1      	beq.n	800479e <HAL_RCC_OscConfig+0x242>
 80047ba:	e018      	b.n	80047ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047bc:	4b32      	ldr	r3, [pc, #200]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80047be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047c0:	4b31      	ldr	r3, [pc, #196]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80047c2:	2101      	movs	r1, #1
 80047c4:	438a      	bics	r2, r1
 80047c6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047c8:	f7fe fea6 	bl	8003518 <HAL_GetTick>
 80047cc:	0003      	movs	r3, r0
 80047ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047d2:	f7fe fea1 	bl	8003518 <HAL_GetTick>
 80047d6:	0002      	movs	r2, r0
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e1c6      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e4:	4b28      	ldr	r3, [pc, #160]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 80047e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e8:	2202      	movs	r2, #2
 80047ea:	4013      	ands	r3, r2
 80047ec:	d1f1      	bne.n	80047d2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2204      	movs	r2, #4
 80047f4:	4013      	ands	r3, r2
 80047f6:	d100      	bne.n	80047fa <HAL_RCC_OscConfig+0x29e>
 80047f8:	e0b4      	b.n	8004964 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047fa:	201f      	movs	r0, #31
 80047fc:	183b      	adds	r3, r7, r0
 80047fe:	2200      	movs	r2, #0
 8004800:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004802:	4b21      	ldr	r3, [pc, #132]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 8004804:	69da      	ldr	r2, [r3, #28]
 8004806:	2380      	movs	r3, #128	@ 0x80
 8004808:	055b      	lsls	r3, r3, #21
 800480a:	4013      	ands	r3, r2
 800480c:	d110      	bne.n	8004830 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800480e:	4b1e      	ldr	r3, [pc, #120]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 8004810:	69da      	ldr	r2, [r3, #28]
 8004812:	4b1d      	ldr	r3, [pc, #116]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 8004814:	2180      	movs	r1, #128	@ 0x80
 8004816:	0549      	lsls	r1, r1, #21
 8004818:	430a      	orrs	r2, r1
 800481a:	61da      	str	r2, [r3, #28]
 800481c:	4b1a      	ldr	r3, [pc, #104]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 800481e:	69da      	ldr	r2, [r3, #28]
 8004820:	2380      	movs	r3, #128	@ 0x80
 8004822:	055b      	lsls	r3, r3, #21
 8004824:	4013      	ands	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800482a:	183b      	adds	r3, r7, r0
 800482c:	2201      	movs	r2, #1
 800482e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004830:	4b18      	ldr	r3, [pc, #96]	@ (8004894 <HAL_RCC_OscConfig+0x338>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	2380      	movs	r3, #128	@ 0x80
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	4013      	ands	r3, r2
 800483a:	d11a      	bne.n	8004872 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800483c:	4b15      	ldr	r3, [pc, #84]	@ (8004894 <HAL_RCC_OscConfig+0x338>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	4b14      	ldr	r3, [pc, #80]	@ (8004894 <HAL_RCC_OscConfig+0x338>)
 8004842:	2180      	movs	r1, #128	@ 0x80
 8004844:	0049      	lsls	r1, r1, #1
 8004846:	430a      	orrs	r2, r1
 8004848:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800484a:	f7fe fe65 	bl	8003518 <HAL_GetTick>
 800484e:	0003      	movs	r3, r0
 8004850:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004854:	f7fe fe60 	bl	8003518 <HAL_GetTick>
 8004858:	0002      	movs	r2, r0
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b64      	cmp	r3, #100	@ 0x64
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e185      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004866:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <HAL_RCC_OscConfig+0x338>)
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	2380      	movs	r3, #128	@ 0x80
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	4013      	ands	r3, r2
 8004870:	d0f0      	beq.n	8004854 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d10e      	bne.n	8004898 <HAL_RCC_OscConfig+0x33c>
 800487a:	4b03      	ldr	r3, [pc, #12]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 800487c:	6a1a      	ldr	r2, [r3, #32]
 800487e:	4b02      	ldr	r3, [pc, #8]	@ (8004888 <HAL_RCC_OscConfig+0x32c>)
 8004880:	2101      	movs	r1, #1
 8004882:	430a      	orrs	r2, r1
 8004884:	621a      	str	r2, [r3, #32]
 8004886:	e035      	b.n	80048f4 <HAL_RCC_OscConfig+0x398>
 8004888:	40021000 	.word	0x40021000
 800488c:	fffeffff 	.word	0xfffeffff
 8004890:	fffbffff 	.word	0xfffbffff
 8004894:	40007000 	.word	0x40007000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10c      	bne.n	80048ba <HAL_RCC_OscConfig+0x35e>
 80048a0:	4bb6      	ldr	r3, [pc, #728]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80048a2:	6a1a      	ldr	r2, [r3, #32]
 80048a4:	4bb5      	ldr	r3, [pc, #724]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80048a6:	2101      	movs	r1, #1
 80048a8:	438a      	bics	r2, r1
 80048aa:	621a      	str	r2, [r3, #32]
 80048ac:	4bb3      	ldr	r3, [pc, #716]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80048ae:	6a1a      	ldr	r2, [r3, #32]
 80048b0:	4bb2      	ldr	r3, [pc, #712]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80048b2:	2104      	movs	r1, #4
 80048b4:	438a      	bics	r2, r1
 80048b6:	621a      	str	r2, [r3, #32]
 80048b8:	e01c      	b.n	80048f4 <HAL_RCC_OscConfig+0x398>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2b05      	cmp	r3, #5
 80048c0:	d10c      	bne.n	80048dc <HAL_RCC_OscConfig+0x380>
 80048c2:	4bae      	ldr	r3, [pc, #696]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80048c4:	6a1a      	ldr	r2, [r3, #32]
 80048c6:	4bad      	ldr	r3, [pc, #692]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80048c8:	2104      	movs	r1, #4
 80048ca:	430a      	orrs	r2, r1
 80048cc:	621a      	str	r2, [r3, #32]
 80048ce:	4bab      	ldr	r3, [pc, #684]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80048d0:	6a1a      	ldr	r2, [r3, #32]
 80048d2:	4baa      	ldr	r3, [pc, #680]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80048d4:	2101      	movs	r1, #1
 80048d6:	430a      	orrs	r2, r1
 80048d8:	621a      	str	r2, [r3, #32]
 80048da:	e00b      	b.n	80048f4 <HAL_RCC_OscConfig+0x398>
 80048dc:	4ba7      	ldr	r3, [pc, #668]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80048de:	6a1a      	ldr	r2, [r3, #32]
 80048e0:	4ba6      	ldr	r3, [pc, #664]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80048e2:	2101      	movs	r1, #1
 80048e4:	438a      	bics	r2, r1
 80048e6:	621a      	str	r2, [r3, #32]
 80048e8:	4ba4      	ldr	r3, [pc, #656]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80048ea:	6a1a      	ldr	r2, [r3, #32]
 80048ec:	4ba3      	ldr	r3, [pc, #652]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80048ee:	2104      	movs	r1, #4
 80048f0:	438a      	bics	r2, r1
 80048f2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d014      	beq.n	8004926 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048fc:	f7fe fe0c 	bl	8003518 <HAL_GetTick>
 8004900:	0003      	movs	r3, r0
 8004902:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004904:	e009      	b.n	800491a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004906:	f7fe fe07 	bl	8003518 <HAL_GetTick>
 800490a:	0002      	movs	r2, r0
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	4a9b      	ldr	r2, [pc, #620]	@ (8004b80 <HAL_RCC_OscConfig+0x624>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e12b      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491a:	4b98      	ldr	r3, [pc, #608]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	2202      	movs	r2, #2
 8004920:	4013      	ands	r3, r2
 8004922:	d0f0      	beq.n	8004906 <HAL_RCC_OscConfig+0x3aa>
 8004924:	e013      	b.n	800494e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004926:	f7fe fdf7 	bl	8003518 <HAL_GetTick>
 800492a:	0003      	movs	r3, r0
 800492c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800492e:	e009      	b.n	8004944 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004930:	f7fe fdf2 	bl	8003518 <HAL_GetTick>
 8004934:	0002      	movs	r2, r0
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	4a91      	ldr	r2, [pc, #580]	@ (8004b80 <HAL_RCC_OscConfig+0x624>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e116      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004944:	4b8d      	ldr	r3, [pc, #564]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	2202      	movs	r2, #2
 800494a:	4013      	ands	r3, r2
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800494e:	231f      	movs	r3, #31
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d105      	bne.n	8004964 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004958:	4b88      	ldr	r3, [pc, #544]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 800495a:	69da      	ldr	r2, [r3, #28]
 800495c:	4b87      	ldr	r3, [pc, #540]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 800495e:	4989      	ldr	r1, [pc, #548]	@ (8004b84 <HAL_RCC_OscConfig+0x628>)
 8004960:	400a      	ands	r2, r1
 8004962:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2210      	movs	r2, #16
 800496a:	4013      	ands	r3, r2
 800496c:	d063      	beq.n	8004a36 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d12a      	bne.n	80049cc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004976:	4b81      	ldr	r3, [pc, #516]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800497a:	4b80      	ldr	r3, [pc, #512]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 800497c:	2104      	movs	r1, #4
 800497e:	430a      	orrs	r2, r1
 8004980:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004982:	4b7e      	ldr	r3, [pc, #504]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004986:	4b7d      	ldr	r3, [pc, #500]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004988:	2101      	movs	r1, #1
 800498a:	430a      	orrs	r2, r1
 800498c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800498e:	f7fe fdc3 	bl	8003518 <HAL_GetTick>
 8004992:	0003      	movs	r3, r0
 8004994:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004998:	f7fe fdbe 	bl	8003518 <HAL_GetTick>
 800499c:	0002      	movs	r2, r0
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e0e3      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80049aa:	4b74      	ldr	r3, [pc, #464]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80049ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ae:	2202      	movs	r2, #2
 80049b0:	4013      	ands	r3, r2
 80049b2:	d0f1      	beq.n	8004998 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80049b4:	4b71      	ldr	r3, [pc, #452]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80049b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049b8:	22f8      	movs	r2, #248	@ 0xf8
 80049ba:	4393      	bics	r3, r2
 80049bc:	0019      	movs	r1, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	00da      	lsls	r2, r3, #3
 80049c4:	4b6d      	ldr	r3, [pc, #436]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80049c6:	430a      	orrs	r2, r1
 80049c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80049ca:	e034      	b.n	8004a36 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	3305      	adds	r3, #5
 80049d2:	d111      	bne.n	80049f8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80049d4:	4b69      	ldr	r3, [pc, #420]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80049d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049d8:	4b68      	ldr	r3, [pc, #416]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80049da:	2104      	movs	r1, #4
 80049dc:	438a      	bics	r2, r1
 80049de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80049e0:	4b66      	ldr	r3, [pc, #408]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80049e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049e4:	22f8      	movs	r2, #248	@ 0xf8
 80049e6:	4393      	bics	r3, r2
 80049e8:	0019      	movs	r1, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	00da      	lsls	r2, r3, #3
 80049f0:	4b62      	ldr	r3, [pc, #392]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80049f2:	430a      	orrs	r2, r1
 80049f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80049f6:	e01e      	b.n	8004a36 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80049f8:	4b60      	ldr	r3, [pc, #384]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80049fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049fc:	4b5f      	ldr	r3, [pc, #380]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 80049fe:	2104      	movs	r1, #4
 8004a00:	430a      	orrs	r2, r1
 8004a02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004a04:	4b5d      	ldr	r3, [pc, #372]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004a06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a08:	4b5c      	ldr	r3, [pc, #368]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	438a      	bics	r2, r1
 8004a0e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a10:	f7fe fd82 	bl	8003518 <HAL_GetTick>
 8004a14:	0003      	movs	r3, r0
 8004a16:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004a18:	e008      	b.n	8004a2c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004a1a:	f7fe fd7d 	bl	8003518 <HAL_GetTick>
 8004a1e:	0002      	movs	r2, r0
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e0a2      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004a2c:	4b53      	ldr	r3, [pc, #332]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a30:	2202      	movs	r2, #2
 8004a32:	4013      	ands	r3, r2
 8004a34:	d1f1      	bne.n	8004a1a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d100      	bne.n	8004a40 <HAL_RCC_OscConfig+0x4e4>
 8004a3e:	e097      	b.n	8004b70 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a40:	4b4e      	ldr	r3, [pc, #312]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	220c      	movs	r2, #12
 8004a46:	4013      	ands	r3, r2
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d100      	bne.n	8004a4e <HAL_RCC_OscConfig+0x4f2>
 8004a4c:	e06b      	b.n	8004b26 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d14c      	bne.n	8004af0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a56:	4b49      	ldr	r3, [pc, #292]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4b48      	ldr	r3, [pc, #288]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004a5c:	494a      	ldr	r1, [pc, #296]	@ (8004b88 <HAL_RCC_OscConfig+0x62c>)
 8004a5e:	400a      	ands	r2, r1
 8004a60:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a62:	f7fe fd59 	bl	8003518 <HAL_GetTick>
 8004a66:	0003      	movs	r3, r0
 8004a68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a6c:	f7fe fd54 	bl	8003518 <HAL_GetTick>
 8004a70:	0002      	movs	r2, r0
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e079      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a7e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	2380      	movs	r3, #128	@ 0x80
 8004a84:	049b      	lsls	r3, r3, #18
 8004a86:	4013      	ands	r3, r2
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a8a:	4b3c      	ldr	r3, [pc, #240]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8e:	220f      	movs	r2, #15
 8004a90:	4393      	bics	r3, r2
 8004a92:	0019      	movs	r1, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a98:	4b38      	ldr	r3, [pc, #224]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004a9e:	4b37      	ldr	r3, [pc, #220]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	4a3a      	ldr	r2, [pc, #232]	@ (8004b8c <HAL_RCC_OscConfig+0x630>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	0019      	movs	r1, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	4b32      	ldr	r3, [pc, #200]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ab8:	4b30      	ldr	r3, [pc, #192]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b2f      	ldr	r3, [pc, #188]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004abe:	2180      	movs	r1, #128	@ 0x80
 8004ac0:	0449      	lsls	r1, r1, #17
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac6:	f7fe fd27 	bl	8003518 <HAL_GetTick>
 8004aca:	0003      	movs	r3, r0
 8004acc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad0:	f7fe fd22 	bl	8003518 <HAL_GetTick>
 8004ad4:	0002      	movs	r2, r0
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e047      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ae2:	4b26      	ldr	r3, [pc, #152]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	2380      	movs	r3, #128	@ 0x80
 8004ae8:	049b      	lsls	r3, r3, #18
 8004aea:	4013      	ands	r3, r2
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x574>
 8004aee:	e03f      	b.n	8004b70 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af0:	4b22      	ldr	r3, [pc, #136]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4b21      	ldr	r3, [pc, #132]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004af6:	4924      	ldr	r1, [pc, #144]	@ (8004b88 <HAL_RCC_OscConfig+0x62c>)
 8004af8:	400a      	ands	r2, r1
 8004afa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afc:	f7fe fd0c 	bl	8003518 <HAL_GetTick>
 8004b00:	0003      	movs	r3, r0
 8004b02:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b06:	f7fe fd07 	bl	8003518 <HAL_GetTick>
 8004b0a:	0002      	movs	r2, r0
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e02c      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b18:	4b18      	ldr	r3, [pc, #96]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	2380      	movs	r3, #128	@ 0x80
 8004b1e:	049b      	lsls	r3, r3, #18
 8004b20:	4013      	ands	r3, r2
 8004b22:	d1f0      	bne.n	8004b06 <HAL_RCC_OscConfig+0x5aa>
 8004b24:	e024      	b.n	8004b70 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d101      	bne.n	8004b32 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e01f      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004b32:	4b12      	ldr	r3, [pc, #72]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004b38:	4b10      	ldr	r3, [pc, #64]	@ (8004b7c <HAL_RCC_OscConfig+0x620>)
 8004b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3e:	697a      	ldr	r2, [r7, #20]
 8004b40:	2380      	movs	r3, #128	@ 0x80
 8004b42:	025b      	lsls	r3, r3, #9
 8004b44:	401a      	ands	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d10e      	bne.n	8004b6c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	220f      	movs	r2, #15
 8004b52:	401a      	ands	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d107      	bne.n	8004b6c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	23f0      	movs	r3, #240	@ 0xf0
 8004b60:	039b      	lsls	r3, r3, #14
 8004b62:	401a      	ands	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	0018      	movs	r0, r3
 8004b74:	46bd      	mov	sp, r7
 8004b76:	b008      	add	sp, #32
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			@ (mov r8, r8)
 8004b7c:	40021000 	.word	0x40021000
 8004b80:	00001388 	.word	0x00001388
 8004b84:	efffffff 	.word	0xefffffff
 8004b88:	feffffff 	.word	0xfeffffff
 8004b8c:	ffc2ffff 	.word	0xffc2ffff

08004b90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0b3      	b.n	8004d0c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba4:	4b5b      	ldr	r3, [pc, #364]	@ (8004d14 <HAL_RCC_ClockConfig+0x184>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	4013      	ands	r3, r2
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d911      	bls.n	8004bd6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb2:	4b58      	ldr	r3, [pc, #352]	@ (8004d14 <HAL_RCC_ClockConfig+0x184>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	4393      	bics	r3, r2
 8004bba:	0019      	movs	r1, r3
 8004bbc:	4b55      	ldr	r3, [pc, #340]	@ (8004d14 <HAL_RCC_ClockConfig+0x184>)
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc4:	4b53      	ldr	r3, [pc, #332]	@ (8004d14 <HAL_RCC_ClockConfig+0x184>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	4013      	ands	r3, r2
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d001      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e09a      	b.n	8004d0c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d015      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2204      	movs	r2, #4
 8004be6:	4013      	ands	r3, r2
 8004be8:	d006      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004bea:	4b4b      	ldr	r3, [pc, #300]	@ (8004d18 <HAL_RCC_ClockConfig+0x188>)
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	4b4a      	ldr	r3, [pc, #296]	@ (8004d18 <HAL_RCC_ClockConfig+0x188>)
 8004bf0:	21e0      	movs	r1, #224	@ 0xe0
 8004bf2:	00c9      	lsls	r1, r1, #3
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf8:	4b47      	ldr	r3, [pc, #284]	@ (8004d18 <HAL_RCC_ClockConfig+0x188>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	22f0      	movs	r2, #240	@ 0xf0
 8004bfe:	4393      	bics	r3, r2
 8004c00:	0019      	movs	r1, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689a      	ldr	r2, [r3, #8]
 8004c06:	4b44      	ldr	r3, [pc, #272]	@ (8004d18 <HAL_RCC_ClockConfig+0x188>)
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2201      	movs	r2, #1
 8004c12:	4013      	ands	r3, r2
 8004c14:	d040      	beq.n	8004c98 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d107      	bne.n	8004c2e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d18 <HAL_RCC_ClockConfig+0x188>)
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	2380      	movs	r3, #128	@ 0x80
 8004c24:	029b      	lsls	r3, r3, #10
 8004c26:	4013      	ands	r3, r2
 8004c28:	d114      	bne.n	8004c54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e06e      	b.n	8004d0c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d107      	bne.n	8004c46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c36:	4b38      	ldr	r3, [pc, #224]	@ (8004d18 <HAL_RCC_ClockConfig+0x188>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	2380      	movs	r3, #128	@ 0x80
 8004c3c:	049b      	lsls	r3, r3, #18
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d108      	bne.n	8004c54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e062      	b.n	8004d0c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c46:	4b34      	ldr	r3, [pc, #208]	@ (8004d18 <HAL_RCC_ClockConfig+0x188>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d101      	bne.n	8004c54 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e05b      	b.n	8004d0c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c54:	4b30      	ldr	r3, [pc, #192]	@ (8004d18 <HAL_RCC_ClockConfig+0x188>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2203      	movs	r2, #3
 8004c5a:	4393      	bics	r3, r2
 8004c5c:	0019      	movs	r1, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	4b2d      	ldr	r3, [pc, #180]	@ (8004d18 <HAL_RCC_ClockConfig+0x188>)
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c68:	f7fe fc56 	bl	8003518 <HAL_GetTick>
 8004c6c:	0003      	movs	r3, r0
 8004c6e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c70:	e009      	b.n	8004c86 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c72:	f7fe fc51 	bl	8003518 <HAL_GetTick>
 8004c76:	0002      	movs	r2, r0
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	4a27      	ldr	r2, [pc, #156]	@ (8004d1c <HAL_RCC_ClockConfig+0x18c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e042      	b.n	8004d0c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c86:	4b24      	ldr	r3, [pc, #144]	@ (8004d18 <HAL_RCC_ClockConfig+0x188>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	220c      	movs	r2, #12
 8004c8c:	401a      	ands	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d1ec      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c98:	4b1e      	ldr	r3, [pc, #120]	@ (8004d14 <HAL_RCC_ClockConfig+0x184>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d211      	bcs.n	8004cca <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8004d14 <HAL_RCC_ClockConfig+0x184>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2201      	movs	r2, #1
 8004cac:	4393      	bics	r3, r2
 8004cae:	0019      	movs	r1, r3
 8004cb0:	4b18      	ldr	r3, [pc, #96]	@ (8004d14 <HAL_RCC_ClockConfig+0x184>)
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb8:	4b16      	ldr	r3, [pc, #88]	@ (8004d14 <HAL_RCC_ClockConfig+0x184>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d001      	beq.n	8004cca <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e020      	b.n	8004d0c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2204      	movs	r2, #4
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d009      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004cd4:	4b10      	ldr	r3, [pc, #64]	@ (8004d18 <HAL_RCC_ClockConfig+0x188>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	4a11      	ldr	r2, [pc, #68]	@ (8004d20 <HAL_RCC_ClockConfig+0x190>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	0019      	movs	r1, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68da      	ldr	r2, [r3, #12]
 8004ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d18 <HAL_RCC_ClockConfig+0x188>)
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004ce8:	f000 f820 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 8004cec:	0001      	movs	r1, r0
 8004cee:	4b0a      	ldr	r3, [pc, #40]	@ (8004d18 <HAL_RCC_ClockConfig+0x188>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	091b      	lsrs	r3, r3, #4
 8004cf4:	220f      	movs	r2, #15
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8004d24 <HAL_RCC_ClockConfig+0x194>)
 8004cfa:	5cd3      	ldrb	r3, [r2, r3]
 8004cfc:	000a      	movs	r2, r1
 8004cfe:	40da      	lsrs	r2, r3
 8004d00:	4b09      	ldr	r3, [pc, #36]	@ (8004d28 <HAL_RCC_ClockConfig+0x198>)
 8004d02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004d04:	2000      	movs	r0, #0
 8004d06:	f7fe fbc1 	bl	800348c <HAL_InitTick>
  
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b004      	add	sp, #16
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40022000 	.word	0x40022000
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	00001388 	.word	0x00001388
 8004d20:	fffff8ff 	.word	0xfffff8ff
 8004d24:	0800adb8 	.word	0x0800adb8
 8004d28:	20000000 	.word	0x20000000

08004d2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	2300      	movs	r3, #0
 8004d38:	60bb      	str	r3, [r7, #8]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	617b      	str	r3, [r7, #20]
 8004d3e:	2300      	movs	r3, #0
 8004d40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004d46:	4b20      	ldr	r3, [pc, #128]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	220c      	movs	r2, #12
 8004d50:	4013      	ands	r3, r2
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d002      	beq.n	8004d5c <HAL_RCC_GetSysClockFreq+0x30>
 8004d56:	2b08      	cmp	r3, #8
 8004d58:	d003      	beq.n	8004d62 <HAL_RCC_GetSysClockFreq+0x36>
 8004d5a:	e02c      	b.n	8004db6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d5e:	613b      	str	r3, [r7, #16]
      break;
 8004d60:	e02c      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	0c9b      	lsrs	r3, r3, #18
 8004d66:	220f      	movs	r2, #15
 8004d68:	4013      	ands	r3, r2
 8004d6a:	4a19      	ldr	r2, [pc, #100]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d6c:	5cd3      	ldrb	r3, [r2, r3]
 8004d6e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004d70:	4b15      	ldr	r3, [pc, #84]	@ (8004dc8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d74:	220f      	movs	r2, #15
 8004d76:	4013      	ands	r3, r2
 8004d78:	4a16      	ldr	r2, [pc, #88]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004d7a:	5cd3      	ldrb	r3, [r2, r3]
 8004d7c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	2380      	movs	r3, #128	@ 0x80
 8004d82:	025b      	lsls	r3, r3, #9
 8004d84:	4013      	ands	r3, r2
 8004d86:	d009      	beq.n	8004d9c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	4810      	ldr	r0, [pc, #64]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d8c:	f7fb f9d8 	bl	8000140 <__udivsi3>
 8004d90:	0003      	movs	r3, r0
 8004d92:	001a      	movs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4353      	muls	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	e009      	b.n	8004db0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	000a      	movs	r2, r1
 8004da0:	0152      	lsls	r2, r2, #5
 8004da2:	1a52      	subs	r2, r2, r1
 8004da4:	0193      	lsls	r3, r2, #6
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	185b      	adds	r3, r3, r1
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	613b      	str	r3, [r7, #16]
      break;
 8004db4:	e002      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004db6:	4b05      	ldr	r3, [pc, #20]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004db8:	613b      	str	r3, [r7, #16]
      break;
 8004dba:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004dbc:	693b      	ldr	r3, [r7, #16]
}
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	b006      	add	sp, #24
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	46c0      	nop			@ (mov r8, r8)
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	007a1200 	.word	0x007a1200
 8004dd0:	0800add0 	.word	0x0800add0
 8004dd4:	0800ade0 	.word	0x0800ade0

08004dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ddc:	4b02      	ldr	r3, [pc, #8]	@ (8004de8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004dde:	681b      	ldr	r3, [r3, #0]
}
 8004de0:	0018      	movs	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	46c0      	nop			@ (mov r8, r8)
 8004de8:	20000000 	.word	0x20000000

08004dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004df0:	f7ff fff2 	bl	8004dd8 <HAL_RCC_GetHCLKFreq>
 8004df4:	0001      	movs	r1, r0
 8004df6:	4b06      	ldr	r3, [pc, #24]	@ (8004e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	0a1b      	lsrs	r3, r3, #8
 8004dfc:	2207      	movs	r2, #7
 8004dfe:	4013      	ands	r3, r2
 8004e00:	4a04      	ldr	r2, [pc, #16]	@ (8004e14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e02:	5cd3      	ldrb	r3, [r2, r3]
 8004e04:	40d9      	lsrs	r1, r3
 8004e06:	000b      	movs	r3, r1
}    
 8004e08:	0018      	movs	r0, r3
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	46c0      	nop			@ (mov r8, r8)
 8004e10:	40021000 	.word	0x40021000
 8004e14:	0800adc8 	.word	0x0800adc8

08004e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	2380      	movs	r3, #128	@ 0x80
 8004e2e:	025b      	lsls	r3, r3, #9
 8004e30:	4013      	ands	r3, r2
 8004e32:	d100      	bne.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004e34:	e08e      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004e36:	2017      	movs	r0, #23
 8004e38:	183b      	adds	r3, r7, r0
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e3e:	4b57      	ldr	r3, [pc, #348]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e40:	69da      	ldr	r2, [r3, #28]
 8004e42:	2380      	movs	r3, #128	@ 0x80
 8004e44:	055b      	lsls	r3, r3, #21
 8004e46:	4013      	ands	r3, r2
 8004e48:	d110      	bne.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e4a:	4b54      	ldr	r3, [pc, #336]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e4c:	69da      	ldr	r2, [r3, #28]
 8004e4e:	4b53      	ldr	r3, [pc, #332]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e50:	2180      	movs	r1, #128	@ 0x80
 8004e52:	0549      	lsls	r1, r1, #21
 8004e54:	430a      	orrs	r2, r1
 8004e56:	61da      	str	r2, [r3, #28]
 8004e58:	4b50      	ldr	r3, [pc, #320]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	2380      	movs	r3, #128	@ 0x80
 8004e5e:	055b      	lsls	r3, r3, #21
 8004e60:	4013      	ands	r3, r2
 8004e62:	60bb      	str	r3, [r7, #8]
 8004e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e66:	183b      	adds	r3, r7, r0
 8004e68:	2201      	movs	r2, #1
 8004e6a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6c:	4b4c      	ldr	r3, [pc, #304]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	2380      	movs	r3, #128	@ 0x80
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	4013      	ands	r3, r2
 8004e76:	d11a      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e78:	4b49      	ldr	r3, [pc, #292]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	4b48      	ldr	r3, [pc, #288]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004e7e:	2180      	movs	r1, #128	@ 0x80
 8004e80:	0049      	lsls	r1, r1, #1
 8004e82:	430a      	orrs	r2, r1
 8004e84:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e86:	f7fe fb47 	bl	8003518 <HAL_GetTick>
 8004e8a:	0003      	movs	r3, r0
 8004e8c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e90:	f7fe fb42 	bl	8003518 <HAL_GetTick>
 8004e94:	0002      	movs	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b64      	cmp	r3, #100	@ 0x64
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e077      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea2:	4b3f      	ldr	r3, [pc, #252]	@ (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	2380      	movs	r3, #128	@ 0x80
 8004ea8:	005b      	lsls	r3, r3, #1
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d0f0      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eae:	4b3b      	ldr	r3, [pc, #236]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004eb0:	6a1a      	ldr	r2, [r3, #32]
 8004eb2:	23c0      	movs	r3, #192	@ 0xc0
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d034      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	23c0      	movs	r3, #192	@ 0xc0
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4013      	ands	r3, r2
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d02c      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ed0:	4b32      	ldr	r3, [pc, #200]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	4a33      	ldr	r2, [pc, #204]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eda:	4b30      	ldr	r3, [pc, #192]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004edc:	6a1a      	ldr	r2, [r3, #32]
 8004ede:	4b2f      	ldr	r3, [pc, #188]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ee0:	2180      	movs	r1, #128	@ 0x80
 8004ee2:	0249      	lsls	r1, r1, #9
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004eea:	6a1a      	ldr	r2, [r3, #32]
 8004eec:	4b2b      	ldr	r3, [pc, #172]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004eee:	492e      	ldr	r1, [pc, #184]	@ (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004ef0:	400a      	ands	r2, r1
 8004ef2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ef4:	4b29      	ldr	r3, [pc, #164]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	4013      	ands	r3, r2
 8004f00:	d013      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f02:	f7fe fb09 	bl	8003518 <HAL_GetTick>
 8004f06:	0003      	movs	r3, r0
 8004f08:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f0a:	e009      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f0c:	f7fe fb04 	bl	8003518 <HAL_GetTick>
 8004f10:	0002      	movs	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	4a25      	ldr	r2, [pc, #148]	@ (8004fac <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e038      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f20:	4b1e      	ldr	r3, [pc, #120]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	2202      	movs	r2, #2
 8004f26:	4013      	ands	r3, r2
 8004f28:	d0f0      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	0019      	movs	r1, r3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	4b18      	ldr	r3, [pc, #96]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f3e:	2317      	movs	r3, #23
 8004f40:	18fb      	adds	r3, r7, r3
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d105      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f48:	4b14      	ldr	r3, [pc, #80]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004f4a:	69da      	ldr	r2, [r3, #28]
 8004f4c:	4b13      	ldr	r3, [pc, #76]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004f4e:	4918      	ldr	r1, [pc, #96]	@ (8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004f50:	400a      	ands	r2, r1
 8004f52:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	d009      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f62:	2203      	movs	r2, #3
 8004f64:	4393      	bics	r3, r2
 8004f66:	0019      	movs	r1, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2220      	movs	r2, #32
 8004f78:	4013      	ands	r3, r2
 8004f7a:	d009      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f7c:	4b07      	ldr	r3, [pc, #28]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f80:	2210      	movs	r2, #16
 8004f82:	4393      	bics	r3, r2
 8004f84:	0019      	movs	r1, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	4b04      	ldr	r3, [pc, #16]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	0018      	movs	r0, r3
 8004f94:	46bd      	mov	sp, r7
 8004f96:	b006      	add	sp, #24
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	46c0      	nop			@ (mov r8, r8)
 8004f9c:	40021000 	.word	0x40021000
 8004fa0:	40007000 	.word	0x40007000
 8004fa4:	fffffcff 	.word	0xfffffcff
 8004fa8:	fffeffff 	.word	0xfffeffff
 8004fac:	00001388 	.word	0x00001388
 8004fb0:	efffffff 	.word	0xefffffff

08004fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e044      	b.n	8005050 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d107      	bne.n	8004fde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2278      	movs	r2, #120	@ 0x78
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	0018      	movs	r0, r3
 8004fda:	f7fe f8db 	bl	8003194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2224      	movs	r2, #36	@ 0x24
 8004fe2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2101      	movs	r1, #1
 8004ff0:	438a      	bics	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	0018      	movs	r0, r3
 8005000:	f000 fd46 	bl	8005a90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	0018      	movs	r0, r3
 8005008:	f000 fc02 	bl	8005810 <UART_SetConfig>
 800500c:	0003      	movs	r3, r0
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e01c      	b.n	8005050 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	490d      	ldr	r1, [pc, #52]	@ (8005058 <HAL_UART_Init+0xa4>)
 8005022:	400a      	ands	r2, r1
 8005024:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2108      	movs	r1, #8
 8005032:	438a      	bics	r2, r1
 8005034:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2101      	movs	r1, #1
 8005042:	430a      	orrs	r2, r1
 8005044:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	0018      	movs	r0, r3
 800504a:	f000 fdd5 	bl	8005bf8 <UART_CheckIdleState>
 800504e:	0003      	movs	r3, r0
}
 8005050:	0018      	movs	r0, r3
 8005052:	46bd      	mov	sp, r7
 8005054:	b002      	add	sp, #8
 8005056:	bd80      	pop	{r7, pc}
 8005058:	fffff7ff 	.word	0xfffff7ff

0800505c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	@ 0x28
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	1dbb      	adds	r3, r7, #6
 800506a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005070:	2b20      	cmp	r3, #32
 8005072:	d000      	beq.n	8005076 <HAL_UART_Transmit+0x1a>
 8005074:	e08c      	b.n	8005190 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_UART_Transmit+0x28>
 800507c:	1dbb      	adds	r3, r7, #6
 800507e:	881b      	ldrh	r3, [r3, #0]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e084      	b.n	8005192 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	2380      	movs	r3, #128	@ 0x80
 800508e:	015b      	lsls	r3, r3, #5
 8005090:	429a      	cmp	r2, r3
 8005092:	d109      	bne.n	80050a8 <HAL_UART_Transmit+0x4c>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d105      	bne.n	80050a8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2201      	movs	r2, #1
 80050a0:	4013      	ands	r3, r2
 80050a2:	d001      	beq.n	80050a8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e074      	b.n	8005192 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2284      	movs	r2, #132	@ 0x84
 80050ac:	2100      	movs	r1, #0
 80050ae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2221      	movs	r2, #33	@ 0x21
 80050b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050b6:	f7fe fa2f 	bl	8003518 <HAL_GetTick>
 80050ba:	0003      	movs	r3, r0
 80050bc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	1dba      	adds	r2, r7, #6
 80050c2:	2150      	movs	r1, #80	@ 0x50
 80050c4:	8812      	ldrh	r2, [r2, #0]
 80050c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	1dba      	adds	r2, r7, #6
 80050cc:	2152      	movs	r1, #82	@ 0x52
 80050ce:	8812      	ldrh	r2, [r2, #0]
 80050d0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	2380      	movs	r3, #128	@ 0x80
 80050d8:	015b      	lsls	r3, r3, #5
 80050da:	429a      	cmp	r2, r3
 80050dc:	d108      	bne.n	80050f0 <HAL_UART_Transmit+0x94>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d104      	bne.n	80050f0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	61bb      	str	r3, [r7, #24]
 80050ee:	e003      	b.n	80050f8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050f8:	e02f      	b.n	800515a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	0013      	movs	r3, r2
 8005104:	2200      	movs	r2, #0
 8005106:	2180      	movs	r1, #128	@ 0x80
 8005108:	f000 fe1e 	bl	8005d48 <UART_WaitOnFlagUntilTimeout>
 800510c:	1e03      	subs	r3, r0, #0
 800510e:	d004      	beq.n	800511a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2220      	movs	r2, #32
 8005114:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e03b      	b.n	8005192 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10b      	bne.n	8005138 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	881a      	ldrh	r2, [r3, #0]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	05d2      	lsls	r2, r2, #23
 800512a:	0dd2      	lsrs	r2, r2, #23
 800512c:	b292      	uxth	r2, r2
 800512e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	3302      	adds	r3, #2
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	e007      	b.n	8005148 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	781a      	ldrb	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	3301      	adds	r3, #1
 8005146:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2252      	movs	r2, #82	@ 0x52
 800514c:	5a9b      	ldrh	r3, [r3, r2]
 800514e:	b29b      	uxth	r3, r3
 8005150:	3b01      	subs	r3, #1
 8005152:	b299      	uxth	r1, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2252      	movs	r2, #82	@ 0x52
 8005158:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2252      	movs	r2, #82	@ 0x52
 800515e:	5a9b      	ldrh	r3, [r3, r2]
 8005160:	b29b      	uxth	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d1c9      	bne.n	80050fa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	0013      	movs	r3, r2
 8005170:	2200      	movs	r2, #0
 8005172:	2140      	movs	r1, #64	@ 0x40
 8005174:	f000 fde8 	bl	8005d48 <UART_WaitOnFlagUntilTimeout>
 8005178:	1e03      	subs	r3, r0, #0
 800517a:	d004      	beq.n	8005186 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2220      	movs	r2, #32
 8005180:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e005      	b.n	8005192 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	e000      	b.n	8005192 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005190:	2302      	movs	r3, #2
  }
}
 8005192:	0018      	movs	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	b008      	add	sp, #32
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b088      	sub	sp, #32
 800519e:	af00      	add	r7, sp, #0
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	60b9      	str	r1, [r7, #8]
 80051a4:	1dbb      	adds	r3, r7, #6
 80051a6:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2280      	movs	r2, #128	@ 0x80
 80051ac:	589b      	ldr	r3, [r3, r2]
 80051ae:	2b20      	cmp	r3, #32
 80051b0:	d145      	bne.n	800523e <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_UART_Receive_IT+0x26>
 80051b8:	1dbb      	adds	r3, r7, #6
 80051ba:	881b      	ldrh	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e03d      	b.n	8005240 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	2380      	movs	r3, #128	@ 0x80
 80051ca:	015b      	lsls	r3, r3, #5
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d109      	bne.n	80051e4 <HAL_UART_Receive_IT+0x4a>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d105      	bne.n	80051e4 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2201      	movs	r2, #1
 80051dc:	4013      	ands	r3, r2
 80051de:	d001      	beq.n	80051e4 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e02d      	b.n	8005240 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	2380      	movs	r3, #128	@ 0x80
 80051f2:	041b      	lsls	r3, r3, #16
 80051f4:	4013      	ands	r3, r2
 80051f6:	d019      	beq.n	800522c <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051f8:	f3ef 8310 	mrs	r3, PRIMASK
 80051fc:	613b      	str	r3, [r7, #16]
  return(result);
 80051fe:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005200:	61fb      	str	r3, [r7, #28]
 8005202:	2301      	movs	r3, #1
 8005204:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f383 8810 	msr	PRIMASK, r3
}
 800520c:	46c0      	nop			@ (mov r8, r8)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2180      	movs	r1, #128	@ 0x80
 800521a:	04c9      	lsls	r1, r1, #19
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f383 8810 	msr	PRIMASK, r3
}
 800522a:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800522c:	1dbb      	adds	r3, r7, #6
 800522e:	881a      	ldrh	r2, [r3, #0]
 8005230:	68b9      	ldr	r1, [r7, #8]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	0018      	movs	r0, r3
 8005236:	f000 fdf7 	bl	8005e28 <UART_Start_Receive_IT>
 800523a:	0003      	movs	r3, r0
 800523c:	e000      	b.n	8005240 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800523e:	2302      	movs	r3, #2
  }
}
 8005240:	0018      	movs	r0, r3
 8005242:	46bd      	mov	sp, r7
 8005244:	b008      	add	sp, #32
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005248:	b590      	push	{r4, r7, lr}
 800524a:	b0ab      	sub	sp, #172	@ 0xac
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	22a4      	movs	r2, #164	@ 0xa4
 8005258:	18b9      	adds	r1, r7, r2
 800525a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	20a0      	movs	r0, #160	@ 0xa0
 8005264:	1839      	adds	r1, r7, r0
 8005266:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	219c      	movs	r1, #156	@ 0x9c
 8005270:	1879      	adds	r1, r7, r1
 8005272:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005274:	0011      	movs	r1, r2
 8005276:	18bb      	adds	r3, r7, r2
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a99      	ldr	r2, [pc, #612]	@ (80054e0 <HAL_UART_IRQHandler+0x298>)
 800527c:	4013      	ands	r3, r2
 800527e:	2298      	movs	r2, #152	@ 0x98
 8005280:	18bc      	adds	r4, r7, r2
 8005282:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005284:	18bb      	adds	r3, r7, r2
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d114      	bne.n	80052b6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800528c:	187b      	adds	r3, r7, r1
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2220      	movs	r2, #32
 8005292:	4013      	ands	r3, r2
 8005294:	d00f      	beq.n	80052b6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005296:	183b      	adds	r3, r7, r0
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2220      	movs	r2, #32
 800529c:	4013      	ands	r3, r2
 800529e:	d00a      	beq.n	80052b6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d100      	bne.n	80052aa <HAL_UART_IRQHandler+0x62>
 80052a8:	e286      	b.n	80057b8 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	0010      	movs	r0, r2
 80052b2:	4798      	blx	r3
      }
      return;
 80052b4:	e280      	b.n	80057b8 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80052b6:	2398      	movs	r3, #152	@ 0x98
 80052b8:	18fb      	adds	r3, r7, r3
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d100      	bne.n	80052c2 <HAL_UART_IRQHandler+0x7a>
 80052c0:	e114      	b.n	80054ec <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80052c2:	239c      	movs	r3, #156	@ 0x9c
 80052c4:	18fb      	adds	r3, r7, r3
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2201      	movs	r2, #1
 80052ca:	4013      	ands	r3, r2
 80052cc:	d106      	bne.n	80052dc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80052ce:	23a0      	movs	r3, #160	@ 0xa0
 80052d0:	18fb      	adds	r3, r7, r3
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a83      	ldr	r2, [pc, #524]	@ (80054e4 <HAL_UART_IRQHandler+0x29c>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	d100      	bne.n	80052dc <HAL_UART_IRQHandler+0x94>
 80052da:	e107      	b.n	80054ec <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052dc:	23a4      	movs	r3, #164	@ 0xa4
 80052de:	18fb      	adds	r3, r7, r3
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2201      	movs	r2, #1
 80052e4:	4013      	ands	r3, r2
 80052e6:	d012      	beq.n	800530e <HAL_UART_IRQHandler+0xc6>
 80052e8:	23a0      	movs	r3, #160	@ 0xa0
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	2380      	movs	r3, #128	@ 0x80
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	4013      	ands	r3, r2
 80052f4:	d00b      	beq.n	800530e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2201      	movs	r2, #1
 80052fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2284      	movs	r2, #132	@ 0x84
 8005302:	589b      	ldr	r3, [r3, r2]
 8005304:	2201      	movs	r2, #1
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2184      	movs	r1, #132	@ 0x84
 800530c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800530e:	23a4      	movs	r3, #164	@ 0xa4
 8005310:	18fb      	adds	r3, r7, r3
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2202      	movs	r2, #2
 8005316:	4013      	ands	r3, r2
 8005318:	d011      	beq.n	800533e <HAL_UART_IRQHandler+0xf6>
 800531a:	239c      	movs	r3, #156	@ 0x9c
 800531c:	18fb      	adds	r3, r7, r3
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2201      	movs	r2, #1
 8005322:	4013      	ands	r3, r2
 8005324:	d00b      	beq.n	800533e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2202      	movs	r2, #2
 800532c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2284      	movs	r2, #132	@ 0x84
 8005332:	589b      	ldr	r3, [r3, r2]
 8005334:	2204      	movs	r2, #4
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2184      	movs	r1, #132	@ 0x84
 800533c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800533e:	23a4      	movs	r3, #164	@ 0xa4
 8005340:	18fb      	adds	r3, r7, r3
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2204      	movs	r2, #4
 8005346:	4013      	ands	r3, r2
 8005348:	d011      	beq.n	800536e <HAL_UART_IRQHandler+0x126>
 800534a:	239c      	movs	r3, #156	@ 0x9c
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2201      	movs	r2, #1
 8005352:	4013      	ands	r3, r2
 8005354:	d00b      	beq.n	800536e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2204      	movs	r2, #4
 800535c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2284      	movs	r2, #132	@ 0x84
 8005362:	589b      	ldr	r3, [r3, r2]
 8005364:	2202      	movs	r2, #2
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2184      	movs	r1, #132	@ 0x84
 800536c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800536e:	23a4      	movs	r3, #164	@ 0xa4
 8005370:	18fb      	adds	r3, r7, r3
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2208      	movs	r2, #8
 8005376:	4013      	ands	r3, r2
 8005378:	d017      	beq.n	80053aa <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800537a:	23a0      	movs	r3, #160	@ 0xa0
 800537c:	18fb      	adds	r3, r7, r3
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2220      	movs	r2, #32
 8005382:	4013      	ands	r3, r2
 8005384:	d105      	bne.n	8005392 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005386:	239c      	movs	r3, #156	@ 0x9c
 8005388:	18fb      	adds	r3, r7, r3
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2201      	movs	r2, #1
 800538e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005390:	d00b      	beq.n	80053aa <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2208      	movs	r2, #8
 8005398:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2284      	movs	r2, #132	@ 0x84
 800539e:	589b      	ldr	r3, [r3, r2]
 80053a0:	2208      	movs	r2, #8
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2184      	movs	r1, #132	@ 0x84
 80053a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053aa:	23a4      	movs	r3, #164	@ 0xa4
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	2380      	movs	r3, #128	@ 0x80
 80053b2:	011b      	lsls	r3, r3, #4
 80053b4:	4013      	ands	r3, r2
 80053b6:	d013      	beq.n	80053e0 <HAL_UART_IRQHandler+0x198>
 80053b8:	23a0      	movs	r3, #160	@ 0xa0
 80053ba:	18fb      	adds	r3, r7, r3
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	2380      	movs	r3, #128	@ 0x80
 80053c0:	04db      	lsls	r3, r3, #19
 80053c2:	4013      	ands	r3, r2
 80053c4:	d00c      	beq.n	80053e0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2280      	movs	r2, #128	@ 0x80
 80053cc:	0112      	lsls	r2, r2, #4
 80053ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2284      	movs	r2, #132	@ 0x84
 80053d4:	589b      	ldr	r3, [r3, r2]
 80053d6:	2220      	movs	r2, #32
 80053d8:	431a      	orrs	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2184      	movs	r1, #132	@ 0x84
 80053de:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2284      	movs	r2, #132	@ 0x84
 80053e4:	589b      	ldr	r3, [r3, r2]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d100      	bne.n	80053ec <HAL_UART_IRQHandler+0x1a4>
 80053ea:	e1e7      	b.n	80057bc <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80053ec:	23a4      	movs	r3, #164	@ 0xa4
 80053ee:	18fb      	adds	r3, r7, r3
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2220      	movs	r2, #32
 80053f4:	4013      	ands	r3, r2
 80053f6:	d00e      	beq.n	8005416 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80053f8:	23a0      	movs	r3, #160	@ 0xa0
 80053fa:	18fb      	adds	r3, r7, r3
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2220      	movs	r2, #32
 8005400:	4013      	ands	r3, r2
 8005402:	d008      	beq.n	8005416 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005408:	2b00      	cmp	r3, #0
 800540a:	d004      	beq.n	8005416 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	0010      	movs	r0, r2
 8005414:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2284      	movs	r2, #132	@ 0x84
 800541a:	589b      	ldr	r3, [r3, r2]
 800541c:	2194      	movs	r1, #148	@ 0x94
 800541e:	187a      	adds	r2, r7, r1
 8005420:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	2240      	movs	r2, #64	@ 0x40
 800542a:	4013      	ands	r3, r2
 800542c:	2b40      	cmp	r3, #64	@ 0x40
 800542e:	d004      	beq.n	800543a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005430:	187b      	adds	r3, r7, r1
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2228      	movs	r2, #40	@ 0x28
 8005436:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005438:	d047      	beq.n	80054ca <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	0018      	movs	r0, r3
 800543e:	f000 fda9 	bl	8005f94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2240      	movs	r2, #64	@ 0x40
 800544a:	4013      	ands	r3, r2
 800544c:	2b40      	cmp	r3, #64	@ 0x40
 800544e:	d137      	bne.n	80054c0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005450:	f3ef 8310 	mrs	r3, PRIMASK
 8005454:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8005456:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005458:	2090      	movs	r0, #144	@ 0x90
 800545a:	183a      	adds	r2, r7, r0
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	2301      	movs	r3, #1
 8005460:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005462:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005464:	f383 8810 	msr	PRIMASK, r3
}
 8005468:	46c0      	nop			@ (mov r8, r8)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2140      	movs	r1, #64	@ 0x40
 8005476:	438a      	bics	r2, r1
 8005478:	609a      	str	r2, [r3, #8]
 800547a:	183b      	adds	r3, r7, r0
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005480:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005482:	f383 8810 	msr	PRIMASK, r3
}
 8005486:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800548c:	2b00      	cmp	r3, #0
 800548e:	d012      	beq.n	80054b6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005494:	4a14      	ldr	r2, [pc, #80]	@ (80054e8 <HAL_UART_IRQHandler+0x2a0>)
 8005496:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800549c:	0018      	movs	r0, r3
 800549e:	f7fe f97f 	bl	80037a0 <HAL_DMA_Abort_IT>
 80054a2:	1e03      	subs	r3, r0, #0
 80054a4:	d01a      	beq.n	80054dc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054b0:	0018      	movs	r0, r3
 80054b2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b4:	e012      	b.n	80054dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	0018      	movs	r0, r3
 80054ba:	f000 f995 	bl	80057e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054be:	e00d      	b.n	80054dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	0018      	movs	r0, r3
 80054c4:	f000 f990 	bl	80057e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c8:	e008      	b.n	80054dc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	0018      	movs	r0, r3
 80054ce:	f000 f98b 	bl	80057e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2284      	movs	r2, #132	@ 0x84
 80054d6:	2100      	movs	r1, #0
 80054d8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80054da:	e16f      	b.n	80057bc <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054dc:	46c0      	nop			@ (mov r8, r8)
    return;
 80054de:	e16d      	b.n	80057bc <HAL_UART_IRQHandler+0x574>
 80054e0:	0000080f 	.word	0x0000080f
 80054e4:	04000120 	.word	0x04000120
 80054e8:	0800605d 	.word	0x0800605d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d000      	beq.n	80054f6 <HAL_UART_IRQHandler+0x2ae>
 80054f4:	e139      	b.n	800576a <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054f6:	23a4      	movs	r3, #164	@ 0xa4
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2210      	movs	r2, #16
 80054fe:	4013      	ands	r3, r2
 8005500:	d100      	bne.n	8005504 <HAL_UART_IRQHandler+0x2bc>
 8005502:	e132      	b.n	800576a <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005504:	23a0      	movs	r3, #160	@ 0xa0
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2210      	movs	r2, #16
 800550c:	4013      	ands	r3, r2
 800550e:	d100      	bne.n	8005512 <HAL_UART_IRQHandler+0x2ca>
 8005510:	e12b      	b.n	800576a <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2210      	movs	r2, #16
 8005518:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	2240      	movs	r2, #64	@ 0x40
 8005522:	4013      	ands	r3, r2
 8005524:	2b40      	cmp	r3, #64	@ 0x40
 8005526:	d000      	beq.n	800552a <HAL_UART_IRQHandler+0x2e2>
 8005528:	e09f      	b.n	800566a <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	217e      	movs	r1, #126	@ 0x7e
 8005534:	187b      	adds	r3, r7, r1
 8005536:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005538:	187b      	adds	r3, r7, r1
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d100      	bne.n	8005542 <HAL_UART_IRQHandler+0x2fa>
 8005540:	e13e      	b.n	80057c0 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2258      	movs	r2, #88	@ 0x58
 8005546:	5a9b      	ldrh	r3, [r3, r2]
 8005548:	187a      	adds	r2, r7, r1
 800554a:	8812      	ldrh	r2, [r2, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d300      	bcc.n	8005552 <HAL_UART_IRQHandler+0x30a>
 8005550:	e136      	b.n	80057c0 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	187a      	adds	r2, r7, r1
 8005556:	215a      	movs	r1, #90	@ 0x5a
 8005558:	8812      	ldrh	r2, [r2, #0]
 800555a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	2b20      	cmp	r3, #32
 8005564:	d06f      	beq.n	8005646 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005566:	f3ef 8310 	mrs	r3, PRIMASK
 800556a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800556c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800556e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005570:	2301      	movs	r3, #1
 8005572:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005576:	f383 8810 	msr	PRIMASK, r3
}
 800557a:	46c0      	nop			@ (mov r8, r8)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4992      	ldr	r1, [pc, #584]	@ (80057d0 <HAL_UART_IRQHandler+0x588>)
 8005588:	400a      	ands	r2, r1
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800558e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005592:	f383 8810 	msr	PRIMASK, r3
}
 8005596:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005598:	f3ef 8310 	mrs	r3, PRIMASK
 800559c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800559e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055a0:	677b      	str	r3, [r7, #116]	@ 0x74
 80055a2:	2301      	movs	r3, #1
 80055a4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055a8:	f383 8810 	msr	PRIMASK, r3
}
 80055ac:	46c0      	nop			@ (mov r8, r8)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2101      	movs	r1, #1
 80055ba:	438a      	bics	r2, r1
 80055bc:	609a      	str	r2, [r3, #8]
 80055be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055c0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055c4:	f383 8810 	msr	PRIMASK, r3
}
 80055c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ca:	f3ef 8310 	mrs	r3, PRIMASK
 80055ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80055d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80055d4:	2301      	movs	r3, #1
 80055d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055da:	f383 8810 	msr	PRIMASK, r3
}
 80055de:	46c0      	nop			@ (mov r8, r8)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2140      	movs	r1, #64	@ 0x40
 80055ec:	438a      	bics	r2, r1
 80055ee:	609a      	str	r2, [r3, #8]
 80055f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055f2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055f6:	f383 8810 	msr	PRIMASK, r3
}
 80055fa:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2280      	movs	r2, #128	@ 0x80
 8005600:	2120      	movs	r1, #32
 8005602:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800560a:	f3ef 8310 	mrs	r3, PRIMASK
 800560e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005610:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005612:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005614:	2301      	movs	r3, #1
 8005616:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005618:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800561a:	f383 8810 	msr	PRIMASK, r3
}
 800561e:	46c0      	nop			@ (mov r8, r8)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2110      	movs	r1, #16
 800562c:	438a      	bics	r2, r1
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005632:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005634:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005636:	f383 8810 	msr	PRIMASK, r3
}
 800563a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005640:	0018      	movs	r0, r3
 8005642:	f7fe f875 	bl	8003730 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2202      	movs	r2, #2
 800564a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2258      	movs	r2, #88	@ 0x58
 8005650:	5a9a      	ldrh	r2, [r3, r2]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	215a      	movs	r1, #90	@ 0x5a
 8005656:	5a5b      	ldrh	r3, [r3, r1]
 8005658:	b29b      	uxth	r3, r3
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	b29a      	uxth	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	0011      	movs	r1, r2
 8005662:	0018      	movs	r0, r3
 8005664:	f000 f8c8 	bl	80057f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005668:	e0aa      	b.n	80057c0 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2258      	movs	r2, #88	@ 0x58
 800566e:	5a99      	ldrh	r1, [r3, r2]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	225a      	movs	r2, #90	@ 0x5a
 8005674:	5a9b      	ldrh	r3, [r3, r2]
 8005676:	b29a      	uxth	r2, r3
 8005678:	208e      	movs	r0, #142	@ 0x8e
 800567a:	183b      	adds	r3, r7, r0
 800567c:	1a8a      	subs	r2, r1, r2
 800567e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	225a      	movs	r2, #90	@ 0x5a
 8005684:	5a9b      	ldrh	r3, [r3, r2]
 8005686:	b29b      	uxth	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d100      	bne.n	800568e <HAL_UART_IRQHandler+0x446>
 800568c:	e09a      	b.n	80057c4 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 800568e:	183b      	adds	r3, r7, r0
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d100      	bne.n	8005698 <HAL_UART_IRQHandler+0x450>
 8005696:	e095      	b.n	80057c4 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005698:	f3ef 8310 	mrs	r3, PRIMASK
 800569c:	60fb      	str	r3, [r7, #12]
  return(result);
 800569e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a0:	2488      	movs	r4, #136	@ 0x88
 80056a2:	193a      	adds	r2, r7, r4
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	2301      	movs	r3, #1
 80056a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f383 8810 	msr	PRIMASK, r3
}
 80056b0:	46c0      	nop			@ (mov r8, r8)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4945      	ldr	r1, [pc, #276]	@ (80057d4 <HAL_UART_IRQHandler+0x58c>)
 80056be:	400a      	ands	r2, r1
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	193b      	adds	r3, r7, r4
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f383 8810 	msr	PRIMASK, r3
}
 80056ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056d0:	f3ef 8310 	mrs	r3, PRIMASK
 80056d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80056d6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d8:	2484      	movs	r4, #132	@ 0x84
 80056da:	193a      	adds	r2, r7, r4
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	2301      	movs	r3, #1
 80056e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	f383 8810 	msr	PRIMASK, r3
}
 80056e8:	46c0      	nop			@ (mov r8, r8)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2101      	movs	r1, #1
 80056f6:	438a      	bics	r2, r1
 80056f8:	609a      	str	r2, [r3, #8]
 80056fa:	193b      	adds	r3, r7, r4
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	f383 8810 	msr	PRIMASK, r3
}
 8005706:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2280      	movs	r2, #128	@ 0x80
 800570c:	2120      	movs	r1, #32
 800570e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800571c:	f3ef 8310 	mrs	r3, PRIMASK
 8005720:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005724:	2480      	movs	r4, #128	@ 0x80
 8005726:	193a      	adds	r2, r7, r4
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	2301      	movs	r3, #1
 800572c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005730:	f383 8810 	msr	PRIMASK, r3
}
 8005734:	46c0      	nop			@ (mov r8, r8)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2110      	movs	r1, #16
 8005742:	438a      	bics	r2, r1
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	193b      	adds	r3, r7, r4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800574c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574e:	f383 8810 	msr	PRIMASK, r3
}
 8005752:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2202      	movs	r2, #2
 8005758:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800575a:	183b      	adds	r3, r7, r0
 800575c:	881a      	ldrh	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	0011      	movs	r1, r2
 8005762:	0018      	movs	r0, r3
 8005764:	f000 f848 	bl	80057f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005768:	e02c      	b.n	80057c4 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800576a:	23a4      	movs	r3, #164	@ 0xa4
 800576c:	18fb      	adds	r3, r7, r3
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2280      	movs	r2, #128	@ 0x80
 8005772:	4013      	ands	r3, r2
 8005774:	d00f      	beq.n	8005796 <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005776:	23a0      	movs	r3, #160	@ 0xa0
 8005778:	18fb      	adds	r3, r7, r3
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2280      	movs	r2, #128	@ 0x80
 800577e:	4013      	ands	r3, r2
 8005780:	d009      	beq.n	8005796 <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01e      	beq.n	80057c8 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	0010      	movs	r0, r2
 8005792:	4798      	blx	r3
    }
    return;
 8005794:	e018      	b.n	80057c8 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005796:	23a4      	movs	r3, #164	@ 0xa4
 8005798:	18fb      	adds	r3, r7, r3
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2240      	movs	r2, #64	@ 0x40
 800579e:	4013      	ands	r3, r2
 80057a0:	d013      	beq.n	80057ca <HAL_UART_IRQHandler+0x582>
 80057a2:	23a0      	movs	r3, #160	@ 0xa0
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2240      	movs	r2, #64	@ 0x40
 80057aa:	4013      	ands	r3, r2
 80057ac:	d00d      	beq.n	80057ca <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	0018      	movs	r0, r3
 80057b2:	f000 fc6a 	bl	800608a <UART_EndTransmit_IT>
    return;
 80057b6:	e008      	b.n	80057ca <HAL_UART_IRQHandler+0x582>
      return;
 80057b8:	46c0      	nop			@ (mov r8, r8)
 80057ba:	e006      	b.n	80057ca <HAL_UART_IRQHandler+0x582>
    return;
 80057bc:	46c0      	nop			@ (mov r8, r8)
 80057be:	e004      	b.n	80057ca <HAL_UART_IRQHandler+0x582>
      return;
 80057c0:	46c0      	nop			@ (mov r8, r8)
 80057c2:	e002      	b.n	80057ca <HAL_UART_IRQHandler+0x582>
      return;
 80057c4:	46c0      	nop			@ (mov r8, r8)
 80057c6:	e000      	b.n	80057ca <HAL_UART_IRQHandler+0x582>
    return;
 80057c8:	46c0      	nop			@ (mov r8, r8)
  }

}
 80057ca:	46bd      	mov	sp, r7
 80057cc:	b02b      	add	sp, #172	@ 0xac
 80057ce:	bd90      	pop	{r4, r7, pc}
 80057d0:	fffffeff 	.word	0xfffffeff
 80057d4:	fffffedf 	.word	0xfffffedf

080057d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80057e0:	46c0      	nop			@ (mov r8, r8)
 80057e2:	46bd      	mov	sp, r7
 80057e4:	b002      	add	sp, #8
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80057f0:	46c0      	nop			@ (mov r8, r8)
 80057f2:	46bd      	mov	sp, r7
 80057f4:	b002      	add	sp, #8
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	000a      	movs	r2, r1
 8005802:	1cbb      	adds	r3, r7, #2
 8005804:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005806:	46c0      	nop			@ (mov r8, r8)
 8005808:	46bd      	mov	sp, r7
 800580a:	b002      	add	sp, #8
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b088      	sub	sp, #32
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005818:	231e      	movs	r3, #30
 800581a:	18fb      	adds	r3, r7, r3
 800581c:	2200      	movs	r2, #0
 800581e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689a      	ldr	r2, [r3, #8]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	431a      	orrs	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	4313      	orrs	r3, r2
 8005836:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a8d      	ldr	r2, [pc, #564]	@ (8005a74 <UART_SetConfig+0x264>)
 8005840:	4013      	ands	r3, r2
 8005842:	0019      	movs	r1, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	430a      	orrs	r2, r1
 800584c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	4a88      	ldr	r2, [pc, #544]	@ (8005a78 <UART_SetConfig+0x268>)
 8005856:	4013      	ands	r3, r2
 8005858:	0019      	movs	r1, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	4a7f      	ldr	r2, [pc, #508]	@ (8005a7c <UART_SetConfig+0x26c>)
 800587e:	4013      	ands	r3, r2
 8005880:	0019      	movs	r1, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	430a      	orrs	r2, r1
 800588a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a7b      	ldr	r2, [pc, #492]	@ (8005a80 <UART_SetConfig+0x270>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d127      	bne.n	80058e6 <UART_SetConfig+0xd6>
 8005896:	4b7b      	ldr	r3, [pc, #492]	@ (8005a84 <UART_SetConfig+0x274>)
 8005898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800589a:	2203      	movs	r2, #3
 800589c:	4013      	ands	r3, r2
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d00d      	beq.n	80058be <UART_SetConfig+0xae>
 80058a2:	d81b      	bhi.n	80058dc <UART_SetConfig+0xcc>
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d014      	beq.n	80058d2 <UART_SetConfig+0xc2>
 80058a8:	d818      	bhi.n	80058dc <UART_SetConfig+0xcc>
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <UART_SetConfig+0xa4>
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d00a      	beq.n	80058c8 <UART_SetConfig+0xb8>
 80058b2:	e013      	b.n	80058dc <UART_SetConfig+0xcc>
 80058b4:	231f      	movs	r3, #31
 80058b6:	18fb      	adds	r3, r7, r3
 80058b8:	2200      	movs	r2, #0
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	e021      	b.n	8005902 <UART_SetConfig+0xf2>
 80058be:	231f      	movs	r3, #31
 80058c0:	18fb      	adds	r3, r7, r3
 80058c2:	2202      	movs	r2, #2
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	e01c      	b.n	8005902 <UART_SetConfig+0xf2>
 80058c8:	231f      	movs	r3, #31
 80058ca:	18fb      	adds	r3, r7, r3
 80058cc:	2204      	movs	r2, #4
 80058ce:	701a      	strb	r2, [r3, #0]
 80058d0:	e017      	b.n	8005902 <UART_SetConfig+0xf2>
 80058d2:	231f      	movs	r3, #31
 80058d4:	18fb      	adds	r3, r7, r3
 80058d6:	2208      	movs	r2, #8
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	e012      	b.n	8005902 <UART_SetConfig+0xf2>
 80058dc:	231f      	movs	r3, #31
 80058de:	18fb      	adds	r3, r7, r3
 80058e0:	2210      	movs	r2, #16
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	e00d      	b.n	8005902 <UART_SetConfig+0xf2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a67      	ldr	r2, [pc, #412]	@ (8005a88 <UART_SetConfig+0x278>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d104      	bne.n	80058fa <UART_SetConfig+0xea>
 80058f0:	231f      	movs	r3, #31
 80058f2:	18fb      	adds	r3, r7, r3
 80058f4:	2200      	movs	r2, #0
 80058f6:	701a      	strb	r2, [r3, #0]
 80058f8:	e003      	b.n	8005902 <UART_SetConfig+0xf2>
 80058fa:	231f      	movs	r3, #31
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	2210      	movs	r2, #16
 8005900:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	69da      	ldr	r2, [r3, #28]
 8005906:	2380      	movs	r3, #128	@ 0x80
 8005908:	021b      	lsls	r3, r3, #8
 800590a:	429a      	cmp	r2, r3
 800590c:	d15c      	bne.n	80059c8 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 800590e:	231f      	movs	r3, #31
 8005910:	18fb      	adds	r3, r7, r3
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b08      	cmp	r3, #8
 8005916:	d015      	beq.n	8005944 <UART_SetConfig+0x134>
 8005918:	dc18      	bgt.n	800594c <UART_SetConfig+0x13c>
 800591a:	2b04      	cmp	r3, #4
 800591c:	d00d      	beq.n	800593a <UART_SetConfig+0x12a>
 800591e:	dc15      	bgt.n	800594c <UART_SetConfig+0x13c>
 8005920:	2b00      	cmp	r3, #0
 8005922:	d002      	beq.n	800592a <UART_SetConfig+0x11a>
 8005924:	2b02      	cmp	r3, #2
 8005926:	d005      	beq.n	8005934 <UART_SetConfig+0x124>
 8005928:	e010      	b.n	800594c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800592a:	f7ff fa5f 	bl	8004dec <HAL_RCC_GetPCLK1Freq>
 800592e:	0003      	movs	r3, r0
 8005930:	61bb      	str	r3, [r7, #24]
        break;
 8005932:	e012      	b.n	800595a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005934:	4b55      	ldr	r3, [pc, #340]	@ (8005a8c <UART_SetConfig+0x27c>)
 8005936:	61bb      	str	r3, [r7, #24]
        break;
 8005938:	e00f      	b.n	800595a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800593a:	f7ff f9f7 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 800593e:	0003      	movs	r3, r0
 8005940:	61bb      	str	r3, [r7, #24]
        break;
 8005942:	e00a      	b.n	800595a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005944:	2380      	movs	r3, #128	@ 0x80
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	61bb      	str	r3, [r7, #24]
        break;
 800594a:	e006      	b.n	800595a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005950:	231e      	movs	r3, #30
 8005952:	18fb      	adds	r3, r7, r3
 8005954:	2201      	movs	r2, #1
 8005956:	701a      	strb	r2, [r3, #0]
        break;
 8005958:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d100      	bne.n	8005962 <UART_SetConfig+0x152>
 8005960:	e07a      	b.n	8005a58 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	005a      	lsls	r2, r3, #1
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	085b      	lsrs	r3, r3, #1
 800596c:	18d2      	adds	r2, r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	0019      	movs	r1, r3
 8005974:	0010      	movs	r0, r2
 8005976:	f7fa fbe3 	bl	8000140 <__udivsi3>
 800597a:	0003      	movs	r3, r0
 800597c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	2b0f      	cmp	r3, #15
 8005982:	d91c      	bls.n	80059be <UART_SetConfig+0x1ae>
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	2380      	movs	r3, #128	@ 0x80
 8005988:	025b      	lsls	r3, r3, #9
 800598a:	429a      	cmp	r2, r3
 800598c:	d217      	bcs.n	80059be <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	b29a      	uxth	r2, r3
 8005992:	200e      	movs	r0, #14
 8005994:	183b      	adds	r3, r7, r0
 8005996:	210f      	movs	r1, #15
 8005998:	438a      	bics	r2, r1
 800599a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	085b      	lsrs	r3, r3, #1
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2207      	movs	r2, #7
 80059a4:	4013      	ands	r3, r2
 80059a6:	b299      	uxth	r1, r3
 80059a8:	183b      	adds	r3, r7, r0
 80059aa:	183a      	adds	r2, r7, r0
 80059ac:	8812      	ldrh	r2, [r2, #0]
 80059ae:	430a      	orrs	r2, r1
 80059b0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	183a      	adds	r2, r7, r0
 80059b8:	8812      	ldrh	r2, [r2, #0]
 80059ba:	60da      	str	r2, [r3, #12]
 80059bc:	e04c      	b.n	8005a58 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80059be:	231e      	movs	r3, #30
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	2201      	movs	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	e047      	b.n	8005a58 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059c8:	231f      	movs	r3, #31
 80059ca:	18fb      	adds	r3, r7, r3
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d015      	beq.n	80059fe <UART_SetConfig+0x1ee>
 80059d2:	dc18      	bgt.n	8005a06 <UART_SetConfig+0x1f6>
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d00d      	beq.n	80059f4 <UART_SetConfig+0x1e4>
 80059d8:	dc15      	bgt.n	8005a06 <UART_SetConfig+0x1f6>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <UART_SetConfig+0x1d4>
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d005      	beq.n	80059ee <UART_SetConfig+0x1de>
 80059e2:	e010      	b.n	8005a06 <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059e4:	f7ff fa02 	bl	8004dec <HAL_RCC_GetPCLK1Freq>
 80059e8:	0003      	movs	r3, r0
 80059ea:	61bb      	str	r3, [r7, #24]
        break;
 80059ec:	e012      	b.n	8005a14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059ee:	4b27      	ldr	r3, [pc, #156]	@ (8005a8c <UART_SetConfig+0x27c>)
 80059f0:	61bb      	str	r3, [r7, #24]
        break;
 80059f2:	e00f      	b.n	8005a14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059f4:	f7ff f99a 	bl	8004d2c <HAL_RCC_GetSysClockFreq>
 80059f8:	0003      	movs	r3, r0
 80059fa:	61bb      	str	r3, [r7, #24]
        break;
 80059fc:	e00a      	b.n	8005a14 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059fe:	2380      	movs	r3, #128	@ 0x80
 8005a00:	021b      	lsls	r3, r3, #8
 8005a02:	61bb      	str	r3, [r7, #24]
        break;
 8005a04:	e006      	b.n	8005a14 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005a0a:	231e      	movs	r3, #30
 8005a0c:	18fb      	adds	r3, r7, r3
 8005a0e:	2201      	movs	r2, #1
 8005a10:	701a      	strb	r2, [r3, #0]
        break;
 8005a12:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d01e      	beq.n	8005a58 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	085a      	lsrs	r2, r3, #1
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	18d2      	adds	r2, r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	0019      	movs	r1, r3
 8005a2a:	0010      	movs	r0, r2
 8005a2c:	f7fa fb88 	bl	8000140 <__udivsi3>
 8005a30:	0003      	movs	r3, r0
 8005a32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2b0f      	cmp	r3, #15
 8005a38:	d90a      	bls.n	8005a50 <UART_SetConfig+0x240>
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	2380      	movs	r3, #128	@ 0x80
 8005a3e:	025b      	lsls	r3, r3, #9
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d205      	bcs.n	8005a50 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	60da      	str	r2, [r3, #12]
 8005a4e:	e003      	b.n	8005a58 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005a50:	231e      	movs	r3, #30
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	2201      	movs	r2, #1
 8005a56:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005a64:	231e      	movs	r3, #30
 8005a66:	18fb      	adds	r3, r7, r3
 8005a68:	781b      	ldrb	r3, [r3, #0]
}
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	b008      	add	sp, #32
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	46c0      	nop			@ (mov r8, r8)
 8005a74:	ffff69f3 	.word	0xffff69f3
 8005a78:	ffffcfff 	.word	0xffffcfff
 8005a7c:	fffff4ff 	.word	0xfffff4ff
 8005a80:	40013800 	.word	0x40013800
 8005a84:	40021000 	.word	0x40021000
 8005a88:	40004400 	.word	0x40004400
 8005a8c:	007a1200 	.word	0x007a1200

08005a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	d00b      	beq.n	8005aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4a4a      	ldr	r2, [pc, #296]	@ (8005bd4 <UART_AdvFeatureConfig+0x144>)
 8005aaa:	4013      	ands	r3, r2
 8005aac:	0019      	movs	r1, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abe:	2201      	movs	r2, #1
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d00b      	beq.n	8005adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	4a43      	ldr	r2, [pc, #268]	@ (8005bd8 <UART_AdvFeatureConfig+0x148>)
 8005acc:	4013      	ands	r3, r2
 8005ace:	0019      	movs	r1, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae0:	2202      	movs	r2, #2
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	d00b      	beq.n	8005afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	4a3b      	ldr	r2, [pc, #236]	@ (8005bdc <UART_AdvFeatureConfig+0x14c>)
 8005aee:	4013      	ands	r3, r2
 8005af0:	0019      	movs	r1, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b02:	2204      	movs	r2, #4
 8005b04:	4013      	ands	r3, r2
 8005b06:	d00b      	beq.n	8005b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	4a34      	ldr	r2, [pc, #208]	@ (8005be0 <UART_AdvFeatureConfig+0x150>)
 8005b10:	4013      	ands	r3, r2
 8005b12:	0019      	movs	r1, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b24:	2210      	movs	r2, #16
 8005b26:	4013      	ands	r3, r2
 8005b28:	d00b      	beq.n	8005b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	4a2c      	ldr	r2, [pc, #176]	@ (8005be4 <UART_AdvFeatureConfig+0x154>)
 8005b32:	4013      	ands	r3, r2
 8005b34:	0019      	movs	r1, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b46:	2220      	movs	r2, #32
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d00b      	beq.n	8005b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	4a25      	ldr	r2, [pc, #148]	@ (8005be8 <UART_AdvFeatureConfig+0x158>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	0019      	movs	r1, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b68:	2240      	movs	r2, #64	@ 0x40
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	d01d      	beq.n	8005baa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	4a1d      	ldr	r2, [pc, #116]	@ (8005bec <UART_AdvFeatureConfig+0x15c>)
 8005b76:	4013      	ands	r3, r2
 8005b78:	0019      	movs	r1, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b8a:	2380      	movs	r3, #128	@ 0x80
 8005b8c:	035b      	lsls	r3, r3, #13
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d10b      	bne.n	8005baa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	4a15      	ldr	r2, [pc, #84]	@ (8005bf0 <UART_AdvFeatureConfig+0x160>)
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	0019      	movs	r1, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bae:	2280      	movs	r2, #128	@ 0x80
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	d00b      	beq.n	8005bcc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	4a0e      	ldr	r2, [pc, #56]	@ (8005bf4 <UART_AdvFeatureConfig+0x164>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	0019      	movs	r1, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	605a      	str	r2, [r3, #4]
  }
}
 8005bcc:	46c0      	nop			@ (mov r8, r8)
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	b002      	add	sp, #8
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	ffff7fff 	.word	0xffff7fff
 8005bd8:	fffdffff 	.word	0xfffdffff
 8005bdc:	fffeffff 	.word	0xfffeffff
 8005be0:	fffbffff 	.word	0xfffbffff
 8005be4:	ffffefff 	.word	0xffffefff
 8005be8:	ffffdfff 	.word	0xffffdfff
 8005bec:	ffefffff 	.word	0xffefffff
 8005bf0:	ff9fffff 	.word	0xff9fffff
 8005bf4:	fff7ffff 	.word	0xfff7ffff

08005bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b092      	sub	sp, #72	@ 0x48
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2284      	movs	r2, #132	@ 0x84
 8005c04:	2100      	movs	r1, #0
 8005c06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c08:	f7fd fc86 	bl	8003518 <HAL_GetTick>
 8005c0c:	0003      	movs	r3, r0
 8005c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2208      	movs	r2, #8
 8005c18:	4013      	ands	r3, r2
 8005c1a:	2b08      	cmp	r3, #8
 8005c1c:	d12c      	bne.n	8005c78 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c20:	2280      	movs	r2, #128	@ 0x80
 8005c22:	0391      	lsls	r1, r2, #14
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	4a46      	ldr	r2, [pc, #280]	@ (8005d40 <UART_CheckIdleState+0x148>)
 8005c28:	9200      	str	r2, [sp, #0]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f000 f88c 	bl	8005d48 <UART_WaitOnFlagUntilTimeout>
 8005c30:	1e03      	subs	r3, r0, #0
 8005c32:	d021      	beq.n	8005c78 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c34:	f3ef 8310 	mrs	r3, PRIMASK
 8005c38:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c3e:	2301      	movs	r3, #1
 8005c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c44:	f383 8810 	msr	PRIMASK, r3
}
 8005c48:	46c0      	nop			@ (mov r8, r8)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2180      	movs	r1, #128	@ 0x80
 8005c56:	438a      	bics	r2, r1
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c60:	f383 8810 	msr	PRIMASK, r3
}
 8005c64:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2278      	movs	r2, #120	@ 0x78
 8005c70:	2100      	movs	r1, #0
 8005c72:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e05f      	b.n	8005d38 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2204      	movs	r2, #4
 8005c80:	4013      	ands	r3, r2
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d146      	bne.n	8005d14 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c88:	2280      	movs	r2, #128	@ 0x80
 8005c8a:	03d1      	lsls	r1, r2, #15
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d40 <UART_CheckIdleState+0x148>)
 8005c90:	9200      	str	r2, [sp, #0]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f000 f858 	bl	8005d48 <UART_WaitOnFlagUntilTimeout>
 8005c98:	1e03      	subs	r3, r0, #0
 8005c9a:	d03b      	beq.n	8005d14 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005ca0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f383 8810 	msr	PRIMASK, r3
}
 8005cb0:	46c0      	nop			@ (mov r8, r8)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4921      	ldr	r1, [pc, #132]	@ (8005d44 <UART_CheckIdleState+0x14c>)
 8005cbe:	400a      	ands	r2, r1
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f383 8810 	msr	PRIMASK, r3
}
 8005ccc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cce:	f3ef 8310 	mrs	r3, PRIMASK
 8005cd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8005cd4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cd8:	2301      	movs	r3, #1
 8005cda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	f383 8810 	msr	PRIMASK, r3
}
 8005ce2:	46c0      	nop			@ (mov r8, r8)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2101      	movs	r1, #1
 8005cf0:	438a      	bics	r2, r1
 8005cf2:	609a      	str	r2, [r3, #8]
 8005cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	f383 8810 	msr	PRIMASK, r3
}
 8005cfe:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2280      	movs	r2, #128	@ 0x80
 8005d04:	2120      	movs	r1, #32
 8005d06:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2278      	movs	r2, #120	@ 0x78
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e011      	b.n	8005d38 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2220      	movs	r2, #32
 8005d18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2280      	movs	r2, #128	@ 0x80
 8005d1e:	2120      	movs	r1, #32
 8005d20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2278      	movs	r2, #120	@ 0x78
 8005d32:	2100      	movs	r1, #0
 8005d34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	0018      	movs	r0, r3
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	b010      	add	sp, #64	@ 0x40
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	01ffffff 	.word	0x01ffffff
 8005d44:	fffffedf 	.word	0xfffffedf

08005d48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	1dfb      	adds	r3, r7, #7
 8005d56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d58:	e051      	b.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	d04e      	beq.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d60:	f7fd fbda 	bl	8003518 <HAL_GetTick>
 8005d64:	0002      	movs	r2, r0
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	69ba      	ldr	r2, [r7, #24]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d302      	bcc.n	8005d76 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e051      	b.n	8005e1e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2204      	movs	r2, #4
 8005d82:	4013      	ands	r3, r2
 8005d84:	d03b      	beq.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xb6>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	2b80      	cmp	r3, #128	@ 0x80
 8005d8a:	d038      	beq.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xb6>
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	2b40      	cmp	r3, #64	@ 0x40
 8005d90:	d035      	beq.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	2208      	movs	r2, #8
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d111      	bne.n	8005dc4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2208      	movs	r2, #8
 8005da6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	0018      	movs	r0, r3
 8005dac:	f000 f8f2 	bl	8005f94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2284      	movs	r2, #132	@ 0x84
 8005db4:	2108      	movs	r1, #8
 8005db6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2278      	movs	r2, #120	@ 0x78
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e02c      	b.n	8005e1e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69da      	ldr	r2, [r3, #28]
 8005dca:	2380      	movs	r3, #128	@ 0x80
 8005dcc:	011b      	lsls	r3, r3, #4
 8005dce:	401a      	ands	r2, r3
 8005dd0:	2380      	movs	r3, #128	@ 0x80
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d112      	bne.n	8005dfe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2280      	movs	r2, #128	@ 0x80
 8005dde:	0112      	lsls	r2, r2, #4
 8005de0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	0018      	movs	r0, r3
 8005de6:	f000 f8d5 	bl	8005f94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2284      	movs	r2, #132	@ 0x84
 8005dee:	2120      	movs	r1, #32
 8005df0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2278      	movs	r2, #120	@ 0x78
 8005df6:	2100      	movs	r1, #0
 8005df8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e00f      	b.n	8005e1e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69db      	ldr	r3, [r3, #28]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	4013      	ands	r3, r2
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	425a      	negs	r2, r3
 8005e0e:	4153      	adcs	r3, r2
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	001a      	movs	r2, r3
 8005e14:	1dfb      	adds	r3, r7, #7
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d09e      	beq.n	8005d5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	0018      	movs	r0, r3
 8005e20:	46bd      	mov	sp, r7
 8005e22:	b004      	add	sp, #16
 8005e24:	bd80      	pop	{r7, pc}
	...

08005e28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b090      	sub	sp, #64	@ 0x40
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	1dbb      	adds	r3, r7, #6
 8005e34:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	1dba      	adds	r2, r7, #6
 8005e40:	2158      	movs	r1, #88	@ 0x58
 8005e42:	8812      	ldrh	r2, [r2, #0]
 8005e44:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	1dba      	adds	r2, r7, #6
 8005e4a:	215a      	movs	r1, #90	@ 0x5a
 8005e4c:	8812      	ldrh	r2, [r2, #0]
 8005e4e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689a      	ldr	r2, [r3, #8]
 8005e5a:	2380      	movs	r3, #128	@ 0x80
 8005e5c:	015b      	lsls	r3, r3, #5
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d10d      	bne.n	8005e7e <UART_Start_Receive_IT+0x56>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d104      	bne.n	8005e74 <UART_Start_Receive_IT+0x4c>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	225c      	movs	r2, #92	@ 0x5c
 8005e6e:	4946      	ldr	r1, [pc, #280]	@ (8005f88 <UART_Start_Receive_IT+0x160>)
 8005e70:	5299      	strh	r1, [r3, r2]
 8005e72:	e01a      	b.n	8005eaa <UART_Start_Receive_IT+0x82>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	225c      	movs	r2, #92	@ 0x5c
 8005e78:	21ff      	movs	r1, #255	@ 0xff
 8005e7a:	5299      	strh	r1, [r3, r2]
 8005e7c:	e015      	b.n	8005eaa <UART_Start_Receive_IT+0x82>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10d      	bne.n	8005ea2 <UART_Start_Receive_IT+0x7a>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d104      	bne.n	8005e98 <UART_Start_Receive_IT+0x70>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	225c      	movs	r2, #92	@ 0x5c
 8005e92:	21ff      	movs	r1, #255	@ 0xff
 8005e94:	5299      	strh	r1, [r3, r2]
 8005e96:	e008      	b.n	8005eaa <UART_Start_Receive_IT+0x82>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	225c      	movs	r2, #92	@ 0x5c
 8005e9c:	217f      	movs	r1, #127	@ 0x7f
 8005e9e:	5299      	strh	r1, [r3, r2]
 8005ea0:	e003      	b.n	8005eaa <UART_Start_Receive_IT+0x82>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	225c      	movs	r2, #92	@ 0x5c
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2284      	movs	r2, #132	@ 0x84
 8005eae:	2100      	movs	r1, #0
 8005eb0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2280      	movs	r2, #128	@ 0x80
 8005eb6:	2122      	movs	r1, #34	@ 0x22
 8005eb8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eba:	f3ef 8310 	mrs	r3, PRIMASK
 8005ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eca:	f383 8810 	msr	PRIMASK, r3
}
 8005ece:	46c0      	nop			@ (mov r8, r8)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2101      	movs	r1, #1
 8005edc:	430a      	orrs	r2, r1
 8005ede:	609a      	str	r2, [r3, #8]
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ee2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee6:	f383 8810 	msr	PRIMASK, r3
}
 8005eea:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	2380      	movs	r3, #128	@ 0x80
 8005ef2:	015b      	lsls	r3, r3, #5
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d107      	bne.n	8005f08 <UART_Start_Receive_IT+0xe0>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d103      	bne.n	8005f08 <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4a22      	ldr	r2, [pc, #136]	@ (8005f8c <UART_Start_Receive_IT+0x164>)
 8005f04:	669a      	str	r2, [r3, #104]	@ 0x68
 8005f06:	e002      	b.n	8005f0e <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4a21      	ldr	r2, [pc, #132]	@ (8005f90 <UART_Start_Receive_IT+0x168>)
 8005f0c:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d019      	beq.n	8005f4a <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f16:	f3ef 8310 	mrs	r3, PRIMASK
 8005f1a:	61fb      	str	r3, [r7, #28]
  return(result);
 8005f1c:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005f1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f20:	2301      	movs	r3, #1
 8005f22:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	f383 8810 	msr	PRIMASK, r3
}
 8005f2a:	46c0      	nop			@ (mov r8, r8)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2190      	movs	r1, #144	@ 0x90
 8005f38:	0049      	lsls	r1, r1, #1
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f40:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f44:	f383 8810 	msr	PRIMASK, r3
}
 8005f48:	e018      	b.n	8005f7c <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f4e:	613b      	str	r3, [r7, #16]
  return(result);
 8005f50:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005f52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f54:	2301      	movs	r3, #1
 8005f56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f383 8810 	msr	PRIMASK, r3
}
 8005f5e:	46c0      	nop			@ (mov r8, r8)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2120      	movs	r1, #32
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	f383 8810 	msr	PRIMASK, r3
}
 8005f7a:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	0018      	movs	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	b010      	add	sp, #64	@ 0x40
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	46c0      	nop			@ (mov r8, r8)
 8005f88:	000001ff 	.word	0x000001ff
 8005f8c:	08006299 	.word	0x08006299
 8005f90:	080060e1 	.word	0x080060e1

08005f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b08e      	sub	sp, #56	@ 0x38
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa0:	617b      	str	r3, [r7, #20]
  return(result);
 8005fa2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	f383 8810 	msr	PRIMASK, r3
}
 8005fb0:	46c0      	nop			@ (mov r8, r8)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4926      	ldr	r1, [pc, #152]	@ (8006058 <UART_EndRxTransfer+0xc4>)
 8005fbe:	400a      	ands	r2, r1
 8005fc0:	601a      	str	r2, [r3, #0]
 8005fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	f383 8810 	msr	PRIMASK, r3
}
 8005fcc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fce:	f3ef 8310 	mrs	r3, PRIMASK
 8005fd2:	623b      	str	r3, [r7, #32]
  return(result);
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fd8:	2301      	movs	r3, #1
 8005fda:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fde:	f383 8810 	msr	PRIMASK, r3
}
 8005fe2:	46c0      	nop			@ (mov r8, r8)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689a      	ldr	r2, [r3, #8]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2101      	movs	r1, #1
 8005ff0:	438a      	bics	r2, r1
 8005ff2:	609a      	str	r2, [r3, #8]
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffa:	f383 8810 	msr	PRIMASK, r3
}
 8005ffe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006004:	2b01      	cmp	r3, #1
 8006006:	d118      	bne.n	800603a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006008:	f3ef 8310 	mrs	r3, PRIMASK
 800600c:	60bb      	str	r3, [r7, #8]
  return(result);
 800600e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006012:	2301      	movs	r3, #1
 8006014:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f383 8810 	msr	PRIMASK, r3
}
 800601c:	46c0      	nop			@ (mov r8, r8)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2110      	movs	r1, #16
 800602a:	438a      	bics	r2, r1
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006030:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f383 8810 	msr	PRIMASK, r3
}
 8006038:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2280      	movs	r2, #128	@ 0x80
 800603e:	2120      	movs	r1, #32
 8006040:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800604e:	46c0      	nop			@ (mov r8, r8)
 8006050:	46bd      	mov	sp, r7
 8006052:	b00e      	add	sp, #56	@ 0x38
 8006054:	bd80      	pop	{r7, pc}
 8006056:	46c0      	nop			@ (mov r8, r8)
 8006058:	fffffedf 	.word	0xfffffedf

0800605c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006068:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	225a      	movs	r2, #90	@ 0x5a
 800606e:	2100      	movs	r1, #0
 8006070:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2252      	movs	r2, #82	@ 0x52
 8006076:	2100      	movs	r1, #0
 8006078:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	0018      	movs	r0, r3
 800607e:	f7ff fbb3 	bl	80057e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006082:	46c0      	nop			@ (mov r8, r8)
 8006084:	46bd      	mov	sp, r7
 8006086:	b004      	add	sp, #16
 8006088:	bd80      	pop	{r7, pc}

0800608a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b086      	sub	sp, #24
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006092:	f3ef 8310 	mrs	r3, PRIMASK
 8006096:	60bb      	str	r3, [r7, #8]
  return(result);
 8006098:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	2301      	movs	r3, #1
 800609e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f383 8810 	msr	PRIMASK, r3
}
 80060a6:	46c0      	nop			@ (mov r8, r8)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2140      	movs	r1, #64	@ 0x40
 80060b4:	438a      	bics	r2, r1
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f383 8810 	msr	PRIMASK, r3
}
 80060c2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2220      	movs	r2, #32
 80060c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	0018      	movs	r0, r3
 80060d4:	f7ff fb80 	bl	80057d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060d8:	46c0      	nop			@ (mov r8, r8)
 80060da:	46bd      	mov	sp, r7
 80060dc:	b006      	add	sp, #24
 80060de:	bd80      	pop	{r7, pc}

080060e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b094      	sub	sp, #80	@ 0x50
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80060e8:	204e      	movs	r0, #78	@ 0x4e
 80060ea:	183b      	adds	r3, r7, r0
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	215c      	movs	r1, #92	@ 0x5c
 80060f0:	5a52      	ldrh	r2, [r2, r1]
 80060f2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2280      	movs	r2, #128	@ 0x80
 80060f8:	589b      	ldr	r3, [r3, r2]
 80060fa:	2b22      	cmp	r3, #34	@ 0x22
 80060fc:	d000      	beq.n	8006100 <UART_RxISR_8BIT+0x20>
 80060fe:	e0ba      	b.n	8006276 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	214c      	movs	r1, #76	@ 0x4c
 8006106:	187b      	adds	r3, r7, r1
 8006108:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800610a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800610c:	187b      	adds	r3, r7, r1
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	b2da      	uxtb	r2, r3
 8006112:	183b      	adds	r3, r7, r0
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	b2d9      	uxtb	r1, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800611c:	400a      	ands	r2, r1
 800611e:	b2d2      	uxtb	r2, r2
 8006120:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006126:	1c5a      	adds	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	225a      	movs	r2, #90	@ 0x5a
 8006130:	5a9b      	ldrh	r3, [r3, r2]
 8006132:	b29b      	uxth	r3, r3
 8006134:	3b01      	subs	r3, #1
 8006136:	b299      	uxth	r1, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	225a      	movs	r2, #90	@ 0x5a
 800613c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	225a      	movs	r2, #90	@ 0x5a
 8006142:	5a9b      	ldrh	r3, [r3, r2]
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d000      	beq.n	800614c <UART_RxISR_8BIT+0x6c>
 800614a:	e09c      	b.n	8006286 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800614c:	f3ef 8310 	mrs	r3, PRIMASK
 8006150:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006154:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006156:	2301      	movs	r3, #1
 8006158:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800615a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615c:	f383 8810 	msr	PRIMASK, r3
}
 8006160:	46c0      	nop			@ (mov r8, r8)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4948      	ldr	r1, [pc, #288]	@ (8006290 <UART_RxISR_8BIT+0x1b0>)
 800616e:	400a      	ands	r2, r1
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006174:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006178:	f383 8810 	msr	PRIMASK, r3
}
 800617c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617e:	f3ef 8310 	mrs	r3, PRIMASK
 8006182:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006186:	647b      	str	r3, [r7, #68]	@ 0x44
 8006188:	2301      	movs	r3, #1
 800618a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800618c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800618e:	f383 8810 	msr	PRIMASK, r3
}
 8006192:	46c0      	nop			@ (mov r8, r8)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2101      	movs	r1, #1
 80061a0:	438a      	bics	r2, r1
 80061a2:	609a      	str	r2, [r3, #8]
 80061a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061aa:	f383 8810 	msr	PRIMASK, r3
}
 80061ae:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2280      	movs	r2, #128	@ 0x80
 80061b4:	2120      	movs	r1, #32
 80061b6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	2380      	movs	r3, #128	@ 0x80
 80061cc:	041b      	lsls	r3, r3, #16
 80061ce:	4013      	ands	r3, r2
 80061d0:	d018      	beq.n	8006204 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061d2:	f3ef 8310 	mrs	r3, PRIMASK
 80061d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80061d8:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80061da:	643b      	str	r3, [r7, #64]	@ 0x40
 80061dc:	2301      	movs	r3, #1
 80061de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e0:	69fb      	ldr	r3, [r7, #28]
 80061e2:	f383 8810 	msr	PRIMASK, r3
}
 80061e6:	46c0      	nop			@ (mov r8, r8)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4928      	ldr	r1, [pc, #160]	@ (8006294 <UART_RxISR_8BIT+0x1b4>)
 80061f4:	400a      	ands	r2, r1
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	f383 8810 	msr	PRIMASK, r3
}
 8006202:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006208:	2b01      	cmp	r3, #1
 800620a:	d12f      	bne.n	800626c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006212:	f3ef 8310 	mrs	r3, PRIMASK
 8006216:	60fb      	str	r3, [r7, #12]
  return(result);
 8006218:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800621c:	2301      	movs	r3, #1
 800621e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f383 8810 	msr	PRIMASK, r3
}
 8006226:	46c0      	nop			@ (mov r8, r8)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2110      	movs	r1, #16
 8006234:	438a      	bics	r2, r1
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800623a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f383 8810 	msr	PRIMASK, r3
}
 8006242:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	2210      	movs	r2, #16
 800624c:	4013      	ands	r3, r2
 800624e:	2b10      	cmp	r3, #16
 8006250:	d103      	bne.n	800625a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2210      	movs	r2, #16
 8006258:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2258      	movs	r2, #88	@ 0x58
 800625e:	5a9a      	ldrh	r2, [r3, r2]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	0011      	movs	r1, r2
 8006264:	0018      	movs	r0, r3
 8006266:	f7ff fac7 	bl	80057f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800626a:	e00c      	b.n	8006286 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	0018      	movs	r0, r3
 8006270:	f7fc fec6 	bl	8003000 <HAL_UART_RxCpltCallback>
}
 8006274:	e007      	b.n	8006286 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	699a      	ldr	r2, [r3, #24]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2108      	movs	r1, #8
 8006282:	430a      	orrs	r2, r1
 8006284:	619a      	str	r2, [r3, #24]
}
 8006286:	46c0      	nop			@ (mov r8, r8)
 8006288:	46bd      	mov	sp, r7
 800628a:	b014      	add	sp, #80	@ 0x50
 800628c:	bd80      	pop	{r7, pc}
 800628e:	46c0      	nop			@ (mov r8, r8)
 8006290:	fffffedf 	.word	0xfffffedf
 8006294:	fbffffff 	.word	0xfbffffff

08006298 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b094      	sub	sp, #80	@ 0x50
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80062a0:	204e      	movs	r0, #78	@ 0x4e
 80062a2:	183b      	adds	r3, r7, r0
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	215c      	movs	r1, #92	@ 0x5c
 80062a8:	5a52      	ldrh	r2, [r2, r1]
 80062aa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2280      	movs	r2, #128	@ 0x80
 80062b0:	589b      	ldr	r3, [r3, r2]
 80062b2:	2b22      	cmp	r3, #34	@ 0x22
 80062b4:	d000      	beq.n	80062b8 <UART_RxISR_16BIT+0x20>
 80062b6:	e0ba      	b.n	800642e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	214c      	movs	r1, #76	@ 0x4c
 80062be:	187b      	adds	r3, r7, r1
 80062c0:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 80062c2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c8:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80062ca:	187b      	adds	r3, r7, r1
 80062cc:	183a      	adds	r2, r7, r0
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	8812      	ldrh	r2, [r2, #0]
 80062d2:	4013      	ands	r3, r2
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062de:	1c9a      	adds	r2, r3, #2
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	225a      	movs	r2, #90	@ 0x5a
 80062e8:	5a9b      	ldrh	r3, [r3, r2]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b299      	uxth	r1, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	225a      	movs	r2, #90	@ 0x5a
 80062f4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	225a      	movs	r2, #90	@ 0x5a
 80062fa:	5a9b      	ldrh	r3, [r3, r2]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d000      	beq.n	8006304 <UART_RxISR_16BIT+0x6c>
 8006302:	e09c      	b.n	800643e <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006304:	f3ef 8310 	mrs	r3, PRIMASK
 8006308:	623b      	str	r3, [r7, #32]
  return(result);
 800630a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800630c:	647b      	str	r3, [r7, #68]	@ 0x44
 800630e:	2301      	movs	r3, #1
 8006310:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	f383 8810 	msr	PRIMASK, r3
}
 8006318:	46c0      	nop			@ (mov r8, r8)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4948      	ldr	r1, [pc, #288]	@ (8006448 <UART_RxISR_16BIT+0x1b0>)
 8006326:	400a      	ands	r2, r1
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800632c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800632e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006330:	f383 8810 	msr	PRIMASK, r3
}
 8006334:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006336:	f3ef 8310 	mrs	r3, PRIMASK
 800633a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 800633c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006340:	2301      	movs	r3, #1
 8006342:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006346:	f383 8810 	msr	PRIMASK, r3
}
 800634a:	46c0      	nop			@ (mov r8, r8)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2101      	movs	r1, #1
 8006358:	438a      	bics	r2, r1
 800635a:	609a      	str	r2, [r3, #8]
 800635c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800635e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006362:	f383 8810 	msr	PRIMASK, r3
}
 8006366:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2280      	movs	r2, #128	@ 0x80
 800636c:	2120      	movs	r1, #32
 800636e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	2380      	movs	r3, #128	@ 0x80
 8006384:	041b      	lsls	r3, r3, #16
 8006386:	4013      	ands	r3, r2
 8006388:	d018      	beq.n	80063bc <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800638a:	f3ef 8310 	mrs	r3, PRIMASK
 800638e:	617b      	str	r3, [r7, #20]
  return(result);
 8006390:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006394:	2301      	movs	r3, #1
 8006396:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	f383 8810 	msr	PRIMASK, r3
}
 800639e:	46c0      	nop			@ (mov r8, r8)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4928      	ldr	r1, [pc, #160]	@ (800644c <UART_RxISR_16BIT+0x1b4>)
 80063ac:	400a      	ands	r2, r1
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	f383 8810 	msr	PRIMASK, r3
}
 80063ba:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d12f      	bne.n	8006424 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ca:	f3ef 8310 	mrs	r3, PRIMASK
 80063ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80063d0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063d4:	2301      	movs	r3, #1
 80063d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f383 8810 	msr	PRIMASK, r3
}
 80063de:	46c0      	nop			@ (mov r8, r8)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2110      	movs	r1, #16
 80063ec:	438a      	bics	r2, r1
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	f383 8810 	msr	PRIMASK, r3
}
 80063fa:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	69db      	ldr	r3, [r3, #28]
 8006402:	2210      	movs	r2, #16
 8006404:	4013      	ands	r3, r2
 8006406:	2b10      	cmp	r3, #16
 8006408:	d103      	bne.n	8006412 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2210      	movs	r2, #16
 8006410:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2258      	movs	r2, #88	@ 0x58
 8006416:	5a9a      	ldrh	r2, [r3, r2]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	0011      	movs	r1, r2
 800641c:	0018      	movs	r0, r3
 800641e:	f7ff f9eb 	bl	80057f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006422:	e00c      	b.n	800643e <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	0018      	movs	r0, r3
 8006428:	f7fc fdea 	bl	8003000 <HAL_UART_RxCpltCallback>
}
 800642c:	e007      	b.n	800643e <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	699a      	ldr	r2, [r3, #24]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2108      	movs	r1, #8
 800643a:	430a      	orrs	r2, r1
 800643c:	619a      	str	r2, [r3, #24]
}
 800643e:	46c0      	nop			@ (mov r8, r8)
 8006440:	46bd      	mov	sp, r7
 8006442:	b014      	add	sp, #80	@ 0x50
 8006444:	bd80      	pop	{r7, pc}
 8006446:	46c0      	nop			@ (mov r8, r8)
 8006448:	fffffedf 	.word	0xfffffedf
 800644c:	fbffffff 	.word	0xfbffffff

08006450 <__cvt>:
 8006450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006452:	001f      	movs	r7, r3
 8006454:	2300      	movs	r3, #0
 8006456:	0016      	movs	r6, r2
 8006458:	b08b      	sub	sp, #44	@ 0x2c
 800645a:	429f      	cmp	r7, r3
 800645c:	da04      	bge.n	8006468 <__cvt+0x18>
 800645e:	2180      	movs	r1, #128	@ 0x80
 8006460:	0609      	lsls	r1, r1, #24
 8006462:	187b      	adds	r3, r7, r1
 8006464:	001f      	movs	r7, r3
 8006466:	232d      	movs	r3, #45	@ 0x2d
 8006468:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800646a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800646c:	7013      	strb	r3, [r2, #0]
 800646e:	2320      	movs	r3, #32
 8006470:	2203      	movs	r2, #3
 8006472:	439d      	bics	r5, r3
 8006474:	2d46      	cmp	r5, #70	@ 0x46
 8006476:	d007      	beq.n	8006488 <__cvt+0x38>
 8006478:	002b      	movs	r3, r5
 800647a:	3b45      	subs	r3, #69	@ 0x45
 800647c:	4259      	negs	r1, r3
 800647e:	414b      	adcs	r3, r1
 8006480:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006482:	3a01      	subs	r2, #1
 8006484:	18cb      	adds	r3, r1, r3
 8006486:	9310      	str	r3, [sp, #64]	@ 0x40
 8006488:	ab09      	add	r3, sp, #36	@ 0x24
 800648a:	9304      	str	r3, [sp, #16]
 800648c:	ab08      	add	r3, sp, #32
 800648e:	9303      	str	r3, [sp, #12]
 8006490:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006492:	9200      	str	r2, [sp, #0]
 8006494:	9302      	str	r3, [sp, #8]
 8006496:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006498:	0032      	movs	r2, r6
 800649a:	9301      	str	r3, [sp, #4]
 800649c:	003b      	movs	r3, r7
 800649e:	f001 f8c7 	bl	8007630 <_dtoa_r>
 80064a2:	0004      	movs	r4, r0
 80064a4:	2d47      	cmp	r5, #71	@ 0x47
 80064a6:	d11b      	bne.n	80064e0 <__cvt+0x90>
 80064a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80064aa:	07db      	lsls	r3, r3, #31
 80064ac:	d511      	bpl.n	80064d2 <__cvt+0x82>
 80064ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80064b0:	18c3      	adds	r3, r0, r3
 80064b2:	9307      	str	r3, [sp, #28]
 80064b4:	2200      	movs	r2, #0
 80064b6:	2300      	movs	r3, #0
 80064b8:	0030      	movs	r0, r6
 80064ba:	0039      	movs	r1, r7
 80064bc:	f7f9 ffc6 	bl	800044c <__aeabi_dcmpeq>
 80064c0:	2800      	cmp	r0, #0
 80064c2:	d001      	beq.n	80064c8 <__cvt+0x78>
 80064c4:	9b07      	ldr	r3, [sp, #28]
 80064c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80064c8:	2230      	movs	r2, #48	@ 0x30
 80064ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064cc:	9907      	ldr	r1, [sp, #28]
 80064ce:	428b      	cmp	r3, r1
 80064d0:	d320      	bcc.n	8006514 <__cvt+0xc4>
 80064d2:	0020      	movs	r0, r4
 80064d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064d6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80064d8:	1b1b      	subs	r3, r3, r4
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	b00b      	add	sp, #44	@ 0x2c
 80064de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064e0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80064e2:	18c3      	adds	r3, r0, r3
 80064e4:	9307      	str	r3, [sp, #28]
 80064e6:	2d46      	cmp	r5, #70	@ 0x46
 80064e8:	d1e4      	bne.n	80064b4 <__cvt+0x64>
 80064ea:	7803      	ldrb	r3, [r0, #0]
 80064ec:	2b30      	cmp	r3, #48	@ 0x30
 80064ee:	d10c      	bne.n	800650a <__cvt+0xba>
 80064f0:	2200      	movs	r2, #0
 80064f2:	2300      	movs	r3, #0
 80064f4:	0030      	movs	r0, r6
 80064f6:	0039      	movs	r1, r7
 80064f8:	f7f9 ffa8 	bl	800044c <__aeabi_dcmpeq>
 80064fc:	2800      	cmp	r0, #0
 80064fe:	d104      	bne.n	800650a <__cvt+0xba>
 8006500:	2301      	movs	r3, #1
 8006502:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8006504:	1a9b      	subs	r3, r3, r2
 8006506:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800650c:	9a07      	ldr	r2, [sp, #28]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	18d3      	adds	r3, r2, r3
 8006512:	e7ce      	b.n	80064b2 <__cvt+0x62>
 8006514:	1c59      	adds	r1, r3, #1
 8006516:	9109      	str	r1, [sp, #36]	@ 0x24
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	e7d6      	b.n	80064ca <__cvt+0x7a>

0800651c <__exponent>:
 800651c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800651e:	232b      	movs	r3, #43	@ 0x2b
 8006520:	b085      	sub	sp, #20
 8006522:	0005      	movs	r5, r0
 8006524:	1e0c      	subs	r4, r1, #0
 8006526:	7002      	strb	r2, [r0, #0]
 8006528:	da01      	bge.n	800652e <__exponent+0x12>
 800652a:	424c      	negs	r4, r1
 800652c:	3302      	adds	r3, #2
 800652e:	706b      	strb	r3, [r5, #1]
 8006530:	2c09      	cmp	r4, #9
 8006532:	dd2c      	ble.n	800658e <__exponent+0x72>
 8006534:	ab02      	add	r3, sp, #8
 8006536:	1dde      	adds	r6, r3, #7
 8006538:	0020      	movs	r0, r4
 800653a:	210a      	movs	r1, #10
 800653c:	f7f9 ff70 	bl	8000420 <__aeabi_idivmod>
 8006540:	0037      	movs	r7, r6
 8006542:	3130      	adds	r1, #48	@ 0x30
 8006544:	3e01      	subs	r6, #1
 8006546:	0020      	movs	r0, r4
 8006548:	7031      	strb	r1, [r6, #0]
 800654a:	210a      	movs	r1, #10
 800654c:	9401      	str	r4, [sp, #4]
 800654e:	f7f9 fe81 	bl	8000254 <__divsi3>
 8006552:	9b01      	ldr	r3, [sp, #4]
 8006554:	0004      	movs	r4, r0
 8006556:	2b63      	cmp	r3, #99	@ 0x63
 8006558:	dcee      	bgt.n	8006538 <__exponent+0x1c>
 800655a:	1eba      	subs	r2, r7, #2
 800655c:	1ca8      	adds	r0, r5, #2
 800655e:	0001      	movs	r1, r0
 8006560:	0013      	movs	r3, r2
 8006562:	3430      	adds	r4, #48	@ 0x30
 8006564:	7014      	strb	r4, [r2, #0]
 8006566:	ac02      	add	r4, sp, #8
 8006568:	3407      	adds	r4, #7
 800656a:	429c      	cmp	r4, r3
 800656c:	d80a      	bhi.n	8006584 <__exponent+0x68>
 800656e:	2300      	movs	r3, #0
 8006570:	4294      	cmp	r4, r2
 8006572:	d303      	bcc.n	800657c <__exponent+0x60>
 8006574:	3309      	adds	r3, #9
 8006576:	aa02      	add	r2, sp, #8
 8006578:	189b      	adds	r3, r3, r2
 800657a:	1bdb      	subs	r3, r3, r7
 800657c:	18c0      	adds	r0, r0, r3
 800657e:	1b40      	subs	r0, r0, r5
 8006580:	b005      	add	sp, #20
 8006582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006584:	781c      	ldrb	r4, [r3, #0]
 8006586:	3301      	adds	r3, #1
 8006588:	700c      	strb	r4, [r1, #0]
 800658a:	3101      	adds	r1, #1
 800658c:	e7eb      	b.n	8006566 <__exponent+0x4a>
 800658e:	2330      	movs	r3, #48	@ 0x30
 8006590:	18e4      	adds	r4, r4, r3
 8006592:	70ab      	strb	r3, [r5, #2]
 8006594:	1d28      	adds	r0, r5, #4
 8006596:	70ec      	strb	r4, [r5, #3]
 8006598:	e7f1      	b.n	800657e <__exponent+0x62>
	...

0800659c <_printf_float>:
 800659c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800659e:	b097      	sub	sp, #92	@ 0x5c
 80065a0:	000d      	movs	r5, r1
 80065a2:	920a      	str	r2, [sp, #40]	@ 0x28
 80065a4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80065a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065a8:	9009      	str	r0, [sp, #36]	@ 0x24
 80065aa:	f000 ff2d 	bl	8007408 <_localeconv_r>
 80065ae:	6803      	ldr	r3, [r0, #0]
 80065b0:	0018      	movs	r0, r3
 80065b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80065b4:	f7f9 fda8 	bl	8000108 <strlen>
 80065b8:	2300      	movs	r3, #0
 80065ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 80065bc:	9314      	str	r3, [sp, #80]	@ 0x50
 80065be:	7e2b      	ldrb	r3, [r5, #24]
 80065c0:	2207      	movs	r2, #7
 80065c2:	930c      	str	r3, [sp, #48]	@ 0x30
 80065c4:	682b      	ldr	r3, [r5, #0]
 80065c6:	930e      	str	r3, [sp, #56]	@ 0x38
 80065c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	05c9      	lsls	r1, r1, #23
 80065ce:	d545      	bpl.n	800665c <_printf_float+0xc0>
 80065d0:	189b      	adds	r3, r3, r2
 80065d2:	4393      	bics	r3, r2
 80065d4:	001a      	movs	r2, r3
 80065d6:	3208      	adds	r2, #8
 80065d8:	6022      	str	r2, [r4, #0]
 80065da:	2201      	movs	r2, #1
 80065dc:	681e      	ldr	r6, [r3, #0]
 80065de:	685f      	ldr	r7, [r3, #4]
 80065e0:	007b      	lsls	r3, r7, #1
 80065e2:	085b      	lsrs	r3, r3, #1
 80065e4:	9311      	str	r3, [sp, #68]	@ 0x44
 80065e6:	9610      	str	r6, [sp, #64]	@ 0x40
 80065e8:	64ae      	str	r6, [r5, #72]	@ 0x48
 80065ea:	64ef      	str	r7, [r5, #76]	@ 0x4c
 80065ec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80065ee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80065f0:	4ba7      	ldr	r3, [pc, #668]	@ (8006890 <_printf_float+0x2f4>)
 80065f2:	4252      	negs	r2, r2
 80065f4:	f7fc f952 	bl	800289c <__aeabi_dcmpun>
 80065f8:	2800      	cmp	r0, #0
 80065fa:	d131      	bne.n	8006660 <_printf_float+0xc4>
 80065fc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80065fe:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006600:	2201      	movs	r2, #1
 8006602:	4ba3      	ldr	r3, [pc, #652]	@ (8006890 <_printf_float+0x2f4>)
 8006604:	4252      	negs	r2, r2
 8006606:	f7f9 ff31 	bl	800046c <__aeabi_dcmple>
 800660a:	2800      	cmp	r0, #0
 800660c:	d128      	bne.n	8006660 <_printf_float+0xc4>
 800660e:	2200      	movs	r2, #0
 8006610:	2300      	movs	r3, #0
 8006612:	0030      	movs	r0, r6
 8006614:	0039      	movs	r1, r7
 8006616:	f7f9 ff1f 	bl	8000458 <__aeabi_dcmplt>
 800661a:	2800      	cmp	r0, #0
 800661c:	d003      	beq.n	8006626 <_printf_float+0x8a>
 800661e:	002b      	movs	r3, r5
 8006620:	222d      	movs	r2, #45	@ 0x2d
 8006622:	3343      	adds	r3, #67	@ 0x43
 8006624:	701a      	strb	r2, [r3, #0]
 8006626:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006628:	4f9a      	ldr	r7, [pc, #616]	@ (8006894 <_printf_float+0x2f8>)
 800662a:	2b47      	cmp	r3, #71	@ 0x47
 800662c:	d800      	bhi.n	8006630 <_printf_float+0x94>
 800662e:	4f9a      	ldr	r7, [pc, #616]	@ (8006898 <_printf_float+0x2fc>)
 8006630:	2303      	movs	r3, #3
 8006632:	2400      	movs	r4, #0
 8006634:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006636:	612b      	str	r3, [r5, #16]
 8006638:	3301      	adds	r3, #1
 800663a:	439a      	bics	r2, r3
 800663c:	602a      	str	r2, [r5, #0]
 800663e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006640:	0029      	movs	r1, r5
 8006642:	9300      	str	r3, [sp, #0]
 8006644:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006646:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006648:	aa15      	add	r2, sp, #84	@ 0x54
 800664a:	f000 f9e5 	bl	8006a18 <_printf_common>
 800664e:	3001      	adds	r0, #1
 8006650:	d000      	beq.n	8006654 <_printf_float+0xb8>
 8006652:	e09e      	b.n	8006792 <_printf_float+0x1f6>
 8006654:	2001      	movs	r0, #1
 8006656:	4240      	negs	r0, r0
 8006658:	b017      	add	sp, #92	@ 0x5c
 800665a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800665c:	3307      	adds	r3, #7
 800665e:	e7b8      	b.n	80065d2 <_printf_float+0x36>
 8006660:	0032      	movs	r2, r6
 8006662:	003b      	movs	r3, r7
 8006664:	0030      	movs	r0, r6
 8006666:	0039      	movs	r1, r7
 8006668:	f7fc f918 	bl	800289c <__aeabi_dcmpun>
 800666c:	2800      	cmp	r0, #0
 800666e:	d00b      	beq.n	8006688 <_printf_float+0xec>
 8006670:	2f00      	cmp	r7, #0
 8006672:	da03      	bge.n	800667c <_printf_float+0xe0>
 8006674:	002b      	movs	r3, r5
 8006676:	222d      	movs	r2, #45	@ 0x2d
 8006678:	3343      	adds	r3, #67	@ 0x43
 800667a:	701a      	strb	r2, [r3, #0]
 800667c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800667e:	4f87      	ldr	r7, [pc, #540]	@ (800689c <_printf_float+0x300>)
 8006680:	2b47      	cmp	r3, #71	@ 0x47
 8006682:	d8d5      	bhi.n	8006630 <_printf_float+0x94>
 8006684:	4f86      	ldr	r7, [pc, #536]	@ (80068a0 <_printf_float+0x304>)
 8006686:	e7d3      	b.n	8006630 <_printf_float+0x94>
 8006688:	2220      	movs	r2, #32
 800668a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800668c:	686b      	ldr	r3, [r5, #4]
 800668e:	4394      	bics	r4, r2
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	d146      	bne.n	8006722 <_printf_float+0x186>
 8006694:	3307      	adds	r3, #7
 8006696:	606b      	str	r3, [r5, #4]
 8006698:	2380      	movs	r3, #128	@ 0x80
 800669a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800669c:	00db      	lsls	r3, r3, #3
 800669e:	4313      	orrs	r3, r2
 80066a0:	2200      	movs	r2, #0
 80066a2:	602b      	str	r3, [r5, #0]
 80066a4:	9206      	str	r2, [sp, #24]
 80066a6:	aa14      	add	r2, sp, #80	@ 0x50
 80066a8:	9205      	str	r2, [sp, #20]
 80066aa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80066ac:	a90a      	add	r1, sp, #40	@ 0x28
 80066ae:	9204      	str	r2, [sp, #16]
 80066b0:	aa13      	add	r2, sp, #76	@ 0x4c
 80066b2:	9203      	str	r2, [sp, #12]
 80066b4:	2223      	movs	r2, #35	@ 0x23
 80066b6:	1852      	adds	r2, r2, r1
 80066b8:	9202      	str	r2, [sp, #8]
 80066ba:	9301      	str	r3, [sp, #4]
 80066bc:	686b      	ldr	r3, [r5, #4]
 80066be:	0032      	movs	r2, r6
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80066c4:	003b      	movs	r3, r7
 80066c6:	f7ff fec3 	bl	8006450 <__cvt>
 80066ca:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80066cc:	0007      	movs	r7, r0
 80066ce:	2c47      	cmp	r4, #71	@ 0x47
 80066d0:	d12d      	bne.n	800672e <_printf_float+0x192>
 80066d2:	1cd3      	adds	r3, r2, #3
 80066d4:	db02      	blt.n	80066dc <_printf_float+0x140>
 80066d6:	686b      	ldr	r3, [r5, #4]
 80066d8:	429a      	cmp	r2, r3
 80066da:	dd47      	ble.n	800676c <_printf_float+0x1d0>
 80066dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80066de:	3b02      	subs	r3, #2
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	930c      	str	r3, [sp, #48]	@ 0x30
 80066e4:	0028      	movs	r0, r5
 80066e6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80066e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80066ea:	3901      	subs	r1, #1
 80066ec:	3050      	adds	r0, #80	@ 0x50
 80066ee:	9113      	str	r1, [sp, #76]	@ 0x4c
 80066f0:	f7ff ff14 	bl	800651c <__exponent>
 80066f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80066f6:	0004      	movs	r4, r0
 80066f8:	1813      	adds	r3, r2, r0
 80066fa:	612b      	str	r3, [r5, #16]
 80066fc:	2a01      	cmp	r2, #1
 80066fe:	dc02      	bgt.n	8006706 <_printf_float+0x16a>
 8006700:	682a      	ldr	r2, [r5, #0]
 8006702:	07d2      	lsls	r2, r2, #31
 8006704:	d501      	bpl.n	800670a <_printf_float+0x16e>
 8006706:	3301      	adds	r3, #1
 8006708:	612b      	str	r3, [r5, #16]
 800670a:	2323      	movs	r3, #35	@ 0x23
 800670c:	aa0a      	add	r2, sp, #40	@ 0x28
 800670e:	189b      	adds	r3, r3, r2
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d100      	bne.n	8006718 <_printf_float+0x17c>
 8006716:	e792      	b.n	800663e <_printf_float+0xa2>
 8006718:	002b      	movs	r3, r5
 800671a:	222d      	movs	r2, #45	@ 0x2d
 800671c:	3343      	adds	r3, #67	@ 0x43
 800671e:	701a      	strb	r2, [r3, #0]
 8006720:	e78d      	b.n	800663e <_printf_float+0xa2>
 8006722:	2c47      	cmp	r4, #71	@ 0x47
 8006724:	d1b8      	bne.n	8006698 <_printf_float+0xfc>
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1b6      	bne.n	8006698 <_printf_float+0xfc>
 800672a:	3301      	adds	r3, #1
 800672c:	e7b3      	b.n	8006696 <_printf_float+0xfa>
 800672e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006730:	2b65      	cmp	r3, #101	@ 0x65
 8006732:	d9d7      	bls.n	80066e4 <_printf_float+0x148>
 8006734:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006736:	2b66      	cmp	r3, #102	@ 0x66
 8006738:	d11a      	bne.n	8006770 <_printf_float+0x1d4>
 800673a:	686b      	ldr	r3, [r5, #4]
 800673c:	2a00      	cmp	r2, #0
 800673e:	dd09      	ble.n	8006754 <_printf_float+0x1b8>
 8006740:	612a      	str	r2, [r5, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d102      	bne.n	800674c <_printf_float+0x1b0>
 8006746:	6829      	ldr	r1, [r5, #0]
 8006748:	07c9      	lsls	r1, r1, #31
 800674a:	d50b      	bpl.n	8006764 <_printf_float+0x1c8>
 800674c:	3301      	adds	r3, #1
 800674e:	189b      	adds	r3, r3, r2
 8006750:	612b      	str	r3, [r5, #16]
 8006752:	e007      	b.n	8006764 <_printf_float+0x1c8>
 8006754:	2b00      	cmp	r3, #0
 8006756:	d103      	bne.n	8006760 <_printf_float+0x1c4>
 8006758:	2201      	movs	r2, #1
 800675a:	6829      	ldr	r1, [r5, #0]
 800675c:	4211      	tst	r1, r2
 800675e:	d000      	beq.n	8006762 <_printf_float+0x1c6>
 8006760:	1c9a      	adds	r2, r3, #2
 8006762:	612a      	str	r2, [r5, #16]
 8006764:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006766:	2400      	movs	r4, #0
 8006768:	65ab      	str	r3, [r5, #88]	@ 0x58
 800676a:	e7ce      	b.n	800670a <_printf_float+0x16e>
 800676c:	2367      	movs	r3, #103	@ 0x67
 800676e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006770:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006772:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006774:	4299      	cmp	r1, r3
 8006776:	db06      	blt.n	8006786 <_printf_float+0x1ea>
 8006778:	682b      	ldr	r3, [r5, #0]
 800677a:	6129      	str	r1, [r5, #16]
 800677c:	07db      	lsls	r3, r3, #31
 800677e:	d5f1      	bpl.n	8006764 <_printf_float+0x1c8>
 8006780:	3101      	adds	r1, #1
 8006782:	6129      	str	r1, [r5, #16]
 8006784:	e7ee      	b.n	8006764 <_printf_float+0x1c8>
 8006786:	2201      	movs	r2, #1
 8006788:	2900      	cmp	r1, #0
 800678a:	dce0      	bgt.n	800674e <_printf_float+0x1b2>
 800678c:	1892      	adds	r2, r2, r2
 800678e:	1a52      	subs	r2, r2, r1
 8006790:	e7dd      	b.n	800674e <_printf_float+0x1b2>
 8006792:	682a      	ldr	r2, [r5, #0]
 8006794:	0553      	lsls	r3, r2, #21
 8006796:	d408      	bmi.n	80067aa <_printf_float+0x20e>
 8006798:	692b      	ldr	r3, [r5, #16]
 800679a:	003a      	movs	r2, r7
 800679c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800679e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067a0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80067a2:	47a0      	blx	r4
 80067a4:	3001      	adds	r0, #1
 80067a6:	d129      	bne.n	80067fc <_printf_float+0x260>
 80067a8:	e754      	b.n	8006654 <_printf_float+0xb8>
 80067aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80067ac:	2b65      	cmp	r3, #101	@ 0x65
 80067ae:	d800      	bhi.n	80067b2 <_printf_float+0x216>
 80067b0:	e0db      	b.n	800696a <_printf_float+0x3ce>
 80067b2:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 80067b4:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80067b6:	2200      	movs	r2, #0
 80067b8:	2300      	movs	r3, #0
 80067ba:	f7f9 fe47 	bl	800044c <__aeabi_dcmpeq>
 80067be:	2800      	cmp	r0, #0
 80067c0:	d033      	beq.n	800682a <_printf_float+0x28e>
 80067c2:	2301      	movs	r3, #1
 80067c4:	4a37      	ldr	r2, [pc, #220]	@ (80068a4 <_printf_float+0x308>)
 80067c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067ca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80067cc:	47a0      	blx	r4
 80067ce:	3001      	adds	r0, #1
 80067d0:	d100      	bne.n	80067d4 <_printf_float+0x238>
 80067d2:	e73f      	b.n	8006654 <_printf_float+0xb8>
 80067d4:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80067d6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80067d8:	42b3      	cmp	r3, r6
 80067da:	db02      	blt.n	80067e2 <_printf_float+0x246>
 80067dc:	682b      	ldr	r3, [r5, #0]
 80067de:	07db      	lsls	r3, r3, #31
 80067e0:	d50c      	bpl.n	80067fc <_printf_float+0x260>
 80067e2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80067e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067e6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80067e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067ec:	47a0      	blx	r4
 80067ee:	2400      	movs	r4, #0
 80067f0:	3001      	adds	r0, #1
 80067f2:	d100      	bne.n	80067f6 <_printf_float+0x25a>
 80067f4:	e72e      	b.n	8006654 <_printf_float+0xb8>
 80067f6:	1e73      	subs	r3, r6, #1
 80067f8:	42a3      	cmp	r3, r4
 80067fa:	dc0a      	bgt.n	8006812 <_printf_float+0x276>
 80067fc:	682b      	ldr	r3, [r5, #0]
 80067fe:	079b      	lsls	r3, r3, #30
 8006800:	d500      	bpl.n	8006804 <_printf_float+0x268>
 8006802:	e106      	b.n	8006a12 <_printf_float+0x476>
 8006804:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006806:	68e8      	ldr	r0, [r5, #12]
 8006808:	4298      	cmp	r0, r3
 800680a:	db00      	blt.n	800680e <_printf_float+0x272>
 800680c:	e724      	b.n	8006658 <_printf_float+0xbc>
 800680e:	0018      	movs	r0, r3
 8006810:	e722      	b.n	8006658 <_printf_float+0xbc>
 8006812:	002a      	movs	r2, r5
 8006814:	2301      	movs	r3, #1
 8006816:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006818:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800681a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800681c:	321a      	adds	r2, #26
 800681e:	47b8      	blx	r7
 8006820:	3001      	adds	r0, #1
 8006822:	d100      	bne.n	8006826 <_printf_float+0x28a>
 8006824:	e716      	b.n	8006654 <_printf_float+0xb8>
 8006826:	3401      	adds	r4, #1
 8006828:	e7e5      	b.n	80067f6 <_printf_float+0x25a>
 800682a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800682c:	2b00      	cmp	r3, #0
 800682e:	dc3b      	bgt.n	80068a8 <_printf_float+0x30c>
 8006830:	2301      	movs	r3, #1
 8006832:	4a1c      	ldr	r2, [pc, #112]	@ (80068a4 <_printf_float+0x308>)
 8006834:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006836:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006838:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800683a:	47a0      	blx	r4
 800683c:	3001      	adds	r0, #1
 800683e:	d100      	bne.n	8006842 <_printf_float+0x2a6>
 8006840:	e708      	b.n	8006654 <_printf_float+0xb8>
 8006842:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006844:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006846:	4333      	orrs	r3, r6
 8006848:	d102      	bne.n	8006850 <_printf_float+0x2b4>
 800684a:	682b      	ldr	r3, [r5, #0]
 800684c:	07db      	lsls	r3, r3, #31
 800684e:	d5d5      	bpl.n	80067fc <_printf_float+0x260>
 8006850:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006852:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006854:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006856:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006858:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800685a:	47a0      	blx	r4
 800685c:	2300      	movs	r3, #0
 800685e:	3001      	adds	r0, #1
 8006860:	d100      	bne.n	8006864 <_printf_float+0x2c8>
 8006862:	e6f7      	b.n	8006654 <_printf_float+0xb8>
 8006864:	930c      	str	r3, [sp, #48]	@ 0x30
 8006866:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006868:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800686a:	425b      	negs	r3, r3
 800686c:	4293      	cmp	r3, r2
 800686e:	dc01      	bgt.n	8006874 <_printf_float+0x2d8>
 8006870:	0033      	movs	r3, r6
 8006872:	e792      	b.n	800679a <_printf_float+0x1fe>
 8006874:	002a      	movs	r2, r5
 8006876:	2301      	movs	r3, #1
 8006878:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800687a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800687c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800687e:	321a      	adds	r2, #26
 8006880:	47a0      	blx	r4
 8006882:	3001      	adds	r0, #1
 8006884:	d100      	bne.n	8006888 <_printf_float+0x2ec>
 8006886:	e6e5      	b.n	8006654 <_printf_float+0xb8>
 8006888:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800688a:	3301      	adds	r3, #1
 800688c:	e7ea      	b.n	8006864 <_printf_float+0x2c8>
 800688e:	46c0      	nop			@ (mov r8, r8)
 8006890:	7fefffff 	.word	0x7fefffff
 8006894:	0800adf4 	.word	0x0800adf4
 8006898:	0800adf0 	.word	0x0800adf0
 800689c:	0800adfc 	.word	0x0800adfc
 80068a0:	0800adf8 	.word	0x0800adf8
 80068a4:	0800ae00 	.word	0x0800ae00
 80068a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80068aa:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80068ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80068ae:	429e      	cmp	r6, r3
 80068b0:	dd00      	ble.n	80068b4 <_printf_float+0x318>
 80068b2:	001e      	movs	r6, r3
 80068b4:	2e00      	cmp	r6, #0
 80068b6:	dc31      	bgt.n	800691c <_printf_float+0x380>
 80068b8:	43f3      	mvns	r3, r6
 80068ba:	2400      	movs	r4, #0
 80068bc:	17db      	asrs	r3, r3, #31
 80068be:	4033      	ands	r3, r6
 80068c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80068c2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 80068c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068c6:	1af3      	subs	r3, r6, r3
 80068c8:	42a3      	cmp	r3, r4
 80068ca:	dc30      	bgt.n	800692e <_printf_float+0x392>
 80068cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80068ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80068d0:	429a      	cmp	r2, r3
 80068d2:	dc38      	bgt.n	8006946 <_printf_float+0x3aa>
 80068d4:	682b      	ldr	r3, [r5, #0]
 80068d6:	07db      	lsls	r3, r3, #31
 80068d8:	d435      	bmi.n	8006946 <_printf_float+0x3aa>
 80068da:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80068dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80068de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80068e0:	1b9b      	subs	r3, r3, r6
 80068e2:	1b14      	subs	r4, r2, r4
 80068e4:	429c      	cmp	r4, r3
 80068e6:	dd00      	ble.n	80068ea <_printf_float+0x34e>
 80068e8:	001c      	movs	r4, r3
 80068ea:	2c00      	cmp	r4, #0
 80068ec:	dc34      	bgt.n	8006958 <_printf_float+0x3bc>
 80068ee:	43e3      	mvns	r3, r4
 80068f0:	2600      	movs	r6, #0
 80068f2:	17db      	asrs	r3, r3, #31
 80068f4:	401c      	ands	r4, r3
 80068f6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80068f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	1b1b      	subs	r3, r3, r4
 80068fe:	42b3      	cmp	r3, r6
 8006900:	dc00      	bgt.n	8006904 <_printf_float+0x368>
 8006902:	e77b      	b.n	80067fc <_printf_float+0x260>
 8006904:	002a      	movs	r2, r5
 8006906:	2301      	movs	r3, #1
 8006908:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800690a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800690c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800690e:	321a      	adds	r2, #26
 8006910:	47b8      	blx	r7
 8006912:	3001      	adds	r0, #1
 8006914:	d100      	bne.n	8006918 <_printf_float+0x37c>
 8006916:	e69d      	b.n	8006654 <_printf_float+0xb8>
 8006918:	3601      	adds	r6, #1
 800691a:	e7ec      	b.n	80068f6 <_printf_float+0x35a>
 800691c:	0033      	movs	r3, r6
 800691e:	003a      	movs	r2, r7
 8006920:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006924:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006926:	47a0      	blx	r4
 8006928:	3001      	adds	r0, #1
 800692a:	d1c5      	bne.n	80068b8 <_printf_float+0x31c>
 800692c:	e692      	b.n	8006654 <_printf_float+0xb8>
 800692e:	002a      	movs	r2, r5
 8006930:	2301      	movs	r3, #1
 8006932:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006934:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006936:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006938:	321a      	adds	r2, #26
 800693a:	47b0      	blx	r6
 800693c:	3001      	adds	r0, #1
 800693e:	d100      	bne.n	8006942 <_printf_float+0x3a6>
 8006940:	e688      	b.n	8006654 <_printf_float+0xb8>
 8006942:	3401      	adds	r4, #1
 8006944:	e7bd      	b.n	80068c2 <_printf_float+0x326>
 8006946:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006948:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800694a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800694c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800694e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006950:	47a0      	blx	r4
 8006952:	3001      	adds	r0, #1
 8006954:	d1c1      	bne.n	80068da <_printf_float+0x33e>
 8006956:	e67d      	b.n	8006654 <_printf_float+0xb8>
 8006958:	19ba      	adds	r2, r7, r6
 800695a:	0023      	movs	r3, r4
 800695c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800695e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006960:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006962:	47b0      	blx	r6
 8006964:	3001      	adds	r0, #1
 8006966:	d1c2      	bne.n	80068ee <_printf_float+0x352>
 8006968:	e674      	b.n	8006654 <_printf_float+0xb8>
 800696a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800696c:	930c      	str	r3, [sp, #48]	@ 0x30
 800696e:	2b01      	cmp	r3, #1
 8006970:	dc02      	bgt.n	8006978 <_printf_float+0x3dc>
 8006972:	2301      	movs	r3, #1
 8006974:	421a      	tst	r2, r3
 8006976:	d039      	beq.n	80069ec <_printf_float+0x450>
 8006978:	2301      	movs	r3, #1
 800697a:	003a      	movs	r2, r7
 800697c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800697e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006980:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006982:	47b0      	blx	r6
 8006984:	3001      	adds	r0, #1
 8006986:	d100      	bne.n	800698a <_printf_float+0x3ee>
 8006988:	e664      	b.n	8006654 <_printf_float+0xb8>
 800698a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800698c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800698e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006990:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006992:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006994:	47b0      	blx	r6
 8006996:	3001      	adds	r0, #1
 8006998:	d100      	bne.n	800699c <_printf_float+0x400>
 800699a:	e65b      	b.n	8006654 <_printf_float+0xb8>
 800699c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800699e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 80069a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069a2:	2200      	movs	r2, #0
 80069a4:	3b01      	subs	r3, #1
 80069a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80069a8:	2300      	movs	r3, #0
 80069aa:	f7f9 fd4f 	bl	800044c <__aeabi_dcmpeq>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	d11a      	bne.n	80069e8 <_printf_float+0x44c>
 80069b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069b4:	1c7a      	adds	r2, r7, #1
 80069b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069ba:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80069bc:	47b0      	blx	r6
 80069be:	3001      	adds	r0, #1
 80069c0:	d10e      	bne.n	80069e0 <_printf_float+0x444>
 80069c2:	e647      	b.n	8006654 <_printf_float+0xb8>
 80069c4:	002a      	movs	r2, r5
 80069c6:	2301      	movs	r3, #1
 80069c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069cc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80069ce:	321a      	adds	r2, #26
 80069d0:	47b8      	blx	r7
 80069d2:	3001      	adds	r0, #1
 80069d4:	d100      	bne.n	80069d8 <_printf_float+0x43c>
 80069d6:	e63d      	b.n	8006654 <_printf_float+0xb8>
 80069d8:	3601      	adds	r6, #1
 80069da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069dc:	429e      	cmp	r6, r3
 80069de:	dbf1      	blt.n	80069c4 <_printf_float+0x428>
 80069e0:	002a      	movs	r2, r5
 80069e2:	0023      	movs	r3, r4
 80069e4:	3250      	adds	r2, #80	@ 0x50
 80069e6:	e6d9      	b.n	800679c <_printf_float+0x200>
 80069e8:	2600      	movs	r6, #0
 80069ea:	e7f6      	b.n	80069da <_printf_float+0x43e>
 80069ec:	003a      	movs	r2, r7
 80069ee:	e7e2      	b.n	80069b6 <_printf_float+0x41a>
 80069f0:	002a      	movs	r2, r5
 80069f2:	2301      	movs	r3, #1
 80069f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80069f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069f8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80069fa:	3219      	adds	r2, #25
 80069fc:	47b0      	blx	r6
 80069fe:	3001      	adds	r0, #1
 8006a00:	d100      	bne.n	8006a04 <_printf_float+0x468>
 8006a02:	e627      	b.n	8006654 <_printf_float+0xb8>
 8006a04:	3401      	adds	r4, #1
 8006a06:	68eb      	ldr	r3, [r5, #12]
 8006a08:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006a0a:	1a9b      	subs	r3, r3, r2
 8006a0c:	42a3      	cmp	r3, r4
 8006a0e:	dcef      	bgt.n	80069f0 <_printf_float+0x454>
 8006a10:	e6f8      	b.n	8006804 <_printf_float+0x268>
 8006a12:	2400      	movs	r4, #0
 8006a14:	e7f7      	b.n	8006a06 <_printf_float+0x46a>
 8006a16:	46c0      	nop			@ (mov r8, r8)

08006a18 <_printf_common>:
 8006a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a1a:	0016      	movs	r6, r2
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	688a      	ldr	r2, [r1, #8]
 8006a20:	690b      	ldr	r3, [r1, #16]
 8006a22:	000c      	movs	r4, r1
 8006a24:	9000      	str	r0, [sp, #0]
 8006a26:	4293      	cmp	r3, r2
 8006a28:	da00      	bge.n	8006a2c <_printf_common+0x14>
 8006a2a:	0013      	movs	r3, r2
 8006a2c:	0022      	movs	r2, r4
 8006a2e:	6033      	str	r3, [r6, #0]
 8006a30:	3243      	adds	r2, #67	@ 0x43
 8006a32:	7812      	ldrb	r2, [r2, #0]
 8006a34:	2a00      	cmp	r2, #0
 8006a36:	d001      	beq.n	8006a3c <_printf_common+0x24>
 8006a38:	3301      	adds	r3, #1
 8006a3a:	6033      	str	r3, [r6, #0]
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	069b      	lsls	r3, r3, #26
 8006a40:	d502      	bpl.n	8006a48 <_printf_common+0x30>
 8006a42:	6833      	ldr	r3, [r6, #0]
 8006a44:	3302      	adds	r3, #2
 8006a46:	6033      	str	r3, [r6, #0]
 8006a48:	6822      	ldr	r2, [r4, #0]
 8006a4a:	2306      	movs	r3, #6
 8006a4c:	0015      	movs	r5, r2
 8006a4e:	401d      	ands	r5, r3
 8006a50:	421a      	tst	r2, r3
 8006a52:	d027      	beq.n	8006aa4 <_printf_common+0x8c>
 8006a54:	0023      	movs	r3, r4
 8006a56:	3343      	adds	r3, #67	@ 0x43
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	1e5a      	subs	r2, r3, #1
 8006a5c:	4193      	sbcs	r3, r2
 8006a5e:	6822      	ldr	r2, [r4, #0]
 8006a60:	0692      	lsls	r2, r2, #26
 8006a62:	d430      	bmi.n	8006ac6 <_printf_common+0xae>
 8006a64:	0022      	movs	r2, r4
 8006a66:	9901      	ldr	r1, [sp, #4]
 8006a68:	9800      	ldr	r0, [sp, #0]
 8006a6a:	9d08      	ldr	r5, [sp, #32]
 8006a6c:	3243      	adds	r2, #67	@ 0x43
 8006a6e:	47a8      	blx	r5
 8006a70:	3001      	adds	r0, #1
 8006a72:	d025      	beq.n	8006ac0 <_printf_common+0xa8>
 8006a74:	2206      	movs	r2, #6
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	2500      	movs	r5, #0
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d105      	bne.n	8006a8c <_printf_common+0x74>
 8006a80:	6833      	ldr	r3, [r6, #0]
 8006a82:	68e5      	ldr	r5, [r4, #12]
 8006a84:	1aed      	subs	r5, r5, r3
 8006a86:	43eb      	mvns	r3, r5
 8006a88:	17db      	asrs	r3, r3, #31
 8006a8a:	401d      	ands	r5, r3
 8006a8c:	68a3      	ldr	r3, [r4, #8]
 8006a8e:	6922      	ldr	r2, [r4, #16]
 8006a90:	4293      	cmp	r3, r2
 8006a92:	dd01      	ble.n	8006a98 <_printf_common+0x80>
 8006a94:	1a9b      	subs	r3, r3, r2
 8006a96:	18ed      	adds	r5, r5, r3
 8006a98:	2600      	movs	r6, #0
 8006a9a:	42b5      	cmp	r5, r6
 8006a9c:	d120      	bne.n	8006ae0 <_printf_common+0xc8>
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	e010      	b.n	8006ac4 <_printf_common+0xac>
 8006aa2:	3501      	adds	r5, #1
 8006aa4:	68e3      	ldr	r3, [r4, #12]
 8006aa6:	6832      	ldr	r2, [r6, #0]
 8006aa8:	1a9b      	subs	r3, r3, r2
 8006aaa:	42ab      	cmp	r3, r5
 8006aac:	ddd2      	ble.n	8006a54 <_printf_common+0x3c>
 8006aae:	0022      	movs	r2, r4
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	9901      	ldr	r1, [sp, #4]
 8006ab4:	9800      	ldr	r0, [sp, #0]
 8006ab6:	9f08      	ldr	r7, [sp, #32]
 8006ab8:	3219      	adds	r2, #25
 8006aba:	47b8      	blx	r7
 8006abc:	3001      	adds	r0, #1
 8006abe:	d1f0      	bne.n	8006aa2 <_printf_common+0x8a>
 8006ac0:	2001      	movs	r0, #1
 8006ac2:	4240      	negs	r0, r0
 8006ac4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ac6:	2030      	movs	r0, #48	@ 0x30
 8006ac8:	18e1      	adds	r1, r4, r3
 8006aca:	3143      	adds	r1, #67	@ 0x43
 8006acc:	7008      	strb	r0, [r1, #0]
 8006ace:	0021      	movs	r1, r4
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	3145      	adds	r1, #69	@ 0x45
 8006ad4:	7809      	ldrb	r1, [r1, #0]
 8006ad6:	18a2      	adds	r2, r4, r2
 8006ad8:	3243      	adds	r2, #67	@ 0x43
 8006ada:	3302      	adds	r3, #2
 8006adc:	7011      	strb	r1, [r2, #0]
 8006ade:	e7c1      	b.n	8006a64 <_printf_common+0x4c>
 8006ae0:	0022      	movs	r2, r4
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	9901      	ldr	r1, [sp, #4]
 8006ae6:	9800      	ldr	r0, [sp, #0]
 8006ae8:	9f08      	ldr	r7, [sp, #32]
 8006aea:	321a      	adds	r2, #26
 8006aec:	47b8      	blx	r7
 8006aee:	3001      	adds	r0, #1
 8006af0:	d0e6      	beq.n	8006ac0 <_printf_common+0xa8>
 8006af2:	3601      	adds	r6, #1
 8006af4:	e7d1      	b.n	8006a9a <_printf_common+0x82>
	...

08006af8 <_printf_i>:
 8006af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006afa:	b08b      	sub	sp, #44	@ 0x2c
 8006afc:	9206      	str	r2, [sp, #24]
 8006afe:	000a      	movs	r2, r1
 8006b00:	3243      	adds	r2, #67	@ 0x43
 8006b02:	9307      	str	r3, [sp, #28]
 8006b04:	9005      	str	r0, [sp, #20]
 8006b06:	9203      	str	r2, [sp, #12]
 8006b08:	7e0a      	ldrb	r2, [r1, #24]
 8006b0a:	000c      	movs	r4, r1
 8006b0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b0e:	2a78      	cmp	r2, #120	@ 0x78
 8006b10:	d809      	bhi.n	8006b26 <_printf_i+0x2e>
 8006b12:	2a62      	cmp	r2, #98	@ 0x62
 8006b14:	d80b      	bhi.n	8006b2e <_printf_i+0x36>
 8006b16:	2a00      	cmp	r2, #0
 8006b18:	d100      	bne.n	8006b1c <_printf_i+0x24>
 8006b1a:	e0ba      	b.n	8006c92 <_printf_i+0x19a>
 8006b1c:	497a      	ldr	r1, [pc, #488]	@ (8006d08 <_printf_i+0x210>)
 8006b1e:	9104      	str	r1, [sp, #16]
 8006b20:	2a58      	cmp	r2, #88	@ 0x58
 8006b22:	d100      	bne.n	8006b26 <_printf_i+0x2e>
 8006b24:	e08e      	b.n	8006c44 <_printf_i+0x14c>
 8006b26:	0025      	movs	r5, r4
 8006b28:	3542      	adds	r5, #66	@ 0x42
 8006b2a:	702a      	strb	r2, [r5, #0]
 8006b2c:	e022      	b.n	8006b74 <_printf_i+0x7c>
 8006b2e:	0010      	movs	r0, r2
 8006b30:	3863      	subs	r0, #99	@ 0x63
 8006b32:	2815      	cmp	r0, #21
 8006b34:	d8f7      	bhi.n	8006b26 <_printf_i+0x2e>
 8006b36:	f7f9 faf9 	bl	800012c <__gnu_thumb1_case_shi>
 8006b3a:	0016      	.short	0x0016
 8006b3c:	fff6001f 	.word	0xfff6001f
 8006b40:	fff6fff6 	.word	0xfff6fff6
 8006b44:	001ffff6 	.word	0x001ffff6
 8006b48:	fff6fff6 	.word	0xfff6fff6
 8006b4c:	fff6fff6 	.word	0xfff6fff6
 8006b50:	0036009f 	.word	0x0036009f
 8006b54:	fff6007e 	.word	0xfff6007e
 8006b58:	00b0fff6 	.word	0x00b0fff6
 8006b5c:	0036fff6 	.word	0x0036fff6
 8006b60:	fff6fff6 	.word	0xfff6fff6
 8006b64:	0082      	.short	0x0082
 8006b66:	0025      	movs	r5, r4
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	3542      	adds	r5, #66	@ 0x42
 8006b6c:	1d11      	adds	r1, r2, #4
 8006b6e:	6019      	str	r1, [r3, #0]
 8006b70:	6813      	ldr	r3, [r2, #0]
 8006b72:	702b      	strb	r3, [r5, #0]
 8006b74:	2301      	movs	r3, #1
 8006b76:	e09e      	b.n	8006cb6 <_printf_i+0x1be>
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	6809      	ldr	r1, [r1, #0]
 8006b7c:	1d02      	adds	r2, r0, #4
 8006b7e:	060d      	lsls	r5, r1, #24
 8006b80:	d50b      	bpl.n	8006b9a <_printf_i+0xa2>
 8006b82:	6806      	ldr	r6, [r0, #0]
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	2e00      	cmp	r6, #0
 8006b88:	da03      	bge.n	8006b92 <_printf_i+0x9a>
 8006b8a:	232d      	movs	r3, #45	@ 0x2d
 8006b8c:	9a03      	ldr	r2, [sp, #12]
 8006b8e:	4276      	negs	r6, r6
 8006b90:	7013      	strb	r3, [r2, #0]
 8006b92:	4b5d      	ldr	r3, [pc, #372]	@ (8006d08 <_printf_i+0x210>)
 8006b94:	270a      	movs	r7, #10
 8006b96:	9304      	str	r3, [sp, #16]
 8006b98:	e018      	b.n	8006bcc <_printf_i+0xd4>
 8006b9a:	6806      	ldr	r6, [r0, #0]
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	0649      	lsls	r1, r1, #25
 8006ba0:	d5f1      	bpl.n	8006b86 <_printf_i+0x8e>
 8006ba2:	b236      	sxth	r6, r6
 8006ba4:	e7ef      	b.n	8006b86 <_printf_i+0x8e>
 8006ba6:	6808      	ldr	r0, [r1, #0]
 8006ba8:	6819      	ldr	r1, [r3, #0]
 8006baa:	c940      	ldmia	r1!, {r6}
 8006bac:	0605      	lsls	r5, r0, #24
 8006bae:	d402      	bmi.n	8006bb6 <_printf_i+0xbe>
 8006bb0:	0640      	lsls	r0, r0, #25
 8006bb2:	d500      	bpl.n	8006bb6 <_printf_i+0xbe>
 8006bb4:	b2b6      	uxth	r6, r6
 8006bb6:	6019      	str	r1, [r3, #0]
 8006bb8:	4b53      	ldr	r3, [pc, #332]	@ (8006d08 <_printf_i+0x210>)
 8006bba:	270a      	movs	r7, #10
 8006bbc:	9304      	str	r3, [sp, #16]
 8006bbe:	2a6f      	cmp	r2, #111	@ 0x6f
 8006bc0:	d100      	bne.n	8006bc4 <_printf_i+0xcc>
 8006bc2:	3f02      	subs	r7, #2
 8006bc4:	0023      	movs	r3, r4
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	3343      	adds	r3, #67	@ 0x43
 8006bca:	701a      	strb	r2, [r3, #0]
 8006bcc:	6863      	ldr	r3, [r4, #4]
 8006bce:	60a3      	str	r3, [r4, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	db06      	blt.n	8006be2 <_printf_i+0xea>
 8006bd4:	2104      	movs	r1, #4
 8006bd6:	6822      	ldr	r2, [r4, #0]
 8006bd8:	9d03      	ldr	r5, [sp, #12]
 8006bda:	438a      	bics	r2, r1
 8006bdc:	6022      	str	r2, [r4, #0]
 8006bde:	4333      	orrs	r3, r6
 8006be0:	d00c      	beq.n	8006bfc <_printf_i+0x104>
 8006be2:	9d03      	ldr	r5, [sp, #12]
 8006be4:	0030      	movs	r0, r6
 8006be6:	0039      	movs	r1, r7
 8006be8:	f7f9 fb30 	bl	800024c <__aeabi_uidivmod>
 8006bec:	9b04      	ldr	r3, [sp, #16]
 8006bee:	3d01      	subs	r5, #1
 8006bf0:	5c5b      	ldrb	r3, [r3, r1]
 8006bf2:	702b      	strb	r3, [r5, #0]
 8006bf4:	0033      	movs	r3, r6
 8006bf6:	0006      	movs	r6, r0
 8006bf8:	429f      	cmp	r7, r3
 8006bfa:	d9f3      	bls.n	8006be4 <_printf_i+0xec>
 8006bfc:	2f08      	cmp	r7, #8
 8006bfe:	d109      	bne.n	8006c14 <_printf_i+0x11c>
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	07db      	lsls	r3, r3, #31
 8006c04:	d506      	bpl.n	8006c14 <_printf_i+0x11c>
 8006c06:	6862      	ldr	r2, [r4, #4]
 8006c08:	6923      	ldr	r3, [r4, #16]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	dc02      	bgt.n	8006c14 <_printf_i+0x11c>
 8006c0e:	2330      	movs	r3, #48	@ 0x30
 8006c10:	3d01      	subs	r5, #1
 8006c12:	702b      	strb	r3, [r5, #0]
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	1b5b      	subs	r3, r3, r5
 8006c18:	6123      	str	r3, [r4, #16]
 8006c1a:	9b07      	ldr	r3, [sp, #28]
 8006c1c:	0021      	movs	r1, r4
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	9805      	ldr	r0, [sp, #20]
 8006c22:	9b06      	ldr	r3, [sp, #24]
 8006c24:	aa09      	add	r2, sp, #36	@ 0x24
 8006c26:	f7ff fef7 	bl	8006a18 <_printf_common>
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	d148      	bne.n	8006cc0 <_printf_i+0x1c8>
 8006c2e:	2001      	movs	r0, #1
 8006c30:	4240      	negs	r0, r0
 8006c32:	b00b      	add	sp, #44	@ 0x2c
 8006c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c36:	2220      	movs	r2, #32
 8006c38:	6809      	ldr	r1, [r1, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	6022      	str	r2, [r4, #0]
 8006c3e:	2278      	movs	r2, #120	@ 0x78
 8006c40:	4932      	ldr	r1, [pc, #200]	@ (8006d0c <_printf_i+0x214>)
 8006c42:	9104      	str	r1, [sp, #16]
 8006c44:	0021      	movs	r1, r4
 8006c46:	3145      	adds	r1, #69	@ 0x45
 8006c48:	700a      	strb	r2, [r1, #0]
 8006c4a:	6819      	ldr	r1, [r3, #0]
 8006c4c:	6822      	ldr	r2, [r4, #0]
 8006c4e:	c940      	ldmia	r1!, {r6}
 8006c50:	0610      	lsls	r0, r2, #24
 8006c52:	d402      	bmi.n	8006c5a <_printf_i+0x162>
 8006c54:	0650      	lsls	r0, r2, #25
 8006c56:	d500      	bpl.n	8006c5a <_printf_i+0x162>
 8006c58:	b2b6      	uxth	r6, r6
 8006c5a:	6019      	str	r1, [r3, #0]
 8006c5c:	07d3      	lsls	r3, r2, #31
 8006c5e:	d502      	bpl.n	8006c66 <_printf_i+0x16e>
 8006c60:	2320      	movs	r3, #32
 8006c62:	4313      	orrs	r3, r2
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	2e00      	cmp	r6, #0
 8006c68:	d001      	beq.n	8006c6e <_printf_i+0x176>
 8006c6a:	2710      	movs	r7, #16
 8006c6c:	e7aa      	b.n	8006bc4 <_printf_i+0xcc>
 8006c6e:	2220      	movs	r2, #32
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	4393      	bics	r3, r2
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	e7f8      	b.n	8006c6a <_printf_i+0x172>
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	680d      	ldr	r5, [r1, #0]
 8006c7c:	1d10      	adds	r0, r2, #4
 8006c7e:	6949      	ldr	r1, [r1, #20]
 8006c80:	6018      	str	r0, [r3, #0]
 8006c82:	6813      	ldr	r3, [r2, #0]
 8006c84:	062e      	lsls	r6, r5, #24
 8006c86:	d501      	bpl.n	8006c8c <_printf_i+0x194>
 8006c88:	6019      	str	r1, [r3, #0]
 8006c8a:	e002      	b.n	8006c92 <_printf_i+0x19a>
 8006c8c:	066d      	lsls	r5, r5, #25
 8006c8e:	d5fb      	bpl.n	8006c88 <_printf_i+0x190>
 8006c90:	8019      	strh	r1, [r3, #0]
 8006c92:	2300      	movs	r3, #0
 8006c94:	9d03      	ldr	r5, [sp, #12]
 8006c96:	6123      	str	r3, [r4, #16]
 8006c98:	e7bf      	b.n	8006c1a <_printf_i+0x122>
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	1d11      	adds	r1, r2, #4
 8006c9e:	6019      	str	r1, [r3, #0]
 8006ca0:	6815      	ldr	r5, [r2, #0]
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	0028      	movs	r0, r5
 8006ca6:	6862      	ldr	r2, [r4, #4]
 8006ca8:	f000 fc2d 	bl	8007506 <memchr>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	d001      	beq.n	8006cb4 <_printf_i+0x1bc>
 8006cb0:	1b40      	subs	r0, r0, r5
 8006cb2:	6060      	str	r0, [r4, #4]
 8006cb4:	6863      	ldr	r3, [r4, #4]
 8006cb6:	6123      	str	r3, [r4, #16]
 8006cb8:	2300      	movs	r3, #0
 8006cba:	9a03      	ldr	r2, [sp, #12]
 8006cbc:	7013      	strb	r3, [r2, #0]
 8006cbe:	e7ac      	b.n	8006c1a <_printf_i+0x122>
 8006cc0:	002a      	movs	r2, r5
 8006cc2:	6923      	ldr	r3, [r4, #16]
 8006cc4:	9906      	ldr	r1, [sp, #24]
 8006cc6:	9805      	ldr	r0, [sp, #20]
 8006cc8:	9d07      	ldr	r5, [sp, #28]
 8006cca:	47a8      	blx	r5
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d0ae      	beq.n	8006c2e <_printf_i+0x136>
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	079b      	lsls	r3, r3, #30
 8006cd4:	d415      	bmi.n	8006d02 <_printf_i+0x20a>
 8006cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cd8:	68e0      	ldr	r0, [r4, #12]
 8006cda:	4298      	cmp	r0, r3
 8006cdc:	daa9      	bge.n	8006c32 <_printf_i+0x13a>
 8006cde:	0018      	movs	r0, r3
 8006ce0:	e7a7      	b.n	8006c32 <_printf_i+0x13a>
 8006ce2:	0022      	movs	r2, r4
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	9906      	ldr	r1, [sp, #24]
 8006ce8:	9805      	ldr	r0, [sp, #20]
 8006cea:	9e07      	ldr	r6, [sp, #28]
 8006cec:	3219      	adds	r2, #25
 8006cee:	47b0      	blx	r6
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d09c      	beq.n	8006c2e <_printf_i+0x136>
 8006cf4:	3501      	adds	r5, #1
 8006cf6:	68e3      	ldr	r3, [r4, #12]
 8006cf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	42ab      	cmp	r3, r5
 8006cfe:	dcf0      	bgt.n	8006ce2 <_printf_i+0x1ea>
 8006d00:	e7e9      	b.n	8006cd6 <_printf_i+0x1de>
 8006d02:	2500      	movs	r5, #0
 8006d04:	e7f7      	b.n	8006cf6 <_printf_i+0x1fe>
 8006d06:	46c0      	nop			@ (mov r8, r8)
 8006d08:	0800ae02 	.word	0x0800ae02
 8006d0c:	0800ae13 	.word	0x0800ae13

08006d10 <_scanf_float>:
 8006d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d12:	b08b      	sub	sp, #44	@ 0x2c
 8006d14:	0016      	movs	r6, r2
 8006d16:	9003      	str	r0, [sp, #12]
 8006d18:	22ae      	movs	r2, #174	@ 0xae
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	9307      	str	r3, [sp, #28]
 8006d1e:	688b      	ldr	r3, [r1, #8]
 8006d20:	000c      	movs	r4, r1
 8006d22:	1e59      	subs	r1, r3, #1
 8006d24:	0052      	lsls	r2, r2, #1
 8006d26:	9006      	str	r0, [sp, #24]
 8006d28:	4291      	cmp	r1, r2
 8006d2a:	d905      	bls.n	8006d38 <_scanf_float+0x28>
 8006d2c:	3b5e      	subs	r3, #94	@ 0x5e
 8006d2e:	3bff      	subs	r3, #255	@ 0xff
 8006d30:	9306      	str	r3, [sp, #24]
 8006d32:	235e      	movs	r3, #94	@ 0x5e
 8006d34:	33ff      	adds	r3, #255	@ 0xff
 8006d36:	60a3      	str	r3, [r4, #8]
 8006d38:	23f0      	movs	r3, #240	@ 0xf0
 8006d3a:	6822      	ldr	r2, [r4, #0]
 8006d3c:	00db      	lsls	r3, r3, #3
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	0023      	movs	r3, r4
 8006d44:	2500      	movs	r5, #0
 8006d46:	331c      	adds	r3, #28
 8006d48:	001f      	movs	r7, r3
 8006d4a:	9304      	str	r3, [sp, #16]
 8006d4c:	9502      	str	r5, [sp, #8]
 8006d4e:	9509      	str	r5, [sp, #36]	@ 0x24
 8006d50:	9508      	str	r5, [sp, #32]
 8006d52:	9501      	str	r5, [sp, #4]
 8006d54:	9505      	str	r5, [sp, #20]
 8006d56:	68a2      	ldr	r2, [r4, #8]
 8006d58:	2a00      	cmp	r2, #0
 8006d5a:	d00a      	beq.n	8006d72 <_scanf_float+0x62>
 8006d5c:	6833      	ldr	r3, [r6, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b4e      	cmp	r3, #78	@ 0x4e
 8006d62:	d844      	bhi.n	8006dee <_scanf_float+0xde>
 8006d64:	0018      	movs	r0, r3
 8006d66:	2b40      	cmp	r3, #64	@ 0x40
 8006d68:	d82c      	bhi.n	8006dc4 <_scanf_float+0xb4>
 8006d6a:	382b      	subs	r0, #43	@ 0x2b
 8006d6c:	b2c1      	uxtb	r1, r0
 8006d6e:	290e      	cmp	r1, #14
 8006d70:	d92a      	bls.n	8006dc8 <_scanf_float+0xb8>
 8006d72:	9b01      	ldr	r3, [sp, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <_scanf_float+0x70>
 8006d78:	6823      	ldr	r3, [r4, #0]
 8006d7a:	4aa6      	ldr	r2, [pc, #664]	@ (8007014 <_scanf_float+0x304>)
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	6023      	str	r3, [r4, #0]
 8006d80:	9b02      	ldr	r3, [sp, #8]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d900      	bls.n	8006d8a <_scanf_float+0x7a>
 8006d88:	e0fe      	b.n	8006f88 <_scanf_float+0x278>
 8006d8a:	25be      	movs	r5, #190	@ 0xbe
 8006d8c:	006d      	lsls	r5, r5, #1
 8006d8e:	9b04      	ldr	r3, [sp, #16]
 8006d90:	429f      	cmp	r7, r3
 8006d92:	d900      	bls.n	8006d96 <_scanf_float+0x86>
 8006d94:	e0ee      	b.n	8006f74 <_scanf_float+0x264>
 8006d96:	2001      	movs	r0, #1
 8006d98:	b00b      	add	sp, #44	@ 0x2c
 8006d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d9c:	0018      	movs	r0, r3
 8006d9e:	3861      	subs	r0, #97	@ 0x61
 8006da0:	280d      	cmp	r0, #13
 8006da2:	d8e6      	bhi.n	8006d72 <_scanf_float+0x62>
 8006da4:	f7f9 f9c2 	bl	800012c <__gnu_thumb1_case_shi>
 8006da8:	ffe50089 	.word	0xffe50089
 8006dac:	ffe5ffe5 	.word	0xffe5ffe5
 8006db0:	00a700bb 	.word	0x00a700bb
 8006db4:	ffe5ffe5 	.word	0xffe5ffe5
 8006db8:	ffe5008f 	.word	0xffe5008f
 8006dbc:	ffe5ffe5 	.word	0xffe5ffe5
 8006dc0:	006bffe5 	.word	0x006bffe5
 8006dc4:	3841      	subs	r0, #65	@ 0x41
 8006dc6:	e7eb      	b.n	8006da0 <_scanf_float+0x90>
 8006dc8:	280e      	cmp	r0, #14
 8006dca:	d8d2      	bhi.n	8006d72 <_scanf_float+0x62>
 8006dcc:	f7f9 f9ae 	bl	800012c <__gnu_thumb1_case_shi>
 8006dd0:	ffd1004f 	.word	0xffd1004f
 8006dd4:	009d004f 	.word	0x009d004f
 8006dd8:	0021ffd1 	.word	0x0021ffd1
 8006ddc:	00410041 	.word	0x00410041
 8006de0:	00410041 	.word	0x00410041
 8006de4:	00410041 	.word	0x00410041
 8006de8:	00410041 	.word	0x00410041
 8006dec:	0041      	.short	0x0041
 8006dee:	2b6e      	cmp	r3, #110	@ 0x6e
 8006df0:	d80a      	bhi.n	8006e08 <_scanf_float+0xf8>
 8006df2:	2b60      	cmp	r3, #96	@ 0x60
 8006df4:	d8d2      	bhi.n	8006d9c <_scanf_float+0x8c>
 8006df6:	2b54      	cmp	r3, #84	@ 0x54
 8006df8:	d100      	bne.n	8006dfc <_scanf_float+0xec>
 8006dfa:	e081      	b.n	8006f00 <_scanf_float+0x1f0>
 8006dfc:	2b59      	cmp	r3, #89	@ 0x59
 8006dfe:	d1b8      	bne.n	8006d72 <_scanf_float+0x62>
 8006e00:	2d07      	cmp	r5, #7
 8006e02:	d1b6      	bne.n	8006d72 <_scanf_float+0x62>
 8006e04:	2508      	movs	r5, #8
 8006e06:	e02f      	b.n	8006e68 <_scanf_float+0x158>
 8006e08:	2b74      	cmp	r3, #116	@ 0x74
 8006e0a:	d079      	beq.n	8006f00 <_scanf_float+0x1f0>
 8006e0c:	2b79      	cmp	r3, #121	@ 0x79
 8006e0e:	d0f7      	beq.n	8006e00 <_scanf_float+0xf0>
 8006e10:	e7af      	b.n	8006d72 <_scanf_float+0x62>
 8006e12:	6821      	ldr	r1, [r4, #0]
 8006e14:	05c8      	lsls	r0, r1, #23
 8006e16:	d51c      	bpl.n	8006e52 <_scanf_float+0x142>
 8006e18:	2380      	movs	r3, #128	@ 0x80
 8006e1a:	4399      	bics	r1, r3
 8006e1c:	9b01      	ldr	r3, [sp, #4]
 8006e1e:	6021      	str	r1, [r4, #0]
 8006e20:	3301      	adds	r3, #1
 8006e22:	9301      	str	r3, [sp, #4]
 8006e24:	9b06      	ldr	r3, [sp, #24]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <_scanf_float+0x122>
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	3201      	adds	r2, #1
 8006e2e:	9306      	str	r3, [sp, #24]
 8006e30:	60a2      	str	r2, [r4, #8]
 8006e32:	68a3      	ldr	r3, [r4, #8]
 8006e34:	3b01      	subs	r3, #1
 8006e36:	60a3      	str	r3, [r4, #8]
 8006e38:	6923      	ldr	r3, [r4, #16]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	6123      	str	r3, [r4, #16]
 8006e3e:	6873      	ldr	r3, [r6, #4]
 8006e40:	3b01      	subs	r3, #1
 8006e42:	6073      	str	r3, [r6, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	dc00      	bgt.n	8006e4a <_scanf_float+0x13a>
 8006e48:	e08a      	b.n	8006f60 <_scanf_float+0x250>
 8006e4a:	6833      	ldr	r3, [r6, #0]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	6033      	str	r3, [r6, #0]
 8006e50:	e781      	b.n	8006d56 <_scanf_float+0x46>
 8006e52:	9a02      	ldr	r2, [sp, #8]
 8006e54:	1951      	adds	r1, r2, r5
 8006e56:	2900      	cmp	r1, #0
 8006e58:	d000      	beq.n	8006e5c <_scanf_float+0x14c>
 8006e5a:	e78a      	b.n	8006d72 <_scanf_float+0x62>
 8006e5c:	000d      	movs	r5, r1
 8006e5e:	6822      	ldr	r2, [r4, #0]
 8006e60:	486d      	ldr	r0, [pc, #436]	@ (8007018 <_scanf_float+0x308>)
 8006e62:	9102      	str	r1, [sp, #8]
 8006e64:	4002      	ands	r2, r0
 8006e66:	6022      	str	r2, [r4, #0]
 8006e68:	703b      	strb	r3, [r7, #0]
 8006e6a:	3701      	adds	r7, #1
 8006e6c:	e7e1      	b.n	8006e32 <_scanf_float+0x122>
 8006e6e:	2180      	movs	r1, #128	@ 0x80
 8006e70:	6822      	ldr	r2, [r4, #0]
 8006e72:	420a      	tst	r2, r1
 8006e74:	d100      	bne.n	8006e78 <_scanf_float+0x168>
 8006e76:	e77c      	b.n	8006d72 <_scanf_float+0x62>
 8006e78:	438a      	bics	r2, r1
 8006e7a:	6022      	str	r2, [r4, #0]
 8006e7c:	e7f4      	b.n	8006e68 <_scanf_float+0x158>
 8006e7e:	9a02      	ldr	r2, [sp, #8]
 8006e80:	2a00      	cmp	r2, #0
 8006e82:	d10f      	bne.n	8006ea4 <_scanf_float+0x194>
 8006e84:	9a01      	ldr	r2, [sp, #4]
 8006e86:	2a00      	cmp	r2, #0
 8006e88:	d10f      	bne.n	8006eaa <_scanf_float+0x19a>
 8006e8a:	6822      	ldr	r2, [r4, #0]
 8006e8c:	21e0      	movs	r1, #224	@ 0xe0
 8006e8e:	0010      	movs	r0, r2
 8006e90:	00c9      	lsls	r1, r1, #3
 8006e92:	4008      	ands	r0, r1
 8006e94:	4288      	cmp	r0, r1
 8006e96:	d108      	bne.n	8006eaa <_scanf_float+0x19a>
 8006e98:	4960      	ldr	r1, [pc, #384]	@ (800701c <_scanf_float+0x30c>)
 8006e9a:	400a      	ands	r2, r1
 8006e9c:	6022      	str	r2, [r4, #0]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	9202      	str	r2, [sp, #8]
 8006ea2:	e7e1      	b.n	8006e68 <_scanf_float+0x158>
 8006ea4:	9a02      	ldr	r2, [sp, #8]
 8006ea6:	2a02      	cmp	r2, #2
 8006ea8:	d058      	beq.n	8006f5c <_scanf_float+0x24c>
 8006eaa:	2d01      	cmp	r5, #1
 8006eac:	d002      	beq.n	8006eb4 <_scanf_float+0x1a4>
 8006eae:	2d04      	cmp	r5, #4
 8006eb0:	d000      	beq.n	8006eb4 <_scanf_float+0x1a4>
 8006eb2:	e75e      	b.n	8006d72 <_scanf_float+0x62>
 8006eb4:	3501      	adds	r5, #1
 8006eb6:	b2ed      	uxtb	r5, r5
 8006eb8:	e7d6      	b.n	8006e68 <_scanf_float+0x158>
 8006eba:	9a02      	ldr	r2, [sp, #8]
 8006ebc:	2a01      	cmp	r2, #1
 8006ebe:	d000      	beq.n	8006ec2 <_scanf_float+0x1b2>
 8006ec0:	e757      	b.n	8006d72 <_scanf_float+0x62>
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	e7ec      	b.n	8006ea0 <_scanf_float+0x190>
 8006ec6:	2d00      	cmp	r5, #0
 8006ec8:	d110      	bne.n	8006eec <_scanf_float+0x1dc>
 8006eca:	9a01      	ldr	r2, [sp, #4]
 8006ecc:	2a00      	cmp	r2, #0
 8006ece:	d000      	beq.n	8006ed2 <_scanf_float+0x1c2>
 8006ed0:	e752      	b.n	8006d78 <_scanf_float+0x68>
 8006ed2:	6822      	ldr	r2, [r4, #0]
 8006ed4:	21e0      	movs	r1, #224	@ 0xe0
 8006ed6:	0010      	movs	r0, r2
 8006ed8:	00c9      	lsls	r1, r1, #3
 8006eda:	4008      	ands	r0, r1
 8006edc:	4288      	cmp	r0, r1
 8006ede:	d000      	beq.n	8006ee2 <_scanf_float+0x1d2>
 8006ee0:	e11b      	b.n	800711a <_scanf_float+0x40a>
 8006ee2:	494e      	ldr	r1, [pc, #312]	@ (800701c <_scanf_float+0x30c>)
 8006ee4:	3501      	adds	r5, #1
 8006ee6:	400a      	ands	r2, r1
 8006ee8:	6022      	str	r2, [r4, #0]
 8006eea:	e7bd      	b.n	8006e68 <_scanf_float+0x158>
 8006eec:	21fd      	movs	r1, #253	@ 0xfd
 8006eee:	1eea      	subs	r2, r5, #3
 8006ef0:	420a      	tst	r2, r1
 8006ef2:	d0df      	beq.n	8006eb4 <_scanf_float+0x1a4>
 8006ef4:	e73d      	b.n	8006d72 <_scanf_float+0x62>
 8006ef6:	2d02      	cmp	r5, #2
 8006ef8:	d000      	beq.n	8006efc <_scanf_float+0x1ec>
 8006efa:	e73a      	b.n	8006d72 <_scanf_float+0x62>
 8006efc:	2503      	movs	r5, #3
 8006efe:	e7b3      	b.n	8006e68 <_scanf_float+0x158>
 8006f00:	2d06      	cmp	r5, #6
 8006f02:	d000      	beq.n	8006f06 <_scanf_float+0x1f6>
 8006f04:	e735      	b.n	8006d72 <_scanf_float+0x62>
 8006f06:	2507      	movs	r5, #7
 8006f08:	e7ae      	b.n	8006e68 <_scanf_float+0x158>
 8006f0a:	6822      	ldr	r2, [r4, #0]
 8006f0c:	0591      	lsls	r1, r2, #22
 8006f0e:	d400      	bmi.n	8006f12 <_scanf_float+0x202>
 8006f10:	e72f      	b.n	8006d72 <_scanf_float+0x62>
 8006f12:	4943      	ldr	r1, [pc, #268]	@ (8007020 <_scanf_float+0x310>)
 8006f14:	400a      	ands	r2, r1
 8006f16:	6022      	str	r2, [r4, #0]
 8006f18:	9a01      	ldr	r2, [sp, #4]
 8006f1a:	9205      	str	r2, [sp, #20]
 8006f1c:	e7a4      	b.n	8006e68 <_scanf_float+0x158>
 8006f1e:	21a0      	movs	r1, #160	@ 0xa0
 8006f20:	2080      	movs	r0, #128	@ 0x80
 8006f22:	6822      	ldr	r2, [r4, #0]
 8006f24:	00c9      	lsls	r1, r1, #3
 8006f26:	4011      	ands	r1, r2
 8006f28:	00c0      	lsls	r0, r0, #3
 8006f2a:	4281      	cmp	r1, r0
 8006f2c:	d006      	beq.n	8006f3c <_scanf_float+0x22c>
 8006f2e:	4202      	tst	r2, r0
 8006f30:	d100      	bne.n	8006f34 <_scanf_float+0x224>
 8006f32:	e71e      	b.n	8006d72 <_scanf_float+0x62>
 8006f34:	9901      	ldr	r1, [sp, #4]
 8006f36:	2900      	cmp	r1, #0
 8006f38:	d100      	bne.n	8006f3c <_scanf_float+0x22c>
 8006f3a:	e0ee      	b.n	800711a <_scanf_float+0x40a>
 8006f3c:	0591      	lsls	r1, r2, #22
 8006f3e:	d404      	bmi.n	8006f4a <_scanf_float+0x23a>
 8006f40:	9901      	ldr	r1, [sp, #4]
 8006f42:	9805      	ldr	r0, [sp, #20]
 8006f44:	9709      	str	r7, [sp, #36]	@ 0x24
 8006f46:	1a09      	subs	r1, r1, r0
 8006f48:	9108      	str	r1, [sp, #32]
 8006f4a:	4934      	ldr	r1, [pc, #208]	@ (800701c <_scanf_float+0x30c>)
 8006f4c:	400a      	ands	r2, r1
 8006f4e:	21c0      	movs	r1, #192	@ 0xc0
 8006f50:	0049      	lsls	r1, r1, #1
 8006f52:	430a      	orrs	r2, r1
 8006f54:	6022      	str	r2, [r4, #0]
 8006f56:	2200      	movs	r2, #0
 8006f58:	9201      	str	r2, [sp, #4]
 8006f5a:	e785      	b.n	8006e68 <_scanf_float+0x158>
 8006f5c:	2203      	movs	r2, #3
 8006f5e:	e79f      	b.n	8006ea0 <_scanf_float+0x190>
 8006f60:	23c0      	movs	r3, #192	@ 0xc0
 8006f62:	005b      	lsls	r3, r3, #1
 8006f64:	0031      	movs	r1, r6
 8006f66:	58e3      	ldr	r3, [r4, r3]
 8006f68:	9803      	ldr	r0, [sp, #12]
 8006f6a:	4798      	blx	r3
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d100      	bne.n	8006f72 <_scanf_float+0x262>
 8006f70:	e6f1      	b.n	8006d56 <_scanf_float+0x46>
 8006f72:	e6fe      	b.n	8006d72 <_scanf_float+0x62>
 8006f74:	3f01      	subs	r7, #1
 8006f76:	5963      	ldr	r3, [r4, r5]
 8006f78:	0032      	movs	r2, r6
 8006f7a:	7839      	ldrb	r1, [r7, #0]
 8006f7c:	9803      	ldr	r0, [sp, #12]
 8006f7e:	4798      	blx	r3
 8006f80:	6923      	ldr	r3, [r4, #16]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	6123      	str	r3, [r4, #16]
 8006f86:	e702      	b.n	8006d8e <_scanf_float+0x7e>
 8006f88:	1e6b      	subs	r3, r5, #1
 8006f8a:	2b06      	cmp	r3, #6
 8006f8c:	d80e      	bhi.n	8006fac <_scanf_float+0x29c>
 8006f8e:	9702      	str	r7, [sp, #8]
 8006f90:	2d02      	cmp	r5, #2
 8006f92:	d920      	bls.n	8006fd6 <_scanf_float+0x2c6>
 8006f94:	1beb      	subs	r3, r5, r7
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	9306      	str	r3, [sp, #24]
 8006f9a:	9b02      	ldr	r3, [sp, #8]
 8006f9c:	9a06      	ldr	r2, [sp, #24]
 8006f9e:	189b      	adds	r3, r3, r2
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d127      	bne.n	8006ff6 <_scanf_float+0x2e6>
 8006fa6:	3d03      	subs	r5, #3
 8006fa8:	b2ed      	uxtb	r5, r5
 8006faa:	1b7f      	subs	r7, r7, r5
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	05da      	lsls	r2, r3, #23
 8006fb0:	d553      	bpl.n	800705a <_scanf_float+0x34a>
 8006fb2:	055b      	lsls	r3, r3, #21
 8006fb4:	d536      	bpl.n	8007024 <_scanf_float+0x314>
 8006fb6:	25be      	movs	r5, #190	@ 0xbe
 8006fb8:	006d      	lsls	r5, r5, #1
 8006fba:	9b04      	ldr	r3, [sp, #16]
 8006fbc:	429f      	cmp	r7, r3
 8006fbe:	d800      	bhi.n	8006fc2 <_scanf_float+0x2b2>
 8006fc0:	e6e9      	b.n	8006d96 <_scanf_float+0x86>
 8006fc2:	3f01      	subs	r7, #1
 8006fc4:	5963      	ldr	r3, [r4, r5]
 8006fc6:	0032      	movs	r2, r6
 8006fc8:	7839      	ldrb	r1, [r7, #0]
 8006fca:	9803      	ldr	r0, [sp, #12]
 8006fcc:	4798      	blx	r3
 8006fce:	6923      	ldr	r3, [r4, #16]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	6123      	str	r3, [r4, #16]
 8006fd4:	e7f1      	b.n	8006fba <_scanf_float+0x2aa>
 8006fd6:	25be      	movs	r5, #190	@ 0xbe
 8006fd8:	006d      	lsls	r5, r5, #1
 8006fda:	9b04      	ldr	r3, [sp, #16]
 8006fdc:	429f      	cmp	r7, r3
 8006fde:	d800      	bhi.n	8006fe2 <_scanf_float+0x2d2>
 8006fe0:	e6d9      	b.n	8006d96 <_scanf_float+0x86>
 8006fe2:	3f01      	subs	r7, #1
 8006fe4:	5963      	ldr	r3, [r4, r5]
 8006fe6:	0032      	movs	r2, r6
 8006fe8:	7839      	ldrb	r1, [r7, #0]
 8006fea:	9803      	ldr	r0, [sp, #12]
 8006fec:	4798      	blx	r3
 8006fee:	6923      	ldr	r3, [r4, #16]
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	6123      	str	r3, [r4, #16]
 8006ff4:	e7f1      	b.n	8006fda <_scanf_float+0x2ca>
 8006ff6:	9b02      	ldr	r3, [sp, #8]
 8006ff8:	0032      	movs	r2, r6
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	7819      	ldrb	r1, [r3, #0]
 8006ffe:	9302      	str	r3, [sp, #8]
 8007000:	23be      	movs	r3, #190	@ 0xbe
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	58e3      	ldr	r3, [r4, r3]
 8007006:	9803      	ldr	r0, [sp, #12]
 8007008:	4798      	blx	r3
 800700a:	6923      	ldr	r3, [r4, #16]
 800700c:	3b01      	subs	r3, #1
 800700e:	6123      	str	r3, [r4, #16]
 8007010:	e7c3      	b.n	8006f9a <_scanf_float+0x28a>
 8007012:	46c0      	nop			@ (mov r8, r8)
 8007014:	fffffeff 	.word	0xfffffeff
 8007018:	fffffe7f 	.word	0xfffffe7f
 800701c:	fffff87f 	.word	0xfffff87f
 8007020:	fffffd7f 	.word	0xfffffd7f
 8007024:	6923      	ldr	r3, [r4, #16]
 8007026:	1e7d      	subs	r5, r7, #1
 8007028:	7829      	ldrb	r1, [r5, #0]
 800702a:	3b01      	subs	r3, #1
 800702c:	6123      	str	r3, [r4, #16]
 800702e:	2965      	cmp	r1, #101	@ 0x65
 8007030:	d00c      	beq.n	800704c <_scanf_float+0x33c>
 8007032:	2945      	cmp	r1, #69	@ 0x45
 8007034:	d00a      	beq.n	800704c <_scanf_float+0x33c>
 8007036:	23be      	movs	r3, #190	@ 0xbe
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	58e3      	ldr	r3, [r4, r3]
 800703c:	0032      	movs	r2, r6
 800703e:	9803      	ldr	r0, [sp, #12]
 8007040:	4798      	blx	r3
 8007042:	6923      	ldr	r3, [r4, #16]
 8007044:	1ebd      	subs	r5, r7, #2
 8007046:	3b01      	subs	r3, #1
 8007048:	7829      	ldrb	r1, [r5, #0]
 800704a:	6123      	str	r3, [r4, #16]
 800704c:	23be      	movs	r3, #190	@ 0xbe
 800704e:	005b      	lsls	r3, r3, #1
 8007050:	0032      	movs	r2, r6
 8007052:	58e3      	ldr	r3, [r4, r3]
 8007054:	9803      	ldr	r0, [sp, #12]
 8007056:	4798      	blx	r3
 8007058:	002f      	movs	r7, r5
 800705a:	6821      	ldr	r1, [r4, #0]
 800705c:	2310      	movs	r3, #16
 800705e:	000a      	movs	r2, r1
 8007060:	401a      	ands	r2, r3
 8007062:	4219      	tst	r1, r3
 8007064:	d001      	beq.n	800706a <_scanf_float+0x35a>
 8007066:	2000      	movs	r0, #0
 8007068:	e696      	b.n	8006d98 <_scanf_float+0x88>
 800706a:	21c0      	movs	r1, #192	@ 0xc0
 800706c:	703a      	strb	r2, [r7, #0]
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	00c9      	lsls	r1, r1, #3
 8007072:	400b      	ands	r3, r1
 8007074:	2180      	movs	r1, #128	@ 0x80
 8007076:	00c9      	lsls	r1, r1, #3
 8007078:	428b      	cmp	r3, r1
 800707a:	d126      	bne.n	80070ca <_scanf_float+0x3ba>
 800707c:	9b05      	ldr	r3, [sp, #20]
 800707e:	9a01      	ldr	r2, [sp, #4]
 8007080:	4293      	cmp	r3, r2
 8007082:	d00c      	beq.n	800709e <_scanf_float+0x38e>
 8007084:	1a9a      	subs	r2, r3, r2
 8007086:	0023      	movs	r3, r4
 8007088:	3370      	adds	r3, #112	@ 0x70
 800708a:	33ff      	adds	r3, #255	@ 0xff
 800708c:	429f      	cmp	r7, r3
 800708e:	d302      	bcc.n	8007096 <_scanf_float+0x386>
 8007090:	0027      	movs	r7, r4
 8007092:	376f      	adds	r7, #111	@ 0x6f
 8007094:	37ff      	adds	r7, #255	@ 0xff
 8007096:	0038      	movs	r0, r7
 8007098:	4921      	ldr	r1, [pc, #132]	@ (8007120 <_scanf_float+0x410>)
 800709a:	f000 f93f 	bl	800731c <siprintf>
 800709e:	2200      	movs	r2, #0
 80070a0:	9904      	ldr	r1, [sp, #16]
 80070a2:	9803      	ldr	r0, [sp, #12]
 80070a4:	f002 fc92 	bl	80099cc <_strtod_r>
 80070a8:	9b07      	ldr	r3, [sp, #28]
 80070aa:	6822      	ldr	r2, [r4, #0]
 80070ac:	0006      	movs	r6, r0
 80070ae:	000f      	movs	r7, r1
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	0791      	lsls	r1, r2, #30
 80070b4:	d516      	bpl.n	80070e4 <_scanf_float+0x3d4>
 80070b6:	9907      	ldr	r1, [sp, #28]
 80070b8:	1d1a      	adds	r2, r3, #4
 80070ba:	600a      	str	r2, [r1, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	601e      	str	r6, [r3, #0]
 80070c0:	605f      	str	r7, [r3, #4]
 80070c2:	68e3      	ldr	r3, [r4, #12]
 80070c4:	3301      	adds	r3, #1
 80070c6:	60e3      	str	r3, [r4, #12]
 80070c8:	e7cd      	b.n	8007066 <_scanf_float+0x356>
 80070ca:	9b08      	ldr	r3, [sp, #32]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0e6      	beq.n	800709e <_scanf_float+0x38e>
 80070d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070d2:	9803      	ldr	r0, [sp, #12]
 80070d4:	1c59      	adds	r1, r3, #1
 80070d6:	230a      	movs	r3, #10
 80070d8:	f002 fd0a 	bl	8009af0 <_strtol_r>
 80070dc:	9b08      	ldr	r3, [sp, #32]
 80070de:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80070e0:	1ac2      	subs	r2, r0, r3
 80070e2:	e7d0      	b.n	8007086 <_scanf_float+0x376>
 80070e4:	1d19      	adds	r1, r3, #4
 80070e6:	0752      	lsls	r2, r2, #29
 80070e8:	d502      	bpl.n	80070f0 <_scanf_float+0x3e0>
 80070ea:	9a07      	ldr	r2, [sp, #28]
 80070ec:	6011      	str	r1, [r2, #0]
 80070ee:	e7e5      	b.n	80070bc <_scanf_float+0x3ac>
 80070f0:	9a07      	ldr	r2, [sp, #28]
 80070f2:	0030      	movs	r0, r6
 80070f4:	6011      	str	r1, [r2, #0]
 80070f6:	681d      	ldr	r5, [r3, #0]
 80070f8:	0032      	movs	r2, r6
 80070fa:	003b      	movs	r3, r7
 80070fc:	0039      	movs	r1, r7
 80070fe:	f7fb fbcd 	bl	800289c <__aeabi_dcmpun>
 8007102:	2800      	cmp	r0, #0
 8007104:	d004      	beq.n	8007110 <_scanf_float+0x400>
 8007106:	4807      	ldr	r0, [pc, #28]	@ (8007124 <_scanf_float+0x414>)
 8007108:	f000 fa08 	bl	800751c <nanf>
 800710c:	6028      	str	r0, [r5, #0]
 800710e:	e7d8      	b.n	80070c2 <_scanf_float+0x3b2>
 8007110:	0030      	movs	r0, r6
 8007112:	0039      	movs	r1, r7
 8007114:	f7fb fcba 	bl	8002a8c <__aeabi_d2f>
 8007118:	e7f8      	b.n	800710c <_scanf_float+0x3fc>
 800711a:	2300      	movs	r3, #0
 800711c:	9301      	str	r3, [sp, #4]
 800711e:	e62f      	b.n	8006d80 <_scanf_float+0x70>
 8007120:	0800ae24 	.word	0x0800ae24
 8007124:	0800af65 	.word	0x0800af65

08007128 <std>:
 8007128:	2300      	movs	r3, #0
 800712a:	b510      	push	{r4, lr}
 800712c:	0004      	movs	r4, r0
 800712e:	6003      	str	r3, [r0, #0]
 8007130:	6043      	str	r3, [r0, #4]
 8007132:	6083      	str	r3, [r0, #8]
 8007134:	8181      	strh	r1, [r0, #12]
 8007136:	6643      	str	r3, [r0, #100]	@ 0x64
 8007138:	81c2      	strh	r2, [r0, #14]
 800713a:	6103      	str	r3, [r0, #16]
 800713c:	6143      	str	r3, [r0, #20]
 800713e:	6183      	str	r3, [r0, #24]
 8007140:	0019      	movs	r1, r3
 8007142:	2208      	movs	r2, #8
 8007144:	305c      	adds	r0, #92	@ 0x5c
 8007146:	f000 f957 	bl	80073f8 <memset>
 800714a:	4b0b      	ldr	r3, [pc, #44]	@ (8007178 <std+0x50>)
 800714c:	6224      	str	r4, [r4, #32]
 800714e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007150:	4b0a      	ldr	r3, [pc, #40]	@ (800717c <std+0x54>)
 8007152:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007154:	4b0a      	ldr	r3, [pc, #40]	@ (8007180 <std+0x58>)
 8007156:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007158:	4b0a      	ldr	r3, [pc, #40]	@ (8007184 <std+0x5c>)
 800715a:	6323      	str	r3, [r4, #48]	@ 0x30
 800715c:	4b0a      	ldr	r3, [pc, #40]	@ (8007188 <std+0x60>)
 800715e:	429c      	cmp	r4, r3
 8007160:	d005      	beq.n	800716e <std+0x46>
 8007162:	4b0a      	ldr	r3, [pc, #40]	@ (800718c <std+0x64>)
 8007164:	429c      	cmp	r4, r3
 8007166:	d002      	beq.n	800716e <std+0x46>
 8007168:	4b09      	ldr	r3, [pc, #36]	@ (8007190 <std+0x68>)
 800716a:	429c      	cmp	r4, r3
 800716c:	d103      	bne.n	8007176 <std+0x4e>
 800716e:	0020      	movs	r0, r4
 8007170:	3058      	adds	r0, #88	@ 0x58
 8007172:	f000 f9c5 	bl	8007500 <__retarget_lock_init_recursive>
 8007176:	bd10      	pop	{r4, pc}
 8007178:	08007361 	.word	0x08007361
 800717c:	08007389 	.word	0x08007389
 8007180:	080073c1 	.word	0x080073c1
 8007184:	080073ed 	.word	0x080073ed
 8007188:	20000ad8 	.word	0x20000ad8
 800718c:	20000b40 	.word	0x20000b40
 8007190:	20000ba8 	.word	0x20000ba8

08007194 <stdio_exit_handler>:
 8007194:	b510      	push	{r4, lr}
 8007196:	4a03      	ldr	r2, [pc, #12]	@ (80071a4 <stdio_exit_handler+0x10>)
 8007198:	4903      	ldr	r1, [pc, #12]	@ (80071a8 <stdio_exit_handler+0x14>)
 800719a:	4804      	ldr	r0, [pc, #16]	@ (80071ac <stdio_exit_handler+0x18>)
 800719c:	f000 f86c 	bl	8007278 <_fwalk_sglue>
 80071a0:	bd10      	pop	{r4, pc}
 80071a2:	46c0      	nop			@ (mov r8, r8)
 80071a4:	2000000c 	.word	0x2000000c
 80071a8:	08009ec1 	.word	0x08009ec1
 80071ac:	2000001c 	.word	0x2000001c

080071b0 <cleanup_stdio>:
 80071b0:	6841      	ldr	r1, [r0, #4]
 80071b2:	4b0b      	ldr	r3, [pc, #44]	@ (80071e0 <cleanup_stdio+0x30>)
 80071b4:	b510      	push	{r4, lr}
 80071b6:	0004      	movs	r4, r0
 80071b8:	4299      	cmp	r1, r3
 80071ba:	d001      	beq.n	80071c0 <cleanup_stdio+0x10>
 80071bc:	f002 fe80 	bl	8009ec0 <_fflush_r>
 80071c0:	68a1      	ldr	r1, [r4, #8]
 80071c2:	4b08      	ldr	r3, [pc, #32]	@ (80071e4 <cleanup_stdio+0x34>)
 80071c4:	4299      	cmp	r1, r3
 80071c6:	d002      	beq.n	80071ce <cleanup_stdio+0x1e>
 80071c8:	0020      	movs	r0, r4
 80071ca:	f002 fe79 	bl	8009ec0 <_fflush_r>
 80071ce:	68e1      	ldr	r1, [r4, #12]
 80071d0:	4b05      	ldr	r3, [pc, #20]	@ (80071e8 <cleanup_stdio+0x38>)
 80071d2:	4299      	cmp	r1, r3
 80071d4:	d002      	beq.n	80071dc <cleanup_stdio+0x2c>
 80071d6:	0020      	movs	r0, r4
 80071d8:	f002 fe72 	bl	8009ec0 <_fflush_r>
 80071dc:	bd10      	pop	{r4, pc}
 80071de:	46c0      	nop			@ (mov r8, r8)
 80071e0:	20000ad8 	.word	0x20000ad8
 80071e4:	20000b40 	.word	0x20000b40
 80071e8:	20000ba8 	.word	0x20000ba8

080071ec <global_stdio_init.part.0>:
 80071ec:	b510      	push	{r4, lr}
 80071ee:	4b09      	ldr	r3, [pc, #36]	@ (8007214 <global_stdio_init.part.0+0x28>)
 80071f0:	4a09      	ldr	r2, [pc, #36]	@ (8007218 <global_stdio_init.part.0+0x2c>)
 80071f2:	2104      	movs	r1, #4
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	4809      	ldr	r0, [pc, #36]	@ (800721c <global_stdio_init.part.0+0x30>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	f7ff ff95 	bl	8007128 <std>
 80071fe:	2201      	movs	r2, #1
 8007200:	2109      	movs	r1, #9
 8007202:	4807      	ldr	r0, [pc, #28]	@ (8007220 <global_stdio_init.part.0+0x34>)
 8007204:	f7ff ff90 	bl	8007128 <std>
 8007208:	2202      	movs	r2, #2
 800720a:	2112      	movs	r1, #18
 800720c:	4805      	ldr	r0, [pc, #20]	@ (8007224 <global_stdio_init.part.0+0x38>)
 800720e:	f7ff ff8b 	bl	8007128 <std>
 8007212:	bd10      	pop	{r4, pc}
 8007214:	20000c10 	.word	0x20000c10
 8007218:	08007195 	.word	0x08007195
 800721c:	20000ad8 	.word	0x20000ad8
 8007220:	20000b40 	.word	0x20000b40
 8007224:	20000ba8 	.word	0x20000ba8

08007228 <__sfp_lock_acquire>:
 8007228:	b510      	push	{r4, lr}
 800722a:	4802      	ldr	r0, [pc, #8]	@ (8007234 <__sfp_lock_acquire+0xc>)
 800722c:	f000 f969 	bl	8007502 <__retarget_lock_acquire_recursive>
 8007230:	bd10      	pop	{r4, pc}
 8007232:	46c0      	nop			@ (mov r8, r8)
 8007234:	20000c19 	.word	0x20000c19

08007238 <__sfp_lock_release>:
 8007238:	b510      	push	{r4, lr}
 800723a:	4802      	ldr	r0, [pc, #8]	@ (8007244 <__sfp_lock_release+0xc>)
 800723c:	f000 f962 	bl	8007504 <__retarget_lock_release_recursive>
 8007240:	bd10      	pop	{r4, pc}
 8007242:	46c0      	nop			@ (mov r8, r8)
 8007244:	20000c19 	.word	0x20000c19

08007248 <__sinit>:
 8007248:	b510      	push	{r4, lr}
 800724a:	0004      	movs	r4, r0
 800724c:	f7ff ffec 	bl	8007228 <__sfp_lock_acquire>
 8007250:	6a23      	ldr	r3, [r4, #32]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <__sinit+0x14>
 8007256:	f7ff ffef 	bl	8007238 <__sfp_lock_release>
 800725a:	bd10      	pop	{r4, pc}
 800725c:	4b04      	ldr	r3, [pc, #16]	@ (8007270 <__sinit+0x28>)
 800725e:	6223      	str	r3, [r4, #32]
 8007260:	4b04      	ldr	r3, [pc, #16]	@ (8007274 <__sinit+0x2c>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1f6      	bne.n	8007256 <__sinit+0xe>
 8007268:	f7ff ffc0 	bl	80071ec <global_stdio_init.part.0>
 800726c:	e7f3      	b.n	8007256 <__sinit+0xe>
 800726e:	46c0      	nop			@ (mov r8, r8)
 8007270:	080071b1 	.word	0x080071b1
 8007274:	20000c10 	.word	0x20000c10

08007278 <_fwalk_sglue>:
 8007278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800727a:	0014      	movs	r4, r2
 800727c:	2600      	movs	r6, #0
 800727e:	9000      	str	r0, [sp, #0]
 8007280:	9101      	str	r1, [sp, #4]
 8007282:	68a5      	ldr	r5, [r4, #8]
 8007284:	6867      	ldr	r7, [r4, #4]
 8007286:	3f01      	subs	r7, #1
 8007288:	d504      	bpl.n	8007294 <_fwalk_sglue+0x1c>
 800728a:	6824      	ldr	r4, [r4, #0]
 800728c:	2c00      	cmp	r4, #0
 800728e:	d1f8      	bne.n	8007282 <_fwalk_sglue+0xa>
 8007290:	0030      	movs	r0, r6
 8007292:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007294:	89ab      	ldrh	r3, [r5, #12]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d908      	bls.n	80072ac <_fwalk_sglue+0x34>
 800729a:	220e      	movs	r2, #14
 800729c:	5eab      	ldrsh	r3, [r5, r2]
 800729e:	3301      	adds	r3, #1
 80072a0:	d004      	beq.n	80072ac <_fwalk_sglue+0x34>
 80072a2:	0029      	movs	r1, r5
 80072a4:	9800      	ldr	r0, [sp, #0]
 80072a6:	9b01      	ldr	r3, [sp, #4]
 80072a8:	4798      	blx	r3
 80072aa:	4306      	orrs	r6, r0
 80072ac:	3568      	adds	r5, #104	@ 0x68
 80072ae:	e7ea      	b.n	8007286 <_fwalk_sglue+0xe>

080072b0 <sniprintf>:
 80072b0:	b40c      	push	{r2, r3}
 80072b2:	b530      	push	{r4, r5, lr}
 80072b4:	4b18      	ldr	r3, [pc, #96]	@ (8007318 <sniprintf+0x68>)
 80072b6:	000c      	movs	r4, r1
 80072b8:	681d      	ldr	r5, [r3, #0]
 80072ba:	b09d      	sub	sp, #116	@ 0x74
 80072bc:	2900      	cmp	r1, #0
 80072be:	da08      	bge.n	80072d2 <sniprintf+0x22>
 80072c0:	238b      	movs	r3, #139	@ 0x8b
 80072c2:	2001      	movs	r0, #1
 80072c4:	602b      	str	r3, [r5, #0]
 80072c6:	4240      	negs	r0, r0
 80072c8:	b01d      	add	sp, #116	@ 0x74
 80072ca:	bc30      	pop	{r4, r5}
 80072cc:	bc08      	pop	{r3}
 80072ce:	b002      	add	sp, #8
 80072d0:	4718      	bx	r3
 80072d2:	2382      	movs	r3, #130	@ 0x82
 80072d4:	466a      	mov	r2, sp
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	8293      	strh	r3, [r2, #20]
 80072da:	2300      	movs	r3, #0
 80072dc:	9002      	str	r0, [sp, #8]
 80072de:	931b      	str	r3, [sp, #108]	@ 0x6c
 80072e0:	9006      	str	r0, [sp, #24]
 80072e2:	4299      	cmp	r1, r3
 80072e4:	d000      	beq.n	80072e8 <sniprintf+0x38>
 80072e6:	1e4b      	subs	r3, r1, #1
 80072e8:	9304      	str	r3, [sp, #16]
 80072ea:	9307      	str	r3, [sp, #28]
 80072ec:	2301      	movs	r3, #1
 80072ee:	466a      	mov	r2, sp
 80072f0:	425b      	negs	r3, r3
 80072f2:	82d3      	strh	r3, [r2, #22]
 80072f4:	0028      	movs	r0, r5
 80072f6:	ab21      	add	r3, sp, #132	@ 0x84
 80072f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80072fa:	a902      	add	r1, sp, #8
 80072fc:	9301      	str	r3, [sp, #4]
 80072fe:	f002 fc5b 	bl	8009bb8 <_svfiprintf_r>
 8007302:	1c43      	adds	r3, r0, #1
 8007304:	da01      	bge.n	800730a <sniprintf+0x5a>
 8007306:	238b      	movs	r3, #139	@ 0x8b
 8007308:	602b      	str	r3, [r5, #0]
 800730a:	2c00      	cmp	r4, #0
 800730c:	d0dc      	beq.n	80072c8 <sniprintf+0x18>
 800730e:	2200      	movs	r2, #0
 8007310:	9b02      	ldr	r3, [sp, #8]
 8007312:	701a      	strb	r2, [r3, #0]
 8007314:	e7d8      	b.n	80072c8 <sniprintf+0x18>
 8007316:	46c0      	nop			@ (mov r8, r8)
 8007318:	20000018 	.word	0x20000018

0800731c <siprintf>:
 800731c:	b40e      	push	{r1, r2, r3}
 800731e:	b510      	push	{r4, lr}
 8007320:	2400      	movs	r4, #0
 8007322:	490c      	ldr	r1, [pc, #48]	@ (8007354 <siprintf+0x38>)
 8007324:	b09d      	sub	sp, #116	@ 0x74
 8007326:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007328:	9002      	str	r0, [sp, #8]
 800732a:	9006      	str	r0, [sp, #24]
 800732c:	9107      	str	r1, [sp, #28]
 800732e:	9104      	str	r1, [sp, #16]
 8007330:	4809      	ldr	r0, [pc, #36]	@ (8007358 <siprintf+0x3c>)
 8007332:	490a      	ldr	r1, [pc, #40]	@ (800735c <siprintf+0x40>)
 8007334:	cb04      	ldmia	r3!, {r2}
 8007336:	9105      	str	r1, [sp, #20]
 8007338:	6800      	ldr	r0, [r0, #0]
 800733a:	a902      	add	r1, sp, #8
 800733c:	9301      	str	r3, [sp, #4]
 800733e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007340:	f002 fc3a 	bl	8009bb8 <_svfiprintf_r>
 8007344:	9b02      	ldr	r3, [sp, #8]
 8007346:	701c      	strb	r4, [r3, #0]
 8007348:	b01d      	add	sp, #116	@ 0x74
 800734a:	bc10      	pop	{r4}
 800734c:	bc08      	pop	{r3}
 800734e:	b003      	add	sp, #12
 8007350:	4718      	bx	r3
 8007352:	46c0      	nop			@ (mov r8, r8)
 8007354:	7fffffff 	.word	0x7fffffff
 8007358:	20000018 	.word	0x20000018
 800735c:	ffff0208 	.word	0xffff0208

08007360 <__sread>:
 8007360:	b570      	push	{r4, r5, r6, lr}
 8007362:	000c      	movs	r4, r1
 8007364:	250e      	movs	r5, #14
 8007366:	5f49      	ldrsh	r1, [r1, r5]
 8007368:	f000 f878 	bl	800745c <_read_r>
 800736c:	2800      	cmp	r0, #0
 800736e:	db03      	blt.n	8007378 <__sread+0x18>
 8007370:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007372:	181b      	adds	r3, r3, r0
 8007374:	6563      	str	r3, [r4, #84]	@ 0x54
 8007376:	bd70      	pop	{r4, r5, r6, pc}
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	4a02      	ldr	r2, [pc, #8]	@ (8007384 <__sread+0x24>)
 800737c:	4013      	ands	r3, r2
 800737e:	81a3      	strh	r3, [r4, #12]
 8007380:	e7f9      	b.n	8007376 <__sread+0x16>
 8007382:	46c0      	nop			@ (mov r8, r8)
 8007384:	ffffefff 	.word	0xffffefff

08007388 <__swrite>:
 8007388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738a:	001f      	movs	r7, r3
 800738c:	898b      	ldrh	r3, [r1, #12]
 800738e:	0005      	movs	r5, r0
 8007390:	000c      	movs	r4, r1
 8007392:	0016      	movs	r6, r2
 8007394:	05db      	lsls	r3, r3, #23
 8007396:	d505      	bpl.n	80073a4 <__swrite+0x1c>
 8007398:	230e      	movs	r3, #14
 800739a:	5ec9      	ldrsh	r1, [r1, r3]
 800739c:	2200      	movs	r2, #0
 800739e:	2302      	movs	r3, #2
 80073a0:	f000 f848 	bl	8007434 <_lseek_r>
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	4a05      	ldr	r2, [pc, #20]	@ (80073bc <__swrite+0x34>)
 80073a8:	0028      	movs	r0, r5
 80073aa:	4013      	ands	r3, r2
 80073ac:	81a3      	strh	r3, [r4, #12]
 80073ae:	0032      	movs	r2, r6
 80073b0:	230e      	movs	r3, #14
 80073b2:	5ee1      	ldrsh	r1, [r4, r3]
 80073b4:	003b      	movs	r3, r7
 80073b6:	f000 f865 	bl	8007484 <_write_r>
 80073ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073bc:	ffffefff 	.word	0xffffefff

080073c0 <__sseek>:
 80073c0:	b570      	push	{r4, r5, r6, lr}
 80073c2:	000c      	movs	r4, r1
 80073c4:	250e      	movs	r5, #14
 80073c6:	5f49      	ldrsh	r1, [r1, r5]
 80073c8:	f000 f834 	bl	8007434 <_lseek_r>
 80073cc:	89a3      	ldrh	r3, [r4, #12]
 80073ce:	1c42      	adds	r2, r0, #1
 80073d0:	d103      	bne.n	80073da <__sseek+0x1a>
 80073d2:	4a05      	ldr	r2, [pc, #20]	@ (80073e8 <__sseek+0x28>)
 80073d4:	4013      	ands	r3, r2
 80073d6:	81a3      	strh	r3, [r4, #12]
 80073d8:	bd70      	pop	{r4, r5, r6, pc}
 80073da:	2280      	movs	r2, #128	@ 0x80
 80073dc:	0152      	lsls	r2, r2, #5
 80073de:	4313      	orrs	r3, r2
 80073e0:	81a3      	strh	r3, [r4, #12]
 80073e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80073e4:	e7f8      	b.n	80073d8 <__sseek+0x18>
 80073e6:	46c0      	nop			@ (mov r8, r8)
 80073e8:	ffffefff 	.word	0xffffefff

080073ec <__sclose>:
 80073ec:	b510      	push	{r4, lr}
 80073ee:	230e      	movs	r3, #14
 80073f0:	5ec9      	ldrsh	r1, [r1, r3]
 80073f2:	f000 f80d 	bl	8007410 <_close_r>
 80073f6:	bd10      	pop	{r4, pc}

080073f8 <memset>:
 80073f8:	0003      	movs	r3, r0
 80073fa:	1882      	adds	r2, r0, r2
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d100      	bne.n	8007402 <memset+0xa>
 8007400:	4770      	bx	lr
 8007402:	7019      	strb	r1, [r3, #0]
 8007404:	3301      	adds	r3, #1
 8007406:	e7f9      	b.n	80073fc <memset+0x4>

08007408 <_localeconv_r>:
 8007408:	4800      	ldr	r0, [pc, #0]	@ (800740c <_localeconv_r+0x4>)
 800740a:	4770      	bx	lr
 800740c:	20000158 	.word	0x20000158

08007410 <_close_r>:
 8007410:	2300      	movs	r3, #0
 8007412:	b570      	push	{r4, r5, r6, lr}
 8007414:	4d06      	ldr	r5, [pc, #24]	@ (8007430 <_close_r+0x20>)
 8007416:	0004      	movs	r4, r0
 8007418:	0008      	movs	r0, r1
 800741a:	602b      	str	r3, [r5, #0]
 800741c:	f7fb ff90 	bl	8003340 <_close>
 8007420:	1c43      	adds	r3, r0, #1
 8007422:	d103      	bne.n	800742c <_close_r+0x1c>
 8007424:	682b      	ldr	r3, [r5, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d000      	beq.n	800742c <_close_r+0x1c>
 800742a:	6023      	str	r3, [r4, #0]
 800742c:	bd70      	pop	{r4, r5, r6, pc}
 800742e:	46c0      	nop			@ (mov r8, r8)
 8007430:	20000c14 	.word	0x20000c14

08007434 <_lseek_r>:
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	0004      	movs	r4, r0
 8007438:	0008      	movs	r0, r1
 800743a:	0011      	movs	r1, r2
 800743c:	001a      	movs	r2, r3
 800743e:	2300      	movs	r3, #0
 8007440:	4d05      	ldr	r5, [pc, #20]	@ (8007458 <_lseek_r+0x24>)
 8007442:	602b      	str	r3, [r5, #0]
 8007444:	f7fb ff9d 	bl	8003382 <_lseek>
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	d103      	bne.n	8007454 <_lseek_r+0x20>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d000      	beq.n	8007454 <_lseek_r+0x20>
 8007452:	6023      	str	r3, [r4, #0]
 8007454:	bd70      	pop	{r4, r5, r6, pc}
 8007456:	46c0      	nop			@ (mov r8, r8)
 8007458:	20000c14 	.word	0x20000c14

0800745c <_read_r>:
 800745c:	b570      	push	{r4, r5, r6, lr}
 800745e:	0004      	movs	r4, r0
 8007460:	0008      	movs	r0, r1
 8007462:	0011      	movs	r1, r2
 8007464:	001a      	movs	r2, r3
 8007466:	2300      	movs	r3, #0
 8007468:	4d05      	ldr	r5, [pc, #20]	@ (8007480 <_read_r+0x24>)
 800746a:	602b      	str	r3, [r5, #0]
 800746c:	f7fb ff2f 	bl	80032ce <_read>
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	d103      	bne.n	800747c <_read_r+0x20>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d000      	beq.n	800747c <_read_r+0x20>
 800747a:	6023      	str	r3, [r4, #0]
 800747c:	bd70      	pop	{r4, r5, r6, pc}
 800747e:	46c0      	nop			@ (mov r8, r8)
 8007480:	20000c14 	.word	0x20000c14

08007484 <_write_r>:
 8007484:	b570      	push	{r4, r5, r6, lr}
 8007486:	0004      	movs	r4, r0
 8007488:	0008      	movs	r0, r1
 800748a:	0011      	movs	r1, r2
 800748c:	001a      	movs	r2, r3
 800748e:	2300      	movs	r3, #0
 8007490:	4d05      	ldr	r5, [pc, #20]	@ (80074a8 <_write_r+0x24>)
 8007492:	602b      	str	r3, [r5, #0]
 8007494:	f7fb ff38 	bl	8003308 <_write>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d103      	bne.n	80074a4 <_write_r+0x20>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d000      	beq.n	80074a4 <_write_r+0x20>
 80074a2:	6023      	str	r3, [r4, #0]
 80074a4:	bd70      	pop	{r4, r5, r6, pc}
 80074a6:	46c0      	nop			@ (mov r8, r8)
 80074a8:	20000c14 	.word	0x20000c14

080074ac <__errno>:
 80074ac:	4b01      	ldr	r3, [pc, #4]	@ (80074b4 <__errno+0x8>)
 80074ae:	6818      	ldr	r0, [r3, #0]
 80074b0:	4770      	bx	lr
 80074b2:	46c0      	nop			@ (mov r8, r8)
 80074b4:	20000018 	.word	0x20000018

080074b8 <__libc_init_array>:
 80074b8:	b570      	push	{r4, r5, r6, lr}
 80074ba:	2600      	movs	r6, #0
 80074bc:	4c0c      	ldr	r4, [pc, #48]	@ (80074f0 <__libc_init_array+0x38>)
 80074be:	4d0d      	ldr	r5, [pc, #52]	@ (80074f4 <__libc_init_array+0x3c>)
 80074c0:	1b64      	subs	r4, r4, r5
 80074c2:	10a4      	asrs	r4, r4, #2
 80074c4:	42a6      	cmp	r6, r4
 80074c6:	d109      	bne.n	80074dc <__libc_init_array+0x24>
 80074c8:	2600      	movs	r6, #0
 80074ca:	f003 fc3b 	bl	800ad44 <_init>
 80074ce:	4c0a      	ldr	r4, [pc, #40]	@ (80074f8 <__libc_init_array+0x40>)
 80074d0:	4d0a      	ldr	r5, [pc, #40]	@ (80074fc <__libc_init_array+0x44>)
 80074d2:	1b64      	subs	r4, r4, r5
 80074d4:	10a4      	asrs	r4, r4, #2
 80074d6:	42a6      	cmp	r6, r4
 80074d8:	d105      	bne.n	80074e6 <__libc_init_array+0x2e>
 80074da:	bd70      	pop	{r4, r5, r6, pc}
 80074dc:	00b3      	lsls	r3, r6, #2
 80074de:	58eb      	ldr	r3, [r5, r3]
 80074e0:	4798      	blx	r3
 80074e2:	3601      	adds	r6, #1
 80074e4:	e7ee      	b.n	80074c4 <__libc_init_array+0xc>
 80074e6:	00b3      	lsls	r3, r6, #2
 80074e8:	58eb      	ldr	r3, [r5, r3]
 80074ea:	4798      	blx	r3
 80074ec:	3601      	adds	r6, #1
 80074ee:	e7f2      	b.n	80074d6 <__libc_init_array+0x1e>
 80074f0:	0800b21c 	.word	0x0800b21c
 80074f4:	0800b21c 	.word	0x0800b21c
 80074f8:	0800b220 	.word	0x0800b220
 80074fc:	0800b21c 	.word	0x0800b21c

08007500 <__retarget_lock_init_recursive>:
 8007500:	4770      	bx	lr

08007502 <__retarget_lock_acquire_recursive>:
 8007502:	4770      	bx	lr

08007504 <__retarget_lock_release_recursive>:
 8007504:	4770      	bx	lr

08007506 <memchr>:
 8007506:	b2c9      	uxtb	r1, r1
 8007508:	1882      	adds	r2, r0, r2
 800750a:	4290      	cmp	r0, r2
 800750c:	d101      	bne.n	8007512 <memchr+0xc>
 800750e:	2000      	movs	r0, #0
 8007510:	4770      	bx	lr
 8007512:	7803      	ldrb	r3, [r0, #0]
 8007514:	428b      	cmp	r3, r1
 8007516:	d0fb      	beq.n	8007510 <memchr+0xa>
 8007518:	3001      	adds	r0, #1
 800751a:	e7f6      	b.n	800750a <memchr+0x4>

0800751c <nanf>:
 800751c:	4800      	ldr	r0, [pc, #0]	@ (8007520 <nanf+0x4>)
 800751e:	4770      	bx	lr
 8007520:	7fc00000 	.word	0x7fc00000

08007524 <quorem>:
 8007524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007526:	6903      	ldr	r3, [r0, #16]
 8007528:	690c      	ldr	r4, [r1, #16]
 800752a:	b089      	sub	sp, #36	@ 0x24
 800752c:	9003      	str	r0, [sp, #12]
 800752e:	9106      	str	r1, [sp, #24]
 8007530:	2000      	movs	r0, #0
 8007532:	42a3      	cmp	r3, r4
 8007534:	db63      	blt.n	80075fe <quorem+0xda>
 8007536:	000b      	movs	r3, r1
 8007538:	3c01      	subs	r4, #1
 800753a:	3314      	adds	r3, #20
 800753c:	00a5      	lsls	r5, r4, #2
 800753e:	9304      	str	r3, [sp, #16]
 8007540:	195b      	adds	r3, r3, r5
 8007542:	9305      	str	r3, [sp, #20]
 8007544:	9b03      	ldr	r3, [sp, #12]
 8007546:	3314      	adds	r3, #20
 8007548:	9301      	str	r3, [sp, #4]
 800754a:	195d      	adds	r5, r3, r5
 800754c:	9b05      	ldr	r3, [sp, #20]
 800754e:	682f      	ldr	r7, [r5, #0]
 8007550:	681e      	ldr	r6, [r3, #0]
 8007552:	0038      	movs	r0, r7
 8007554:	3601      	adds	r6, #1
 8007556:	0031      	movs	r1, r6
 8007558:	f7f8 fdf2 	bl	8000140 <__udivsi3>
 800755c:	9002      	str	r0, [sp, #8]
 800755e:	42b7      	cmp	r7, r6
 8007560:	d327      	bcc.n	80075b2 <quorem+0x8e>
 8007562:	9b04      	ldr	r3, [sp, #16]
 8007564:	2700      	movs	r7, #0
 8007566:	469c      	mov	ip, r3
 8007568:	9e01      	ldr	r6, [sp, #4]
 800756a:	9707      	str	r7, [sp, #28]
 800756c:	4662      	mov	r2, ip
 800756e:	ca08      	ldmia	r2!, {r3}
 8007570:	6830      	ldr	r0, [r6, #0]
 8007572:	4694      	mov	ip, r2
 8007574:	9a02      	ldr	r2, [sp, #8]
 8007576:	b299      	uxth	r1, r3
 8007578:	4351      	muls	r1, r2
 800757a:	0c1b      	lsrs	r3, r3, #16
 800757c:	4353      	muls	r3, r2
 800757e:	19c9      	adds	r1, r1, r7
 8007580:	0c0a      	lsrs	r2, r1, #16
 8007582:	189b      	adds	r3, r3, r2
 8007584:	b289      	uxth	r1, r1
 8007586:	b282      	uxth	r2, r0
 8007588:	1a52      	subs	r2, r2, r1
 800758a:	9907      	ldr	r1, [sp, #28]
 800758c:	0c1f      	lsrs	r7, r3, #16
 800758e:	1852      	adds	r2, r2, r1
 8007590:	0c00      	lsrs	r0, r0, #16
 8007592:	b29b      	uxth	r3, r3
 8007594:	1411      	asrs	r1, r2, #16
 8007596:	1ac3      	subs	r3, r0, r3
 8007598:	185b      	adds	r3, r3, r1
 800759a:	1419      	asrs	r1, r3, #16
 800759c:	b292      	uxth	r2, r2
 800759e:	041b      	lsls	r3, r3, #16
 80075a0:	431a      	orrs	r2, r3
 80075a2:	9b05      	ldr	r3, [sp, #20]
 80075a4:	9107      	str	r1, [sp, #28]
 80075a6:	c604      	stmia	r6!, {r2}
 80075a8:	4563      	cmp	r3, ip
 80075aa:	d2df      	bcs.n	800756c <quorem+0x48>
 80075ac:	682b      	ldr	r3, [r5, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d02b      	beq.n	800760a <quorem+0xe6>
 80075b2:	9906      	ldr	r1, [sp, #24]
 80075b4:	9803      	ldr	r0, [sp, #12]
 80075b6:	f001 fa03 	bl	80089c0 <__mcmp>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	db1e      	blt.n	80075fc <quorem+0xd8>
 80075be:	2600      	movs	r6, #0
 80075c0:	9d01      	ldr	r5, [sp, #4]
 80075c2:	9904      	ldr	r1, [sp, #16]
 80075c4:	c901      	ldmia	r1!, {r0}
 80075c6:	682b      	ldr	r3, [r5, #0]
 80075c8:	b287      	uxth	r7, r0
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	1bd2      	subs	r2, r2, r7
 80075ce:	1992      	adds	r2, r2, r6
 80075d0:	0c00      	lsrs	r0, r0, #16
 80075d2:	0c1b      	lsrs	r3, r3, #16
 80075d4:	1a1b      	subs	r3, r3, r0
 80075d6:	1410      	asrs	r0, r2, #16
 80075d8:	181b      	adds	r3, r3, r0
 80075da:	141e      	asrs	r6, r3, #16
 80075dc:	b292      	uxth	r2, r2
 80075de:	041b      	lsls	r3, r3, #16
 80075e0:	431a      	orrs	r2, r3
 80075e2:	9b05      	ldr	r3, [sp, #20]
 80075e4:	c504      	stmia	r5!, {r2}
 80075e6:	428b      	cmp	r3, r1
 80075e8:	d2ec      	bcs.n	80075c4 <quorem+0xa0>
 80075ea:	9a01      	ldr	r2, [sp, #4]
 80075ec:	00a3      	lsls	r3, r4, #2
 80075ee:	18d3      	adds	r3, r2, r3
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	2a00      	cmp	r2, #0
 80075f4:	d014      	beq.n	8007620 <quorem+0xfc>
 80075f6:	9b02      	ldr	r3, [sp, #8]
 80075f8:	3301      	adds	r3, #1
 80075fa:	9302      	str	r3, [sp, #8]
 80075fc:	9802      	ldr	r0, [sp, #8]
 80075fe:	b009      	add	sp, #36	@ 0x24
 8007600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007602:	682b      	ldr	r3, [r5, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d104      	bne.n	8007612 <quorem+0xee>
 8007608:	3c01      	subs	r4, #1
 800760a:	9b01      	ldr	r3, [sp, #4]
 800760c:	3d04      	subs	r5, #4
 800760e:	42ab      	cmp	r3, r5
 8007610:	d3f7      	bcc.n	8007602 <quorem+0xde>
 8007612:	9b03      	ldr	r3, [sp, #12]
 8007614:	611c      	str	r4, [r3, #16]
 8007616:	e7cc      	b.n	80075b2 <quorem+0x8e>
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	2a00      	cmp	r2, #0
 800761c:	d104      	bne.n	8007628 <quorem+0x104>
 800761e:	3c01      	subs	r4, #1
 8007620:	9a01      	ldr	r2, [sp, #4]
 8007622:	3b04      	subs	r3, #4
 8007624:	429a      	cmp	r2, r3
 8007626:	d3f7      	bcc.n	8007618 <quorem+0xf4>
 8007628:	9b03      	ldr	r3, [sp, #12]
 800762a:	611c      	str	r4, [r3, #16]
 800762c:	e7e3      	b.n	80075f6 <quorem+0xd2>
	...

08007630 <_dtoa_r>:
 8007630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007632:	0014      	movs	r4, r2
 8007634:	001d      	movs	r5, r3
 8007636:	69c6      	ldr	r6, [r0, #28]
 8007638:	b09d      	sub	sp, #116	@ 0x74
 800763a:	940a      	str	r4, [sp, #40]	@ 0x28
 800763c:	950b      	str	r5, [sp, #44]	@ 0x2c
 800763e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8007640:	9003      	str	r0, [sp, #12]
 8007642:	2e00      	cmp	r6, #0
 8007644:	d10f      	bne.n	8007666 <_dtoa_r+0x36>
 8007646:	2010      	movs	r0, #16
 8007648:	f000 fe2c 	bl	80082a4 <malloc>
 800764c:	9b03      	ldr	r3, [sp, #12]
 800764e:	1e02      	subs	r2, r0, #0
 8007650:	61d8      	str	r0, [r3, #28]
 8007652:	d104      	bne.n	800765e <_dtoa_r+0x2e>
 8007654:	21ef      	movs	r1, #239	@ 0xef
 8007656:	4bc7      	ldr	r3, [pc, #796]	@ (8007974 <_dtoa_r+0x344>)
 8007658:	48c7      	ldr	r0, [pc, #796]	@ (8007978 <_dtoa_r+0x348>)
 800765a:	f002 fca1 	bl	8009fa0 <__assert_func>
 800765e:	6046      	str	r6, [r0, #4]
 8007660:	6086      	str	r6, [r0, #8]
 8007662:	6006      	str	r6, [r0, #0]
 8007664:	60c6      	str	r6, [r0, #12]
 8007666:	9b03      	ldr	r3, [sp, #12]
 8007668:	69db      	ldr	r3, [r3, #28]
 800766a:	6819      	ldr	r1, [r3, #0]
 800766c:	2900      	cmp	r1, #0
 800766e:	d00b      	beq.n	8007688 <_dtoa_r+0x58>
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	2301      	movs	r3, #1
 8007674:	4093      	lsls	r3, r2
 8007676:	604a      	str	r2, [r1, #4]
 8007678:	608b      	str	r3, [r1, #8]
 800767a:	9803      	ldr	r0, [sp, #12]
 800767c:	f000 ff12 	bl	80084a4 <_Bfree>
 8007680:	2200      	movs	r2, #0
 8007682:	9b03      	ldr	r3, [sp, #12]
 8007684:	69db      	ldr	r3, [r3, #28]
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	2d00      	cmp	r5, #0
 800768a:	da1e      	bge.n	80076ca <_dtoa_r+0x9a>
 800768c:	2301      	movs	r3, #1
 800768e:	603b      	str	r3, [r7, #0]
 8007690:	006b      	lsls	r3, r5, #1
 8007692:	085b      	lsrs	r3, r3, #1
 8007694:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007696:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007698:	4bb8      	ldr	r3, [pc, #736]	@ (800797c <_dtoa_r+0x34c>)
 800769a:	4ab8      	ldr	r2, [pc, #736]	@ (800797c <_dtoa_r+0x34c>)
 800769c:	403b      	ands	r3, r7
 800769e:	4293      	cmp	r3, r2
 80076a0:	d116      	bne.n	80076d0 <_dtoa_r+0xa0>
 80076a2:	4bb7      	ldr	r3, [pc, #732]	@ (8007980 <_dtoa_r+0x350>)
 80076a4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80076a6:	6013      	str	r3, [r2, #0]
 80076a8:	033b      	lsls	r3, r7, #12
 80076aa:	0b1b      	lsrs	r3, r3, #12
 80076ac:	4323      	orrs	r3, r4
 80076ae:	d101      	bne.n	80076b4 <_dtoa_r+0x84>
 80076b0:	f000 fd80 	bl	80081b4 <_dtoa_r+0xb84>
 80076b4:	4bb3      	ldr	r3, [pc, #716]	@ (8007984 <_dtoa_r+0x354>)
 80076b6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80076b8:	9308      	str	r3, [sp, #32]
 80076ba:	2a00      	cmp	r2, #0
 80076bc:	d002      	beq.n	80076c4 <_dtoa_r+0x94>
 80076be:	4bb2      	ldr	r3, [pc, #712]	@ (8007988 <_dtoa_r+0x358>)
 80076c0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80076c2:	6013      	str	r3, [r2, #0]
 80076c4:	9808      	ldr	r0, [sp, #32]
 80076c6:	b01d      	add	sp, #116	@ 0x74
 80076c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076ca:	2300      	movs	r3, #0
 80076cc:	603b      	str	r3, [r7, #0]
 80076ce:	e7e2      	b.n	8007696 <_dtoa_r+0x66>
 80076d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076d4:	9212      	str	r2, [sp, #72]	@ 0x48
 80076d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80076d8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80076da:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80076dc:	2200      	movs	r2, #0
 80076de:	2300      	movs	r3, #0
 80076e0:	f7f8 feb4 	bl	800044c <__aeabi_dcmpeq>
 80076e4:	1e06      	subs	r6, r0, #0
 80076e6:	d00b      	beq.n	8007700 <_dtoa_r+0xd0>
 80076e8:	2301      	movs	r3, #1
 80076ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80076ec:	6013      	str	r3, [r2, #0]
 80076ee:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <_dtoa_r+0xca>
 80076f4:	4ba5      	ldr	r3, [pc, #660]	@ (800798c <_dtoa_r+0x35c>)
 80076f6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	4ba5      	ldr	r3, [pc, #660]	@ (8007990 <_dtoa_r+0x360>)
 80076fc:	9308      	str	r3, [sp, #32]
 80076fe:	e7e1      	b.n	80076c4 <_dtoa_r+0x94>
 8007700:	ab1a      	add	r3, sp, #104	@ 0x68
 8007702:	9301      	str	r3, [sp, #4]
 8007704:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007706:	9300      	str	r3, [sp, #0]
 8007708:	9803      	ldr	r0, [sp, #12]
 800770a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800770c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800770e:	f001 fa79 	bl	8008c04 <__d2b>
 8007712:	007a      	lsls	r2, r7, #1
 8007714:	9005      	str	r0, [sp, #20]
 8007716:	0d52      	lsrs	r2, r2, #21
 8007718:	d100      	bne.n	800771c <_dtoa_r+0xec>
 800771a:	e07b      	b.n	8007814 <_dtoa_r+0x1e4>
 800771c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800771e:	9618      	str	r6, [sp, #96]	@ 0x60
 8007720:	0319      	lsls	r1, r3, #12
 8007722:	4b9c      	ldr	r3, [pc, #624]	@ (8007994 <_dtoa_r+0x364>)
 8007724:	0b09      	lsrs	r1, r1, #12
 8007726:	430b      	orrs	r3, r1
 8007728:	499b      	ldr	r1, [pc, #620]	@ (8007998 <_dtoa_r+0x368>)
 800772a:	1857      	adds	r7, r2, r1
 800772c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800772e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007730:	0019      	movs	r1, r3
 8007732:	2200      	movs	r2, #0
 8007734:	4b99      	ldr	r3, [pc, #612]	@ (800799c <_dtoa_r+0x36c>)
 8007736:	f7fa fca7 	bl	8002088 <__aeabi_dsub>
 800773a:	4a99      	ldr	r2, [pc, #612]	@ (80079a0 <_dtoa_r+0x370>)
 800773c:	4b99      	ldr	r3, [pc, #612]	@ (80079a4 <_dtoa_r+0x374>)
 800773e:	f7fa f9bd 	bl	8001abc <__aeabi_dmul>
 8007742:	4a99      	ldr	r2, [pc, #612]	@ (80079a8 <_dtoa_r+0x378>)
 8007744:	4b99      	ldr	r3, [pc, #612]	@ (80079ac <_dtoa_r+0x37c>)
 8007746:	f7f9 f9b9 	bl	8000abc <__aeabi_dadd>
 800774a:	0004      	movs	r4, r0
 800774c:	0038      	movs	r0, r7
 800774e:	000d      	movs	r5, r1
 8007750:	f7fb f902 	bl	8002958 <__aeabi_i2d>
 8007754:	4a96      	ldr	r2, [pc, #600]	@ (80079b0 <_dtoa_r+0x380>)
 8007756:	4b97      	ldr	r3, [pc, #604]	@ (80079b4 <_dtoa_r+0x384>)
 8007758:	f7fa f9b0 	bl	8001abc <__aeabi_dmul>
 800775c:	0002      	movs	r2, r0
 800775e:	000b      	movs	r3, r1
 8007760:	0020      	movs	r0, r4
 8007762:	0029      	movs	r1, r5
 8007764:	f7f9 f9aa 	bl	8000abc <__aeabi_dadd>
 8007768:	0004      	movs	r4, r0
 800776a:	000d      	movs	r5, r1
 800776c:	f7fb f8b8 	bl	80028e0 <__aeabi_d2iz>
 8007770:	2200      	movs	r2, #0
 8007772:	9004      	str	r0, [sp, #16]
 8007774:	2300      	movs	r3, #0
 8007776:	0020      	movs	r0, r4
 8007778:	0029      	movs	r1, r5
 800777a:	f7f8 fe6d 	bl	8000458 <__aeabi_dcmplt>
 800777e:	2800      	cmp	r0, #0
 8007780:	d00b      	beq.n	800779a <_dtoa_r+0x16a>
 8007782:	9804      	ldr	r0, [sp, #16]
 8007784:	f7fb f8e8 	bl	8002958 <__aeabi_i2d>
 8007788:	002b      	movs	r3, r5
 800778a:	0022      	movs	r2, r4
 800778c:	f7f8 fe5e 	bl	800044c <__aeabi_dcmpeq>
 8007790:	4243      	negs	r3, r0
 8007792:	4158      	adcs	r0, r3
 8007794:	9b04      	ldr	r3, [sp, #16]
 8007796:	1a1b      	subs	r3, r3, r0
 8007798:	9304      	str	r3, [sp, #16]
 800779a:	2301      	movs	r3, #1
 800779c:	9315      	str	r3, [sp, #84]	@ 0x54
 800779e:	9b04      	ldr	r3, [sp, #16]
 80077a0:	2b16      	cmp	r3, #22
 80077a2:	d810      	bhi.n	80077c6 <_dtoa_r+0x196>
 80077a4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80077a6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80077a8:	9a04      	ldr	r2, [sp, #16]
 80077aa:	4b83      	ldr	r3, [pc, #524]	@ (80079b8 <_dtoa_r+0x388>)
 80077ac:	00d2      	lsls	r2, r2, #3
 80077ae:	189b      	adds	r3, r3, r2
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f7f8 fe50 	bl	8000458 <__aeabi_dcmplt>
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d047      	beq.n	800784c <_dtoa_r+0x21c>
 80077bc:	9b04      	ldr	r3, [sp, #16]
 80077be:	3b01      	subs	r3, #1
 80077c0:	9304      	str	r3, [sp, #16]
 80077c2:	2300      	movs	r3, #0
 80077c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80077c6:	2200      	movs	r2, #0
 80077c8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80077ca:	9206      	str	r2, [sp, #24]
 80077cc:	1bdb      	subs	r3, r3, r7
 80077ce:	1e5a      	subs	r2, r3, #1
 80077d0:	d53e      	bpl.n	8007850 <_dtoa_r+0x220>
 80077d2:	2201      	movs	r2, #1
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	9306      	str	r3, [sp, #24]
 80077d8:	2300      	movs	r3, #0
 80077da:	930d      	str	r3, [sp, #52]	@ 0x34
 80077dc:	9b04      	ldr	r3, [sp, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	db38      	blt.n	8007854 <_dtoa_r+0x224>
 80077e2:	9a04      	ldr	r2, [sp, #16]
 80077e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077e6:	4694      	mov	ip, r2
 80077e8:	4463      	add	r3, ip
 80077ea:	930d      	str	r3, [sp, #52]	@ 0x34
 80077ec:	2300      	movs	r3, #0
 80077ee:	9214      	str	r2, [sp, #80]	@ 0x50
 80077f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80077f2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80077f4:	2401      	movs	r4, #1
 80077f6:	2b09      	cmp	r3, #9
 80077f8:	d862      	bhi.n	80078c0 <_dtoa_r+0x290>
 80077fa:	2b05      	cmp	r3, #5
 80077fc:	dd02      	ble.n	8007804 <_dtoa_r+0x1d4>
 80077fe:	2400      	movs	r4, #0
 8007800:	3b04      	subs	r3, #4
 8007802:	9322      	str	r3, [sp, #136]	@ 0x88
 8007804:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007806:	1e98      	subs	r0, r3, #2
 8007808:	2803      	cmp	r0, #3
 800780a:	d863      	bhi.n	80078d4 <_dtoa_r+0x2a4>
 800780c:	f7f8 fc84 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007810:	2b385654 	.word	0x2b385654
 8007814:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007816:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8007818:	18f6      	adds	r6, r6, r3
 800781a:	4b68      	ldr	r3, [pc, #416]	@ (80079bc <_dtoa_r+0x38c>)
 800781c:	18f2      	adds	r2, r6, r3
 800781e:	2a20      	cmp	r2, #32
 8007820:	dd0f      	ble.n	8007842 <_dtoa_r+0x212>
 8007822:	2340      	movs	r3, #64	@ 0x40
 8007824:	1a9b      	subs	r3, r3, r2
 8007826:	409f      	lsls	r7, r3
 8007828:	4b65      	ldr	r3, [pc, #404]	@ (80079c0 <_dtoa_r+0x390>)
 800782a:	0038      	movs	r0, r7
 800782c:	18f3      	adds	r3, r6, r3
 800782e:	40dc      	lsrs	r4, r3
 8007830:	4320      	orrs	r0, r4
 8007832:	f7fb f8bf 	bl	80029b4 <__aeabi_ui2d>
 8007836:	2201      	movs	r2, #1
 8007838:	4b62      	ldr	r3, [pc, #392]	@ (80079c4 <_dtoa_r+0x394>)
 800783a:	1e77      	subs	r7, r6, #1
 800783c:	18cb      	adds	r3, r1, r3
 800783e:	9218      	str	r2, [sp, #96]	@ 0x60
 8007840:	e776      	b.n	8007730 <_dtoa_r+0x100>
 8007842:	2320      	movs	r3, #32
 8007844:	0020      	movs	r0, r4
 8007846:	1a9b      	subs	r3, r3, r2
 8007848:	4098      	lsls	r0, r3
 800784a:	e7f2      	b.n	8007832 <_dtoa_r+0x202>
 800784c:	9015      	str	r0, [sp, #84]	@ 0x54
 800784e:	e7ba      	b.n	80077c6 <_dtoa_r+0x196>
 8007850:	920d      	str	r2, [sp, #52]	@ 0x34
 8007852:	e7c3      	b.n	80077dc <_dtoa_r+0x1ac>
 8007854:	9b06      	ldr	r3, [sp, #24]
 8007856:	9a04      	ldr	r2, [sp, #16]
 8007858:	1a9b      	subs	r3, r3, r2
 800785a:	9306      	str	r3, [sp, #24]
 800785c:	4253      	negs	r3, r2
 800785e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007860:	2300      	movs	r3, #0
 8007862:	9314      	str	r3, [sp, #80]	@ 0x50
 8007864:	e7c5      	b.n	80077f2 <_dtoa_r+0x1c2>
 8007866:	2301      	movs	r3, #1
 8007868:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800786a:	9310      	str	r3, [sp, #64]	@ 0x40
 800786c:	4694      	mov	ip, r2
 800786e:	9b04      	ldr	r3, [sp, #16]
 8007870:	4463      	add	r3, ip
 8007872:	930e      	str	r3, [sp, #56]	@ 0x38
 8007874:	3301      	adds	r3, #1
 8007876:	9309      	str	r3, [sp, #36]	@ 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	dc08      	bgt.n	800788e <_dtoa_r+0x25e>
 800787c:	2301      	movs	r3, #1
 800787e:	e006      	b.n	800788e <_dtoa_r+0x25e>
 8007880:	2301      	movs	r3, #1
 8007882:	9310      	str	r3, [sp, #64]	@ 0x40
 8007884:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007886:	2b00      	cmp	r3, #0
 8007888:	dd28      	ble.n	80078dc <_dtoa_r+0x2ac>
 800788a:	930e      	str	r3, [sp, #56]	@ 0x38
 800788c:	9309      	str	r3, [sp, #36]	@ 0x24
 800788e:	9a03      	ldr	r2, [sp, #12]
 8007890:	2100      	movs	r1, #0
 8007892:	69d0      	ldr	r0, [r2, #28]
 8007894:	2204      	movs	r2, #4
 8007896:	0015      	movs	r5, r2
 8007898:	3514      	adds	r5, #20
 800789a:	429d      	cmp	r5, r3
 800789c:	d923      	bls.n	80078e6 <_dtoa_r+0x2b6>
 800789e:	6041      	str	r1, [r0, #4]
 80078a0:	9803      	ldr	r0, [sp, #12]
 80078a2:	f000 fdbb 	bl	800841c <_Balloc>
 80078a6:	9008      	str	r0, [sp, #32]
 80078a8:	2800      	cmp	r0, #0
 80078aa:	d11f      	bne.n	80078ec <_dtoa_r+0x2bc>
 80078ac:	21b0      	movs	r1, #176	@ 0xb0
 80078ae:	4b46      	ldr	r3, [pc, #280]	@ (80079c8 <_dtoa_r+0x398>)
 80078b0:	4831      	ldr	r0, [pc, #196]	@ (8007978 <_dtoa_r+0x348>)
 80078b2:	9a08      	ldr	r2, [sp, #32]
 80078b4:	31ff      	adds	r1, #255	@ 0xff
 80078b6:	e6d0      	b.n	800765a <_dtoa_r+0x2a>
 80078b8:	2300      	movs	r3, #0
 80078ba:	e7e2      	b.n	8007882 <_dtoa_r+0x252>
 80078bc:	2300      	movs	r3, #0
 80078be:	e7d3      	b.n	8007868 <_dtoa_r+0x238>
 80078c0:	2300      	movs	r3, #0
 80078c2:	9410      	str	r4, [sp, #64]	@ 0x40
 80078c4:	9322      	str	r3, [sp, #136]	@ 0x88
 80078c6:	3b01      	subs	r3, #1
 80078c8:	2200      	movs	r2, #0
 80078ca:	930e      	str	r3, [sp, #56]	@ 0x38
 80078cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80078ce:	3313      	adds	r3, #19
 80078d0:	9223      	str	r2, [sp, #140]	@ 0x8c
 80078d2:	e7dc      	b.n	800788e <_dtoa_r+0x25e>
 80078d4:	2301      	movs	r3, #1
 80078d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80078d8:	3b02      	subs	r3, #2
 80078da:	e7f5      	b.n	80078c8 <_dtoa_r+0x298>
 80078dc:	2301      	movs	r3, #1
 80078de:	001a      	movs	r2, r3
 80078e0:	930e      	str	r3, [sp, #56]	@ 0x38
 80078e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80078e4:	e7f4      	b.n	80078d0 <_dtoa_r+0x2a0>
 80078e6:	3101      	adds	r1, #1
 80078e8:	0052      	lsls	r2, r2, #1
 80078ea:	e7d4      	b.n	8007896 <_dtoa_r+0x266>
 80078ec:	9b03      	ldr	r3, [sp, #12]
 80078ee:	9a08      	ldr	r2, [sp, #32]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	601a      	str	r2, [r3, #0]
 80078f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078f6:	2b0e      	cmp	r3, #14
 80078f8:	d900      	bls.n	80078fc <_dtoa_r+0x2cc>
 80078fa:	e0d6      	b.n	8007aaa <_dtoa_r+0x47a>
 80078fc:	2c00      	cmp	r4, #0
 80078fe:	d100      	bne.n	8007902 <_dtoa_r+0x2d2>
 8007900:	e0d3      	b.n	8007aaa <_dtoa_r+0x47a>
 8007902:	9b04      	ldr	r3, [sp, #16]
 8007904:	2b00      	cmp	r3, #0
 8007906:	dd63      	ble.n	80079d0 <_dtoa_r+0x3a0>
 8007908:	210f      	movs	r1, #15
 800790a:	9a04      	ldr	r2, [sp, #16]
 800790c:	4b2a      	ldr	r3, [pc, #168]	@ (80079b8 <_dtoa_r+0x388>)
 800790e:	400a      	ands	r2, r1
 8007910:	00d2      	lsls	r2, r2, #3
 8007912:	189b      	adds	r3, r3, r2
 8007914:	681e      	ldr	r6, [r3, #0]
 8007916:	685f      	ldr	r7, [r3, #4]
 8007918:	9b04      	ldr	r3, [sp, #16]
 800791a:	2402      	movs	r4, #2
 800791c:	111d      	asrs	r5, r3, #4
 800791e:	05db      	lsls	r3, r3, #23
 8007920:	d50a      	bpl.n	8007938 <_dtoa_r+0x308>
 8007922:	4b2a      	ldr	r3, [pc, #168]	@ (80079cc <_dtoa_r+0x39c>)
 8007924:	400d      	ands	r5, r1
 8007926:	6a1a      	ldr	r2, [r3, #32]
 8007928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800792c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800792e:	f7f9 fc8b 	bl	8001248 <__aeabi_ddiv>
 8007932:	900a      	str	r0, [sp, #40]	@ 0x28
 8007934:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007936:	3401      	adds	r4, #1
 8007938:	4b24      	ldr	r3, [pc, #144]	@ (80079cc <_dtoa_r+0x39c>)
 800793a:	930c      	str	r3, [sp, #48]	@ 0x30
 800793c:	2d00      	cmp	r5, #0
 800793e:	d108      	bne.n	8007952 <_dtoa_r+0x322>
 8007940:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007942:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007944:	0032      	movs	r2, r6
 8007946:	003b      	movs	r3, r7
 8007948:	f7f9 fc7e 	bl	8001248 <__aeabi_ddiv>
 800794c:	900a      	str	r0, [sp, #40]	@ 0x28
 800794e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007950:	e059      	b.n	8007a06 <_dtoa_r+0x3d6>
 8007952:	2301      	movs	r3, #1
 8007954:	421d      	tst	r5, r3
 8007956:	d009      	beq.n	800796c <_dtoa_r+0x33c>
 8007958:	18e4      	adds	r4, r4, r3
 800795a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800795c:	0030      	movs	r0, r6
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	0039      	movs	r1, r7
 8007964:	f7fa f8aa 	bl	8001abc <__aeabi_dmul>
 8007968:	0006      	movs	r6, r0
 800796a:	000f      	movs	r7, r1
 800796c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800796e:	106d      	asrs	r5, r5, #1
 8007970:	3308      	adds	r3, #8
 8007972:	e7e2      	b.n	800793a <_dtoa_r+0x30a>
 8007974:	0800ae36 	.word	0x0800ae36
 8007978:	0800ae4d 	.word	0x0800ae4d
 800797c:	7ff00000 	.word	0x7ff00000
 8007980:	0000270f 	.word	0x0000270f
 8007984:	0800ae32 	.word	0x0800ae32
 8007988:	0800ae35 	.word	0x0800ae35
 800798c:	0800ae01 	.word	0x0800ae01
 8007990:	0800ae00 	.word	0x0800ae00
 8007994:	3ff00000 	.word	0x3ff00000
 8007998:	fffffc01 	.word	0xfffffc01
 800799c:	3ff80000 	.word	0x3ff80000
 80079a0:	636f4361 	.word	0x636f4361
 80079a4:	3fd287a7 	.word	0x3fd287a7
 80079a8:	8b60c8b3 	.word	0x8b60c8b3
 80079ac:	3fc68a28 	.word	0x3fc68a28
 80079b0:	509f79fb 	.word	0x509f79fb
 80079b4:	3fd34413 	.word	0x3fd34413
 80079b8:	0800b000 	.word	0x0800b000
 80079bc:	00000432 	.word	0x00000432
 80079c0:	00000412 	.word	0x00000412
 80079c4:	fe100000 	.word	0xfe100000
 80079c8:	0800aea5 	.word	0x0800aea5
 80079cc:	0800afd8 	.word	0x0800afd8
 80079d0:	9b04      	ldr	r3, [sp, #16]
 80079d2:	2402      	movs	r4, #2
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d016      	beq.n	8007a06 <_dtoa_r+0x3d6>
 80079d8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80079da:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80079dc:	220f      	movs	r2, #15
 80079de:	425d      	negs	r5, r3
 80079e0:	402a      	ands	r2, r5
 80079e2:	4bd5      	ldr	r3, [pc, #852]	@ (8007d38 <_dtoa_r+0x708>)
 80079e4:	00d2      	lsls	r2, r2, #3
 80079e6:	189b      	adds	r3, r3, r2
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f7fa f866 	bl	8001abc <__aeabi_dmul>
 80079f0:	2701      	movs	r7, #1
 80079f2:	2300      	movs	r3, #0
 80079f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80079f6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80079f8:	4ed0      	ldr	r6, [pc, #832]	@ (8007d3c <_dtoa_r+0x70c>)
 80079fa:	112d      	asrs	r5, r5, #4
 80079fc:	2d00      	cmp	r5, #0
 80079fe:	d000      	beq.n	8007a02 <_dtoa_r+0x3d2>
 8007a00:	e095      	b.n	8007b2e <_dtoa_r+0x4fe>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1a2      	bne.n	800794c <_dtoa_r+0x31c>
 8007a06:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007a08:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007a0a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d100      	bne.n	8007a12 <_dtoa_r+0x3e2>
 8007a10:	e098      	b.n	8007b44 <_dtoa_r+0x514>
 8007a12:	2200      	movs	r2, #0
 8007a14:	0030      	movs	r0, r6
 8007a16:	0039      	movs	r1, r7
 8007a18:	4bc9      	ldr	r3, [pc, #804]	@ (8007d40 <_dtoa_r+0x710>)
 8007a1a:	f7f8 fd1d 	bl	8000458 <__aeabi_dcmplt>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	d100      	bne.n	8007a24 <_dtoa_r+0x3f4>
 8007a22:	e08f      	b.n	8007b44 <_dtoa_r+0x514>
 8007a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d100      	bne.n	8007a2c <_dtoa_r+0x3fc>
 8007a2a:	e08b      	b.n	8007b44 <_dtoa_r+0x514>
 8007a2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	dd37      	ble.n	8007aa2 <_dtoa_r+0x472>
 8007a32:	9b04      	ldr	r3, [sp, #16]
 8007a34:	2200      	movs	r2, #0
 8007a36:	3b01      	subs	r3, #1
 8007a38:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a3a:	0030      	movs	r0, r6
 8007a3c:	4bc1      	ldr	r3, [pc, #772]	@ (8007d44 <_dtoa_r+0x714>)
 8007a3e:	0039      	movs	r1, r7
 8007a40:	f7fa f83c 	bl	8001abc <__aeabi_dmul>
 8007a44:	900a      	str	r0, [sp, #40]	@ 0x28
 8007a46:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007a48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a4a:	3401      	adds	r4, #1
 8007a4c:	0020      	movs	r0, r4
 8007a4e:	9311      	str	r3, [sp, #68]	@ 0x44
 8007a50:	f7fa ff82 	bl	8002958 <__aeabi_i2d>
 8007a54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a58:	f7fa f830 	bl	8001abc <__aeabi_dmul>
 8007a5c:	4bba      	ldr	r3, [pc, #744]	@ (8007d48 <_dtoa_r+0x718>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f7f9 f82c 	bl	8000abc <__aeabi_dadd>
 8007a64:	4bb9      	ldr	r3, [pc, #740]	@ (8007d4c <_dtoa_r+0x71c>)
 8007a66:	0006      	movs	r6, r0
 8007a68:	18cf      	adds	r7, r1, r3
 8007a6a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d16d      	bne.n	8007b4c <_dtoa_r+0x51c>
 8007a70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007a72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a74:	2200      	movs	r2, #0
 8007a76:	4bb6      	ldr	r3, [pc, #728]	@ (8007d50 <_dtoa_r+0x720>)
 8007a78:	f7fa fb06 	bl	8002088 <__aeabi_dsub>
 8007a7c:	0032      	movs	r2, r6
 8007a7e:	003b      	movs	r3, r7
 8007a80:	0004      	movs	r4, r0
 8007a82:	000d      	movs	r5, r1
 8007a84:	f7f8 fcfc 	bl	8000480 <__aeabi_dcmpgt>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d000      	beq.n	8007a8e <_dtoa_r+0x45e>
 8007a8c:	e2b6      	b.n	8007ffc <_dtoa_r+0x9cc>
 8007a8e:	2180      	movs	r1, #128	@ 0x80
 8007a90:	0609      	lsls	r1, r1, #24
 8007a92:	187b      	adds	r3, r7, r1
 8007a94:	0032      	movs	r2, r6
 8007a96:	0020      	movs	r0, r4
 8007a98:	0029      	movs	r1, r5
 8007a9a:	f7f8 fcdd 	bl	8000458 <__aeabi_dcmplt>
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d128      	bne.n	8007af4 <_dtoa_r+0x4c4>
 8007aa2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007aa4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8007aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007aa8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007aaa:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	da00      	bge.n	8007ab2 <_dtoa_r+0x482>
 8007ab0:	e174      	b.n	8007d9c <_dtoa_r+0x76c>
 8007ab2:	9a04      	ldr	r2, [sp, #16]
 8007ab4:	2a0e      	cmp	r2, #14
 8007ab6:	dd00      	ble.n	8007aba <_dtoa_r+0x48a>
 8007ab8:	e170      	b.n	8007d9c <_dtoa_r+0x76c>
 8007aba:	4b9f      	ldr	r3, [pc, #636]	@ (8007d38 <_dtoa_r+0x708>)
 8007abc:	00d2      	lsls	r2, r2, #3
 8007abe:	189b      	adds	r3, r3, r2
 8007ac0:	685c      	ldr	r4, [r3, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	9306      	str	r3, [sp, #24]
 8007ac6:	9407      	str	r4, [sp, #28]
 8007ac8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	db00      	blt.n	8007ad0 <_dtoa_r+0x4a0>
 8007ace:	e0e7      	b.n	8007ca0 <_dtoa_r+0x670>
 8007ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	dd00      	ble.n	8007ad8 <_dtoa_r+0x4a8>
 8007ad6:	e0e3      	b.n	8007ca0 <_dtoa_r+0x670>
 8007ad8:	d10c      	bne.n	8007af4 <_dtoa_r+0x4c4>
 8007ada:	9806      	ldr	r0, [sp, #24]
 8007adc:	9907      	ldr	r1, [sp, #28]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	4b9b      	ldr	r3, [pc, #620]	@ (8007d50 <_dtoa_r+0x720>)
 8007ae2:	f7f9 ffeb 	bl	8001abc <__aeabi_dmul>
 8007ae6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ae8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007aea:	f7f8 fcd3 	bl	8000494 <__aeabi_dcmpge>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	d100      	bne.n	8007af4 <_dtoa_r+0x4c4>
 8007af2:	e286      	b.n	8008002 <_dtoa_r+0x9d2>
 8007af4:	2600      	movs	r6, #0
 8007af6:	0037      	movs	r7, r6
 8007af8:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007afa:	9c08      	ldr	r4, [sp, #32]
 8007afc:	43db      	mvns	r3, r3
 8007afe:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b00:	9704      	str	r7, [sp, #16]
 8007b02:	2700      	movs	r7, #0
 8007b04:	0031      	movs	r1, r6
 8007b06:	9803      	ldr	r0, [sp, #12]
 8007b08:	f000 fccc 	bl	80084a4 <_Bfree>
 8007b0c:	9b04      	ldr	r3, [sp, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d100      	bne.n	8007b14 <_dtoa_r+0x4e4>
 8007b12:	e0bb      	b.n	8007c8c <_dtoa_r+0x65c>
 8007b14:	2f00      	cmp	r7, #0
 8007b16:	d005      	beq.n	8007b24 <_dtoa_r+0x4f4>
 8007b18:	429f      	cmp	r7, r3
 8007b1a:	d003      	beq.n	8007b24 <_dtoa_r+0x4f4>
 8007b1c:	0039      	movs	r1, r7
 8007b1e:	9803      	ldr	r0, [sp, #12]
 8007b20:	f000 fcc0 	bl	80084a4 <_Bfree>
 8007b24:	9904      	ldr	r1, [sp, #16]
 8007b26:	9803      	ldr	r0, [sp, #12]
 8007b28:	f000 fcbc 	bl	80084a4 <_Bfree>
 8007b2c:	e0ae      	b.n	8007c8c <_dtoa_r+0x65c>
 8007b2e:	423d      	tst	r5, r7
 8007b30:	d005      	beq.n	8007b3e <_dtoa_r+0x50e>
 8007b32:	6832      	ldr	r2, [r6, #0]
 8007b34:	6873      	ldr	r3, [r6, #4]
 8007b36:	f7f9 ffc1 	bl	8001abc <__aeabi_dmul>
 8007b3a:	003b      	movs	r3, r7
 8007b3c:	3401      	adds	r4, #1
 8007b3e:	106d      	asrs	r5, r5, #1
 8007b40:	3608      	adds	r6, #8
 8007b42:	e75b      	b.n	80079fc <_dtoa_r+0x3cc>
 8007b44:	9b04      	ldr	r3, [sp, #16]
 8007b46:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b4a:	e77f      	b.n	8007a4c <_dtoa_r+0x41c>
 8007b4c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007b4e:	4b7a      	ldr	r3, [pc, #488]	@ (8007d38 <_dtoa_r+0x708>)
 8007b50:	3a01      	subs	r2, #1
 8007b52:	00d2      	lsls	r2, r2, #3
 8007b54:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007b56:	189b      	adds	r3, r3, r2
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	2900      	cmp	r1, #0
 8007b5e:	d04c      	beq.n	8007bfa <_dtoa_r+0x5ca>
 8007b60:	2000      	movs	r0, #0
 8007b62:	497c      	ldr	r1, [pc, #496]	@ (8007d54 <_dtoa_r+0x724>)
 8007b64:	f7f9 fb70 	bl	8001248 <__aeabi_ddiv>
 8007b68:	0032      	movs	r2, r6
 8007b6a:	003b      	movs	r3, r7
 8007b6c:	f7fa fa8c 	bl	8002088 <__aeabi_dsub>
 8007b70:	9a08      	ldr	r2, [sp, #32]
 8007b72:	0006      	movs	r6, r0
 8007b74:	4694      	mov	ip, r2
 8007b76:	000f      	movs	r7, r1
 8007b78:	9b08      	ldr	r3, [sp, #32]
 8007b7a:	9316      	str	r3, [sp, #88]	@ 0x58
 8007b7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007b7e:	4463      	add	r3, ip
 8007b80:	9311      	str	r3, [sp, #68]	@ 0x44
 8007b82:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007b84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b86:	f7fa feab 	bl	80028e0 <__aeabi_d2iz>
 8007b8a:	0005      	movs	r5, r0
 8007b8c:	f7fa fee4 	bl	8002958 <__aeabi_i2d>
 8007b90:	0002      	movs	r2, r0
 8007b92:	000b      	movs	r3, r1
 8007b94:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007b96:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b98:	f7fa fa76 	bl	8002088 <__aeabi_dsub>
 8007b9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b9e:	3530      	adds	r5, #48	@ 0x30
 8007ba0:	1c5c      	adds	r4, r3, #1
 8007ba2:	701d      	strb	r5, [r3, #0]
 8007ba4:	0032      	movs	r2, r6
 8007ba6:	003b      	movs	r3, r7
 8007ba8:	900a      	str	r0, [sp, #40]	@ 0x28
 8007baa:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007bac:	f7f8 fc54 	bl	8000458 <__aeabi_dcmplt>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d16b      	bne.n	8007c8c <_dtoa_r+0x65c>
 8007bb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007bb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007bb8:	2000      	movs	r0, #0
 8007bba:	4961      	ldr	r1, [pc, #388]	@ (8007d40 <_dtoa_r+0x710>)
 8007bbc:	f7fa fa64 	bl	8002088 <__aeabi_dsub>
 8007bc0:	0032      	movs	r2, r6
 8007bc2:	003b      	movs	r3, r7
 8007bc4:	f7f8 fc48 	bl	8000458 <__aeabi_dcmplt>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	d000      	beq.n	8007bce <_dtoa_r+0x59e>
 8007bcc:	e0c6      	b.n	8007d5c <_dtoa_r+0x72c>
 8007bce:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007bd0:	42a3      	cmp	r3, r4
 8007bd2:	d100      	bne.n	8007bd6 <_dtoa_r+0x5a6>
 8007bd4:	e765      	b.n	8007aa2 <_dtoa_r+0x472>
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	0030      	movs	r0, r6
 8007bda:	0039      	movs	r1, r7
 8007bdc:	4b59      	ldr	r3, [pc, #356]	@ (8007d44 <_dtoa_r+0x714>)
 8007bde:	f7f9 ff6d 	bl	8001abc <__aeabi_dmul>
 8007be2:	2200      	movs	r2, #0
 8007be4:	0006      	movs	r6, r0
 8007be6:	000f      	movs	r7, r1
 8007be8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007bea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007bec:	4b55      	ldr	r3, [pc, #340]	@ (8007d44 <_dtoa_r+0x714>)
 8007bee:	f7f9 ff65 	bl	8001abc <__aeabi_dmul>
 8007bf2:	9416      	str	r4, [sp, #88]	@ 0x58
 8007bf4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007bf6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007bf8:	e7c3      	b.n	8007b82 <_dtoa_r+0x552>
 8007bfa:	0030      	movs	r0, r6
 8007bfc:	0039      	movs	r1, r7
 8007bfe:	f7f9 ff5d 	bl	8001abc <__aeabi_dmul>
 8007c02:	9d08      	ldr	r5, [sp, #32]
 8007c04:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007c06:	002b      	movs	r3, r5
 8007c08:	4694      	mov	ip, r2
 8007c0a:	9016      	str	r0, [sp, #88]	@ 0x58
 8007c0c:	9117      	str	r1, [sp, #92]	@ 0x5c
 8007c0e:	4463      	add	r3, ip
 8007c10:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c12:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007c14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c16:	f7fa fe63 	bl	80028e0 <__aeabi_d2iz>
 8007c1a:	0004      	movs	r4, r0
 8007c1c:	f7fa fe9c 	bl	8002958 <__aeabi_i2d>
 8007c20:	000b      	movs	r3, r1
 8007c22:	0002      	movs	r2, r0
 8007c24:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007c26:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c28:	f7fa fa2e 	bl	8002088 <__aeabi_dsub>
 8007c2c:	3430      	adds	r4, #48	@ 0x30
 8007c2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c30:	702c      	strb	r4, [r5, #0]
 8007c32:	3501      	adds	r5, #1
 8007c34:	0006      	movs	r6, r0
 8007c36:	000f      	movs	r7, r1
 8007c38:	42ab      	cmp	r3, r5
 8007c3a:	d12a      	bne.n	8007c92 <_dtoa_r+0x662>
 8007c3c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8007c3e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8007c40:	9b08      	ldr	r3, [sp, #32]
 8007c42:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007c44:	469c      	mov	ip, r3
 8007c46:	2200      	movs	r2, #0
 8007c48:	4b42      	ldr	r3, [pc, #264]	@ (8007d54 <_dtoa_r+0x724>)
 8007c4a:	4464      	add	r4, ip
 8007c4c:	f7f8 ff36 	bl	8000abc <__aeabi_dadd>
 8007c50:	0002      	movs	r2, r0
 8007c52:	000b      	movs	r3, r1
 8007c54:	0030      	movs	r0, r6
 8007c56:	0039      	movs	r1, r7
 8007c58:	f7f8 fc12 	bl	8000480 <__aeabi_dcmpgt>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d000      	beq.n	8007c62 <_dtoa_r+0x632>
 8007c60:	e07c      	b.n	8007d5c <_dtoa_r+0x72c>
 8007c62:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007c64:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007c66:	2000      	movs	r0, #0
 8007c68:	493a      	ldr	r1, [pc, #232]	@ (8007d54 <_dtoa_r+0x724>)
 8007c6a:	f7fa fa0d 	bl	8002088 <__aeabi_dsub>
 8007c6e:	0002      	movs	r2, r0
 8007c70:	000b      	movs	r3, r1
 8007c72:	0030      	movs	r0, r6
 8007c74:	0039      	movs	r1, r7
 8007c76:	f7f8 fbef 	bl	8000458 <__aeabi_dcmplt>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	d100      	bne.n	8007c80 <_dtoa_r+0x650>
 8007c7e:	e710      	b.n	8007aa2 <_dtoa_r+0x472>
 8007c80:	0023      	movs	r3, r4
 8007c82:	3c01      	subs	r4, #1
 8007c84:	7822      	ldrb	r2, [r4, #0]
 8007c86:	2a30      	cmp	r2, #48	@ 0x30
 8007c88:	d0fa      	beq.n	8007c80 <_dtoa_r+0x650>
 8007c8a:	001c      	movs	r4, r3
 8007c8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c8e:	9304      	str	r3, [sp, #16]
 8007c90:	e042      	b.n	8007d18 <_dtoa_r+0x6e8>
 8007c92:	2200      	movs	r2, #0
 8007c94:	4b2b      	ldr	r3, [pc, #172]	@ (8007d44 <_dtoa_r+0x714>)
 8007c96:	f7f9 ff11 	bl	8001abc <__aeabi_dmul>
 8007c9a:	900a      	str	r0, [sp, #40]	@ 0x28
 8007c9c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007c9e:	e7b8      	b.n	8007c12 <_dtoa_r+0x5e2>
 8007ca0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ca2:	9d08      	ldr	r5, [sp, #32]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	195b      	adds	r3, r3, r5
 8007ca8:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007caa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007cac:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cae:	9a06      	ldr	r2, [sp, #24]
 8007cb0:	9b07      	ldr	r3, [sp, #28]
 8007cb2:	0030      	movs	r0, r6
 8007cb4:	0039      	movs	r1, r7
 8007cb6:	f7f9 fac7 	bl	8001248 <__aeabi_ddiv>
 8007cba:	f7fa fe11 	bl	80028e0 <__aeabi_d2iz>
 8007cbe:	9009      	str	r0, [sp, #36]	@ 0x24
 8007cc0:	f7fa fe4a 	bl	8002958 <__aeabi_i2d>
 8007cc4:	9a06      	ldr	r2, [sp, #24]
 8007cc6:	9b07      	ldr	r3, [sp, #28]
 8007cc8:	f7f9 fef8 	bl	8001abc <__aeabi_dmul>
 8007ccc:	0002      	movs	r2, r0
 8007cce:	000b      	movs	r3, r1
 8007cd0:	0030      	movs	r0, r6
 8007cd2:	0039      	movs	r1, r7
 8007cd4:	f7fa f9d8 	bl	8002088 <__aeabi_dsub>
 8007cd8:	002b      	movs	r3, r5
 8007cda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cdc:	3501      	adds	r5, #1
 8007cde:	3230      	adds	r2, #48	@ 0x30
 8007ce0:	701a      	strb	r2, [r3, #0]
 8007ce2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ce4:	002c      	movs	r4, r5
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d14b      	bne.n	8007d82 <_dtoa_r+0x752>
 8007cea:	0002      	movs	r2, r0
 8007cec:	000b      	movs	r3, r1
 8007cee:	f7f8 fee5 	bl	8000abc <__aeabi_dadd>
 8007cf2:	9a06      	ldr	r2, [sp, #24]
 8007cf4:	9b07      	ldr	r3, [sp, #28]
 8007cf6:	0006      	movs	r6, r0
 8007cf8:	000f      	movs	r7, r1
 8007cfa:	f7f8 fbc1 	bl	8000480 <__aeabi_dcmpgt>
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d12a      	bne.n	8007d58 <_dtoa_r+0x728>
 8007d02:	9a06      	ldr	r2, [sp, #24]
 8007d04:	9b07      	ldr	r3, [sp, #28]
 8007d06:	0030      	movs	r0, r6
 8007d08:	0039      	movs	r1, r7
 8007d0a:	f7f8 fb9f 	bl	800044c <__aeabi_dcmpeq>
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	d002      	beq.n	8007d18 <_dtoa_r+0x6e8>
 8007d12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d14:	07dd      	lsls	r5, r3, #31
 8007d16:	d41f      	bmi.n	8007d58 <_dtoa_r+0x728>
 8007d18:	9905      	ldr	r1, [sp, #20]
 8007d1a:	9803      	ldr	r0, [sp, #12]
 8007d1c:	f000 fbc2 	bl	80084a4 <_Bfree>
 8007d20:	2300      	movs	r3, #0
 8007d22:	7023      	strb	r3, [r4, #0]
 8007d24:	9b04      	ldr	r3, [sp, #16]
 8007d26:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007d28:	3301      	adds	r3, #1
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d100      	bne.n	8007d34 <_dtoa_r+0x704>
 8007d32:	e4c7      	b.n	80076c4 <_dtoa_r+0x94>
 8007d34:	601c      	str	r4, [r3, #0]
 8007d36:	e4c5      	b.n	80076c4 <_dtoa_r+0x94>
 8007d38:	0800b000 	.word	0x0800b000
 8007d3c:	0800afd8 	.word	0x0800afd8
 8007d40:	3ff00000 	.word	0x3ff00000
 8007d44:	40240000 	.word	0x40240000
 8007d48:	401c0000 	.word	0x401c0000
 8007d4c:	fcc00000 	.word	0xfcc00000
 8007d50:	40140000 	.word	0x40140000
 8007d54:	3fe00000 	.word	0x3fe00000
 8007d58:	9b04      	ldr	r3, [sp, #16]
 8007d5a:	930c      	str	r3, [sp, #48]	@ 0x30
 8007d5c:	0023      	movs	r3, r4
 8007d5e:	001c      	movs	r4, r3
 8007d60:	3b01      	subs	r3, #1
 8007d62:	781a      	ldrb	r2, [r3, #0]
 8007d64:	2a39      	cmp	r2, #57	@ 0x39
 8007d66:	d108      	bne.n	8007d7a <_dtoa_r+0x74a>
 8007d68:	9a08      	ldr	r2, [sp, #32]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d1f7      	bne.n	8007d5e <_dtoa_r+0x72e>
 8007d6e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007d70:	9908      	ldr	r1, [sp, #32]
 8007d72:	3201      	adds	r2, #1
 8007d74:	920c      	str	r2, [sp, #48]	@ 0x30
 8007d76:	2230      	movs	r2, #48	@ 0x30
 8007d78:	700a      	strb	r2, [r1, #0]
 8007d7a:	781a      	ldrb	r2, [r3, #0]
 8007d7c:	3201      	adds	r2, #1
 8007d7e:	701a      	strb	r2, [r3, #0]
 8007d80:	e784      	b.n	8007c8c <_dtoa_r+0x65c>
 8007d82:	2200      	movs	r2, #0
 8007d84:	4bc6      	ldr	r3, [pc, #792]	@ (80080a0 <_dtoa_r+0xa70>)
 8007d86:	f7f9 fe99 	bl	8001abc <__aeabi_dmul>
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	0006      	movs	r6, r0
 8007d90:	000f      	movs	r7, r1
 8007d92:	f7f8 fb5b 	bl	800044c <__aeabi_dcmpeq>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d089      	beq.n	8007cae <_dtoa_r+0x67e>
 8007d9a:	e7bd      	b.n	8007d18 <_dtoa_r+0x6e8>
 8007d9c:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007d9e:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007da0:	9c06      	ldr	r4, [sp, #24]
 8007da2:	2f00      	cmp	r7, #0
 8007da4:	d014      	beq.n	8007dd0 <_dtoa_r+0x7a0>
 8007da6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007da8:	2a01      	cmp	r2, #1
 8007daa:	dd00      	ble.n	8007dae <_dtoa_r+0x77e>
 8007dac:	e0e4      	b.n	8007f78 <_dtoa_r+0x948>
 8007dae:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007db0:	2a00      	cmp	r2, #0
 8007db2:	d100      	bne.n	8007db6 <_dtoa_r+0x786>
 8007db4:	e0da      	b.n	8007f6c <_dtoa_r+0x93c>
 8007db6:	4abb      	ldr	r2, [pc, #748]	@ (80080a4 <_dtoa_r+0xa74>)
 8007db8:	189b      	adds	r3, r3, r2
 8007dba:	9a06      	ldr	r2, [sp, #24]
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	18d2      	adds	r2, r2, r3
 8007dc0:	9206      	str	r2, [sp, #24]
 8007dc2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007dc4:	9803      	ldr	r0, [sp, #12]
 8007dc6:	18d3      	adds	r3, r2, r3
 8007dc8:	930d      	str	r3, [sp, #52]	@ 0x34
 8007dca:	f000 fc6f 	bl	80086ac <__i2b>
 8007dce:	0007      	movs	r7, r0
 8007dd0:	2c00      	cmp	r4, #0
 8007dd2:	d00e      	beq.n	8007df2 <_dtoa_r+0x7c2>
 8007dd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	dd0b      	ble.n	8007df2 <_dtoa_r+0x7c2>
 8007dda:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ddc:	0023      	movs	r3, r4
 8007dde:	4294      	cmp	r4, r2
 8007de0:	dd00      	ble.n	8007de4 <_dtoa_r+0x7b4>
 8007de2:	0013      	movs	r3, r2
 8007de4:	9a06      	ldr	r2, [sp, #24]
 8007de6:	1ae4      	subs	r4, r4, r3
 8007de8:	1ad2      	subs	r2, r2, r3
 8007dea:	9206      	str	r2, [sp, #24]
 8007dec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007dee:	1ad3      	subs	r3, r2, r3
 8007df0:	930d      	str	r3, [sp, #52]	@ 0x34
 8007df2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d021      	beq.n	8007e3c <_dtoa_r+0x80c>
 8007df8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d100      	bne.n	8007e00 <_dtoa_r+0x7d0>
 8007dfe:	e0d3      	b.n	8007fa8 <_dtoa_r+0x978>
 8007e00:	9e05      	ldr	r6, [sp, #20]
 8007e02:	2d00      	cmp	r5, #0
 8007e04:	d014      	beq.n	8007e30 <_dtoa_r+0x800>
 8007e06:	0039      	movs	r1, r7
 8007e08:	002a      	movs	r2, r5
 8007e0a:	9803      	ldr	r0, [sp, #12]
 8007e0c:	f000 fd10 	bl	8008830 <__pow5mult>
 8007e10:	9a05      	ldr	r2, [sp, #20]
 8007e12:	0001      	movs	r1, r0
 8007e14:	0007      	movs	r7, r0
 8007e16:	9803      	ldr	r0, [sp, #12]
 8007e18:	f000 fc60 	bl	80086dc <__multiply>
 8007e1c:	0006      	movs	r6, r0
 8007e1e:	9905      	ldr	r1, [sp, #20]
 8007e20:	9803      	ldr	r0, [sp, #12]
 8007e22:	f000 fb3f 	bl	80084a4 <_Bfree>
 8007e26:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e28:	9605      	str	r6, [sp, #20]
 8007e2a:	1b5b      	subs	r3, r3, r5
 8007e2c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e2e:	d005      	beq.n	8007e3c <_dtoa_r+0x80c>
 8007e30:	0031      	movs	r1, r6
 8007e32:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007e34:	9803      	ldr	r0, [sp, #12]
 8007e36:	f000 fcfb 	bl	8008830 <__pow5mult>
 8007e3a:	9005      	str	r0, [sp, #20]
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	9803      	ldr	r0, [sp, #12]
 8007e40:	f000 fc34 	bl	80086ac <__i2b>
 8007e44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007e46:	0006      	movs	r6, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d100      	bne.n	8007e4e <_dtoa_r+0x81e>
 8007e4c:	e1bc      	b.n	80081c8 <_dtoa_r+0xb98>
 8007e4e:	001a      	movs	r2, r3
 8007e50:	0001      	movs	r1, r0
 8007e52:	9803      	ldr	r0, [sp, #12]
 8007e54:	f000 fcec 	bl	8008830 <__pow5mult>
 8007e58:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007e5a:	0006      	movs	r6, r0
 8007e5c:	2500      	movs	r5, #0
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	dc16      	bgt.n	8007e90 <_dtoa_r+0x860>
 8007e62:	2500      	movs	r5, #0
 8007e64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e66:	42ab      	cmp	r3, r5
 8007e68:	d10e      	bne.n	8007e88 <_dtoa_r+0x858>
 8007e6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e6c:	031b      	lsls	r3, r3, #12
 8007e6e:	42ab      	cmp	r3, r5
 8007e70:	d10a      	bne.n	8007e88 <_dtoa_r+0x858>
 8007e72:	4b8d      	ldr	r3, [pc, #564]	@ (80080a8 <_dtoa_r+0xa78>)
 8007e74:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e76:	4213      	tst	r3, r2
 8007e78:	d006      	beq.n	8007e88 <_dtoa_r+0x858>
 8007e7a:	9b06      	ldr	r3, [sp, #24]
 8007e7c:	3501      	adds	r5, #1
 8007e7e:	3301      	adds	r3, #1
 8007e80:	9306      	str	r3, [sp, #24]
 8007e82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e84:	3301      	adds	r3, #1
 8007e86:	930d      	str	r3, [sp, #52]	@ 0x34
 8007e88:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007e8a:	2001      	movs	r0, #1
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d008      	beq.n	8007ea2 <_dtoa_r+0x872>
 8007e90:	6933      	ldr	r3, [r6, #16]
 8007e92:	3303      	adds	r3, #3
 8007e94:	009b      	lsls	r3, r3, #2
 8007e96:	18f3      	adds	r3, r6, r3
 8007e98:	6858      	ldr	r0, [r3, #4]
 8007e9a:	f000 fbb7 	bl	800860c <__hi0bits>
 8007e9e:	2320      	movs	r3, #32
 8007ea0:	1a18      	subs	r0, r3, r0
 8007ea2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ea4:	1818      	adds	r0, r3, r0
 8007ea6:	0002      	movs	r2, r0
 8007ea8:	231f      	movs	r3, #31
 8007eaa:	401a      	ands	r2, r3
 8007eac:	4218      	tst	r0, r3
 8007eae:	d100      	bne.n	8007eb2 <_dtoa_r+0x882>
 8007eb0:	e081      	b.n	8007fb6 <_dtoa_r+0x986>
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	1a9b      	subs	r3, r3, r2
 8007eb6:	2b04      	cmp	r3, #4
 8007eb8:	dd79      	ble.n	8007fae <_dtoa_r+0x97e>
 8007eba:	231c      	movs	r3, #28
 8007ebc:	1a9b      	subs	r3, r3, r2
 8007ebe:	9a06      	ldr	r2, [sp, #24]
 8007ec0:	18e4      	adds	r4, r4, r3
 8007ec2:	18d2      	adds	r2, r2, r3
 8007ec4:	9206      	str	r2, [sp, #24]
 8007ec6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ec8:	18d3      	adds	r3, r2, r3
 8007eca:	930d      	str	r3, [sp, #52]	@ 0x34
 8007ecc:	9b06      	ldr	r3, [sp, #24]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	dd05      	ble.n	8007ede <_dtoa_r+0x8ae>
 8007ed2:	001a      	movs	r2, r3
 8007ed4:	9905      	ldr	r1, [sp, #20]
 8007ed6:	9803      	ldr	r0, [sp, #12]
 8007ed8:	f000 fd06 	bl	80088e8 <__lshift>
 8007edc:	9005      	str	r0, [sp, #20]
 8007ede:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	dd05      	ble.n	8007ef0 <_dtoa_r+0x8c0>
 8007ee4:	0031      	movs	r1, r6
 8007ee6:	001a      	movs	r2, r3
 8007ee8:	9803      	ldr	r0, [sp, #12]
 8007eea:	f000 fcfd 	bl	80088e8 <__lshift>
 8007eee:	0006      	movs	r6, r0
 8007ef0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d061      	beq.n	8007fba <_dtoa_r+0x98a>
 8007ef6:	0031      	movs	r1, r6
 8007ef8:	9805      	ldr	r0, [sp, #20]
 8007efa:	f000 fd61 	bl	80089c0 <__mcmp>
 8007efe:	2800      	cmp	r0, #0
 8007f00:	da5b      	bge.n	8007fba <_dtoa_r+0x98a>
 8007f02:	9b04      	ldr	r3, [sp, #16]
 8007f04:	220a      	movs	r2, #10
 8007f06:	3b01      	subs	r3, #1
 8007f08:	930c      	str	r3, [sp, #48]	@ 0x30
 8007f0a:	9905      	ldr	r1, [sp, #20]
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	9803      	ldr	r0, [sp, #12]
 8007f10:	f000 faec 	bl	80084ec <__multadd>
 8007f14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f16:	9005      	str	r0, [sp, #20]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d100      	bne.n	8007f1e <_dtoa_r+0x8ee>
 8007f1c:	e15b      	b.n	80081d6 <_dtoa_r+0xba6>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	0039      	movs	r1, r7
 8007f22:	220a      	movs	r2, #10
 8007f24:	9803      	ldr	r0, [sp, #12]
 8007f26:	f000 fae1 	bl	80084ec <__multadd>
 8007f2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f2c:	0007      	movs	r7, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	dc4d      	bgt.n	8007fce <_dtoa_r+0x99e>
 8007f32:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	dd46      	ble.n	8007fc6 <_dtoa_r+0x996>
 8007f38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d000      	beq.n	8007f40 <_dtoa_r+0x910>
 8007f3e:	e5db      	b.n	8007af8 <_dtoa_r+0x4c8>
 8007f40:	0031      	movs	r1, r6
 8007f42:	2205      	movs	r2, #5
 8007f44:	9803      	ldr	r0, [sp, #12]
 8007f46:	f000 fad1 	bl	80084ec <__multadd>
 8007f4a:	0006      	movs	r6, r0
 8007f4c:	0001      	movs	r1, r0
 8007f4e:	9805      	ldr	r0, [sp, #20]
 8007f50:	f000 fd36 	bl	80089c0 <__mcmp>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	dc00      	bgt.n	8007f5a <_dtoa_r+0x92a>
 8007f58:	e5ce      	b.n	8007af8 <_dtoa_r+0x4c8>
 8007f5a:	9b08      	ldr	r3, [sp, #32]
 8007f5c:	9a08      	ldr	r2, [sp, #32]
 8007f5e:	1c5c      	adds	r4, r3, #1
 8007f60:	2331      	movs	r3, #49	@ 0x31
 8007f62:	7013      	strb	r3, [r2, #0]
 8007f64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f66:	3301      	adds	r3, #1
 8007f68:	930c      	str	r3, [sp, #48]	@ 0x30
 8007f6a:	e5c9      	b.n	8007b00 <_dtoa_r+0x4d0>
 8007f6c:	2336      	movs	r3, #54	@ 0x36
 8007f6e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007f70:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007f72:	1a9b      	subs	r3, r3, r2
 8007f74:	9c06      	ldr	r4, [sp, #24]
 8007f76:	e720      	b.n	8007dba <_dtoa_r+0x78a>
 8007f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f7a:	1e5d      	subs	r5, r3, #1
 8007f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f7e:	42ab      	cmp	r3, r5
 8007f80:	db08      	blt.n	8007f94 <_dtoa_r+0x964>
 8007f82:	1b5d      	subs	r5, r3, r5
 8007f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	daf4      	bge.n	8007f74 <_dtoa_r+0x944>
 8007f8a:	9b06      	ldr	r3, [sp, #24]
 8007f8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f8e:	1a9c      	subs	r4, r3, r2
 8007f90:	2300      	movs	r3, #0
 8007f92:	e712      	b.n	8007dba <_dtoa_r+0x78a>
 8007f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007f98:	1aeb      	subs	r3, r5, r3
 8007f9a:	18d3      	adds	r3, r2, r3
 8007f9c:	9314      	str	r3, [sp, #80]	@ 0x50
 8007f9e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8007fa0:	9c06      	ldr	r4, [sp, #24]
 8007fa2:	2500      	movs	r5, #0
 8007fa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa6:	e708      	b.n	8007dba <_dtoa_r+0x78a>
 8007fa8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007faa:	9905      	ldr	r1, [sp, #20]
 8007fac:	e742      	b.n	8007e34 <_dtoa_r+0x804>
 8007fae:	2b04      	cmp	r3, #4
 8007fb0:	d08c      	beq.n	8007ecc <_dtoa_r+0x89c>
 8007fb2:	331c      	adds	r3, #28
 8007fb4:	e783      	b.n	8007ebe <_dtoa_r+0x88e>
 8007fb6:	0013      	movs	r3, r2
 8007fb8:	e7fb      	b.n	8007fb2 <_dtoa_r+0x982>
 8007fba:	9b04      	ldr	r3, [sp, #16]
 8007fbc:	930c      	str	r3, [sp, #48]	@ 0x30
 8007fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fc0:	930e      	str	r3, [sp, #56]	@ 0x38
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	ddb5      	ble.n	8007f32 <_dtoa_r+0x902>
 8007fc6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d100      	bne.n	8007fce <_dtoa_r+0x99e>
 8007fcc:	e107      	b.n	80081de <_dtoa_r+0xbae>
 8007fce:	2c00      	cmp	r4, #0
 8007fd0:	dd05      	ble.n	8007fde <_dtoa_r+0x9ae>
 8007fd2:	0039      	movs	r1, r7
 8007fd4:	0022      	movs	r2, r4
 8007fd6:	9803      	ldr	r0, [sp, #12]
 8007fd8:	f000 fc86 	bl	80088e8 <__lshift>
 8007fdc:	0007      	movs	r7, r0
 8007fde:	9704      	str	r7, [sp, #16]
 8007fe0:	2d00      	cmp	r5, #0
 8007fe2:	d020      	beq.n	8008026 <_dtoa_r+0x9f6>
 8007fe4:	6879      	ldr	r1, [r7, #4]
 8007fe6:	9803      	ldr	r0, [sp, #12]
 8007fe8:	f000 fa18 	bl	800841c <_Balloc>
 8007fec:	1e04      	subs	r4, r0, #0
 8007fee:	d10c      	bne.n	800800a <_dtoa_r+0x9da>
 8007ff0:	0022      	movs	r2, r4
 8007ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80080ac <_dtoa_r+0xa7c>)
 8007ff4:	482e      	ldr	r0, [pc, #184]	@ (80080b0 <_dtoa_r+0xa80>)
 8007ff6:	492f      	ldr	r1, [pc, #188]	@ (80080b4 <_dtoa_r+0xa84>)
 8007ff8:	f7ff fb2f 	bl	800765a <_dtoa_r+0x2a>
 8007ffc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8007ffe:	0037      	movs	r7, r6
 8008000:	e7ab      	b.n	8007f5a <_dtoa_r+0x92a>
 8008002:	9b04      	ldr	r3, [sp, #16]
 8008004:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008006:	930c      	str	r3, [sp, #48]	@ 0x30
 8008008:	e7f9      	b.n	8007ffe <_dtoa_r+0x9ce>
 800800a:	0039      	movs	r1, r7
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	310c      	adds	r1, #12
 8008010:	3202      	adds	r2, #2
 8008012:	0092      	lsls	r2, r2, #2
 8008014:	300c      	adds	r0, #12
 8008016:	f001 ffb3 	bl	8009f80 <memcpy>
 800801a:	2201      	movs	r2, #1
 800801c:	0021      	movs	r1, r4
 800801e:	9803      	ldr	r0, [sp, #12]
 8008020:	f000 fc62 	bl	80088e8 <__lshift>
 8008024:	9004      	str	r0, [sp, #16]
 8008026:	9b08      	ldr	r3, [sp, #32]
 8008028:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800802a:	9306      	str	r3, [sp, #24]
 800802c:	3b01      	subs	r3, #1
 800802e:	189b      	adds	r3, r3, r2
 8008030:	2201      	movs	r2, #1
 8008032:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008036:	4013      	ands	r3, r2
 8008038:	930e      	str	r3, [sp, #56]	@ 0x38
 800803a:	0031      	movs	r1, r6
 800803c:	9805      	ldr	r0, [sp, #20]
 800803e:	f7ff fa71 	bl	8007524 <quorem>
 8008042:	0039      	movs	r1, r7
 8008044:	0005      	movs	r5, r0
 8008046:	900a      	str	r0, [sp, #40]	@ 0x28
 8008048:	9805      	ldr	r0, [sp, #20]
 800804a:	f000 fcb9 	bl	80089c0 <__mcmp>
 800804e:	9a04      	ldr	r2, [sp, #16]
 8008050:	900d      	str	r0, [sp, #52]	@ 0x34
 8008052:	0031      	movs	r1, r6
 8008054:	9803      	ldr	r0, [sp, #12]
 8008056:	f000 fccf 	bl	80089f8 <__mdiff>
 800805a:	2201      	movs	r2, #1
 800805c:	68c3      	ldr	r3, [r0, #12]
 800805e:	0004      	movs	r4, r0
 8008060:	3530      	adds	r5, #48	@ 0x30
 8008062:	9209      	str	r2, [sp, #36]	@ 0x24
 8008064:	2b00      	cmp	r3, #0
 8008066:	d104      	bne.n	8008072 <_dtoa_r+0xa42>
 8008068:	0001      	movs	r1, r0
 800806a:	9805      	ldr	r0, [sp, #20]
 800806c:	f000 fca8 	bl	80089c0 <__mcmp>
 8008070:	9009      	str	r0, [sp, #36]	@ 0x24
 8008072:	0021      	movs	r1, r4
 8008074:	9803      	ldr	r0, [sp, #12]
 8008076:	f000 fa15 	bl	80084a4 <_Bfree>
 800807a:	9b06      	ldr	r3, [sp, #24]
 800807c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800807e:	1c5c      	adds	r4, r3, #1
 8008080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008082:	4313      	orrs	r3, r2
 8008084:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008086:	4313      	orrs	r3, r2
 8008088:	d116      	bne.n	80080b8 <_dtoa_r+0xa88>
 800808a:	2d39      	cmp	r5, #57	@ 0x39
 800808c:	d02f      	beq.n	80080ee <_dtoa_r+0xabe>
 800808e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008090:	2b00      	cmp	r3, #0
 8008092:	dd01      	ble.n	8008098 <_dtoa_r+0xa68>
 8008094:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8008096:	3531      	adds	r5, #49	@ 0x31
 8008098:	9b06      	ldr	r3, [sp, #24]
 800809a:	701d      	strb	r5, [r3, #0]
 800809c:	e532      	b.n	8007b04 <_dtoa_r+0x4d4>
 800809e:	46c0      	nop			@ (mov r8, r8)
 80080a0:	40240000 	.word	0x40240000
 80080a4:	00000433 	.word	0x00000433
 80080a8:	7ff00000 	.word	0x7ff00000
 80080ac:	0800aea5 	.word	0x0800aea5
 80080b0:	0800ae4d 	.word	0x0800ae4d
 80080b4:	000002ef 	.word	0x000002ef
 80080b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	db04      	blt.n	80080c8 <_dtoa_r+0xa98>
 80080be:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80080c0:	4313      	orrs	r3, r2
 80080c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080c4:	4313      	orrs	r3, r2
 80080c6:	d11e      	bne.n	8008106 <_dtoa_r+0xad6>
 80080c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	dde4      	ble.n	8008098 <_dtoa_r+0xa68>
 80080ce:	9905      	ldr	r1, [sp, #20]
 80080d0:	2201      	movs	r2, #1
 80080d2:	9803      	ldr	r0, [sp, #12]
 80080d4:	f000 fc08 	bl	80088e8 <__lshift>
 80080d8:	0031      	movs	r1, r6
 80080da:	9005      	str	r0, [sp, #20]
 80080dc:	f000 fc70 	bl	80089c0 <__mcmp>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	dc02      	bgt.n	80080ea <_dtoa_r+0xaba>
 80080e4:	d1d8      	bne.n	8008098 <_dtoa_r+0xa68>
 80080e6:	07eb      	lsls	r3, r5, #31
 80080e8:	d5d6      	bpl.n	8008098 <_dtoa_r+0xa68>
 80080ea:	2d39      	cmp	r5, #57	@ 0x39
 80080ec:	d1d2      	bne.n	8008094 <_dtoa_r+0xa64>
 80080ee:	2339      	movs	r3, #57	@ 0x39
 80080f0:	9a06      	ldr	r2, [sp, #24]
 80080f2:	7013      	strb	r3, [r2, #0]
 80080f4:	0023      	movs	r3, r4
 80080f6:	001c      	movs	r4, r3
 80080f8:	3b01      	subs	r3, #1
 80080fa:	781a      	ldrb	r2, [r3, #0]
 80080fc:	2a39      	cmp	r2, #57	@ 0x39
 80080fe:	d050      	beq.n	80081a2 <_dtoa_r+0xb72>
 8008100:	3201      	adds	r2, #1
 8008102:	701a      	strb	r2, [r3, #0]
 8008104:	e4fe      	b.n	8007b04 <_dtoa_r+0x4d4>
 8008106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008108:	2b00      	cmp	r3, #0
 800810a:	dd03      	ble.n	8008114 <_dtoa_r+0xae4>
 800810c:	2d39      	cmp	r5, #57	@ 0x39
 800810e:	d0ee      	beq.n	80080ee <_dtoa_r+0xabe>
 8008110:	3501      	adds	r5, #1
 8008112:	e7c1      	b.n	8008098 <_dtoa_r+0xa68>
 8008114:	9b06      	ldr	r3, [sp, #24]
 8008116:	9a06      	ldr	r2, [sp, #24]
 8008118:	701d      	strb	r5, [r3, #0]
 800811a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800811c:	4293      	cmp	r3, r2
 800811e:	d02b      	beq.n	8008178 <_dtoa_r+0xb48>
 8008120:	2300      	movs	r3, #0
 8008122:	220a      	movs	r2, #10
 8008124:	9905      	ldr	r1, [sp, #20]
 8008126:	9803      	ldr	r0, [sp, #12]
 8008128:	f000 f9e0 	bl	80084ec <__multadd>
 800812c:	9b04      	ldr	r3, [sp, #16]
 800812e:	9005      	str	r0, [sp, #20]
 8008130:	429f      	cmp	r7, r3
 8008132:	d109      	bne.n	8008148 <_dtoa_r+0xb18>
 8008134:	0039      	movs	r1, r7
 8008136:	2300      	movs	r3, #0
 8008138:	220a      	movs	r2, #10
 800813a:	9803      	ldr	r0, [sp, #12]
 800813c:	f000 f9d6 	bl	80084ec <__multadd>
 8008140:	0007      	movs	r7, r0
 8008142:	9004      	str	r0, [sp, #16]
 8008144:	9406      	str	r4, [sp, #24]
 8008146:	e778      	b.n	800803a <_dtoa_r+0xa0a>
 8008148:	0039      	movs	r1, r7
 800814a:	2300      	movs	r3, #0
 800814c:	220a      	movs	r2, #10
 800814e:	9803      	ldr	r0, [sp, #12]
 8008150:	f000 f9cc 	bl	80084ec <__multadd>
 8008154:	2300      	movs	r3, #0
 8008156:	0007      	movs	r7, r0
 8008158:	220a      	movs	r2, #10
 800815a:	9904      	ldr	r1, [sp, #16]
 800815c:	9803      	ldr	r0, [sp, #12]
 800815e:	f000 f9c5 	bl	80084ec <__multadd>
 8008162:	9004      	str	r0, [sp, #16]
 8008164:	e7ee      	b.n	8008144 <_dtoa_r+0xb14>
 8008166:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008168:	2401      	movs	r4, #1
 800816a:	2b00      	cmp	r3, #0
 800816c:	dd00      	ble.n	8008170 <_dtoa_r+0xb40>
 800816e:	001c      	movs	r4, r3
 8008170:	9704      	str	r7, [sp, #16]
 8008172:	2700      	movs	r7, #0
 8008174:	9b08      	ldr	r3, [sp, #32]
 8008176:	191c      	adds	r4, r3, r4
 8008178:	9905      	ldr	r1, [sp, #20]
 800817a:	2201      	movs	r2, #1
 800817c:	9803      	ldr	r0, [sp, #12]
 800817e:	f000 fbb3 	bl	80088e8 <__lshift>
 8008182:	0031      	movs	r1, r6
 8008184:	9005      	str	r0, [sp, #20]
 8008186:	f000 fc1b 	bl	80089c0 <__mcmp>
 800818a:	2800      	cmp	r0, #0
 800818c:	dcb2      	bgt.n	80080f4 <_dtoa_r+0xac4>
 800818e:	d101      	bne.n	8008194 <_dtoa_r+0xb64>
 8008190:	07ed      	lsls	r5, r5, #31
 8008192:	d4af      	bmi.n	80080f4 <_dtoa_r+0xac4>
 8008194:	0023      	movs	r3, r4
 8008196:	001c      	movs	r4, r3
 8008198:	3b01      	subs	r3, #1
 800819a:	781a      	ldrb	r2, [r3, #0]
 800819c:	2a30      	cmp	r2, #48	@ 0x30
 800819e:	d0fa      	beq.n	8008196 <_dtoa_r+0xb66>
 80081a0:	e4b0      	b.n	8007b04 <_dtoa_r+0x4d4>
 80081a2:	9a08      	ldr	r2, [sp, #32]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d1a6      	bne.n	80080f6 <_dtoa_r+0xac6>
 80081a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081aa:	3301      	adds	r3, #1
 80081ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80081ae:	2331      	movs	r3, #49	@ 0x31
 80081b0:	7013      	strb	r3, [r2, #0]
 80081b2:	e4a7      	b.n	8007b04 <_dtoa_r+0x4d4>
 80081b4:	4b14      	ldr	r3, [pc, #80]	@ (8008208 <_dtoa_r+0xbd8>)
 80081b6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80081b8:	9308      	str	r3, [sp, #32]
 80081ba:	4b14      	ldr	r3, [pc, #80]	@ (800820c <_dtoa_r+0xbdc>)
 80081bc:	2a00      	cmp	r2, #0
 80081be:	d001      	beq.n	80081c4 <_dtoa_r+0xb94>
 80081c0:	f7ff fa7e 	bl	80076c0 <_dtoa_r+0x90>
 80081c4:	f7ff fa7e 	bl	80076c4 <_dtoa_r+0x94>
 80081c8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	dc00      	bgt.n	80081d0 <_dtoa_r+0xba0>
 80081ce:	e648      	b.n	8007e62 <_dtoa_r+0x832>
 80081d0:	2001      	movs	r0, #1
 80081d2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80081d4:	e665      	b.n	8007ea2 <_dtoa_r+0x872>
 80081d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081d8:	2b00      	cmp	r3, #0
 80081da:	dc00      	bgt.n	80081de <_dtoa_r+0xbae>
 80081dc:	e6a9      	b.n	8007f32 <_dtoa_r+0x902>
 80081de:	2400      	movs	r4, #0
 80081e0:	0031      	movs	r1, r6
 80081e2:	9805      	ldr	r0, [sp, #20]
 80081e4:	f7ff f99e 	bl	8007524 <quorem>
 80081e8:	9b08      	ldr	r3, [sp, #32]
 80081ea:	3030      	adds	r0, #48	@ 0x30
 80081ec:	5518      	strb	r0, [r3, r4]
 80081ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081f0:	3401      	adds	r4, #1
 80081f2:	0005      	movs	r5, r0
 80081f4:	42a3      	cmp	r3, r4
 80081f6:	ddb6      	ble.n	8008166 <_dtoa_r+0xb36>
 80081f8:	2300      	movs	r3, #0
 80081fa:	220a      	movs	r2, #10
 80081fc:	9905      	ldr	r1, [sp, #20]
 80081fe:	9803      	ldr	r0, [sp, #12]
 8008200:	f000 f974 	bl	80084ec <__multadd>
 8008204:	9005      	str	r0, [sp, #20]
 8008206:	e7eb      	b.n	80081e0 <_dtoa_r+0xbb0>
 8008208:	0800ae29 	.word	0x0800ae29
 800820c:	0800ae31 	.word	0x0800ae31

08008210 <_free_r>:
 8008210:	b570      	push	{r4, r5, r6, lr}
 8008212:	0005      	movs	r5, r0
 8008214:	1e0c      	subs	r4, r1, #0
 8008216:	d010      	beq.n	800823a <_free_r+0x2a>
 8008218:	3c04      	subs	r4, #4
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	da00      	bge.n	8008222 <_free_r+0x12>
 8008220:	18e4      	adds	r4, r4, r3
 8008222:	0028      	movs	r0, r5
 8008224:	f000 f8ea 	bl	80083fc <__malloc_lock>
 8008228:	4a1d      	ldr	r2, [pc, #116]	@ (80082a0 <_free_r+0x90>)
 800822a:	6813      	ldr	r3, [r2, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d105      	bne.n	800823c <_free_r+0x2c>
 8008230:	6063      	str	r3, [r4, #4]
 8008232:	6014      	str	r4, [r2, #0]
 8008234:	0028      	movs	r0, r5
 8008236:	f000 f8e9 	bl	800840c <__malloc_unlock>
 800823a:	bd70      	pop	{r4, r5, r6, pc}
 800823c:	42a3      	cmp	r3, r4
 800823e:	d908      	bls.n	8008252 <_free_r+0x42>
 8008240:	6820      	ldr	r0, [r4, #0]
 8008242:	1821      	adds	r1, r4, r0
 8008244:	428b      	cmp	r3, r1
 8008246:	d1f3      	bne.n	8008230 <_free_r+0x20>
 8008248:	6819      	ldr	r1, [r3, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	1809      	adds	r1, r1, r0
 800824e:	6021      	str	r1, [r4, #0]
 8008250:	e7ee      	b.n	8008230 <_free_r+0x20>
 8008252:	001a      	movs	r2, r3
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <_free_r+0x4e>
 800825a:	42a3      	cmp	r3, r4
 800825c:	d9f9      	bls.n	8008252 <_free_r+0x42>
 800825e:	6811      	ldr	r1, [r2, #0]
 8008260:	1850      	adds	r0, r2, r1
 8008262:	42a0      	cmp	r0, r4
 8008264:	d10b      	bne.n	800827e <_free_r+0x6e>
 8008266:	6820      	ldr	r0, [r4, #0]
 8008268:	1809      	adds	r1, r1, r0
 800826a:	1850      	adds	r0, r2, r1
 800826c:	6011      	str	r1, [r2, #0]
 800826e:	4283      	cmp	r3, r0
 8008270:	d1e0      	bne.n	8008234 <_free_r+0x24>
 8008272:	6818      	ldr	r0, [r3, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	1841      	adds	r1, r0, r1
 8008278:	6011      	str	r1, [r2, #0]
 800827a:	6053      	str	r3, [r2, #4]
 800827c:	e7da      	b.n	8008234 <_free_r+0x24>
 800827e:	42a0      	cmp	r0, r4
 8008280:	d902      	bls.n	8008288 <_free_r+0x78>
 8008282:	230c      	movs	r3, #12
 8008284:	602b      	str	r3, [r5, #0]
 8008286:	e7d5      	b.n	8008234 <_free_r+0x24>
 8008288:	6820      	ldr	r0, [r4, #0]
 800828a:	1821      	adds	r1, r4, r0
 800828c:	428b      	cmp	r3, r1
 800828e:	d103      	bne.n	8008298 <_free_r+0x88>
 8008290:	6819      	ldr	r1, [r3, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	1809      	adds	r1, r1, r0
 8008296:	6021      	str	r1, [r4, #0]
 8008298:	6063      	str	r3, [r4, #4]
 800829a:	6054      	str	r4, [r2, #4]
 800829c:	e7ca      	b.n	8008234 <_free_r+0x24>
 800829e:	46c0      	nop			@ (mov r8, r8)
 80082a0:	20000c20 	.word	0x20000c20

080082a4 <malloc>:
 80082a4:	b510      	push	{r4, lr}
 80082a6:	4b03      	ldr	r3, [pc, #12]	@ (80082b4 <malloc+0x10>)
 80082a8:	0001      	movs	r1, r0
 80082aa:	6818      	ldr	r0, [r3, #0]
 80082ac:	f000 f826 	bl	80082fc <_malloc_r>
 80082b0:	bd10      	pop	{r4, pc}
 80082b2:	46c0      	nop			@ (mov r8, r8)
 80082b4:	20000018 	.word	0x20000018

080082b8 <sbrk_aligned>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	4e0f      	ldr	r6, [pc, #60]	@ (80082f8 <sbrk_aligned+0x40>)
 80082bc:	000d      	movs	r5, r1
 80082be:	6831      	ldr	r1, [r6, #0]
 80082c0:	0004      	movs	r4, r0
 80082c2:	2900      	cmp	r1, #0
 80082c4:	d102      	bne.n	80082cc <sbrk_aligned+0x14>
 80082c6:	f001 fe49 	bl	8009f5c <_sbrk_r>
 80082ca:	6030      	str	r0, [r6, #0]
 80082cc:	0029      	movs	r1, r5
 80082ce:	0020      	movs	r0, r4
 80082d0:	f001 fe44 	bl	8009f5c <_sbrk_r>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d103      	bne.n	80082e0 <sbrk_aligned+0x28>
 80082d8:	2501      	movs	r5, #1
 80082da:	426d      	negs	r5, r5
 80082dc:	0028      	movs	r0, r5
 80082de:	bd70      	pop	{r4, r5, r6, pc}
 80082e0:	2303      	movs	r3, #3
 80082e2:	1cc5      	adds	r5, r0, #3
 80082e4:	439d      	bics	r5, r3
 80082e6:	42a8      	cmp	r0, r5
 80082e8:	d0f8      	beq.n	80082dc <sbrk_aligned+0x24>
 80082ea:	1a29      	subs	r1, r5, r0
 80082ec:	0020      	movs	r0, r4
 80082ee:	f001 fe35 	bl	8009f5c <_sbrk_r>
 80082f2:	3001      	adds	r0, #1
 80082f4:	d1f2      	bne.n	80082dc <sbrk_aligned+0x24>
 80082f6:	e7ef      	b.n	80082d8 <sbrk_aligned+0x20>
 80082f8:	20000c1c 	.word	0x20000c1c

080082fc <_malloc_r>:
 80082fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082fe:	2203      	movs	r2, #3
 8008300:	1ccb      	adds	r3, r1, #3
 8008302:	4393      	bics	r3, r2
 8008304:	3308      	adds	r3, #8
 8008306:	0005      	movs	r5, r0
 8008308:	001f      	movs	r7, r3
 800830a:	2b0c      	cmp	r3, #12
 800830c:	d234      	bcs.n	8008378 <_malloc_r+0x7c>
 800830e:	270c      	movs	r7, #12
 8008310:	42b9      	cmp	r1, r7
 8008312:	d833      	bhi.n	800837c <_malloc_r+0x80>
 8008314:	0028      	movs	r0, r5
 8008316:	f000 f871 	bl	80083fc <__malloc_lock>
 800831a:	4e37      	ldr	r6, [pc, #220]	@ (80083f8 <_malloc_r+0xfc>)
 800831c:	6833      	ldr	r3, [r6, #0]
 800831e:	001c      	movs	r4, r3
 8008320:	2c00      	cmp	r4, #0
 8008322:	d12f      	bne.n	8008384 <_malloc_r+0x88>
 8008324:	0039      	movs	r1, r7
 8008326:	0028      	movs	r0, r5
 8008328:	f7ff ffc6 	bl	80082b8 <sbrk_aligned>
 800832c:	0004      	movs	r4, r0
 800832e:	1c43      	adds	r3, r0, #1
 8008330:	d15f      	bne.n	80083f2 <_malloc_r+0xf6>
 8008332:	6834      	ldr	r4, [r6, #0]
 8008334:	9400      	str	r4, [sp, #0]
 8008336:	9b00      	ldr	r3, [sp, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d14a      	bne.n	80083d2 <_malloc_r+0xd6>
 800833c:	2c00      	cmp	r4, #0
 800833e:	d052      	beq.n	80083e6 <_malloc_r+0xea>
 8008340:	6823      	ldr	r3, [r4, #0]
 8008342:	0028      	movs	r0, r5
 8008344:	18e3      	adds	r3, r4, r3
 8008346:	9900      	ldr	r1, [sp, #0]
 8008348:	9301      	str	r3, [sp, #4]
 800834a:	f001 fe07 	bl	8009f5c <_sbrk_r>
 800834e:	9b01      	ldr	r3, [sp, #4]
 8008350:	4283      	cmp	r3, r0
 8008352:	d148      	bne.n	80083e6 <_malloc_r+0xea>
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	0028      	movs	r0, r5
 8008358:	1aff      	subs	r7, r7, r3
 800835a:	0039      	movs	r1, r7
 800835c:	f7ff ffac 	bl	80082b8 <sbrk_aligned>
 8008360:	3001      	adds	r0, #1
 8008362:	d040      	beq.n	80083e6 <_malloc_r+0xea>
 8008364:	6823      	ldr	r3, [r4, #0]
 8008366:	19db      	adds	r3, r3, r7
 8008368:	6023      	str	r3, [r4, #0]
 800836a:	6833      	ldr	r3, [r6, #0]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	2a00      	cmp	r2, #0
 8008370:	d133      	bne.n	80083da <_malloc_r+0xde>
 8008372:	9b00      	ldr	r3, [sp, #0]
 8008374:	6033      	str	r3, [r6, #0]
 8008376:	e019      	b.n	80083ac <_malloc_r+0xb0>
 8008378:	2b00      	cmp	r3, #0
 800837a:	dac9      	bge.n	8008310 <_malloc_r+0x14>
 800837c:	230c      	movs	r3, #12
 800837e:	602b      	str	r3, [r5, #0]
 8008380:	2000      	movs	r0, #0
 8008382:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008384:	6821      	ldr	r1, [r4, #0]
 8008386:	1bc9      	subs	r1, r1, r7
 8008388:	d420      	bmi.n	80083cc <_malloc_r+0xd0>
 800838a:	290b      	cmp	r1, #11
 800838c:	d90a      	bls.n	80083a4 <_malloc_r+0xa8>
 800838e:	19e2      	adds	r2, r4, r7
 8008390:	6027      	str	r7, [r4, #0]
 8008392:	42a3      	cmp	r3, r4
 8008394:	d104      	bne.n	80083a0 <_malloc_r+0xa4>
 8008396:	6032      	str	r2, [r6, #0]
 8008398:	6863      	ldr	r3, [r4, #4]
 800839a:	6011      	str	r1, [r2, #0]
 800839c:	6053      	str	r3, [r2, #4]
 800839e:	e005      	b.n	80083ac <_malloc_r+0xb0>
 80083a0:	605a      	str	r2, [r3, #4]
 80083a2:	e7f9      	b.n	8008398 <_malloc_r+0x9c>
 80083a4:	6862      	ldr	r2, [r4, #4]
 80083a6:	42a3      	cmp	r3, r4
 80083a8:	d10e      	bne.n	80083c8 <_malloc_r+0xcc>
 80083aa:	6032      	str	r2, [r6, #0]
 80083ac:	0028      	movs	r0, r5
 80083ae:	f000 f82d 	bl	800840c <__malloc_unlock>
 80083b2:	0020      	movs	r0, r4
 80083b4:	2207      	movs	r2, #7
 80083b6:	300b      	adds	r0, #11
 80083b8:	1d23      	adds	r3, r4, #4
 80083ba:	4390      	bics	r0, r2
 80083bc:	1ac2      	subs	r2, r0, r3
 80083be:	4298      	cmp	r0, r3
 80083c0:	d0df      	beq.n	8008382 <_malloc_r+0x86>
 80083c2:	1a1b      	subs	r3, r3, r0
 80083c4:	50a3      	str	r3, [r4, r2]
 80083c6:	e7dc      	b.n	8008382 <_malloc_r+0x86>
 80083c8:	605a      	str	r2, [r3, #4]
 80083ca:	e7ef      	b.n	80083ac <_malloc_r+0xb0>
 80083cc:	0023      	movs	r3, r4
 80083ce:	6864      	ldr	r4, [r4, #4]
 80083d0:	e7a6      	b.n	8008320 <_malloc_r+0x24>
 80083d2:	9c00      	ldr	r4, [sp, #0]
 80083d4:	6863      	ldr	r3, [r4, #4]
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	e7ad      	b.n	8008336 <_malloc_r+0x3a>
 80083da:	001a      	movs	r2, r3
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	42a3      	cmp	r3, r4
 80083e0:	d1fb      	bne.n	80083da <_malloc_r+0xde>
 80083e2:	2300      	movs	r3, #0
 80083e4:	e7da      	b.n	800839c <_malloc_r+0xa0>
 80083e6:	230c      	movs	r3, #12
 80083e8:	0028      	movs	r0, r5
 80083ea:	602b      	str	r3, [r5, #0]
 80083ec:	f000 f80e 	bl	800840c <__malloc_unlock>
 80083f0:	e7c6      	b.n	8008380 <_malloc_r+0x84>
 80083f2:	6007      	str	r7, [r0, #0]
 80083f4:	e7da      	b.n	80083ac <_malloc_r+0xb0>
 80083f6:	46c0      	nop			@ (mov r8, r8)
 80083f8:	20000c20 	.word	0x20000c20

080083fc <__malloc_lock>:
 80083fc:	b510      	push	{r4, lr}
 80083fe:	4802      	ldr	r0, [pc, #8]	@ (8008408 <__malloc_lock+0xc>)
 8008400:	f7ff f87f 	bl	8007502 <__retarget_lock_acquire_recursive>
 8008404:	bd10      	pop	{r4, pc}
 8008406:	46c0      	nop			@ (mov r8, r8)
 8008408:	20000c18 	.word	0x20000c18

0800840c <__malloc_unlock>:
 800840c:	b510      	push	{r4, lr}
 800840e:	4802      	ldr	r0, [pc, #8]	@ (8008418 <__malloc_unlock+0xc>)
 8008410:	f7ff f878 	bl	8007504 <__retarget_lock_release_recursive>
 8008414:	bd10      	pop	{r4, pc}
 8008416:	46c0      	nop			@ (mov r8, r8)
 8008418:	20000c18 	.word	0x20000c18

0800841c <_Balloc>:
 800841c:	b570      	push	{r4, r5, r6, lr}
 800841e:	69c5      	ldr	r5, [r0, #28]
 8008420:	0006      	movs	r6, r0
 8008422:	000c      	movs	r4, r1
 8008424:	2d00      	cmp	r5, #0
 8008426:	d10e      	bne.n	8008446 <_Balloc+0x2a>
 8008428:	2010      	movs	r0, #16
 800842a:	f7ff ff3b 	bl	80082a4 <malloc>
 800842e:	1e02      	subs	r2, r0, #0
 8008430:	61f0      	str	r0, [r6, #28]
 8008432:	d104      	bne.n	800843e <_Balloc+0x22>
 8008434:	216b      	movs	r1, #107	@ 0x6b
 8008436:	4b19      	ldr	r3, [pc, #100]	@ (800849c <_Balloc+0x80>)
 8008438:	4819      	ldr	r0, [pc, #100]	@ (80084a0 <_Balloc+0x84>)
 800843a:	f001 fdb1 	bl	8009fa0 <__assert_func>
 800843e:	6045      	str	r5, [r0, #4]
 8008440:	6085      	str	r5, [r0, #8]
 8008442:	6005      	str	r5, [r0, #0]
 8008444:	60c5      	str	r5, [r0, #12]
 8008446:	69f5      	ldr	r5, [r6, #28]
 8008448:	68eb      	ldr	r3, [r5, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d013      	beq.n	8008476 <_Balloc+0x5a>
 800844e:	69f3      	ldr	r3, [r6, #28]
 8008450:	00a2      	lsls	r2, r4, #2
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	189b      	adds	r3, r3, r2
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	2800      	cmp	r0, #0
 800845a:	d118      	bne.n	800848e <_Balloc+0x72>
 800845c:	2101      	movs	r1, #1
 800845e:	000d      	movs	r5, r1
 8008460:	40a5      	lsls	r5, r4
 8008462:	1d6a      	adds	r2, r5, #5
 8008464:	0030      	movs	r0, r6
 8008466:	0092      	lsls	r2, r2, #2
 8008468:	f001 fdb8 	bl	8009fdc <_calloc_r>
 800846c:	2800      	cmp	r0, #0
 800846e:	d00c      	beq.n	800848a <_Balloc+0x6e>
 8008470:	6044      	str	r4, [r0, #4]
 8008472:	6085      	str	r5, [r0, #8]
 8008474:	e00d      	b.n	8008492 <_Balloc+0x76>
 8008476:	2221      	movs	r2, #33	@ 0x21
 8008478:	2104      	movs	r1, #4
 800847a:	0030      	movs	r0, r6
 800847c:	f001 fdae 	bl	8009fdc <_calloc_r>
 8008480:	69f3      	ldr	r3, [r6, #28]
 8008482:	60e8      	str	r0, [r5, #12]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e1      	bne.n	800844e <_Balloc+0x32>
 800848a:	2000      	movs	r0, #0
 800848c:	bd70      	pop	{r4, r5, r6, pc}
 800848e:	6802      	ldr	r2, [r0, #0]
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	2300      	movs	r3, #0
 8008494:	6103      	str	r3, [r0, #16]
 8008496:	60c3      	str	r3, [r0, #12]
 8008498:	e7f8      	b.n	800848c <_Balloc+0x70>
 800849a:	46c0      	nop			@ (mov r8, r8)
 800849c:	0800ae36 	.word	0x0800ae36
 80084a0:	0800aeb6 	.word	0x0800aeb6

080084a4 <_Bfree>:
 80084a4:	b570      	push	{r4, r5, r6, lr}
 80084a6:	69c6      	ldr	r6, [r0, #28]
 80084a8:	0005      	movs	r5, r0
 80084aa:	000c      	movs	r4, r1
 80084ac:	2e00      	cmp	r6, #0
 80084ae:	d10e      	bne.n	80084ce <_Bfree+0x2a>
 80084b0:	2010      	movs	r0, #16
 80084b2:	f7ff fef7 	bl	80082a4 <malloc>
 80084b6:	1e02      	subs	r2, r0, #0
 80084b8:	61e8      	str	r0, [r5, #28]
 80084ba:	d104      	bne.n	80084c6 <_Bfree+0x22>
 80084bc:	218f      	movs	r1, #143	@ 0x8f
 80084be:	4b09      	ldr	r3, [pc, #36]	@ (80084e4 <_Bfree+0x40>)
 80084c0:	4809      	ldr	r0, [pc, #36]	@ (80084e8 <_Bfree+0x44>)
 80084c2:	f001 fd6d 	bl	8009fa0 <__assert_func>
 80084c6:	6046      	str	r6, [r0, #4]
 80084c8:	6086      	str	r6, [r0, #8]
 80084ca:	6006      	str	r6, [r0, #0]
 80084cc:	60c6      	str	r6, [r0, #12]
 80084ce:	2c00      	cmp	r4, #0
 80084d0:	d007      	beq.n	80084e2 <_Bfree+0x3e>
 80084d2:	69eb      	ldr	r3, [r5, #28]
 80084d4:	6862      	ldr	r2, [r4, #4]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	0092      	lsls	r2, r2, #2
 80084da:	189b      	adds	r3, r3, r2
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	6022      	str	r2, [r4, #0]
 80084e0:	601c      	str	r4, [r3, #0]
 80084e2:	bd70      	pop	{r4, r5, r6, pc}
 80084e4:	0800ae36 	.word	0x0800ae36
 80084e8:	0800aeb6 	.word	0x0800aeb6

080084ec <__multadd>:
 80084ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084ee:	000f      	movs	r7, r1
 80084f0:	9001      	str	r0, [sp, #4]
 80084f2:	000c      	movs	r4, r1
 80084f4:	001e      	movs	r6, r3
 80084f6:	2000      	movs	r0, #0
 80084f8:	690d      	ldr	r5, [r1, #16]
 80084fa:	3714      	adds	r7, #20
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	3001      	adds	r0, #1
 8008500:	b299      	uxth	r1, r3
 8008502:	4351      	muls	r1, r2
 8008504:	0c1b      	lsrs	r3, r3, #16
 8008506:	4353      	muls	r3, r2
 8008508:	1989      	adds	r1, r1, r6
 800850a:	0c0e      	lsrs	r6, r1, #16
 800850c:	199b      	adds	r3, r3, r6
 800850e:	0c1e      	lsrs	r6, r3, #16
 8008510:	b289      	uxth	r1, r1
 8008512:	041b      	lsls	r3, r3, #16
 8008514:	185b      	adds	r3, r3, r1
 8008516:	c708      	stmia	r7!, {r3}
 8008518:	4285      	cmp	r5, r0
 800851a:	dcef      	bgt.n	80084fc <__multadd+0x10>
 800851c:	2e00      	cmp	r6, #0
 800851e:	d022      	beq.n	8008566 <__multadd+0x7a>
 8008520:	68a3      	ldr	r3, [r4, #8]
 8008522:	42ab      	cmp	r3, r5
 8008524:	dc19      	bgt.n	800855a <__multadd+0x6e>
 8008526:	6861      	ldr	r1, [r4, #4]
 8008528:	9801      	ldr	r0, [sp, #4]
 800852a:	3101      	adds	r1, #1
 800852c:	f7ff ff76 	bl	800841c <_Balloc>
 8008530:	1e07      	subs	r7, r0, #0
 8008532:	d105      	bne.n	8008540 <__multadd+0x54>
 8008534:	003a      	movs	r2, r7
 8008536:	21ba      	movs	r1, #186	@ 0xba
 8008538:	4b0c      	ldr	r3, [pc, #48]	@ (800856c <__multadd+0x80>)
 800853a:	480d      	ldr	r0, [pc, #52]	@ (8008570 <__multadd+0x84>)
 800853c:	f001 fd30 	bl	8009fa0 <__assert_func>
 8008540:	0021      	movs	r1, r4
 8008542:	6922      	ldr	r2, [r4, #16]
 8008544:	310c      	adds	r1, #12
 8008546:	3202      	adds	r2, #2
 8008548:	0092      	lsls	r2, r2, #2
 800854a:	300c      	adds	r0, #12
 800854c:	f001 fd18 	bl	8009f80 <memcpy>
 8008550:	0021      	movs	r1, r4
 8008552:	9801      	ldr	r0, [sp, #4]
 8008554:	f7ff ffa6 	bl	80084a4 <_Bfree>
 8008558:	003c      	movs	r4, r7
 800855a:	1d2b      	adds	r3, r5, #4
 800855c:	009b      	lsls	r3, r3, #2
 800855e:	18e3      	adds	r3, r4, r3
 8008560:	3501      	adds	r5, #1
 8008562:	605e      	str	r6, [r3, #4]
 8008564:	6125      	str	r5, [r4, #16]
 8008566:	0020      	movs	r0, r4
 8008568:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800856a:	46c0      	nop			@ (mov r8, r8)
 800856c:	0800aea5 	.word	0x0800aea5
 8008570:	0800aeb6 	.word	0x0800aeb6

08008574 <__s2b>:
 8008574:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008576:	0007      	movs	r7, r0
 8008578:	0018      	movs	r0, r3
 800857a:	000c      	movs	r4, r1
 800857c:	3008      	adds	r0, #8
 800857e:	2109      	movs	r1, #9
 8008580:	9301      	str	r3, [sp, #4]
 8008582:	0015      	movs	r5, r2
 8008584:	f7f7 fe66 	bl	8000254 <__divsi3>
 8008588:	2301      	movs	r3, #1
 800858a:	2100      	movs	r1, #0
 800858c:	4283      	cmp	r3, r0
 800858e:	db0a      	blt.n	80085a6 <__s2b+0x32>
 8008590:	0038      	movs	r0, r7
 8008592:	f7ff ff43 	bl	800841c <_Balloc>
 8008596:	1e01      	subs	r1, r0, #0
 8008598:	d108      	bne.n	80085ac <__s2b+0x38>
 800859a:	000a      	movs	r2, r1
 800859c:	4b19      	ldr	r3, [pc, #100]	@ (8008604 <__s2b+0x90>)
 800859e:	481a      	ldr	r0, [pc, #104]	@ (8008608 <__s2b+0x94>)
 80085a0:	31d3      	adds	r1, #211	@ 0xd3
 80085a2:	f001 fcfd 	bl	8009fa0 <__assert_func>
 80085a6:	005b      	lsls	r3, r3, #1
 80085a8:	3101      	adds	r1, #1
 80085aa:	e7ef      	b.n	800858c <__s2b+0x18>
 80085ac:	9b08      	ldr	r3, [sp, #32]
 80085ae:	6143      	str	r3, [r0, #20]
 80085b0:	2301      	movs	r3, #1
 80085b2:	6103      	str	r3, [r0, #16]
 80085b4:	2d09      	cmp	r5, #9
 80085b6:	dd18      	ble.n	80085ea <__s2b+0x76>
 80085b8:	0023      	movs	r3, r4
 80085ba:	3309      	adds	r3, #9
 80085bc:	001e      	movs	r6, r3
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	1964      	adds	r4, r4, r5
 80085c2:	7833      	ldrb	r3, [r6, #0]
 80085c4:	220a      	movs	r2, #10
 80085c6:	0038      	movs	r0, r7
 80085c8:	3b30      	subs	r3, #48	@ 0x30
 80085ca:	f7ff ff8f 	bl	80084ec <__multadd>
 80085ce:	3601      	adds	r6, #1
 80085d0:	0001      	movs	r1, r0
 80085d2:	42a6      	cmp	r6, r4
 80085d4:	d1f5      	bne.n	80085c2 <__s2b+0x4e>
 80085d6:	002c      	movs	r4, r5
 80085d8:	9b00      	ldr	r3, [sp, #0]
 80085da:	3c08      	subs	r4, #8
 80085dc:	191c      	adds	r4, r3, r4
 80085de:	002e      	movs	r6, r5
 80085e0:	9b01      	ldr	r3, [sp, #4]
 80085e2:	429e      	cmp	r6, r3
 80085e4:	db04      	blt.n	80085f0 <__s2b+0x7c>
 80085e6:	0008      	movs	r0, r1
 80085e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80085ea:	2509      	movs	r5, #9
 80085ec:	340a      	adds	r4, #10
 80085ee:	e7f6      	b.n	80085de <__s2b+0x6a>
 80085f0:	1b63      	subs	r3, r4, r5
 80085f2:	5d9b      	ldrb	r3, [r3, r6]
 80085f4:	220a      	movs	r2, #10
 80085f6:	0038      	movs	r0, r7
 80085f8:	3b30      	subs	r3, #48	@ 0x30
 80085fa:	f7ff ff77 	bl	80084ec <__multadd>
 80085fe:	3601      	adds	r6, #1
 8008600:	0001      	movs	r1, r0
 8008602:	e7ed      	b.n	80085e0 <__s2b+0x6c>
 8008604:	0800aea5 	.word	0x0800aea5
 8008608:	0800aeb6 	.word	0x0800aeb6

0800860c <__hi0bits>:
 800860c:	2280      	movs	r2, #128	@ 0x80
 800860e:	0003      	movs	r3, r0
 8008610:	0252      	lsls	r2, r2, #9
 8008612:	2000      	movs	r0, #0
 8008614:	4293      	cmp	r3, r2
 8008616:	d201      	bcs.n	800861c <__hi0bits+0x10>
 8008618:	041b      	lsls	r3, r3, #16
 800861a:	3010      	adds	r0, #16
 800861c:	2280      	movs	r2, #128	@ 0x80
 800861e:	0452      	lsls	r2, r2, #17
 8008620:	4293      	cmp	r3, r2
 8008622:	d201      	bcs.n	8008628 <__hi0bits+0x1c>
 8008624:	3008      	adds	r0, #8
 8008626:	021b      	lsls	r3, r3, #8
 8008628:	2280      	movs	r2, #128	@ 0x80
 800862a:	0552      	lsls	r2, r2, #21
 800862c:	4293      	cmp	r3, r2
 800862e:	d201      	bcs.n	8008634 <__hi0bits+0x28>
 8008630:	3004      	adds	r0, #4
 8008632:	011b      	lsls	r3, r3, #4
 8008634:	2280      	movs	r2, #128	@ 0x80
 8008636:	05d2      	lsls	r2, r2, #23
 8008638:	4293      	cmp	r3, r2
 800863a:	d201      	bcs.n	8008640 <__hi0bits+0x34>
 800863c:	3002      	adds	r0, #2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	2b00      	cmp	r3, #0
 8008642:	db03      	blt.n	800864c <__hi0bits+0x40>
 8008644:	3001      	adds	r0, #1
 8008646:	4213      	tst	r3, r2
 8008648:	d100      	bne.n	800864c <__hi0bits+0x40>
 800864a:	2020      	movs	r0, #32
 800864c:	4770      	bx	lr

0800864e <__lo0bits>:
 800864e:	6803      	ldr	r3, [r0, #0]
 8008650:	0001      	movs	r1, r0
 8008652:	2207      	movs	r2, #7
 8008654:	0018      	movs	r0, r3
 8008656:	4010      	ands	r0, r2
 8008658:	4213      	tst	r3, r2
 800865a:	d00d      	beq.n	8008678 <__lo0bits+0x2a>
 800865c:	3a06      	subs	r2, #6
 800865e:	2000      	movs	r0, #0
 8008660:	4213      	tst	r3, r2
 8008662:	d105      	bne.n	8008670 <__lo0bits+0x22>
 8008664:	3002      	adds	r0, #2
 8008666:	4203      	tst	r3, r0
 8008668:	d003      	beq.n	8008672 <__lo0bits+0x24>
 800866a:	40d3      	lsrs	r3, r2
 800866c:	0010      	movs	r0, r2
 800866e:	600b      	str	r3, [r1, #0]
 8008670:	4770      	bx	lr
 8008672:	089b      	lsrs	r3, r3, #2
 8008674:	600b      	str	r3, [r1, #0]
 8008676:	e7fb      	b.n	8008670 <__lo0bits+0x22>
 8008678:	b29a      	uxth	r2, r3
 800867a:	2a00      	cmp	r2, #0
 800867c:	d101      	bne.n	8008682 <__lo0bits+0x34>
 800867e:	2010      	movs	r0, #16
 8008680:	0c1b      	lsrs	r3, r3, #16
 8008682:	b2da      	uxtb	r2, r3
 8008684:	2a00      	cmp	r2, #0
 8008686:	d101      	bne.n	800868c <__lo0bits+0x3e>
 8008688:	3008      	adds	r0, #8
 800868a:	0a1b      	lsrs	r3, r3, #8
 800868c:	071a      	lsls	r2, r3, #28
 800868e:	d101      	bne.n	8008694 <__lo0bits+0x46>
 8008690:	3004      	adds	r0, #4
 8008692:	091b      	lsrs	r3, r3, #4
 8008694:	079a      	lsls	r2, r3, #30
 8008696:	d101      	bne.n	800869c <__lo0bits+0x4e>
 8008698:	3002      	adds	r0, #2
 800869a:	089b      	lsrs	r3, r3, #2
 800869c:	07da      	lsls	r2, r3, #31
 800869e:	d4e9      	bmi.n	8008674 <__lo0bits+0x26>
 80086a0:	3001      	adds	r0, #1
 80086a2:	085b      	lsrs	r3, r3, #1
 80086a4:	d1e6      	bne.n	8008674 <__lo0bits+0x26>
 80086a6:	2020      	movs	r0, #32
 80086a8:	e7e2      	b.n	8008670 <__lo0bits+0x22>
	...

080086ac <__i2b>:
 80086ac:	b510      	push	{r4, lr}
 80086ae:	000c      	movs	r4, r1
 80086b0:	2101      	movs	r1, #1
 80086b2:	f7ff feb3 	bl	800841c <_Balloc>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d107      	bne.n	80086ca <__i2b+0x1e>
 80086ba:	2146      	movs	r1, #70	@ 0x46
 80086bc:	4c05      	ldr	r4, [pc, #20]	@ (80086d4 <__i2b+0x28>)
 80086be:	0002      	movs	r2, r0
 80086c0:	4b05      	ldr	r3, [pc, #20]	@ (80086d8 <__i2b+0x2c>)
 80086c2:	0020      	movs	r0, r4
 80086c4:	31ff      	adds	r1, #255	@ 0xff
 80086c6:	f001 fc6b 	bl	8009fa0 <__assert_func>
 80086ca:	2301      	movs	r3, #1
 80086cc:	6144      	str	r4, [r0, #20]
 80086ce:	6103      	str	r3, [r0, #16]
 80086d0:	bd10      	pop	{r4, pc}
 80086d2:	46c0      	nop			@ (mov r8, r8)
 80086d4:	0800aeb6 	.word	0x0800aeb6
 80086d8:	0800aea5 	.word	0x0800aea5

080086dc <__multiply>:
 80086dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086de:	0014      	movs	r4, r2
 80086e0:	690a      	ldr	r2, [r1, #16]
 80086e2:	6923      	ldr	r3, [r4, #16]
 80086e4:	000d      	movs	r5, r1
 80086e6:	b089      	sub	sp, #36	@ 0x24
 80086e8:	429a      	cmp	r2, r3
 80086ea:	db02      	blt.n	80086f2 <__multiply+0x16>
 80086ec:	0023      	movs	r3, r4
 80086ee:	000c      	movs	r4, r1
 80086f0:	001d      	movs	r5, r3
 80086f2:	6927      	ldr	r7, [r4, #16]
 80086f4:	692e      	ldr	r6, [r5, #16]
 80086f6:	6861      	ldr	r1, [r4, #4]
 80086f8:	19bb      	adds	r3, r7, r6
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	68a3      	ldr	r3, [r4, #8]
 80086fe:	19ba      	adds	r2, r7, r6
 8008700:	4293      	cmp	r3, r2
 8008702:	da00      	bge.n	8008706 <__multiply+0x2a>
 8008704:	3101      	adds	r1, #1
 8008706:	f7ff fe89 	bl	800841c <_Balloc>
 800870a:	4684      	mov	ip, r0
 800870c:	2800      	cmp	r0, #0
 800870e:	d106      	bne.n	800871e <__multiply+0x42>
 8008710:	21b1      	movs	r1, #177	@ 0xb1
 8008712:	4662      	mov	r2, ip
 8008714:	4b44      	ldr	r3, [pc, #272]	@ (8008828 <__multiply+0x14c>)
 8008716:	4845      	ldr	r0, [pc, #276]	@ (800882c <__multiply+0x150>)
 8008718:	0049      	lsls	r1, r1, #1
 800871a:	f001 fc41 	bl	8009fa0 <__assert_func>
 800871e:	0002      	movs	r2, r0
 8008720:	19bb      	adds	r3, r7, r6
 8008722:	3214      	adds	r2, #20
 8008724:	009b      	lsls	r3, r3, #2
 8008726:	18d3      	adds	r3, r2, r3
 8008728:	9301      	str	r3, [sp, #4]
 800872a:	2100      	movs	r1, #0
 800872c:	0013      	movs	r3, r2
 800872e:	9801      	ldr	r0, [sp, #4]
 8008730:	4283      	cmp	r3, r0
 8008732:	d328      	bcc.n	8008786 <__multiply+0xaa>
 8008734:	0023      	movs	r3, r4
 8008736:	00bf      	lsls	r7, r7, #2
 8008738:	3314      	adds	r3, #20
 800873a:	9304      	str	r3, [sp, #16]
 800873c:	3514      	adds	r5, #20
 800873e:	19db      	adds	r3, r3, r7
 8008740:	00b6      	lsls	r6, r6, #2
 8008742:	9302      	str	r3, [sp, #8]
 8008744:	19ab      	adds	r3, r5, r6
 8008746:	9307      	str	r3, [sp, #28]
 8008748:	2304      	movs	r3, #4
 800874a:	9305      	str	r3, [sp, #20]
 800874c:	0023      	movs	r3, r4
 800874e:	9902      	ldr	r1, [sp, #8]
 8008750:	3315      	adds	r3, #21
 8008752:	4299      	cmp	r1, r3
 8008754:	d305      	bcc.n	8008762 <__multiply+0x86>
 8008756:	1b0c      	subs	r4, r1, r4
 8008758:	3c15      	subs	r4, #21
 800875a:	08a4      	lsrs	r4, r4, #2
 800875c:	3401      	adds	r4, #1
 800875e:	00a3      	lsls	r3, r4, #2
 8008760:	9305      	str	r3, [sp, #20]
 8008762:	9b07      	ldr	r3, [sp, #28]
 8008764:	429d      	cmp	r5, r3
 8008766:	d310      	bcc.n	800878a <__multiply+0xae>
 8008768:	9b00      	ldr	r3, [sp, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	dd05      	ble.n	800877a <__multiply+0x9e>
 800876e:	9b01      	ldr	r3, [sp, #4]
 8008770:	3b04      	subs	r3, #4
 8008772:	9301      	str	r3, [sp, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d052      	beq.n	8008820 <__multiply+0x144>
 800877a:	4663      	mov	r3, ip
 800877c:	4660      	mov	r0, ip
 800877e:	9a00      	ldr	r2, [sp, #0]
 8008780:	611a      	str	r2, [r3, #16]
 8008782:	b009      	add	sp, #36	@ 0x24
 8008784:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008786:	c302      	stmia	r3!, {r1}
 8008788:	e7d1      	b.n	800872e <__multiply+0x52>
 800878a:	682c      	ldr	r4, [r5, #0]
 800878c:	b2a4      	uxth	r4, r4
 800878e:	2c00      	cmp	r4, #0
 8008790:	d01f      	beq.n	80087d2 <__multiply+0xf6>
 8008792:	2300      	movs	r3, #0
 8008794:	0017      	movs	r7, r2
 8008796:	9e04      	ldr	r6, [sp, #16]
 8008798:	9303      	str	r3, [sp, #12]
 800879a:	ce08      	ldmia	r6!, {r3}
 800879c:	6839      	ldr	r1, [r7, #0]
 800879e:	9306      	str	r3, [sp, #24]
 80087a0:	466b      	mov	r3, sp
 80087a2:	8b1b      	ldrh	r3, [r3, #24]
 80087a4:	b288      	uxth	r0, r1
 80087a6:	4363      	muls	r3, r4
 80087a8:	181b      	adds	r3, r3, r0
 80087aa:	9803      	ldr	r0, [sp, #12]
 80087ac:	0c09      	lsrs	r1, r1, #16
 80087ae:	181b      	adds	r3, r3, r0
 80087b0:	9806      	ldr	r0, [sp, #24]
 80087b2:	0c00      	lsrs	r0, r0, #16
 80087b4:	4360      	muls	r0, r4
 80087b6:	1840      	adds	r0, r0, r1
 80087b8:	0c19      	lsrs	r1, r3, #16
 80087ba:	1841      	adds	r1, r0, r1
 80087bc:	0c08      	lsrs	r0, r1, #16
 80087be:	b29b      	uxth	r3, r3
 80087c0:	0409      	lsls	r1, r1, #16
 80087c2:	4319      	orrs	r1, r3
 80087c4:	9b02      	ldr	r3, [sp, #8]
 80087c6:	9003      	str	r0, [sp, #12]
 80087c8:	c702      	stmia	r7!, {r1}
 80087ca:	42b3      	cmp	r3, r6
 80087cc:	d8e5      	bhi.n	800879a <__multiply+0xbe>
 80087ce:	9b05      	ldr	r3, [sp, #20]
 80087d0:	50d0      	str	r0, [r2, r3]
 80087d2:	682c      	ldr	r4, [r5, #0]
 80087d4:	0c24      	lsrs	r4, r4, #16
 80087d6:	d020      	beq.n	800881a <__multiply+0x13e>
 80087d8:	2100      	movs	r1, #0
 80087da:	0010      	movs	r0, r2
 80087dc:	6813      	ldr	r3, [r2, #0]
 80087de:	9e04      	ldr	r6, [sp, #16]
 80087e0:	9103      	str	r1, [sp, #12]
 80087e2:	6831      	ldr	r1, [r6, #0]
 80087e4:	6807      	ldr	r7, [r0, #0]
 80087e6:	b289      	uxth	r1, r1
 80087e8:	4361      	muls	r1, r4
 80087ea:	0c3f      	lsrs	r7, r7, #16
 80087ec:	19c9      	adds	r1, r1, r7
 80087ee:	9f03      	ldr	r7, [sp, #12]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	19c9      	adds	r1, r1, r7
 80087f4:	040f      	lsls	r7, r1, #16
 80087f6:	431f      	orrs	r7, r3
 80087f8:	6007      	str	r7, [r0, #0]
 80087fa:	ce80      	ldmia	r6!, {r7}
 80087fc:	6843      	ldr	r3, [r0, #4]
 80087fe:	0c3f      	lsrs	r7, r7, #16
 8008800:	4367      	muls	r7, r4
 8008802:	b29b      	uxth	r3, r3
 8008804:	0c09      	lsrs	r1, r1, #16
 8008806:	18fb      	adds	r3, r7, r3
 8008808:	185b      	adds	r3, r3, r1
 800880a:	0c19      	lsrs	r1, r3, #16
 800880c:	9103      	str	r1, [sp, #12]
 800880e:	9902      	ldr	r1, [sp, #8]
 8008810:	3004      	adds	r0, #4
 8008812:	42b1      	cmp	r1, r6
 8008814:	d8e5      	bhi.n	80087e2 <__multiply+0x106>
 8008816:	9905      	ldr	r1, [sp, #20]
 8008818:	5053      	str	r3, [r2, r1]
 800881a:	3504      	adds	r5, #4
 800881c:	3204      	adds	r2, #4
 800881e:	e7a0      	b.n	8008762 <__multiply+0x86>
 8008820:	9b00      	ldr	r3, [sp, #0]
 8008822:	3b01      	subs	r3, #1
 8008824:	9300      	str	r3, [sp, #0]
 8008826:	e79f      	b.n	8008768 <__multiply+0x8c>
 8008828:	0800aea5 	.word	0x0800aea5
 800882c:	0800aeb6 	.word	0x0800aeb6

08008830 <__pow5mult>:
 8008830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008832:	2303      	movs	r3, #3
 8008834:	0015      	movs	r5, r2
 8008836:	0007      	movs	r7, r0
 8008838:	000e      	movs	r6, r1
 800883a:	401a      	ands	r2, r3
 800883c:	421d      	tst	r5, r3
 800883e:	d008      	beq.n	8008852 <__pow5mult+0x22>
 8008840:	4925      	ldr	r1, [pc, #148]	@ (80088d8 <__pow5mult+0xa8>)
 8008842:	3a01      	subs	r2, #1
 8008844:	0092      	lsls	r2, r2, #2
 8008846:	5852      	ldr	r2, [r2, r1]
 8008848:	2300      	movs	r3, #0
 800884a:	0031      	movs	r1, r6
 800884c:	f7ff fe4e 	bl	80084ec <__multadd>
 8008850:	0006      	movs	r6, r0
 8008852:	10ad      	asrs	r5, r5, #2
 8008854:	d03d      	beq.n	80088d2 <__pow5mult+0xa2>
 8008856:	69fc      	ldr	r4, [r7, #28]
 8008858:	2c00      	cmp	r4, #0
 800885a:	d10f      	bne.n	800887c <__pow5mult+0x4c>
 800885c:	2010      	movs	r0, #16
 800885e:	f7ff fd21 	bl	80082a4 <malloc>
 8008862:	1e02      	subs	r2, r0, #0
 8008864:	61f8      	str	r0, [r7, #28]
 8008866:	d105      	bne.n	8008874 <__pow5mult+0x44>
 8008868:	21b4      	movs	r1, #180	@ 0xb4
 800886a:	4b1c      	ldr	r3, [pc, #112]	@ (80088dc <__pow5mult+0xac>)
 800886c:	481c      	ldr	r0, [pc, #112]	@ (80088e0 <__pow5mult+0xb0>)
 800886e:	31ff      	adds	r1, #255	@ 0xff
 8008870:	f001 fb96 	bl	8009fa0 <__assert_func>
 8008874:	6044      	str	r4, [r0, #4]
 8008876:	6084      	str	r4, [r0, #8]
 8008878:	6004      	str	r4, [r0, #0]
 800887a:	60c4      	str	r4, [r0, #12]
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	689c      	ldr	r4, [r3, #8]
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	2c00      	cmp	r4, #0
 8008884:	d108      	bne.n	8008898 <__pow5mult+0x68>
 8008886:	0038      	movs	r0, r7
 8008888:	4916      	ldr	r1, [pc, #88]	@ (80088e4 <__pow5mult+0xb4>)
 800888a:	f7ff ff0f 	bl	80086ac <__i2b>
 800888e:	9b01      	ldr	r3, [sp, #4]
 8008890:	0004      	movs	r4, r0
 8008892:	6098      	str	r0, [r3, #8]
 8008894:	2300      	movs	r3, #0
 8008896:	6003      	str	r3, [r0, #0]
 8008898:	2301      	movs	r3, #1
 800889a:	421d      	tst	r5, r3
 800889c:	d00a      	beq.n	80088b4 <__pow5mult+0x84>
 800889e:	0031      	movs	r1, r6
 80088a0:	0022      	movs	r2, r4
 80088a2:	0038      	movs	r0, r7
 80088a4:	f7ff ff1a 	bl	80086dc <__multiply>
 80088a8:	0031      	movs	r1, r6
 80088aa:	9001      	str	r0, [sp, #4]
 80088ac:	0038      	movs	r0, r7
 80088ae:	f7ff fdf9 	bl	80084a4 <_Bfree>
 80088b2:	9e01      	ldr	r6, [sp, #4]
 80088b4:	106d      	asrs	r5, r5, #1
 80088b6:	d00c      	beq.n	80088d2 <__pow5mult+0xa2>
 80088b8:	6820      	ldr	r0, [r4, #0]
 80088ba:	2800      	cmp	r0, #0
 80088bc:	d107      	bne.n	80088ce <__pow5mult+0x9e>
 80088be:	0022      	movs	r2, r4
 80088c0:	0021      	movs	r1, r4
 80088c2:	0038      	movs	r0, r7
 80088c4:	f7ff ff0a 	bl	80086dc <__multiply>
 80088c8:	2300      	movs	r3, #0
 80088ca:	6020      	str	r0, [r4, #0]
 80088cc:	6003      	str	r3, [r0, #0]
 80088ce:	0004      	movs	r4, r0
 80088d0:	e7e2      	b.n	8008898 <__pow5mult+0x68>
 80088d2:	0030      	movs	r0, r6
 80088d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088d6:	46c0      	nop			@ (mov r8, r8)
 80088d8:	0800afc8 	.word	0x0800afc8
 80088dc:	0800ae36 	.word	0x0800ae36
 80088e0:	0800aeb6 	.word	0x0800aeb6
 80088e4:	00000271 	.word	0x00000271

080088e8 <__lshift>:
 80088e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088ea:	000c      	movs	r4, r1
 80088ec:	0016      	movs	r6, r2
 80088ee:	6923      	ldr	r3, [r4, #16]
 80088f0:	1157      	asrs	r7, r2, #5
 80088f2:	b085      	sub	sp, #20
 80088f4:	18fb      	adds	r3, r7, r3
 80088f6:	9301      	str	r3, [sp, #4]
 80088f8:	3301      	adds	r3, #1
 80088fa:	9300      	str	r3, [sp, #0]
 80088fc:	6849      	ldr	r1, [r1, #4]
 80088fe:	68a3      	ldr	r3, [r4, #8]
 8008900:	9002      	str	r0, [sp, #8]
 8008902:	9a00      	ldr	r2, [sp, #0]
 8008904:	4293      	cmp	r3, r2
 8008906:	db10      	blt.n	800892a <__lshift+0x42>
 8008908:	9802      	ldr	r0, [sp, #8]
 800890a:	f7ff fd87 	bl	800841c <_Balloc>
 800890e:	2300      	movs	r3, #0
 8008910:	0001      	movs	r1, r0
 8008912:	0005      	movs	r5, r0
 8008914:	001a      	movs	r2, r3
 8008916:	3114      	adds	r1, #20
 8008918:	4298      	cmp	r0, r3
 800891a:	d10c      	bne.n	8008936 <__lshift+0x4e>
 800891c:	21ef      	movs	r1, #239	@ 0xef
 800891e:	002a      	movs	r2, r5
 8008920:	4b25      	ldr	r3, [pc, #148]	@ (80089b8 <__lshift+0xd0>)
 8008922:	4826      	ldr	r0, [pc, #152]	@ (80089bc <__lshift+0xd4>)
 8008924:	0049      	lsls	r1, r1, #1
 8008926:	f001 fb3b 	bl	8009fa0 <__assert_func>
 800892a:	3101      	adds	r1, #1
 800892c:	005b      	lsls	r3, r3, #1
 800892e:	e7e8      	b.n	8008902 <__lshift+0x1a>
 8008930:	0098      	lsls	r0, r3, #2
 8008932:	500a      	str	r2, [r1, r0]
 8008934:	3301      	adds	r3, #1
 8008936:	42bb      	cmp	r3, r7
 8008938:	dbfa      	blt.n	8008930 <__lshift+0x48>
 800893a:	43fb      	mvns	r3, r7
 800893c:	17db      	asrs	r3, r3, #31
 800893e:	401f      	ands	r7, r3
 8008940:	00bf      	lsls	r7, r7, #2
 8008942:	0023      	movs	r3, r4
 8008944:	201f      	movs	r0, #31
 8008946:	19c9      	adds	r1, r1, r7
 8008948:	0037      	movs	r7, r6
 800894a:	6922      	ldr	r2, [r4, #16]
 800894c:	3314      	adds	r3, #20
 800894e:	0092      	lsls	r2, r2, #2
 8008950:	189a      	adds	r2, r3, r2
 8008952:	4007      	ands	r7, r0
 8008954:	4206      	tst	r6, r0
 8008956:	d029      	beq.n	80089ac <__lshift+0xc4>
 8008958:	3001      	adds	r0, #1
 800895a:	1bc0      	subs	r0, r0, r7
 800895c:	9003      	str	r0, [sp, #12]
 800895e:	468c      	mov	ip, r1
 8008960:	2000      	movs	r0, #0
 8008962:	681e      	ldr	r6, [r3, #0]
 8008964:	40be      	lsls	r6, r7
 8008966:	4306      	orrs	r6, r0
 8008968:	4660      	mov	r0, ip
 800896a:	c040      	stmia	r0!, {r6}
 800896c:	4684      	mov	ip, r0
 800896e:	9e03      	ldr	r6, [sp, #12]
 8008970:	cb01      	ldmia	r3!, {r0}
 8008972:	40f0      	lsrs	r0, r6
 8008974:	429a      	cmp	r2, r3
 8008976:	d8f4      	bhi.n	8008962 <__lshift+0x7a>
 8008978:	0026      	movs	r6, r4
 800897a:	3615      	adds	r6, #21
 800897c:	2304      	movs	r3, #4
 800897e:	42b2      	cmp	r2, r6
 8008980:	d304      	bcc.n	800898c <__lshift+0xa4>
 8008982:	1b13      	subs	r3, r2, r4
 8008984:	3b15      	subs	r3, #21
 8008986:	089b      	lsrs	r3, r3, #2
 8008988:	3301      	adds	r3, #1
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	50c8      	str	r0, [r1, r3]
 800898e:	2800      	cmp	r0, #0
 8008990:	d002      	beq.n	8008998 <__lshift+0xb0>
 8008992:	9b01      	ldr	r3, [sp, #4]
 8008994:	3302      	adds	r3, #2
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	9b00      	ldr	r3, [sp, #0]
 800899a:	9802      	ldr	r0, [sp, #8]
 800899c:	3b01      	subs	r3, #1
 800899e:	0021      	movs	r1, r4
 80089a0:	612b      	str	r3, [r5, #16]
 80089a2:	f7ff fd7f 	bl	80084a4 <_Bfree>
 80089a6:	0028      	movs	r0, r5
 80089a8:	b005      	add	sp, #20
 80089aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ac:	cb01      	ldmia	r3!, {r0}
 80089ae:	c101      	stmia	r1!, {r0}
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d8fb      	bhi.n	80089ac <__lshift+0xc4>
 80089b4:	e7f0      	b.n	8008998 <__lshift+0xb0>
 80089b6:	46c0      	nop			@ (mov r8, r8)
 80089b8:	0800aea5 	.word	0x0800aea5
 80089bc:	0800aeb6 	.word	0x0800aeb6

080089c0 <__mcmp>:
 80089c0:	b530      	push	{r4, r5, lr}
 80089c2:	690b      	ldr	r3, [r1, #16]
 80089c4:	6904      	ldr	r4, [r0, #16]
 80089c6:	0002      	movs	r2, r0
 80089c8:	1ae0      	subs	r0, r4, r3
 80089ca:	429c      	cmp	r4, r3
 80089cc:	d10f      	bne.n	80089ee <__mcmp+0x2e>
 80089ce:	3214      	adds	r2, #20
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	3114      	adds	r1, #20
 80089d4:	0014      	movs	r4, r2
 80089d6:	18c9      	adds	r1, r1, r3
 80089d8:	18d2      	adds	r2, r2, r3
 80089da:	3a04      	subs	r2, #4
 80089dc:	3904      	subs	r1, #4
 80089de:	6815      	ldr	r5, [r2, #0]
 80089e0:	680b      	ldr	r3, [r1, #0]
 80089e2:	429d      	cmp	r5, r3
 80089e4:	d004      	beq.n	80089f0 <__mcmp+0x30>
 80089e6:	2001      	movs	r0, #1
 80089e8:	429d      	cmp	r5, r3
 80089ea:	d200      	bcs.n	80089ee <__mcmp+0x2e>
 80089ec:	3802      	subs	r0, #2
 80089ee:	bd30      	pop	{r4, r5, pc}
 80089f0:	4294      	cmp	r4, r2
 80089f2:	d3f2      	bcc.n	80089da <__mcmp+0x1a>
 80089f4:	e7fb      	b.n	80089ee <__mcmp+0x2e>
	...

080089f8 <__mdiff>:
 80089f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089fa:	000c      	movs	r4, r1
 80089fc:	b087      	sub	sp, #28
 80089fe:	9000      	str	r0, [sp, #0]
 8008a00:	0011      	movs	r1, r2
 8008a02:	0020      	movs	r0, r4
 8008a04:	0017      	movs	r7, r2
 8008a06:	f7ff ffdb 	bl	80089c0 <__mcmp>
 8008a0a:	1e05      	subs	r5, r0, #0
 8008a0c:	d110      	bne.n	8008a30 <__mdiff+0x38>
 8008a0e:	0001      	movs	r1, r0
 8008a10:	9800      	ldr	r0, [sp, #0]
 8008a12:	f7ff fd03 	bl	800841c <_Balloc>
 8008a16:	1e02      	subs	r2, r0, #0
 8008a18:	d104      	bne.n	8008a24 <__mdiff+0x2c>
 8008a1a:	4b40      	ldr	r3, [pc, #256]	@ (8008b1c <__mdiff+0x124>)
 8008a1c:	4840      	ldr	r0, [pc, #256]	@ (8008b20 <__mdiff+0x128>)
 8008a1e:	4941      	ldr	r1, [pc, #260]	@ (8008b24 <__mdiff+0x12c>)
 8008a20:	f001 fabe 	bl	8009fa0 <__assert_func>
 8008a24:	2301      	movs	r3, #1
 8008a26:	6145      	str	r5, [r0, #20]
 8008a28:	6103      	str	r3, [r0, #16]
 8008a2a:	0010      	movs	r0, r2
 8008a2c:	b007      	add	sp, #28
 8008a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a30:	2600      	movs	r6, #0
 8008a32:	42b0      	cmp	r0, r6
 8008a34:	da03      	bge.n	8008a3e <__mdiff+0x46>
 8008a36:	0023      	movs	r3, r4
 8008a38:	003c      	movs	r4, r7
 8008a3a:	001f      	movs	r7, r3
 8008a3c:	3601      	adds	r6, #1
 8008a3e:	6861      	ldr	r1, [r4, #4]
 8008a40:	9800      	ldr	r0, [sp, #0]
 8008a42:	f7ff fceb 	bl	800841c <_Balloc>
 8008a46:	1e02      	subs	r2, r0, #0
 8008a48:	d103      	bne.n	8008a52 <__mdiff+0x5a>
 8008a4a:	4b34      	ldr	r3, [pc, #208]	@ (8008b1c <__mdiff+0x124>)
 8008a4c:	4834      	ldr	r0, [pc, #208]	@ (8008b20 <__mdiff+0x128>)
 8008a4e:	4936      	ldr	r1, [pc, #216]	@ (8008b28 <__mdiff+0x130>)
 8008a50:	e7e6      	b.n	8008a20 <__mdiff+0x28>
 8008a52:	6923      	ldr	r3, [r4, #16]
 8008a54:	3414      	adds	r4, #20
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	18e3      	adds	r3, r4, r3
 8008a5c:	0021      	movs	r1, r4
 8008a5e:	9401      	str	r4, [sp, #4]
 8008a60:	003c      	movs	r4, r7
 8008a62:	9302      	str	r3, [sp, #8]
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	3414      	adds	r4, #20
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	18e3      	adds	r3, r4, r3
 8008a6c:	9303      	str	r3, [sp, #12]
 8008a6e:	0003      	movs	r3, r0
 8008a70:	60c6      	str	r6, [r0, #12]
 8008a72:	468c      	mov	ip, r1
 8008a74:	2000      	movs	r0, #0
 8008a76:	3314      	adds	r3, #20
 8008a78:	9304      	str	r3, [sp, #16]
 8008a7a:	9305      	str	r3, [sp, #20]
 8008a7c:	4663      	mov	r3, ip
 8008a7e:	cb20      	ldmia	r3!, {r5}
 8008a80:	b2a9      	uxth	r1, r5
 8008a82:	000e      	movs	r6, r1
 8008a84:	469c      	mov	ip, r3
 8008a86:	cc08      	ldmia	r4!, {r3}
 8008a88:	0c2d      	lsrs	r5, r5, #16
 8008a8a:	b299      	uxth	r1, r3
 8008a8c:	1a71      	subs	r1, r6, r1
 8008a8e:	1809      	adds	r1, r1, r0
 8008a90:	0c1b      	lsrs	r3, r3, #16
 8008a92:	1408      	asrs	r0, r1, #16
 8008a94:	1aeb      	subs	r3, r5, r3
 8008a96:	181b      	adds	r3, r3, r0
 8008a98:	1418      	asrs	r0, r3, #16
 8008a9a:	b289      	uxth	r1, r1
 8008a9c:	041b      	lsls	r3, r3, #16
 8008a9e:	4319      	orrs	r1, r3
 8008aa0:	9b05      	ldr	r3, [sp, #20]
 8008aa2:	c302      	stmia	r3!, {r1}
 8008aa4:	9305      	str	r3, [sp, #20]
 8008aa6:	9b03      	ldr	r3, [sp, #12]
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	d8e7      	bhi.n	8008a7c <__mdiff+0x84>
 8008aac:	0039      	movs	r1, r7
 8008aae:	9c03      	ldr	r4, [sp, #12]
 8008ab0:	3115      	adds	r1, #21
 8008ab2:	2304      	movs	r3, #4
 8008ab4:	428c      	cmp	r4, r1
 8008ab6:	d304      	bcc.n	8008ac2 <__mdiff+0xca>
 8008ab8:	1be3      	subs	r3, r4, r7
 8008aba:	3b15      	subs	r3, #21
 8008abc:	089b      	lsrs	r3, r3, #2
 8008abe:	3301      	adds	r3, #1
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	9901      	ldr	r1, [sp, #4]
 8008ac4:	18cd      	adds	r5, r1, r3
 8008ac6:	9904      	ldr	r1, [sp, #16]
 8008ac8:	002e      	movs	r6, r5
 8008aca:	18cb      	adds	r3, r1, r3
 8008acc:	001f      	movs	r7, r3
 8008ace:	9902      	ldr	r1, [sp, #8]
 8008ad0:	428e      	cmp	r6, r1
 8008ad2:	d311      	bcc.n	8008af8 <__mdiff+0x100>
 8008ad4:	9c02      	ldr	r4, [sp, #8]
 8008ad6:	1ee9      	subs	r1, r5, #3
 8008ad8:	2000      	movs	r0, #0
 8008ada:	428c      	cmp	r4, r1
 8008adc:	d304      	bcc.n	8008ae8 <__mdiff+0xf0>
 8008ade:	0021      	movs	r1, r4
 8008ae0:	3103      	adds	r1, #3
 8008ae2:	1b49      	subs	r1, r1, r5
 8008ae4:	0889      	lsrs	r1, r1, #2
 8008ae6:	0088      	lsls	r0, r1, #2
 8008ae8:	181b      	adds	r3, r3, r0
 8008aea:	3b04      	subs	r3, #4
 8008aec:	6819      	ldr	r1, [r3, #0]
 8008aee:	2900      	cmp	r1, #0
 8008af0:	d010      	beq.n	8008b14 <__mdiff+0x11c>
 8008af2:	9b00      	ldr	r3, [sp, #0]
 8008af4:	6113      	str	r3, [r2, #16]
 8008af6:	e798      	b.n	8008a2a <__mdiff+0x32>
 8008af8:	4684      	mov	ip, r0
 8008afa:	ce02      	ldmia	r6!, {r1}
 8008afc:	b288      	uxth	r0, r1
 8008afe:	4460      	add	r0, ip
 8008b00:	1400      	asrs	r0, r0, #16
 8008b02:	0c0c      	lsrs	r4, r1, #16
 8008b04:	1904      	adds	r4, r0, r4
 8008b06:	4461      	add	r1, ip
 8008b08:	1420      	asrs	r0, r4, #16
 8008b0a:	b289      	uxth	r1, r1
 8008b0c:	0424      	lsls	r4, r4, #16
 8008b0e:	4321      	orrs	r1, r4
 8008b10:	c702      	stmia	r7!, {r1}
 8008b12:	e7dc      	b.n	8008ace <__mdiff+0xd6>
 8008b14:	9900      	ldr	r1, [sp, #0]
 8008b16:	3901      	subs	r1, #1
 8008b18:	9100      	str	r1, [sp, #0]
 8008b1a:	e7e6      	b.n	8008aea <__mdiff+0xf2>
 8008b1c:	0800aea5 	.word	0x0800aea5
 8008b20:	0800aeb6 	.word	0x0800aeb6
 8008b24:	00000237 	.word	0x00000237
 8008b28:	00000245 	.word	0x00000245

08008b2c <__ulp>:
 8008b2c:	b510      	push	{r4, lr}
 8008b2e:	2400      	movs	r4, #0
 8008b30:	4b0c      	ldr	r3, [pc, #48]	@ (8008b64 <__ulp+0x38>)
 8008b32:	4a0d      	ldr	r2, [pc, #52]	@ (8008b68 <__ulp+0x3c>)
 8008b34:	400b      	ands	r3, r1
 8008b36:	189b      	adds	r3, r3, r2
 8008b38:	42a3      	cmp	r3, r4
 8008b3a:	dc06      	bgt.n	8008b4a <__ulp+0x1e>
 8008b3c:	425b      	negs	r3, r3
 8008b3e:	151a      	asrs	r2, r3, #20
 8008b40:	2a13      	cmp	r2, #19
 8008b42:	dc05      	bgt.n	8008b50 <__ulp+0x24>
 8008b44:	2380      	movs	r3, #128	@ 0x80
 8008b46:	031b      	lsls	r3, r3, #12
 8008b48:	4113      	asrs	r3, r2
 8008b4a:	0019      	movs	r1, r3
 8008b4c:	0020      	movs	r0, r4
 8008b4e:	bd10      	pop	{r4, pc}
 8008b50:	3a14      	subs	r2, #20
 8008b52:	2401      	movs	r4, #1
 8008b54:	2a1e      	cmp	r2, #30
 8008b56:	dc02      	bgt.n	8008b5e <__ulp+0x32>
 8008b58:	2480      	movs	r4, #128	@ 0x80
 8008b5a:	0624      	lsls	r4, r4, #24
 8008b5c:	40d4      	lsrs	r4, r2
 8008b5e:	2300      	movs	r3, #0
 8008b60:	e7f3      	b.n	8008b4a <__ulp+0x1e>
 8008b62:	46c0      	nop			@ (mov r8, r8)
 8008b64:	7ff00000 	.word	0x7ff00000
 8008b68:	fcc00000 	.word	0xfcc00000

08008b6c <__b2d>:
 8008b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b6e:	0006      	movs	r6, r0
 8008b70:	6903      	ldr	r3, [r0, #16]
 8008b72:	3614      	adds	r6, #20
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	18f3      	adds	r3, r6, r3
 8008b78:	1f1d      	subs	r5, r3, #4
 8008b7a:	682c      	ldr	r4, [r5, #0]
 8008b7c:	000f      	movs	r7, r1
 8008b7e:	0020      	movs	r0, r4
 8008b80:	9301      	str	r3, [sp, #4]
 8008b82:	f7ff fd43 	bl	800860c <__hi0bits>
 8008b86:	2220      	movs	r2, #32
 8008b88:	1a12      	subs	r2, r2, r0
 8008b8a:	603a      	str	r2, [r7, #0]
 8008b8c:	0003      	movs	r3, r0
 8008b8e:	4a1c      	ldr	r2, [pc, #112]	@ (8008c00 <__b2d+0x94>)
 8008b90:	280a      	cmp	r0, #10
 8008b92:	dc15      	bgt.n	8008bc0 <__b2d+0x54>
 8008b94:	210b      	movs	r1, #11
 8008b96:	0027      	movs	r7, r4
 8008b98:	1a09      	subs	r1, r1, r0
 8008b9a:	40cf      	lsrs	r7, r1
 8008b9c:	433a      	orrs	r2, r7
 8008b9e:	468c      	mov	ip, r1
 8008ba0:	0011      	movs	r1, r2
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	42ae      	cmp	r6, r5
 8008ba6:	d202      	bcs.n	8008bae <__b2d+0x42>
 8008ba8:	9a01      	ldr	r2, [sp, #4]
 8008baa:	3a08      	subs	r2, #8
 8008bac:	6812      	ldr	r2, [r2, #0]
 8008bae:	3315      	adds	r3, #21
 8008bb0:	409c      	lsls	r4, r3
 8008bb2:	4663      	mov	r3, ip
 8008bb4:	0027      	movs	r7, r4
 8008bb6:	40da      	lsrs	r2, r3
 8008bb8:	4317      	orrs	r7, r2
 8008bba:	0038      	movs	r0, r7
 8008bbc:	b003      	add	sp, #12
 8008bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bc0:	2700      	movs	r7, #0
 8008bc2:	42ae      	cmp	r6, r5
 8008bc4:	d202      	bcs.n	8008bcc <__b2d+0x60>
 8008bc6:	9d01      	ldr	r5, [sp, #4]
 8008bc8:	3d08      	subs	r5, #8
 8008bca:	682f      	ldr	r7, [r5, #0]
 8008bcc:	210b      	movs	r1, #11
 8008bce:	4249      	negs	r1, r1
 8008bd0:	468c      	mov	ip, r1
 8008bd2:	449c      	add	ip, r3
 8008bd4:	2b0b      	cmp	r3, #11
 8008bd6:	d010      	beq.n	8008bfa <__b2d+0x8e>
 8008bd8:	4661      	mov	r1, ip
 8008bda:	2320      	movs	r3, #32
 8008bdc:	408c      	lsls	r4, r1
 8008bde:	1a5b      	subs	r3, r3, r1
 8008be0:	0039      	movs	r1, r7
 8008be2:	40d9      	lsrs	r1, r3
 8008be4:	430c      	orrs	r4, r1
 8008be6:	4322      	orrs	r2, r4
 8008be8:	0011      	movs	r1, r2
 8008bea:	2200      	movs	r2, #0
 8008bec:	42b5      	cmp	r5, r6
 8008bee:	d901      	bls.n	8008bf4 <__b2d+0x88>
 8008bf0:	3d04      	subs	r5, #4
 8008bf2:	682a      	ldr	r2, [r5, #0]
 8008bf4:	4664      	mov	r4, ip
 8008bf6:	40a7      	lsls	r7, r4
 8008bf8:	e7dd      	b.n	8008bb6 <__b2d+0x4a>
 8008bfa:	4322      	orrs	r2, r4
 8008bfc:	0011      	movs	r1, r2
 8008bfe:	e7dc      	b.n	8008bba <__b2d+0x4e>
 8008c00:	3ff00000 	.word	0x3ff00000

08008c04 <__d2b>:
 8008c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c06:	2101      	movs	r1, #1
 8008c08:	0016      	movs	r6, r2
 8008c0a:	001f      	movs	r7, r3
 8008c0c:	f7ff fc06 	bl	800841c <_Balloc>
 8008c10:	1e04      	subs	r4, r0, #0
 8008c12:	d105      	bne.n	8008c20 <__d2b+0x1c>
 8008c14:	0022      	movs	r2, r4
 8008c16:	4b25      	ldr	r3, [pc, #148]	@ (8008cac <__d2b+0xa8>)
 8008c18:	4825      	ldr	r0, [pc, #148]	@ (8008cb0 <__d2b+0xac>)
 8008c1a:	4926      	ldr	r1, [pc, #152]	@ (8008cb4 <__d2b+0xb0>)
 8008c1c:	f001 f9c0 	bl	8009fa0 <__assert_func>
 8008c20:	033b      	lsls	r3, r7, #12
 8008c22:	007d      	lsls	r5, r7, #1
 8008c24:	0b1b      	lsrs	r3, r3, #12
 8008c26:	0d6d      	lsrs	r5, r5, #21
 8008c28:	d002      	beq.n	8008c30 <__d2b+0x2c>
 8008c2a:	2280      	movs	r2, #128	@ 0x80
 8008c2c:	0352      	lsls	r2, r2, #13
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	9301      	str	r3, [sp, #4]
 8008c32:	2e00      	cmp	r6, #0
 8008c34:	d025      	beq.n	8008c82 <__d2b+0x7e>
 8008c36:	4668      	mov	r0, sp
 8008c38:	9600      	str	r6, [sp, #0]
 8008c3a:	f7ff fd08 	bl	800864e <__lo0bits>
 8008c3e:	9b01      	ldr	r3, [sp, #4]
 8008c40:	9900      	ldr	r1, [sp, #0]
 8008c42:	2800      	cmp	r0, #0
 8008c44:	d01b      	beq.n	8008c7e <__d2b+0x7a>
 8008c46:	2220      	movs	r2, #32
 8008c48:	001e      	movs	r6, r3
 8008c4a:	1a12      	subs	r2, r2, r0
 8008c4c:	4096      	lsls	r6, r2
 8008c4e:	0032      	movs	r2, r6
 8008c50:	40c3      	lsrs	r3, r0
 8008c52:	430a      	orrs	r2, r1
 8008c54:	6162      	str	r2, [r4, #20]
 8008c56:	9301      	str	r3, [sp, #4]
 8008c58:	9e01      	ldr	r6, [sp, #4]
 8008c5a:	61a6      	str	r6, [r4, #24]
 8008c5c:	1e73      	subs	r3, r6, #1
 8008c5e:	419e      	sbcs	r6, r3
 8008c60:	3601      	adds	r6, #1
 8008c62:	6126      	str	r6, [r4, #16]
 8008c64:	2d00      	cmp	r5, #0
 8008c66:	d014      	beq.n	8008c92 <__d2b+0x8e>
 8008c68:	2635      	movs	r6, #53	@ 0x35
 8008c6a:	4b13      	ldr	r3, [pc, #76]	@ (8008cb8 <__d2b+0xb4>)
 8008c6c:	18ed      	adds	r5, r5, r3
 8008c6e:	9b08      	ldr	r3, [sp, #32]
 8008c70:	182d      	adds	r5, r5, r0
 8008c72:	601d      	str	r5, [r3, #0]
 8008c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c76:	1a36      	subs	r6, r6, r0
 8008c78:	601e      	str	r6, [r3, #0]
 8008c7a:	0020      	movs	r0, r4
 8008c7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c7e:	6161      	str	r1, [r4, #20]
 8008c80:	e7ea      	b.n	8008c58 <__d2b+0x54>
 8008c82:	a801      	add	r0, sp, #4
 8008c84:	f7ff fce3 	bl	800864e <__lo0bits>
 8008c88:	9b01      	ldr	r3, [sp, #4]
 8008c8a:	2601      	movs	r6, #1
 8008c8c:	6163      	str	r3, [r4, #20]
 8008c8e:	3020      	adds	r0, #32
 8008c90:	e7e7      	b.n	8008c62 <__d2b+0x5e>
 8008c92:	4b0a      	ldr	r3, [pc, #40]	@ (8008cbc <__d2b+0xb8>)
 8008c94:	18c0      	adds	r0, r0, r3
 8008c96:	9b08      	ldr	r3, [sp, #32]
 8008c98:	6018      	str	r0, [r3, #0]
 8008c9a:	4b09      	ldr	r3, [pc, #36]	@ (8008cc0 <__d2b+0xbc>)
 8008c9c:	18f3      	adds	r3, r6, r3
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	18e3      	adds	r3, r4, r3
 8008ca2:	6958      	ldr	r0, [r3, #20]
 8008ca4:	f7ff fcb2 	bl	800860c <__hi0bits>
 8008ca8:	0176      	lsls	r6, r6, #5
 8008caa:	e7e3      	b.n	8008c74 <__d2b+0x70>
 8008cac:	0800aea5 	.word	0x0800aea5
 8008cb0:	0800aeb6 	.word	0x0800aeb6
 8008cb4:	0000030f 	.word	0x0000030f
 8008cb8:	fffffbcd 	.word	0xfffffbcd
 8008cbc:	fffffbce 	.word	0xfffffbce
 8008cc0:	3fffffff 	.word	0x3fffffff

08008cc4 <__ratio>:
 8008cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cc6:	b087      	sub	sp, #28
 8008cc8:	000f      	movs	r7, r1
 8008cca:	a904      	add	r1, sp, #16
 8008ccc:	0006      	movs	r6, r0
 8008cce:	f7ff ff4d 	bl	8008b6c <__b2d>
 8008cd2:	9000      	str	r0, [sp, #0]
 8008cd4:	9101      	str	r1, [sp, #4]
 8008cd6:	9b00      	ldr	r3, [sp, #0]
 8008cd8:	9c01      	ldr	r4, [sp, #4]
 8008cda:	0038      	movs	r0, r7
 8008cdc:	a905      	add	r1, sp, #20
 8008cde:	9302      	str	r3, [sp, #8]
 8008ce0:	9403      	str	r4, [sp, #12]
 8008ce2:	f7ff ff43 	bl	8008b6c <__b2d>
 8008ce6:	000d      	movs	r5, r1
 8008ce8:	0002      	movs	r2, r0
 8008cea:	000b      	movs	r3, r1
 8008cec:	6930      	ldr	r0, [r6, #16]
 8008cee:	6939      	ldr	r1, [r7, #16]
 8008cf0:	9e04      	ldr	r6, [sp, #16]
 8008cf2:	1a40      	subs	r0, r0, r1
 8008cf4:	9905      	ldr	r1, [sp, #20]
 8008cf6:	0140      	lsls	r0, r0, #5
 8008cf8:	1a71      	subs	r1, r6, r1
 8008cfa:	1841      	adds	r1, r0, r1
 8008cfc:	0508      	lsls	r0, r1, #20
 8008cfe:	2900      	cmp	r1, #0
 8008d00:	dd08      	ble.n	8008d14 <__ratio+0x50>
 8008d02:	9901      	ldr	r1, [sp, #4]
 8008d04:	1841      	adds	r1, r0, r1
 8008d06:	9103      	str	r1, [sp, #12]
 8008d08:	9802      	ldr	r0, [sp, #8]
 8008d0a:	9903      	ldr	r1, [sp, #12]
 8008d0c:	f7f8 fa9c 	bl	8001248 <__aeabi_ddiv>
 8008d10:	b007      	add	sp, #28
 8008d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d14:	1a2b      	subs	r3, r5, r0
 8008d16:	e7f7      	b.n	8008d08 <__ratio+0x44>

08008d18 <__copybits>:
 8008d18:	b570      	push	{r4, r5, r6, lr}
 8008d1a:	0014      	movs	r4, r2
 8008d1c:	0005      	movs	r5, r0
 8008d1e:	3901      	subs	r1, #1
 8008d20:	6913      	ldr	r3, [r2, #16]
 8008d22:	1149      	asrs	r1, r1, #5
 8008d24:	3101      	adds	r1, #1
 8008d26:	0089      	lsls	r1, r1, #2
 8008d28:	3414      	adds	r4, #20
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	1841      	adds	r1, r0, r1
 8008d2e:	18e3      	adds	r3, r4, r3
 8008d30:	42a3      	cmp	r3, r4
 8008d32:	d80d      	bhi.n	8008d50 <__copybits+0x38>
 8008d34:	0014      	movs	r4, r2
 8008d36:	3411      	adds	r4, #17
 8008d38:	2500      	movs	r5, #0
 8008d3a:	42a3      	cmp	r3, r4
 8008d3c:	d303      	bcc.n	8008d46 <__copybits+0x2e>
 8008d3e:	1a9b      	subs	r3, r3, r2
 8008d40:	3b11      	subs	r3, #17
 8008d42:	089b      	lsrs	r3, r3, #2
 8008d44:	009d      	lsls	r5, r3, #2
 8008d46:	2300      	movs	r3, #0
 8008d48:	1940      	adds	r0, r0, r5
 8008d4a:	4281      	cmp	r1, r0
 8008d4c:	d803      	bhi.n	8008d56 <__copybits+0x3e>
 8008d4e:	bd70      	pop	{r4, r5, r6, pc}
 8008d50:	cc40      	ldmia	r4!, {r6}
 8008d52:	c540      	stmia	r5!, {r6}
 8008d54:	e7ec      	b.n	8008d30 <__copybits+0x18>
 8008d56:	c008      	stmia	r0!, {r3}
 8008d58:	e7f7      	b.n	8008d4a <__copybits+0x32>

08008d5a <__any_on>:
 8008d5a:	0002      	movs	r2, r0
 8008d5c:	6900      	ldr	r0, [r0, #16]
 8008d5e:	b510      	push	{r4, lr}
 8008d60:	3214      	adds	r2, #20
 8008d62:	114b      	asrs	r3, r1, #5
 8008d64:	4298      	cmp	r0, r3
 8008d66:	db13      	blt.n	8008d90 <__any_on+0x36>
 8008d68:	dd0c      	ble.n	8008d84 <__any_on+0x2a>
 8008d6a:	241f      	movs	r4, #31
 8008d6c:	0008      	movs	r0, r1
 8008d6e:	4020      	ands	r0, r4
 8008d70:	4221      	tst	r1, r4
 8008d72:	d007      	beq.n	8008d84 <__any_on+0x2a>
 8008d74:	0099      	lsls	r1, r3, #2
 8008d76:	588c      	ldr	r4, [r1, r2]
 8008d78:	0021      	movs	r1, r4
 8008d7a:	40c1      	lsrs	r1, r0
 8008d7c:	4081      	lsls	r1, r0
 8008d7e:	2001      	movs	r0, #1
 8008d80:	428c      	cmp	r4, r1
 8008d82:	d104      	bne.n	8008d8e <__any_on+0x34>
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	18d3      	adds	r3, r2, r3
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d803      	bhi.n	8008d94 <__any_on+0x3a>
 8008d8c:	2000      	movs	r0, #0
 8008d8e:	bd10      	pop	{r4, pc}
 8008d90:	0003      	movs	r3, r0
 8008d92:	e7f7      	b.n	8008d84 <__any_on+0x2a>
 8008d94:	3b04      	subs	r3, #4
 8008d96:	6819      	ldr	r1, [r3, #0]
 8008d98:	2900      	cmp	r1, #0
 8008d9a:	d0f5      	beq.n	8008d88 <__any_on+0x2e>
 8008d9c:	2001      	movs	r0, #1
 8008d9e:	e7f6      	b.n	8008d8e <__any_on+0x34>

08008da0 <sulp>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	0016      	movs	r6, r2
 8008da4:	000d      	movs	r5, r1
 8008da6:	f7ff fec1 	bl	8008b2c <__ulp>
 8008daa:	2e00      	cmp	r6, #0
 8008dac:	d00d      	beq.n	8008dca <sulp+0x2a>
 8008dae:	236b      	movs	r3, #107	@ 0x6b
 8008db0:	006a      	lsls	r2, r5, #1
 8008db2:	0d52      	lsrs	r2, r2, #21
 8008db4:	1a9b      	subs	r3, r3, r2
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	dd07      	ble.n	8008dca <sulp+0x2a>
 8008dba:	2400      	movs	r4, #0
 8008dbc:	4a03      	ldr	r2, [pc, #12]	@ (8008dcc <sulp+0x2c>)
 8008dbe:	051b      	lsls	r3, r3, #20
 8008dc0:	189d      	adds	r5, r3, r2
 8008dc2:	002b      	movs	r3, r5
 8008dc4:	0022      	movs	r2, r4
 8008dc6:	f7f8 fe79 	bl	8001abc <__aeabi_dmul>
 8008dca:	bd70      	pop	{r4, r5, r6, pc}
 8008dcc:	3ff00000 	.word	0x3ff00000

08008dd0 <_strtod_l>:
 8008dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dd2:	b0a3      	sub	sp, #140	@ 0x8c
 8008dd4:	921b      	str	r2, [sp, #108]	@ 0x6c
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2600      	movs	r6, #0
 8008dda:	2700      	movs	r7, #0
 8008ddc:	9005      	str	r0, [sp, #20]
 8008dde:	9109      	str	r1, [sp, #36]	@ 0x24
 8008de0:	921e      	str	r2, [sp, #120]	@ 0x78
 8008de2:	911d      	str	r1, [sp, #116]	@ 0x74
 8008de4:	780a      	ldrb	r2, [r1, #0]
 8008de6:	2a2b      	cmp	r2, #43	@ 0x2b
 8008de8:	d053      	beq.n	8008e92 <_strtod_l+0xc2>
 8008dea:	d83f      	bhi.n	8008e6c <_strtod_l+0x9c>
 8008dec:	2a0d      	cmp	r2, #13
 8008dee:	d839      	bhi.n	8008e64 <_strtod_l+0x94>
 8008df0:	2a08      	cmp	r2, #8
 8008df2:	d839      	bhi.n	8008e68 <_strtod_l+0x98>
 8008df4:	2a00      	cmp	r2, #0
 8008df6:	d042      	beq.n	8008e7e <_strtod_l+0xae>
 8008df8:	2200      	movs	r2, #0
 8008dfa:	9212      	str	r2, [sp, #72]	@ 0x48
 8008dfc:	2100      	movs	r1, #0
 8008dfe:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8008e00:	910c      	str	r1, [sp, #48]	@ 0x30
 8008e02:	782a      	ldrb	r2, [r5, #0]
 8008e04:	2a30      	cmp	r2, #48	@ 0x30
 8008e06:	d000      	beq.n	8008e0a <_strtod_l+0x3a>
 8008e08:	e083      	b.n	8008f12 <_strtod_l+0x142>
 8008e0a:	786a      	ldrb	r2, [r5, #1]
 8008e0c:	3120      	adds	r1, #32
 8008e0e:	438a      	bics	r2, r1
 8008e10:	2a58      	cmp	r2, #88	@ 0x58
 8008e12:	d000      	beq.n	8008e16 <_strtod_l+0x46>
 8008e14:	e073      	b.n	8008efe <_strtod_l+0x12e>
 8008e16:	9302      	str	r3, [sp, #8]
 8008e18:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e1a:	4a9b      	ldr	r2, [pc, #620]	@ (8009088 <_strtod_l+0x2b8>)
 8008e1c:	9301      	str	r3, [sp, #4]
 8008e1e:	ab1e      	add	r3, sp, #120	@ 0x78
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	9805      	ldr	r0, [sp, #20]
 8008e24:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008e26:	a91d      	add	r1, sp, #116	@ 0x74
 8008e28:	f001 f96e 	bl	800a108 <__gethex>
 8008e2c:	230f      	movs	r3, #15
 8008e2e:	0002      	movs	r2, r0
 8008e30:	401a      	ands	r2, r3
 8008e32:	0004      	movs	r4, r0
 8008e34:	9206      	str	r2, [sp, #24]
 8008e36:	4218      	tst	r0, r3
 8008e38:	d005      	beq.n	8008e46 <_strtod_l+0x76>
 8008e3a:	2a06      	cmp	r2, #6
 8008e3c:	d12b      	bne.n	8008e96 <_strtod_l+0xc6>
 8008e3e:	2300      	movs	r3, #0
 8008e40:	3501      	adds	r5, #1
 8008e42:	951d      	str	r5, [sp, #116]	@ 0x74
 8008e44:	9312      	str	r3, [sp, #72]	@ 0x48
 8008e46:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <_strtod_l+0x82>
 8008e4c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008e4e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008e50:	6013      	str	r3, [r2, #0]
 8008e52:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d019      	beq.n	8008e8c <_strtod_l+0xbc>
 8008e58:	2380      	movs	r3, #128	@ 0x80
 8008e5a:	0030      	movs	r0, r6
 8008e5c:	061b      	lsls	r3, r3, #24
 8008e5e:	18f9      	adds	r1, r7, r3
 8008e60:	b023      	add	sp, #140	@ 0x8c
 8008e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e64:	2a20      	cmp	r2, #32
 8008e66:	d1c7      	bne.n	8008df8 <_strtod_l+0x28>
 8008e68:	3101      	adds	r1, #1
 8008e6a:	e7ba      	b.n	8008de2 <_strtod_l+0x12>
 8008e6c:	2a2d      	cmp	r2, #45	@ 0x2d
 8008e6e:	d1c3      	bne.n	8008df8 <_strtod_l+0x28>
 8008e70:	3a2c      	subs	r2, #44	@ 0x2c
 8008e72:	9212      	str	r2, [sp, #72]	@ 0x48
 8008e74:	1c4a      	adds	r2, r1, #1
 8008e76:	921d      	str	r2, [sp, #116]	@ 0x74
 8008e78:	784a      	ldrb	r2, [r1, #1]
 8008e7a:	2a00      	cmp	r2, #0
 8008e7c:	d1be      	bne.n	8008dfc <_strtod_l+0x2c>
 8008e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e80:	931d      	str	r3, [sp, #116]	@ 0x74
 8008e82:	2300      	movs	r3, #0
 8008e84:	9312      	str	r3, [sp, #72]	@ 0x48
 8008e86:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1df      	bne.n	8008e4c <_strtod_l+0x7c>
 8008e8c:	0030      	movs	r0, r6
 8008e8e:	0039      	movs	r1, r7
 8008e90:	e7e6      	b.n	8008e60 <_strtod_l+0x90>
 8008e92:	2200      	movs	r2, #0
 8008e94:	e7ed      	b.n	8008e72 <_strtod_l+0xa2>
 8008e96:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8008e98:	2a00      	cmp	r2, #0
 8008e9a:	d007      	beq.n	8008eac <_strtod_l+0xdc>
 8008e9c:	2135      	movs	r1, #53	@ 0x35
 8008e9e:	a820      	add	r0, sp, #128	@ 0x80
 8008ea0:	f7ff ff3a 	bl	8008d18 <__copybits>
 8008ea4:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008ea6:	9805      	ldr	r0, [sp, #20]
 8008ea8:	f7ff fafc 	bl	80084a4 <_Bfree>
 8008eac:	9806      	ldr	r0, [sp, #24]
 8008eae:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008eb0:	3801      	subs	r0, #1
 8008eb2:	2804      	cmp	r0, #4
 8008eb4:	d806      	bhi.n	8008ec4 <_strtod_l+0xf4>
 8008eb6:	f7f7 f92f 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008eba:	0312      	.short	0x0312
 8008ebc:	1e1c      	.short	0x1e1c
 8008ebe:	12          	.byte	0x12
 8008ebf:	00          	.byte	0x00
 8008ec0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008ec2:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8008ec4:	05e4      	lsls	r4, r4, #23
 8008ec6:	d502      	bpl.n	8008ece <_strtod_l+0xfe>
 8008ec8:	2380      	movs	r3, #128	@ 0x80
 8008eca:	061b      	lsls	r3, r3, #24
 8008ecc:	431f      	orrs	r7, r3
 8008ece:	4b6f      	ldr	r3, [pc, #444]	@ (800908c <_strtod_l+0x2bc>)
 8008ed0:	423b      	tst	r3, r7
 8008ed2:	d1b8      	bne.n	8008e46 <_strtod_l+0x76>
 8008ed4:	f7fe faea 	bl	80074ac <__errno>
 8008ed8:	2322      	movs	r3, #34	@ 0x22
 8008eda:	6003      	str	r3, [r0, #0]
 8008edc:	e7b3      	b.n	8008e46 <_strtod_l+0x76>
 8008ede:	496c      	ldr	r1, [pc, #432]	@ (8009090 <_strtod_l+0x2c0>)
 8008ee0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008ee2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008ee4:	400a      	ands	r2, r1
 8008ee6:	496b      	ldr	r1, [pc, #428]	@ (8009094 <_strtod_l+0x2c4>)
 8008ee8:	185b      	adds	r3, r3, r1
 8008eea:	051b      	lsls	r3, r3, #20
 8008eec:	431a      	orrs	r2, r3
 8008eee:	0017      	movs	r7, r2
 8008ef0:	e7e8      	b.n	8008ec4 <_strtod_l+0xf4>
 8008ef2:	4f66      	ldr	r7, [pc, #408]	@ (800908c <_strtod_l+0x2bc>)
 8008ef4:	e7e6      	b.n	8008ec4 <_strtod_l+0xf4>
 8008ef6:	2601      	movs	r6, #1
 8008ef8:	4f67      	ldr	r7, [pc, #412]	@ (8009098 <_strtod_l+0x2c8>)
 8008efa:	4276      	negs	r6, r6
 8008efc:	e7e2      	b.n	8008ec4 <_strtod_l+0xf4>
 8008efe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f00:	1c5a      	adds	r2, r3, #1
 8008f02:	921d      	str	r2, [sp, #116]	@ 0x74
 8008f04:	785b      	ldrb	r3, [r3, #1]
 8008f06:	2b30      	cmp	r3, #48	@ 0x30
 8008f08:	d0f9      	beq.n	8008efe <_strtod_l+0x12e>
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d09b      	beq.n	8008e46 <_strtod_l+0x76>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	930c      	str	r3, [sp, #48]	@ 0x30
 8008f12:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f14:	220a      	movs	r2, #10
 8008f16:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008f18:	2300      	movs	r3, #0
 8008f1a:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f1c:	930d      	str	r3, [sp, #52]	@ 0x34
 8008f1e:	9308      	str	r3, [sp, #32]
 8008f20:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8008f22:	7804      	ldrb	r4, [r0, #0]
 8008f24:	0023      	movs	r3, r4
 8008f26:	3b30      	subs	r3, #48	@ 0x30
 8008f28:	b2d9      	uxtb	r1, r3
 8008f2a:	2909      	cmp	r1, #9
 8008f2c:	d927      	bls.n	8008f7e <_strtod_l+0x1ae>
 8008f2e:	2201      	movs	r2, #1
 8008f30:	495a      	ldr	r1, [pc, #360]	@ (800909c <_strtod_l+0x2cc>)
 8008f32:	f001 f802 	bl	8009f3a <strncmp>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d033      	beq.n	8008fa2 <_strtod_l+0x1d2>
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	0023      	movs	r3, r4
 8008f3e:	4684      	mov	ip, r0
 8008f40:	9a08      	ldr	r2, [sp, #32]
 8008f42:	900e      	str	r0, [sp, #56]	@ 0x38
 8008f44:	9206      	str	r2, [sp, #24]
 8008f46:	2220      	movs	r2, #32
 8008f48:	0019      	movs	r1, r3
 8008f4a:	4391      	bics	r1, r2
 8008f4c:	000a      	movs	r2, r1
 8008f4e:	2100      	movs	r1, #0
 8008f50:	9107      	str	r1, [sp, #28]
 8008f52:	2a45      	cmp	r2, #69	@ 0x45
 8008f54:	d000      	beq.n	8008f58 <_strtod_l+0x188>
 8008f56:	e0cb      	b.n	80090f0 <_strtod_l+0x320>
 8008f58:	9b06      	ldr	r3, [sp, #24]
 8008f5a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008f5c:	4303      	orrs	r3, r0
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	428b      	cmp	r3, r1
 8008f62:	d08c      	beq.n	8008e7e <_strtod_l+0xae>
 8008f64:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f66:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f68:	3301      	adds	r3, #1
 8008f6a:	931d      	str	r3, [sp, #116]	@ 0x74
 8008f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f6e:	785b      	ldrb	r3, [r3, #1]
 8008f70:	2b2b      	cmp	r3, #43	@ 0x2b
 8008f72:	d07b      	beq.n	800906c <_strtod_l+0x29c>
 8008f74:	000c      	movs	r4, r1
 8008f76:	2b2d      	cmp	r3, #45	@ 0x2d
 8008f78:	d17e      	bne.n	8009078 <_strtod_l+0x2a8>
 8008f7a:	2401      	movs	r4, #1
 8008f7c:	e077      	b.n	800906e <_strtod_l+0x29e>
 8008f7e:	9908      	ldr	r1, [sp, #32]
 8008f80:	2908      	cmp	r1, #8
 8008f82:	dc09      	bgt.n	8008f98 <_strtod_l+0x1c8>
 8008f84:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008f86:	4351      	muls	r1, r2
 8008f88:	185b      	adds	r3, r3, r1
 8008f8a:	930d      	str	r3, [sp, #52]	@ 0x34
 8008f8c:	9b08      	ldr	r3, [sp, #32]
 8008f8e:	3001      	adds	r0, #1
 8008f90:	3301      	adds	r3, #1
 8008f92:	9308      	str	r3, [sp, #32]
 8008f94:	901d      	str	r0, [sp, #116]	@ 0x74
 8008f96:	e7c3      	b.n	8008f20 <_strtod_l+0x150>
 8008f98:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8008f9a:	4355      	muls	r5, r2
 8008f9c:	195b      	adds	r3, r3, r5
 8008f9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008fa0:	e7f4      	b.n	8008f8c <_strtod_l+0x1bc>
 8008fa2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008fa4:	1c5a      	adds	r2, r3, #1
 8008fa6:	921d      	str	r2, [sp, #116]	@ 0x74
 8008fa8:	9a08      	ldr	r2, [sp, #32]
 8008faa:	785b      	ldrb	r3, [r3, #1]
 8008fac:	2a00      	cmp	r2, #0
 8008fae:	d03e      	beq.n	800902e <_strtod_l+0x25e>
 8008fb0:	900e      	str	r0, [sp, #56]	@ 0x38
 8008fb2:	9206      	str	r2, [sp, #24]
 8008fb4:	001a      	movs	r2, r3
 8008fb6:	3a30      	subs	r2, #48	@ 0x30
 8008fb8:	2a09      	cmp	r2, #9
 8008fba:	d912      	bls.n	8008fe2 <_strtod_l+0x212>
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	4694      	mov	ip, r2
 8008fc0:	e7c1      	b.n	8008f46 <_strtod_l+0x176>
 8008fc2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	1c5a      	adds	r2, r3, #1
 8008fc8:	921d      	str	r2, [sp, #116]	@ 0x74
 8008fca:	785b      	ldrb	r3, [r3, #1]
 8008fcc:	2b30      	cmp	r3, #48	@ 0x30
 8008fce:	d0f8      	beq.n	8008fc2 <_strtod_l+0x1f2>
 8008fd0:	001a      	movs	r2, r3
 8008fd2:	3a31      	subs	r2, #49	@ 0x31
 8008fd4:	2a08      	cmp	r2, #8
 8008fd6:	d844      	bhi.n	8009062 <_strtod_l+0x292>
 8008fd8:	900e      	str	r0, [sp, #56]	@ 0x38
 8008fda:	2000      	movs	r0, #0
 8008fdc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008fde:	9006      	str	r0, [sp, #24]
 8008fe0:	9213      	str	r2, [sp, #76]	@ 0x4c
 8008fe2:	001c      	movs	r4, r3
 8008fe4:	1c42      	adds	r2, r0, #1
 8008fe6:	3c30      	subs	r4, #48	@ 0x30
 8008fe8:	2b30      	cmp	r3, #48	@ 0x30
 8008fea:	d01a      	beq.n	8009022 <_strtod_l+0x252>
 8008fec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fee:	9906      	ldr	r1, [sp, #24]
 8008ff0:	189b      	adds	r3, r3, r2
 8008ff2:	930e      	str	r3, [sp, #56]	@ 0x38
 8008ff4:	230a      	movs	r3, #10
 8008ff6:	469c      	mov	ip, r3
 8008ff8:	9d06      	ldr	r5, [sp, #24]
 8008ffa:	1c4b      	adds	r3, r1, #1
 8008ffc:	1b5d      	subs	r5, r3, r5
 8008ffe:	42aa      	cmp	r2, r5
 8009000:	dc17      	bgt.n	8009032 <_strtod_l+0x262>
 8009002:	43c3      	mvns	r3, r0
 8009004:	9a06      	ldr	r2, [sp, #24]
 8009006:	17db      	asrs	r3, r3, #31
 8009008:	4003      	ands	r3, r0
 800900a:	18d1      	adds	r1, r2, r3
 800900c:	3201      	adds	r2, #1
 800900e:	18d3      	adds	r3, r2, r3
 8009010:	9306      	str	r3, [sp, #24]
 8009012:	2908      	cmp	r1, #8
 8009014:	dc1c      	bgt.n	8009050 <_strtod_l+0x280>
 8009016:	230a      	movs	r3, #10
 8009018:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800901a:	4353      	muls	r3, r2
 800901c:	2200      	movs	r2, #0
 800901e:	18e3      	adds	r3, r4, r3
 8009020:	930d      	str	r3, [sp, #52]	@ 0x34
 8009022:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009024:	0010      	movs	r0, r2
 8009026:	1c59      	adds	r1, r3, #1
 8009028:	911d      	str	r1, [sp, #116]	@ 0x74
 800902a:	785b      	ldrb	r3, [r3, #1]
 800902c:	e7c2      	b.n	8008fb4 <_strtod_l+0x1e4>
 800902e:	9808      	ldr	r0, [sp, #32]
 8009030:	e7cc      	b.n	8008fcc <_strtod_l+0x1fc>
 8009032:	2908      	cmp	r1, #8
 8009034:	dc05      	bgt.n	8009042 <_strtod_l+0x272>
 8009036:	4665      	mov	r5, ip
 8009038:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800903a:	4369      	muls	r1, r5
 800903c:	910d      	str	r1, [sp, #52]	@ 0x34
 800903e:	0019      	movs	r1, r3
 8009040:	e7da      	b.n	8008ff8 <_strtod_l+0x228>
 8009042:	2b10      	cmp	r3, #16
 8009044:	dcfb      	bgt.n	800903e <_strtod_l+0x26e>
 8009046:	4661      	mov	r1, ip
 8009048:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800904a:	434d      	muls	r5, r1
 800904c:	9510      	str	r5, [sp, #64]	@ 0x40
 800904e:	e7f6      	b.n	800903e <_strtod_l+0x26e>
 8009050:	2200      	movs	r2, #0
 8009052:	290f      	cmp	r1, #15
 8009054:	dce5      	bgt.n	8009022 <_strtod_l+0x252>
 8009056:	230a      	movs	r3, #10
 8009058:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800905a:	435d      	muls	r5, r3
 800905c:	1963      	adds	r3, r4, r5
 800905e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009060:	e7df      	b.n	8009022 <_strtod_l+0x252>
 8009062:	2200      	movs	r2, #0
 8009064:	920e      	str	r2, [sp, #56]	@ 0x38
 8009066:	9206      	str	r2, [sp, #24]
 8009068:	3201      	adds	r2, #1
 800906a:	e7a8      	b.n	8008fbe <_strtod_l+0x1ee>
 800906c:	2400      	movs	r4, #0
 800906e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009070:	3302      	adds	r3, #2
 8009072:	931d      	str	r3, [sp, #116]	@ 0x74
 8009074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009076:	789b      	ldrb	r3, [r3, #2]
 8009078:	001a      	movs	r2, r3
 800907a:	3a30      	subs	r2, #48	@ 0x30
 800907c:	2a09      	cmp	r2, #9
 800907e:	d913      	bls.n	80090a8 <_strtod_l+0x2d8>
 8009080:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009082:	921d      	str	r2, [sp, #116]	@ 0x74
 8009084:	2200      	movs	r2, #0
 8009086:	e032      	b.n	80090ee <_strtod_l+0x31e>
 8009088:	0800b0dc 	.word	0x0800b0dc
 800908c:	7ff00000 	.word	0x7ff00000
 8009090:	ffefffff 	.word	0xffefffff
 8009094:	00000433 	.word	0x00000433
 8009098:	7fffffff 	.word	0x7fffffff
 800909c:	0800af0f 	.word	0x0800af0f
 80090a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80090a2:	1c5a      	adds	r2, r3, #1
 80090a4:	921d      	str	r2, [sp, #116]	@ 0x74
 80090a6:	785b      	ldrb	r3, [r3, #1]
 80090a8:	2b30      	cmp	r3, #48	@ 0x30
 80090aa:	d0f9      	beq.n	80090a0 <_strtod_l+0x2d0>
 80090ac:	2200      	movs	r2, #0
 80090ae:	9207      	str	r2, [sp, #28]
 80090b0:	001a      	movs	r2, r3
 80090b2:	3a31      	subs	r2, #49	@ 0x31
 80090b4:	2a08      	cmp	r2, #8
 80090b6:	d81b      	bhi.n	80090f0 <_strtod_l+0x320>
 80090b8:	3b30      	subs	r3, #48	@ 0x30
 80090ba:	001a      	movs	r2, r3
 80090bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80090be:	9307      	str	r3, [sp, #28]
 80090c0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80090c2:	1c59      	adds	r1, r3, #1
 80090c4:	911d      	str	r1, [sp, #116]	@ 0x74
 80090c6:	785b      	ldrb	r3, [r3, #1]
 80090c8:	001d      	movs	r5, r3
 80090ca:	3d30      	subs	r5, #48	@ 0x30
 80090cc:	2d09      	cmp	r5, #9
 80090ce:	d93a      	bls.n	8009146 <_strtod_l+0x376>
 80090d0:	9d07      	ldr	r5, [sp, #28]
 80090d2:	1b49      	subs	r1, r1, r5
 80090d4:	000d      	movs	r5, r1
 80090d6:	49b3      	ldr	r1, [pc, #716]	@ (80093a4 <_strtod_l+0x5d4>)
 80090d8:	9107      	str	r1, [sp, #28]
 80090da:	2d08      	cmp	r5, #8
 80090dc:	dc03      	bgt.n	80090e6 <_strtod_l+0x316>
 80090de:	9207      	str	r2, [sp, #28]
 80090e0:	428a      	cmp	r2, r1
 80090e2:	dd00      	ble.n	80090e6 <_strtod_l+0x316>
 80090e4:	9107      	str	r1, [sp, #28]
 80090e6:	2c00      	cmp	r4, #0
 80090e8:	d002      	beq.n	80090f0 <_strtod_l+0x320>
 80090ea:	9a07      	ldr	r2, [sp, #28]
 80090ec:	4252      	negs	r2, r2
 80090ee:	9207      	str	r2, [sp, #28]
 80090f0:	9a06      	ldr	r2, [sp, #24]
 80090f2:	2a00      	cmp	r2, #0
 80090f4:	d14b      	bne.n	800918e <_strtod_l+0x3be>
 80090f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80090f8:	4310      	orrs	r0, r2
 80090fa:	d000      	beq.n	80090fe <_strtod_l+0x32e>
 80090fc:	e6a3      	b.n	8008e46 <_strtod_l+0x76>
 80090fe:	4662      	mov	r2, ip
 8009100:	2a00      	cmp	r2, #0
 8009102:	d000      	beq.n	8009106 <_strtod_l+0x336>
 8009104:	e6bb      	b.n	8008e7e <_strtod_l+0xae>
 8009106:	2b69      	cmp	r3, #105	@ 0x69
 8009108:	d025      	beq.n	8009156 <_strtod_l+0x386>
 800910a:	dc21      	bgt.n	8009150 <_strtod_l+0x380>
 800910c:	2b49      	cmp	r3, #73	@ 0x49
 800910e:	d022      	beq.n	8009156 <_strtod_l+0x386>
 8009110:	2b4e      	cmp	r3, #78	@ 0x4e
 8009112:	d000      	beq.n	8009116 <_strtod_l+0x346>
 8009114:	e6b3      	b.n	8008e7e <_strtod_l+0xae>
 8009116:	49a4      	ldr	r1, [pc, #656]	@ (80093a8 <_strtod_l+0x5d8>)
 8009118:	a81d      	add	r0, sp, #116	@ 0x74
 800911a:	f001 fa2b 	bl	800a574 <__match>
 800911e:	2800      	cmp	r0, #0
 8009120:	d100      	bne.n	8009124 <_strtod_l+0x354>
 8009122:	e6ac      	b.n	8008e7e <_strtod_l+0xae>
 8009124:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	2b28      	cmp	r3, #40	@ 0x28
 800912a:	d12a      	bne.n	8009182 <_strtod_l+0x3b2>
 800912c:	499f      	ldr	r1, [pc, #636]	@ (80093ac <_strtod_l+0x5dc>)
 800912e:	aa20      	add	r2, sp, #128	@ 0x80
 8009130:	a81d      	add	r0, sp, #116	@ 0x74
 8009132:	f001 fa33 	bl	800a59c <__hexnan>
 8009136:	2805      	cmp	r0, #5
 8009138:	d123      	bne.n	8009182 <_strtod_l+0x3b2>
 800913a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800913c:	4a9c      	ldr	r2, [pc, #624]	@ (80093b0 <_strtod_l+0x5e0>)
 800913e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009140:	431a      	orrs	r2, r3
 8009142:	0017      	movs	r7, r2
 8009144:	e67f      	b.n	8008e46 <_strtod_l+0x76>
 8009146:	210a      	movs	r1, #10
 8009148:	434a      	muls	r2, r1
 800914a:	18d2      	adds	r2, r2, r3
 800914c:	3a30      	subs	r2, #48	@ 0x30
 800914e:	e7b7      	b.n	80090c0 <_strtod_l+0x2f0>
 8009150:	2b6e      	cmp	r3, #110	@ 0x6e
 8009152:	d0e0      	beq.n	8009116 <_strtod_l+0x346>
 8009154:	e693      	b.n	8008e7e <_strtod_l+0xae>
 8009156:	4997      	ldr	r1, [pc, #604]	@ (80093b4 <_strtod_l+0x5e4>)
 8009158:	a81d      	add	r0, sp, #116	@ 0x74
 800915a:	f001 fa0b 	bl	800a574 <__match>
 800915e:	2800      	cmp	r0, #0
 8009160:	d100      	bne.n	8009164 <_strtod_l+0x394>
 8009162:	e68c      	b.n	8008e7e <_strtod_l+0xae>
 8009164:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009166:	4994      	ldr	r1, [pc, #592]	@ (80093b8 <_strtod_l+0x5e8>)
 8009168:	3b01      	subs	r3, #1
 800916a:	a81d      	add	r0, sp, #116	@ 0x74
 800916c:	931d      	str	r3, [sp, #116]	@ 0x74
 800916e:	f001 fa01 	bl	800a574 <__match>
 8009172:	2800      	cmp	r0, #0
 8009174:	d102      	bne.n	800917c <_strtod_l+0x3ac>
 8009176:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009178:	3301      	adds	r3, #1
 800917a:	931d      	str	r3, [sp, #116]	@ 0x74
 800917c:	2600      	movs	r6, #0
 800917e:	4f8c      	ldr	r7, [pc, #560]	@ (80093b0 <_strtod_l+0x5e0>)
 8009180:	e661      	b.n	8008e46 <_strtod_l+0x76>
 8009182:	488e      	ldr	r0, [pc, #568]	@ (80093bc <_strtod_l+0x5ec>)
 8009184:	f000 ff06 	bl	8009f94 <nan>
 8009188:	0006      	movs	r6, r0
 800918a:	000f      	movs	r7, r1
 800918c:	e65b      	b.n	8008e46 <_strtod_l+0x76>
 800918e:	9b07      	ldr	r3, [sp, #28]
 8009190:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009192:	1a9b      	subs	r3, r3, r2
 8009194:	930c      	str	r3, [sp, #48]	@ 0x30
 8009196:	9b08      	ldr	r3, [sp, #32]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d101      	bne.n	80091a0 <_strtod_l+0x3d0>
 800919c:	9b06      	ldr	r3, [sp, #24]
 800919e:	9308      	str	r3, [sp, #32]
 80091a0:	9c06      	ldr	r4, [sp, #24]
 80091a2:	2c10      	cmp	r4, #16
 80091a4:	dd00      	ble.n	80091a8 <_strtod_l+0x3d8>
 80091a6:	2410      	movs	r4, #16
 80091a8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80091aa:	f7f9 fc03 	bl	80029b4 <__aeabi_ui2d>
 80091ae:	9b06      	ldr	r3, [sp, #24]
 80091b0:	0006      	movs	r6, r0
 80091b2:	000f      	movs	r7, r1
 80091b4:	2b09      	cmp	r3, #9
 80091b6:	dc13      	bgt.n	80091e0 <_strtod_l+0x410>
 80091b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d100      	bne.n	80091c0 <_strtod_l+0x3f0>
 80091be:	e642      	b.n	8008e46 <_strtod_l+0x76>
 80091c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	dc00      	bgt.n	80091c8 <_strtod_l+0x3f8>
 80091c6:	e07e      	b.n	80092c6 <_strtod_l+0x4f6>
 80091c8:	2b16      	cmp	r3, #22
 80091ca:	dc63      	bgt.n	8009294 <_strtod_l+0x4c4>
 80091cc:	497c      	ldr	r1, [pc, #496]	@ (80093c0 <_strtod_l+0x5f0>)
 80091ce:	00db      	lsls	r3, r3, #3
 80091d0:	18c9      	adds	r1, r1, r3
 80091d2:	0032      	movs	r2, r6
 80091d4:	6808      	ldr	r0, [r1, #0]
 80091d6:	6849      	ldr	r1, [r1, #4]
 80091d8:	003b      	movs	r3, r7
 80091da:	f7f8 fc6f 	bl	8001abc <__aeabi_dmul>
 80091de:	e7d3      	b.n	8009188 <_strtod_l+0x3b8>
 80091e0:	0022      	movs	r2, r4
 80091e2:	4b77      	ldr	r3, [pc, #476]	@ (80093c0 <_strtod_l+0x5f0>)
 80091e4:	3a09      	subs	r2, #9
 80091e6:	00d2      	lsls	r2, r2, #3
 80091e8:	189b      	adds	r3, r3, r2
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	f7f8 fc65 	bl	8001abc <__aeabi_dmul>
 80091f2:	0006      	movs	r6, r0
 80091f4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80091f6:	000f      	movs	r7, r1
 80091f8:	f7f9 fbdc 	bl	80029b4 <__aeabi_ui2d>
 80091fc:	000b      	movs	r3, r1
 80091fe:	0002      	movs	r2, r0
 8009200:	0039      	movs	r1, r7
 8009202:	0030      	movs	r0, r6
 8009204:	f7f7 fc5a 	bl	8000abc <__aeabi_dadd>
 8009208:	9b06      	ldr	r3, [sp, #24]
 800920a:	0006      	movs	r6, r0
 800920c:	000f      	movs	r7, r1
 800920e:	2b0f      	cmp	r3, #15
 8009210:	ddd2      	ble.n	80091b8 <_strtod_l+0x3e8>
 8009212:	9b06      	ldr	r3, [sp, #24]
 8009214:	1b1c      	subs	r4, r3, r4
 8009216:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009218:	18e4      	adds	r4, r4, r3
 800921a:	2c00      	cmp	r4, #0
 800921c:	dc00      	bgt.n	8009220 <_strtod_l+0x450>
 800921e:	e09b      	b.n	8009358 <_strtod_l+0x588>
 8009220:	220f      	movs	r2, #15
 8009222:	0023      	movs	r3, r4
 8009224:	4013      	ands	r3, r2
 8009226:	4214      	tst	r4, r2
 8009228:	d00a      	beq.n	8009240 <_strtod_l+0x470>
 800922a:	4965      	ldr	r1, [pc, #404]	@ (80093c0 <_strtod_l+0x5f0>)
 800922c:	00db      	lsls	r3, r3, #3
 800922e:	18c9      	adds	r1, r1, r3
 8009230:	0032      	movs	r2, r6
 8009232:	6808      	ldr	r0, [r1, #0]
 8009234:	6849      	ldr	r1, [r1, #4]
 8009236:	003b      	movs	r3, r7
 8009238:	f7f8 fc40 	bl	8001abc <__aeabi_dmul>
 800923c:	0006      	movs	r6, r0
 800923e:	000f      	movs	r7, r1
 8009240:	230f      	movs	r3, #15
 8009242:	439c      	bics	r4, r3
 8009244:	d073      	beq.n	800932e <_strtod_l+0x55e>
 8009246:	3326      	adds	r3, #38	@ 0x26
 8009248:	33ff      	adds	r3, #255	@ 0xff
 800924a:	429c      	cmp	r4, r3
 800924c:	dd4b      	ble.n	80092e6 <_strtod_l+0x516>
 800924e:	2300      	movs	r3, #0
 8009250:	9306      	str	r3, [sp, #24]
 8009252:	9307      	str	r3, [sp, #28]
 8009254:	930d      	str	r3, [sp, #52]	@ 0x34
 8009256:	9308      	str	r3, [sp, #32]
 8009258:	2322      	movs	r3, #34	@ 0x22
 800925a:	2600      	movs	r6, #0
 800925c:	9a05      	ldr	r2, [sp, #20]
 800925e:	4f54      	ldr	r7, [pc, #336]	@ (80093b0 <_strtod_l+0x5e0>)
 8009260:	6013      	str	r3, [r2, #0]
 8009262:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009264:	42b3      	cmp	r3, r6
 8009266:	d100      	bne.n	800926a <_strtod_l+0x49a>
 8009268:	e5ed      	b.n	8008e46 <_strtod_l+0x76>
 800926a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800926c:	9805      	ldr	r0, [sp, #20]
 800926e:	f7ff f919 	bl	80084a4 <_Bfree>
 8009272:	9908      	ldr	r1, [sp, #32]
 8009274:	9805      	ldr	r0, [sp, #20]
 8009276:	f7ff f915 	bl	80084a4 <_Bfree>
 800927a:	9907      	ldr	r1, [sp, #28]
 800927c:	9805      	ldr	r0, [sp, #20]
 800927e:	f7ff f911 	bl	80084a4 <_Bfree>
 8009282:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009284:	9805      	ldr	r0, [sp, #20]
 8009286:	f7ff f90d 	bl	80084a4 <_Bfree>
 800928a:	9906      	ldr	r1, [sp, #24]
 800928c:	9805      	ldr	r0, [sp, #20]
 800928e:	f7ff f909 	bl	80084a4 <_Bfree>
 8009292:	e5d8      	b.n	8008e46 <_strtod_l+0x76>
 8009294:	2325      	movs	r3, #37	@ 0x25
 8009296:	9a06      	ldr	r2, [sp, #24]
 8009298:	1a9b      	subs	r3, r3, r2
 800929a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800929c:	4293      	cmp	r3, r2
 800929e:	dbb8      	blt.n	8009212 <_strtod_l+0x442>
 80092a0:	240f      	movs	r4, #15
 80092a2:	9b06      	ldr	r3, [sp, #24]
 80092a4:	4d46      	ldr	r5, [pc, #280]	@ (80093c0 <_strtod_l+0x5f0>)
 80092a6:	1ae4      	subs	r4, r4, r3
 80092a8:	00e1      	lsls	r1, r4, #3
 80092aa:	1869      	adds	r1, r5, r1
 80092ac:	0032      	movs	r2, r6
 80092ae:	6808      	ldr	r0, [r1, #0]
 80092b0:	6849      	ldr	r1, [r1, #4]
 80092b2:	003b      	movs	r3, r7
 80092b4:	f7f8 fc02 	bl	8001abc <__aeabi_dmul>
 80092b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80092ba:	1b1c      	subs	r4, r3, r4
 80092bc:	00e4      	lsls	r4, r4, #3
 80092be:	192d      	adds	r5, r5, r4
 80092c0:	682a      	ldr	r2, [r5, #0]
 80092c2:	686b      	ldr	r3, [r5, #4]
 80092c4:	e789      	b.n	80091da <_strtod_l+0x40a>
 80092c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80092c8:	3316      	adds	r3, #22
 80092ca:	dba2      	blt.n	8009212 <_strtod_l+0x442>
 80092cc:	9907      	ldr	r1, [sp, #28]
 80092ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092d0:	4b3b      	ldr	r3, [pc, #236]	@ (80093c0 <_strtod_l+0x5f0>)
 80092d2:	1a52      	subs	r2, r2, r1
 80092d4:	00d2      	lsls	r2, r2, #3
 80092d6:	189b      	adds	r3, r3, r2
 80092d8:	0030      	movs	r0, r6
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	0039      	movs	r1, r7
 80092e0:	f7f7 ffb2 	bl	8001248 <__aeabi_ddiv>
 80092e4:	e750      	b.n	8009188 <_strtod_l+0x3b8>
 80092e6:	2300      	movs	r3, #0
 80092e8:	0030      	movs	r0, r6
 80092ea:	0039      	movs	r1, r7
 80092ec:	4d35      	ldr	r5, [pc, #212]	@ (80093c4 <_strtod_l+0x5f4>)
 80092ee:	1124      	asrs	r4, r4, #4
 80092f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80092f2:	2c01      	cmp	r4, #1
 80092f4:	dc1e      	bgt.n	8009334 <_strtod_l+0x564>
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d001      	beq.n	80092fe <_strtod_l+0x52e>
 80092fa:	0006      	movs	r6, r0
 80092fc:	000f      	movs	r7, r1
 80092fe:	4b32      	ldr	r3, [pc, #200]	@ (80093c8 <_strtod_l+0x5f8>)
 8009300:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009302:	18ff      	adds	r7, r7, r3
 8009304:	4b2f      	ldr	r3, [pc, #188]	@ (80093c4 <_strtod_l+0x5f4>)
 8009306:	00d5      	lsls	r5, r2, #3
 8009308:	195d      	adds	r5, r3, r5
 800930a:	0032      	movs	r2, r6
 800930c:	6828      	ldr	r0, [r5, #0]
 800930e:	6869      	ldr	r1, [r5, #4]
 8009310:	003b      	movs	r3, r7
 8009312:	f7f8 fbd3 	bl	8001abc <__aeabi_dmul>
 8009316:	4b26      	ldr	r3, [pc, #152]	@ (80093b0 <_strtod_l+0x5e0>)
 8009318:	4a2c      	ldr	r2, [pc, #176]	@ (80093cc <_strtod_l+0x5fc>)
 800931a:	0006      	movs	r6, r0
 800931c:	400b      	ands	r3, r1
 800931e:	4293      	cmp	r3, r2
 8009320:	d895      	bhi.n	800924e <_strtod_l+0x47e>
 8009322:	4a2b      	ldr	r2, [pc, #172]	@ (80093d0 <_strtod_l+0x600>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d913      	bls.n	8009350 <_strtod_l+0x580>
 8009328:	2601      	movs	r6, #1
 800932a:	4f2a      	ldr	r7, [pc, #168]	@ (80093d4 <_strtod_l+0x604>)
 800932c:	4276      	negs	r6, r6
 800932e:	2300      	movs	r3, #0
 8009330:	9309      	str	r3, [sp, #36]	@ 0x24
 8009332:	e086      	b.n	8009442 <_strtod_l+0x672>
 8009334:	2201      	movs	r2, #1
 8009336:	4214      	tst	r4, r2
 8009338:	d004      	beq.n	8009344 <_strtod_l+0x574>
 800933a:	682a      	ldr	r2, [r5, #0]
 800933c:	686b      	ldr	r3, [r5, #4]
 800933e:	f7f8 fbbd 	bl	8001abc <__aeabi_dmul>
 8009342:	2301      	movs	r3, #1
 8009344:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009346:	1064      	asrs	r4, r4, #1
 8009348:	3201      	adds	r2, #1
 800934a:	9209      	str	r2, [sp, #36]	@ 0x24
 800934c:	3508      	adds	r5, #8
 800934e:	e7d0      	b.n	80092f2 <_strtod_l+0x522>
 8009350:	23d4      	movs	r3, #212	@ 0xd4
 8009352:	049b      	lsls	r3, r3, #18
 8009354:	18cf      	adds	r7, r1, r3
 8009356:	e7ea      	b.n	800932e <_strtod_l+0x55e>
 8009358:	2c00      	cmp	r4, #0
 800935a:	d0e8      	beq.n	800932e <_strtod_l+0x55e>
 800935c:	4264      	negs	r4, r4
 800935e:	230f      	movs	r3, #15
 8009360:	0022      	movs	r2, r4
 8009362:	401a      	ands	r2, r3
 8009364:	421c      	tst	r4, r3
 8009366:	d00a      	beq.n	800937e <_strtod_l+0x5ae>
 8009368:	4b15      	ldr	r3, [pc, #84]	@ (80093c0 <_strtod_l+0x5f0>)
 800936a:	00d2      	lsls	r2, r2, #3
 800936c:	189b      	adds	r3, r3, r2
 800936e:	0030      	movs	r0, r6
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	0039      	movs	r1, r7
 8009376:	f7f7 ff67 	bl	8001248 <__aeabi_ddiv>
 800937a:	0006      	movs	r6, r0
 800937c:	000f      	movs	r7, r1
 800937e:	1124      	asrs	r4, r4, #4
 8009380:	d0d5      	beq.n	800932e <_strtod_l+0x55e>
 8009382:	2c1f      	cmp	r4, #31
 8009384:	dd28      	ble.n	80093d8 <_strtod_l+0x608>
 8009386:	2300      	movs	r3, #0
 8009388:	9306      	str	r3, [sp, #24]
 800938a:	9307      	str	r3, [sp, #28]
 800938c:	930d      	str	r3, [sp, #52]	@ 0x34
 800938e:	9308      	str	r3, [sp, #32]
 8009390:	2322      	movs	r3, #34	@ 0x22
 8009392:	9a05      	ldr	r2, [sp, #20]
 8009394:	2600      	movs	r6, #0
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800939a:	2700      	movs	r7, #0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d000      	beq.n	80093a2 <_strtod_l+0x5d2>
 80093a0:	e763      	b.n	800926a <_strtod_l+0x49a>
 80093a2:	e550      	b.n	8008e46 <_strtod_l+0x76>
 80093a4:	00004e1f 	.word	0x00004e1f
 80093a8:	0800adfd 	.word	0x0800adfd
 80093ac:	0800b0c8 	.word	0x0800b0c8
 80093b0:	7ff00000 	.word	0x7ff00000
 80093b4:	0800adf5 	.word	0x0800adf5
 80093b8:	0800ae2c 	.word	0x0800ae2c
 80093bc:	0800af65 	.word	0x0800af65
 80093c0:	0800b000 	.word	0x0800b000
 80093c4:	0800afd8 	.word	0x0800afd8
 80093c8:	fcb00000 	.word	0xfcb00000
 80093cc:	7ca00000 	.word	0x7ca00000
 80093d0:	7c900000 	.word	0x7c900000
 80093d4:	7fefffff 	.word	0x7fefffff
 80093d8:	2310      	movs	r3, #16
 80093da:	0022      	movs	r2, r4
 80093dc:	401a      	ands	r2, r3
 80093de:	9209      	str	r2, [sp, #36]	@ 0x24
 80093e0:	421c      	tst	r4, r3
 80093e2:	d001      	beq.n	80093e8 <_strtod_l+0x618>
 80093e4:	335a      	adds	r3, #90	@ 0x5a
 80093e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e8:	0030      	movs	r0, r6
 80093ea:	0039      	movs	r1, r7
 80093ec:	2300      	movs	r3, #0
 80093ee:	4dc0      	ldr	r5, [pc, #768]	@ (80096f0 <_strtod_l+0x920>)
 80093f0:	2201      	movs	r2, #1
 80093f2:	4214      	tst	r4, r2
 80093f4:	d004      	beq.n	8009400 <_strtod_l+0x630>
 80093f6:	682a      	ldr	r2, [r5, #0]
 80093f8:	686b      	ldr	r3, [r5, #4]
 80093fa:	f7f8 fb5f 	bl	8001abc <__aeabi_dmul>
 80093fe:	2301      	movs	r3, #1
 8009400:	1064      	asrs	r4, r4, #1
 8009402:	3508      	adds	r5, #8
 8009404:	2c00      	cmp	r4, #0
 8009406:	d1f3      	bne.n	80093f0 <_strtod_l+0x620>
 8009408:	2b00      	cmp	r3, #0
 800940a:	d001      	beq.n	8009410 <_strtod_l+0x640>
 800940c:	0006      	movs	r6, r0
 800940e:	000f      	movs	r7, r1
 8009410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00d      	beq.n	8009432 <_strtod_l+0x662>
 8009416:	236b      	movs	r3, #107	@ 0x6b
 8009418:	007a      	lsls	r2, r7, #1
 800941a:	0d52      	lsrs	r2, r2, #21
 800941c:	0039      	movs	r1, r7
 800941e:	1a9b      	subs	r3, r3, r2
 8009420:	2b00      	cmp	r3, #0
 8009422:	dd06      	ble.n	8009432 <_strtod_l+0x662>
 8009424:	2b1f      	cmp	r3, #31
 8009426:	dd5c      	ble.n	80094e2 <_strtod_l+0x712>
 8009428:	2600      	movs	r6, #0
 800942a:	2b34      	cmp	r3, #52	@ 0x34
 800942c:	dd52      	ble.n	80094d4 <_strtod_l+0x704>
 800942e:	27dc      	movs	r7, #220	@ 0xdc
 8009430:	04bf      	lsls	r7, r7, #18
 8009432:	2200      	movs	r2, #0
 8009434:	2300      	movs	r3, #0
 8009436:	0030      	movs	r0, r6
 8009438:	0039      	movs	r1, r7
 800943a:	f7f7 f807 	bl	800044c <__aeabi_dcmpeq>
 800943e:	2800      	cmp	r0, #0
 8009440:	d1a1      	bne.n	8009386 <_strtod_l+0x5b6>
 8009442:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009444:	9a08      	ldr	r2, [sp, #32]
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800944a:	9b06      	ldr	r3, [sp, #24]
 800944c:	9805      	ldr	r0, [sp, #20]
 800944e:	f7ff f891 	bl	8008574 <__s2b>
 8009452:	900d      	str	r0, [sp, #52]	@ 0x34
 8009454:	2800      	cmp	r0, #0
 8009456:	d100      	bne.n	800945a <_strtod_l+0x68a>
 8009458:	e6f9      	b.n	800924e <_strtod_l+0x47e>
 800945a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800945c:	9907      	ldr	r1, [sp, #28]
 800945e:	43db      	mvns	r3, r3
 8009460:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009462:	17db      	asrs	r3, r3, #31
 8009464:	1a52      	subs	r2, r2, r1
 8009466:	9214      	str	r2, [sp, #80]	@ 0x50
 8009468:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800946a:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800946c:	17d2      	asrs	r2, r2, #31
 800946e:	4011      	ands	r1, r2
 8009470:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009472:	9114      	str	r1, [sp, #80]	@ 0x50
 8009474:	401a      	ands	r2, r3
 8009476:	2300      	movs	r3, #0
 8009478:	921a      	str	r2, [sp, #104]	@ 0x68
 800947a:	9306      	str	r3, [sp, #24]
 800947c:	9307      	str	r3, [sp, #28]
 800947e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009480:	9805      	ldr	r0, [sp, #20]
 8009482:	6859      	ldr	r1, [r3, #4]
 8009484:	f7fe ffca 	bl	800841c <_Balloc>
 8009488:	9008      	str	r0, [sp, #32]
 800948a:	2800      	cmp	r0, #0
 800948c:	d100      	bne.n	8009490 <_strtod_l+0x6c0>
 800948e:	e6e3      	b.n	8009258 <_strtod_l+0x488>
 8009490:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009492:	300c      	adds	r0, #12
 8009494:	0019      	movs	r1, r3
 8009496:	691a      	ldr	r2, [r3, #16]
 8009498:	310c      	adds	r1, #12
 800949a:	3202      	adds	r2, #2
 800949c:	0092      	lsls	r2, r2, #2
 800949e:	f000 fd6f 	bl	8009f80 <memcpy>
 80094a2:	ab20      	add	r3, sp, #128	@ 0x80
 80094a4:	9301      	str	r3, [sp, #4]
 80094a6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	0032      	movs	r2, r6
 80094ac:	003b      	movs	r3, r7
 80094ae:	9805      	ldr	r0, [sp, #20]
 80094b0:	9610      	str	r6, [sp, #64]	@ 0x40
 80094b2:	9711      	str	r7, [sp, #68]	@ 0x44
 80094b4:	f7ff fba6 	bl	8008c04 <__d2b>
 80094b8:	901e      	str	r0, [sp, #120]	@ 0x78
 80094ba:	2800      	cmp	r0, #0
 80094bc:	d100      	bne.n	80094c0 <_strtod_l+0x6f0>
 80094be:	e6cb      	b.n	8009258 <_strtod_l+0x488>
 80094c0:	2101      	movs	r1, #1
 80094c2:	9805      	ldr	r0, [sp, #20]
 80094c4:	f7ff f8f2 	bl	80086ac <__i2b>
 80094c8:	9007      	str	r0, [sp, #28]
 80094ca:	2800      	cmp	r0, #0
 80094cc:	d10e      	bne.n	80094ec <_strtod_l+0x71c>
 80094ce:	2300      	movs	r3, #0
 80094d0:	9307      	str	r3, [sp, #28]
 80094d2:	e6c1      	b.n	8009258 <_strtod_l+0x488>
 80094d4:	234b      	movs	r3, #75	@ 0x4b
 80094d6:	1a9a      	subs	r2, r3, r2
 80094d8:	3b4c      	subs	r3, #76	@ 0x4c
 80094da:	4093      	lsls	r3, r2
 80094dc:	4019      	ands	r1, r3
 80094de:	000f      	movs	r7, r1
 80094e0:	e7a7      	b.n	8009432 <_strtod_l+0x662>
 80094e2:	2201      	movs	r2, #1
 80094e4:	4252      	negs	r2, r2
 80094e6:	409a      	lsls	r2, r3
 80094e8:	4016      	ands	r6, r2
 80094ea:	e7a2      	b.n	8009432 <_strtod_l+0x662>
 80094ec:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80094ee:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80094f0:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80094f2:	1ad4      	subs	r4, r2, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	db01      	blt.n	80094fc <_strtod_l+0x72c>
 80094f8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80094fa:	195d      	adds	r5, r3, r5
 80094fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80094fe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009500:	1a5b      	subs	r3, r3, r1
 8009502:	2136      	movs	r1, #54	@ 0x36
 8009504:	189b      	adds	r3, r3, r2
 8009506:	1a8a      	subs	r2, r1, r2
 8009508:	497a      	ldr	r1, [pc, #488]	@ (80096f4 <_strtod_l+0x924>)
 800950a:	2001      	movs	r0, #1
 800950c:	468c      	mov	ip, r1
 800950e:	2100      	movs	r1, #0
 8009510:	3b01      	subs	r3, #1
 8009512:	9115      	str	r1, [sp, #84]	@ 0x54
 8009514:	9016      	str	r0, [sp, #88]	@ 0x58
 8009516:	4563      	cmp	r3, ip
 8009518:	da06      	bge.n	8009528 <_strtod_l+0x758>
 800951a:	4661      	mov	r1, ip
 800951c:	1ac9      	subs	r1, r1, r3
 800951e:	1a52      	subs	r2, r2, r1
 8009520:	291f      	cmp	r1, #31
 8009522:	dc3f      	bgt.n	80095a4 <_strtod_l+0x7d4>
 8009524:	4088      	lsls	r0, r1
 8009526:	9016      	str	r0, [sp, #88]	@ 0x58
 8009528:	18ab      	adds	r3, r5, r2
 800952a:	930e      	str	r3, [sp, #56]	@ 0x38
 800952c:	18a4      	adds	r4, r4, r2
 800952e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009530:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009532:	191c      	adds	r4, r3, r4
 8009534:	002b      	movs	r3, r5
 8009536:	4295      	cmp	r5, r2
 8009538:	dd00      	ble.n	800953c <_strtod_l+0x76c>
 800953a:	0013      	movs	r3, r2
 800953c:	42a3      	cmp	r3, r4
 800953e:	dd00      	ble.n	8009542 <_strtod_l+0x772>
 8009540:	0023      	movs	r3, r4
 8009542:	2b00      	cmp	r3, #0
 8009544:	dd04      	ble.n	8009550 <_strtod_l+0x780>
 8009546:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009548:	1ae4      	subs	r4, r4, r3
 800954a:	1ad2      	subs	r2, r2, r3
 800954c:	920e      	str	r2, [sp, #56]	@ 0x38
 800954e:	1aed      	subs	r5, r5, r3
 8009550:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009552:	2b00      	cmp	r3, #0
 8009554:	dd16      	ble.n	8009584 <_strtod_l+0x7b4>
 8009556:	001a      	movs	r2, r3
 8009558:	9907      	ldr	r1, [sp, #28]
 800955a:	9805      	ldr	r0, [sp, #20]
 800955c:	f7ff f968 	bl	8008830 <__pow5mult>
 8009560:	9007      	str	r0, [sp, #28]
 8009562:	2800      	cmp	r0, #0
 8009564:	d0b3      	beq.n	80094ce <_strtod_l+0x6fe>
 8009566:	0001      	movs	r1, r0
 8009568:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800956a:	9805      	ldr	r0, [sp, #20]
 800956c:	f7ff f8b6 	bl	80086dc <__multiply>
 8009570:	9013      	str	r0, [sp, #76]	@ 0x4c
 8009572:	2800      	cmp	r0, #0
 8009574:	d100      	bne.n	8009578 <_strtod_l+0x7a8>
 8009576:	e66f      	b.n	8009258 <_strtod_l+0x488>
 8009578:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800957a:	9805      	ldr	r0, [sp, #20]
 800957c:	f7fe ff92 	bl	80084a4 <_Bfree>
 8009580:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009582:	931e      	str	r3, [sp, #120]	@ 0x78
 8009584:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009586:	2b00      	cmp	r3, #0
 8009588:	dc12      	bgt.n	80095b0 <_strtod_l+0x7e0>
 800958a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800958c:	2b00      	cmp	r3, #0
 800958e:	dd18      	ble.n	80095c2 <_strtod_l+0x7f2>
 8009590:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009592:	9908      	ldr	r1, [sp, #32]
 8009594:	9805      	ldr	r0, [sp, #20]
 8009596:	f7ff f94b 	bl	8008830 <__pow5mult>
 800959a:	9008      	str	r0, [sp, #32]
 800959c:	2800      	cmp	r0, #0
 800959e:	d110      	bne.n	80095c2 <_strtod_l+0x7f2>
 80095a0:	2300      	movs	r3, #0
 80095a2:	e658      	b.n	8009256 <_strtod_l+0x486>
 80095a4:	4954      	ldr	r1, [pc, #336]	@ (80096f8 <_strtod_l+0x928>)
 80095a6:	1acb      	subs	r3, r1, r3
 80095a8:	0001      	movs	r1, r0
 80095aa:	4099      	lsls	r1, r3
 80095ac:	9115      	str	r1, [sp, #84]	@ 0x54
 80095ae:	e7ba      	b.n	8009526 <_strtod_l+0x756>
 80095b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095b2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80095b4:	9805      	ldr	r0, [sp, #20]
 80095b6:	f7ff f997 	bl	80088e8 <__lshift>
 80095ba:	901e      	str	r0, [sp, #120]	@ 0x78
 80095bc:	2800      	cmp	r0, #0
 80095be:	d1e4      	bne.n	800958a <_strtod_l+0x7ba>
 80095c0:	e64a      	b.n	8009258 <_strtod_l+0x488>
 80095c2:	2c00      	cmp	r4, #0
 80095c4:	dd07      	ble.n	80095d6 <_strtod_l+0x806>
 80095c6:	0022      	movs	r2, r4
 80095c8:	9908      	ldr	r1, [sp, #32]
 80095ca:	9805      	ldr	r0, [sp, #20]
 80095cc:	f7ff f98c 	bl	80088e8 <__lshift>
 80095d0:	9008      	str	r0, [sp, #32]
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d0e4      	beq.n	80095a0 <_strtod_l+0x7d0>
 80095d6:	2d00      	cmp	r5, #0
 80095d8:	dd08      	ble.n	80095ec <_strtod_l+0x81c>
 80095da:	002a      	movs	r2, r5
 80095dc:	9907      	ldr	r1, [sp, #28]
 80095de:	9805      	ldr	r0, [sp, #20]
 80095e0:	f7ff f982 	bl	80088e8 <__lshift>
 80095e4:	9007      	str	r0, [sp, #28]
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d100      	bne.n	80095ec <_strtod_l+0x81c>
 80095ea:	e635      	b.n	8009258 <_strtod_l+0x488>
 80095ec:	9a08      	ldr	r2, [sp, #32]
 80095ee:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80095f0:	9805      	ldr	r0, [sp, #20]
 80095f2:	f7ff fa01 	bl	80089f8 <__mdiff>
 80095f6:	9006      	str	r0, [sp, #24]
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d100      	bne.n	80095fe <_strtod_l+0x82e>
 80095fc:	e62c      	b.n	8009258 <_strtod_l+0x488>
 80095fe:	68c3      	ldr	r3, [r0, #12]
 8009600:	9907      	ldr	r1, [sp, #28]
 8009602:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009604:	2300      	movs	r3, #0
 8009606:	60c3      	str	r3, [r0, #12]
 8009608:	f7ff f9da 	bl	80089c0 <__mcmp>
 800960c:	2800      	cmp	r0, #0
 800960e:	da3b      	bge.n	8009688 <_strtod_l+0x8b8>
 8009610:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009612:	4333      	orrs	r3, r6
 8009614:	d167      	bne.n	80096e6 <_strtod_l+0x916>
 8009616:	033b      	lsls	r3, r7, #12
 8009618:	d165      	bne.n	80096e6 <_strtod_l+0x916>
 800961a:	22d6      	movs	r2, #214	@ 0xd6
 800961c:	4b37      	ldr	r3, [pc, #220]	@ (80096fc <_strtod_l+0x92c>)
 800961e:	04d2      	lsls	r2, r2, #19
 8009620:	403b      	ands	r3, r7
 8009622:	4293      	cmp	r3, r2
 8009624:	d95f      	bls.n	80096e6 <_strtod_l+0x916>
 8009626:	9b06      	ldr	r3, [sp, #24]
 8009628:	695b      	ldr	r3, [r3, #20]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d103      	bne.n	8009636 <_strtod_l+0x866>
 800962e:	9b06      	ldr	r3, [sp, #24]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	2b01      	cmp	r3, #1
 8009634:	dd57      	ble.n	80096e6 <_strtod_l+0x916>
 8009636:	9906      	ldr	r1, [sp, #24]
 8009638:	2201      	movs	r2, #1
 800963a:	9805      	ldr	r0, [sp, #20]
 800963c:	f7ff f954 	bl	80088e8 <__lshift>
 8009640:	9907      	ldr	r1, [sp, #28]
 8009642:	9006      	str	r0, [sp, #24]
 8009644:	f7ff f9bc 	bl	80089c0 <__mcmp>
 8009648:	2800      	cmp	r0, #0
 800964a:	dd4c      	ble.n	80096e6 <_strtod_l+0x916>
 800964c:	4b2b      	ldr	r3, [pc, #172]	@ (80096fc <_strtod_l+0x92c>)
 800964e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009650:	403b      	ands	r3, r7
 8009652:	2a00      	cmp	r2, #0
 8009654:	d074      	beq.n	8009740 <_strtod_l+0x970>
 8009656:	22d6      	movs	r2, #214	@ 0xd6
 8009658:	04d2      	lsls	r2, r2, #19
 800965a:	4293      	cmp	r3, r2
 800965c:	d870      	bhi.n	8009740 <_strtod_l+0x970>
 800965e:	22dc      	movs	r2, #220	@ 0xdc
 8009660:	0492      	lsls	r2, r2, #18
 8009662:	4293      	cmp	r3, r2
 8009664:	d800      	bhi.n	8009668 <_strtod_l+0x898>
 8009666:	e693      	b.n	8009390 <_strtod_l+0x5c0>
 8009668:	0030      	movs	r0, r6
 800966a:	0039      	movs	r1, r7
 800966c:	4b24      	ldr	r3, [pc, #144]	@ (8009700 <_strtod_l+0x930>)
 800966e:	2200      	movs	r2, #0
 8009670:	f7f8 fa24 	bl	8001abc <__aeabi_dmul>
 8009674:	4b21      	ldr	r3, [pc, #132]	@ (80096fc <_strtod_l+0x92c>)
 8009676:	0006      	movs	r6, r0
 8009678:	000f      	movs	r7, r1
 800967a:	420b      	tst	r3, r1
 800967c:	d000      	beq.n	8009680 <_strtod_l+0x8b0>
 800967e:	e5f4      	b.n	800926a <_strtod_l+0x49a>
 8009680:	2322      	movs	r3, #34	@ 0x22
 8009682:	9a05      	ldr	r2, [sp, #20]
 8009684:	6013      	str	r3, [r2, #0]
 8009686:	e5f0      	b.n	800926a <_strtod_l+0x49a>
 8009688:	970e      	str	r7, [sp, #56]	@ 0x38
 800968a:	2800      	cmp	r0, #0
 800968c:	d175      	bne.n	800977a <_strtod_l+0x9aa>
 800968e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009690:	033b      	lsls	r3, r7, #12
 8009692:	0b1b      	lsrs	r3, r3, #12
 8009694:	2a00      	cmp	r2, #0
 8009696:	d039      	beq.n	800970c <_strtod_l+0x93c>
 8009698:	4a1a      	ldr	r2, [pc, #104]	@ (8009704 <_strtod_l+0x934>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d138      	bne.n	8009710 <_strtod_l+0x940>
 800969e:	2101      	movs	r1, #1
 80096a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096a2:	4249      	negs	r1, r1
 80096a4:	0032      	movs	r2, r6
 80096a6:	0008      	movs	r0, r1
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d00b      	beq.n	80096c4 <_strtod_l+0x8f4>
 80096ac:	24d4      	movs	r4, #212	@ 0xd4
 80096ae:	4b13      	ldr	r3, [pc, #76]	@ (80096fc <_strtod_l+0x92c>)
 80096b0:	0008      	movs	r0, r1
 80096b2:	403b      	ands	r3, r7
 80096b4:	04e4      	lsls	r4, r4, #19
 80096b6:	42a3      	cmp	r3, r4
 80096b8:	d804      	bhi.n	80096c4 <_strtod_l+0x8f4>
 80096ba:	306c      	adds	r0, #108	@ 0x6c
 80096bc:	0d1b      	lsrs	r3, r3, #20
 80096be:	1ac3      	subs	r3, r0, r3
 80096c0:	4099      	lsls	r1, r3
 80096c2:	0008      	movs	r0, r1
 80096c4:	4282      	cmp	r2, r0
 80096c6:	d123      	bne.n	8009710 <_strtod_l+0x940>
 80096c8:	4b0f      	ldr	r3, [pc, #60]	@ (8009708 <_strtod_l+0x938>)
 80096ca:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80096cc:	4299      	cmp	r1, r3
 80096ce:	d102      	bne.n	80096d6 <_strtod_l+0x906>
 80096d0:	3201      	adds	r2, #1
 80096d2:	d100      	bne.n	80096d6 <_strtod_l+0x906>
 80096d4:	e5c0      	b.n	8009258 <_strtod_l+0x488>
 80096d6:	4b09      	ldr	r3, [pc, #36]	@ (80096fc <_strtod_l+0x92c>)
 80096d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096da:	2600      	movs	r6, #0
 80096dc:	401a      	ands	r2, r3
 80096de:	0013      	movs	r3, r2
 80096e0:	2280      	movs	r2, #128	@ 0x80
 80096e2:	0352      	lsls	r2, r2, #13
 80096e4:	189f      	adds	r7, r3, r2
 80096e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1bd      	bne.n	8009668 <_strtod_l+0x898>
 80096ec:	e5bd      	b.n	800926a <_strtod_l+0x49a>
 80096ee:	46c0      	nop			@ (mov r8, r8)
 80096f0:	0800b0f0 	.word	0x0800b0f0
 80096f4:	fffffc02 	.word	0xfffffc02
 80096f8:	fffffbe2 	.word	0xfffffbe2
 80096fc:	7ff00000 	.word	0x7ff00000
 8009700:	39500000 	.word	0x39500000
 8009704:	000fffff 	.word	0x000fffff
 8009708:	7fefffff 	.word	0x7fefffff
 800970c:	4333      	orrs	r3, r6
 800970e:	d09d      	beq.n	800964c <_strtod_l+0x87c>
 8009710:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009712:	2b00      	cmp	r3, #0
 8009714:	d01c      	beq.n	8009750 <_strtod_l+0x980>
 8009716:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009718:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800971a:	4213      	tst	r3, r2
 800971c:	d0e3      	beq.n	80096e6 <_strtod_l+0x916>
 800971e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009720:	0030      	movs	r0, r6
 8009722:	0039      	movs	r1, r7
 8009724:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009726:	2b00      	cmp	r3, #0
 8009728:	d016      	beq.n	8009758 <_strtod_l+0x988>
 800972a:	f7ff fb39 	bl	8008da0 <sulp>
 800972e:	0002      	movs	r2, r0
 8009730:	000b      	movs	r3, r1
 8009732:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009734:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009736:	f7f7 f9c1 	bl	8000abc <__aeabi_dadd>
 800973a:	0006      	movs	r6, r0
 800973c:	000f      	movs	r7, r1
 800973e:	e7d2      	b.n	80096e6 <_strtod_l+0x916>
 8009740:	2601      	movs	r6, #1
 8009742:	4a92      	ldr	r2, [pc, #584]	@ (800998c <_strtod_l+0xbbc>)
 8009744:	4276      	negs	r6, r6
 8009746:	189b      	adds	r3, r3, r2
 8009748:	4a91      	ldr	r2, [pc, #580]	@ (8009990 <_strtod_l+0xbc0>)
 800974a:	431a      	orrs	r2, r3
 800974c:	0017      	movs	r7, r2
 800974e:	e7ca      	b.n	80096e6 <_strtod_l+0x916>
 8009750:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009752:	4233      	tst	r3, r6
 8009754:	d0c7      	beq.n	80096e6 <_strtod_l+0x916>
 8009756:	e7e2      	b.n	800971e <_strtod_l+0x94e>
 8009758:	f7ff fb22 	bl	8008da0 <sulp>
 800975c:	0002      	movs	r2, r0
 800975e:	000b      	movs	r3, r1
 8009760:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009762:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009764:	f7f8 fc90 	bl	8002088 <__aeabi_dsub>
 8009768:	2200      	movs	r2, #0
 800976a:	2300      	movs	r3, #0
 800976c:	0006      	movs	r6, r0
 800976e:	000f      	movs	r7, r1
 8009770:	f7f6 fe6c 	bl	800044c <__aeabi_dcmpeq>
 8009774:	2800      	cmp	r0, #0
 8009776:	d0b6      	beq.n	80096e6 <_strtod_l+0x916>
 8009778:	e60a      	b.n	8009390 <_strtod_l+0x5c0>
 800977a:	9907      	ldr	r1, [sp, #28]
 800977c:	9806      	ldr	r0, [sp, #24]
 800977e:	f7ff faa1 	bl	8008cc4 <__ratio>
 8009782:	2380      	movs	r3, #128	@ 0x80
 8009784:	2200      	movs	r2, #0
 8009786:	05db      	lsls	r3, r3, #23
 8009788:	0004      	movs	r4, r0
 800978a:	000d      	movs	r5, r1
 800978c:	f7f6 fe6e 	bl	800046c <__aeabi_dcmple>
 8009790:	2800      	cmp	r0, #0
 8009792:	d06c      	beq.n	800986e <_strtod_l+0xa9e>
 8009794:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009796:	2b00      	cmp	r3, #0
 8009798:	d177      	bne.n	800988a <_strtod_l+0xaba>
 800979a:	2e00      	cmp	r6, #0
 800979c:	d157      	bne.n	800984e <_strtod_l+0xa7e>
 800979e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097a0:	031b      	lsls	r3, r3, #12
 80097a2:	d15a      	bne.n	800985a <_strtod_l+0xa8a>
 80097a4:	2200      	movs	r2, #0
 80097a6:	0020      	movs	r0, r4
 80097a8:	0029      	movs	r1, r5
 80097aa:	4b7a      	ldr	r3, [pc, #488]	@ (8009994 <_strtod_l+0xbc4>)
 80097ac:	f7f6 fe54 	bl	8000458 <__aeabi_dcmplt>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d159      	bne.n	8009868 <_strtod_l+0xa98>
 80097b4:	0020      	movs	r0, r4
 80097b6:	0029      	movs	r1, r5
 80097b8:	2200      	movs	r2, #0
 80097ba:	4b77      	ldr	r3, [pc, #476]	@ (8009998 <_strtod_l+0xbc8>)
 80097bc:	f7f8 f97e 	bl	8001abc <__aeabi_dmul>
 80097c0:	0004      	movs	r4, r0
 80097c2:	000d      	movs	r5, r1
 80097c4:	2380      	movs	r3, #128	@ 0x80
 80097c6:	061b      	lsls	r3, r3, #24
 80097c8:	18eb      	adds	r3, r5, r3
 80097ca:	940a      	str	r4, [sp, #40]	@ 0x28
 80097cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097d2:	9216      	str	r2, [sp, #88]	@ 0x58
 80097d4:	9317      	str	r3, [sp, #92]	@ 0x5c
 80097d6:	4a71      	ldr	r2, [pc, #452]	@ (800999c <_strtod_l+0xbcc>)
 80097d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097da:	4013      	ands	r3, r2
 80097dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80097de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80097e0:	4b6f      	ldr	r3, [pc, #444]	@ (80099a0 <_strtod_l+0xbd0>)
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d000      	beq.n	80097e8 <_strtod_l+0xa18>
 80097e6:	e087      	b.n	80098f8 <_strtod_l+0xb28>
 80097e8:	4a6e      	ldr	r2, [pc, #440]	@ (80099a4 <_strtod_l+0xbd4>)
 80097ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097ec:	4694      	mov	ip, r2
 80097ee:	4463      	add	r3, ip
 80097f0:	001f      	movs	r7, r3
 80097f2:	0030      	movs	r0, r6
 80097f4:	0019      	movs	r1, r3
 80097f6:	f7ff f999 	bl	8008b2c <__ulp>
 80097fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80097fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097fe:	f7f8 f95d 	bl	8001abc <__aeabi_dmul>
 8009802:	0032      	movs	r2, r6
 8009804:	003b      	movs	r3, r7
 8009806:	f7f7 f959 	bl	8000abc <__aeabi_dadd>
 800980a:	4a64      	ldr	r2, [pc, #400]	@ (800999c <_strtod_l+0xbcc>)
 800980c:	4b66      	ldr	r3, [pc, #408]	@ (80099a8 <_strtod_l+0xbd8>)
 800980e:	0006      	movs	r6, r0
 8009810:	400a      	ands	r2, r1
 8009812:	429a      	cmp	r2, r3
 8009814:	d940      	bls.n	8009898 <_strtod_l+0xac8>
 8009816:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009818:	4a64      	ldr	r2, [pc, #400]	@ (80099ac <_strtod_l+0xbdc>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d103      	bne.n	8009826 <_strtod_l+0xa56>
 800981e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009820:	3301      	adds	r3, #1
 8009822:	d100      	bne.n	8009826 <_strtod_l+0xa56>
 8009824:	e518      	b.n	8009258 <_strtod_l+0x488>
 8009826:	2601      	movs	r6, #1
 8009828:	4f60      	ldr	r7, [pc, #384]	@ (80099ac <_strtod_l+0xbdc>)
 800982a:	4276      	negs	r6, r6
 800982c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800982e:	9805      	ldr	r0, [sp, #20]
 8009830:	f7fe fe38 	bl	80084a4 <_Bfree>
 8009834:	9908      	ldr	r1, [sp, #32]
 8009836:	9805      	ldr	r0, [sp, #20]
 8009838:	f7fe fe34 	bl	80084a4 <_Bfree>
 800983c:	9907      	ldr	r1, [sp, #28]
 800983e:	9805      	ldr	r0, [sp, #20]
 8009840:	f7fe fe30 	bl	80084a4 <_Bfree>
 8009844:	9906      	ldr	r1, [sp, #24]
 8009846:	9805      	ldr	r0, [sp, #20]
 8009848:	f7fe fe2c 	bl	80084a4 <_Bfree>
 800984c:	e617      	b.n	800947e <_strtod_l+0x6ae>
 800984e:	2e01      	cmp	r6, #1
 8009850:	d103      	bne.n	800985a <_strtod_l+0xa8a>
 8009852:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009854:	2b00      	cmp	r3, #0
 8009856:	d100      	bne.n	800985a <_strtod_l+0xa8a>
 8009858:	e59a      	b.n	8009390 <_strtod_l+0x5c0>
 800985a:	2300      	movs	r3, #0
 800985c:	4c54      	ldr	r4, [pc, #336]	@ (80099b0 <_strtod_l+0xbe0>)
 800985e:	4d4d      	ldr	r5, [pc, #308]	@ (8009994 <_strtod_l+0xbc4>)
 8009860:	930a      	str	r3, [sp, #40]	@ 0x28
 8009862:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009864:	2400      	movs	r4, #0
 8009866:	e7b2      	b.n	80097ce <_strtod_l+0x9fe>
 8009868:	2400      	movs	r4, #0
 800986a:	4d4b      	ldr	r5, [pc, #300]	@ (8009998 <_strtod_l+0xbc8>)
 800986c:	e7aa      	b.n	80097c4 <_strtod_l+0x9f4>
 800986e:	0020      	movs	r0, r4
 8009870:	0029      	movs	r1, r5
 8009872:	4b49      	ldr	r3, [pc, #292]	@ (8009998 <_strtod_l+0xbc8>)
 8009874:	2200      	movs	r2, #0
 8009876:	f7f8 f921 	bl	8001abc <__aeabi_dmul>
 800987a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800987c:	0004      	movs	r4, r0
 800987e:	000d      	movs	r5, r1
 8009880:	2b00      	cmp	r3, #0
 8009882:	d09f      	beq.n	80097c4 <_strtod_l+0x9f4>
 8009884:	940a      	str	r4, [sp, #40]	@ 0x28
 8009886:	950b      	str	r5, [sp, #44]	@ 0x2c
 8009888:	e7a1      	b.n	80097ce <_strtod_l+0x9fe>
 800988a:	2300      	movs	r3, #0
 800988c:	4c41      	ldr	r4, [pc, #260]	@ (8009994 <_strtod_l+0xbc4>)
 800988e:	0025      	movs	r5, r4
 8009890:	930a      	str	r3, [sp, #40]	@ 0x28
 8009892:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009894:	001c      	movs	r4, r3
 8009896:	e79a      	b.n	80097ce <_strtod_l+0x9fe>
 8009898:	23d4      	movs	r3, #212	@ 0xd4
 800989a:	049b      	lsls	r3, r3, #18
 800989c:	18cf      	adds	r7, r1, r3
 800989e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098a0:	9710      	str	r7, [sp, #64]	@ 0x40
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1c2      	bne.n	800982c <_strtod_l+0xa5c>
 80098a6:	4b3d      	ldr	r3, [pc, #244]	@ (800999c <_strtod_l+0xbcc>)
 80098a8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80098aa:	403b      	ands	r3, r7
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d1bd      	bne.n	800982c <_strtod_l+0xa5c>
 80098b0:	0020      	movs	r0, r4
 80098b2:	0029      	movs	r1, r5
 80098b4:	f7f6 fe50 	bl	8000558 <__aeabi_d2lz>
 80098b8:	f7f6 fe88 	bl	80005cc <__aeabi_l2d>
 80098bc:	0002      	movs	r2, r0
 80098be:	000b      	movs	r3, r1
 80098c0:	0020      	movs	r0, r4
 80098c2:	0029      	movs	r1, r5
 80098c4:	f7f8 fbe0 	bl	8002088 <__aeabi_dsub>
 80098c8:	033c      	lsls	r4, r7, #12
 80098ca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80098cc:	0b24      	lsrs	r4, r4, #12
 80098ce:	4334      	orrs	r4, r6
 80098d0:	900e      	str	r0, [sp, #56]	@ 0x38
 80098d2:	910f      	str	r1, [sp, #60]	@ 0x3c
 80098d4:	4a37      	ldr	r2, [pc, #220]	@ (80099b4 <_strtod_l+0xbe4>)
 80098d6:	431c      	orrs	r4, r3
 80098d8:	d052      	beq.n	8009980 <_strtod_l+0xbb0>
 80098da:	4b37      	ldr	r3, [pc, #220]	@ (80099b8 <_strtod_l+0xbe8>)
 80098dc:	f7f6 fdbc 	bl	8000458 <__aeabi_dcmplt>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d000      	beq.n	80098e6 <_strtod_l+0xb16>
 80098e4:	e4c1      	b.n	800926a <_strtod_l+0x49a>
 80098e6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80098e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80098ea:	4a34      	ldr	r2, [pc, #208]	@ (80099bc <_strtod_l+0xbec>)
 80098ec:	4b2a      	ldr	r3, [pc, #168]	@ (8009998 <_strtod_l+0xbc8>)
 80098ee:	f7f6 fdc7 	bl	8000480 <__aeabi_dcmpgt>
 80098f2:	2800      	cmp	r0, #0
 80098f4:	d09a      	beq.n	800982c <_strtod_l+0xa5c>
 80098f6:	e4b8      	b.n	800926a <_strtod_l+0x49a>
 80098f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d02a      	beq.n	8009954 <_strtod_l+0xb84>
 80098fe:	23d4      	movs	r3, #212	@ 0xd4
 8009900:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009902:	04db      	lsls	r3, r3, #19
 8009904:	429a      	cmp	r2, r3
 8009906:	d825      	bhi.n	8009954 <_strtod_l+0xb84>
 8009908:	0020      	movs	r0, r4
 800990a:	0029      	movs	r1, r5
 800990c:	4a2c      	ldr	r2, [pc, #176]	@ (80099c0 <_strtod_l+0xbf0>)
 800990e:	4b2d      	ldr	r3, [pc, #180]	@ (80099c4 <_strtod_l+0xbf4>)
 8009910:	f7f6 fdac 	bl	800046c <__aeabi_dcmple>
 8009914:	2800      	cmp	r0, #0
 8009916:	d016      	beq.n	8009946 <_strtod_l+0xb76>
 8009918:	0020      	movs	r0, r4
 800991a:	0029      	movs	r1, r5
 800991c:	f7f6 fdfe 	bl	800051c <__aeabi_d2uiz>
 8009920:	2800      	cmp	r0, #0
 8009922:	d100      	bne.n	8009926 <_strtod_l+0xb56>
 8009924:	3001      	adds	r0, #1
 8009926:	f7f9 f845 	bl	80029b4 <__aeabi_ui2d>
 800992a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800992c:	0004      	movs	r4, r0
 800992e:	000d      	movs	r5, r1
 8009930:	2b00      	cmp	r3, #0
 8009932:	d122      	bne.n	800997a <_strtod_l+0xbaa>
 8009934:	2380      	movs	r3, #128	@ 0x80
 8009936:	061b      	lsls	r3, r3, #24
 8009938:	18cb      	adds	r3, r1, r3
 800993a:	9018      	str	r0, [sp, #96]	@ 0x60
 800993c:	9319      	str	r3, [sp, #100]	@ 0x64
 800993e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009940:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009942:	9216      	str	r2, [sp, #88]	@ 0x58
 8009944:	9317      	str	r3, [sp, #92]	@ 0x5c
 8009946:	22d6      	movs	r2, #214	@ 0xd6
 8009948:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800994a:	04d2      	lsls	r2, r2, #19
 800994c:	189b      	adds	r3, r3, r2
 800994e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009950:	1a9b      	subs	r3, r3, r2
 8009952:	9317      	str	r3, [sp, #92]	@ 0x5c
 8009954:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009956:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009958:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 800995a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800995c:	f7ff f8e6 	bl	8008b2c <__ulp>
 8009960:	0002      	movs	r2, r0
 8009962:	000b      	movs	r3, r1
 8009964:	0030      	movs	r0, r6
 8009966:	0039      	movs	r1, r7
 8009968:	f7f8 f8a8 	bl	8001abc <__aeabi_dmul>
 800996c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800996e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009970:	f7f7 f8a4 	bl	8000abc <__aeabi_dadd>
 8009974:	0006      	movs	r6, r0
 8009976:	000f      	movs	r7, r1
 8009978:	e791      	b.n	800989e <_strtod_l+0xace>
 800997a:	9418      	str	r4, [sp, #96]	@ 0x60
 800997c:	9519      	str	r5, [sp, #100]	@ 0x64
 800997e:	e7de      	b.n	800993e <_strtod_l+0xb6e>
 8009980:	4b11      	ldr	r3, [pc, #68]	@ (80099c8 <_strtod_l+0xbf8>)
 8009982:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8009984:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009986:	f7f6 fd67 	bl	8000458 <__aeabi_dcmplt>
 800998a:	e7b2      	b.n	80098f2 <_strtod_l+0xb22>
 800998c:	fff00000 	.word	0xfff00000
 8009990:	000fffff 	.word	0x000fffff
 8009994:	3ff00000 	.word	0x3ff00000
 8009998:	3fe00000 	.word	0x3fe00000
 800999c:	7ff00000 	.word	0x7ff00000
 80099a0:	7fe00000 	.word	0x7fe00000
 80099a4:	fcb00000 	.word	0xfcb00000
 80099a8:	7c9fffff 	.word	0x7c9fffff
 80099ac:	7fefffff 	.word	0x7fefffff
 80099b0:	bff00000 	.word	0xbff00000
 80099b4:	94a03595 	.word	0x94a03595
 80099b8:	3fdfffff 	.word	0x3fdfffff
 80099bc:	35afe535 	.word	0x35afe535
 80099c0:	ffc00000 	.word	0xffc00000
 80099c4:	41dfffff 	.word	0x41dfffff
 80099c8:	3fcfffff 	.word	0x3fcfffff

080099cc <_strtod_r>:
 80099cc:	b510      	push	{r4, lr}
 80099ce:	4b02      	ldr	r3, [pc, #8]	@ (80099d8 <_strtod_r+0xc>)
 80099d0:	f7ff f9fe 	bl	8008dd0 <_strtod_l>
 80099d4:	bd10      	pop	{r4, pc}
 80099d6:	46c0      	nop			@ (mov r8, r8)
 80099d8:	20000068 	.word	0x20000068

080099dc <_strtol_l.isra.0>:
 80099dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099de:	b085      	sub	sp, #20
 80099e0:	0017      	movs	r7, r2
 80099e2:	001e      	movs	r6, r3
 80099e4:	9003      	str	r0, [sp, #12]
 80099e6:	9101      	str	r1, [sp, #4]
 80099e8:	2b24      	cmp	r3, #36	@ 0x24
 80099ea:	d823      	bhi.n	8009a34 <_strtol_l.isra.0+0x58>
 80099ec:	000c      	movs	r4, r1
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d020      	beq.n	8009a34 <_strtol_l.isra.0+0x58>
 80099f2:	4b3d      	ldr	r3, [pc, #244]	@ (8009ae8 <_strtol_l.isra.0+0x10c>)
 80099f4:	2208      	movs	r2, #8
 80099f6:	469c      	mov	ip, r3
 80099f8:	0023      	movs	r3, r4
 80099fa:	4661      	mov	r1, ip
 80099fc:	781d      	ldrb	r5, [r3, #0]
 80099fe:	3401      	adds	r4, #1
 8009a00:	5d48      	ldrb	r0, [r1, r5]
 8009a02:	0001      	movs	r1, r0
 8009a04:	4011      	ands	r1, r2
 8009a06:	4210      	tst	r0, r2
 8009a08:	d1f6      	bne.n	80099f8 <_strtol_l.isra.0+0x1c>
 8009a0a:	2d2d      	cmp	r5, #45	@ 0x2d
 8009a0c:	d119      	bne.n	8009a42 <_strtol_l.isra.0+0x66>
 8009a0e:	7825      	ldrb	r5, [r4, #0]
 8009a10:	1c9c      	adds	r4, r3, #2
 8009a12:	2301      	movs	r3, #1
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	2210      	movs	r2, #16
 8009a18:	0033      	movs	r3, r6
 8009a1a:	4393      	bics	r3, r2
 8009a1c:	d11d      	bne.n	8009a5a <_strtol_l.isra.0+0x7e>
 8009a1e:	2d30      	cmp	r5, #48	@ 0x30
 8009a20:	d115      	bne.n	8009a4e <_strtol_l.isra.0+0x72>
 8009a22:	2120      	movs	r1, #32
 8009a24:	7823      	ldrb	r3, [r4, #0]
 8009a26:	438b      	bics	r3, r1
 8009a28:	2b58      	cmp	r3, #88	@ 0x58
 8009a2a:	d110      	bne.n	8009a4e <_strtol_l.isra.0+0x72>
 8009a2c:	7865      	ldrb	r5, [r4, #1]
 8009a2e:	3402      	adds	r4, #2
 8009a30:	2610      	movs	r6, #16
 8009a32:	e012      	b.n	8009a5a <_strtol_l.isra.0+0x7e>
 8009a34:	f7fd fd3a 	bl	80074ac <__errno>
 8009a38:	2316      	movs	r3, #22
 8009a3a:	6003      	str	r3, [r0, #0]
 8009a3c:	2000      	movs	r0, #0
 8009a3e:	b005      	add	sp, #20
 8009a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a42:	9100      	str	r1, [sp, #0]
 8009a44:	2d2b      	cmp	r5, #43	@ 0x2b
 8009a46:	d1e6      	bne.n	8009a16 <_strtol_l.isra.0+0x3a>
 8009a48:	7825      	ldrb	r5, [r4, #0]
 8009a4a:	1c9c      	adds	r4, r3, #2
 8009a4c:	e7e3      	b.n	8009a16 <_strtol_l.isra.0+0x3a>
 8009a4e:	2e00      	cmp	r6, #0
 8009a50:	d1ee      	bne.n	8009a30 <_strtol_l.isra.0+0x54>
 8009a52:	360a      	adds	r6, #10
 8009a54:	2d30      	cmp	r5, #48	@ 0x30
 8009a56:	d100      	bne.n	8009a5a <_strtol_l.isra.0+0x7e>
 8009a58:	3e02      	subs	r6, #2
 8009a5a:	4a24      	ldr	r2, [pc, #144]	@ (8009aec <_strtol_l.isra.0+0x110>)
 8009a5c:	9b00      	ldr	r3, [sp, #0]
 8009a5e:	4694      	mov	ip, r2
 8009a60:	4463      	add	r3, ip
 8009a62:	0031      	movs	r1, r6
 8009a64:	0018      	movs	r0, r3
 8009a66:	9302      	str	r3, [sp, #8]
 8009a68:	f7f6 fbf0 	bl	800024c <__aeabi_uidivmod>
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	4684      	mov	ip, r0
 8009a70:	0010      	movs	r0, r2
 8009a72:	002b      	movs	r3, r5
 8009a74:	3b30      	subs	r3, #48	@ 0x30
 8009a76:	2b09      	cmp	r3, #9
 8009a78:	d811      	bhi.n	8009a9e <_strtol_l.isra.0+0xc2>
 8009a7a:	001d      	movs	r5, r3
 8009a7c:	42ae      	cmp	r6, r5
 8009a7e:	dd1d      	ble.n	8009abc <_strtol_l.isra.0+0xe0>
 8009a80:	1c53      	adds	r3, r2, #1
 8009a82:	d009      	beq.n	8009a98 <_strtol_l.isra.0+0xbc>
 8009a84:	2201      	movs	r2, #1
 8009a86:	4252      	negs	r2, r2
 8009a88:	4584      	cmp	ip, r0
 8009a8a:	d305      	bcc.n	8009a98 <_strtol_l.isra.0+0xbc>
 8009a8c:	d101      	bne.n	8009a92 <_strtol_l.isra.0+0xb6>
 8009a8e:	42a9      	cmp	r1, r5
 8009a90:	db11      	blt.n	8009ab6 <_strtol_l.isra.0+0xda>
 8009a92:	2201      	movs	r2, #1
 8009a94:	4370      	muls	r0, r6
 8009a96:	1828      	adds	r0, r5, r0
 8009a98:	7825      	ldrb	r5, [r4, #0]
 8009a9a:	3401      	adds	r4, #1
 8009a9c:	e7e9      	b.n	8009a72 <_strtol_l.isra.0+0x96>
 8009a9e:	002b      	movs	r3, r5
 8009aa0:	3b41      	subs	r3, #65	@ 0x41
 8009aa2:	2b19      	cmp	r3, #25
 8009aa4:	d801      	bhi.n	8009aaa <_strtol_l.isra.0+0xce>
 8009aa6:	3d37      	subs	r5, #55	@ 0x37
 8009aa8:	e7e8      	b.n	8009a7c <_strtol_l.isra.0+0xa0>
 8009aaa:	002b      	movs	r3, r5
 8009aac:	3b61      	subs	r3, #97	@ 0x61
 8009aae:	2b19      	cmp	r3, #25
 8009ab0:	d804      	bhi.n	8009abc <_strtol_l.isra.0+0xe0>
 8009ab2:	3d57      	subs	r5, #87	@ 0x57
 8009ab4:	e7e2      	b.n	8009a7c <_strtol_l.isra.0+0xa0>
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	4252      	negs	r2, r2
 8009aba:	e7ed      	b.n	8009a98 <_strtol_l.isra.0+0xbc>
 8009abc:	1c53      	adds	r3, r2, #1
 8009abe:	d108      	bne.n	8009ad2 <_strtol_l.isra.0+0xf6>
 8009ac0:	2322      	movs	r3, #34	@ 0x22
 8009ac2:	9a03      	ldr	r2, [sp, #12]
 8009ac4:	9802      	ldr	r0, [sp, #8]
 8009ac6:	6013      	str	r3, [r2, #0]
 8009ac8:	2f00      	cmp	r7, #0
 8009aca:	d0b8      	beq.n	8009a3e <_strtol_l.isra.0+0x62>
 8009acc:	1e63      	subs	r3, r4, #1
 8009ace:	9301      	str	r3, [sp, #4]
 8009ad0:	e007      	b.n	8009ae2 <_strtol_l.isra.0+0x106>
 8009ad2:	9b00      	ldr	r3, [sp, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d000      	beq.n	8009ada <_strtol_l.isra.0+0xfe>
 8009ad8:	4240      	negs	r0, r0
 8009ada:	2f00      	cmp	r7, #0
 8009adc:	d0af      	beq.n	8009a3e <_strtol_l.isra.0+0x62>
 8009ade:	2a00      	cmp	r2, #0
 8009ae0:	d1f4      	bne.n	8009acc <_strtol_l.isra.0+0xf0>
 8009ae2:	9b01      	ldr	r3, [sp, #4]
 8009ae4:	603b      	str	r3, [r7, #0]
 8009ae6:	e7aa      	b.n	8009a3e <_strtol_l.isra.0+0x62>
 8009ae8:	0800b119 	.word	0x0800b119
 8009aec:	7fffffff 	.word	0x7fffffff

08009af0 <_strtol_r>:
 8009af0:	b510      	push	{r4, lr}
 8009af2:	f7ff ff73 	bl	80099dc <_strtol_l.isra.0>
 8009af6:	bd10      	pop	{r4, pc}

08009af8 <__ssputs_r>:
 8009af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009afa:	688e      	ldr	r6, [r1, #8]
 8009afc:	b085      	sub	sp, #20
 8009afe:	001f      	movs	r7, r3
 8009b00:	000c      	movs	r4, r1
 8009b02:	680b      	ldr	r3, [r1, #0]
 8009b04:	9002      	str	r0, [sp, #8]
 8009b06:	9203      	str	r2, [sp, #12]
 8009b08:	42be      	cmp	r6, r7
 8009b0a:	d830      	bhi.n	8009b6e <__ssputs_r+0x76>
 8009b0c:	210c      	movs	r1, #12
 8009b0e:	5e62      	ldrsh	r2, [r4, r1]
 8009b10:	2190      	movs	r1, #144	@ 0x90
 8009b12:	00c9      	lsls	r1, r1, #3
 8009b14:	420a      	tst	r2, r1
 8009b16:	d028      	beq.n	8009b6a <__ssputs_r+0x72>
 8009b18:	2003      	movs	r0, #3
 8009b1a:	6921      	ldr	r1, [r4, #16]
 8009b1c:	1a5b      	subs	r3, r3, r1
 8009b1e:	9301      	str	r3, [sp, #4]
 8009b20:	6963      	ldr	r3, [r4, #20]
 8009b22:	4343      	muls	r3, r0
 8009b24:	9801      	ldr	r0, [sp, #4]
 8009b26:	0fdd      	lsrs	r5, r3, #31
 8009b28:	18ed      	adds	r5, r5, r3
 8009b2a:	1c7b      	adds	r3, r7, #1
 8009b2c:	181b      	adds	r3, r3, r0
 8009b2e:	106d      	asrs	r5, r5, #1
 8009b30:	42ab      	cmp	r3, r5
 8009b32:	d900      	bls.n	8009b36 <__ssputs_r+0x3e>
 8009b34:	001d      	movs	r5, r3
 8009b36:	0552      	lsls	r2, r2, #21
 8009b38:	d528      	bpl.n	8009b8c <__ssputs_r+0x94>
 8009b3a:	0029      	movs	r1, r5
 8009b3c:	9802      	ldr	r0, [sp, #8]
 8009b3e:	f7fe fbdd 	bl	80082fc <_malloc_r>
 8009b42:	1e06      	subs	r6, r0, #0
 8009b44:	d02c      	beq.n	8009ba0 <__ssputs_r+0xa8>
 8009b46:	9a01      	ldr	r2, [sp, #4]
 8009b48:	6921      	ldr	r1, [r4, #16]
 8009b4a:	f000 fa19 	bl	8009f80 <memcpy>
 8009b4e:	89a2      	ldrh	r2, [r4, #12]
 8009b50:	4b18      	ldr	r3, [pc, #96]	@ (8009bb4 <__ssputs_r+0xbc>)
 8009b52:	401a      	ands	r2, r3
 8009b54:	2380      	movs	r3, #128	@ 0x80
 8009b56:	4313      	orrs	r3, r2
 8009b58:	81a3      	strh	r3, [r4, #12]
 8009b5a:	9b01      	ldr	r3, [sp, #4]
 8009b5c:	6126      	str	r6, [r4, #16]
 8009b5e:	18f6      	adds	r6, r6, r3
 8009b60:	6026      	str	r6, [r4, #0]
 8009b62:	003e      	movs	r6, r7
 8009b64:	6165      	str	r5, [r4, #20]
 8009b66:	1aed      	subs	r5, r5, r3
 8009b68:	60a5      	str	r5, [r4, #8]
 8009b6a:	42be      	cmp	r6, r7
 8009b6c:	d900      	bls.n	8009b70 <__ssputs_r+0x78>
 8009b6e:	003e      	movs	r6, r7
 8009b70:	0032      	movs	r2, r6
 8009b72:	9903      	ldr	r1, [sp, #12]
 8009b74:	6820      	ldr	r0, [r4, #0]
 8009b76:	f000 f9ce 	bl	8009f16 <memmove>
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	68a3      	ldr	r3, [r4, #8]
 8009b7e:	1b9b      	subs	r3, r3, r6
 8009b80:	60a3      	str	r3, [r4, #8]
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	199b      	adds	r3, r3, r6
 8009b86:	6023      	str	r3, [r4, #0]
 8009b88:	b005      	add	sp, #20
 8009b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b8c:	002a      	movs	r2, r5
 8009b8e:	9802      	ldr	r0, [sp, #8]
 8009b90:	f000 fdbe 	bl	800a710 <_realloc_r>
 8009b94:	1e06      	subs	r6, r0, #0
 8009b96:	d1e0      	bne.n	8009b5a <__ssputs_r+0x62>
 8009b98:	6921      	ldr	r1, [r4, #16]
 8009b9a:	9802      	ldr	r0, [sp, #8]
 8009b9c:	f7fe fb38 	bl	8008210 <_free_r>
 8009ba0:	230c      	movs	r3, #12
 8009ba2:	2001      	movs	r0, #1
 8009ba4:	9a02      	ldr	r2, [sp, #8]
 8009ba6:	4240      	negs	r0, r0
 8009ba8:	6013      	str	r3, [r2, #0]
 8009baa:	89a2      	ldrh	r2, [r4, #12]
 8009bac:	3334      	adds	r3, #52	@ 0x34
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	81a3      	strh	r3, [r4, #12]
 8009bb2:	e7e9      	b.n	8009b88 <__ssputs_r+0x90>
 8009bb4:	fffffb7f 	.word	0xfffffb7f

08009bb8 <_svfiprintf_r>:
 8009bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bba:	b0a1      	sub	sp, #132	@ 0x84
 8009bbc:	9003      	str	r0, [sp, #12]
 8009bbe:	001d      	movs	r5, r3
 8009bc0:	898b      	ldrh	r3, [r1, #12]
 8009bc2:	000f      	movs	r7, r1
 8009bc4:	0016      	movs	r6, r2
 8009bc6:	061b      	lsls	r3, r3, #24
 8009bc8:	d511      	bpl.n	8009bee <_svfiprintf_r+0x36>
 8009bca:	690b      	ldr	r3, [r1, #16]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10e      	bne.n	8009bee <_svfiprintf_r+0x36>
 8009bd0:	2140      	movs	r1, #64	@ 0x40
 8009bd2:	f7fe fb93 	bl	80082fc <_malloc_r>
 8009bd6:	6038      	str	r0, [r7, #0]
 8009bd8:	6138      	str	r0, [r7, #16]
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	d105      	bne.n	8009bea <_svfiprintf_r+0x32>
 8009bde:	230c      	movs	r3, #12
 8009be0:	9a03      	ldr	r2, [sp, #12]
 8009be2:	6013      	str	r3, [r2, #0]
 8009be4:	2001      	movs	r0, #1
 8009be6:	4240      	negs	r0, r0
 8009be8:	e0cf      	b.n	8009d8a <_svfiprintf_r+0x1d2>
 8009bea:	2340      	movs	r3, #64	@ 0x40
 8009bec:	617b      	str	r3, [r7, #20]
 8009bee:	2300      	movs	r3, #0
 8009bf0:	ac08      	add	r4, sp, #32
 8009bf2:	6163      	str	r3, [r4, #20]
 8009bf4:	3320      	adds	r3, #32
 8009bf6:	7663      	strb	r3, [r4, #25]
 8009bf8:	3310      	adds	r3, #16
 8009bfa:	76a3      	strb	r3, [r4, #26]
 8009bfc:	9507      	str	r5, [sp, #28]
 8009bfe:	0035      	movs	r5, r6
 8009c00:	782b      	ldrb	r3, [r5, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <_svfiprintf_r+0x52>
 8009c06:	2b25      	cmp	r3, #37	@ 0x25
 8009c08:	d148      	bne.n	8009c9c <_svfiprintf_r+0xe4>
 8009c0a:	1bab      	subs	r3, r5, r6
 8009c0c:	9305      	str	r3, [sp, #20]
 8009c0e:	42b5      	cmp	r5, r6
 8009c10:	d00b      	beq.n	8009c2a <_svfiprintf_r+0x72>
 8009c12:	0032      	movs	r2, r6
 8009c14:	0039      	movs	r1, r7
 8009c16:	9803      	ldr	r0, [sp, #12]
 8009c18:	f7ff ff6e 	bl	8009af8 <__ssputs_r>
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d100      	bne.n	8009c22 <_svfiprintf_r+0x6a>
 8009c20:	e0ae      	b.n	8009d80 <_svfiprintf_r+0x1c8>
 8009c22:	6963      	ldr	r3, [r4, #20]
 8009c24:	9a05      	ldr	r2, [sp, #20]
 8009c26:	189b      	adds	r3, r3, r2
 8009c28:	6163      	str	r3, [r4, #20]
 8009c2a:	782b      	ldrb	r3, [r5, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d100      	bne.n	8009c32 <_svfiprintf_r+0x7a>
 8009c30:	e0a6      	b.n	8009d80 <_svfiprintf_r+0x1c8>
 8009c32:	2201      	movs	r2, #1
 8009c34:	2300      	movs	r3, #0
 8009c36:	4252      	negs	r2, r2
 8009c38:	6062      	str	r2, [r4, #4]
 8009c3a:	a904      	add	r1, sp, #16
 8009c3c:	3254      	adds	r2, #84	@ 0x54
 8009c3e:	1852      	adds	r2, r2, r1
 8009c40:	1c6e      	adds	r6, r5, #1
 8009c42:	6023      	str	r3, [r4, #0]
 8009c44:	60e3      	str	r3, [r4, #12]
 8009c46:	60a3      	str	r3, [r4, #8]
 8009c48:	7013      	strb	r3, [r2, #0]
 8009c4a:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009c4c:	4b54      	ldr	r3, [pc, #336]	@ (8009da0 <_svfiprintf_r+0x1e8>)
 8009c4e:	2205      	movs	r2, #5
 8009c50:	0018      	movs	r0, r3
 8009c52:	7831      	ldrb	r1, [r6, #0]
 8009c54:	9305      	str	r3, [sp, #20]
 8009c56:	f7fd fc56 	bl	8007506 <memchr>
 8009c5a:	1c75      	adds	r5, r6, #1
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d11f      	bne.n	8009ca0 <_svfiprintf_r+0xe8>
 8009c60:	6822      	ldr	r2, [r4, #0]
 8009c62:	06d3      	lsls	r3, r2, #27
 8009c64:	d504      	bpl.n	8009c70 <_svfiprintf_r+0xb8>
 8009c66:	2353      	movs	r3, #83	@ 0x53
 8009c68:	a904      	add	r1, sp, #16
 8009c6a:	185b      	adds	r3, r3, r1
 8009c6c:	2120      	movs	r1, #32
 8009c6e:	7019      	strb	r1, [r3, #0]
 8009c70:	0713      	lsls	r3, r2, #28
 8009c72:	d504      	bpl.n	8009c7e <_svfiprintf_r+0xc6>
 8009c74:	2353      	movs	r3, #83	@ 0x53
 8009c76:	a904      	add	r1, sp, #16
 8009c78:	185b      	adds	r3, r3, r1
 8009c7a:	212b      	movs	r1, #43	@ 0x2b
 8009c7c:	7019      	strb	r1, [r3, #0]
 8009c7e:	7833      	ldrb	r3, [r6, #0]
 8009c80:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c82:	d016      	beq.n	8009cb2 <_svfiprintf_r+0xfa>
 8009c84:	0035      	movs	r5, r6
 8009c86:	2100      	movs	r1, #0
 8009c88:	200a      	movs	r0, #10
 8009c8a:	68e3      	ldr	r3, [r4, #12]
 8009c8c:	782a      	ldrb	r2, [r5, #0]
 8009c8e:	1c6e      	adds	r6, r5, #1
 8009c90:	3a30      	subs	r2, #48	@ 0x30
 8009c92:	2a09      	cmp	r2, #9
 8009c94:	d950      	bls.n	8009d38 <_svfiprintf_r+0x180>
 8009c96:	2900      	cmp	r1, #0
 8009c98:	d111      	bne.n	8009cbe <_svfiprintf_r+0x106>
 8009c9a:	e017      	b.n	8009ccc <_svfiprintf_r+0x114>
 8009c9c:	3501      	adds	r5, #1
 8009c9e:	e7af      	b.n	8009c00 <_svfiprintf_r+0x48>
 8009ca0:	9b05      	ldr	r3, [sp, #20]
 8009ca2:	6822      	ldr	r2, [r4, #0]
 8009ca4:	1ac0      	subs	r0, r0, r3
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	4083      	lsls	r3, r0
 8009caa:	4313      	orrs	r3, r2
 8009cac:	002e      	movs	r6, r5
 8009cae:	6023      	str	r3, [r4, #0]
 8009cb0:	e7cc      	b.n	8009c4c <_svfiprintf_r+0x94>
 8009cb2:	9b07      	ldr	r3, [sp, #28]
 8009cb4:	1d19      	adds	r1, r3, #4
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	9107      	str	r1, [sp, #28]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	db01      	blt.n	8009cc2 <_svfiprintf_r+0x10a>
 8009cbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cc0:	e004      	b.n	8009ccc <_svfiprintf_r+0x114>
 8009cc2:	425b      	negs	r3, r3
 8009cc4:	60e3      	str	r3, [r4, #12]
 8009cc6:	2302      	movs	r3, #2
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	6023      	str	r3, [r4, #0]
 8009ccc:	782b      	ldrb	r3, [r5, #0]
 8009cce:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cd0:	d10c      	bne.n	8009cec <_svfiprintf_r+0x134>
 8009cd2:	786b      	ldrb	r3, [r5, #1]
 8009cd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cd6:	d134      	bne.n	8009d42 <_svfiprintf_r+0x18a>
 8009cd8:	9b07      	ldr	r3, [sp, #28]
 8009cda:	3502      	adds	r5, #2
 8009cdc:	1d1a      	adds	r2, r3, #4
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	9207      	str	r2, [sp, #28]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	da01      	bge.n	8009cea <_svfiprintf_r+0x132>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	425b      	negs	r3, r3
 8009cea:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cec:	4e2d      	ldr	r6, [pc, #180]	@ (8009da4 <_svfiprintf_r+0x1ec>)
 8009cee:	2203      	movs	r2, #3
 8009cf0:	0030      	movs	r0, r6
 8009cf2:	7829      	ldrb	r1, [r5, #0]
 8009cf4:	f7fd fc07 	bl	8007506 <memchr>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	d006      	beq.n	8009d0a <_svfiprintf_r+0x152>
 8009cfc:	2340      	movs	r3, #64	@ 0x40
 8009cfe:	1b80      	subs	r0, r0, r6
 8009d00:	4083      	lsls	r3, r0
 8009d02:	6822      	ldr	r2, [r4, #0]
 8009d04:	3501      	adds	r5, #1
 8009d06:	4313      	orrs	r3, r2
 8009d08:	6023      	str	r3, [r4, #0]
 8009d0a:	7829      	ldrb	r1, [r5, #0]
 8009d0c:	2206      	movs	r2, #6
 8009d0e:	4826      	ldr	r0, [pc, #152]	@ (8009da8 <_svfiprintf_r+0x1f0>)
 8009d10:	1c6e      	adds	r6, r5, #1
 8009d12:	7621      	strb	r1, [r4, #24]
 8009d14:	f7fd fbf7 	bl	8007506 <memchr>
 8009d18:	2800      	cmp	r0, #0
 8009d1a:	d038      	beq.n	8009d8e <_svfiprintf_r+0x1d6>
 8009d1c:	4b23      	ldr	r3, [pc, #140]	@ (8009dac <_svfiprintf_r+0x1f4>)
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d122      	bne.n	8009d68 <_svfiprintf_r+0x1b0>
 8009d22:	2207      	movs	r2, #7
 8009d24:	9b07      	ldr	r3, [sp, #28]
 8009d26:	3307      	adds	r3, #7
 8009d28:	4393      	bics	r3, r2
 8009d2a:	3308      	adds	r3, #8
 8009d2c:	9307      	str	r3, [sp, #28]
 8009d2e:	6963      	ldr	r3, [r4, #20]
 8009d30:	9a04      	ldr	r2, [sp, #16]
 8009d32:	189b      	adds	r3, r3, r2
 8009d34:	6163      	str	r3, [r4, #20]
 8009d36:	e762      	b.n	8009bfe <_svfiprintf_r+0x46>
 8009d38:	4343      	muls	r3, r0
 8009d3a:	0035      	movs	r5, r6
 8009d3c:	2101      	movs	r1, #1
 8009d3e:	189b      	adds	r3, r3, r2
 8009d40:	e7a4      	b.n	8009c8c <_svfiprintf_r+0xd4>
 8009d42:	2300      	movs	r3, #0
 8009d44:	200a      	movs	r0, #10
 8009d46:	0019      	movs	r1, r3
 8009d48:	3501      	adds	r5, #1
 8009d4a:	6063      	str	r3, [r4, #4]
 8009d4c:	782a      	ldrb	r2, [r5, #0]
 8009d4e:	1c6e      	adds	r6, r5, #1
 8009d50:	3a30      	subs	r2, #48	@ 0x30
 8009d52:	2a09      	cmp	r2, #9
 8009d54:	d903      	bls.n	8009d5e <_svfiprintf_r+0x1a6>
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d0c8      	beq.n	8009cec <_svfiprintf_r+0x134>
 8009d5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8009d5c:	e7c6      	b.n	8009cec <_svfiprintf_r+0x134>
 8009d5e:	4341      	muls	r1, r0
 8009d60:	0035      	movs	r5, r6
 8009d62:	2301      	movs	r3, #1
 8009d64:	1889      	adds	r1, r1, r2
 8009d66:	e7f1      	b.n	8009d4c <_svfiprintf_r+0x194>
 8009d68:	aa07      	add	r2, sp, #28
 8009d6a:	9200      	str	r2, [sp, #0]
 8009d6c:	0021      	movs	r1, r4
 8009d6e:	003a      	movs	r2, r7
 8009d70:	4b0f      	ldr	r3, [pc, #60]	@ (8009db0 <_svfiprintf_r+0x1f8>)
 8009d72:	9803      	ldr	r0, [sp, #12]
 8009d74:	f7fc fc12 	bl	800659c <_printf_float>
 8009d78:	9004      	str	r0, [sp, #16]
 8009d7a:	9b04      	ldr	r3, [sp, #16]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	d1d6      	bne.n	8009d2e <_svfiprintf_r+0x176>
 8009d80:	89bb      	ldrh	r3, [r7, #12]
 8009d82:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009d84:	065b      	lsls	r3, r3, #25
 8009d86:	d500      	bpl.n	8009d8a <_svfiprintf_r+0x1d2>
 8009d88:	e72c      	b.n	8009be4 <_svfiprintf_r+0x2c>
 8009d8a:	b021      	add	sp, #132	@ 0x84
 8009d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d8e:	aa07      	add	r2, sp, #28
 8009d90:	9200      	str	r2, [sp, #0]
 8009d92:	0021      	movs	r1, r4
 8009d94:	003a      	movs	r2, r7
 8009d96:	4b06      	ldr	r3, [pc, #24]	@ (8009db0 <_svfiprintf_r+0x1f8>)
 8009d98:	9803      	ldr	r0, [sp, #12]
 8009d9a:	f7fc fead 	bl	8006af8 <_printf_i>
 8009d9e:	e7eb      	b.n	8009d78 <_svfiprintf_r+0x1c0>
 8009da0:	0800af11 	.word	0x0800af11
 8009da4:	0800af17 	.word	0x0800af17
 8009da8:	0800af1b 	.word	0x0800af1b
 8009dac:	0800659d 	.word	0x0800659d
 8009db0:	08009af9 	.word	0x08009af9

08009db4 <__sflush_r>:
 8009db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009db6:	220c      	movs	r2, #12
 8009db8:	5e8b      	ldrsh	r3, [r1, r2]
 8009dba:	0005      	movs	r5, r0
 8009dbc:	000c      	movs	r4, r1
 8009dbe:	071a      	lsls	r2, r3, #28
 8009dc0:	d456      	bmi.n	8009e70 <__sflush_r+0xbc>
 8009dc2:	684a      	ldr	r2, [r1, #4]
 8009dc4:	2a00      	cmp	r2, #0
 8009dc6:	dc02      	bgt.n	8009dce <__sflush_r+0x1a>
 8009dc8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8009dca:	2a00      	cmp	r2, #0
 8009dcc:	dd4e      	ble.n	8009e6c <__sflush_r+0xb8>
 8009dce:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009dd0:	2f00      	cmp	r7, #0
 8009dd2:	d04b      	beq.n	8009e6c <__sflush_r+0xb8>
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	2080      	movs	r0, #128	@ 0x80
 8009dd8:	682e      	ldr	r6, [r5, #0]
 8009dda:	602a      	str	r2, [r5, #0]
 8009ddc:	001a      	movs	r2, r3
 8009dde:	0140      	lsls	r0, r0, #5
 8009de0:	6a21      	ldr	r1, [r4, #32]
 8009de2:	4002      	ands	r2, r0
 8009de4:	4203      	tst	r3, r0
 8009de6:	d033      	beq.n	8009e50 <__sflush_r+0x9c>
 8009de8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009dea:	89a3      	ldrh	r3, [r4, #12]
 8009dec:	075b      	lsls	r3, r3, #29
 8009dee:	d506      	bpl.n	8009dfe <__sflush_r+0x4a>
 8009df0:	6863      	ldr	r3, [r4, #4]
 8009df2:	1ad2      	subs	r2, r2, r3
 8009df4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d001      	beq.n	8009dfe <__sflush_r+0x4a>
 8009dfa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009dfc:	1ad2      	subs	r2, r2, r3
 8009dfe:	2300      	movs	r3, #0
 8009e00:	0028      	movs	r0, r5
 8009e02:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009e04:	6a21      	ldr	r1, [r4, #32]
 8009e06:	47b8      	blx	r7
 8009e08:	89a2      	ldrh	r2, [r4, #12]
 8009e0a:	1c43      	adds	r3, r0, #1
 8009e0c:	d106      	bne.n	8009e1c <__sflush_r+0x68>
 8009e0e:	6829      	ldr	r1, [r5, #0]
 8009e10:	291d      	cmp	r1, #29
 8009e12:	d846      	bhi.n	8009ea2 <__sflush_r+0xee>
 8009e14:	4b29      	ldr	r3, [pc, #164]	@ (8009ebc <__sflush_r+0x108>)
 8009e16:	40cb      	lsrs	r3, r1
 8009e18:	07db      	lsls	r3, r3, #31
 8009e1a:	d542      	bpl.n	8009ea2 <__sflush_r+0xee>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	6063      	str	r3, [r4, #4]
 8009e20:	6923      	ldr	r3, [r4, #16]
 8009e22:	6023      	str	r3, [r4, #0]
 8009e24:	04d2      	lsls	r2, r2, #19
 8009e26:	d505      	bpl.n	8009e34 <__sflush_r+0x80>
 8009e28:	1c43      	adds	r3, r0, #1
 8009e2a:	d102      	bne.n	8009e32 <__sflush_r+0x7e>
 8009e2c:	682b      	ldr	r3, [r5, #0]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d100      	bne.n	8009e34 <__sflush_r+0x80>
 8009e32:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e36:	602e      	str	r6, [r5, #0]
 8009e38:	2900      	cmp	r1, #0
 8009e3a:	d017      	beq.n	8009e6c <__sflush_r+0xb8>
 8009e3c:	0023      	movs	r3, r4
 8009e3e:	3344      	adds	r3, #68	@ 0x44
 8009e40:	4299      	cmp	r1, r3
 8009e42:	d002      	beq.n	8009e4a <__sflush_r+0x96>
 8009e44:	0028      	movs	r0, r5
 8009e46:	f7fe f9e3 	bl	8008210 <_free_r>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e4e:	e00d      	b.n	8009e6c <__sflush_r+0xb8>
 8009e50:	2301      	movs	r3, #1
 8009e52:	0028      	movs	r0, r5
 8009e54:	47b8      	blx	r7
 8009e56:	0002      	movs	r2, r0
 8009e58:	1c43      	adds	r3, r0, #1
 8009e5a:	d1c6      	bne.n	8009dea <__sflush_r+0x36>
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d0c3      	beq.n	8009dea <__sflush_r+0x36>
 8009e62:	2b1d      	cmp	r3, #29
 8009e64:	d001      	beq.n	8009e6a <__sflush_r+0xb6>
 8009e66:	2b16      	cmp	r3, #22
 8009e68:	d11a      	bne.n	8009ea0 <__sflush_r+0xec>
 8009e6a:	602e      	str	r6, [r5, #0]
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	e01e      	b.n	8009eae <__sflush_r+0xfa>
 8009e70:	690e      	ldr	r6, [r1, #16]
 8009e72:	2e00      	cmp	r6, #0
 8009e74:	d0fa      	beq.n	8009e6c <__sflush_r+0xb8>
 8009e76:	680f      	ldr	r7, [r1, #0]
 8009e78:	600e      	str	r6, [r1, #0]
 8009e7a:	1bba      	subs	r2, r7, r6
 8009e7c:	9201      	str	r2, [sp, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	079b      	lsls	r3, r3, #30
 8009e82:	d100      	bne.n	8009e86 <__sflush_r+0xd2>
 8009e84:	694a      	ldr	r2, [r1, #20]
 8009e86:	60a2      	str	r2, [r4, #8]
 8009e88:	9b01      	ldr	r3, [sp, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	ddee      	ble.n	8009e6c <__sflush_r+0xb8>
 8009e8e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009e90:	0032      	movs	r2, r6
 8009e92:	001f      	movs	r7, r3
 8009e94:	0028      	movs	r0, r5
 8009e96:	9b01      	ldr	r3, [sp, #4]
 8009e98:	6a21      	ldr	r1, [r4, #32]
 8009e9a:	47b8      	blx	r7
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	dc07      	bgt.n	8009eb0 <__sflush_r+0xfc>
 8009ea0:	89a2      	ldrh	r2, [r4, #12]
 8009ea2:	2340      	movs	r3, #64	@ 0x40
 8009ea4:	2001      	movs	r0, #1
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	b21b      	sxth	r3, r3
 8009eaa:	81a3      	strh	r3, [r4, #12]
 8009eac:	4240      	negs	r0, r0
 8009eae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009eb0:	9b01      	ldr	r3, [sp, #4]
 8009eb2:	1836      	adds	r6, r6, r0
 8009eb4:	1a1b      	subs	r3, r3, r0
 8009eb6:	9301      	str	r3, [sp, #4]
 8009eb8:	e7e6      	b.n	8009e88 <__sflush_r+0xd4>
 8009eba:	46c0      	nop			@ (mov r8, r8)
 8009ebc:	20400001 	.word	0x20400001

08009ec0 <_fflush_r>:
 8009ec0:	690b      	ldr	r3, [r1, #16]
 8009ec2:	b570      	push	{r4, r5, r6, lr}
 8009ec4:	0005      	movs	r5, r0
 8009ec6:	000c      	movs	r4, r1
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d102      	bne.n	8009ed2 <_fflush_r+0x12>
 8009ecc:	2500      	movs	r5, #0
 8009ece:	0028      	movs	r0, r5
 8009ed0:	bd70      	pop	{r4, r5, r6, pc}
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	d004      	beq.n	8009ee0 <_fflush_r+0x20>
 8009ed6:	6a03      	ldr	r3, [r0, #32]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d101      	bne.n	8009ee0 <_fflush_r+0x20>
 8009edc:	f7fd f9b4 	bl	8007248 <__sinit>
 8009ee0:	220c      	movs	r2, #12
 8009ee2:	5ea3      	ldrsh	r3, [r4, r2]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d0f1      	beq.n	8009ecc <_fflush_r+0xc>
 8009ee8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009eea:	07d2      	lsls	r2, r2, #31
 8009eec:	d404      	bmi.n	8009ef8 <_fflush_r+0x38>
 8009eee:	059b      	lsls	r3, r3, #22
 8009ef0:	d402      	bmi.n	8009ef8 <_fflush_r+0x38>
 8009ef2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ef4:	f7fd fb05 	bl	8007502 <__retarget_lock_acquire_recursive>
 8009ef8:	0028      	movs	r0, r5
 8009efa:	0021      	movs	r1, r4
 8009efc:	f7ff ff5a 	bl	8009db4 <__sflush_r>
 8009f00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f02:	0005      	movs	r5, r0
 8009f04:	07db      	lsls	r3, r3, #31
 8009f06:	d4e2      	bmi.n	8009ece <_fflush_r+0xe>
 8009f08:	89a3      	ldrh	r3, [r4, #12]
 8009f0a:	059b      	lsls	r3, r3, #22
 8009f0c:	d4df      	bmi.n	8009ece <_fflush_r+0xe>
 8009f0e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f10:	f7fd faf8 	bl	8007504 <__retarget_lock_release_recursive>
 8009f14:	e7db      	b.n	8009ece <_fflush_r+0xe>

08009f16 <memmove>:
 8009f16:	b510      	push	{r4, lr}
 8009f18:	4288      	cmp	r0, r1
 8009f1a:	d902      	bls.n	8009f22 <memmove+0xc>
 8009f1c:	188b      	adds	r3, r1, r2
 8009f1e:	4298      	cmp	r0, r3
 8009f20:	d308      	bcc.n	8009f34 <memmove+0x1e>
 8009f22:	2300      	movs	r3, #0
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d007      	beq.n	8009f38 <memmove+0x22>
 8009f28:	5ccc      	ldrb	r4, [r1, r3]
 8009f2a:	54c4      	strb	r4, [r0, r3]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	e7f9      	b.n	8009f24 <memmove+0xe>
 8009f30:	5c8b      	ldrb	r3, [r1, r2]
 8009f32:	5483      	strb	r3, [r0, r2]
 8009f34:	3a01      	subs	r2, #1
 8009f36:	d2fb      	bcs.n	8009f30 <memmove+0x1a>
 8009f38:	bd10      	pop	{r4, pc}

08009f3a <strncmp>:
 8009f3a:	b530      	push	{r4, r5, lr}
 8009f3c:	0005      	movs	r5, r0
 8009f3e:	1e10      	subs	r0, r2, #0
 8009f40:	d00b      	beq.n	8009f5a <strncmp+0x20>
 8009f42:	2400      	movs	r4, #0
 8009f44:	3a01      	subs	r2, #1
 8009f46:	5d2b      	ldrb	r3, [r5, r4]
 8009f48:	5d08      	ldrb	r0, [r1, r4]
 8009f4a:	4283      	cmp	r3, r0
 8009f4c:	d104      	bne.n	8009f58 <strncmp+0x1e>
 8009f4e:	4294      	cmp	r4, r2
 8009f50:	d002      	beq.n	8009f58 <strncmp+0x1e>
 8009f52:	3401      	adds	r4, #1
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1f6      	bne.n	8009f46 <strncmp+0xc>
 8009f58:	1a18      	subs	r0, r3, r0
 8009f5a:	bd30      	pop	{r4, r5, pc}

08009f5c <_sbrk_r>:
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	b570      	push	{r4, r5, r6, lr}
 8009f60:	4d06      	ldr	r5, [pc, #24]	@ (8009f7c <_sbrk_r+0x20>)
 8009f62:	0004      	movs	r4, r0
 8009f64:	0008      	movs	r0, r1
 8009f66:	602b      	str	r3, [r5, #0]
 8009f68:	f7f9 fa16 	bl	8003398 <_sbrk>
 8009f6c:	1c43      	adds	r3, r0, #1
 8009f6e:	d103      	bne.n	8009f78 <_sbrk_r+0x1c>
 8009f70:	682b      	ldr	r3, [r5, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d000      	beq.n	8009f78 <_sbrk_r+0x1c>
 8009f76:	6023      	str	r3, [r4, #0]
 8009f78:	bd70      	pop	{r4, r5, r6, pc}
 8009f7a:	46c0      	nop			@ (mov r8, r8)
 8009f7c:	20000c14 	.word	0x20000c14

08009f80 <memcpy>:
 8009f80:	2300      	movs	r3, #0
 8009f82:	b510      	push	{r4, lr}
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d100      	bne.n	8009f8a <memcpy+0xa>
 8009f88:	bd10      	pop	{r4, pc}
 8009f8a:	5ccc      	ldrb	r4, [r1, r3]
 8009f8c:	54c4      	strb	r4, [r0, r3]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	e7f8      	b.n	8009f84 <memcpy+0x4>
	...

08009f94 <nan>:
 8009f94:	2000      	movs	r0, #0
 8009f96:	4901      	ldr	r1, [pc, #4]	@ (8009f9c <nan+0x8>)
 8009f98:	4770      	bx	lr
 8009f9a:	46c0      	nop			@ (mov r8, r8)
 8009f9c:	7ff80000 	.word	0x7ff80000

08009fa0 <__assert_func>:
 8009fa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009fa2:	0014      	movs	r4, r2
 8009fa4:	001a      	movs	r2, r3
 8009fa6:	4b09      	ldr	r3, [pc, #36]	@ (8009fcc <__assert_func+0x2c>)
 8009fa8:	0005      	movs	r5, r0
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	000e      	movs	r6, r1
 8009fae:	68d8      	ldr	r0, [r3, #12]
 8009fb0:	4b07      	ldr	r3, [pc, #28]	@ (8009fd0 <__assert_func+0x30>)
 8009fb2:	2c00      	cmp	r4, #0
 8009fb4:	d101      	bne.n	8009fba <__assert_func+0x1a>
 8009fb6:	4b07      	ldr	r3, [pc, #28]	@ (8009fd4 <__assert_func+0x34>)
 8009fb8:	001c      	movs	r4, r3
 8009fba:	4907      	ldr	r1, [pc, #28]	@ (8009fd8 <__assert_func+0x38>)
 8009fbc:	9301      	str	r3, [sp, #4]
 8009fbe:	9402      	str	r4, [sp, #8]
 8009fc0:	002b      	movs	r3, r5
 8009fc2:	9600      	str	r6, [sp, #0]
 8009fc4:	f000 fbe2 	bl	800a78c <fiprintf>
 8009fc8:	f000 fbf0 	bl	800a7ac <abort>
 8009fcc:	20000018 	.word	0x20000018
 8009fd0:	0800af2a 	.word	0x0800af2a
 8009fd4:	0800af65 	.word	0x0800af65
 8009fd8:	0800af37 	.word	0x0800af37

08009fdc <_calloc_r>:
 8009fdc:	b570      	push	{r4, r5, r6, lr}
 8009fde:	0c0b      	lsrs	r3, r1, #16
 8009fe0:	0c15      	lsrs	r5, r2, #16
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d11e      	bne.n	800a024 <_calloc_r+0x48>
 8009fe6:	2d00      	cmp	r5, #0
 8009fe8:	d10c      	bne.n	800a004 <_calloc_r+0x28>
 8009fea:	b289      	uxth	r1, r1
 8009fec:	b294      	uxth	r4, r2
 8009fee:	434c      	muls	r4, r1
 8009ff0:	0021      	movs	r1, r4
 8009ff2:	f7fe f983 	bl	80082fc <_malloc_r>
 8009ff6:	1e05      	subs	r5, r0, #0
 8009ff8:	d01b      	beq.n	800a032 <_calloc_r+0x56>
 8009ffa:	0022      	movs	r2, r4
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	f7fd f9fb 	bl	80073f8 <memset>
 800a002:	e016      	b.n	800a032 <_calloc_r+0x56>
 800a004:	1c2b      	adds	r3, r5, #0
 800a006:	1c0c      	adds	r4, r1, #0
 800a008:	b289      	uxth	r1, r1
 800a00a:	b292      	uxth	r2, r2
 800a00c:	434a      	muls	r2, r1
 800a00e:	b29b      	uxth	r3, r3
 800a010:	b2a1      	uxth	r1, r4
 800a012:	4359      	muls	r1, r3
 800a014:	0c14      	lsrs	r4, r2, #16
 800a016:	190c      	adds	r4, r1, r4
 800a018:	0c23      	lsrs	r3, r4, #16
 800a01a:	d107      	bne.n	800a02c <_calloc_r+0x50>
 800a01c:	0424      	lsls	r4, r4, #16
 800a01e:	b292      	uxth	r2, r2
 800a020:	4314      	orrs	r4, r2
 800a022:	e7e5      	b.n	8009ff0 <_calloc_r+0x14>
 800a024:	2d00      	cmp	r5, #0
 800a026:	d101      	bne.n	800a02c <_calloc_r+0x50>
 800a028:	1c14      	adds	r4, r2, #0
 800a02a:	e7ed      	b.n	800a008 <_calloc_r+0x2c>
 800a02c:	230c      	movs	r3, #12
 800a02e:	2500      	movs	r5, #0
 800a030:	6003      	str	r3, [r0, #0]
 800a032:	0028      	movs	r0, r5
 800a034:	bd70      	pop	{r4, r5, r6, pc}

0800a036 <rshift>:
 800a036:	0002      	movs	r2, r0
 800a038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a03a:	6904      	ldr	r4, [r0, #16]
 800a03c:	b085      	sub	sp, #20
 800a03e:	3214      	adds	r2, #20
 800a040:	114b      	asrs	r3, r1, #5
 800a042:	0016      	movs	r6, r2
 800a044:	9302      	str	r3, [sp, #8]
 800a046:	429c      	cmp	r4, r3
 800a048:	dd31      	ble.n	800a0ae <rshift+0x78>
 800a04a:	261f      	movs	r6, #31
 800a04c:	000f      	movs	r7, r1
 800a04e:	009b      	lsls	r3, r3, #2
 800a050:	00a5      	lsls	r5, r4, #2
 800a052:	18d3      	adds	r3, r2, r3
 800a054:	4037      	ands	r7, r6
 800a056:	1955      	adds	r5, r2, r5
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	9701      	str	r7, [sp, #4]
 800a05c:	4231      	tst	r1, r6
 800a05e:	d10d      	bne.n	800a07c <rshift+0x46>
 800a060:	0016      	movs	r6, r2
 800a062:	0019      	movs	r1, r3
 800a064:	428d      	cmp	r5, r1
 800a066:	d836      	bhi.n	800a0d6 <rshift+0xa0>
 800a068:	9b00      	ldr	r3, [sp, #0]
 800a06a:	2600      	movs	r6, #0
 800a06c:	3b03      	subs	r3, #3
 800a06e:	429d      	cmp	r5, r3
 800a070:	d302      	bcc.n	800a078 <rshift+0x42>
 800a072:	9b02      	ldr	r3, [sp, #8]
 800a074:	1ae4      	subs	r4, r4, r3
 800a076:	00a6      	lsls	r6, r4, #2
 800a078:	1996      	adds	r6, r2, r6
 800a07a:	e018      	b.n	800a0ae <rshift+0x78>
 800a07c:	2120      	movs	r1, #32
 800a07e:	9e01      	ldr	r6, [sp, #4]
 800a080:	9f01      	ldr	r7, [sp, #4]
 800a082:	1b89      	subs	r1, r1, r6
 800a084:	9e00      	ldr	r6, [sp, #0]
 800a086:	9103      	str	r1, [sp, #12]
 800a088:	ce02      	ldmia	r6!, {r1}
 800a08a:	4694      	mov	ip, r2
 800a08c:	40f9      	lsrs	r1, r7
 800a08e:	42b5      	cmp	r5, r6
 800a090:	d816      	bhi.n	800a0c0 <rshift+0x8a>
 800a092:	9b00      	ldr	r3, [sp, #0]
 800a094:	2600      	movs	r6, #0
 800a096:	3301      	adds	r3, #1
 800a098:	429d      	cmp	r5, r3
 800a09a:	d303      	bcc.n	800a0a4 <rshift+0x6e>
 800a09c:	9b02      	ldr	r3, [sp, #8]
 800a09e:	1ae4      	subs	r4, r4, r3
 800a0a0:	00a6      	lsls	r6, r4, #2
 800a0a2:	3e04      	subs	r6, #4
 800a0a4:	1996      	adds	r6, r2, r6
 800a0a6:	6031      	str	r1, [r6, #0]
 800a0a8:	2900      	cmp	r1, #0
 800a0aa:	d000      	beq.n	800a0ae <rshift+0x78>
 800a0ac:	3604      	adds	r6, #4
 800a0ae:	1ab1      	subs	r1, r6, r2
 800a0b0:	1089      	asrs	r1, r1, #2
 800a0b2:	6101      	str	r1, [r0, #16]
 800a0b4:	4296      	cmp	r6, r2
 800a0b6:	d101      	bne.n	800a0bc <rshift+0x86>
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	6143      	str	r3, [r0, #20]
 800a0bc:	b005      	add	sp, #20
 800a0be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0c0:	6837      	ldr	r7, [r6, #0]
 800a0c2:	9b03      	ldr	r3, [sp, #12]
 800a0c4:	409f      	lsls	r7, r3
 800a0c6:	430f      	orrs	r7, r1
 800a0c8:	4661      	mov	r1, ip
 800a0ca:	c180      	stmia	r1!, {r7}
 800a0cc:	468c      	mov	ip, r1
 800a0ce:	9b01      	ldr	r3, [sp, #4]
 800a0d0:	ce02      	ldmia	r6!, {r1}
 800a0d2:	40d9      	lsrs	r1, r3
 800a0d4:	e7db      	b.n	800a08e <rshift+0x58>
 800a0d6:	c980      	ldmia	r1!, {r7}
 800a0d8:	c680      	stmia	r6!, {r7}
 800a0da:	e7c3      	b.n	800a064 <rshift+0x2e>

0800a0dc <__hexdig_fun>:
 800a0dc:	0002      	movs	r2, r0
 800a0de:	3a30      	subs	r2, #48	@ 0x30
 800a0e0:	0003      	movs	r3, r0
 800a0e2:	2a09      	cmp	r2, #9
 800a0e4:	d802      	bhi.n	800a0ec <__hexdig_fun+0x10>
 800a0e6:	3b20      	subs	r3, #32
 800a0e8:	b2d8      	uxtb	r0, r3
 800a0ea:	4770      	bx	lr
 800a0ec:	0002      	movs	r2, r0
 800a0ee:	3a61      	subs	r2, #97	@ 0x61
 800a0f0:	2a05      	cmp	r2, #5
 800a0f2:	d801      	bhi.n	800a0f8 <__hexdig_fun+0x1c>
 800a0f4:	3b47      	subs	r3, #71	@ 0x47
 800a0f6:	e7f7      	b.n	800a0e8 <__hexdig_fun+0xc>
 800a0f8:	001a      	movs	r2, r3
 800a0fa:	3a41      	subs	r2, #65	@ 0x41
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	2a05      	cmp	r2, #5
 800a100:	d8f3      	bhi.n	800a0ea <__hexdig_fun+0xe>
 800a102:	3b27      	subs	r3, #39	@ 0x27
 800a104:	e7f0      	b.n	800a0e8 <__hexdig_fun+0xc>
	...

0800a108 <__gethex>:
 800a108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a10a:	b089      	sub	sp, #36	@ 0x24
 800a10c:	9307      	str	r3, [sp, #28]
 800a10e:	680b      	ldr	r3, [r1, #0]
 800a110:	9201      	str	r2, [sp, #4]
 800a112:	9003      	str	r0, [sp, #12]
 800a114:	9106      	str	r1, [sp, #24]
 800a116:	1c9a      	adds	r2, r3, #2
 800a118:	0011      	movs	r1, r2
 800a11a:	3201      	adds	r2, #1
 800a11c:	1e50      	subs	r0, r2, #1
 800a11e:	7800      	ldrb	r0, [r0, #0]
 800a120:	2830      	cmp	r0, #48	@ 0x30
 800a122:	d0f9      	beq.n	800a118 <__gethex+0x10>
 800a124:	1acb      	subs	r3, r1, r3
 800a126:	3b02      	subs	r3, #2
 800a128:	9305      	str	r3, [sp, #20]
 800a12a:	9100      	str	r1, [sp, #0]
 800a12c:	f7ff ffd6 	bl	800a0dc <__hexdig_fun>
 800a130:	2300      	movs	r3, #0
 800a132:	001d      	movs	r5, r3
 800a134:	9302      	str	r3, [sp, #8]
 800a136:	4298      	cmp	r0, r3
 800a138:	d11e      	bne.n	800a178 <__gethex+0x70>
 800a13a:	2201      	movs	r2, #1
 800a13c:	49a6      	ldr	r1, [pc, #664]	@ (800a3d8 <__gethex+0x2d0>)
 800a13e:	9800      	ldr	r0, [sp, #0]
 800a140:	f7ff fefb 	bl	8009f3a <strncmp>
 800a144:	0007      	movs	r7, r0
 800a146:	42a8      	cmp	r0, r5
 800a148:	d000      	beq.n	800a14c <__gethex+0x44>
 800a14a:	e06a      	b.n	800a222 <__gethex+0x11a>
 800a14c:	9b00      	ldr	r3, [sp, #0]
 800a14e:	7858      	ldrb	r0, [r3, #1]
 800a150:	1c5c      	adds	r4, r3, #1
 800a152:	f7ff ffc3 	bl	800a0dc <__hexdig_fun>
 800a156:	2301      	movs	r3, #1
 800a158:	9302      	str	r3, [sp, #8]
 800a15a:	42a8      	cmp	r0, r5
 800a15c:	d02f      	beq.n	800a1be <__gethex+0xb6>
 800a15e:	9400      	str	r4, [sp, #0]
 800a160:	9b00      	ldr	r3, [sp, #0]
 800a162:	7818      	ldrb	r0, [r3, #0]
 800a164:	2830      	cmp	r0, #48	@ 0x30
 800a166:	d009      	beq.n	800a17c <__gethex+0x74>
 800a168:	f7ff ffb8 	bl	800a0dc <__hexdig_fun>
 800a16c:	4242      	negs	r2, r0
 800a16e:	4142      	adcs	r2, r0
 800a170:	2301      	movs	r3, #1
 800a172:	0025      	movs	r5, r4
 800a174:	9202      	str	r2, [sp, #8]
 800a176:	9305      	str	r3, [sp, #20]
 800a178:	9c00      	ldr	r4, [sp, #0]
 800a17a:	e004      	b.n	800a186 <__gethex+0x7e>
 800a17c:	9b00      	ldr	r3, [sp, #0]
 800a17e:	3301      	adds	r3, #1
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	e7ed      	b.n	800a160 <__gethex+0x58>
 800a184:	3401      	adds	r4, #1
 800a186:	7820      	ldrb	r0, [r4, #0]
 800a188:	f7ff ffa8 	bl	800a0dc <__hexdig_fun>
 800a18c:	1e07      	subs	r7, r0, #0
 800a18e:	d1f9      	bne.n	800a184 <__gethex+0x7c>
 800a190:	2201      	movs	r2, #1
 800a192:	0020      	movs	r0, r4
 800a194:	4990      	ldr	r1, [pc, #576]	@ (800a3d8 <__gethex+0x2d0>)
 800a196:	f7ff fed0 	bl	8009f3a <strncmp>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	d10d      	bne.n	800a1ba <__gethex+0xb2>
 800a19e:	2d00      	cmp	r5, #0
 800a1a0:	d106      	bne.n	800a1b0 <__gethex+0xa8>
 800a1a2:	3401      	adds	r4, #1
 800a1a4:	0025      	movs	r5, r4
 800a1a6:	7820      	ldrb	r0, [r4, #0]
 800a1a8:	f7ff ff98 	bl	800a0dc <__hexdig_fun>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	d102      	bne.n	800a1b6 <__gethex+0xae>
 800a1b0:	1b2d      	subs	r5, r5, r4
 800a1b2:	00af      	lsls	r7, r5, #2
 800a1b4:	e003      	b.n	800a1be <__gethex+0xb6>
 800a1b6:	3401      	adds	r4, #1
 800a1b8:	e7f5      	b.n	800a1a6 <__gethex+0x9e>
 800a1ba:	2d00      	cmp	r5, #0
 800a1bc:	d1f8      	bne.n	800a1b0 <__gethex+0xa8>
 800a1be:	2220      	movs	r2, #32
 800a1c0:	7823      	ldrb	r3, [r4, #0]
 800a1c2:	0026      	movs	r6, r4
 800a1c4:	4393      	bics	r3, r2
 800a1c6:	2b50      	cmp	r3, #80	@ 0x50
 800a1c8:	d11d      	bne.n	800a206 <__gethex+0xfe>
 800a1ca:	7863      	ldrb	r3, [r4, #1]
 800a1cc:	2b2b      	cmp	r3, #43	@ 0x2b
 800a1ce:	d02d      	beq.n	800a22c <__gethex+0x124>
 800a1d0:	2b2d      	cmp	r3, #45	@ 0x2d
 800a1d2:	d02f      	beq.n	800a234 <__gethex+0x12c>
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	1c66      	adds	r6, r4, #1
 800a1d8:	9304      	str	r3, [sp, #16]
 800a1da:	7830      	ldrb	r0, [r6, #0]
 800a1dc:	f7ff ff7e 	bl	800a0dc <__hexdig_fun>
 800a1e0:	1e43      	subs	r3, r0, #1
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	0005      	movs	r5, r0
 800a1e6:	2b18      	cmp	r3, #24
 800a1e8:	d82a      	bhi.n	800a240 <__gethex+0x138>
 800a1ea:	7870      	ldrb	r0, [r6, #1]
 800a1ec:	f7ff ff76 	bl	800a0dc <__hexdig_fun>
 800a1f0:	1e43      	subs	r3, r0, #1
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	3601      	adds	r6, #1
 800a1f6:	3d10      	subs	r5, #16
 800a1f8:	2b18      	cmp	r3, #24
 800a1fa:	d91d      	bls.n	800a238 <__gethex+0x130>
 800a1fc:	9b04      	ldr	r3, [sp, #16]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d000      	beq.n	800a204 <__gethex+0xfc>
 800a202:	426d      	negs	r5, r5
 800a204:	197f      	adds	r7, r7, r5
 800a206:	9b06      	ldr	r3, [sp, #24]
 800a208:	601e      	str	r6, [r3, #0]
 800a20a:	9b02      	ldr	r3, [sp, #8]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d019      	beq.n	800a244 <__gethex+0x13c>
 800a210:	9b05      	ldr	r3, [sp, #20]
 800a212:	2606      	movs	r6, #6
 800a214:	425a      	negs	r2, r3
 800a216:	4153      	adcs	r3, r2
 800a218:	425b      	negs	r3, r3
 800a21a:	401e      	ands	r6, r3
 800a21c:	0030      	movs	r0, r6
 800a21e:	b009      	add	sp, #36	@ 0x24
 800a220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a222:	2301      	movs	r3, #1
 800a224:	2700      	movs	r7, #0
 800a226:	9c00      	ldr	r4, [sp, #0]
 800a228:	9302      	str	r3, [sp, #8]
 800a22a:	e7c8      	b.n	800a1be <__gethex+0xb6>
 800a22c:	2300      	movs	r3, #0
 800a22e:	9304      	str	r3, [sp, #16]
 800a230:	1ca6      	adds	r6, r4, #2
 800a232:	e7d2      	b.n	800a1da <__gethex+0xd2>
 800a234:	2301      	movs	r3, #1
 800a236:	e7fa      	b.n	800a22e <__gethex+0x126>
 800a238:	230a      	movs	r3, #10
 800a23a:	435d      	muls	r5, r3
 800a23c:	182d      	adds	r5, r5, r0
 800a23e:	e7d4      	b.n	800a1ea <__gethex+0xe2>
 800a240:	0026      	movs	r6, r4
 800a242:	e7e0      	b.n	800a206 <__gethex+0xfe>
 800a244:	9b00      	ldr	r3, [sp, #0]
 800a246:	9902      	ldr	r1, [sp, #8]
 800a248:	1ae3      	subs	r3, r4, r3
 800a24a:	3b01      	subs	r3, #1
 800a24c:	2b07      	cmp	r3, #7
 800a24e:	dc0a      	bgt.n	800a266 <__gethex+0x15e>
 800a250:	9803      	ldr	r0, [sp, #12]
 800a252:	f7fe f8e3 	bl	800841c <_Balloc>
 800a256:	1e05      	subs	r5, r0, #0
 800a258:	d108      	bne.n	800a26c <__gethex+0x164>
 800a25a:	002a      	movs	r2, r5
 800a25c:	21e4      	movs	r1, #228	@ 0xe4
 800a25e:	4b5f      	ldr	r3, [pc, #380]	@ (800a3dc <__gethex+0x2d4>)
 800a260:	485f      	ldr	r0, [pc, #380]	@ (800a3e0 <__gethex+0x2d8>)
 800a262:	f7ff fe9d 	bl	8009fa0 <__assert_func>
 800a266:	3101      	adds	r1, #1
 800a268:	105b      	asrs	r3, r3, #1
 800a26a:	e7ef      	b.n	800a24c <__gethex+0x144>
 800a26c:	0003      	movs	r3, r0
 800a26e:	3314      	adds	r3, #20
 800a270:	9302      	str	r3, [sp, #8]
 800a272:	9305      	str	r3, [sp, #20]
 800a274:	2300      	movs	r3, #0
 800a276:	001e      	movs	r6, r3
 800a278:	9304      	str	r3, [sp, #16]
 800a27a:	9b00      	ldr	r3, [sp, #0]
 800a27c:	42a3      	cmp	r3, r4
 800a27e:	d338      	bcc.n	800a2f2 <__gethex+0x1ea>
 800a280:	9c05      	ldr	r4, [sp, #20]
 800a282:	9b02      	ldr	r3, [sp, #8]
 800a284:	c440      	stmia	r4!, {r6}
 800a286:	1ae4      	subs	r4, r4, r3
 800a288:	10a4      	asrs	r4, r4, #2
 800a28a:	0030      	movs	r0, r6
 800a28c:	612c      	str	r4, [r5, #16]
 800a28e:	f7fe f9bd 	bl	800860c <__hi0bits>
 800a292:	9b01      	ldr	r3, [sp, #4]
 800a294:	0164      	lsls	r4, r4, #5
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	1a26      	subs	r6, r4, r0
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	429e      	cmp	r6, r3
 800a29e:	dd52      	ble.n	800a346 <__gethex+0x23e>
 800a2a0:	1af6      	subs	r6, r6, r3
 800a2a2:	0031      	movs	r1, r6
 800a2a4:	0028      	movs	r0, r5
 800a2a6:	f7fe fd58 	bl	8008d5a <__any_on>
 800a2aa:	1e04      	subs	r4, r0, #0
 800a2ac:	d00f      	beq.n	800a2ce <__gethex+0x1c6>
 800a2ae:	2401      	movs	r4, #1
 800a2b0:	211f      	movs	r1, #31
 800a2b2:	0020      	movs	r0, r4
 800a2b4:	1e73      	subs	r3, r6, #1
 800a2b6:	4019      	ands	r1, r3
 800a2b8:	4088      	lsls	r0, r1
 800a2ba:	0001      	movs	r1, r0
 800a2bc:	115a      	asrs	r2, r3, #5
 800a2be:	9802      	ldr	r0, [sp, #8]
 800a2c0:	0092      	lsls	r2, r2, #2
 800a2c2:	5812      	ldr	r2, [r2, r0]
 800a2c4:	420a      	tst	r2, r1
 800a2c6:	d002      	beq.n	800a2ce <__gethex+0x1c6>
 800a2c8:	42a3      	cmp	r3, r4
 800a2ca:	dc34      	bgt.n	800a336 <__gethex+0x22e>
 800a2cc:	2402      	movs	r4, #2
 800a2ce:	0031      	movs	r1, r6
 800a2d0:	0028      	movs	r0, r5
 800a2d2:	f7ff feb0 	bl	800a036 <rshift>
 800a2d6:	19bf      	adds	r7, r7, r6
 800a2d8:	9b01      	ldr	r3, [sp, #4]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	42bb      	cmp	r3, r7
 800a2de:	da42      	bge.n	800a366 <__gethex+0x25e>
 800a2e0:	0029      	movs	r1, r5
 800a2e2:	9803      	ldr	r0, [sp, #12]
 800a2e4:	f7fe f8de 	bl	80084a4 <_Bfree>
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2ec:	26a3      	movs	r6, #163	@ 0xa3
 800a2ee:	6013      	str	r3, [r2, #0]
 800a2f0:	e794      	b.n	800a21c <__gethex+0x114>
 800a2f2:	3c01      	subs	r4, #1
 800a2f4:	7823      	ldrb	r3, [r4, #0]
 800a2f6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2f8:	d012      	beq.n	800a320 <__gethex+0x218>
 800a2fa:	9b04      	ldr	r3, [sp, #16]
 800a2fc:	2b20      	cmp	r3, #32
 800a2fe:	d104      	bne.n	800a30a <__gethex+0x202>
 800a300:	9b05      	ldr	r3, [sp, #20]
 800a302:	c340      	stmia	r3!, {r6}
 800a304:	2600      	movs	r6, #0
 800a306:	9305      	str	r3, [sp, #20]
 800a308:	9604      	str	r6, [sp, #16]
 800a30a:	7820      	ldrb	r0, [r4, #0]
 800a30c:	f7ff fee6 	bl	800a0dc <__hexdig_fun>
 800a310:	230f      	movs	r3, #15
 800a312:	4018      	ands	r0, r3
 800a314:	9b04      	ldr	r3, [sp, #16]
 800a316:	4098      	lsls	r0, r3
 800a318:	3304      	adds	r3, #4
 800a31a:	4306      	orrs	r6, r0
 800a31c:	9304      	str	r3, [sp, #16]
 800a31e:	e7ac      	b.n	800a27a <__gethex+0x172>
 800a320:	9b00      	ldr	r3, [sp, #0]
 800a322:	42a3      	cmp	r3, r4
 800a324:	d8e9      	bhi.n	800a2fa <__gethex+0x1f2>
 800a326:	2201      	movs	r2, #1
 800a328:	0020      	movs	r0, r4
 800a32a:	492b      	ldr	r1, [pc, #172]	@ (800a3d8 <__gethex+0x2d0>)
 800a32c:	f7ff fe05 	bl	8009f3a <strncmp>
 800a330:	2800      	cmp	r0, #0
 800a332:	d1e2      	bne.n	800a2fa <__gethex+0x1f2>
 800a334:	e7a1      	b.n	800a27a <__gethex+0x172>
 800a336:	0028      	movs	r0, r5
 800a338:	1eb1      	subs	r1, r6, #2
 800a33a:	f7fe fd0e 	bl	8008d5a <__any_on>
 800a33e:	2800      	cmp	r0, #0
 800a340:	d0c4      	beq.n	800a2cc <__gethex+0x1c4>
 800a342:	2403      	movs	r4, #3
 800a344:	e7c3      	b.n	800a2ce <__gethex+0x1c6>
 800a346:	9b00      	ldr	r3, [sp, #0]
 800a348:	2400      	movs	r4, #0
 800a34a:	429e      	cmp	r6, r3
 800a34c:	dac4      	bge.n	800a2d8 <__gethex+0x1d0>
 800a34e:	1b9e      	subs	r6, r3, r6
 800a350:	0029      	movs	r1, r5
 800a352:	0032      	movs	r2, r6
 800a354:	9803      	ldr	r0, [sp, #12]
 800a356:	f7fe fac7 	bl	80088e8 <__lshift>
 800a35a:	0003      	movs	r3, r0
 800a35c:	3314      	adds	r3, #20
 800a35e:	0005      	movs	r5, r0
 800a360:	1bbf      	subs	r7, r7, r6
 800a362:	9302      	str	r3, [sp, #8]
 800a364:	e7b8      	b.n	800a2d8 <__gethex+0x1d0>
 800a366:	9b01      	ldr	r3, [sp, #4]
 800a368:	685e      	ldr	r6, [r3, #4]
 800a36a:	42be      	cmp	r6, r7
 800a36c:	dd6f      	ble.n	800a44e <__gethex+0x346>
 800a36e:	9b00      	ldr	r3, [sp, #0]
 800a370:	1bf6      	subs	r6, r6, r7
 800a372:	42b3      	cmp	r3, r6
 800a374:	dc36      	bgt.n	800a3e4 <__gethex+0x2dc>
 800a376:	9b01      	ldr	r3, [sp, #4]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d024      	beq.n	800a3c8 <__gethex+0x2c0>
 800a37e:	2b03      	cmp	r3, #3
 800a380:	d026      	beq.n	800a3d0 <__gethex+0x2c8>
 800a382:	2b01      	cmp	r3, #1
 800a384:	d117      	bne.n	800a3b6 <__gethex+0x2ae>
 800a386:	9b00      	ldr	r3, [sp, #0]
 800a388:	42b3      	cmp	r3, r6
 800a38a:	d114      	bne.n	800a3b6 <__gethex+0x2ae>
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d10b      	bne.n	800a3a8 <__gethex+0x2a0>
 800a390:	9b01      	ldr	r3, [sp, #4]
 800a392:	9a07      	ldr	r2, [sp, #28]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	2662      	movs	r6, #98	@ 0x62
 800a398:	6013      	str	r3, [r2, #0]
 800a39a:	2301      	movs	r3, #1
 800a39c:	9a02      	ldr	r2, [sp, #8]
 800a39e:	612b      	str	r3, [r5, #16]
 800a3a0:	6013      	str	r3, [r2, #0]
 800a3a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3a4:	601d      	str	r5, [r3, #0]
 800a3a6:	e739      	b.n	800a21c <__gethex+0x114>
 800a3a8:	9900      	ldr	r1, [sp, #0]
 800a3aa:	0028      	movs	r0, r5
 800a3ac:	3901      	subs	r1, #1
 800a3ae:	f7fe fcd4 	bl	8008d5a <__any_on>
 800a3b2:	2800      	cmp	r0, #0
 800a3b4:	d1ec      	bne.n	800a390 <__gethex+0x288>
 800a3b6:	0029      	movs	r1, r5
 800a3b8:	9803      	ldr	r0, [sp, #12]
 800a3ba:	f7fe f873 	bl	80084a4 <_Bfree>
 800a3be:	2300      	movs	r3, #0
 800a3c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3c2:	2650      	movs	r6, #80	@ 0x50
 800a3c4:	6013      	str	r3, [r2, #0]
 800a3c6:	e729      	b.n	800a21c <__gethex+0x114>
 800a3c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d1f3      	bne.n	800a3b6 <__gethex+0x2ae>
 800a3ce:	e7df      	b.n	800a390 <__gethex+0x288>
 800a3d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1dc      	bne.n	800a390 <__gethex+0x288>
 800a3d6:	e7ee      	b.n	800a3b6 <__gethex+0x2ae>
 800a3d8:	0800af0f 	.word	0x0800af0f
 800a3dc:	0800aea5 	.word	0x0800aea5
 800a3e0:	0800af66 	.word	0x0800af66
 800a3e4:	1e77      	subs	r7, r6, #1
 800a3e6:	2c00      	cmp	r4, #0
 800a3e8:	d12f      	bne.n	800a44a <__gethex+0x342>
 800a3ea:	2f00      	cmp	r7, #0
 800a3ec:	d004      	beq.n	800a3f8 <__gethex+0x2f0>
 800a3ee:	0039      	movs	r1, r7
 800a3f0:	0028      	movs	r0, r5
 800a3f2:	f7fe fcb2 	bl	8008d5a <__any_on>
 800a3f6:	0004      	movs	r4, r0
 800a3f8:	231f      	movs	r3, #31
 800a3fa:	117a      	asrs	r2, r7, #5
 800a3fc:	401f      	ands	r7, r3
 800a3fe:	3b1e      	subs	r3, #30
 800a400:	40bb      	lsls	r3, r7
 800a402:	9902      	ldr	r1, [sp, #8]
 800a404:	0092      	lsls	r2, r2, #2
 800a406:	5852      	ldr	r2, [r2, r1]
 800a408:	421a      	tst	r2, r3
 800a40a:	d001      	beq.n	800a410 <__gethex+0x308>
 800a40c:	2302      	movs	r3, #2
 800a40e:	431c      	orrs	r4, r3
 800a410:	9b00      	ldr	r3, [sp, #0]
 800a412:	0031      	movs	r1, r6
 800a414:	1b9b      	subs	r3, r3, r6
 800a416:	2602      	movs	r6, #2
 800a418:	0028      	movs	r0, r5
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	f7ff fe0b 	bl	800a036 <rshift>
 800a420:	9b01      	ldr	r3, [sp, #4]
 800a422:	685f      	ldr	r7, [r3, #4]
 800a424:	2c00      	cmp	r4, #0
 800a426:	d03f      	beq.n	800a4a8 <__gethex+0x3a0>
 800a428:	9b01      	ldr	r3, [sp, #4]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d010      	beq.n	800a452 <__gethex+0x34a>
 800a430:	2b03      	cmp	r3, #3
 800a432:	d012      	beq.n	800a45a <__gethex+0x352>
 800a434:	2b01      	cmp	r3, #1
 800a436:	d106      	bne.n	800a446 <__gethex+0x33e>
 800a438:	07a2      	lsls	r2, r4, #30
 800a43a:	d504      	bpl.n	800a446 <__gethex+0x33e>
 800a43c:	9a02      	ldr	r2, [sp, #8]
 800a43e:	6812      	ldr	r2, [r2, #0]
 800a440:	4314      	orrs	r4, r2
 800a442:	421c      	tst	r4, r3
 800a444:	d10c      	bne.n	800a460 <__gethex+0x358>
 800a446:	2310      	movs	r3, #16
 800a448:	e02d      	b.n	800a4a6 <__gethex+0x39e>
 800a44a:	2401      	movs	r4, #1
 800a44c:	e7d4      	b.n	800a3f8 <__gethex+0x2f0>
 800a44e:	2601      	movs	r6, #1
 800a450:	e7e8      	b.n	800a424 <__gethex+0x31c>
 800a452:	2301      	movs	r3, #1
 800a454:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a456:	1a9b      	subs	r3, r3, r2
 800a458:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a45a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d0f2      	beq.n	800a446 <__gethex+0x33e>
 800a460:	692b      	ldr	r3, [r5, #16]
 800a462:	2000      	movs	r0, #0
 800a464:	9302      	str	r3, [sp, #8]
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	9304      	str	r3, [sp, #16]
 800a46a:	002b      	movs	r3, r5
 800a46c:	9a04      	ldr	r2, [sp, #16]
 800a46e:	3314      	adds	r3, #20
 800a470:	1899      	adds	r1, r3, r2
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	1c54      	adds	r4, r2, #1
 800a476:	d01c      	beq.n	800a4b2 <__gethex+0x3aa>
 800a478:	3201      	adds	r2, #1
 800a47a:	601a      	str	r2, [r3, #0]
 800a47c:	002b      	movs	r3, r5
 800a47e:	3314      	adds	r3, #20
 800a480:	2e02      	cmp	r6, #2
 800a482:	d13f      	bne.n	800a504 <__gethex+0x3fc>
 800a484:	9a01      	ldr	r2, [sp, #4]
 800a486:	9900      	ldr	r1, [sp, #0]
 800a488:	6812      	ldr	r2, [r2, #0]
 800a48a:	3a01      	subs	r2, #1
 800a48c:	428a      	cmp	r2, r1
 800a48e:	d109      	bne.n	800a4a4 <__gethex+0x39c>
 800a490:	000a      	movs	r2, r1
 800a492:	201f      	movs	r0, #31
 800a494:	4010      	ands	r0, r2
 800a496:	2201      	movs	r2, #1
 800a498:	4082      	lsls	r2, r0
 800a49a:	1149      	asrs	r1, r1, #5
 800a49c:	0089      	lsls	r1, r1, #2
 800a49e:	58cb      	ldr	r3, [r1, r3]
 800a4a0:	4213      	tst	r3, r2
 800a4a2:	d13d      	bne.n	800a520 <__gethex+0x418>
 800a4a4:	2320      	movs	r3, #32
 800a4a6:	431e      	orrs	r6, r3
 800a4a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4aa:	601d      	str	r5, [r3, #0]
 800a4ac:	9b07      	ldr	r3, [sp, #28]
 800a4ae:	601f      	str	r7, [r3, #0]
 800a4b0:	e6b4      	b.n	800a21c <__gethex+0x114>
 800a4b2:	c301      	stmia	r3!, {r0}
 800a4b4:	4299      	cmp	r1, r3
 800a4b6:	d8dc      	bhi.n	800a472 <__gethex+0x36a>
 800a4b8:	68ab      	ldr	r3, [r5, #8]
 800a4ba:	9a02      	ldr	r2, [sp, #8]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	db18      	blt.n	800a4f2 <__gethex+0x3ea>
 800a4c0:	6869      	ldr	r1, [r5, #4]
 800a4c2:	9803      	ldr	r0, [sp, #12]
 800a4c4:	3101      	adds	r1, #1
 800a4c6:	f7fd ffa9 	bl	800841c <_Balloc>
 800a4ca:	1e04      	subs	r4, r0, #0
 800a4cc:	d104      	bne.n	800a4d8 <__gethex+0x3d0>
 800a4ce:	0022      	movs	r2, r4
 800a4d0:	2184      	movs	r1, #132	@ 0x84
 800a4d2:	4b1d      	ldr	r3, [pc, #116]	@ (800a548 <__gethex+0x440>)
 800a4d4:	481d      	ldr	r0, [pc, #116]	@ (800a54c <__gethex+0x444>)
 800a4d6:	e6c4      	b.n	800a262 <__gethex+0x15a>
 800a4d8:	0029      	movs	r1, r5
 800a4da:	692a      	ldr	r2, [r5, #16]
 800a4dc:	310c      	adds	r1, #12
 800a4de:	3202      	adds	r2, #2
 800a4e0:	0092      	lsls	r2, r2, #2
 800a4e2:	300c      	adds	r0, #12
 800a4e4:	f7ff fd4c 	bl	8009f80 <memcpy>
 800a4e8:	0029      	movs	r1, r5
 800a4ea:	9803      	ldr	r0, [sp, #12]
 800a4ec:	f7fd ffda 	bl	80084a4 <_Bfree>
 800a4f0:	0025      	movs	r5, r4
 800a4f2:	692b      	ldr	r3, [r5, #16]
 800a4f4:	1c5a      	adds	r2, r3, #1
 800a4f6:	612a      	str	r2, [r5, #16]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	3304      	adds	r3, #4
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	18eb      	adds	r3, r5, r3
 800a500:	605a      	str	r2, [r3, #4]
 800a502:	e7bb      	b.n	800a47c <__gethex+0x374>
 800a504:	692a      	ldr	r2, [r5, #16]
 800a506:	9902      	ldr	r1, [sp, #8]
 800a508:	428a      	cmp	r2, r1
 800a50a:	dd0b      	ble.n	800a524 <__gethex+0x41c>
 800a50c:	2101      	movs	r1, #1
 800a50e:	0028      	movs	r0, r5
 800a510:	f7ff fd91 	bl	800a036 <rshift>
 800a514:	9b01      	ldr	r3, [sp, #4]
 800a516:	3701      	adds	r7, #1
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	42bb      	cmp	r3, r7
 800a51c:	da00      	bge.n	800a520 <__gethex+0x418>
 800a51e:	e6df      	b.n	800a2e0 <__gethex+0x1d8>
 800a520:	2601      	movs	r6, #1
 800a522:	e7bf      	b.n	800a4a4 <__gethex+0x39c>
 800a524:	221f      	movs	r2, #31
 800a526:	9c00      	ldr	r4, [sp, #0]
 800a528:	9900      	ldr	r1, [sp, #0]
 800a52a:	4014      	ands	r4, r2
 800a52c:	4211      	tst	r1, r2
 800a52e:	d0f7      	beq.n	800a520 <__gethex+0x418>
 800a530:	9a04      	ldr	r2, [sp, #16]
 800a532:	189b      	adds	r3, r3, r2
 800a534:	3b04      	subs	r3, #4
 800a536:	6818      	ldr	r0, [r3, #0]
 800a538:	f7fe f868 	bl	800860c <__hi0bits>
 800a53c:	2320      	movs	r3, #32
 800a53e:	1b1b      	subs	r3, r3, r4
 800a540:	4298      	cmp	r0, r3
 800a542:	dbe3      	blt.n	800a50c <__gethex+0x404>
 800a544:	e7ec      	b.n	800a520 <__gethex+0x418>
 800a546:	46c0      	nop			@ (mov r8, r8)
 800a548:	0800aea5 	.word	0x0800aea5
 800a54c:	0800af66 	.word	0x0800af66

0800a550 <L_shift>:
 800a550:	2308      	movs	r3, #8
 800a552:	b570      	push	{r4, r5, r6, lr}
 800a554:	2520      	movs	r5, #32
 800a556:	1a9a      	subs	r2, r3, r2
 800a558:	0092      	lsls	r2, r2, #2
 800a55a:	1aad      	subs	r5, r5, r2
 800a55c:	6843      	ldr	r3, [r0, #4]
 800a55e:	6804      	ldr	r4, [r0, #0]
 800a560:	001e      	movs	r6, r3
 800a562:	40ae      	lsls	r6, r5
 800a564:	40d3      	lsrs	r3, r2
 800a566:	4334      	orrs	r4, r6
 800a568:	6004      	str	r4, [r0, #0]
 800a56a:	6043      	str	r3, [r0, #4]
 800a56c:	3004      	adds	r0, #4
 800a56e:	4288      	cmp	r0, r1
 800a570:	d3f4      	bcc.n	800a55c <L_shift+0xc>
 800a572:	bd70      	pop	{r4, r5, r6, pc}

0800a574 <__match>:
 800a574:	b530      	push	{r4, r5, lr}
 800a576:	6803      	ldr	r3, [r0, #0]
 800a578:	780c      	ldrb	r4, [r1, #0]
 800a57a:	3301      	adds	r3, #1
 800a57c:	2c00      	cmp	r4, #0
 800a57e:	d102      	bne.n	800a586 <__match+0x12>
 800a580:	6003      	str	r3, [r0, #0]
 800a582:	2001      	movs	r0, #1
 800a584:	bd30      	pop	{r4, r5, pc}
 800a586:	781a      	ldrb	r2, [r3, #0]
 800a588:	0015      	movs	r5, r2
 800a58a:	3d41      	subs	r5, #65	@ 0x41
 800a58c:	2d19      	cmp	r5, #25
 800a58e:	d800      	bhi.n	800a592 <__match+0x1e>
 800a590:	3220      	adds	r2, #32
 800a592:	3101      	adds	r1, #1
 800a594:	42a2      	cmp	r2, r4
 800a596:	d0ef      	beq.n	800a578 <__match+0x4>
 800a598:	2000      	movs	r0, #0
 800a59a:	e7f3      	b.n	800a584 <__match+0x10>

0800a59c <__hexnan>:
 800a59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a59e:	680b      	ldr	r3, [r1, #0]
 800a5a0:	b08b      	sub	sp, #44	@ 0x2c
 800a5a2:	9201      	str	r2, [sp, #4]
 800a5a4:	9901      	ldr	r1, [sp, #4]
 800a5a6:	115a      	asrs	r2, r3, #5
 800a5a8:	0092      	lsls	r2, r2, #2
 800a5aa:	188a      	adds	r2, r1, r2
 800a5ac:	9202      	str	r2, [sp, #8]
 800a5ae:	0019      	movs	r1, r3
 800a5b0:	221f      	movs	r2, #31
 800a5b2:	4011      	ands	r1, r2
 800a5b4:	9008      	str	r0, [sp, #32]
 800a5b6:	9106      	str	r1, [sp, #24]
 800a5b8:	4213      	tst	r3, r2
 800a5ba:	d002      	beq.n	800a5c2 <__hexnan+0x26>
 800a5bc:	9b02      	ldr	r3, [sp, #8]
 800a5be:	3304      	adds	r3, #4
 800a5c0:	9302      	str	r3, [sp, #8]
 800a5c2:	9b02      	ldr	r3, [sp, #8]
 800a5c4:	2500      	movs	r5, #0
 800a5c6:	1f1f      	subs	r7, r3, #4
 800a5c8:	003e      	movs	r6, r7
 800a5ca:	003c      	movs	r4, r7
 800a5cc:	9b08      	ldr	r3, [sp, #32]
 800a5ce:	603d      	str	r5, [r7, #0]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	9507      	str	r5, [sp, #28]
 800a5d4:	9305      	str	r3, [sp, #20]
 800a5d6:	9503      	str	r5, [sp, #12]
 800a5d8:	9b05      	ldr	r3, [sp, #20]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5de:	9b05      	ldr	r3, [sp, #20]
 800a5e0:	785b      	ldrb	r3, [r3, #1]
 800a5e2:	9304      	str	r3, [sp, #16]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d028      	beq.n	800a63a <__hexnan+0x9e>
 800a5e8:	9804      	ldr	r0, [sp, #16]
 800a5ea:	f7ff fd77 	bl	800a0dc <__hexdig_fun>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d155      	bne.n	800a69e <__hexnan+0x102>
 800a5f2:	9b04      	ldr	r3, [sp, #16]
 800a5f4:	2b20      	cmp	r3, #32
 800a5f6:	d819      	bhi.n	800a62c <__hexnan+0x90>
 800a5f8:	9b03      	ldr	r3, [sp, #12]
 800a5fa:	9a07      	ldr	r2, [sp, #28]
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	dd12      	ble.n	800a626 <__hexnan+0x8a>
 800a600:	42b4      	cmp	r4, r6
 800a602:	d206      	bcs.n	800a612 <__hexnan+0x76>
 800a604:	2d07      	cmp	r5, #7
 800a606:	dc04      	bgt.n	800a612 <__hexnan+0x76>
 800a608:	002a      	movs	r2, r5
 800a60a:	0031      	movs	r1, r6
 800a60c:	0020      	movs	r0, r4
 800a60e:	f7ff ff9f 	bl	800a550 <L_shift>
 800a612:	9b01      	ldr	r3, [sp, #4]
 800a614:	2508      	movs	r5, #8
 800a616:	429c      	cmp	r4, r3
 800a618:	d905      	bls.n	800a626 <__hexnan+0x8a>
 800a61a:	1f26      	subs	r6, r4, #4
 800a61c:	2500      	movs	r5, #0
 800a61e:	0034      	movs	r4, r6
 800a620:	9b03      	ldr	r3, [sp, #12]
 800a622:	6035      	str	r5, [r6, #0]
 800a624:	9307      	str	r3, [sp, #28]
 800a626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a628:	9305      	str	r3, [sp, #20]
 800a62a:	e7d5      	b.n	800a5d8 <__hexnan+0x3c>
 800a62c:	9b04      	ldr	r3, [sp, #16]
 800a62e:	2b29      	cmp	r3, #41	@ 0x29
 800a630:	d15a      	bne.n	800a6e8 <__hexnan+0x14c>
 800a632:	9b05      	ldr	r3, [sp, #20]
 800a634:	9a08      	ldr	r2, [sp, #32]
 800a636:	3302      	adds	r3, #2
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	9b03      	ldr	r3, [sp, #12]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d053      	beq.n	800a6e8 <__hexnan+0x14c>
 800a640:	42b4      	cmp	r4, r6
 800a642:	d206      	bcs.n	800a652 <__hexnan+0xb6>
 800a644:	2d07      	cmp	r5, #7
 800a646:	dc04      	bgt.n	800a652 <__hexnan+0xb6>
 800a648:	002a      	movs	r2, r5
 800a64a:	0031      	movs	r1, r6
 800a64c:	0020      	movs	r0, r4
 800a64e:	f7ff ff7f 	bl	800a550 <L_shift>
 800a652:	9b01      	ldr	r3, [sp, #4]
 800a654:	429c      	cmp	r4, r3
 800a656:	d936      	bls.n	800a6c6 <__hexnan+0x12a>
 800a658:	001a      	movs	r2, r3
 800a65a:	0023      	movs	r3, r4
 800a65c:	cb02      	ldmia	r3!, {r1}
 800a65e:	c202      	stmia	r2!, {r1}
 800a660:	429f      	cmp	r7, r3
 800a662:	d2fb      	bcs.n	800a65c <__hexnan+0xc0>
 800a664:	9b02      	ldr	r3, [sp, #8]
 800a666:	1c62      	adds	r2, r4, #1
 800a668:	1ed9      	subs	r1, r3, #3
 800a66a:	2304      	movs	r3, #4
 800a66c:	4291      	cmp	r1, r2
 800a66e:	d305      	bcc.n	800a67c <__hexnan+0xe0>
 800a670:	9b02      	ldr	r3, [sp, #8]
 800a672:	3b04      	subs	r3, #4
 800a674:	1b1b      	subs	r3, r3, r4
 800a676:	089b      	lsrs	r3, r3, #2
 800a678:	3301      	adds	r3, #1
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	9a01      	ldr	r2, [sp, #4]
 800a67e:	18d3      	adds	r3, r2, r3
 800a680:	2200      	movs	r2, #0
 800a682:	c304      	stmia	r3!, {r2}
 800a684:	429f      	cmp	r7, r3
 800a686:	d2fc      	bcs.n	800a682 <__hexnan+0xe6>
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d104      	bne.n	800a698 <__hexnan+0xfc>
 800a68e:	9b01      	ldr	r3, [sp, #4]
 800a690:	429f      	cmp	r7, r3
 800a692:	d127      	bne.n	800a6e4 <__hexnan+0x148>
 800a694:	2301      	movs	r3, #1
 800a696:	603b      	str	r3, [r7, #0]
 800a698:	2005      	movs	r0, #5
 800a69a:	b00b      	add	sp, #44	@ 0x2c
 800a69c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a69e:	9b03      	ldr	r3, [sp, #12]
 800a6a0:	3501      	adds	r5, #1
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	9303      	str	r3, [sp, #12]
 800a6a6:	2d08      	cmp	r5, #8
 800a6a8:	dd06      	ble.n	800a6b8 <__hexnan+0x11c>
 800a6aa:	9b01      	ldr	r3, [sp, #4]
 800a6ac:	429c      	cmp	r4, r3
 800a6ae:	d9ba      	bls.n	800a626 <__hexnan+0x8a>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	2501      	movs	r5, #1
 800a6b4:	3c04      	subs	r4, #4
 800a6b6:	6023      	str	r3, [r4, #0]
 800a6b8:	220f      	movs	r2, #15
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	4010      	ands	r0, r2
 800a6be:	011b      	lsls	r3, r3, #4
 800a6c0:	4303      	orrs	r3, r0
 800a6c2:	6023      	str	r3, [r4, #0]
 800a6c4:	e7af      	b.n	800a626 <__hexnan+0x8a>
 800a6c6:	9b06      	ldr	r3, [sp, #24]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d0dd      	beq.n	800a688 <__hexnan+0xec>
 800a6cc:	2320      	movs	r3, #32
 800a6ce:	9a06      	ldr	r2, [sp, #24]
 800a6d0:	9902      	ldr	r1, [sp, #8]
 800a6d2:	1a9b      	subs	r3, r3, r2
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	4252      	negs	r2, r2
 800a6d8:	40da      	lsrs	r2, r3
 800a6da:	3904      	subs	r1, #4
 800a6dc:	680b      	ldr	r3, [r1, #0]
 800a6de:	4013      	ands	r3, r2
 800a6e0:	600b      	str	r3, [r1, #0]
 800a6e2:	e7d1      	b.n	800a688 <__hexnan+0xec>
 800a6e4:	3f04      	subs	r7, #4
 800a6e6:	e7cf      	b.n	800a688 <__hexnan+0xec>
 800a6e8:	2004      	movs	r0, #4
 800a6ea:	e7d6      	b.n	800a69a <__hexnan+0xfe>

0800a6ec <__ascii_mbtowc>:
 800a6ec:	b082      	sub	sp, #8
 800a6ee:	2900      	cmp	r1, #0
 800a6f0:	d100      	bne.n	800a6f4 <__ascii_mbtowc+0x8>
 800a6f2:	a901      	add	r1, sp, #4
 800a6f4:	1e10      	subs	r0, r2, #0
 800a6f6:	d006      	beq.n	800a706 <__ascii_mbtowc+0x1a>
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d006      	beq.n	800a70a <__ascii_mbtowc+0x1e>
 800a6fc:	7813      	ldrb	r3, [r2, #0]
 800a6fe:	600b      	str	r3, [r1, #0]
 800a700:	7810      	ldrb	r0, [r2, #0]
 800a702:	1e43      	subs	r3, r0, #1
 800a704:	4198      	sbcs	r0, r3
 800a706:	b002      	add	sp, #8
 800a708:	4770      	bx	lr
 800a70a:	2002      	movs	r0, #2
 800a70c:	4240      	negs	r0, r0
 800a70e:	e7fa      	b.n	800a706 <__ascii_mbtowc+0x1a>

0800a710 <_realloc_r>:
 800a710:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a712:	0006      	movs	r6, r0
 800a714:	000c      	movs	r4, r1
 800a716:	0015      	movs	r5, r2
 800a718:	2900      	cmp	r1, #0
 800a71a:	d105      	bne.n	800a728 <_realloc_r+0x18>
 800a71c:	0011      	movs	r1, r2
 800a71e:	f7fd fded 	bl	80082fc <_malloc_r>
 800a722:	0004      	movs	r4, r0
 800a724:	0020      	movs	r0, r4
 800a726:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a728:	2a00      	cmp	r2, #0
 800a72a:	d103      	bne.n	800a734 <_realloc_r+0x24>
 800a72c:	f7fd fd70 	bl	8008210 <_free_r>
 800a730:	002c      	movs	r4, r5
 800a732:	e7f7      	b.n	800a724 <_realloc_r+0x14>
 800a734:	f000 f841 	bl	800a7ba <_malloc_usable_size_r>
 800a738:	0007      	movs	r7, r0
 800a73a:	4285      	cmp	r5, r0
 800a73c:	d802      	bhi.n	800a744 <_realloc_r+0x34>
 800a73e:	0843      	lsrs	r3, r0, #1
 800a740:	42ab      	cmp	r3, r5
 800a742:	d3ef      	bcc.n	800a724 <_realloc_r+0x14>
 800a744:	0029      	movs	r1, r5
 800a746:	0030      	movs	r0, r6
 800a748:	f7fd fdd8 	bl	80082fc <_malloc_r>
 800a74c:	9001      	str	r0, [sp, #4]
 800a74e:	2800      	cmp	r0, #0
 800a750:	d101      	bne.n	800a756 <_realloc_r+0x46>
 800a752:	9c01      	ldr	r4, [sp, #4]
 800a754:	e7e6      	b.n	800a724 <_realloc_r+0x14>
 800a756:	002a      	movs	r2, r5
 800a758:	42bd      	cmp	r5, r7
 800a75a:	d900      	bls.n	800a75e <_realloc_r+0x4e>
 800a75c:	003a      	movs	r2, r7
 800a75e:	0021      	movs	r1, r4
 800a760:	9801      	ldr	r0, [sp, #4]
 800a762:	f7ff fc0d 	bl	8009f80 <memcpy>
 800a766:	0021      	movs	r1, r4
 800a768:	0030      	movs	r0, r6
 800a76a:	f7fd fd51 	bl	8008210 <_free_r>
 800a76e:	e7f0      	b.n	800a752 <_realloc_r+0x42>

0800a770 <__ascii_wctomb>:
 800a770:	0003      	movs	r3, r0
 800a772:	1e08      	subs	r0, r1, #0
 800a774:	d005      	beq.n	800a782 <__ascii_wctomb+0x12>
 800a776:	2aff      	cmp	r2, #255	@ 0xff
 800a778:	d904      	bls.n	800a784 <__ascii_wctomb+0x14>
 800a77a:	228a      	movs	r2, #138	@ 0x8a
 800a77c:	2001      	movs	r0, #1
 800a77e:	601a      	str	r2, [r3, #0]
 800a780:	4240      	negs	r0, r0
 800a782:	4770      	bx	lr
 800a784:	2001      	movs	r0, #1
 800a786:	700a      	strb	r2, [r1, #0]
 800a788:	e7fb      	b.n	800a782 <__ascii_wctomb+0x12>
	...

0800a78c <fiprintf>:
 800a78c:	b40e      	push	{r1, r2, r3}
 800a78e:	b517      	push	{r0, r1, r2, r4, lr}
 800a790:	4c05      	ldr	r4, [pc, #20]	@ (800a7a8 <fiprintf+0x1c>)
 800a792:	ab05      	add	r3, sp, #20
 800a794:	cb04      	ldmia	r3!, {r2}
 800a796:	0001      	movs	r1, r0
 800a798:	6820      	ldr	r0, [r4, #0]
 800a79a:	9301      	str	r3, [sp, #4]
 800a79c:	f000 f83c 	bl	800a818 <_vfiprintf_r>
 800a7a0:	bc1e      	pop	{r1, r2, r3, r4}
 800a7a2:	bc08      	pop	{r3}
 800a7a4:	b003      	add	sp, #12
 800a7a6:	4718      	bx	r3
 800a7a8:	20000018 	.word	0x20000018

0800a7ac <abort>:
 800a7ac:	2006      	movs	r0, #6
 800a7ae:	b510      	push	{r4, lr}
 800a7b0:	f000 fa18 	bl	800abe4 <raise>
 800a7b4:	2001      	movs	r0, #1
 800a7b6:	f7f8 fd7d 	bl	80032b4 <_exit>

0800a7ba <_malloc_usable_size_r>:
 800a7ba:	1f0b      	subs	r3, r1, #4
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	1f18      	subs	r0, r3, #4
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	da01      	bge.n	800a7c8 <_malloc_usable_size_r+0xe>
 800a7c4:	580b      	ldr	r3, [r1, r0]
 800a7c6:	18c0      	adds	r0, r0, r3
 800a7c8:	4770      	bx	lr

0800a7ca <__sfputc_r>:
 800a7ca:	6893      	ldr	r3, [r2, #8]
 800a7cc:	b510      	push	{r4, lr}
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	6093      	str	r3, [r2, #8]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	da04      	bge.n	800a7e0 <__sfputc_r+0x16>
 800a7d6:	6994      	ldr	r4, [r2, #24]
 800a7d8:	42a3      	cmp	r3, r4
 800a7da:	db07      	blt.n	800a7ec <__sfputc_r+0x22>
 800a7dc:	290a      	cmp	r1, #10
 800a7de:	d005      	beq.n	800a7ec <__sfputc_r+0x22>
 800a7e0:	6813      	ldr	r3, [r2, #0]
 800a7e2:	1c58      	adds	r0, r3, #1
 800a7e4:	6010      	str	r0, [r2, #0]
 800a7e6:	7019      	strb	r1, [r3, #0]
 800a7e8:	0008      	movs	r0, r1
 800a7ea:	bd10      	pop	{r4, pc}
 800a7ec:	f000 f930 	bl	800aa50 <__swbuf_r>
 800a7f0:	0001      	movs	r1, r0
 800a7f2:	e7f9      	b.n	800a7e8 <__sfputc_r+0x1e>

0800a7f4 <__sfputs_r>:
 800a7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f6:	0006      	movs	r6, r0
 800a7f8:	000f      	movs	r7, r1
 800a7fa:	0014      	movs	r4, r2
 800a7fc:	18d5      	adds	r5, r2, r3
 800a7fe:	42ac      	cmp	r4, r5
 800a800:	d101      	bne.n	800a806 <__sfputs_r+0x12>
 800a802:	2000      	movs	r0, #0
 800a804:	e007      	b.n	800a816 <__sfputs_r+0x22>
 800a806:	7821      	ldrb	r1, [r4, #0]
 800a808:	003a      	movs	r2, r7
 800a80a:	0030      	movs	r0, r6
 800a80c:	f7ff ffdd 	bl	800a7ca <__sfputc_r>
 800a810:	3401      	adds	r4, #1
 800a812:	1c43      	adds	r3, r0, #1
 800a814:	d1f3      	bne.n	800a7fe <__sfputs_r+0xa>
 800a816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a818 <_vfiprintf_r>:
 800a818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a81a:	b0a1      	sub	sp, #132	@ 0x84
 800a81c:	000f      	movs	r7, r1
 800a81e:	0015      	movs	r5, r2
 800a820:	001e      	movs	r6, r3
 800a822:	9003      	str	r0, [sp, #12]
 800a824:	2800      	cmp	r0, #0
 800a826:	d004      	beq.n	800a832 <_vfiprintf_r+0x1a>
 800a828:	6a03      	ldr	r3, [r0, #32]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d101      	bne.n	800a832 <_vfiprintf_r+0x1a>
 800a82e:	f7fc fd0b 	bl	8007248 <__sinit>
 800a832:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a834:	07db      	lsls	r3, r3, #31
 800a836:	d405      	bmi.n	800a844 <_vfiprintf_r+0x2c>
 800a838:	89bb      	ldrh	r3, [r7, #12]
 800a83a:	059b      	lsls	r3, r3, #22
 800a83c:	d402      	bmi.n	800a844 <_vfiprintf_r+0x2c>
 800a83e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a840:	f7fc fe5f 	bl	8007502 <__retarget_lock_acquire_recursive>
 800a844:	89bb      	ldrh	r3, [r7, #12]
 800a846:	071b      	lsls	r3, r3, #28
 800a848:	d502      	bpl.n	800a850 <_vfiprintf_r+0x38>
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d113      	bne.n	800a878 <_vfiprintf_r+0x60>
 800a850:	0039      	movs	r1, r7
 800a852:	9803      	ldr	r0, [sp, #12]
 800a854:	f000 f93e 	bl	800aad4 <__swsetup_r>
 800a858:	2800      	cmp	r0, #0
 800a85a:	d00d      	beq.n	800a878 <_vfiprintf_r+0x60>
 800a85c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a85e:	07db      	lsls	r3, r3, #31
 800a860:	d503      	bpl.n	800a86a <_vfiprintf_r+0x52>
 800a862:	2001      	movs	r0, #1
 800a864:	4240      	negs	r0, r0
 800a866:	b021      	add	sp, #132	@ 0x84
 800a868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a86a:	89bb      	ldrh	r3, [r7, #12]
 800a86c:	059b      	lsls	r3, r3, #22
 800a86e:	d4f8      	bmi.n	800a862 <_vfiprintf_r+0x4a>
 800a870:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a872:	f7fc fe47 	bl	8007504 <__retarget_lock_release_recursive>
 800a876:	e7f4      	b.n	800a862 <_vfiprintf_r+0x4a>
 800a878:	2300      	movs	r3, #0
 800a87a:	ac08      	add	r4, sp, #32
 800a87c:	6163      	str	r3, [r4, #20]
 800a87e:	3320      	adds	r3, #32
 800a880:	7663      	strb	r3, [r4, #25]
 800a882:	3310      	adds	r3, #16
 800a884:	76a3      	strb	r3, [r4, #26]
 800a886:	9607      	str	r6, [sp, #28]
 800a888:	002e      	movs	r6, r5
 800a88a:	7833      	ldrb	r3, [r6, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <_vfiprintf_r+0x7c>
 800a890:	2b25      	cmp	r3, #37	@ 0x25
 800a892:	d148      	bne.n	800a926 <_vfiprintf_r+0x10e>
 800a894:	1b73      	subs	r3, r6, r5
 800a896:	9305      	str	r3, [sp, #20]
 800a898:	42ae      	cmp	r6, r5
 800a89a:	d00b      	beq.n	800a8b4 <_vfiprintf_r+0x9c>
 800a89c:	002a      	movs	r2, r5
 800a89e:	0039      	movs	r1, r7
 800a8a0:	9803      	ldr	r0, [sp, #12]
 800a8a2:	f7ff ffa7 	bl	800a7f4 <__sfputs_r>
 800a8a6:	3001      	adds	r0, #1
 800a8a8:	d100      	bne.n	800a8ac <_vfiprintf_r+0x94>
 800a8aa:	e0ae      	b.n	800aa0a <_vfiprintf_r+0x1f2>
 800a8ac:	6963      	ldr	r3, [r4, #20]
 800a8ae:	9a05      	ldr	r2, [sp, #20]
 800a8b0:	189b      	adds	r3, r3, r2
 800a8b2:	6163      	str	r3, [r4, #20]
 800a8b4:	7833      	ldrb	r3, [r6, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d100      	bne.n	800a8bc <_vfiprintf_r+0xa4>
 800a8ba:	e0a6      	b.n	800aa0a <_vfiprintf_r+0x1f2>
 800a8bc:	2201      	movs	r2, #1
 800a8be:	2300      	movs	r3, #0
 800a8c0:	4252      	negs	r2, r2
 800a8c2:	6062      	str	r2, [r4, #4]
 800a8c4:	a904      	add	r1, sp, #16
 800a8c6:	3254      	adds	r2, #84	@ 0x54
 800a8c8:	1852      	adds	r2, r2, r1
 800a8ca:	1c75      	adds	r5, r6, #1
 800a8cc:	6023      	str	r3, [r4, #0]
 800a8ce:	60e3      	str	r3, [r4, #12]
 800a8d0:	60a3      	str	r3, [r4, #8]
 800a8d2:	7013      	strb	r3, [r2, #0]
 800a8d4:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a8d6:	4b59      	ldr	r3, [pc, #356]	@ (800aa3c <_vfiprintf_r+0x224>)
 800a8d8:	2205      	movs	r2, #5
 800a8da:	0018      	movs	r0, r3
 800a8dc:	7829      	ldrb	r1, [r5, #0]
 800a8de:	9305      	str	r3, [sp, #20]
 800a8e0:	f7fc fe11 	bl	8007506 <memchr>
 800a8e4:	1c6e      	adds	r6, r5, #1
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	d11f      	bne.n	800a92a <_vfiprintf_r+0x112>
 800a8ea:	6822      	ldr	r2, [r4, #0]
 800a8ec:	06d3      	lsls	r3, r2, #27
 800a8ee:	d504      	bpl.n	800a8fa <_vfiprintf_r+0xe2>
 800a8f0:	2353      	movs	r3, #83	@ 0x53
 800a8f2:	a904      	add	r1, sp, #16
 800a8f4:	185b      	adds	r3, r3, r1
 800a8f6:	2120      	movs	r1, #32
 800a8f8:	7019      	strb	r1, [r3, #0]
 800a8fa:	0713      	lsls	r3, r2, #28
 800a8fc:	d504      	bpl.n	800a908 <_vfiprintf_r+0xf0>
 800a8fe:	2353      	movs	r3, #83	@ 0x53
 800a900:	a904      	add	r1, sp, #16
 800a902:	185b      	adds	r3, r3, r1
 800a904:	212b      	movs	r1, #43	@ 0x2b
 800a906:	7019      	strb	r1, [r3, #0]
 800a908:	782b      	ldrb	r3, [r5, #0]
 800a90a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a90c:	d016      	beq.n	800a93c <_vfiprintf_r+0x124>
 800a90e:	002e      	movs	r6, r5
 800a910:	2100      	movs	r1, #0
 800a912:	200a      	movs	r0, #10
 800a914:	68e3      	ldr	r3, [r4, #12]
 800a916:	7832      	ldrb	r2, [r6, #0]
 800a918:	1c75      	adds	r5, r6, #1
 800a91a:	3a30      	subs	r2, #48	@ 0x30
 800a91c:	2a09      	cmp	r2, #9
 800a91e:	d950      	bls.n	800a9c2 <_vfiprintf_r+0x1aa>
 800a920:	2900      	cmp	r1, #0
 800a922:	d111      	bne.n	800a948 <_vfiprintf_r+0x130>
 800a924:	e017      	b.n	800a956 <_vfiprintf_r+0x13e>
 800a926:	3601      	adds	r6, #1
 800a928:	e7af      	b.n	800a88a <_vfiprintf_r+0x72>
 800a92a:	9b05      	ldr	r3, [sp, #20]
 800a92c:	6822      	ldr	r2, [r4, #0]
 800a92e:	1ac0      	subs	r0, r0, r3
 800a930:	2301      	movs	r3, #1
 800a932:	4083      	lsls	r3, r0
 800a934:	4313      	orrs	r3, r2
 800a936:	0035      	movs	r5, r6
 800a938:	6023      	str	r3, [r4, #0]
 800a93a:	e7cc      	b.n	800a8d6 <_vfiprintf_r+0xbe>
 800a93c:	9b07      	ldr	r3, [sp, #28]
 800a93e:	1d19      	adds	r1, r3, #4
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	9107      	str	r1, [sp, #28]
 800a944:	2b00      	cmp	r3, #0
 800a946:	db01      	blt.n	800a94c <_vfiprintf_r+0x134>
 800a948:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a94a:	e004      	b.n	800a956 <_vfiprintf_r+0x13e>
 800a94c:	425b      	negs	r3, r3
 800a94e:	60e3      	str	r3, [r4, #12]
 800a950:	2302      	movs	r3, #2
 800a952:	4313      	orrs	r3, r2
 800a954:	6023      	str	r3, [r4, #0]
 800a956:	7833      	ldrb	r3, [r6, #0]
 800a958:	2b2e      	cmp	r3, #46	@ 0x2e
 800a95a:	d10c      	bne.n	800a976 <_vfiprintf_r+0x15e>
 800a95c:	7873      	ldrb	r3, [r6, #1]
 800a95e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a960:	d134      	bne.n	800a9cc <_vfiprintf_r+0x1b4>
 800a962:	9b07      	ldr	r3, [sp, #28]
 800a964:	3602      	adds	r6, #2
 800a966:	1d1a      	adds	r2, r3, #4
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	9207      	str	r2, [sp, #28]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	da01      	bge.n	800a974 <_vfiprintf_r+0x15c>
 800a970:	2301      	movs	r3, #1
 800a972:	425b      	negs	r3, r3
 800a974:	9309      	str	r3, [sp, #36]	@ 0x24
 800a976:	4d32      	ldr	r5, [pc, #200]	@ (800aa40 <_vfiprintf_r+0x228>)
 800a978:	2203      	movs	r2, #3
 800a97a:	0028      	movs	r0, r5
 800a97c:	7831      	ldrb	r1, [r6, #0]
 800a97e:	f7fc fdc2 	bl	8007506 <memchr>
 800a982:	2800      	cmp	r0, #0
 800a984:	d006      	beq.n	800a994 <_vfiprintf_r+0x17c>
 800a986:	2340      	movs	r3, #64	@ 0x40
 800a988:	1b40      	subs	r0, r0, r5
 800a98a:	4083      	lsls	r3, r0
 800a98c:	6822      	ldr	r2, [r4, #0]
 800a98e:	3601      	adds	r6, #1
 800a990:	4313      	orrs	r3, r2
 800a992:	6023      	str	r3, [r4, #0]
 800a994:	7831      	ldrb	r1, [r6, #0]
 800a996:	2206      	movs	r2, #6
 800a998:	482a      	ldr	r0, [pc, #168]	@ (800aa44 <_vfiprintf_r+0x22c>)
 800a99a:	1c75      	adds	r5, r6, #1
 800a99c:	7621      	strb	r1, [r4, #24]
 800a99e:	f7fc fdb2 	bl	8007506 <memchr>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	d040      	beq.n	800aa28 <_vfiprintf_r+0x210>
 800a9a6:	4b28      	ldr	r3, [pc, #160]	@ (800aa48 <_vfiprintf_r+0x230>)
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d122      	bne.n	800a9f2 <_vfiprintf_r+0x1da>
 800a9ac:	2207      	movs	r2, #7
 800a9ae:	9b07      	ldr	r3, [sp, #28]
 800a9b0:	3307      	adds	r3, #7
 800a9b2:	4393      	bics	r3, r2
 800a9b4:	3308      	adds	r3, #8
 800a9b6:	9307      	str	r3, [sp, #28]
 800a9b8:	6963      	ldr	r3, [r4, #20]
 800a9ba:	9a04      	ldr	r2, [sp, #16]
 800a9bc:	189b      	adds	r3, r3, r2
 800a9be:	6163      	str	r3, [r4, #20]
 800a9c0:	e762      	b.n	800a888 <_vfiprintf_r+0x70>
 800a9c2:	4343      	muls	r3, r0
 800a9c4:	002e      	movs	r6, r5
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	189b      	adds	r3, r3, r2
 800a9ca:	e7a4      	b.n	800a916 <_vfiprintf_r+0xfe>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	200a      	movs	r0, #10
 800a9d0:	0019      	movs	r1, r3
 800a9d2:	3601      	adds	r6, #1
 800a9d4:	6063      	str	r3, [r4, #4]
 800a9d6:	7832      	ldrb	r2, [r6, #0]
 800a9d8:	1c75      	adds	r5, r6, #1
 800a9da:	3a30      	subs	r2, #48	@ 0x30
 800a9dc:	2a09      	cmp	r2, #9
 800a9de:	d903      	bls.n	800a9e8 <_vfiprintf_r+0x1d0>
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d0c8      	beq.n	800a976 <_vfiprintf_r+0x15e>
 800a9e4:	9109      	str	r1, [sp, #36]	@ 0x24
 800a9e6:	e7c6      	b.n	800a976 <_vfiprintf_r+0x15e>
 800a9e8:	4341      	muls	r1, r0
 800a9ea:	002e      	movs	r6, r5
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	1889      	adds	r1, r1, r2
 800a9f0:	e7f1      	b.n	800a9d6 <_vfiprintf_r+0x1be>
 800a9f2:	aa07      	add	r2, sp, #28
 800a9f4:	9200      	str	r2, [sp, #0]
 800a9f6:	0021      	movs	r1, r4
 800a9f8:	003a      	movs	r2, r7
 800a9fa:	4b14      	ldr	r3, [pc, #80]	@ (800aa4c <_vfiprintf_r+0x234>)
 800a9fc:	9803      	ldr	r0, [sp, #12]
 800a9fe:	f7fb fdcd 	bl	800659c <_printf_float>
 800aa02:	9004      	str	r0, [sp, #16]
 800aa04:	9b04      	ldr	r3, [sp, #16]
 800aa06:	3301      	adds	r3, #1
 800aa08:	d1d6      	bne.n	800a9b8 <_vfiprintf_r+0x1a0>
 800aa0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aa0c:	07db      	lsls	r3, r3, #31
 800aa0e:	d405      	bmi.n	800aa1c <_vfiprintf_r+0x204>
 800aa10:	89bb      	ldrh	r3, [r7, #12]
 800aa12:	059b      	lsls	r3, r3, #22
 800aa14:	d402      	bmi.n	800aa1c <_vfiprintf_r+0x204>
 800aa16:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800aa18:	f7fc fd74 	bl	8007504 <__retarget_lock_release_recursive>
 800aa1c:	89bb      	ldrh	r3, [r7, #12]
 800aa1e:	065b      	lsls	r3, r3, #25
 800aa20:	d500      	bpl.n	800aa24 <_vfiprintf_r+0x20c>
 800aa22:	e71e      	b.n	800a862 <_vfiprintf_r+0x4a>
 800aa24:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800aa26:	e71e      	b.n	800a866 <_vfiprintf_r+0x4e>
 800aa28:	aa07      	add	r2, sp, #28
 800aa2a:	9200      	str	r2, [sp, #0]
 800aa2c:	0021      	movs	r1, r4
 800aa2e:	003a      	movs	r2, r7
 800aa30:	4b06      	ldr	r3, [pc, #24]	@ (800aa4c <_vfiprintf_r+0x234>)
 800aa32:	9803      	ldr	r0, [sp, #12]
 800aa34:	f7fc f860 	bl	8006af8 <_printf_i>
 800aa38:	e7e3      	b.n	800aa02 <_vfiprintf_r+0x1ea>
 800aa3a:	46c0      	nop			@ (mov r8, r8)
 800aa3c:	0800af11 	.word	0x0800af11
 800aa40:	0800af17 	.word	0x0800af17
 800aa44:	0800af1b 	.word	0x0800af1b
 800aa48:	0800659d 	.word	0x0800659d
 800aa4c:	0800a7f5 	.word	0x0800a7f5

0800aa50 <__swbuf_r>:
 800aa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa52:	0006      	movs	r6, r0
 800aa54:	000d      	movs	r5, r1
 800aa56:	0014      	movs	r4, r2
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	d004      	beq.n	800aa66 <__swbuf_r+0x16>
 800aa5c:	6a03      	ldr	r3, [r0, #32]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d101      	bne.n	800aa66 <__swbuf_r+0x16>
 800aa62:	f7fc fbf1 	bl	8007248 <__sinit>
 800aa66:	69a3      	ldr	r3, [r4, #24]
 800aa68:	60a3      	str	r3, [r4, #8]
 800aa6a:	89a3      	ldrh	r3, [r4, #12]
 800aa6c:	071b      	lsls	r3, r3, #28
 800aa6e:	d502      	bpl.n	800aa76 <__swbuf_r+0x26>
 800aa70:	6923      	ldr	r3, [r4, #16]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d109      	bne.n	800aa8a <__swbuf_r+0x3a>
 800aa76:	0021      	movs	r1, r4
 800aa78:	0030      	movs	r0, r6
 800aa7a:	f000 f82b 	bl	800aad4 <__swsetup_r>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	d003      	beq.n	800aa8a <__swbuf_r+0x3a>
 800aa82:	2501      	movs	r5, #1
 800aa84:	426d      	negs	r5, r5
 800aa86:	0028      	movs	r0, r5
 800aa88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa8a:	6923      	ldr	r3, [r4, #16]
 800aa8c:	6820      	ldr	r0, [r4, #0]
 800aa8e:	b2ef      	uxtb	r7, r5
 800aa90:	1ac0      	subs	r0, r0, r3
 800aa92:	6963      	ldr	r3, [r4, #20]
 800aa94:	b2ed      	uxtb	r5, r5
 800aa96:	4283      	cmp	r3, r0
 800aa98:	dc05      	bgt.n	800aaa6 <__swbuf_r+0x56>
 800aa9a:	0021      	movs	r1, r4
 800aa9c:	0030      	movs	r0, r6
 800aa9e:	f7ff fa0f 	bl	8009ec0 <_fflush_r>
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	d1ed      	bne.n	800aa82 <__swbuf_r+0x32>
 800aaa6:	68a3      	ldr	r3, [r4, #8]
 800aaa8:	3001      	adds	r0, #1
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	60a3      	str	r3, [r4, #8]
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	1c5a      	adds	r2, r3, #1
 800aab2:	6022      	str	r2, [r4, #0]
 800aab4:	701f      	strb	r7, [r3, #0]
 800aab6:	6963      	ldr	r3, [r4, #20]
 800aab8:	4283      	cmp	r3, r0
 800aaba:	d004      	beq.n	800aac6 <__swbuf_r+0x76>
 800aabc:	89a3      	ldrh	r3, [r4, #12]
 800aabe:	07db      	lsls	r3, r3, #31
 800aac0:	d5e1      	bpl.n	800aa86 <__swbuf_r+0x36>
 800aac2:	2d0a      	cmp	r5, #10
 800aac4:	d1df      	bne.n	800aa86 <__swbuf_r+0x36>
 800aac6:	0021      	movs	r1, r4
 800aac8:	0030      	movs	r0, r6
 800aaca:	f7ff f9f9 	bl	8009ec0 <_fflush_r>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d0d9      	beq.n	800aa86 <__swbuf_r+0x36>
 800aad2:	e7d6      	b.n	800aa82 <__swbuf_r+0x32>

0800aad4 <__swsetup_r>:
 800aad4:	4b2d      	ldr	r3, [pc, #180]	@ (800ab8c <__swsetup_r+0xb8>)
 800aad6:	b570      	push	{r4, r5, r6, lr}
 800aad8:	0005      	movs	r5, r0
 800aada:	6818      	ldr	r0, [r3, #0]
 800aadc:	000c      	movs	r4, r1
 800aade:	2800      	cmp	r0, #0
 800aae0:	d004      	beq.n	800aaec <__swsetup_r+0x18>
 800aae2:	6a03      	ldr	r3, [r0, #32]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d101      	bne.n	800aaec <__swsetup_r+0x18>
 800aae8:	f7fc fbae 	bl	8007248 <__sinit>
 800aaec:	220c      	movs	r2, #12
 800aaee:	5ea3      	ldrsh	r3, [r4, r2]
 800aaf0:	071a      	lsls	r2, r3, #28
 800aaf2:	d423      	bmi.n	800ab3c <__swsetup_r+0x68>
 800aaf4:	06da      	lsls	r2, r3, #27
 800aaf6:	d407      	bmi.n	800ab08 <__swsetup_r+0x34>
 800aaf8:	2209      	movs	r2, #9
 800aafa:	602a      	str	r2, [r5, #0]
 800aafc:	2240      	movs	r2, #64	@ 0x40
 800aafe:	2001      	movs	r0, #1
 800ab00:	4313      	orrs	r3, r2
 800ab02:	81a3      	strh	r3, [r4, #12]
 800ab04:	4240      	negs	r0, r0
 800ab06:	e03a      	b.n	800ab7e <__swsetup_r+0xaa>
 800ab08:	075b      	lsls	r3, r3, #29
 800ab0a:	d513      	bpl.n	800ab34 <__swsetup_r+0x60>
 800ab0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab0e:	2900      	cmp	r1, #0
 800ab10:	d008      	beq.n	800ab24 <__swsetup_r+0x50>
 800ab12:	0023      	movs	r3, r4
 800ab14:	3344      	adds	r3, #68	@ 0x44
 800ab16:	4299      	cmp	r1, r3
 800ab18:	d002      	beq.n	800ab20 <__swsetup_r+0x4c>
 800ab1a:	0028      	movs	r0, r5
 800ab1c:	f7fd fb78 	bl	8008210 <_free_r>
 800ab20:	2300      	movs	r3, #0
 800ab22:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab24:	2224      	movs	r2, #36	@ 0x24
 800ab26:	89a3      	ldrh	r3, [r4, #12]
 800ab28:	4393      	bics	r3, r2
 800ab2a:	81a3      	strh	r3, [r4, #12]
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	6063      	str	r3, [r4, #4]
 800ab30:	6923      	ldr	r3, [r4, #16]
 800ab32:	6023      	str	r3, [r4, #0]
 800ab34:	2308      	movs	r3, #8
 800ab36:	89a2      	ldrh	r2, [r4, #12]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	81a3      	strh	r3, [r4, #12]
 800ab3c:	6923      	ldr	r3, [r4, #16]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d10b      	bne.n	800ab5a <__swsetup_r+0x86>
 800ab42:	21a0      	movs	r1, #160	@ 0xa0
 800ab44:	2280      	movs	r2, #128	@ 0x80
 800ab46:	89a3      	ldrh	r3, [r4, #12]
 800ab48:	0089      	lsls	r1, r1, #2
 800ab4a:	0092      	lsls	r2, r2, #2
 800ab4c:	400b      	ands	r3, r1
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d003      	beq.n	800ab5a <__swsetup_r+0x86>
 800ab52:	0021      	movs	r1, r4
 800ab54:	0028      	movs	r0, r5
 800ab56:	f000 f88f 	bl	800ac78 <__smakebuf_r>
 800ab5a:	220c      	movs	r2, #12
 800ab5c:	5ea3      	ldrsh	r3, [r4, r2]
 800ab5e:	2101      	movs	r1, #1
 800ab60:	001a      	movs	r2, r3
 800ab62:	400a      	ands	r2, r1
 800ab64:	420b      	tst	r3, r1
 800ab66:	d00b      	beq.n	800ab80 <__swsetup_r+0xac>
 800ab68:	2200      	movs	r2, #0
 800ab6a:	60a2      	str	r2, [r4, #8]
 800ab6c:	6962      	ldr	r2, [r4, #20]
 800ab6e:	4252      	negs	r2, r2
 800ab70:	61a2      	str	r2, [r4, #24]
 800ab72:	2000      	movs	r0, #0
 800ab74:	6922      	ldr	r2, [r4, #16]
 800ab76:	4282      	cmp	r2, r0
 800ab78:	d101      	bne.n	800ab7e <__swsetup_r+0xaa>
 800ab7a:	061a      	lsls	r2, r3, #24
 800ab7c:	d4be      	bmi.n	800aafc <__swsetup_r+0x28>
 800ab7e:	bd70      	pop	{r4, r5, r6, pc}
 800ab80:	0799      	lsls	r1, r3, #30
 800ab82:	d400      	bmi.n	800ab86 <__swsetup_r+0xb2>
 800ab84:	6962      	ldr	r2, [r4, #20]
 800ab86:	60a2      	str	r2, [r4, #8]
 800ab88:	e7f3      	b.n	800ab72 <__swsetup_r+0x9e>
 800ab8a:	46c0      	nop			@ (mov r8, r8)
 800ab8c:	20000018 	.word	0x20000018

0800ab90 <_raise_r>:
 800ab90:	b570      	push	{r4, r5, r6, lr}
 800ab92:	0004      	movs	r4, r0
 800ab94:	000d      	movs	r5, r1
 800ab96:	291f      	cmp	r1, #31
 800ab98:	d904      	bls.n	800aba4 <_raise_r+0x14>
 800ab9a:	2316      	movs	r3, #22
 800ab9c:	6003      	str	r3, [r0, #0]
 800ab9e:	2001      	movs	r0, #1
 800aba0:	4240      	negs	r0, r0
 800aba2:	bd70      	pop	{r4, r5, r6, pc}
 800aba4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d004      	beq.n	800abb4 <_raise_r+0x24>
 800abaa:	008a      	lsls	r2, r1, #2
 800abac:	189b      	adds	r3, r3, r2
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	2a00      	cmp	r2, #0
 800abb2:	d108      	bne.n	800abc6 <_raise_r+0x36>
 800abb4:	0020      	movs	r0, r4
 800abb6:	f000 f831 	bl	800ac1c <_getpid_r>
 800abba:	002a      	movs	r2, r5
 800abbc:	0001      	movs	r1, r0
 800abbe:	0020      	movs	r0, r4
 800abc0:	f000 f81a 	bl	800abf8 <_kill_r>
 800abc4:	e7ed      	b.n	800aba2 <_raise_r+0x12>
 800abc6:	2a01      	cmp	r2, #1
 800abc8:	d009      	beq.n	800abde <_raise_r+0x4e>
 800abca:	1c51      	adds	r1, r2, #1
 800abcc:	d103      	bne.n	800abd6 <_raise_r+0x46>
 800abce:	2316      	movs	r3, #22
 800abd0:	6003      	str	r3, [r0, #0]
 800abd2:	2001      	movs	r0, #1
 800abd4:	e7e5      	b.n	800aba2 <_raise_r+0x12>
 800abd6:	2100      	movs	r1, #0
 800abd8:	0028      	movs	r0, r5
 800abda:	6019      	str	r1, [r3, #0]
 800abdc:	4790      	blx	r2
 800abde:	2000      	movs	r0, #0
 800abe0:	e7df      	b.n	800aba2 <_raise_r+0x12>
	...

0800abe4 <raise>:
 800abe4:	b510      	push	{r4, lr}
 800abe6:	4b03      	ldr	r3, [pc, #12]	@ (800abf4 <raise+0x10>)
 800abe8:	0001      	movs	r1, r0
 800abea:	6818      	ldr	r0, [r3, #0]
 800abec:	f7ff ffd0 	bl	800ab90 <_raise_r>
 800abf0:	bd10      	pop	{r4, pc}
 800abf2:	46c0      	nop			@ (mov r8, r8)
 800abf4:	20000018 	.word	0x20000018

0800abf8 <_kill_r>:
 800abf8:	2300      	movs	r3, #0
 800abfa:	b570      	push	{r4, r5, r6, lr}
 800abfc:	4d06      	ldr	r5, [pc, #24]	@ (800ac18 <_kill_r+0x20>)
 800abfe:	0004      	movs	r4, r0
 800ac00:	0008      	movs	r0, r1
 800ac02:	0011      	movs	r1, r2
 800ac04:	602b      	str	r3, [r5, #0]
 800ac06:	f7f8 fb45 	bl	8003294 <_kill>
 800ac0a:	1c43      	adds	r3, r0, #1
 800ac0c:	d103      	bne.n	800ac16 <_kill_r+0x1e>
 800ac0e:	682b      	ldr	r3, [r5, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d000      	beq.n	800ac16 <_kill_r+0x1e>
 800ac14:	6023      	str	r3, [r4, #0]
 800ac16:	bd70      	pop	{r4, r5, r6, pc}
 800ac18:	20000c14 	.word	0x20000c14

0800ac1c <_getpid_r>:
 800ac1c:	b510      	push	{r4, lr}
 800ac1e:	f7f8 fb33 	bl	8003288 <_getpid>
 800ac22:	bd10      	pop	{r4, pc}

0800ac24 <__swhatbuf_r>:
 800ac24:	b570      	push	{r4, r5, r6, lr}
 800ac26:	000e      	movs	r6, r1
 800ac28:	001d      	movs	r5, r3
 800ac2a:	230e      	movs	r3, #14
 800ac2c:	5ec9      	ldrsh	r1, [r1, r3]
 800ac2e:	0014      	movs	r4, r2
 800ac30:	b096      	sub	sp, #88	@ 0x58
 800ac32:	2900      	cmp	r1, #0
 800ac34:	da0c      	bge.n	800ac50 <__swhatbuf_r+0x2c>
 800ac36:	89b2      	ldrh	r2, [r6, #12]
 800ac38:	2380      	movs	r3, #128	@ 0x80
 800ac3a:	0011      	movs	r1, r2
 800ac3c:	4019      	ands	r1, r3
 800ac3e:	421a      	tst	r2, r3
 800ac40:	d114      	bne.n	800ac6c <__swhatbuf_r+0x48>
 800ac42:	2380      	movs	r3, #128	@ 0x80
 800ac44:	00db      	lsls	r3, r3, #3
 800ac46:	2000      	movs	r0, #0
 800ac48:	6029      	str	r1, [r5, #0]
 800ac4a:	6023      	str	r3, [r4, #0]
 800ac4c:	b016      	add	sp, #88	@ 0x58
 800ac4e:	bd70      	pop	{r4, r5, r6, pc}
 800ac50:	466a      	mov	r2, sp
 800ac52:	f000 f853 	bl	800acfc <_fstat_r>
 800ac56:	2800      	cmp	r0, #0
 800ac58:	dbed      	blt.n	800ac36 <__swhatbuf_r+0x12>
 800ac5a:	23f0      	movs	r3, #240	@ 0xf0
 800ac5c:	9901      	ldr	r1, [sp, #4]
 800ac5e:	021b      	lsls	r3, r3, #8
 800ac60:	4019      	ands	r1, r3
 800ac62:	4b04      	ldr	r3, [pc, #16]	@ (800ac74 <__swhatbuf_r+0x50>)
 800ac64:	18c9      	adds	r1, r1, r3
 800ac66:	424b      	negs	r3, r1
 800ac68:	4159      	adcs	r1, r3
 800ac6a:	e7ea      	b.n	800ac42 <__swhatbuf_r+0x1e>
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	2340      	movs	r3, #64	@ 0x40
 800ac70:	e7e9      	b.n	800ac46 <__swhatbuf_r+0x22>
 800ac72:	46c0      	nop			@ (mov r8, r8)
 800ac74:	ffffe000 	.word	0xffffe000

0800ac78 <__smakebuf_r>:
 800ac78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac7a:	2602      	movs	r6, #2
 800ac7c:	898b      	ldrh	r3, [r1, #12]
 800ac7e:	0005      	movs	r5, r0
 800ac80:	000c      	movs	r4, r1
 800ac82:	b085      	sub	sp, #20
 800ac84:	4233      	tst	r3, r6
 800ac86:	d007      	beq.n	800ac98 <__smakebuf_r+0x20>
 800ac88:	0023      	movs	r3, r4
 800ac8a:	3347      	adds	r3, #71	@ 0x47
 800ac8c:	6023      	str	r3, [r4, #0]
 800ac8e:	6123      	str	r3, [r4, #16]
 800ac90:	2301      	movs	r3, #1
 800ac92:	6163      	str	r3, [r4, #20]
 800ac94:	b005      	add	sp, #20
 800ac96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac98:	ab03      	add	r3, sp, #12
 800ac9a:	aa02      	add	r2, sp, #8
 800ac9c:	f7ff ffc2 	bl	800ac24 <__swhatbuf_r>
 800aca0:	9f02      	ldr	r7, [sp, #8]
 800aca2:	9001      	str	r0, [sp, #4]
 800aca4:	0039      	movs	r1, r7
 800aca6:	0028      	movs	r0, r5
 800aca8:	f7fd fb28 	bl	80082fc <_malloc_r>
 800acac:	2800      	cmp	r0, #0
 800acae:	d108      	bne.n	800acc2 <__smakebuf_r+0x4a>
 800acb0:	220c      	movs	r2, #12
 800acb2:	5ea3      	ldrsh	r3, [r4, r2]
 800acb4:	059a      	lsls	r2, r3, #22
 800acb6:	d4ed      	bmi.n	800ac94 <__smakebuf_r+0x1c>
 800acb8:	2203      	movs	r2, #3
 800acba:	4393      	bics	r3, r2
 800acbc:	431e      	orrs	r6, r3
 800acbe:	81a6      	strh	r6, [r4, #12]
 800acc0:	e7e2      	b.n	800ac88 <__smakebuf_r+0x10>
 800acc2:	2380      	movs	r3, #128	@ 0x80
 800acc4:	89a2      	ldrh	r2, [r4, #12]
 800acc6:	6020      	str	r0, [r4, #0]
 800acc8:	4313      	orrs	r3, r2
 800acca:	81a3      	strh	r3, [r4, #12]
 800accc:	9b03      	ldr	r3, [sp, #12]
 800acce:	6120      	str	r0, [r4, #16]
 800acd0:	6167      	str	r7, [r4, #20]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d00c      	beq.n	800acf0 <__smakebuf_r+0x78>
 800acd6:	0028      	movs	r0, r5
 800acd8:	230e      	movs	r3, #14
 800acda:	5ee1      	ldrsh	r1, [r4, r3]
 800acdc:	f000 f820 	bl	800ad20 <_isatty_r>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d005      	beq.n	800acf0 <__smakebuf_r+0x78>
 800ace4:	2303      	movs	r3, #3
 800ace6:	89a2      	ldrh	r2, [r4, #12]
 800ace8:	439a      	bics	r2, r3
 800acea:	3b02      	subs	r3, #2
 800acec:	4313      	orrs	r3, r2
 800acee:	81a3      	strh	r3, [r4, #12]
 800acf0:	89a3      	ldrh	r3, [r4, #12]
 800acf2:	9a01      	ldr	r2, [sp, #4]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	81a3      	strh	r3, [r4, #12]
 800acf8:	e7cc      	b.n	800ac94 <__smakebuf_r+0x1c>
	...

0800acfc <_fstat_r>:
 800acfc:	2300      	movs	r3, #0
 800acfe:	b570      	push	{r4, r5, r6, lr}
 800ad00:	4d06      	ldr	r5, [pc, #24]	@ (800ad1c <_fstat_r+0x20>)
 800ad02:	0004      	movs	r4, r0
 800ad04:	0008      	movs	r0, r1
 800ad06:	0011      	movs	r1, r2
 800ad08:	602b      	str	r3, [r5, #0]
 800ad0a:	f7f8 fb23 	bl	8003354 <_fstat>
 800ad0e:	1c43      	adds	r3, r0, #1
 800ad10:	d103      	bne.n	800ad1a <_fstat_r+0x1e>
 800ad12:	682b      	ldr	r3, [r5, #0]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d000      	beq.n	800ad1a <_fstat_r+0x1e>
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	bd70      	pop	{r4, r5, r6, pc}
 800ad1c:	20000c14 	.word	0x20000c14

0800ad20 <_isatty_r>:
 800ad20:	2300      	movs	r3, #0
 800ad22:	b570      	push	{r4, r5, r6, lr}
 800ad24:	4d06      	ldr	r5, [pc, #24]	@ (800ad40 <_isatty_r+0x20>)
 800ad26:	0004      	movs	r4, r0
 800ad28:	0008      	movs	r0, r1
 800ad2a:	602b      	str	r3, [r5, #0]
 800ad2c:	f7f8 fb20 	bl	8003370 <_isatty>
 800ad30:	1c43      	adds	r3, r0, #1
 800ad32:	d103      	bne.n	800ad3c <_isatty_r+0x1c>
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d000      	beq.n	800ad3c <_isatty_r+0x1c>
 800ad3a:	6023      	str	r3, [r4, #0]
 800ad3c:	bd70      	pop	{r4, r5, r6, pc}
 800ad3e:	46c0      	nop			@ (mov r8, r8)
 800ad40:	20000c14 	.word	0x20000c14

0800ad44 <_init>:
 800ad44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad46:	46c0      	nop			@ (mov r8, r8)
 800ad48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad4a:	bc08      	pop	{r3}
 800ad4c:	469e      	mov	lr, r3
 800ad4e:	4770      	bx	lr

0800ad50 <_fini>:
 800ad50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad52:	46c0      	nop			@ (mov r8, r8)
 800ad54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad56:	bc08      	pop	{r3}
 800ad58:	469e      	mov	lr, r3
 800ad5a:	4770      	bx	lr
