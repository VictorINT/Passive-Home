
sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009db4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08009e78  08009e78  0000ae78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a34c  0800a34c  0000c1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800a34c  0800a34c  0000c1d4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800a34c  0800a34c  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a34c  0800a34c  0000b34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a350  0800a350  0000b350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a354  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a50  200001d4  0800a528  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c24  0800a528  0000cc24  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b7ed  00000000  00000000  0000c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d80  00000000  00000000  000179e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  00019770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d1  00000000  00000000  0001a180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010b56  00000000  00000000  0001a951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df4f  00000000  00000000  0002b4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005fd60  00000000  00000000  000393f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00099156  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037e8  00000000  00000000  0009919c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0009c984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009e5c 	.word	0x08009e5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	08009e5c 	.word	0x08009e5c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f833 	bl	80014a8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ff77 	bl	8001340 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f825 	bl	80014a8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f81b 	bl	80014a8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ffa1 	bl	80013c8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff97 	bl	80013c8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 ff73 	bl	80023a8 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fb40 	bl	8001b50 <__aeabi_dsub>
 80004d0:	f001 ff6a 	bl	80023a8 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	@ 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	2300      	movs	r3, #0
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffb3 	bl	8000458 <__aeabi_dcmplt>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d108      	bne.n	8000508 <__aeabi_d2lz+0x24>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f000 f80f 	bl	800051c <__aeabi_d2ulz>
 80004fe:	0002      	movs	r2, r0
 8000500:	000b      	movs	r3, r1
 8000502:	0010      	movs	r0, r2
 8000504:	0019      	movs	r1, r3
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	2380      	movs	r3, #128	@ 0x80
 800050a:	061b      	lsls	r3, r3, #24
 800050c:	18e9      	adds	r1, r5, r3
 800050e:	0020      	movs	r0, r4
 8000510:	f000 f804 	bl	800051c <__aeabi_d2ulz>
 8000514:	2300      	movs	r3, #0
 8000516:	4242      	negs	r2, r0
 8000518:	418b      	sbcs	r3, r1
 800051a:	e7f2      	b.n	8000502 <__aeabi_d2lz+0x1e>

0800051c <__aeabi_d2ulz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <__aeabi_d2ulz+0x34>)
 8000522:	000d      	movs	r5, r1
 8000524:	0004      	movs	r4, r0
 8000526:	f001 f82d 	bl	8001584 <__aeabi_dmul>
 800052a:	f7ff ffbd 	bl	80004a8 <__aeabi_d2uiz>
 800052e:	0006      	movs	r6, r0
 8000530:	f001 ffa4 	bl	800247c <__aeabi_ui2d>
 8000534:	2200      	movs	r2, #0
 8000536:	4b07      	ldr	r3, [pc, #28]	@ (8000554 <__aeabi_d2ulz+0x38>)
 8000538:	f001 f824 	bl	8001584 <__aeabi_dmul>
 800053c:	0002      	movs	r2, r0
 800053e:	000b      	movs	r3, r1
 8000540:	0020      	movs	r0, r4
 8000542:	0029      	movs	r1, r5
 8000544:	f001 fb04 	bl	8001b50 <__aeabi_dsub>
 8000548:	f7ff ffae 	bl	80004a8 <__aeabi_d2uiz>
 800054c:	0031      	movs	r1, r6
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	3df00000 	.word	0x3df00000
 8000554:	41f00000 	.word	0x41f00000

08000558 <__aeabi_l2d>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0006      	movs	r6, r0
 800055c:	0008      	movs	r0, r1
 800055e:	f001 ff5f 	bl	8002420 <__aeabi_i2d>
 8000562:	2200      	movs	r2, #0
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <__aeabi_l2d+0x28>)
 8000566:	f001 f80d 	bl	8001584 <__aeabi_dmul>
 800056a:	000d      	movs	r5, r1
 800056c:	0004      	movs	r4, r0
 800056e:	0030      	movs	r0, r6
 8000570:	f001 ff84 	bl	800247c <__aeabi_ui2d>
 8000574:	002b      	movs	r3, r5
 8000576:	0022      	movs	r2, r4
 8000578:	f000 f804 	bl	8000584 <__aeabi_dadd>
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	41f00000 	.word	0x41f00000

08000584 <__aeabi_dadd>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	464f      	mov	r7, r9
 8000588:	4646      	mov	r6, r8
 800058a:	46d6      	mov	lr, sl
 800058c:	b5c0      	push	{r6, r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	9000      	str	r0, [sp, #0]
 8000592:	9101      	str	r1, [sp, #4]
 8000594:	030e      	lsls	r6, r1, #12
 8000596:	004c      	lsls	r4, r1, #1
 8000598:	0fcd      	lsrs	r5, r1, #31
 800059a:	0a71      	lsrs	r1, r6, #9
 800059c:	9e00      	ldr	r6, [sp, #0]
 800059e:	005f      	lsls	r7, r3, #1
 80005a0:	0f76      	lsrs	r6, r6, #29
 80005a2:	430e      	orrs	r6, r1
 80005a4:	9900      	ldr	r1, [sp, #0]
 80005a6:	9200      	str	r2, [sp, #0]
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	00c9      	lsls	r1, r1, #3
 80005ac:	4689      	mov	r9, r1
 80005ae:	0319      	lsls	r1, r3, #12
 80005b0:	0d7b      	lsrs	r3, r7, #21
 80005b2:	4698      	mov	r8, r3
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	0a49      	lsrs	r1, r1, #9
 80005b8:	0fdb      	lsrs	r3, r3, #31
 80005ba:	469c      	mov	ip, r3
 80005bc:	9b00      	ldr	r3, [sp, #0]
 80005be:	9a00      	ldr	r2, [sp, #0]
 80005c0:	0f5b      	lsrs	r3, r3, #29
 80005c2:	430b      	orrs	r3, r1
 80005c4:	4641      	mov	r1, r8
 80005c6:	0d64      	lsrs	r4, r4, #21
 80005c8:	00d2      	lsls	r2, r2, #3
 80005ca:	1a61      	subs	r1, r4, r1
 80005cc:	4565      	cmp	r5, ip
 80005ce:	d100      	bne.n	80005d2 <__aeabi_dadd+0x4e>
 80005d0:	e0a6      	b.n	8000720 <__aeabi_dadd+0x19c>
 80005d2:	2900      	cmp	r1, #0
 80005d4:	dd72      	ble.n	80006bc <__aeabi_dadd+0x138>
 80005d6:	4647      	mov	r7, r8
 80005d8:	2f00      	cmp	r7, #0
 80005da:	d100      	bne.n	80005de <__aeabi_dadd+0x5a>
 80005dc:	e0dd      	b.n	800079a <__aeabi_dadd+0x216>
 80005de:	4fcc      	ldr	r7, [pc, #816]	@ (8000910 <__aeabi_dadd+0x38c>)
 80005e0:	42bc      	cmp	r4, r7
 80005e2:	d100      	bne.n	80005e6 <__aeabi_dadd+0x62>
 80005e4:	e19a      	b.n	800091c <__aeabi_dadd+0x398>
 80005e6:	2701      	movs	r7, #1
 80005e8:	2938      	cmp	r1, #56	@ 0x38
 80005ea:	dc17      	bgt.n	800061c <__aeabi_dadd+0x98>
 80005ec:	2780      	movs	r7, #128	@ 0x80
 80005ee:	043f      	lsls	r7, r7, #16
 80005f0:	433b      	orrs	r3, r7
 80005f2:	291f      	cmp	r1, #31
 80005f4:	dd00      	ble.n	80005f8 <__aeabi_dadd+0x74>
 80005f6:	e1dd      	b.n	80009b4 <__aeabi_dadd+0x430>
 80005f8:	2720      	movs	r7, #32
 80005fa:	1a78      	subs	r0, r7, r1
 80005fc:	001f      	movs	r7, r3
 80005fe:	4087      	lsls	r7, r0
 8000600:	46ba      	mov	sl, r7
 8000602:	0017      	movs	r7, r2
 8000604:	40cf      	lsrs	r7, r1
 8000606:	4684      	mov	ip, r0
 8000608:	0038      	movs	r0, r7
 800060a:	4657      	mov	r7, sl
 800060c:	4307      	orrs	r7, r0
 800060e:	4660      	mov	r0, ip
 8000610:	4082      	lsls	r2, r0
 8000612:	40cb      	lsrs	r3, r1
 8000614:	1e50      	subs	r0, r2, #1
 8000616:	4182      	sbcs	r2, r0
 8000618:	1af6      	subs	r6, r6, r3
 800061a:	4317      	orrs	r7, r2
 800061c:	464b      	mov	r3, r9
 800061e:	1bdf      	subs	r7, r3, r7
 8000620:	45b9      	cmp	r9, r7
 8000622:	4180      	sbcs	r0, r0
 8000624:	4240      	negs	r0, r0
 8000626:	1a36      	subs	r6, r6, r0
 8000628:	0233      	lsls	r3, r6, #8
 800062a:	d400      	bmi.n	800062e <__aeabi_dadd+0xaa>
 800062c:	e0ff      	b.n	800082e <__aeabi_dadd+0x2aa>
 800062e:	0276      	lsls	r6, r6, #9
 8000630:	0a76      	lsrs	r6, r6, #9
 8000632:	2e00      	cmp	r6, #0
 8000634:	d100      	bne.n	8000638 <__aeabi_dadd+0xb4>
 8000636:	e13c      	b.n	80008b2 <__aeabi_dadd+0x32e>
 8000638:	0030      	movs	r0, r6
 800063a:	f001 ffc5 	bl	80025c8 <__clzsi2>
 800063e:	0003      	movs	r3, r0
 8000640:	3b08      	subs	r3, #8
 8000642:	2120      	movs	r1, #32
 8000644:	0038      	movs	r0, r7
 8000646:	1aca      	subs	r2, r1, r3
 8000648:	40d0      	lsrs	r0, r2
 800064a:	409e      	lsls	r6, r3
 800064c:	0002      	movs	r2, r0
 800064e:	409f      	lsls	r7, r3
 8000650:	4332      	orrs	r2, r6
 8000652:	429c      	cmp	r4, r3
 8000654:	dd00      	ble.n	8000658 <__aeabi_dadd+0xd4>
 8000656:	e1a6      	b.n	80009a6 <__aeabi_dadd+0x422>
 8000658:	1b18      	subs	r0, r3, r4
 800065a:	3001      	adds	r0, #1
 800065c:	1a09      	subs	r1, r1, r0
 800065e:	003e      	movs	r6, r7
 8000660:	408f      	lsls	r7, r1
 8000662:	40c6      	lsrs	r6, r0
 8000664:	1e7b      	subs	r3, r7, #1
 8000666:	419f      	sbcs	r7, r3
 8000668:	0013      	movs	r3, r2
 800066a:	408b      	lsls	r3, r1
 800066c:	4337      	orrs	r7, r6
 800066e:	431f      	orrs	r7, r3
 8000670:	40c2      	lsrs	r2, r0
 8000672:	003b      	movs	r3, r7
 8000674:	0016      	movs	r6, r2
 8000676:	2400      	movs	r4, #0
 8000678:	4313      	orrs	r3, r2
 800067a:	d100      	bne.n	800067e <__aeabi_dadd+0xfa>
 800067c:	e1df      	b.n	8000a3e <__aeabi_dadd+0x4ba>
 800067e:	077b      	lsls	r3, r7, #29
 8000680:	d100      	bne.n	8000684 <__aeabi_dadd+0x100>
 8000682:	e332      	b.n	8000cea <__aeabi_dadd+0x766>
 8000684:	230f      	movs	r3, #15
 8000686:	003a      	movs	r2, r7
 8000688:	403b      	ands	r3, r7
 800068a:	2b04      	cmp	r3, #4
 800068c:	d004      	beq.n	8000698 <__aeabi_dadd+0x114>
 800068e:	1d3a      	adds	r2, r7, #4
 8000690:	42ba      	cmp	r2, r7
 8000692:	41bf      	sbcs	r7, r7
 8000694:	427f      	negs	r7, r7
 8000696:	19f6      	adds	r6, r6, r7
 8000698:	0233      	lsls	r3, r6, #8
 800069a:	d400      	bmi.n	800069e <__aeabi_dadd+0x11a>
 800069c:	e323      	b.n	8000ce6 <__aeabi_dadd+0x762>
 800069e:	4b9c      	ldr	r3, [pc, #624]	@ (8000910 <__aeabi_dadd+0x38c>)
 80006a0:	3401      	adds	r4, #1
 80006a2:	429c      	cmp	r4, r3
 80006a4:	d100      	bne.n	80006a8 <__aeabi_dadd+0x124>
 80006a6:	e0b4      	b.n	8000812 <__aeabi_dadd+0x28e>
 80006a8:	4b9a      	ldr	r3, [pc, #616]	@ (8000914 <__aeabi_dadd+0x390>)
 80006aa:	0564      	lsls	r4, r4, #21
 80006ac:	401e      	ands	r6, r3
 80006ae:	0d64      	lsrs	r4, r4, #21
 80006b0:	0777      	lsls	r7, r6, #29
 80006b2:	08d2      	lsrs	r2, r2, #3
 80006b4:	0276      	lsls	r6, r6, #9
 80006b6:	4317      	orrs	r7, r2
 80006b8:	0b36      	lsrs	r6, r6, #12
 80006ba:	e0ac      	b.n	8000816 <__aeabi_dadd+0x292>
 80006bc:	2900      	cmp	r1, #0
 80006be:	d100      	bne.n	80006c2 <__aeabi_dadd+0x13e>
 80006c0:	e07e      	b.n	80007c0 <__aeabi_dadd+0x23c>
 80006c2:	4641      	mov	r1, r8
 80006c4:	1b09      	subs	r1, r1, r4
 80006c6:	2c00      	cmp	r4, #0
 80006c8:	d000      	beq.n	80006cc <__aeabi_dadd+0x148>
 80006ca:	e160      	b.n	800098e <__aeabi_dadd+0x40a>
 80006cc:	0034      	movs	r4, r6
 80006ce:	4648      	mov	r0, r9
 80006d0:	4304      	orrs	r4, r0
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x152>
 80006d4:	e1c9      	b.n	8000a6a <__aeabi_dadd+0x4e6>
 80006d6:	1e4c      	subs	r4, r1, #1
 80006d8:	2901      	cmp	r1, #1
 80006da:	d100      	bne.n	80006de <__aeabi_dadd+0x15a>
 80006dc:	e22e      	b.n	8000b3c <__aeabi_dadd+0x5b8>
 80006de:	4d8c      	ldr	r5, [pc, #560]	@ (8000910 <__aeabi_dadd+0x38c>)
 80006e0:	42a9      	cmp	r1, r5
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x162>
 80006e4:	e224      	b.n	8000b30 <__aeabi_dadd+0x5ac>
 80006e6:	2701      	movs	r7, #1
 80006e8:	2c38      	cmp	r4, #56	@ 0x38
 80006ea:	dc11      	bgt.n	8000710 <__aeabi_dadd+0x18c>
 80006ec:	0021      	movs	r1, r4
 80006ee:	291f      	cmp	r1, #31
 80006f0:	dd00      	ble.n	80006f4 <__aeabi_dadd+0x170>
 80006f2:	e20b      	b.n	8000b0c <__aeabi_dadd+0x588>
 80006f4:	2420      	movs	r4, #32
 80006f6:	0037      	movs	r7, r6
 80006f8:	4648      	mov	r0, r9
 80006fa:	1a64      	subs	r4, r4, r1
 80006fc:	40a7      	lsls	r7, r4
 80006fe:	40c8      	lsrs	r0, r1
 8000700:	4307      	orrs	r7, r0
 8000702:	4648      	mov	r0, r9
 8000704:	40a0      	lsls	r0, r4
 8000706:	40ce      	lsrs	r6, r1
 8000708:	1e44      	subs	r4, r0, #1
 800070a:	41a0      	sbcs	r0, r4
 800070c:	1b9b      	subs	r3, r3, r6
 800070e:	4307      	orrs	r7, r0
 8000710:	1bd7      	subs	r7, r2, r7
 8000712:	42ba      	cmp	r2, r7
 8000714:	4192      	sbcs	r2, r2
 8000716:	4252      	negs	r2, r2
 8000718:	4665      	mov	r5, ip
 800071a:	4644      	mov	r4, r8
 800071c:	1a9e      	subs	r6, r3, r2
 800071e:	e783      	b.n	8000628 <__aeabi_dadd+0xa4>
 8000720:	2900      	cmp	r1, #0
 8000722:	dc00      	bgt.n	8000726 <__aeabi_dadd+0x1a2>
 8000724:	e09c      	b.n	8000860 <__aeabi_dadd+0x2dc>
 8000726:	4647      	mov	r7, r8
 8000728:	2f00      	cmp	r7, #0
 800072a:	d167      	bne.n	80007fc <__aeabi_dadd+0x278>
 800072c:	001f      	movs	r7, r3
 800072e:	4317      	orrs	r7, r2
 8000730:	d100      	bne.n	8000734 <__aeabi_dadd+0x1b0>
 8000732:	e0e4      	b.n	80008fe <__aeabi_dadd+0x37a>
 8000734:	1e48      	subs	r0, r1, #1
 8000736:	2901      	cmp	r1, #1
 8000738:	d100      	bne.n	800073c <__aeabi_dadd+0x1b8>
 800073a:	e19b      	b.n	8000a74 <__aeabi_dadd+0x4f0>
 800073c:	4f74      	ldr	r7, [pc, #464]	@ (8000910 <__aeabi_dadd+0x38c>)
 800073e:	42b9      	cmp	r1, r7
 8000740:	d100      	bne.n	8000744 <__aeabi_dadd+0x1c0>
 8000742:	e0eb      	b.n	800091c <__aeabi_dadd+0x398>
 8000744:	2701      	movs	r7, #1
 8000746:	0001      	movs	r1, r0
 8000748:	2838      	cmp	r0, #56	@ 0x38
 800074a:	dc11      	bgt.n	8000770 <__aeabi_dadd+0x1ec>
 800074c:	291f      	cmp	r1, #31
 800074e:	dd00      	ble.n	8000752 <__aeabi_dadd+0x1ce>
 8000750:	e1c7      	b.n	8000ae2 <__aeabi_dadd+0x55e>
 8000752:	2720      	movs	r7, #32
 8000754:	1a78      	subs	r0, r7, r1
 8000756:	001f      	movs	r7, r3
 8000758:	4684      	mov	ip, r0
 800075a:	4087      	lsls	r7, r0
 800075c:	0010      	movs	r0, r2
 800075e:	40c8      	lsrs	r0, r1
 8000760:	4307      	orrs	r7, r0
 8000762:	4660      	mov	r0, ip
 8000764:	4082      	lsls	r2, r0
 8000766:	40cb      	lsrs	r3, r1
 8000768:	1e50      	subs	r0, r2, #1
 800076a:	4182      	sbcs	r2, r0
 800076c:	18f6      	adds	r6, r6, r3
 800076e:	4317      	orrs	r7, r2
 8000770:	444f      	add	r7, r9
 8000772:	454f      	cmp	r7, r9
 8000774:	4180      	sbcs	r0, r0
 8000776:	4240      	negs	r0, r0
 8000778:	1836      	adds	r6, r6, r0
 800077a:	0233      	lsls	r3, r6, #8
 800077c:	d557      	bpl.n	800082e <__aeabi_dadd+0x2aa>
 800077e:	4b64      	ldr	r3, [pc, #400]	@ (8000910 <__aeabi_dadd+0x38c>)
 8000780:	3401      	adds	r4, #1
 8000782:	429c      	cmp	r4, r3
 8000784:	d045      	beq.n	8000812 <__aeabi_dadd+0x28e>
 8000786:	2101      	movs	r1, #1
 8000788:	4b62      	ldr	r3, [pc, #392]	@ (8000914 <__aeabi_dadd+0x390>)
 800078a:	087a      	lsrs	r2, r7, #1
 800078c:	401e      	ands	r6, r3
 800078e:	4039      	ands	r1, r7
 8000790:	430a      	orrs	r2, r1
 8000792:	07f7      	lsls	r7, r6, #31
 8000794:	4317      	orrs	r7, r2
 8000796:	0876      	lsrs	r6, r6, #1
 8000798:	e771      	b.n	800067e <__aeabi_dadd+0xfa>
 800079a:	001f      	movs	r7, r3
 800079c:	4317      	orrs	r7, r2
 800079e:	d100      	bne.n	80007a2 <__aeabi_dadd+0x21e>
 80007a0:	e0ad      	b.n	80008fe <__aeabi_dadd+0x37a>
 80007a2:	1e4f      	subs	r7, r1, #1
 80007a4:	46bc      	mov	ip, r7
 80007a6:	2901      	cmp	r1, #1
 80007a8:	d100      	bne.n	80007ac <__aeabi_dadd+0x228>
 80007aa:	e182      	b.n	8000ab2 <__aeabi_dadd+0x52e>
 80007ac:	4f58      	ldr	r7, [pc, #352]	@ (8000910 <__aeabi_dadd+0x38c>)
 80007ae:	42b9      	cmp	r1, r7
 80007b0:	d100      	bne.n	80007b4 <__aeabi_dadd+0x230>
 80007b2:	e190      	b.n	8000ad6 <__aeabi_dadd+0x552>
 80007b4:	4661      	mov	r1, ip
 80007b6:	2701      	movs	r7, #1
 80007b8:	2938      	cmp	r1, #56	@ 0x38
 80007ba:	dd00      	ble.n	80007be <__aeabi_dadd+0x23a>
 80007bc:	e72e      	b.n	800061c <__aeabi_dadd+0x98>
 80007be:	e718      	b.n	80005f2 <__aeabi_dadd+0x6e>
 80007c0:	4f55      	ldr	r7, [pc, #340]	@ (8000918 <__aeabi_dadd+0x394>)
 80007c2:	1c61      	adds	r1, r4, #1
 80007c4:	4239      	tst	r1, r7
 80007c6:	d000      	beq.n	80007ca <__aeabi_dadd+0x246>
 80007c8:	e0d0      	b.n	800096c <__aeabi_dadd+0x3e8>
 80007ca:	0031      	movs	r1, r6
 80007cc:	4648      	mov	r0, r9
 80007ce:	001f      	movs	r7, r3
 80007d0:	4301      	orrs	r1, r0
 80007d2:	4317      	orrs	r7, r2
 80007d4:	2c00      	cmp	r4, #0
 80007d6:	d000      	beq.n	80007da <__aeabi_dadd+0x256>
 80007d8:	e13d      	b.n	8000a56 <__aeabi_dadd+0x4d2>
 80007da:	2900      	cmp	r1, #0
 80007dc:	d100      	bne.n	80007e0 <__aeabi_dadd+0x25c>
 80007de:	e1bc      	b.n	8000b5a <__aeabi_dadd+0x5d6>
 80007e0:	2f00      	cmp	r7, #0
 80007e2:	d000      	beq.n	80007e6 <__aeabi_dadd+0x262>
 80007e4:	e1bf      	b.n	8000b66 <__aeabi_dadd+0x5e2>
 80007e6:	464b      	mov	r3, r9
 80007e8:	2100      	movs	r1, #0
 80007ea:	08d8      	lsrs	r0, r3, #3
 80007ec:	0777      	lsls	r7, r6, #29
 80007ee:	4307      	orrs	r7, r0
 80007f0:	08f0      	lsrs	r0, r6, #3
 80007f2:	0306      	lsls	r6, r0, #12
 80007f4:	054c      	lsls	r4, r1, #21
 80007f6:	0b36      	lsrs	r6, r6, #12
 80007f8:	0d64      	lsrs	r4, r4, #21
 80007fa:	e00c      	b.n	8000816 <__aeabi_dadd+0x292>
 80007fc:	4f44      	ldr	r7, [pc, #272]	@ (8000910 <__aeabi_dadd+0x38c>)
 80007fe:	42bc      	cmp	r4, r7
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x280>
 8000802:	e08b      	b.n	800091c <__aeabi_dadd+0x398>
 8000804:	2701      	movs	r7, #1
 8000806:	2938      	cmp	r1, #56	@ 0x38
 8000808:	dcb2      	bgt.n	8000770 <__aeabi_dadd+0x1ec>
 800080a:	2780      	movs	r7, #128	@ 0x80
 800080c:	043f      	lsls	r7, r7, #16
 800080e:	433b      	orrs	r3, r7
 8000810:	e79c      	b.n	800074c <__aeabi_dadd+0x1c8>
 8000812:	2600      	movs	r6, #0
 8000814:	2700      	movs	r7, #0
 8000816:	0524      	lsls	r4, r4, #20
 8000818:	4334      	orrs	r4, r6
 800081a:	07ed      	lsls	r5, r5, #31
 800081c:	432c      	orrs	r4, r5
 800081e:	0038      	movs	r0, r7
 8000820:	0021      	movs	r1, r4
 8000822:	b002      	add	sp, #8
 8000824:	bce0      	pop	{r5, r6, r7}
 8000826:	46ba      	mov	sl, r7
 8000828:	46b1      	mov	r9, r6
 800082a:	46a8      	mov	r8, r5
 800082c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800082e:	077b      	lsls	r3, r7, #29
 8000830:	d004      	beq.n	800083c <__aeabi_dadd+0x2b8>
 8000832:	230f      	movs	r3, #15
 8000834:	403b      	ands	r3, r7
 8000836:	2b04      	cmp	r3, #4
 8000838:	d000      	beq.n	800083c <__aeabi_dadd+0x2b8>
 800083a:	e728      	b.n	800068e <__aeabi_dadd+0x10a>
 800083c:	08f8      	lsrs	r0, r7, #3
 800083e:	4b34      	ldr	r3, [pc, #208]	@ (8000910 <__aeabi_dadd+0x38c>)
 8000840:	0777      	lsls	r7, r6, #29
 8000842:	4307      	orrs	r7, r0
 8000844:	08f0      	lsrs	r0, r6, #3
 8000846:	429c      	cmp	r4, r3
 8000848:	d000      	beq.n	800084c <__aeabi_dadd+0x2c8>
 800084a:	e24a      	b.n	8000ce2 <__aeabi_dadd+0x75e>
 800084c:	003b      	movs	r3, r7
 800084e:	4303      	orrs	r3, r0
 8000850:	d059      	beq.n	8000906 <__aeabi_dadd+0x382>
 8000852:	2680      	movs	r6, #128	@ 0x80
 8000854:	0336      	lsls	r6, r6, #12
 8000856:	4306      	orrs	r6, r0
 8000858:	0336      	lsls	r6, r6, #12
 800085a:	4c2d      	ldr	r4, [pc, #180]	@ (8000910 <__aeabi_dadd+0x38c>)
 800085c:	0b36      	lsrs	r6, r6, #12
 800085e:	e7da      	b.n	8000816 <__aeabi_dadd+0x292>
 8000860:	2900      	cmp	r1, #0
 8000862:	d061      	beq.n	8000928 <__aeabi_dadd+0x3a4>
 8000864:	4641      	mov	r1, r8
 8000866:	1b09      	subs	r1, r1, r4
 8000868:	2c00      	cmp	r4, #0
 800086a:	d100      	bne.n	800086e <__aeabi_dadd+0x2ea>
 800086c:	e0b9      	b.n	80009e2 <__aeabi_dadd+0x45e>
 800086e:	4c28      	ldr	r4, [pc, #160]	@ (8000910 <__aeabi_dadd+0x38c>)
 8000870:	45a0      	cmp	r8, r4
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x2f2>
 8000874:	e1a5      	b.n	8000bc2 <__aeabi_dadd+0x63e>
 8000876:	2701      	movs	r7, #1
 8000878:	2938      	cmp	r1, #56	@ 0x38
 800087a:	dc13      	bgt.n	80008a4 <__aeabi_dadd+0x320>
 800087c:	2480      	movs	r4, #128	@ 0x80
 800087e:	0424      	lsls	r4, r4, #16
 8000880:	4326      	orrs	r6, r4
 8000882:	291f      	cmp	r1, #31
 8000884:	dd00      	ble.n	8000888 <__aeabi_dadd+0x304>
 8000886:	e1c8      	b.n	8000c1a <__aeabi_dadd+0x696>
 8000888:	2420      	movs	r4, #32
 800088a:	0037      	movs	r7, r6
 800088c:	4648      	mov	r0, r9
 800088e:	1a64      	subs	r4, r4, r1
 8000890:	40a7      	lsls	r7, r4
 8000892:	40c8      	lsrs	r0, r1
 8000894:	4307      	orrs	r7, r0
 8000896:	4648      	mov	r0, r9
 8000898:	40a0      	lsls	r0, r4
 800089a:	40ce      	lsrs	r6, r1
 800089c:	1e44      	subs	r4, r0, #1
 800089e:	41a0      	sbcs	r0, r4
 80008a0:	199b      	adds	r3, r3, r6
 80008a2:	4307      	orrs	r7, r0
 80008a4:	18bf      	adds	r7, r7, r2
 80008a6:	4297      	cmp	r7, r2
 80008a8:	4192      	sbcs	r2, r2
 80008aa:	4252      	negs	r2, r2
 80008ac:	4644      	mov	r4, r8
 80008ae:	18d6      	adds	r6, r2, r3
 80008b0:	e763      	b.n	800077a <__aeabi_dadd+0x1f6>
 80008b2:	0038      	movs	r0, r7
 80008b4:	f001 fe88 	bl	80025c8 <__clzsi2>
 80008b8:	0003      	movs	r3, r0
 80008ba:	3318      	adds	r3, #24
 80008bc:	2b1f      	cmp	r3, #31
 80008be:	dc00      	bgt.n	80008c2 <__aeabi_dadd+0x33e>
 80008c0:	e6bf      	b.n	8000642 <__aeabi_dadd+0xbe>
 80008c2:	003a      	movs	r2, r7
 80008c4:	3808      	subs	r0, #8
 80008c6:	4082      	lsls	r2, r0
 80008c8:	429c      	cmp	r4, r3
 80008ca:	dd00      	ble.n	80008ce <__aeabi_dadd+0x34a>
 80008cc:	e083      	b.n	80009d6 <__aeabi_dadd+0x452>
 80008ce:	1b1b      	subs	r3, r3, r4
 80008d0:	1c58      	adds	r0, r3, #1
 80008d2:	281f      	cmp	r0, #31
 80008d4:	dc00      	bgt.n	80008d8 <__aeabi_dadd+0x354>
 80008d6:	e1b4      	b.n	8000c42 <__aeabi_dadd+0x6be>
 80008d8:	0017      	movs	r7, r2
 80008da:	3b1f      	subs	r3, #31
 80008dc:	40df      	lsrs	r7, r3
 80008de:	2820      	cmp	r0, #32
 80008e0:	d005      	beq.n	80008ee <__aeabi_dadd+0x36a>
 80008e2:	2340      	movs	r3, #64	@ 0x40
 80008e4:	1a1b      	subs	r3, r3, r0
 80008e6:	409a      	lsls	r2, r3
 80008e8:	1e53      	subs	r3, r2, #1
 80008ea:	419a      	sbcs	r2, r3
 80008ec:	4317      	orrs	r7, r2
 80008ee:	2400      	movs	r4, #0
 80008f0:	2f00      	cmp	r7, #0
 80008f2:	d00a      	beq.n	800090a <__aeabi_dadd+0x386>
 80008f4:	077b      	lsls	r3, r7, #29
 80008f6:	d000      	beq.n	80008fa <__aeabi_dadd+0x376>
 80008f8:	e6c4      	b.n	8000684 <__aeabi_dadd+0x100>
 80008fa:	0026      	movs	r6, r4
 80008fc:	e79e      	b.n	800083c <__aeabi_dadd+0x2b8>
 80008fe:	464b      	mov	r3, r9
 8000900:	000c      	movs	r4, r1
 8000902:	08d8      	lsrs	r0, r3, #3
 8000904:	e79b      	b.n	800083e <__aeabi_dadd+0x2ba>
 8000906:	2700      	movs	r7, #0
 8000908:	4c01      	ldr	r4, [pc, #4]	@ (8000910 <__aeabi_dadd+0x38c>)
 800090a:	2600      	movs	r6, #0
 800090c:	e783      	b.n	8000816 <__aeabi_dadd+0x292>
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	000007ff 	.word	0x000007ff
 8000914:	ff7fffff 	.word	0xff7fffff
 8000918:	000007fe 	.word	0x000007fe
 800091c:	464b      	mov	r3, r9
 800091e:	0777      	lsls	r7, r6, #29
 8000920:	08d8      	lsrs	r0, r3, #3
 8000922:	4307      	orrs	r7, r0
 8000924:	08f0      	lsrs	r0, r6, #3
 8000926:	e791      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000928:	4fcd      	ldr	r7, [pc, #820]	@ (8000c60 <__aeabi_dadd+0x6dc>)
 800092a:	1c61      	adds	r1, r4, #1
 800092c:	4239      	tst	r1, r7
 800092e:	d16b      	bne.n	8000a08 <__aeabi_dadd+0x484>
 8000930:	0031      	movs	r1, r6
 8000932:	4648      	mov	r0, r9
 8000934:	4301      	orrs	r1, r0
 8000936:	2c00      	cmp	r4, #0
 8000938:	d000      	beq.n	800093c <__aeabi_dadd+0x3b8>
 800093a:	e14b      	b.n	8000bd4 <__aeabi_dadd+0x650>
 800093c:	001f      	movs	r7, r3
 800093e:	4317      	orrs	r7, r2
 8000940:	2900      	cmp	r1, #0
 8000942:	d100      	bne.n	8000946 <__aeabi_dadd+0x3c2>
 8000944:	e181      	b.n	8000c4a <__aeabi_dadd+0x6c6>
 8000946:	2f00      	cmp	r7, #0
 8000948:	d100      	bne.n	800094c <__aeabi_dadd+0x3c8>
 800094a:	e74c      	b.n	80007e6 <__aeabi_dadd+0x262>
 800094c:	444a      	add	r2, r9
 800094e:	454a      	cmp	r2, r9
 8000950:	4180      	sbcs	r0, r0
 8000952:	18f6      	adds	r6, r6, r3
 8000954:	4240      	negs	r0, r0
 8000956:	1836      	adds	r6, r6, r0
 8000958:	0233      	lsls	r3, r6, #8
 800095a:	d500      	bpl.n	800095e <__aeabi_dadd+0x3da>
 800095c:	e1b0      	b.n	8000cc0 <__aeabi_dadd+0x73c>
 800095e:	0017      	movs	r7, r2
 8000960:	4691      	mov	r9, r2
 8000962:	4337      	orrs	r7, r6
 8000964:	d000      	beq.n	8000968 <__aeabi_dadd+0x3e4>
 8000966:	e73e      	b.n	80007e6 <__aeabi_dadd+0x262>
 8000968:	2600      	movs	r6, #0
 800096a:	e754      	b.n	8000816 <__aeabi_dadd+0x292>
 800096c:	4649      	mov	r1, r9
 800096e:	1a89      	subs	r1, r1, r2
 8000970:	4688      	mov	r8, r1
 8000972:	45c1      	cmp	r9, r8
 8000974:	41bf      	sbcs	r7, r7
 8000976:	1af1      	subs	r1, r6, r3
 8000978:	427f      	negs	r7, r7
 800097a:	1bc9      	subs	r1, r1, r7
 800097c:	020f      	lsls	r7, r1, #8
 800097e:	d461      	bmi.n	8000a44 <__aeabi_dadd+0x4c0>
 8000980:	4647      	mov	r7, r8
 8000982:	430f      	orrs	r7, r1
 8000984:	d100      	bne.n	8000988 <__aeabi_dadd+0x404>
 8000986:	e0bd      	b.n	8000b04 <__aeabi_dadd+0x580>
 8000988:	000e      	movs	r6, r1
 800098a:	4647      	mov	r7, r8
 800098c:	e651      	b.n	8000632 <__aeabi_dadd+0xae>
 800098e:	4cb5      	ldr	r4, [pc, #724]	@ (8000c64 <__aeabi_dadd+0x6e0>)
 8000990:	45a0      	cmp	r8, r4
 8000992:	d100      	bne.n	8000996 <__aeabi_dadd+0x412>
 8000994:	e100      	b.n	8000b98 <__aeabi_dadd+0x614>
 8000996:	2701      	movs	r7, #1
 8000998:	2938      	cmp	r1, #56	@ 0x38
 800099a:	dd00      	ble.n	800099e <__aeabi_dadd+0x41a>
 800099c:	e6b8      	b.n	8000710 <__aeabi_dadd+0x18c>
 800099e:	2480      	movs	r4, #128	@ 0x80
 80009a0:	0424      	lsls	r4, r4, #16
 80009a2:	4326      	orrs	r6, r4
 80009a4:	e6a3      	b.n	80006ee <__aeabi_dadd+0x16a>
 80009a6:	4eb0      	ldr	r6, [pc, #704]	@ (8000c68 <__aeabi_dadd+0x6e4>)
 80009a8:	1ae4      	subs	r4, r4, r3
 80009aa:	4016      	ands	r6, r2
 80009ac:	077b      	lsls	r3, r7, #29
 80009ae:	d000      	beq.n	80009b2 <__aeabi_dadd+0x42e>
 80009b0:	e73f      	b.n	8000832 <__aeabi_dadd+0x2ae>
 80009b2:	e743      	b.n	800083c <__aeabi_dadd+0x2b8>
 80009b4:	000f      	movs	r7, r1
 80009b6:	0018      	movs	r0, r3
 80009b8:	3f20      	subs	r7, #32
 80009ba:	40f8      	lsrs	r0, r7
 80009bc:	4684      	mov	ip, r0
 80009be:	2920      	cmp	r1, #32
 80009c0:	d003      	beq.n	80009ca <__aeabi_dadd+0x446>
 80009c2:	2740      	movs	r7, #64	@ 0x40
 80009c4:	1a79      	subs	r1, r7, r1
 80009c6:	408b      	lsls	r3, r1
 80009c8:	431a      	orrs	r2, r3
 80009ca:	1e53      	subs	r3, r2, #1
 80009cc:	419a      	sbcs	r2, r3
 80009ce:	4663      	mov	r3, ip
 80009d0:	0017      	movs	r7, r2
 80009d2:	431f      	orrs	r7, r3
 80009d4:	e622      	b.n	800061c <__aeabi_dadd+0x98>
 80009d6:	48a4      	ldr	r0, [pc, #656]	@ (8000c68 <__aeabi_dadd+0x6e4>)
 80009d8:	1ae1      	subs	r1, r4, r3
 80009da:	4010      	ands	r0, r2
 80009dc:	0747      	lsls	r7, r0, #29
 80009de:	08c0      	lsrs	r0, r0, #3
 80009e0:	e707      	b.n	80007f2 <__aeabi_dadd+0x26e>
 80009e2:	0034      	movs	r4, r6
 80009e4:	4648      	mov	r0, r9
 80009e6:	4304      	orrs	r4, r0
 80009e8:	d100      	bne.n	80009ec <__aeabi_dadd+0x468>
 80009ea:	e0fa      	b.n	8000be2 <__aeabi_dadd+0x65e>
 80009ec:	1e4c      	subs	r4, r1, #1
 80009ee:	2901      	cmp	r1, #1
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dadd+0x470>
 80009f2:	e0d7      	b.n	8000ba4 <__aeabi_dadd+0x620>
 80009f4:	4f9b      	ldr	r7, [pc, #620]	@ (8000c64 <__aeabi_dadd+0x6e0>)
 80009f6:	42b9      	cmp	r1, r7
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x478>
 80009fa:	e0e2      	b.n	8000bc2 <__aeabi_dadd+0x63e>
 80009fc:	2701      	movs	r7, #1
 80009fe:	2c38      	cmp	r4, #56	@ 0x38
 8000a00:	dd00      	ble.n	8000a04 <__aeabi_dadd+0x480>
 8000a02:	e74f      	b.n	80008a4 <__aeabi_dadd+0x320>
 8000a04:	0021      	movs	r1, r4
 8000a06:	e73c      	b.n	8000882 <__aeabi_dadd+0x2fe>
 8000a08:	4c96      	ldr	r4, [pc, #600]	@ (8000c64 <__aeabi_dadd+0x6e0>)
 8000a0a:	42a1      	cmp	r1, r4
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_dadd+0x48c>
 8000a0e:	e0dd      	b.n	8000bcc <__aeabi_dadd+0x648>
 8000a10:	444a      	add	r2, r9
 8000a12:	454a      	cmp	r2, r9
 8000a14:	4180      	sbcs	r0, r0
 8000a16:	18f3      	adds	r3, r6, r3
 8000a18:	4240      	negs	r0, r0
 8000a1a:	1818      	adds	r0, r3, r0
 8000a1c:	07c7      	lsls	r7, r0, #31
 8000a1e:	0852      	lsrs	r2, r2, #1
 8000a20:	4317      	orrs	r7, r2
 8000a22:	0846      	lsrs	r6, r0, #1
 8000a24:	0752      	lsls	r2, r2, #29
 8000a26:	d005      	beq.n	8000a34 <__aeabi_dadd+0x4b0>
 8000a28:	220f      	movs	r2, #15
 8000a2a:	000c      	movs	r4, r1
 8000a2c:	403a      	ands	r2, r7
 8000a2e:	2a04      	cmp	r2, #4
 8000a30:	d000      	beq.n	8000a34 <__aeabi_dadd+0x4b0>
 8000a32:	e62c      	b.n	800068e <__aeabi_dadd+0x10a>
 8000a34:	0776      	lsls	r6, r6, #29
 8000a36:	08ff      	lsrs	r7, r7, #3
 8000a38:	4337      	orrs	r7, r6
 8000a3a:	0900      	lsrs	r0, r0, #4
 8000a3c:	e6d9      	b.n	80007f2 <__aeabi_dadd+0x26e>
 8000a3e:	2700      	movs	r7, #0
 8000a40:	2600      	movs	r6, #0
 8000a42:	e6e8      	b.n	8000816 <__aeabi_dadd+0x292>
 8000a44:	4649      	mov	r1, r9
 8000a46:	1a57      	subs	r7, r2, r1
 8000a48:	42ba      	cmp	r2, r7
 8000a4a:	4192      	sbcs	r2, r2
 8000a4c:	1b9e      	subs	r6, r3, r6
 8000a4e:	4252      	negs	r2, r2
 8000a50:	4665      	mov	r5, ip
 8000a52:	1ab6      	subs	r6, r6, r2
 8000a54:	e5ed      	b.n	8000632 <__aeabi_dadd+0xae>
 8000a56:	2900      	cmp	r1, #0
 8000a58:	d000      	beq.n	8000a5c <__aeabi_dadd+0x4d8>
 8000a5a:	e0c6      	b.n	8000bea <__aeabi_dadd+0x666>
 8000a5c:	2f00      	cmp	r7, #0
 8000a5e:	d167      	bne.n	8000b30 <__aeabi_dadd+0x5ac>
 8000a60:	2680      	movs	r6, #128	@ 0x80
 8000a62:	2500      	movs	r5, #0
 8000a64:	4c7f      	ldr	r4, [pc, #508]	@ (8000c64 <__aeabi_dadd+0x6e0>)
 8000a66:	0336      	lsls	r6, r6, #12
 8000a68:	e6d5      	b.n	8000816 <__aeabi_dadd+0x292>
 8000a6a:	4665      	mov	r5, ip
 8000a6c:	000c      	movs	r4, r1
 8000a6e:	001e      	movs	r6, r3
 8000a70:	08d0      	lsrs	r0, r2, #3
 8000a72:	e6e4      	b.n	800083e <__aeabi_dadd+0x2ba>
 8000a74:	444a      	add	r2, r9
 8000a76:	454a      	cmp	r2, r9
 8000a78:	4180      	sbcs	r0, r0
 8000a7a:	18f3      	adds	r3, r6, r3
 8000a7c:	4240      	negs	r0, r0
 8000a7e:	1818      	adds	r0, r3, r0
 8000a80:	0011      	movs	r1, r2
 8000a82:	0203      	lsls	r3, r0, #8
 8000a84:	d400      	bmi.n	8000a88 <__aeabi_dadd+0x504>
 8000a86:	e096      	b.n	8000bb6 <__aeabi_dadd+0x632>
 8000a88:	4b77      	ldr	r3, [pc, #476]	@ (8000c68 <__aeabi_dadd+0x6e4>)
 8000a8a:	0849      	lsrs	r1, r1, #1
 8000a8c:	4018      	ands	r0, r3
 8000a8e:	07c3      	lsls	r3, r0, #31
 8000a90:	430b      	orrs	r3, r1
 8000a92:	0844      	lsrs	r4, r0, #1
 8000a94:	0749      	lsls	r1, r1, #29
 8000a96:	d100      	bne.n	8000a9a <__aeabi_dadd+0x516>
 8000a98:	e129      	b.n	8000cee <__aeabi_dadd+0x76a>
 8000a9a:	220f      	movs	r2, #15
 8000a9c:	401a      	ands	r2, r3
 8000a9e:	2a04      	cmp	r2, #4
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_dadd+0x520>
 8000aa2:	e0ea      	b.n	8000c7a <__aeabi_dadd+0x6f6>
 8000aa4:	1d1f      	adds	r7, r3, #4
 8000aa6:	429f      	cmp	r7, r3
 8000aa8:	41b6      	sbcs	r6, r6
 8000aaa:	4276      	negs	r6, r6
 8000aac:	1936      	adds	r6, r6, r4
 8000aae:	2402      	movs	r4, #2
 8000ab0:	e6c4      	b.n	800083c <__aeabi_dadd+0x2b8>
 8000ab2:	4649      	mov	r1, r9
 8000ab4:	1a8f      	subs	r7, r1, r2
 8000ab6:	45b9      	cmp	r9, r7
 8000ab8:	4180      	sbcs	r0, r0
 8000aba:	1af6      	subs	r6, r6, r3
 8000abc:	4240      	negs	r0, r0
 8000abe:	1a36      	subs	r6, r6, r0
 8000ac0:	0233      	lsls	r3, r6, #8
 8000ac2:	d406      	bmi.n	8000ad2 <__aeabi_dadd+0x54e>
 8000ac4:	0773      	lsls	r3, r6, #29
 8000ac6:	08ff      	lsrs	r7, r7, #3
 8000ac8:	2101      	movs	r1, #1
 8000aca:	431f      	orrs	r7, r3
 8000acc:	08f0      	lsrs	r0, r6, #3
 8000ace:	e690      	b.n	80007f2 <__aeabi_dadd+0x26e>
 8000ad0:	4665      	mov	r5, ip
 8000ad2:	2401      	movs	r4, #1
 8000ad4:	e5ab      	b.n	800062e <__aeabi_dadd+0xaa>
 8000ad6:	464b      	mov	r3, r9
 8000ad8:	0777      	lsls	r7, r6, #29
 8000ada:	08d8      	lsrs	r0, r3, #3
 8000adc:	4307      	orrs	r7, r0
 8000ade:	08f0      	lsrs	r0, r6, #3
 8000ae0:	e6b4      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000ae2:	000f      	movs	r7, r1
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	3f20      	subs	r7, #32
 8000ae8:	40f8      	lsrs	r0, r7
 8000aea:	4684      	mov	ip, r0
 8000aec:	2920      	cmp	r1, #32
 8000aee:	d003      	beq.n	8000af8 <__aeabi_dadd+0x574>
 8000af0:	2740      	movs	r7, #64	@ 0x40
 8000af2:	1a79      	subs	r1, r7, r1
 8000af4:	408b      	lsls	r3, r1
 8000af6:	431a      	orrs	r2, r3
 8000af8:	1e53      	subs	r3, r2, #1
 8000afa:	419a      	sbcs	r2, r3
 8000afc:	4663      	mov	r3, ip
 8000afe:	0017      	movs	r7, r2
 8000b00:	431f      	orrs	r7, r3
 8000b02:	e635      	b.n	8000770 <__aeabi_dadd+0x1ec>
 8000b04:	2500      	movs	r5, #0
 8000b06:	2400      	movs	r4, #0
 8000b08:	2600      	movs	r6, #0
 8000b0a:	e684      	b.n	8000816 <__aeabi_dadd+0x292>
 8000b0c:	000c      	movs	r4, r1
 8000b0e:	0035      	movs	r5, r6
 8000b10:	3c20      	subs	r4, #32
 8000b12:	40e5      	lsrs	r5, r4
 8000b14:	2920      	cmp	r1, #32
 8000b16:	d005      	beq.n	8000b24 <__aeabi_dadd+0x5a0>
 8000b18:	2440      	movs	r4, #64	@ 0x40
 8000b1a:	1a61      	subs	r1, r4, r1
 8000b1c:	408e      	lsls	r6, r1
 8000b1e:	4649      	mov	r1, r9
 8000b20:	4331      	orrs	r1, r6
 8000b22:	4689      	mov	r9, r1
 8000b24:	4648      	mov	r0, r9
 8000b26:	1e41      	subs	r1, r0, #1
 8000b28:	4188      	sbcs	r0, r1
 8000b2a:	0007      	movs	r7, r0
 8000b2c:	432f      	orrs	r7, r5
 8000b2e:	e5ef      	b.n	8000710 <__aeabi_dadd+0x18c>
 8000b30:	08d2      	lsrs	r2, r2, #3
 8000b32:	075f      	lsls	r7, r3, #29
 8000b34:	4665      	mov	r5, ip
 8000b36:	4317      	orrs	r7, r2
 8000b38:	08d8      	lsrs	r0, r3, #3
 8000b3a:	e687      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000b3c:	1a17      	subs	r7, r2, r0
 8000b3e:	42ba      	cmp	r2, r7
 8000b40:	4192      	sbcs	r2, r2
 8000b42:	1b9e      	subs	r6, r3, r6
 8000b44:	4252      	negs	r2, r2
 8000b46:	1ab6      	subs	r6, r6, r2
 8000b48:	0233      	lsls	r3, r6, #8
 8000b4a:	d4c1      	bmi.n	8000ad0 <__aeabi_dadd+0x54c>
 8000b4c:	0773      	lsls	r3, r6, #29
 8000b4e:	08ff      	lsrs	r7, r7, #3
 8000b50:	4665      	mov	r5, ip
 8000b52:	2101      	movs	r1, #1
 8000b54:	431f      	orrs	r7, r3
 8000b56:	08f0      	lsrs	r0, r6, #3
 8000b58:	e64b      	b.n	80007f2 <__aeabi_dadd+0x26e>
 8000b5a:	2f00      	cmp	r7, #0
 8000b5c:	d07b      	beq.n	8000c56 <__aeabi_dadd+0x6d2>
 8000b5e:	4665      	mov	r5, ip
 8000b60:	001e      	movs	r6, r3
 8000b62:	4691      	mov	r9, r2
 8000b64:	e63f      	b.n	80007e6 <__aeabi_dadd+0x262>
 8000b66:	1a81      	subs	r1, r0, r2
 8000b68:	4688      	mov	r8, r1
 8000b6a:	45c1      	cmp	r9, r8
 8000b6c:	41a4      	sbcs	r4, r4
 8000b6e:	1af1      	subs	r1, r6, r3
 8000b70:	4264      	negs	r4, r4
 8000b72:	1b09      	subs	r1, r1, r4
 8000b74:	2480      	movs	r4, #128	@ 0x80
 8000b76:	0424      	lsls	r4, r4, #16
 8000b78:	4221      	tst	r1, r4
 8000b7a:	d077      	beq.n	8000c6c <__aeabi_dadd+0x6e8>
 8000b7c:	1a10      	subs	r0, r2, r0
 8000b7e:	4282      	cmp	r2, r0
 8000b80:	4192      	sbcs	r2, r2
 8000b82:	0007      	movs	r7, r0
 8000b84:	1b9e      	subs	r6, r3, r6
 8000b86:	4252      	negs	r2, r2
 8000b88:	1ab6      	subs	r6, r6, r2
 8000b8a:	4337      	orrs	r7, r6
 8000b8c:	d000      	beq.n	8000b90 <__aeabi_dadd+0x60c>
 8000b8e:	e0a0      	b.n	8000cd2 <__aeabi_dadd+0x74e>
 8000b90:	4665      	mov	r5, ip
 8000b92:	2400      	movs	r4, #0
 8000b94:	2600      	movs	r6, #0
 8000b96:	e63e      	b.n	8000816 <__aeabi_dadd+0x292>
 8000b98:	075f      	lsls	r7, r3, #29
 8000b9a:	08d2      	lsrs	r2, r2, #3
 8000b9c:	4665      	mov	r5, ip
 8000b9e:	4317      	orrs	r7, r2
 8000ba0:	08d8      	lsrs	r0, r3, #3
 8000ba2:	e653      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000ba4:	1881      	adds	r1, r0, r2
 8000ba6:	4291      	cmp	r1, r2
 8000ba8:	4192      	sbcs	r2, r2
 8000baa:	18f0      	adds	r0, r6, r3
 8000bac:	4252      	negs	r2, r2
 8000bae:	1880      	adds	r0, r0, r2
 8000bb0:	0203      	lsls	r3, r0, #8
 8000bb2:	d500      	bpl.n	8000bb6 <__aeabi_dadd+0x632>
 8000bb4:	e768      	b.n	8000a88 <__aeabi_dadd+0x504>
 8000bb6:	0747      	lsls	r7, r0, #29
 8000bb8:	08c9      	lsrs	r1, r1, #3
 8000bba:	430f      	orrs	r7, r1
 8000bbc:	08c0      	lsrs	r0, r0, #3
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	e617      	b.n	80007f2 <__aeabi_dadd+0x26e>
 8000bc2:	08d2      	lsrs	r2, r2, #3
 8000bc4:	075f      	lsls	r7, r3, #29
 8000bc6:	4317      	orrs	r7, r2
 8000bc8:	08d8      	lsrs	r0, r3, #3
 8000bca:	e63f      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000bcc:	000c      	movs	r4, r1
 8000bce:	2600      	movs	r6, #0
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	e620      	b.n	8000816 <__aeabi_dadd+0x292>
 8000bd4:	2900      	cmp	r1, #0
 8000bd6:	d156      	bne.n	8000c86 <__aeabi_dadd+0x702>
 8000bd8:	075f      	lsls	r7, r3, #29
 8000bda:	08d2      	lsrs	r2, r2, #3
 8000bdc:	4317      	orrs	r7, r2
 8000bde:	08d8      	lsrs	r0, r3, #3
 8000be0:	e634      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000be2:	000c      	movs	r4, r1
 8000be4:	001e      	movs	r6, r3
 8000be6:	08d0      	lsrs	r0, r2, #3
 8000be8:	e629      	b.n	800083e <__aeabi_dadd+0x2ba>
 8000bea:	08c1      	lsrs	r1, r0, #3
 8000bec:	0770      	lsls	r0, r6, #29
 8000bee:	4301      	orrs	r1, r0
 8000bf0:	08f0      	lsrs	r0, r6, #3
 8000bf2:	2f00      	cmp	r7, #0
 8000bf4:	d062      	beq.n	8000cbc <__aeabi_dadd+0x738>
 8000bf6:	2480      	movs	r4, #128	@ 0x80
 8000bf8:	0324      	lsls	r4, r4, #12
 8000bfa:	4220      	tst	r0, r4
 8000bfc:	d007      	beq.n	8000c0e <__aeabi_dadd+0x68a>
 8000bfe:	08de      	lsrs	r6, r3, #3
 8000c00:	4226      	tst	r6, r4
 8000c02:	d104      	bne.n	8000c0e <__aeabi_dadd+0x68a>
 8000c04:	4665      	mov	r5, ip
 8000c06:	0030      	movs	r0, r6
 8000c08:	08d1      	lsrs	r1, r2, #3
 8000c0a:	075b      	lsls	r3, r3, #29
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	0f4f      	lsrs	r7, r1, #29
 8000c10:	00c9      	lsls	r1, r1, #3
 8000c12:	08c9      	lsrs	r1, r1, #3
 8000c14:	077f      	lsls	r7, r7, #29
 8000c16:	430f      	orrs	r7, r1
 8000c18:	e618      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000c1a:	000c      	movs	r4, r1
 8000c1c:	0030      	movs	r0, r6
 8000c1e:	3c20      	subs	r4, #32
 8000c20:	40e0      	lsrs	r0, r4
 8000c22:	4684      	mov	ip, r0
 8000c24:	2920      	cmp	r1, #32
 8000c26:	d005      	beq.n	8000c34 <__aeabi_dadd+0x6b0>
 8000c28:	2440      	movs	r4, #64	@ 0x40
 8000c2a:	1a61      	subs	r1, r4, r1
 8000c2c:	408e      	lsls	r6, r1
 8000c2e:	4649      	mov	r1, r9
 8000c30:	4331      	orrs	r1, r6
 8000c32:	4689      	mov	r9, r1
 8000c34:	4648      	mov	r0, r9
 8000c36:	1e41      	subs	r1, r0, #1
 8000c38:	4188      	sbcs	r0, r1
 8000c3a:	4661      	mov	r1, ip
 8000c3c:	0007      	movs	r7, r0
 8000c3e:	430f      	orrs	r7, r1
 8000c40:	e630      	b.n	80008a4 <__aeabi_dadd+0x320>
 8000c42:	2120      	movs	r1, #32
 8000c44:	2700      	movs	r7, #0
 8000c46:	1a09      	subs	r1, r1, r0
 8000c48:	e50e      	b.n	8000668 <__aeabi_dadd+0xe4>
 8000c4a:	001e      	movs	r6, r3
 8000c4c:	2f00      	cmp	r7, #0
 8000c4e:	d000      	beq.n	8000c52 <__aeabi_dadd+0x6ce>
 8000c50:	e522      	b.n	8000698 <__aeabi_dadd+0x114>
 8000c52:	2400      	movs	r4, #0
 8000c54:	e758      	b.n	8000b08 <__aeabi_dadd+0x584>
 8000c56:	2500      	movs	r5, #0
 8000c58:	2400      	movs	r4, #0
 8000c5a:	2600      	movs	r6, #0
 8000c5c:	e5db      	b.n	8000816 <__aeabi_dadd+0x292>
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	000007fe 	.word	0x000007fe
 8000c64:	000007ff 	.word	0x000007ff
 8000c68:	ff7fffff 	.word	0xff7fffff
 8000c6c:	4647      	mov	r7, r8
 8000c6e:	430f      	orrs	r7, r1
 8000c70:	d100      	bne.n	8000c74 <__aeabi_dadd+0x6f0>
 8000c72:	e747      	b.n	8000b04 <__aeabi_dadd+0x580>
 8000c74:	000e      	movs	r6, r1
 8000c76:	46c1      	mov	r9, r8
 8000c78:	e5b5      	b.n	80007e6 <__aeabi_dadd+0x262>
 8000c7a:	08df      	lsrs	r7, r3, #3
 8000c7c:	0764      	lsls	r4, r4, #29
 8000c7e:	2102      	movs	r1, #2
 8000c80:	4327      	orrs	r7, r4
 8000c82:	0900      	lsrs	r0, r0, #4
 8000c84:	e5b5      	b.n	80007f2 <__aeabi_dadd+0x26e>
 8000c86:	0019      	movs	r1, r3
 8000c88:	08c0      	lsrs	r0, r0, #3
 8000c8a:	0777      	lsls	r7, r6, #29
 8000c8c:	4307      	orrs	r7, r0
 8000c8e:	4311      	orrs	r1, r2
 8000c90:	08f0      	lsrs	r0, r6, #3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d100      	bne.n	8000c98 <__aeabi_dadd+0x714>
 8000c96:	e5d9      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000c98:	2180      	movs	r1, #128	@ 0x80
 8000c9a:	0309      	lsls	r1, r1, #12
 8000c9c:	4208      	tst	r0, r1
 8000c9e:	d007      	beq.n	8000cb0 <__aeabi_dadd+0x72c>
 8000ca0:	08dc      	lsrs	r4, r3, #3
 8000ca2:	420c      	tst	r4, r1
 8000ca4:	d104      	bne.n	8000cb0 <__aeabi_dadd+0x72c>
 8000ca6:	08d2      	lsrs	r2, r2, #3
 8000ca8:	075b      	lsls	r3, r3, #29
 8000caa:	431a      	orrs	r2, r3
 8000cac:	0017      	movs	r7, r2
 8000cae:	0020      	movs	r0, r4
 8000cb0:	0f7b      	lsrs	r3, r7, #29
 8000cb2:	00ff      	lsls	r7, r7, #3
 8000cb4:	08ff      	lsrs	r7, r7, #3
 8000cb6:	075b      	lsls	r3, r3, #29
 8000cb8:	431f      	orrs	r7, r3
 8000cba:	e5c7      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000cbc:	000f      	movs	r7, r1
 8000cbe:	e5c5      	b.n	800084c <__aeabi_dadd+0x2c8>
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <__aeabi_dadd+0x788>)
 8000cc2:	08d2      	lsrs	r2, r2, #3
 8000cc4:	4033      	ands	r3, r6
 8000cc6:	075f      	lsls	r7, r3, #29
 8000cc8:	025b      	lsls	r3, r3, #9
 8000cca:	2401      	movs	r4, #1
 8000ccc:	4317      	orrs	r7, r2
 8000cce:	0b1e      	lsrs	r6, r3, #12
 8000cd0:	e5a1      	b.n	8000816 <__aeabi_dadd+0x292>
 8000cd2:	4226      	tst	r6, r4
 8000cd4:	d012      	beq.n	8000cfc <__aeabi_dadd+0x778>
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d0c <__aeabi_dadd+0x788>)
 8000cd8:	4665      	mov	r5, ip
 8000cda:	0002      	movs	r2, r0
 8000cdc:	2401      	movs	r4, #1
 8000cde:	401e      	ands	r6, r3
 8000ce0:	e4e6      	b.n	80006b0 <__aeabi_dadd+0x12c>
 8000ce2:	0021      	movs	r1, r4
 8000ce4:	e585      	b.n	80007f2 <__aeabi_dadd+0x26e>
 8000ce6:	0017      	movs	r7, r2
 8000ce8:	e5a8      	b.n	800083c <__aeabi_dadd+0x2b8>
 8000cea:	003a      	movs	r2, r7
 8000cec:	e4d4      	b.n	8000698 <__aeabi_dadd+0x114>
 8000cee:	08db      	lsrs	r3, r3, #3
 8000cf0:	0764      	lsls	r4, r4, #29
 8000cf2:	431c      	orrs	r4, r3
 8000cf4:	0027      	movs	r7, r4
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	0900      	lsrs	r0, r0, #4
 8000cfa:	e57a      	b.n	80007f2 <__aeabi_dadd+0x26e>
 8000cfc:	08c0      	lsrs	r0, r0, #3
 8000cfe:	0777      	lsls	r7, r6, #29
 8000d00:	4307      	orrs	r7, r0
 8000d02:	4665      	mov	r5, ip
 8000d04:	2100      	movs	r1, #0
 8000d06:	08f0      	lsrs	r0, r6, #3
 8000d08:	e573      	b.n	80007f2 <__aeabi_dadd+0x26e>
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	ff7fffff 	.word	0xff7fffff

08000d10 <__aeabi_ddiv>:
 8000d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d12:	46de      	mov	lr, fp
 8000d14:	4645      	mov	r5, r8
 8000d16:	4657      	mov	r7, sl
 8000d18:	464e      	mov	r6, r9
 8000d1a:	b5e0      	push	{r5, r6, r7, lr}
 8000d1c:	b087      	sub	sp, #28
 8000d1e:	9200      	str	r2, [sp, #0]
 8000d20:	9301      	str	r3, [sp, #4]
 8000d22:	030b      	lsls	r3, r1, #12
 8000d24:	0b1b      	lsrs	r3, r3, #12
 8000d26:	469b      	mov	fp, r3
 8000d28:	0fca      	lsrs	r2, r1, #31
 8000d2a:	004b      	lsls	r3, r1, #1
 8000d2c:	0004      	movs	r4, r0
 8000d2e:	4680      	mov	r8, r0
 8000d30:	0d5b      	lsrs	r3, r3, #21
 8000d32:	9202      	str	r2, [sp, #8]
 8000d34:	d100      	bne.n	8000d38 <__aeabi_ddiv+0x28>
 8000d36:	e098      	b.n	8000e6a <__aeabi_ddiv+0x15a>
 8000d38:	4a7c      	ldr	r2, [pc, #496]	@ (8000f2c <__aeabi_ddiv+0x21c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d037      	beq.n	8000dae <__aeabi_ddiv+0x9e>
 8000d3e:	4659      	mov	r1, fp
 8000d40:	0f42      	lsrs	r2, r0, #29
 8000d42:	00c9      	lsls	r1, r1, #3
 8000d44:	430a      	orrs	r2, r1
 8000d46:	2180      	movs	r1, #128	@ 0x80
 8000d48:	0409      	lsls	r1, r1, #16
 8000d4a:	4311      	orrs	r1, r2
 8000d4c:	00c2      	lsls	r2, r0, #3
 8000d4e:	4690      	mov	r8, r2
 8000d50:	4a77      	ldr	r2, [pc, #476]	@ (8000f30 <__aeabi_ddiv+0x220>)
 8000d52:	4689      	mov	r9, r1
 8000d54:	4692      	mov	sl, r2
 8000d56:	449a      	add	sl, r3
 8000d58:	2300      	movs	r3, #0
 8000d5a:	2400      	movs	r4, #0
 8000d5c:	9303      	str	r3, [sp, #12]
 8000d5e:	9e00      	ldr	r6, [sp, #0]
 8000d60:	9f01      	ldr	r7, [sp, #4]
 8000d62:	033b      	lsls	r3, r7, #12
 8000d64:	0b1b      	lsrs	r3, r3, #12
 8000d66:	469b      	mov	fp, r3
 8000d68:	007b      	lsls	r3, r7, #1
 8000d6a:	0030      	movs	r0, r6
 8000d6c:	0d5b      	lsrs	r3, r3, #21
 8000d6e:	0ffd      	lsrs	r5, r7, #31
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d059      	beq.n	8000e28 <__aeabi_ddiv+0x118>
 8000d74:	4a6d      	ldr	r2, [pc, #436]	@ (8000f2c <__aeabi_ddiv+0x21c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d048      	beq.n	8000e0c <__aeabi_ddiv+0xfc>
 8000d7a:	4659      	mov	r1, fp
 8000d7c:	0f72      	lsrs	r2, r6, #29
 8000d7e:	00c9      	lsls	r1, r1, #3
 8000d80:	430a      	orrs	r2, r1
 8000d82:	2180      	movs	r1, #128	@ 0x80
 8000d84:	0409      	lsls	r1, r1, #16
 8000d86:	4311      	orrs	r1, r2
 8000d88:	468b      	mov	fp, r1
 8000d8a:	4969      	ldr	r1, [pc, #420]	@ (8000f30 <__aeabi_ddiv+0x220>)
 8000d8c:	00f2      	lsls	r2, r6, #3
 8000d8e:	468c      	mov	ip, r1
 8000d90:	4651      	mov	r1, sl
 8000d92:	4463      	add	r3, ip
 8000d94:	1acb      	subs	r3, r1, r3
 8000d96:	469a      	mov	sl, r3
 8000d98:	2100      	movs	r1, #0
 8000d9a:	9e02      	ldr	r6, [sp, #8]
 8000d9c:	406e      	eors	r6, r5
 8000d9e:	b2f6      	uxtb	r6, r6
 8000da0:	2c0f      	cmp	r4, #15
 8000da2:	d900      	bls.n	8000da6 <__aeabi_ddiv+0x96>
 8000da4:	e0ce      	b.n	8000f44 <__aeabi_ddiv+0x234>
 8000da6:	4b63      	ldr	r3, [pc, #396]	@ (8000f34 <__aeabi_ddiv+0x224>)
 8000da8:	00a4      	lsls	r4, r4, #2
 8000daa:	591b      	ldr	r3, [r3, r4]
 8000dac:	469f      	mov	pc, r3
 8000dae:	465a      	mov	r2, fp
 8000db0:	4302      	orrs	r2, r0
 8000db2:	4691      	mov	r9, r2
 8000db4:	d000      	beq.n	8000db8 <__aeabi_ddiv+0xa8>
 8000db6:	e090      	b.n	8000eda <__aeabi_ddiv+0x1ca>
 8000db8:	469a      	mov	sl, r3
 8000dba:	2302      	movs	r3, #2
 8000dbc:	4690      	mov	r8, r2
 8000dbe:	2408      	movs	r4, #8
 8000dc0:	9303      	str	r3, [sp, #12]
 8000dc2:	e7cc      	b.n	8000d5e <__aeabi_ddiv+0x4e>
 8000dc4:	46cb      	mov	fp, r9
 8000dc6:	4642      	mov	r2, r8
 8000dc8:	9d02      	ldr	r5, [sp, #8]
 8000dca:	9903      	ldr	r1, [sp, #12]
 8000dcc:	2902      	cmp	r1, #2
 8000dce:	d100      	bne.n	8000dd2 <__aeabi_ddiv+0xc2>
 8000dd0:	e1de      	b.n	8001190 <__aeabi_ddiv+0x480>
 8000dd2:	2903      	cmp	r1, #3
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_ddiv+0xc8>
 8000dd6:	e08d      	b.n	8000ef4 <__aeabi_ddiv+0x1e4>
 8000dd8:	2901      	cmp	r1, #1
 8000dda:	d000      	beq.n	8000dde <__aeabi_ddiv+0xce>
 8000ddc:	e179      	b.n	80010d2 <__aeabi_ddiv+0x3c2>
 8000dde:	002e      	movs	r6, r5
 8000de0:	2200      	movs	r2, #0
 8000de2:	2300      	movs	r3, #0
 8000de4:	2400      	movs	r4, #0
 8000de6:	4690      	mov	r8, r2
 8000de8:	051b      	lsls	r3, r3, #20
 8000dea:	4323      	orrs	r3, r4
 8000dec:	07f6      	lsls	r6, r6, #31
 8000dee:	4333      	orrs	r3, r6
 8000df0:	4640      	mov	r0, r8
 8000df2:	0019      	movs	r1, r3
 8000df4:	b007      	add	sp, #28
 8000df6:	bcf0      	pop	{r4, r5, r6, r7}
 8000df8:	46bb      	mov	fp, r7
 8000dfa:	46b2      	mov	sl, r6
 8000dfc:	46a9      	mov	r9, r5
 8000dfe:	46a0      	mov	r8, r4
 8000e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e02:	2200      	movs	r2, #0
 8000e04:	2400      	movs	r4, #0
 8000e06:	4690      	mov	r8, r2
 8000e08:	4b48      	ldr	r3, [pc, #288]	@ (8000f2c <__aeabi_ddiv+0x21c>)
 8000e0a:	e7ed      	b.n	8000de8 <__aeabi_ddiv+0xd8>
 8000e0c:	465a      	mov	r2, fp
 8000e0e:	9b00      	ldr	r3, [sp, #0]
 8000e10:	431a      	orrs	r2, r3
 8000e12:	4b49      	ldr	r3, [pc, #292]	@ (8000f38 <__aeabi_ddiv+0x228>)
 8000e14:	469c      	mov	ip, r3
 8000e16:	44e2      	add	sl, ip
 8000e18:	2a00      	cmp	r2, #0
 8000e1a:	d159      	bne.n	8000ed0 <__aeabi_ddiv+0x1c0>
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	431c      	orrs	r4, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	2102      	movs	r1, #2
 8000e24:	469b      	mov	fp, r3
 8000e26:	e7b8      	b.n	8000d9a <__aeabi_ddiv+0x8a>
 8000e28:	465a      	mov	r2, fp
 8000e2a:	9b00      	ldr	r3, [sp, #0]
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	d049      	beq.n	8000ec4 <__aeabi_ddiv+0x1b4>
 8000e30:	465b      	mov	r3, fp
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d100      	bne.n	8000e38 <__aeabi_ddiv+0x128>
 8000e36:	e19c      	b.n	8001172 <__aeabi_ddiv+0x462>
 8000e38:	4658      	mov	r0, fp
 8000e3a:	f001 fbc5 	bl	80025c8 <__clzsi2>
 8000e3e:	0002      	movs	r2, r0
 8000e40:	0003      	movs	r3, r0
 8000e42:	3a0b      	subs	r2, #11
 8000e44:	271d      	movs	r7, #29
 8000e46:	9e00      	ldr	r6, [sp, #0]
 8000e48:	1aba      	subs	r2, r7, r2
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	4658      	mov	r0, fp
 8000e4e:	40d6      	lsrs	r6, r2
 8000e50:	3908      	subs	r1, #8
 8000e52:	4088      	lsls	r0, r1
 8000e54:	0032      	movs	r2, r6
 8000e56:	4302      	orrs	r2, r0
 8000e58:	4693      	mov	fp, r2
 8000e5a:	9a00      	ldr	r2, [sp, #0]
 8000e5c:	408a      	lsls	r2, r1
 8000e5e:	4937      	ldr	r1, [pc, #220]	@ (8000f3c <__aeabi_ddiv+0x22c>)
 8000e60:	4453      	add	r3, sl
 8000e62:	468a      	mov	sl, r1
 8000e64:	2100      	movs	r1, #0
 8000e66:	449a      	add	sl, r3
 8000e68:	e797      	b.n	8000d9a <__aeabi_ddiv+0x8a>
 8000e6a:	465b      	mov	r3, fp
 8000e6c:	4303      	orrs	r3, r0
 8000e6e:	4699      	mov	r9, r3
 8000e70:	d021      	beq.n	8000eb6 <__aeabi_ddiv+0x1a6>
 8000e72:	465b      	mov	r3, fp
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d100      	bne.n	8000e7a <__aeabi_ddiv+0x16a>
 8000e78:	e169      	b.n	800114e <__aeabi_ddiv+0x43e>
 8000e7a:	4658      	mov	r0, fp
 8000e7c:	f001 fba4 	bl	80025c8 <__clzsi2>
 8000e80:	230b      	movs	r3, #11
 8000e82:	425b      	negs	r3, r3
 8000e84:	469c      	mov	ip, r3
 8000e86:	0002      	movs	r2, r0
 8000e88:	4484      	add	ip, r0
 8000e8a:	4666      	mov	r6, ip
 8000e8c:	231d      	movs	r3, #29
 8000e8e:	1b9b      	subs	r3, r3, r6
 8000e90:	0026      	movs	r6, r4
 8000e92:	0011      	movs	r1, r2
 8000e94:	4658      	mov	r0, fp
 8000e96:	40de      	lsrs	r6, r3
 8000e98:	3908      	subs	r1, #8
 8000e9a:	4088      	lsls	r0, r1
 8000e9c:	0033      	movs	r3, r6
 8000e9e:	4303      	orrs	r3, r0
 8000ea0:	4699      	mov	r9, r3
 8000ea2:	0023      	movs	r3, r4
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	4698      	mov	r8, r3
 8000ea8:	4b25      	ldr	r3, [pc, #148]	@ (8000f40 <__aeabi_ddiv+0x230>)
 8000eaa:	2400      	movs	r4, #0
 8000eac:	1a9b      	subs	r3, r3, r2
 8000eae:	469a      	mov	sl, r3
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	9303      	str	r3, [sp, #12]
 8000eb4:	e753      	b.n	8000d5e <__aeabi_ddiv+0x4e>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	4698      	mov	r8, r3
 8000eba:	469a      	mov	sl, r3
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	2404      	movs	r4, #4
 8000ec0:	9303      	str	r3, [sp, #12]
 8000ec2:	e74c      	b.n	8000d5e <__aeabi_ddiv+0x4e>
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	431c      	orrs	r4, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	2101      	movs	r1, #1
 8000ecc:	469b      	mov	fp, r3
 8000ece:	e764      	b.n	8000d9a <__aeabi_ddiv+0x8a>
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	0032      	movs	r2, r6
 8000ed4:	2103      	movs	r1, #3
 8000ed6:	431c      	orrs	r4, r3
 8000ed8:	e75f      	b.n	8000d9a <__aeabi_ddiv+0x8a>
 8000eda:	469a      	mov	sl, r3
 8000edc:	2303      	movs	r3, #3
 8000ede:	46d9      	mov	r9, fp
 8000ee0:	240c      	movs	r4, #12
 8000ee2:	9303      	str	r3, [sp, #12]
 8000ee4:	e73b      	b.n	8000d5e <__aeabi_ddiv+0x4e>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	2480      	movs	r4, #128	@ 0x80
 8000eea:	4698      	mov	r8, r3
 8000eec:	2600      	movs	r6, #0
 8000eee:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <__aeabi_ddiv+0x21c>)
 8000ef0:	0324      	lsls	r4, r4, #12
 8000ef2:	e779      	b.n	8000de8 <__aeabi_ddiv+0xd8>
 8000ef4:	2480      	movs	r4, #128	@ 0x80
 8000ef6:	465b      	mov	r3, fp
 8000ef8:	0324      	lsls	r4, r4, #12
 8000efa:	431c      	orrs	r4, r3
 8000efc:	0324      	lsls	r4, r4, #12
 8000efe:	002e      	movs	r6, r5
 8000f00:	4690      	mov	r8, r2
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <__aeabi_ddiv+0x21c>)
 8000f04:	0b24      	lsrs	r4, r4, #12
 8000f06:	e76f      	b.n	8000de8 <__aeabi_ddiv+0xd8>
 8000f08:	2480      	movs	r4, #128	@ 0x80
 8000f0a:	464b      	mov	r3, r9
 8000f0c:	0324      	lsls	r4, r4, #12
 8000f0e:	4223      	tst	r3, r4
 8000f10:	d002      	beq.n	8000f18 <__aeabi_ddiv+0x208>
 8000f12:	465b      	mov	r3, fp
 8000f14:	4223      	tst	r3, r4
 8000f16:	d0f0      	beq.n	8000efa <__aeabi_ddiv+0x1ea>
 8000f18:	2480      	movs	r4, #128	@ 0x80
 8000f1a:	464b      	mov	r3, r9
 8000f1c:	0324      	lsls	r4, r4, #12
 8000f1e:	431c      	orrs	r4, r3
 8000f20:	0324      	lsls	r4, r4, #12
 8000f22:	9e02      	ldr	r6, [sp, #8]
 8000f24:	4b01      	ldr	r3, [pc, #4]	@ (8000f2c <__aeabi_ddiv+0x21c>)
 8000f26:	0b24      	lsrs	r4, r4, #12
 8000f28:	e75e      	b.n	8000de8 <__aeabi_ddiv+0xd8>
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	000007ff 	.word	0x000007ff
 8000f30:	fffffc01 	.word	0xfffffc01
 8000f34:	08009eac 	.word	0x08009eac
 8000f38:	fffff801 	.word	0xfffff801
 8000f3c:	000003f3 	.word	0x000003f3
 8000f40:	fffffc0d 	.word	0xfffffc0d
 8000f44:	45cb      	cmp	fp, r9
 8000f46:	d200      	bcs.n	8000f4a <__aeabi_ddiv+0x23a>
 8000f48:	e0f8      	b.n	800113c <__aeabi_ddiv+0x42c>
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_ddiv+0x23e>
 8000f4c:	e0f3      	b.n	8001136 <__aeabi_ddiv+0x426>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	425b      	negs	r3, r3
 8000f52:	469c      	mov	ip, r3
 8000f54:	4644      	mov	r4, r8
 8000f56:	4648      	mov	r0, r9
 8000f58:	2500      	movs	r5, #0
 8000f5a:	44e2      	add	sl, ip
 8000f5c:	465b      	mov	r3, fp
 8000f5e:	0e17      	lsrs	r7, r2, #24
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	431f      	orrs	r7, r3
 8000f64:	0c19      	lsrs	r1, r3, #16
 8000f66:	043b      	lsls	r3, r7, #16
 8000f68:	0212      	lsls	r2, r2, #8
 8000f6a:	9700      	str	r7, [sp, #0]
 8000f6c:	0c1f      	lsrs	r7, r3, #16
 8000f6e:	4691      	mov	r9, r2
 8000f70:	9102      	str	r1, [sp, #8]
 8000f72:	9703      	str	r7, [sp, #12]
 8000f74:	f7ff f96a 	bl	800024c <__aeabi_uidivmod>
 8000f78:	0002      	movs	r2, r0
 8000f7a:	437a      	muls	r2, r7
 8000f7c:	040b      	lsls	r3, r1, #16
 8000f7e:	0c21      	lsrs	r1, r4, #16
 8000f80:	4680      	mov	r8, r0
 8000f82:	4319      	orrs	r1, r3
 8000f84:	428a      	cmp	r2, r1
 8000f86:	d909      	bls.n	8000f9c <__aeabi_ddiv+0x28c>
 8000f88:	9f00      	ldr	r7, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	46bc      	mov	ip, r7
 8000f8e:	425b      	negs	r3, r3
 8000f90:	4461      	add	r1, ip
 8000f92:	469c      	mov	ip, r3
 8000f94:	44e0      	add	r8, ip
 8000f96:	428f      	cmp	r7, r1
 8000f98:	d800      	bhi.n	8000f9c <__aeabi_ddiv+0x28c>
 8000f9a:	e15c      	b.n	8001256 <__aeabi_ddiv+0x546>
 8000f9c:	1a88      	subs	r0, r1, r2
 8000f9e:	9902      	ldr	r1, [sp, #8]
 8000fa0:	f7ff f954 	bl	800024c <__aeabi_uidivmod>
 8000fa4:	9a03      	ldr	r2, [sp, #12]
 8000fa6:	0424      	lsls	r4, r4, #16
 8000fa8:	4342      	muls	r2, r0
 8000faa:	0409      	lsls	r1, r1, #16
 8000fac:	0c24      	lsrs	r4, r4, #16
 8000fae:	0003      	movs	r3, r0
 8000fb0:	430c      	orrs	r4, r1
 8000fb2:	42a2      	cmp	r2, r4
 8000fb4:	d906      	bls.n	8000fc4 <__aeabi_ddiv+0x2b4>
 8000fb6:	9900      	ldr	r1, [sp, #0]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	468c      	mov	ip, r1
 8000fbc:	4464      	add	r4, ip
 8000fbe:	42a1      	cmp	r1, r4
 8000fc0:	d800      	bhi.n	8000fc4 <__aeabi_ddiv+0x2b4>
 8000fc2:	e142      	b.n	800124a <__aeabi_ddiv+0x53a>
 8000fc4:	1aa0      	subs	r0, r4, r2
 8000fc6:	4642      	mov	r2, r8
 8000fc8:	0412      	lsls	r2, r2, #16
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	4693      	mov	fp, r2
 8000fce:	464b      	mov	r3, r9
 8000fd0:	4659      	mov	r1, fp
 8000fd2:	0c1b      	lsrs	r3, r3, #16
 8000fd4:	001f      	movs	r7, r3
 8000fd6:	9304      	str	r3, [sp, #16]
 8000fd8:	040b      	lsls	r3, r1, #16
 8000fda:	4649      	mov	r1, r9
 8000fdc:	0409      	lsls	r1, r1, #16
 8000fde:	0c09      	lsrs	r1, r1, #16
 8000fe0:	000c      	movs	r4, r1
 8000fe2:	0c1b      	lsrs	r3, r3, #16
 8000fe4:	435c      	muls	r4, r3
 8000fe6:	0c12      	lsrs	r2, r2, #16
 8000fe8:	437b      	muls	r3, r7
 8000fea:	4688      	mov	r8, r1
 8000fec:	4351      	muls	r1, r2
 8000fee:	437a      	muls	r2, r7
 8000ff0:	0c27      	lsrs	r7, r4, #16
 8000ff2:	46bc      	mov	ip, r7
 8000ff4:	185b      	adds	r3, r3, r1
 8000ff6:	4463      	add	r3, ip
 8000ff8:	4299      	cmp	r1, r3
 8000ffa:	d903      	bls.n	8001004 <__aeabi_ddiv+0x2f4>
 8000ffc:	2180      	movs	r1, #128	@ 0x80
 8000ffe:	0249      	lsls	r1, r1, #9
 8001000:	468c      	mov	ip, r1
 8001002:	4462      	add	r2, ip
 8001004:	0c19      	lsrs	r1, r3, #16
 8001006:	0424      	lsls	r4, r4, #16
 8001008:	041b      	lsls	r3, r3, #16
 800100a:	0c24      	lsrs	r4, r4, #16
 800100c:	188a      	adds	r2, r1, r2
 800100e:	191c      	adds	r4, r3, r4
 8001010:	4290      	cmp	r0, r2
 8001012:	d302      	bcc.n	800101a <__aeabi_ddiv+0x30a>
 8001014:	d116      	bne.n	8001044 <__aeabi_ddiv+0x334>
 8001016:	42a5      	cmp	r5, r4
 8001018:	d214      	bcs.n	8001044 <__aeabi_ddiv+0x334>
 800101a:	465b      	mov	r3, fp
 800101c:	9f00      	ldr	r7, [sp, #0]
 800101e:	3b01      	subs	r3, #1
 8001020:	444d      	add	r5, r9
 8001022:	9305      	str	r3, [sp, #20]
 8001024:	454d      	cmp	r5, r9
 8001026:	419b      	sbcs	r3, r3
 8001028:	46bc      	mov	ip, r7
 800102a:	425b      	negs	r3, r3
 800102c:	4463      	add	r3, ip
 800102e:	18c0      	adds	r0, r0, r3
 8001030:	4287      	cmp	r7, r0
 8001032:	d300      	bcc.n	8001036 <__aeabi_ddiv+0x326>
 8001034:	e102      	b.n	800123c <__aeabi_ddiv+0x52c>
 8001036:	4282      	cmp	r2, r0
 8001038:	d900      	bls.n	800103c <__aeabi_ddiv+0x32c>
 800103a:	e129      	b.n	8001290 <__aeabi_ddiv+0x580>
 800103c:	d100      	bne.n	8001040 <__aeabi_ddiv+0x330>
 800103e:	e124      	b.n	800128a <__aeabi_ddiv+0x57a>
 8001040:	9b05      	ldr	r3, [sp, #20]
 8001042:	469b      	mov	fp, r3
 8001044:	1b2c      	subs	r4, r5, r4
 8001046:	42a5      	cmp	r5, r4
 8001048:	41ad      	sbcs	r5, r5
 800104a:	9b00      	ldr	r3, [sp, #0]
 800104c:	1a80      	subs	r0, r0, r2
 800104e:	426d      	negs	r5, r5
 8001050:	1b40      	subs	r0, r0, r5
 8001052:	4283      	cmp	r3, r0
 8001054:	d100      	bne.n	8001058 <__aeabi_ddiv+0x348>
 8001056:	e10f      	b.n	8001278 <__aeabi_ddiv+0x568>
 8001058:	9902      	ldr	r1, [sp, #8]
 800105a:	f7ff f8f7 	bl	800024c <__aeabi_uidivmod>
 800105e:	9a03      	ldr	r2, [sp, #12]
 8001060:	040b      	lsls	r3, r1, #16
 8001062:	4342      	muls	r2, r0
 8001064:	0c21      	lsrs	r1, r4, #16
 8001066:	0005      	movs	r5, r0
 8001068:	4319      	orrs	r1, r3
 800106a:	428a      	cmp	r2, r1
 800106c:	d900      	bls.n	8001070 <__aeabi_ddiv+0x360>
 800106e:	e0cb      	b.n	8001208 <__aeabi_ddiv+0x4f8>
 8001070:	1a88      	subs	r0, r1, r2
 8001072:	9902      	ldr	r1, [sp, #8]
 8001074:	f7ff f8ea 	bl	800024c <__aeabi_uidivmod>
 8001078:	9a03      	ldr	r2, [sp, #12]
 800107a:	0424      	lsls	r4, r4, #16
 800107c:	4342      	muls	r2, r0
 800107e:	0409      	lsls	r1, r1, #16
 8001080:	0c24      	lsrs	r4, r4, #16
 8001082:	0003      	movs	r3, r0
 8001084:	430c      	orrs	r4, r1
 8001086:	42a2      	cmp	r2, r4
 8001088:	d900      	bls.n	800108c <__aeabi_ddiv+0x37c>
 800108a:	e0ca      	b.n	8001222 <__aeabi_ddiv+0x512>
 800108c:	4641      	mov	r1, r8
 800108e:	1aa4      	subs	r4, r4, r2
 8001090:	042a      	lsls	r2, r5, #16
 8001092:	431a      	orrs	r2, r3
 8001094:	9f04      	ldr	r7, [sp, #16]
 8001096:	0413      	lsls	r3, r2, #16
 8001098:	0c1b      	lsrs	r3, r3, #16
 800109a:	4359      	muls	r1, r3
 800109c:	4640      	mov	r0, r8
 800109e:	437b      	muls	r3, r7
 80010a0:	469c      	mov	ip, r3
 80010a2:	0c15      	lsrs	r5, r2, #16
 80010a4:	4368      	muls	r0, r5
 80010a6:	0c0b      	lsrs	r3, r1, #16
 80010a8:	4484      	add	ip, r0
 80010aa:	4463      	add	r3, ip
 80010ac:	437d      	muls	r5, r7
 80010ae:	4298      	cmp	r0, r3
 80010b0:	d903      	bls.n	80010ba <__aeabi_ddiv+0x3aa>
 80010b2:	2080      	movs	r0, #128	@ 0x80
 80010b4:	0240      	lsls	r0, r0, #9
 80010b6:	4684      	mov	ip, r0
 80010b8:	4465      	add	r5, ip
 80010ba:	0c18      	lsrs	r0, r3, #16
 80010bc:	0409      	lsls	r1, r1, #16
 80010be:	041b      	lsls	r3, r3, #16
 80010c0:	0c09      	lsrs	r1, r1, #16
 80010c2:	1940      	adds	r0, r0, r5
 80010c4:	185b      	adds	r3, r3, r1
 80010c6:	4284      	cmp	r4, r0
 80010c8:	d327      	bcc.n	800111a <__aeabi_ddiv+0x40a>
 80010ca:	d023      	beq.n	8001114 <__aeabi_ddiv+0x404>
 80010cc:	2301      	movs	r3, #1
 80010ce:	0035      	movs	r5, r6
 80010d0:	431a      	orrs	r2, r3
 80010d2:	4b94      	ldr	r3, [pc, #592]	@ (8001324 <__aeabi_ddiv+0x614>)
 80010d4:	4453      	add	r3, sl
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	dd60      	ble.n	800119c <__aeabi_ddiv+0x48c>
 80010da:	0751      	lsls	r1, r2, #29
 80010dc:	d000      	beq.n	80010e0 <__aeabi_ddiv+0x3d0>
 80010de:	e086      	b.n	80011ee <__aeabi_ddiv+0x4de>
 80010e0:	002e      	movs	r6, r5
 80010e2:	08d1      	lsrs	r1, r2, #3
 80010e4:	465a      	mov	r2, fp
 80010e6:	01d2      	lsls	r2, r2, #7
 80010e8:	d506      	bpl.n	80010f8 <__aeabi_ddiv+0x3e8>
 80010ea:	465a      	mov	r2, fp
 80010ec:	4b8e      	ldr	r3, [pc, #568]	@ (8001328 <__aeabi_ddiv+0x618>)
 80010ee:	401a      	ands	r2, r3
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	4693      	mov	fp, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	4453      	add	r3, sl
 80010f8:	4a8c      	ldr	r2, [pc, #560]	@ (800132c <__aeabi_ddiv+0x61c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	dd00      	ble.n	8001100 <__aeabi_ddiv+0x3f0>
 80010fe:	e680      	b.n	8000e02 <__aeabi_ddiv+0xf2>
 8001100:	465a      	mov	r2, fp
 8001102:	0752      	lsls	r2, r2, #29
 8001104:	430a      	orrs	r2, r1
 8001106:	4690      	mov	r8, r2
 8001108:	465a      	mov	r2, fp
 800110a:	055b      	lsls	r3, r3, #21
 800110c:	0254      	lsls	r4, r2, #9
 800110e:	0b24      	lsrs	r4, r4, #12
 8001110:	0d5b      	lsrs	r3, r3, #21
 8001112:	e669      	b.n	8000de8 <__aeabi_ddiv+0xd8>
 8001114:	0035      	movs	r5, r6
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0db      	beq.n	80010d2 <__aeabi_ddiv+0x3c2>
 800111a:	9d00      	ldr	r5, [sp, #0]
 800111c:	1e51      	subs	r1, r2, #1
 800111e:	46ac      	mov	ip, r5
 8001120:	4464      	add	r4, ip
 8001122:	42ac      	cmp	r4, r5
 8001124:	d200      	bcs.n	8001128 <__aeabi_ddiv+0x418>
 8001126:	e09e      	b.n	8001266 <__aeabi_ddiv+0x556>
 8001128:	4284      	cmp	r4, r0
 800112a:	d200      	bcs.n	800112e <__aeabi_ddiv+0x41e>
 800112c:	e0e1      	b.n	80012f2 <__aeabi_ddiv+0x5e2>
 800112e:	d100      	bne.n	8001132 <__aeabi_ddiv+0x422>
 8001130:	e0ee      	b.n	8001310 <__aeabi_ddiv+0x600>
 8001132:	000a      	movs	r2, r1
 8001134:	e7ca      	b.n	80010cc <__aeabi_ddiv+0x3bc>
 8001136:	4542      	cmp	r2, r8
 8001138:	d900      	bls.n	800113c <__aeabi_ddiv+0x42c>
 800113a:	e708      	b.n	8000f4e <__aeabi_ddiv+0x23e>
 800113c:	464b      	mov	r3, r9
 800113e:	07dc      	lsls	r4, r3, #31
 8001140:	0858      	lsrs	r0, r3, #1
 8001142:	4643      	mov	r3, r8
 8001144:	085b      	lsrs	r3, r3, #1
 8001146:	431c      	orrs	r4, r3
 8001148:	4643      	mov	r3, r8
 800114a:	07dd      	lsls	r5, r3, #31
 800114c:	e706      	b.n	8000f5c <__aeabi_ddiv+0x24c>
 800114e:	f001 fa3b 	bl	80025c8 <__clzsi2>
 8001152:	2315      	movs	r3, #21
 8001154:	469c      	mov	ip, r3
 8001156:	4484      	add	ip, r0
 8001158:	0002      	movs	r2, r0
 800115a:	4663      	mov	r3, ip
 800115c:	3220      	adds	r2, #32
 800115e:	2b1c      	cmp	r3, #28
 8001160:	dc00      	bgt.n	8001164 <__aeabi_ddiv+0x454>
 8001162:	e692      	b.n	8000e8a <__aeabi_ddiv+0x17a>
 8001164:	0023      	movs	r3, r4
 8001166:	3808      	subs	r0, #8
 8001168:	4083      	lsls	r3, r0
 800116a:	4699      	mov	r9, r3
 800116c:	2300      	movs	r3, #0
 800116e:	4698      	mov	r8, r3
 8001170:	e69a      	b.n	8000ea8 <__aeabi_ddiv+0x198>
 8001172:	f001 fa29 	bl	80025c8 <__clzsi2>
 8001176:	0002      	movs	r2, r0
 8001178:	0003      	movs	r3, r0
 800117a:	3215      	adds	r2, #21
 800117c:	3320      	adds	r3, #32
 800117e:	2a1c      	cmp	r2, #28
 8001180:	dc00      	bgt.n	8001184 <__aeabi_ddiv+0x474>
 8001182:	e65f      	b.n	8000e44 <__aeabi_ddiv+0x134>
 8001184:	9900      	ldr	r1, [sp, #0]
 8001186:	3808      	subs	r0, #8
 8001188:	4081      	lsls	r1, r0
 800118a:	2200      	movs	r2, #0
 800118c:	468b      	mov	fp, r1
 800118e:	e666      	b.n	8000e5e <__aeabi_ddiv+0x14e>
 8001190:	2200      	movs	r2, #0
 8001192:	002e      	movs	r6, r5
 8001194:	2400      	movs	r4, #0
 8001196:	4690      	mov	r8, r2
 8001198:	4b65      	ldr	r3, [pc, #404]	@ (8001330 <__aeabi_ddiv+0x620>)
 800119a:	e625      	b.n	8000de8 <__aeabi_ddiv+0xd8>
 800119c:	002e      	movs	r6, r5
 800119e:	2101      	movs	r1, #1
 80011a0:	1ac9      	subs	r1, r1, r3
 80011a2:	2938      	cmp	r1, #56	@ 0x38
 80011a4:	dd00      	ble.n	80011a8 <__aeabi_ddiv+0x498>
 80011a6:	e61b      	b.n	8000de0 <__aeabi_ddiv+0xd0>
 80011a8:	291f      	cmp	r1, #31
 80011aa:	dc7e      	bgt.n	80012aa <__aeabi_ddiv+0x59a>
 80011ac:	4861      	ldr	r0, [pc, #388]	@ (8001334 <__aeabi_ddiv+0x624>)
 80011ae:	0014      	movs	r4, r2
 80011b0:	4450      	add	r0, sl
 80011b2:	465b      	mov	r3, fp
 80011b4:	4082      	lsls	r2, r0
 80011b6:	4083      	lsls	r3, r0
 80011b8:	40cc      	lsrs	r4, r1
 80011ba:	1e50      	subs	r0, r2, #1
 80011bc:	4182      	sbcs	r2, r0
 80011be:	4323      	orrs	r3, r4
 80011c0:	431a      	orrs	r2, r3
 80011c2:	465b      	mov	r3, fp
 80011c4:	40cb      	lsrs	r3, r1
 80011c6:	0751      	lsls	r1, r2, #29
 80011c8:	d009      	beq.n	80011de <__aeabi_ddiv+0x4ce>
 80011ca:	210f      	movs	r1, #15
 80011cc:	4011      	ands	r1, r2
 80011ce:	2904      	cmp	r1, #4
 80011d0:	d005      	beq.n	80011de <__aeabi_ddiv+0x4ce>
 80011d2:	1d11      	adds	r1, r2, #4
 80011d4:	4291      	cmp	r1, r2
 80011d6:	4192      	sbcs	r2, r2
 80011d8:	4252      	negs	r2, r2
 80011da:	189b      	adds	r3, r3, r2
 80011dc:	000a      	movs	r2, r1
 80011de:	0219      	lsls	r1, r3, #8
 80011e0:	d400      	bmi.n	80011e4 <__aeabi_ddiv+0x4d4>
 80011e2:	e09b      	b.n	800131c <__aeabi_ddiv+0x60c>
 80011e4:	2200      	movs	r2, #0
 80011e6:	2301      	movs	r3, #1
 80011e8:	2400      	movs	r4, #0
 80011ea:	4690      	mov	r8, r2
 80011ec:	e5fc      	b.n	8000de8 <__aeabi_ddiv+0xd8>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4011      	ands	r1, r2
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d100      	bne.n	80011f8 <__aeabi_ddiv+0x4e8>
 80011f6:	e773      	b.n	80010e0 <__aeabi_ddiv+0x3d0>
 80011f8:	1d11      	adds	r1, r2, #4
 80011fa:	4291      	cmp	r1, r2
 80011fc:	4192      	sbcs	r2, r2
 80011fe:	4252      	negs	r2, r2
 8001200:	002e      	movs	r6, r5
 8001202:	08c9      	lsrs	r1, r1, #3
 8001204:	4493      	add	fp, r2
 8001206:	e76d      	b.n	80010e4 <__aeabi_ddiv+0x3d4>
 8001208:	9b00      	ldr	r3, [sp, #0]
 800120a:	3d01      	subs	r5, #1
 800120c:	469c      	mov	ip, r3
 800120e:	4461      	add	r1, ip
 8001210:	428b      	cmp	r3, r1
 8001212:	d900      	bls.n	8001216 <__aeabi_ddiv+0x506>
 8001214:	e72c      	b.n	8001070 <__aeabi_ddiv+0x360>
 8001216:	428a      	cmp	r2, r1
 8001218:	d800      	bhi.n	800121c <__aeabi_ddiv+0x50c>
 800121a:	e729      	b.n	8001070 <__aeabi_ddiv+0x360>
 800121c:	1e85      	subs	r5, r0, #2
 800121e:	4461      	add	r1, ip
 8001220:	e726      	b.n	8001070 <__aeabi_ddiv+0x360>
 8001222:	9900      	ldr	r1, [sp, #0]
 8001224:	3b01      	subs	r3, #1
 8001226:	468c      	mov	ip, r1
 8001228:	4464      	add	r4, ip
 800122a:	42a1      	cmp	r1, r4
 800122c:	d900      	bls.n	8001230 <__aeabi_ddiv+0x520>
 800122e:	e72d      	b.n	800108c <__aeabi_ddiv+0x37c>
 8001230:	42a2      	cmp	r2, r4
 8001232:	d800      	bhi.n	8001236 <__aeabi_ddiv+0x526>
 8001234:	e72a      	b.n	800108c <__aeabi_ddiv+0x37c>
 8001236:	1e83      	subs	r3, r0, #2
 8001238:	4464      	add	r4, ip
 800123a:	e727      	b.n	800108c <__aeabi_ddiv+0x37c>
 800123c:	4287      	cmp	r7, r0
 800123e:	d000      	beq.n	8001242 <__aeabi_ddiv+0x532>
 8001240:	e6fe      	b.n	8001040 <__aeabi_ddiv+0x330>
 8001242:	45a9      	cmp	r9, r5
 8001244:	d900      	bls.n	8001248 <__aeabi_ddiv+0x538>
 8001246:	e6fb      	b.n	8001040 <__aeabi_ddiv+0x330>
 8001248:	e6f5      	b.n	8001036 <__aeabi_ddiv+0x326>
 800124a:	42a2      	cmp	r2, r4
 800124c:	d800      	bhi.n	8001250 <__aeabi_ddiv+0x540>
 800124e:	e6b9      	b.n	8000fc4 <__aeabi_ddiv+0x2b4>
 8001250:	1e83      	subs	r3, r0, #2
 8001252:	4464      	add	r4, ip
 8001254:	e6b6      	b.n	8000fc4 <__aeabi_ddiv+0x2b4>
 8001256:	428a      	cmp	r2, r1
 8001258:	d800      	bhi.n	800125c <__aeabi_ddiv+0x54c>
 800125a:	e69f      	b.n	8000f9c <__aeabi_ddiv+0x28c>
 800125c:	46bc      	mov	ip, r7
 800125e:	1e83      	subs	r3, r0, #2
 8001260:	4698      	mov	r8, r3
 8001262:	4461      	add	r1, ip
 8001264:	e69a      	b.n	8000f9c <__aeabi_ddiv+0x28c>
 8001266:	000a      	movs	r2, r1
 8001268:	4284      	cmp	r4, r0
 800126a:	d000      	beq.n	800126e <__aeabi_ddiv+0x55e>
 800126c:	e72e      	b.n	80010cc <__aeabi_ddiv+0x3bc>
 800126e:	454b      	cmp	r3, r9
 8001270:	d000      	beq.n	8001274 <__aeabi_ddiv+0x564>
 8001272:	e72b      	b.n	80010cc <__aeabi_ddiv+0x3bc>
 8001274:	0035      	movs	r5, r6
 8001276:	e72c      	b.n	80010d2 <__aeabi_ddiv+0x3c2>
 8001278:	4b2a      	ldr	r3, [pc, #168]	@ (8001324 <__aeabi_ddiv+0x614>)
 800127a:	4a2f      	ldr	r2, [pc, #188]	@ (8001338 <__aeabi_ddiv+0x628>)
 800127c:	4453      	add	r3, sl
 800127e:	4592      	cmp	sl, r2
 8001280:	db43      	blt.n	800130a <__aeabi_ddiv+0x5fa>
 8001282:	2201      	movs	r2, #1
 8001284:	2100      	movs	r1, #0
 8001286:	4493      	add	fp, r2
 8001288:	e72c      	b.n	80010e4 <__aeabi_ddiv+0x3d4>
 800128a:	42ac      	cmp	r4, r5
 800128c:	d800      	bhi.n	8001290 <__aeabi_ddiv+0x580>
 800128e:	e6d7      	b.n	8001040 <__aeabi_ddiv+0x330>
 8001290:	2302      	movs	r3, #2
 8001292:	425b      	negs	r3, r3
 8001294:	469c      	mov	ip, r3
 8001296:	9900      	ldr	r1, [sp, #0]
 8001298:	444d      	add	r5, r9
 800129a:	454d      	cmp	r5, r9
 800129c:	419b      	sbcs	r3, r3
 800129e:	44e3      	add	fp, ip
 80012a0:	468c      	mov	ip, r1
 80012a2:	425b      	negs	r3, r3
 80012a4:	4463      	add	r3, ip
 80012a6:	18c0      	adds	r0, r0, r3
 80012a8:	e6cc      	b.n	8001044 <__aeabi_ddiv+0x334>
 80012aa:	201f      	movs	r0, #31
 80012ac:	4240      	negs	r0, r0
 80012ae:	1ac3      	subs	r3, r0, r3
 80012b0:	4658      	mov	r0, fp
 80012b2:	40d8      	lsrs	r0, r3
 80012b4:	2920      	cmp	r1, #32
 80012b6:	d004      	beq.n	80012c2 <__aeabi_ddiv+0x5b2>
 80012b8:	4659      	mov	r1, fp
 80012ba:	4b20      	ldr	r3, [pc, #128]	@ (800133c <__aeabi_ddiv+0x62c>)
 80012bc:	4453      	add	r3, sl
 80012be:	4099      	lsls	r1, r3
 80012c0:	430a      	orrs	r2, r1
 80012c2:	1e53      	subs	r3, r2, #1
 80012c4:	419a      	sbcs	r2, r3
 80012c6:	2307      	movs	r3, #7
 80012c8:	0019      	movs	r1, r3
 80012ca:	4302      	orrs	r2, r0
 80012cc:	2400      	movs	r4, #0
 80012ce:	4011      	ands	r1, r2
 80012d0:	4213      	tst	r3, r2
 80012d2:	d009      	beq.n	80012e8 <__aeabi_ddiv+0x5d8>
 80012d4:	3308      	adds	r3, #8
 80012d6:	4013      	ands	r3, r2
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d01d      	beq.n	8001318 <__aeabi_ddiv+0x608>
 80012dc:	1d13      	adds	r3, r2, #4
 80012de:	4293      	cmp	r3, r2
 80012e0:	4189      	sbcs	r1, r1
 80012e2:	001a      	movs	r2, r3
 80012e4:	4249      	negs	r1, r1
 80012e6:	0749      	lsls	r1, r1, #29
 80012e8:	08d2      	lsrs	r2, r2, #3
 80012ea:	430a      	orrs	r2, r1
 80012ec:	4690      	mov	r8, r2
 80012ee:	2300      	movs	r3, #0
 80012f0:	e57a      	b.n	8000de8 <__aeabi_ddiv+0xd8>
 80012f2:	4649      	mov	r1, r9
 80012f4:	9f00      	ldr	r7, [sp, #0]
 80012f6:	004d      	lsls	r5, r1, #1
 80012f8:	454d      	cmp	r5, r9
 80012fa:	4189      	sbcs	r1, r1
 80012fc:	46bc      	mov	ip, r7
 80012fe:	4249      	negs	r1, r1
 8001300:	4461      	add	r1, ip
 8001302:	46a9      	mov	r9, r5
 8001304:	3a02      	subs	r2, #2
 8001306:	1864      	adds	r4, r4, r1
 8001308:	e7ae      	b.n	8001268 <__aeabi_ddiv+0x558>
 800130a:	2201      	movs	r2, #1
 800130c:	4252      	negs	r2, r2
 800130e:	e746      	b.n	800119e <__aeabi_ddiv+0x48e>
 8001310:	4599      	cmp	r9, r3
 8001312:	d3ee      	bcc.n	80012f2 <__aeabi_ddiv+0x5e2>
 8001314:	000a      	movs	r2, r1
 8001316:	e7aa      	b.n	800126e <__aeabi_ddiv+0x55e>
 8001318:	2100      	movs	r1, #0
 800131a:	e7e5      	b.n	80012e8 <__aeabi_ddiv+0x5d8>
 800131c:	0759      	lsls	r1, r3, #29
 800131e:	025b      	lsls	r3, r3, #9
 8001320:	0b1c      	lsrs	r4, r3, #12
 8001322:	e7e1      	b.n	80012e8 <__aeabi_ddiv+0x5d8>
 8001324:	000003ff 	.word	0x000003ff
 8001328:	feffffff 	.word	0xfeffffff
 800132c:	000007fe 	.word	0x000007fe
 8001330:	000007ff 	.word	0x000007ff
 8001334:	0000041e 	.word	0x0000041e
 8001338:	fffffc02 	.word	0xfffffc02
 800133c:	0000043e 	.word	0x0000043e

08001340 <__eqdf2>:
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	4657      	mov	r7, sl
 8001344:	46de      	mov	lr, fp
 8001346:	464e      	mov	r6, r9
 8001348:	4645      	mov	r5, r8
 800134a:	b5e0      	push	{r5, r6, r7, lr}
 800134c:	000d      	movs	r5, r1
 800134e:	0004      	movs	r4, r0
 8001350:	0fe8      	lsrs	r0, r5, #31
 8001352:	4683      	mov	fp, r0
 8001354:	0309      	lsls	r1, r1, #12
 8001356:	0fd8      	lsrs	r0, r3, #31
 8001358:	0b09      	lsrs	r1, r1, #12
 800135a:	4682      	mov	sl, r0
 800135c:	4819      	ldr	r0, [pc, #100]	@ (80013c4 <__eqdf2+0x84>)
 800135e:	468c      	mov	ip, r1
 8001360:	031f      	lsls	r7, r3, #12
 8001362:	0069      	lsls	r1, r5, #1
 8001364:	005e      	lsls	r6, r3, #1
 8001366:	0d49      	lsrs	r1, r1, #21
 8001368:	0b3f      	lsrs	r7, r7, #12
 800136a:	0d76      	lsrs	r6, r6, #21
 800136c:	4281      	cmp	r1, r0
 800136e:	d018      	beq.n	80013a2 <__eqdf2+0x62>
 8001370:	4286      	cmp	r6, r0
 8001372:	d00f      	beq.n	8001394 <__eqdf2+0x54>
 8001374:	2001      	movs	r0, #1
 8001376:	42b1      	cmp	r1, r6
 8001378:	d10d      	bne.n	8001396 <__eqdf2+0x56>
 800137a:	45bc      	cmp	ip, r7
 800137c:	d10b      	bne.n	8001396 <__eqdf2+0x56>
 800137e:	4294      	cmp	r4, r2
 8001380:	d109      	bne.n	8001396 <__eqdf2+0x56>
 8001382:	45d3      	cmp	fp, sl
 8001384:	d01c      	beq.n	80013c0 <__eqdf2+0x80>
 8001386:	2900      	cmp	r1, #0
 8001388:	d105      	bne.n	8001396 <__eqdf2+0x56>
 800138a:	4660      	mov	r0, ip
 800138c:	4320      	orrs	r0, r4
 800138e:	1e43      	subs	r3, r0, #1
 8001390:	4198      	sbcs	r0, r3
 8001392:	e000      	b.n	8001396 <__eqdf2+0x56>
 8001394:	2001      	movs	r0, #1
 8001396:	bcf0      	pop	{r4, r5, r6, r7}
 8001398:	46bb      	mov	fp, r7
 800139a:	46b2      	mov	sl, r6
 800139c:	46a9      	mov	r9, r5
 800139e:	46a0      	mov	r8, r4
 80013a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a2:	2001      	movs	r0, #1
 80013a4:	428e      	cmp	r6, r1
 80013a6:	d1f6      	bne.n	8001396 <__eqdf2+0x56>
 80013a8:	4661      	mov	r1, ip
 80013aa:	4339      	orrs	r1, r7
 80013ac:	000f      	movs	r7, r1
 80013ae:	4317      	orrs	r7, r2
 80013b0:	4327      	orrs	r7, r4
 80013b2:	d1f0      	bne.n	8001396 <__eqdf2+0x56>
 80013b4:	465b      	mov	r3, fp
 80013b6:	4652      	mov	r2, sl
 80013b8:	1a98      	subs	r0, r3, r2
 80013ba:	1e43      	subs	r3, r0, #1
 80013bc:	4198      	sbcs	r0, r3
 80013be:	e7ea      	b.n	8001396 <__eqdf2+0x56>
 80013c0:	2000      	movs	r0, #0
 80013c2:	e7e8      	b.n	8001396 <__eqdf2+0x56>
 80013c4:	000007ff 	.word	0x000007ff

080013c8 <__gedf2>:
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ca:	4657      	mov	r7, sl
 80013cc:	464e      	mov	r6, r9
 80013ce:	4645      	mov	r5, r8
 80013d0:	46de      	mov	lr, fp
 80013d2:	b5e0      	push	{r5, r6, r7, lr}
 80013d4:	000d      	movs	r5, r1
 80013d6:	030e      	lsls	r6, r1, #12
 80013d8:	0049      	lsls	r1, r1, #1
 80013da:	0d49      	lsrs	r1, r1, #21
 80013dc:	468a      	mov	sl, r1
 80013de:	0fdf      	lsrs	r7, r3, #31
 80013e0:	0fe9      	lsrs	r1, r5, #31
 80013e2:	46bc      	mov	ip, r7
 80013e4:	b083      	sub	sp, #12
 80013e6:	4f2f      	ldr	r7, [pc, #188]	@ (80014a4 <__gedf2+0xdc>)
 80013e8:	0004      	movs	r4, r0
 80013ea:	4680      	mov	r8, r0
 80013ec:	9101      	str	r1, [sp, #4]
 80013ee:	0058      	lsls	r0, r3, #1
 80013f0:	0319      	lsls	r1, r3, #12
 80013f2:	4691      	mov	r9, r2
 80013f4:	0b36      	lsrs	r6, r6, #12
 80013f6:	0b09      	lsrs	r1, r1, #12
 80013f8:	0d40      	lsrs	r0, r0, #21
 80013fa:	45ba      	cmp	sl, r7
 80013fc:	d01d      	beq.n	800143a <__gedf2+0x72>
 80013fe:	42b8      	cmp	r0, r7
 8001400:	d00d      	beq.n	800141e <__gedf2+0x56>
 8001402:	4657      	mov	r7, sl
 8001404:	2f00      	cmp	r7, #0
 8001406:	d12a      	bne.n	800145e <__gedf2+0x96>
 8001408:	4334      	orrs	r4, r6
 800140a:	2800      	cmp	r0, #0
 800140c:	d124      	bne.n	8001458 <__gedf2+0x90>
 800140e:	430a      	orrs	r2, r1
 8001410:	d036      	beq.n	8001480 <__gedf2+0xb8>
 8001412:	2c00      	cmp	r4, #0
 8001414:	d141      	bne.n	800149a <__gedf2+0xd2>
 8001416:	4663      	mov	r3, ip
 8001418:	0058      	lsls	r0, r3, #1
 800141a:	3801      	subs	r0, #1
 800141c:	e015      	b.n	800144a <__gedf2+0x82>
 800141e:	4311      	orrs	r1, r2
 8001420:	d138      	bne.n	8001494 <__gedf2+0xcc>
 8001422:	4653      	mov	r3, sl
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <__gedf2+0x64>
 8001428:	4326      	orrs	r6, r4
 800142a:	d0f4      	beq.n	8001416 <__gedf2+0x4e>
 800142c:	9b01      	ldr	r3, [sp, #4]
 800142e:	4563      	cmp	r3, ip
 8001430:	d107      	bne.n	8001442 <__gedf2+0x7a>
 8001432:	9b01      	ldr	r3, [sp, #4]
 8001434:	0058      	lsls	r0, r3, #1
 8001436:	3801      	subs	r0, #1
 8001438:	e007      	b.n	800144a <__gedf2+0x82>
 800143a:	4326      	orrs	r6, r4
 800143c:	d12a      	bne.n	8001494 <__gedf2+0xcc>
 800143e:	4550      	cmp	r0, sl
 8001440:	d021      	beq.n	8001486 <__gedf2+0xbe>
 8001442:	2001      	movs	r0, #1
 8001444:	9b01      	ldr	r3, [sp, #4]
 8001446:	425f      	negs	r7, r3
 8001448:	4338      	orrs	r0, r7
 800144a:	b003      	add	sp, #12
 800144c:	bcf0      	pop	{r4, r5, r6, r7}
 800144e:	46bb      	mov	fp, r7
 8001450:	46b2      	mov	sl, r6
 8001452:	46a9      	mov	r9, r5
 8001454:	46a0      	mov	r8, r4
 8001456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001458:	2c00      	cmp	r4, #0
 800145a:	d0dc      	beq.n	8001416 <__gedf2+0x4e>
 800145c:	e7e6      	b.n	800142c <__gedf2+0x64>
 800145e:	2800      	cmp	r0, #0
 8001460:	d0ef      	beq.n	8001442 <__gedf2+0x7a>
 8001462:	9b01      	ldr	r3, [sp, #4]
 8001464:	4563      	cmp	r3, ip
 8001466:	d1ec      	bne.n	8001442 <__gedf2+0x7a>
 8001468:	4582      	cmp	sl, r0
 800146a:	dcea      	bgt.n	8001442 <__gedf2+0x7a>
 800146c:	dbe1      	blt.n	8001432 <__gedf2+0x6a>
 800146e:	428e      	cmp	r6, r1
 8001470:	d8e7      	bhi.n	8001442 <__gedf2+0x7a>
 8001472:	d1de      	bne.n	8001432 <__gedf2+0x6a>
 8001474:	45c8      	cmp	r8, r9
 8001476:	d8e4      	bhi.n	8001442 <__gedf2+0x7a>
 8001478:	2000      	movs	r0, #0
 800147a:	45c8      	cmp	r8, r9
 800147c:	d2e5      	bcs.n	800144a <__gedf2+0x82>
 800147e:	e7d8      	b.n	8001432 <__gedf2+0x6a>
 8001480:	2c00      	cmp	r4, #0
 8001482:	d0e2      	beq.n	800144a <__gedf2+0x82>
 8001484:	e7dd      	b.n	8001442 <__gedf2+0x7a>
 8001486:	4311      	orrs	r1, r2
 8001488:	d104      	bne.n	8001494 <__gedf2+0xcc>
 800148a:	9b01      	ldr	r3, [sp, #4]
 800148c:	4563      	cmp	r3, ip
 800148e:	d1d8      	bne.n	8001442 <__gedf2+0x7a>
 8001490:	2000      	movs	r0, #0
 8001492:	e7da      	b.n	800144a <__gedf2+0x82>
 8001494:	2002      	movs	r0, #2
 8001496:	4240      	negs	r0, r0
 8001498:	e7d7      	b.n	800144a <__gedf2+0x82>
 800149a:	9b01      	ldr	r3, [sp, #4]
 800149c:	4563      	cmp	r3, ip
 800149e:	d0e6      	beq.n	800146e <__gedf2+0xa6>
 80014a0:	e7cf      	b.n	8001442 <__gedf2+0x7a>
 80014a2:	46c0      	nop			@ (mov r8, r8)
 80014a4:	000007ff 	.word	0x000007ff

080014a8 <__ledf2>:
 80014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014aa:	4657      	mov	r7, sl
 80014ac:	464e      	mov	r6, r9
 80014ae:	4645      	mov	r5, r8
 80014b0:	46de      	mov	lr, fp
 80014b2:	b5e0      	push	{r5, r6, r7, lr}
 80014b4:	000d      	movs	r5, r1
 80014b6:	030e      	lsls	r6, r1, #12
 80014b8:	0049      	lsls	r1, r1, #1
 80014ba:	0d49      	lsrs	r1, r1, #21
 80014bc:	468a      	mov	sl, r1
 80014be:	0fdf      	lsrs	r7, r3, #31
 80014c0:	0fe9      	lsrs	r1, r5, #31
 80014c2:	46bc      	mov	ip, r7
 80014c4:	b083      	sub	sp, #12
 80014c6:	4f2e      	ldr	r7, [pc, #184]	@ (8001580 <__ledf2+0xd8>)
 80014c8:	0004      	movs	r4, r0
 80014ca:	4680      	mov	r8, r0
 80014cc:	9101      	str	r1, [sp, #4]
 80014ce:	0058      	lsls	r0, r3, #1
 80014d0:	0319      	lsls	r1, r3, #12
 80014d2:	4691      	mov	r9, r2
 80014d4:	0b36      	lsrs	r6, r6, #12
 80014d6:	0b09      	lsrs	r1, r1, #12
 80014d8:	0d40      	lsrs	r0, r0, #21
 80014da:	45ba      	cmp	sl, r7
 80014dc:	d01e      	beq.n	800151c <__ledf2+0x74>
 80014de:	42b8      	cmp	r0, r7
 80014e0:	d00d      	beq.n	80014fe <__ledf2+0x56>
 80014e2:	4657      	mov	r7, sl
 80014e4:	2f00      	cmp	r7, #0
 80014e6:	d127      	bne.n	8001538 <__ledf2+0x90>
 80014e8:	4334      	orrs	r4, r6
 80014ea:	2800      	cmp	r0, #0
 80014ec:	d133      	bne.n	8001556 <__ledf2+0xae>
 80014ee:	430a      	orrs	r2, r1
 80014f0:	d034      	beq.n	800155c <__ledf2+0xb4>
 80014f2:	2c00      	cmp	r4, #0
 80014f4:	d140      	bne.n	8001578 <__ledf2+0xd0>
 80014f6:	4663      	mov	r3, ip
 80014f8:	0058      	lsls	r0, r3, #1
 80014fa:	3801      	subs	r0, #1
 80014fc:	e015      	b.n	800152a <__ledf2+0x82>
 80014fe:	4311      	orrs	r1, r2
 8001500:	d112      	bne.n	8001528 <__ledf2+0x80>
 8001502:	4653      	mov	r3, sl
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <__ledf2+0x64>
 8001508:	4326      	orrs	r6, r4
 800150a:	d0f4      	beq.n	80014f6 <__ledf2+0x4e>
 800150c:	9b01      	ldr	r3, [sp, #4]
 800150e:	4563      	cmp	r3, ip
 8001510:	d01d      	beq.n	800154e <__ledf2+0xa6>
 8001512:	2001      	movs	r0, #1
 8001514:	9b01      	ldr	r3, [sp, #4]
 8001516:	425f      	negs	r7, r3
 8001518:	4338      	orrs	r0, r7
 800151a:	e006      	b.n	800152a <__ledf2+0x82>
 800151c:	4326      	orrs	r6, r4
 800151e:	d103      	bne.n	8001528 <__ledf2+0x80>
 8001520:	4550      	cmp	r0, sl
 8001522:	d1f6      	bne.n	8001512 <__ledf2+0x6a>
 8001524:	4311      	orrs	r1, r2
 8001526:	d01c      	beq.n	8001562 <__ledf2+0xba>
 8001528:	2002      	movs	r0, #2
 800152a:	b003      	add	sp, #12
 800152c:	bcf0      	pop	{r4, r5, r6, r7}
 800152e:	46bb      	mov	fp, r7
 8001530:	46b2      	mov	sl, r6
 8001532:	46a9      	mov	r9, r5
 8001534:	46a0      	mov	r8, r4
 8001536:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001538:	2800      	cmp	r0, #0
 800153a:	d0ea      	beq.n	8001512 <__ledf2+0x6a>
 800153c:	9b01      	ldr	r3, [sp, #4]
 800153e:	4563      	cmp	r3, ip
 8001540:	d1e7      	bne.n	8001512 <__ledf2+0x6a>
 8001542:	4582      	cmp	sl, r0
 8001544:	dce5      	bgt.n	8001512 <__ledf2+0x6a>
 8001546:	db02      	blt.n	800154e <__ledf2+0xa6>
 8001548:	428e      	cmp	r6, r1
 800154a:	d8e2      	bhi.n	8001512 <__ledf2+0x6a>
 800154c:	d00e      	beq.n	800156c <__ledf2+0xc4>
 800154e:	9b01      	ldr	r3, [sp, #4]
 8001550:	0058      	lsls	r0, r3, #1
 8001552:	3801      	subs	r0, #1
 8001554:	e7e9      	b.n	800152a <__ledf2+0x82>
 8001556:	2c00      	cmp	r4, #0
 8001558:	d0cd      	beq.n	80014f6 <__ledf2+0x4e>
 800155a:	e7d7      	b.n	800150c <__ledf2+0x64>
 800155c:	2c00      	cmp	r4, #0
 800155e:	d0e4      	beq.n	800152a <__ledf2+0x82>
 8001560:	e7d7      	b.n	8001512 <__ledf2+0x6a>
 8001562:	9b01      	ldr	r3, [sp, #4]
 8001564:	2000      	movs	r0, #0
 8001566:	4563      	cmp	r3, ip
 8001568:	d0df      	beq.n	800152a <__ledf2+0x82>
 800156a:	e7d2      	b.n	8001512 <__ledf2+0x6a>
 800156c:	45c8      	cmp	r8, r9
 800156e:	d8d0      	bhi.n	8001512 <__ledf2+0x6a>
 8001570:	2000      	movs	r0, #0
 8001572:	45c8      	cmp	r8, r9
 8001574:	d2d9      	bcs.n	800152a <__ledf2+0x82>
 8001576:	e7ea      	b.n	800154e <__ledf2+0xa6>
 8001578:	9b01      	ldr	r3, [sp, #4]
 800157a:	4563      	cmp	r3, ip
 800157c:	d0e4      	beq.n	8001548 <__ledf2+0xa0>
 800157e:	e7c8      	b.n	8001512 <__ledf2+0x6a>
 8001580:	000007ff 	.word	0x000007ff

08001584 <__aeabi_dmul>:
 8001584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001586:	4657      	mov	r7, sl
 8001588:	464e      	mov	r6, r9
 800158a:	46de      	mov	lr, fp
 800158c:	4645      	mov	r5, r8
 800158e:	b5e0      	push	{r5, r6, r7, lr}
 8001590:	001f      	movs	r7, r3
 8001592:	030b      	lsls	r3, r1, #12
 8001594:	0b1b      	lsrs	r3, r3, #12
 8001596:	0016      	movs	r6, r2
 8001598:	469a      	mov	sl, r3
 800159a:	0fca      	lsrs	r2, r1, #31
 800159c:	004b      	lsls	r3, r1, #1
 800159e:	0004      	movs	r4, r0
 80015a0:	4691      	mov	r9, r2
 80015a2:	b085      	sub	sp, #20
 80015a4:	0d5b      	lsrs	r3, r3, #21
 80015a6:	d100      	bne.n	80015aa <__aeabi_dmul+0x26>
 80015a8:	e1cf      	b.n	800194a <__aeabi_dmul+0x3c6>
 80015aa:	4acd      	ldr	r2, [pc, #820]	@ (80018e0 <__aeabi_dmul+0x35c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d055      	beq.n	800165c <__aeabi_dmul+0xd8>
 80015b0:	4651      	mov	r1, sl
 80015b2:	0f42      	lsrs	r2, r0, #29
 80015b4:	00c9      	lsls	r1, r1, #3
 80015b6:	430a      	orrs	r2, r1
 80015b8:	2180      	movs	r1, #128	@ 0x80
 80015ba:	0409      	lsls	r1, r1, #16
 80015bc:	4311      	orrs	r1, r2
 80015be:	00c2      	lsls	r2, r0, #3
 80015c0:	4690      	mov	r8, r2
 80015c2:	4ac8      	ldr	r2, [pc, #800]	@ (80018e4 <__aeabi_dmul+0x360>)
 80015c4:	468a      	mov	sl, r1
 80015c6:	4693      	mov	fp, r2
 80015c8:	449b      	add	fp, r3
 80015ca:	2300      	movs	r3, #0
 80015cc:	2500      	movs	r5, #0
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	033c      	lsls	r4, r7, #12
 80015d2:	007b      	lsls	r3, r7, #1
 80015d4:	0ffa      	lsrs	r2, r7, #31
 80015d6:	9601      	str	r6, [sp, #4]
 80015d8:	0b24      	lsrs	r4, r4, #12
 80015da:	0d5b      	lsrs	r3, r3, #21
 80015dc:	9200      	str	r2, [sp, #0]
 80015de:	d100      	bne.n	80015e2 <__aeabi_dmul+0x5e>
 80015e0:	e188      	b.n	80018f4 <__aeabi_dmul+0x370>
 80015e2:	4abf      	ldr	r2, [pc, #764]	@ (80018e0 <__aeabi_dmul+0x35c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d100      	bne.n	80015ea <__aeabi_dmul+0x66>
 80015e8:	e092      	b.n	8001710 <__aeabi_dmul+0x18c>
 80015ea:	4abe      	ldr	r2, [pc, #760]	@ (80018e4 <__aeabi_dmul+0x360>)
 80015ec:	4694      	mov	ip, r2
 80015ee:	4463      	add	r3, ip
 80015f0:	449b      	add	fp, r3
 80015f2:	2d0a      	cmp	r5, #10
 80015f4:	dc42      	bgt.n	800167c <__aeabi_dmul+0xf8>
 80015f6:	00e4      	lsls	r4, r4, #3
 80015f8:	0f73      	lsrs	r3, r6, #29
 80015fa:	4323      	orrs	r3, r4
 80015fc:	2480      	movs	r4, #128	@ 0x80
 80015fe:	4649      	mov	r1, r9
 8001600:	0424      	lsls	r4, r4, #16
 8001602:	431c      	orrs	r4, r3
 8001604:	00f3      	lsls	r3, r6, #3
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	9b00      	ldr	r3, [sp, #0]
 800160a:	2000      	movs	r0, #0
 800160c:	4059      	eors	r1, r3
 800160e:	b2cb      	uxtb	r3, r1
 8001610:	9303      	str	r3, [sp, #12]
 8001612:	2d02      	cmp	r5, #2
 8001614:	dc00      	bgt.n	8001618 <__aeabi_dmul+0x94>
 8001616:	e094      	b.n	8001742 <__aeabi_dmul+0x1be>
 8001618:	2301      	movs	r3, #1
 800161a:	40ab      	lsls	r3, r5
 800161c:	001d      	movs	r5, r3
 800161e:	23a6      	movs	r3, #166	@ 0xa6
 8001620:	002a      	movs	r2, r5
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	401a      	ands	r2, r3
 8001626:	421d      	tst	r5, r3
 8001628:	d000      	beq.n	800162c <__aeabi_dmul+0xa8>
 800162a:	e229      	b.n	8001a80 <__aeabi_dmul+0x4fc>
 800162c:	2390      	movs	r3, #144	@ 0x90
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	421d      	tst	r5, r3
 8001632:	d100      	bne.n	8001636 <__aeabi_dmul+0xb2>
 8001634:	e24d      	b.n	8001ad2 <__aeabi_dmul+0x54e>
 8001636:	2300      	movs	r3, #0
 8001638:	2480      	movs	r4, #128	@ 0x80
 800163a:	4699      	mov	r9, r3
 800163c:	0324      	lsls	r4, r4, #12
 800163e:	4ba8      	ldr	r3, [pc, #672]	@ (80018e0 <__aeabi_dmul+0x35c>)
 8001640:	0010      	movs	r0, r2
 8001642:	464a      	mov	r2, r9
 8001644:	051b      	lsls	r3, r3, #20
 8001646:	4323      	orrs	r3, r4
 8001648:	07d2      	lsls	r2, r2, #31
 800164a:	4313      	orrs	r3, r2
 800164c:	0019      	movs	r1, r3
 800164e:	b005      	add	sp, #20
 8001650:	bcf0      	pop	{r4, r5, r6, r7}
 8001652:	46bb      	mov	fp, r7
 8001654:	46b2      	mov	sl, r6
 8001656:	46a9      	mov	r9, r5
 8001658:	46a0      	mov	r8, r4
 800165a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800165c:	4652      	mov	r2, sl
 800165e:	4302      	orrs	r2, r0
 8001660:	4690      	mov	r8, r2
 8001662:	d000      	beq.n	8001666 <__aeabi_dmul+0xe2>
 8001664:	e1ac      	b.n	80019c0 <__aeabi_dmul+0x43c>
 8001666:	469b      	mov	fp, r3
 8001668:	2302      	movs	r3, #2
 800166a:	4692      	mov	sl, r2
 800166c:	2508      	movs	r5, #8
 800166e:	9302      	str	r3, [sp, #8]
 8001670:	e7ae      	b.n	80015d0 <__aeabi_dmul+0x4c>
 8001672:	9b00      	ldr	r3, [sp, #0]
 8001674:	46a2      	mov	sl, r4
 8001676:	4699      	mov	r9, r3
 8001678:	9b01      	ldr	r3, [sp, #4]
 800167a:	4698      	mov	r8, r3
 800167c:	9b02      	ldr	r3, [sp, #8]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d100      	bne.n	8001684 <__aeabi_dmul+0x100>
 8001682:	e1ca      	b.n	8001a1a <__aeabi_dmul+0x496>
 8001684:	2b03      	cmp	r3, #3
 8001686:	d100      	bne.n	800168a <__aeabi_dmul+0x106>
 8001688:	e192      	b.n	80019b0 <__aeabi_dmul+0x42c>
 800168a:	2b01      	cmp	r3, #1
 800168c:	d110      	bne.n	80016b0 <__aeabi_dmul+0x12c>
 800168e:	2300      	movs	r3, #0
 8001690:	2400      	movs	r4, #0
 8001692:	2200      	movs	r2, #0
 8001694:	e7d4      	b.n	8001640 <__aeabi_dmul+0xbc>
 8001696:	2201      	movs	r2, #1
 8001698:	087b      	lsrs	r3, r7, #1
 800169a:	403a      	ands	r2, r7
 800169c:	4313      	orrs	r3, r2
 800169e:	4652      	mov	r2, sl
 80016a0:	07d2      	lsls	r2, r2, #31
 80016a2:	4313      	orrs	r3, r2
 80016a4:	4698      	mov	r8, r3
 80016a6:	4653      	mov	r3, sl
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	469a      	mov	sl, r3
 80016ac:	9b03      	ldr	r3, [sp, #12]
 80016ae:	4699      	mov	r9, r3
 80016b0:	465b      	mov	r3, fp
 80016b2:	1c58      	adds	r0, r3, #1
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	445b      	add	r3, fp
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	dc00      	bgt.n	80016c0 <__aeabi_dmul+0x13c>
 80016be:	e1b1      	b.n	8001a24 <__aeabi_dmul+0x4a0>
 80016c0:	4642      	mov	r2, r8
 80016c2:	0752      	lsls	r2, r2, #29
 80016c4:	d00b      	beq.n	80016de <__aeabi_dmul+0x15a>
 80016c6:	220f      	movs	r2, #15
 80016c8:	4641      	mov	r1, r8
 80016ca:	400a      	ands	r2, r1
 80016cc:	2a04      	cmp	r2, #4
 80016ce:	d006      	beq.n	80016de <__aeabi_dmul+0x15a>
 80016d0:	4642      	mov	r2, r8
 80016d2:	1d11      	adds	r1, r2, #4
 80016d4:	4541      	cmp	r1, r8
 80016d6:	4192      	sbcs	r2, r2
 80016d8:	4688      	mov	r8, r1
 80016da:	4252      	negs	r2, r2
 80016dc:	4492      	add	sl, r2
 80016de:	4652      	mov	r2, sl
 80016e0:	01d2      	lsls	r2, r2, #7
 80016e2:	d506      	bpl.n	80016f2 <__aeabi_dmul+0x16e>
 80016e4:	4652      	mov	r2, sl
 80016e6:	4b80      	ldr	r3, [pc, #512]	@ (80018e8 <__aeabi_dmul+0x364>)
 80016e8:	401a      	ands	r2, r3
 80016ea:	2380      	movs	r3, #128	@ 0x80
 80016ec:	4692      	mov	sl, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	18c3      	adds	r3, r0, r3
 80016f2:	4a7e      	ldr	r2, [pc, #504]	@ (80018ec <__aeabi_dmul+0x368>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	dd00      	ble.n	80016fa <__aeabi_dmul+0x176>
 80016f8:	e18f      	b.n	8001a1a <__aeabi_dmul+0x496>
 80016fa:	4642      	mov	r2, r8
 80016fc:	08d1      	lsrs	r1, r2, #3
 80016fe:	4652      	mov	r2, sl
 8001700:	0752      	lsls	r2, r2, #29
 8001702:	430a      	orrs	r2, r1
 8001704:	4651      	mov	r1, sl
 8001706:	055b      	lsls	r3, r3, #21
 8001708:	024c      	lsls	r4, r1, #9
 800170a:	0b24      	lsrs	r4, r4, #12
 800170c:	0d5b      	lsrs	r3, r3, #21
 800170e:	e797      	b.n	8001640 <__aeabi_dmul+0xbc>
 8001710:	4b73      	ldr	r3, [pc, #460]	@ (80018e0 <__aeabi_dmul+0x35c>)
 8001712:	4326      	orrs	r6, r4
 8001714:	469c      	mov	ip, r3
 8001716:	44e3      	add	fp, ip
 8001718:	2e00      	cmp	r6, #0
 800171a:	d100      	bne.n	800171e <__aeabi_dmul+0x19a>
 800171c:	e16f      	b.n	80019fe <__aeabi_dmul+0x47a>
 800171e:	2303      	movs	r3, #3
 8001720:	4649      	mov	r1, r9
 8001722:	431d      	orrs	r5, r3
 8001724:	9b00      	ldr	r3, [sp, #0]
 8001726:	4059      	eors	r1, r3
 8001728:	b2cb      	uxtb	r3, r1
 800172a:	9303      	str	r3, [sp, #12]
 800172c:	2d0a      	cmp	r5, #10
 800172e:	dd00      	ble.n	8001732 <__aeabi_dmul+0x1ae>
 8001730:	e133      	b.n	800199a <__aeabi_dmul+0x416>
 8001732:	2301      	movs	r3, #1
 8001734:	40ab      	lsls	r3, r5
 8001736:	001d      	movs	r5, r3
 8001738:	2303      	movs	r3, #3
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	2288      	movs	r2, #136	@ 0x88
 800173e:	422a      	tst	r2, r5
 8001740:	d197      	bne.n	8001672 <__aeabi_dmul+0xee>
 8001742:	4642      	mov	r2, r8
 8001744:	4643      	mov	r3, r8
 8001746:	0412      	lsls	r2, r2, #16
 8001748:	0c12      	lsrs	r2, r2, #16
 800174a:	0016      	movs	r6, r2
 800174c:	9801      	ldr	r0, [sp, #4]
 800174e:	0c1d      	lsrs	r5, r3, #16
 8001750:	0c03      	lsrs	r3, r0, #16
 8001752:	0400      	lsls	r0, r0, #16
 8001754:	0c00      	lsrs	r0, r0, #16
 8001756:	4346      	muls	r6, r0
 8001758:	46b4      	mov	ip, r6
 800175a:	001e      	movs	r6, r3
 800175c:	436e      	muls	r6, r5
 800175e:	9600      	str	r6, [sp, #0]
 8001760:	0016      	movs	r6, r2
 8001762:	0007      	movs	r7, r0
 8001764:	435e      	muls	r6, r3
 8001766:	4661      	mov	r1, ip
 8001768:	46b0      	mov	r8, r6
 800176a:	436f      	muls	r7, r5
 800176c:	0c0e      	lsrs	r6, r1, #16
 800176e:	44b8      	add	r8, r7
 8001770:	4446      	add	r6, r8
 8001772:	42b7      	cmp	r7, r6
 8001774:	d905      	bls.n	8001782 <__aeabi_dmul+0x1fe>
 8001776:	2180      	movs	r1, #128	@ 0x80
 8001778:	0249      	lsls	r1, r1, #9
 800177a:	4688      	mov	r8, r1
 800177c:	9f00      	ldr	r7, [sp, #0]
 800177e:	4447      	add	r7, r8
 8001780:	9700      	str	r7, [sp, #0]
 8001782:	4661      	mov	r1, ip
 8001784:	0409      	lsls	r1, r1, #16
 8001786:	0c09      	lsrs	r1, r1, #16
 8001788:	0c37      	lsrs	r7, r6, #16
 800178a:	0436      	lsls	r6, r6, #16
 800178c:	468c      	mov	ip, r1
 800178e:	0031      	movs	r1, r6
 8001790:	4461      	add	r1, ip
 8001792:	9101      	str	r1, [sp, #4]
 8001794:	0011      	movs	r1, r2
 8001796:	0c26      	lsrs	r6, r4, #16
 8001798:	0424      	lsls	r4, r4, #16
 800179a:	0c24      	lsrs	r4, r4, #16
 800179c:	4361      	muls	r1, r4
 800179e:	468c      	mov	ip, r1
 80017a0:	0021      	movs	r1, r4
 80017a2:	4369      	muls	r1, r5
 80017a4:	4689      	mov	r9, r1
 80017a6:	4661      	mov	r1, ip
 80017a8:	0c09      	lsrs	r1, r1, #16
 80017aa:	4688      	mov	r8, r1
 80017ac:	4372      	muls	r2, r6
 80017ae:	444a      	add	r2, r9
 80017b0:	4442      	add	r2, r8
 80017b2:	4375      	muls	r5, r6
 80017b4:	4591      	cmp	r9, r2
 80017b6:	d903      	bls.n	80017c0 <__aeabi_dmul+0x23c>
 80017b8:	2180      	movs	r1, #128	@ 0x80
 80017ba:	0249      	lsls	r1, r1, #9
 80017bc:	4688      	mov	r8, r1
 80017be:	4445      	add	r5, r8
 80017c0:	0c11      	lsrs	r1, r2, #16
 80017c2:	4688      	mov	r8, r1
 80017c4:	4661      	mov	r1, ip
 80017c6:	0409      	lsls	r1, r1, #16
 80017c8:	0c09      	lsrs	r1, r1, #16
 80017ca:	468c      	mov	ip, r1
 80017cc:	0412      	lsls	r2, r2, #16
 80017ce:	4462      	add	r2, ip
 80017d0:	18b9      	adds	r1, r7, r2
 80017d2:	9102      	str	r1, [sp, #8]
 80017d4:	4651      	mov	r1, sl
 80017d6:	0c09      	lsrs	r1, r1, #16
 80017d8:	468c      	mov	ip, r1
 80017da:	4651      	mov	r1, sl
 80017dc:	040f      	lsls	r7, r1, #16
 80017de:	0c3f      	lsrs	r7, r7, #16
 80017e0:	0039      	movs	r1, r7
 80017e2:	4341      	muls	r1, r0
 80017e4:	4445      	add	r5, r8
 80017e6:	4688      	mov	r8, r1
 80017e8:	4661      	mov	r1, ip
 80017ea:	4341      	muls	r1, r0
 80017ec:	468a      	mov	sl, r1
 80017ee:	4641      	mov	r1, r8
 80017f0:	4660      	mov	r0, ip
 80017f2:	0c09      	lsrs	r1, r1, #16
 80017f4:	4689      	mov	r9, r1
 80017f6:	4358      	muls	r0, r3
 80017f8:	437b      	muls	r3, r7
 80017fa:	4453      	add	r3, sl
 80017fc:	444b      	add	r3, r9
 80017fe:	459a      	cmp	sl, r3
 8001800:	d903      	bls.n	800180a <__aeabi_dmul+0x286>
 8001802:	2180      	movs	r1, #128	@ 0x80
 8001804:	0249      	lsls	r1, r1, #9
 8001806:	4689      	mov	r9, r1
 8001808:	4448      	add	r0, r9
 800180a:	0c19      	lsrs	r1, r3, #16
 800180c:	4689      	mov	r9, r1
 800180e:	4641      	mov	r1, r8
 8001810:	0409      	lsls	r1, r1, #16
 8001812:	0c09      	lsrs	r1, r1, #16
 8001814:	4688      	mov	r8, r1
 8001816:	0039      	movs	r1, r7
 8001818:	4361      	muls	r1, r4
 800181a:	041b      	lsls	r3, r3, #16
 800181c:	4443      	add	r3, r8
 800181e:	4688      	mov	r8, r1
 8001820:	4661      	mov	r1, ip
 8001822:	434c      	muls	r4, r1
 8001824:	4371      	muls	r1, r6
 8001826:	468c      	mov	ip, r1
 8001828:	4641      	mov	r1, r8
 800182a:	4377      	muls	r7, r6
 800182c:	0c0e      	lsrs	r6, r1, #16
 800182e:	193f      	adds	r7, r7, r4
 8001830:	19f6      	adds	r6, r6, r7
 8001832:	4448      	add	r0, r9
 8001834:	42b4      	cmp	r4, r6
 8001836:	d903      	bls.n	8001840 <__aeabi_dmul+0x2bc>
 8001838:	2180      	movs	r1, #128	@ 0x80
 800183a:	0249      	lsls	r1, r1, #9
 800183c:	4689      	mov	r9, r1
 800183e:	44cc      	add	ip, r9
 8001840:	9902      	ldr	r1, [sp, #8]
 8001842:	9f00      	ldr	r7, [sp, #0]
 8001844:	4689      	mov	r9, r1
 8001846:	0431      	lsls	r1, r6, #16
 8001848:	444f      	add	r7, r9
 800184a:	4689      	mov	r9, r1
 800184c:	4641      	mov	r1, r8
 800184e:	4297      	cmp	r7, r2
 8001850:	4192      	sbcs	r2, r2
 8001852:	040c      	lsls	r4, r1, #16
 8001854:	0c24      	lsrs	r4, r4, #16
 8001856:	444c      	add	r4, r9
 8001858:	18ff      	adds	r7, r7, r3
 800185a:	4252      	negs	r2, r2
 800185c:	1964      	adds	r4, r4, r5
 800185e:	18a1      	adds	r1, r4, r2
 8001860:	429f      	cmp	r7, r3
 8001862:	419b      	sbcs	r3, r3
 8001864:	4688      	mov	r8, r1
 8001866:	4682      	mov	sl, r0
 8001868:	425b      	negs	r3, r3
 800186a:	4699      	mov	r9, r3
 800186c:	4590      	cmp	r8, r2
 800186e:	4192      	sbcs	r2, r2
 8001870:	42ac      	cmp	r4, r5
 8001872:	41a4      	sbcs	r4, r4
 8001874:	44c2      	add	sl, r8
 8001876:	44d1      	add	r9, sl
 8001878:	4252      	negs	r2, r2
 800187a:	4264      	negs	r4, r4
 800187c:	4314      	orrs	r4, r2
 800187e:	4599      	cmp	r9, r3
 8001880:	419b      	sbcs	r3, r3
 8001882:	4582      	cmp	sl, r0
 8001884:	4192      	sbcs	r2, r2
 8001886:	425b      	negs	r3, r3
 8001888:	4252      	negs	r2, r2
 800188a:	4313      	orrs	r3, r2
 800188c:	464a      	mov	r2, r9
 800188e:	0c36      	lsrs	r6, r6, #16
 8001890:	19a4      	adds	r4, r4, r6
 8001892:	18e3      	adds	r3, r4, r3
 8001894:	4463      	add	r3, ip
 8001896:	025b      	lsls	r3, r3, #9
 8001898:	0dd2      	lsrs	r2, r2, #23
 800189a:	431a      	orrs	r2, r3
 800189c:	9901      	ldr	r1, [sp, #4]
 800189e:	4692      	mov	sl, r2
 80018a0:	027a      	lsls	r2, r7, #9
 80018a2:	430a      	orrs	r2, r1
 80018a4:	1e50      	subs	r0, r2, #1
 80018a6:	4182      	sbcs	r2, r0
 80018a8:	0dff      	lsrs	r7, r7, #23
 80018aa:	4317      	orrs	r7, r2
 80018ac:	464a      	mov	r2, r9
 80018ae:	0252      	lsls	r2, r2, #9
 80018b0:	4317      	orrs	r7, r2
 80018b2:	46b8      	mov	r8, r7
 80018b4:	01db      	lsls	r3, r3, #7
 80018b6:	d500      	bpl.n	80018ba <__aeabi_dmul+0x336>
 80018b8:	e6ed      	b.n	8001696 <__aeabi_dmul+0x112>
 80018ba:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <__aeabi_dmul+0x36c>)
 80018bc:	9a03      	ldr	r2, [sp, #12]
 80018be:	445b      	add	r3, fp
 80018c0:	4691      	mov	r9, r2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	dc00      	bgt.n	80018c8 <__aeabi_dmul+0x344>
 80018c6:	e0ac      	b.n	8001a22 <__aeabi_dmul+0x49e>
 80018c8:	003a      	movs	r2, r7
 80018ca:	0752      	lsls	r2, r2, #29
 80018cc:	d100      	bne.n	80018d0 <__aeabi_dmul+0x34c>
 80018ce:	e710      	b.n	80016f2 <__aeabi_dmul+0x16e>
 80018d0:	220f      	movs	r2, #15
 80018d2:	4658      	mov	r0, fp
 80018d4:	403a      	ands	r2, r7
 80018d6:	2a04      	cmp	r2, #4
 80018d8:	d000      	beq.n	80018dc <__aeabi_dmul+0x358>
 80018da:	e6f9      	b.n	80016d0 <__aeabi_dmul+0x14c>
 80018dc:	e709      	b.n	80016f2 <__aeabi_dmul+0x16e>
 80018de:	46c0      	nop			@ (mov r8, r8)
 80018e0:	000007ff 	.word	0x000007ff
 80018e4:	fffffc01 	.word	0xfffffc01
 80018e8:	feffffff 	.word	0xfeffffff
 80018ec:	000007fe 	.word	0x000007fe
 80018f0:	000003ff 	.word	0x000003ff
 80018f4:	0022      	movs	r2, r4
 80018f6:	4332      	orrs	r2, r6
 80018f8:	d06f      	beq.n	80019da <__aeabi_dmul+0x456>
 80018fa:	2c00      	cmp	r4, #0
 80018fc:	d100      	bne.n	8001900 <__aeabi_dmul+0x37c>
 80018fe:	e0c2      	b.n	8001a86 <__aeabi_dmul+0x502>
 8001900:	0020      	movs	r0, r4
 8001902:	f000 fe61 	bl	80025c8 <__clzsi2>
 8001906:	0002      	movs	r2, r0
 8001908:	0003      	movs	r3, r0
 800190a:	3a0b      	subs	r2, #11
 800190c:	201d      	movs	r0, #29
 800190e:	1a82      	subs	r2, r0, r2
 8001910:	0030      	movs	r0, r6
 8001912:	0019      	movs	r1, r3
 8001914:	40d0      	lsrs	r0, r2
 8001916:	3908      	subs	r1, #8
 8001918:	408c      	lsls	r4, r1
 800191a:	0002      	movs	r2, r0
 800191c:	4322      	orrs	r2, r4
 800191e:	0034      	movs	r4, r6
 8001920:	408c      	lsls	r4, r1
 8001922:	4659      	mov	r1, fp
 8001924:	1acb      	subs	r3, r1, r3
 8001926:	4986      	ldr	r1, [pc, #536]	@ (8001b40 <__aeabi_dmul+0x5bc>)
 8001928:	468b      	mov	fp, r1
 800192a:	449b      	add	fp, r3
 800192c:	2d0a      	cmp	r5, #10
 800192e:	dd00      	ble.n	8001932 <__aeabi_dmul+0x3ae>
 8001930:	e6a4      	b.n	800167c <__aeabi_dmul+0xf8>
 8001932:	4649      	mov	r1, r9
 8001934:	9b00      	ldr	r3, [sp, #0]
 8001936:	9401      	str	r4, [sp, #4]
 8001938:	4059      	eors	r1, r3
 800193a:	b2cb      	uxtb	r3, r1
 800193c:	0014      	movs	r4, r2
 800193e:	2000      	movs	r0, #0
 8001940:	9303      	str	r3, [sp, #12]
 8001942:	2d02      	cmp	r5, #2
 8001944:	dd00      	ble.n	8001948 <__aeabi_dmul+0x3c4>
 8001946:	e667      	b.n	8001618 <__aeabi_dmul+0x94>
 8001948:	e6fb      	b.n	8001742 <__aeabi_dmul+0x1be>
 800194a:	4653      	mov	r3, sl
 800194c:	4303      	orrs	r3, r0
 800194e:	4698      	mov	r8, r3
 8001950:	d03c      	beq.n	80019cc <__aeabi_dmul+0x448>
 8001952:	4653      	mov	r3, sl
 8001954:	2b00      	cmp	r3, #0
 8001956:	d100      	bne.n	800195a <__aeabi_dmul+0x3d6>
 8001958:	e0a3      	b.n	8001aa2 <__aeabi_dmul+0x51e>
 800195a:	4650      	mov	r0, sl
 800195c:	f000 fe34 	bl	80025c8 <__clzsi2>
 8001960:	230b      	movs	r3, #11
 8001962:	425b      	negs	r3, r3
 8001964:	469c      	mov	ip, r3
 8001966:	0002      	movs	r2, r0
 8001968:	4484      	add	ip, r0
 800196a:	0011      	movs	r1, r2
 800196c:	4650      	mov	r0, sl
 800196e:	3908      	subs	r1, #8
 8001970:	4088      	lsls	r0, r1
 8001972:	231d      	movs	r3, #29
 8001974:	4680      	mov	r8, r0
 8001976:	4660      	mov	r0, ip
 8001978:	1a1b      	subs	r3, r3, r0
 800197a:	0020      	movs	r0, r4
 800197c:	40d8      	lsrs	r0, r3
 800197e:	0003      	movs	r3, r0
 8001980:	4640      	mov	r0, r8
 8001982:	4303      	orrs	r3, r0
 8001984:	469a      	mov	sl, r3
 8001986:	0023      	movs	r3, r4
 8001988:	408b      	lsls	r3, r1
 800198a:	4698      	mov	r8, r3
 800198c:	4b6c      	ldr	r3, [pc, #432]	@ (8001b40 <__aeabi_dmul+0x5bc>)
 800198e:	2500      	movs	r5, #0
 8001990:	1a9b      	subs	r3, r3, r2
 8001992:	469b      	mov	fp, r3
 8001994:	2300      	movs	r3, #0
 8001996:	9302      	str	r3, [sp, #8]
 8001998:	e61a      	b.n	80015d0 <__aeabi_dmul+0x4c>
 800199a:	2d0f      	cmp	r5, #15
 800199c:	d000      	beq.n	80019a0 <__aeabi_dmul+0x41c>
 800199e:	e0c9      	b.n	8001b34 <__aeabi_dmul+0x5b0>
 80019a0:	2380      	movs	r3, #128	@ 0x80
 80019a2:	4652      	mov	r2, sl
 80019a4:	031b      	lsls	r3, r3, #12
 80019a6:	421a      	tst	r2, r3
 80019a8:	d002      	beq.n	80019b0 <__aeabi_dmul+0x42c>
 80019aa:	421c      	tst	r4, r3
 80019ac:	d100      	bne.n	80019b0 <__aeabi_dmul+0x42c>
 80019ae:	e092      	b.n	8001ad6 <__aeabi_dmul+0x552>
 80019b0:	2480      	movs	r4, #128	@ 0x80
 80019b2:	4653      	mov	r3, sl
 80019b4:	0324      	lsls	r4, r4, #12
 80019b6:	431c      	orrs	r4, r3
 80019b8:	0324      	lsls	r4, r4, #12
 80019ba:	4642      	mov	r2, r8
 80019bc:	0b24      	lsrs	r4, r4, #12
 80019be:	e63e      	b.n	800163e <__aeabi_dmul+0xba>
 80019c0:	469b      	mov	fp, r3
 80019c2:	2303      	movs	r3, #3
 80019c4:	4680      	mov	r8, r0
 80019c6:	250c      	movs	r5, #12
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	e601      	b.n	80015d0 <__aeabi_dmul+0x4c>
 80019cc:	2300      	movs	r3, #0
 80019ce:	469a      	mov	sl, r3
 80019d0:	469b      	mov	fp, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	2504      	movs	r5, #4
 80019d6:	9302      	str	r3, [sp, #8]
 80019d8:	e5fa      	b.n	80015d0 <__aeabi_dmul+0x4c>
 80019da:	2101      	movs	r1, #1
 80019dc:	430d      	orrs	r5, r1
 80019de:	2d0a      	cmp	r5, #10
 80019e0:	dd00      	ble.n	80019e4 <__aeabi_dmul+0x460>
 80019e2:	e64b      	b.n	800167c <__aeabi_dmul+0xf8>
 80019e4:	4649      	mov	r1, r9
 80019e6:	9800      	ldr	r0, [sp, #0]
 80019e8:	4041      	eors	r1, r0
 80019ea:	b2c9      	uxtb	r1, r1
 80019ec:	9103      	str	r1, [sp, #12]
 80019ee:	2d02      	cmp	r5, #2
 80019f0:	dc00      	bgt.n	80019f4 <__aeabi_dmul+0x470>
 80019f2:	e096      	b.n	8001b22 <__aeabi_dmul+0x59e>
 80019f4:	2300      	movs	r3, #0
 80019f6:	2400      	movs	r4, #0
 80019f8:	2001      	movs	r0, #1
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	e60c      	b.n	8001618 <__aeabi_dmul+0x94>
 80019fe:	4649      	mov	r1, r9
 8001a00:	2302      	movs	r3, #2
 8001a02:	9a00      	ldr	r2, [sp, #0]
 8001a04:	432b      	orrs	r3, r5
 8001a06:	4051      	eors	r1, r2
 8001a08:	b2ca      	uxtb	r2, r1
 8001a0a:	9203      	str	r2, [sp, #12]
 8001a0c:	2b0a      	cmp	r3, #10
 8001a0e:	dd00      	ble.n	8001a12 <__aeabi_dmul+0x48e>
 8001a10:	e634      	b.n	800167c <__aeabi_dmul+0xf8>
 8001a12:	2d00      	cmp	r5, #0
 8001a14:	d157      	bne.n	8001ac6 <__aeabi_dmul+0x542>
 8001a16:	9b03      	ldr	r3, [sp, #12]
 8001a18:	4699      	mov	r9, r3
 8001a1a:	2400      	movs	r4, #0
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4b49      	ldr	r3, [pc, #292]	@ (8001b44 <__aeabi_dmul+0x5c0>)
 8001a20:	e60e      	b.n	8001640 <__aeabi_dmul+0xbc>
 8001a22:	4658      	mov	r0, fp
 8001a24:	2101      	movs	r1, #1
 8001a26:	1ac9      	subs	r1, r1, r3
 8001a28:	2938      	cmp	r1, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dmul+0x4aa>
 8001a2c:	e62f      	b.n	800168e <__aeabi_dmul+0x10a>
 8001a2e:	291f      	cmp	r1, #31
 8001a30:	dd56      	ble.n	8001ae0 <__aeabi_dmul+0x55c>
 8001a32:	221f      	movs	r2, #31
 8001a34:	4654      	mov	r4, sl
 8001a36:	4252      	negs	r2, r2
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	40dc      	lsrs	r4, r3
 8001a3c:	2920      	cmp	r1, #32
 8001a3e:	d007      	beq.n	8001a50 <__aeabi_dmul+0x4cc>
 8001a40:	4b41      	ldr	r3, [pc, #260]	@ (8001b48 <__aeabi_dmul+0x5c4>)
 8001a42:	4642      	mov	r2, r8
 8001a44:	469c      	mov	ip, r3
 8001a46:	4653      	mov	r3, sl
 8001a48:	4460      	add	r0, ip
 8001a4a:	4083      	lsls	r3, r0
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	4690      	mov	r8, r2
 8001a50:	4642      	mov	r2, r8
 8001a52:	2107      	movs	r1, #7
 8001a54:	1e53      	subs	r3, r2, #1
 8001a56:	419a      	sbcs	r2, r3
 8001a58:	000b      	movs	r3, r1
 8001a5a:	4322      	orrs	r2, r4
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2400      	movs	r4, #0
 8001a60:	4211      	tst	r1, r2
 8001a62:	d009      	beq.n	8001a78 <__aeabi_dmul+0x4f4>
 8001a64:	230f      	movs	r3, #15
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d05d      	beq.n	8001b28 <__aeabi_dmul+0x5a4>
 8001a6c:	1d11      	adds	r1, r2, #4
 8001a6e:	4291      	cmp	r1, r2
 8001a70:	419b      	sbcs	r3, r3
 8001a72:	000a      	movs	r2, r1
 8001a74:	425b      	negs	r3, r3
 8001a76:	075b      	lsls	r3, r3, #29
 8001a78:	08d2      	lsrs	r2, r2, #3
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e5df      	b.n	8001640 <__aeabi_dmul+0xbc>
 8001a80:	9b03      	ldr	r3, [sp, #12]
 8001a82:	4699      	mov	r9, r3
 8001a84:	e5fa      	b.n	800167c <__aeabi_dmul+0xf8>
 8001a86:	9801      	ldr	r0, [sp, #4]
 8001a88:	f000 fd9e 	bl	80025c8 <__clzsi2>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	0003      	movs	r3, r0
 8001a90:	3215      	adds	r2, #21
 8001a92:	3320      	adds	r3, #32
 8001a94:	2a1c      	cmp	r2, #28
 8001a96:	dc00      	bgt.n	8001a9a <__aeabi_dmul+0x516>
 8001a98:	e738      	b.n	800190c <__aeabi_dmul+0x388>
 8001a9a:	9a01      	ldr	r2, [sp, #4]
 8001a9c:	3808      	subs	r0, #8
 8001a9e:	4082      	lsls	r2, r0
 8001aa0:	e73f      	b.n	8001922 <__aeabi_dmul+0x39e>
 8001aa2:	f000 fd91 	bl	80025c8 <__clzsi2>
 8001aa6:	2315      	movs	r3, #21
 8001aa8:	469c      	mov	ip, r3
 8001aaa:	4484      	add	ip, r0
 8001aac:	0002      	movs	r2, r0
 8001aae:	4663      	mov	r3, ip
 8001ab0:	3220      	adds	r2, #32
 8001ab2:	2b1c      	cmp	r3, #28
 8001ab4:	dc00      	bgt.n	8001ab8 <__aeabi_dmul+0x534>
 8001ab6:	e758      	b.n	800196a <__aeabi_dmul+0x3e6>
 8001ab8:	2300      	movs	r3, #0
 8001aba:	4698      	mov	r8, r3
 8001abc:	0023      	movs	r3, r4
 8001abe:	3808      	subs	r0, #8
 8001ac0:	4083      	lsls	r3, r0
 8001ac2:	469a      	mov	sl, r3
 8001ac4:	e762      	b.n	800198c <__aeabi_dmul+0x408>
 8001ac6:	001d      	movs	r5, r3
 8001ac8:	2300      	movs	r3, #0
 8001aca:	2400      	movs	r4, #0
 8001acc:	2002      	movs	r0, #2
 8001ace:	9301      	str	r3, [sp, #4]
 8001ad0:	e5a2      	b.n	8001618 <__aeabi_dmul+0x94>
 8001ad2:	9002      	str	r0, [sp, #8]
 8001ad4:	e632      	b.n	800173c <__aeabi_dmul+0x1b8>
 8001ad6:	431c      	orrs	r4, r3
 8001ad8:	9b00      	ldr	r3, [sp, #0]
 8001ada:	9a01      	ldr	r2, [sp, #4]
 8001adc:	4699      	mov	r9, r3
 8001ade:	e5ae      	b.n	800163e <__aeabi_dmul+0xba>
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b4c <__aeabi_dmul+0x5c8>)
 8001ae2:	4652      	mov	r2, sl
 8001ae4:	18c3      	adds	r3, r0, r3
 8001ae6:	4640      	mov	r0, r8
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	40c8      	lsrs	r0, r1
 8001aec:	4302      	orrs	r2, r0
 8001aee:	4640      	mov	r0, r8
 8001af0:	4098      	lsls	r0, r3
 8001af2:	0003      	movs	r3, r0
 8001af4:	1e58      	subs	r0, r3, #1
 8001af6:	4183      	sbcs	r3, r0
 8001af8:	4654      	mov	r4, sl
 8001afa:	431a      	orrs	r2, r3
 8001afc:	40cc      	lsrs	r4, r1
 8001afe:	0753      	lsls	r3, r2, #29
 8001b00:	d009      	beq.n	8001b16 <__aeabi_dmul+0x592>
 8001b02:	230f      	movs	r3, #15
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d005      	beq.n	8001b16 <__aeabi_dmul+0x592>
 8001b0a:	1d13      	adds	r3, r2, #4
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	4192      	sbcs	r2, r2
 8001b10:	4252      	negs	r2, r2
 8001b12:	18a4      	adds	r4, r4, r2
 8001b14:	001a      	movs	r2, r3
 8001b16:	0223      	lsls	r3, r4, #8
 8001b18:	d508      	bpl.n	8001b2c <__aeabi_dmul+0x5a8>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2200      	movs	r2, #0
 8001b20:	e58e      	b.n	8001640 <__aeabi_dmul+0xbc>
 8001b22:	4689      	mov	r9, r1
 8001b24:	2400      	movs	r4, #0
 8001b26:	e58b      	b.n	8001640 <__aeabi_dmul+0xbc>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	e7a5      	b.n	8001a78 <__aeabi_dmul+0x4f4>
 8001b2c:	0763      	lsls	r3, r4, #29
 8001b2e:	0264      	lsls	r4, r4, #9
 8001b30:	0b24      	lsrs	r4, r4, #12
 8001b32:	e7a1      	b.n	8001a78 <__aeabi_dmul+0x4f4>
 8001b34:	9b00      	ldr	r3, [sp, #0]
 8001b36:	46a2      	mov	sl, r4
 8001b38:	4699      	mov	r9, r3
 8001b3a:	9b01      	ldr	r3, [sp, #4]
 8001b3c:	4698      	mov	r8, r3
 8001b3e:	e737      	b.n	80019b0 <__aeabi_dmul+0x42c>
 8001b40:	fffffc0d 	.word	0xfffffc0d
 8001b44:	000007ff 	.word	0x000007ff
 8001b48:	0000043e 	.word	0x0000043e
 8001b4c:	0000041e 	.word	0x0000041e

08001b50 <__aeabi_dsub>:
 8001b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b52:	4657      	mov	r7, sl
 8001b54:	464e      	mov	r6, r9
 8001b56:	4645      	mov	r5, r8
 8001b58:	46de      	mov	lr, fp
 8001b5a:	b5e0      	push	{r5, r6, r7, lr}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	9000      	str	r0, [sp, #0]
 8001b60:	9101      	str	r1, [sp, #4]
 8001b62:	030c      	lsls	r4, r1, #12
 8001b64:	004d      	lsls	r5, r1, #1
 8001b66:	0fce      	lsrs	r6, r1, #31
 8001b68:	0a61      	lsrs	r1, r4, #9
 8001b6a:	9c00      	ldr	r4, [sp, #0]
 8001b6c:	005f      	lsls	r7, r3, #1
 8001b6e:	0f64      	lsrs	r4, r4, #29
 8001b70:	430c      	orrs	r4, r1
 8001b72:	9900      	ldr	r1, [sp, #0]
 8001b74:	9200      	str	r2, [sp, #0]
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	00c8      	lsls	r0, r1, #3
 8001b7a:	0319      	lsls	r1, r3, #12
 8001b7c:	0d7b      	lsrs	r3, r7, #21
 8001b7e:	4699      	mov	r9, r3
 8001b80:	9b01      	ldr	r3, [sp, #4]
 8001b82:	4fcc      	ldr	r7, [pc, #816]	@ (8001eb4 <__aeabi_dsub+0x364>)
 8001b84:	0fdb      	lsrs	r3, r3, #31
 8001b86:	469c      	mov	ip, r3
 8001b88:	0a4b      	lsrs	r3, r1, #9
 8001b8a:	9900      	ldr	r1, [sp, #0]
 8001b8c:	4680      	mov	r8, r0
 8001b8e:	0f49      	lsrs	r1, r1, #29
 8001b90:	4319      	orrs	r1, r3
 8001b92:	9b00      	ldr	r3, [sp, #0]
 8001b94:	468b      	mov	fp, r1
 8001b96:	00da      	lsls	r2, r3, #3
 8001b98:	4692      	mov	sl, r2
 8001b9a:	0d6d      	lsrs	r5, r5, #21
 8001b9c:	45b9      	cmp	r9, r7
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dsub+0x52>
 8001ba0:	e0bf      	b.n	8001d22 <__aeabi_dsub+0x1d2>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	4661      	mov	r1, ip
 8001ba6:	4059      	eors	r1, r3
 8001ba8:	464b      	mov	r3, r9
 8001baa:	468c      	mov	ip, r1
 8001bac:	1aeb      	subs	r3, r5, r3
 8001bae:	428e      	cmp	r6, r1
 8001bb0:	d075      	beq.n	8001c9e <__aeabi_dsub+0x14e>
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	dc00      	bgt.n	8001bb8 <__aeabi_dsub+0x68>
 8001bb6:	e2a3      	b.n	8002100 <__aeabi_dsub+0x5b0>
 8001bb8:	4649      	mov	r1, r9
 8001bba:	2900      	cmp	r1, #0
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x70>
 8001bbe:	e0ce      	b.n	8001d5e <__aeabi_dsub+0x20e>
 8001bc0:	42bd      	cmp	r5, r7
 8001bc2:	d100      	bne.n	8001bc6 <__aeabi_dsub+0x76>
 8001bc4:	e200      	b.n	8001fc8 <__aeabi_dsub+0x478>
 8001bc6:	2701      	movs	r7, #1
 8001bc8:	2b38      	cmp	r3, #56	@ 0x38
 8001bca:	dc19      	bgt.n	8001c00 <__aeabi_dsub+0xb0>
 8001bcc:	2780      	movs	r7, #128	@ 0x80
 8001bce:	4659      	mov	r1, fp
 8001bd0:	043f      	lsls	r7, r7, #16
 8001bd2:	4339      	orrs	r1, r7
 8001bd4:	468b      	mov	fp, r1
 8001bd6:	2b1f      	cmp	r3, #31
 8001bd8:	dd00      	ble.n	8001bdc <__aeabi_dsub+0x8c>
 8001bda:	e1fa      	b.n	8001fd2 <__aeabi_dsub+0x482>
 8001bdc:	2720      	movs	r7, #32
 8001bde:	1af9      	subs	r1, r7, r3
 8001be0:	468c      	mov	ip, r1
 8001be2:	4659      	mov	r1, fp
 8001be4:	4667      	mov	r7, ip
 8001be6:	40b9      	lsls	r1, r7
 8001be8:	000f      	movs	r7, r1
 8001bea:	0011      	movs	r1, r2
 8001bec:	40d9      	lsrs	r1, r3
 8001bee:	430f      	orrs	r7, r1
 8001bf0:	4661      	mov	r1, ip
 8001bf2:	408a      	lsls	r2, r1
 8001bf4:	1e51      	subs	r1, r2, #1
 8001bf6:	418a      	sbcs	r2, r1
 8001bf8:	4659      	mov	r1, fp
 8001bfa:	40d9      	lsrs	r1, r3
 8001bfc:	4317      	orrs	r7, r2
 8001bfe:	1a64      	subs	r4, r4, r1
 8001c00:	1bc7      	subs	r7, r0, r7
 8001c02:	42b8      	cmp	r0, r7
 8001c04:	4180      	sbcs	r0, r0
 8001c06:	4240      	negs	r0, r0
 8001c08:	1a24      	subs	r4, r4, r0
 8001c0a:	0223      	lsls	r3, r4, #8
 8001c0c:	d400      	bmi.n	8001c10 <__aeabi_dsub+0xc0>
 8001c0e:	e140      	b.n	8001e92 <__aeabi_dsub+0x342>
 8001c10:	0264      	lsls	r4, r4, #9
 8001c12:	0a64      	lsrs	r4, r4, #9
 8001c14:	2c00      	cmp	r4, #0
 8001c16:	d100      	bne.n	8001c1a <__aeabi_dsub+0xca>
 8001c18:	e154      	b.n	8001ec4 <__aeabi_dsub+0x374>
 8001c1a:	0020      	movs	r0, r4
 8001c1c:	f000 fcd4 	bl	80025c8 <__clzsi2>
 8001c20:	0003      	movs	r3, r0
 8001c22:	3b08      	subs	r3, #8
 8001c24:	2120      	movs	r1, #32
 8001c26:	0038      	movs	r0, r7
 8001c28:	1aca      	subs	r2, r1, r3
 8001c2a:	40d0      	lsrs	r0, r2
 8001c2c:	409c      	lsls	r4, r3
 8001c2e:	0002      	movs	r2, r0
 8001c30:	409f      	lsls	r7, r3
 8001c32:	4322      	orrs	r2, r4
 8001c34:	429d      	cmp	r5, r3
 8001c36:	dd00      	ble.n	8001c3a <__aeabi_dsub+0xea>
 8001c38:	e1a6      	b.n	8001f88 <__aeabi_dsub+0x438>
 8001c3a:	1b58      	subs	r0, r3, r5
 8001c3c:	3001      	adds	r0, #1
 8001c3e:	1a09      	subs	r1, r1, r0
 8001c40:	003c      	movs	r4, r7
 8001c42:	408f      	lsls	r7, r1
 8001c44:	40c4      	lsrs	r4, r0
 8001c46:	1e7b      	subs	r3, r7, #1
 8001c48:	419f      	sbcs	r7, r3
 8001c4a:	0013      	movs	r3, r2
 8001c4c:	408b      	lsls	r3, r1
 8001c4e:	4327      	orrs	r7, r4
 8001c50:	431f      	orrs	r7, r3
 8001c52:	40c2      	lsrs	r2, r0
 8001c54:	003b      	movs	r3, r7
 8001c56:	0014      	movs	r4, r2
 8001c58:	2500      	movs	r5, #0
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x110>
 8001c5e:	e1f7      	b.n	8002050 <__aeabi_dsub+0x500>
 8001c60:	077b      	lsls	r3, r7, #29
 8001c62:	d100      	bne.n	8001c66 <__aeabi_dsub+0x116>
 8001c64:	e377      	b.n	8002356 <__aeabi_dsub+0x806>
 8001c66:	230f      	movs	r3, #15
 8001c68:	0038      	movs	r0, r7
 8001c6a:	403b      	ands	r3, r7
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d004      	beq.n	8001c7a <__aeabi_dsub+0x12a>
 8001c70:	1d38      	adds	r0, r7, #4
 8001c72:	42b8      	cmp	r0, r7
 8001c74:	41bf      	sbcs	r7, r7
 8001c76:	427f      	negs	r7, r7
 8001c78:	19e4      	adds	r4, r4, r7
 8001c7a:	0223      	lsls	r3, r4, #8
 8001c7c:	d400      	bmi.n	8001c80 <__aeabi_dsub+0x130>
 8001c7e:	e368      	b.n	8002352 <__aeabi_dsub+0x802>
 8001c80:	4b8c      	ldr	r3, [pc, #560]	@ (8001eb4 <__aeabi_dsub+0x364>)
 8001c82:	3501      	adds	r5, #1
 8001c84:	429d      	cmp	r5, r3
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x13a>
 8001c88:	e0f4      	b.n	8001e74 <__aeabi_dsub+0x324>
 8001c8a:	4b8b      	ldr	r3, [pc, #556]	@ (8001eb8 <__aeabi_dsub+0x368>)
 8001c8c:	056d      	lsls	r5, r5, #21
 8001c8e:	401c      	ands	r4, r3
 8001c90:	0d6d      	lsrs	r5, r5, #21
 8001c92:	0767      	lsls	r7, r4, #29
 8001c94:	08c0      	lsrs	r0, r0, #3
 8001c96:	0264      	lsls	r4, r4, #9
 8001c98:	4307      	orrs	r7, r0
 8001c9a:	0b24      	lsrs	r4, r4, #12
 8001c9c:	e0ec      	b.n	8001e78 <__aeabi_dsub+0x328>
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	dc00      	bgt.n	8001ca4 <__aeabi_dsub+0x154>
 8001ca2:	e329      	b.n	80022f8 <__aeabi_dsub+0x7a8>
 8001ca4:	4649      	mov	r1, r9
 8001ca6:	2900      	cmp	r1, #0
 8001ca8:	d000      	beq.n	8001cac <__aeabi_dsub+0x15c>
 8001caa:	e0d6      	b.n	8001e5a <__aeabi_dsub+0x30a>
 8001cac:	4659      	mov	r1, fp
 8001cae:	4311      	orrs	r1, r2
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_dsub+0x164>
 8001cb2:	e12e      	b.n	8001f12 <__aeabi_dsub+0x3c2>
 8001cb4:	1e59      	subs	r1, r3, #1
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d100      	bne.n	8001cbc <__aeabi_dsub+0x16c>
 8001cba:	e1e6      	b.n	800208a <__aeabi_dsub+0x53a>
 8001cbc:	42bb      	cmp	r3, r7
 8001cbe:	d100      	bne.n	8001cc2 <__aeabi_dsub+0x172>
 8001cc0:	e182      	b.n	8001fc8 <__aeabi_dsub+0x478>
 8001cc2:	2701      	movs	r7, #1
 8001cc4:	000b      	movs	r3, r1
 8001cc6:	2938      	cmp	r1, #56	@ 0x38
 8001cc8:	dc14      	bgt.n	8001cf4 <__aeabi_dsub+0x1a4>
 8001cca:	2b1f      	cmp	r3, #31
 8001ccc:	dd00      	ble.n	8001cd0 <__aeabi_dsub+0x180>
 8001cce:	e23c      	b.n	800214a <__aeabi_dsub+0x5fa>
 8001cd0:	2720      	movs	r7, #32
 8001cd2:	1af9      	subs	r1, r7, r3
 8001cd4:	468c      	mov	ip, r1
 8001cd6:	4659      	mov	r1, fp
 8001cd8:	4667      	mov	r7, ip
 8001cda:	40b9      	lsls	r1, r7
 8001cdc:	000f      	movs	r7, r1
 8001cde:	0011      	movs	r1, r2
 8001ce0:	40d9      	lsrs	r1, r3
 8001ce2:	430f      	orrs	r7, r1
 8001ce4:	4661      	mov	r1, ip
 8001ce6:	408a      	lsls	r2, r1
 8001ce8:	1e51      	subs	r1, r2, #1
 8001cea:	418a      	sbcs	r2, r1
 8001cec:	4659      	mov	r1, fp
 8001cee:	40d9      	lsrs	r1, r3
 8001cf0:	4317      	orrs	r7, r2
 8001cf2:	1864      	adds	r4, r4, r1
 8001cf4:	183f      	adds	r7, r7, r0
 8001cf6:	4287      	cmp	r7, r0
 8001cf8:	4180      	sbcs	r0, r0
 8001cfa:	4240      	negs	r0, r0
 8001cfc:	1824      	adds	r4, r4, r0
 8001cfe:	0223      	lsls	r3, r4, #8
 8001d00:	d400      	bmi.n	8001d04 <__aeabi_dsub+0x1b4>
 8001d02:	e0c6      	b.n	8001e92 <__aeabi_dsub+0x342>
 8001d04:	4b6b      	ldr	r3, [pc, #428]	@ (8001eb4 <__aeabi_dsub+0x364>)
 8001d06:	3501      	adds	r5, #1
 8001d08:	429d      	cmp	r5, r3
 8001d0a:	d100      	bne.n	8001d0e <__aeabi_dsub+0x1be>
 8001d0c:	e0b2      	b.n	8001e74 <__aeabi_dsub+0x324>
 8001d0e:	2101      	movs	r1, #1
 8001d10:	4b69      	ldr	r3, [pc, #420]	@ (8001eb8 <__aeabi_dsub+0x368>)
 8001d12:	087a      	lsrs	r2, r7, #1
 8001d14:	401c      	ands	r4, r3
 8001d16:	4039      	ands	r1, r7
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	07e7      	lsls	r7, r4, #31
 8001d1c:	4317      	orrs	r7, r2
 8001d1e:	0864      	lsrs	r4, r4, #1
 8001d20:	e79e      	b.n	8001c60 <__aeabi_dsub+0x110>
 8001d22:	4b66      	ldr	r3, [pc, #408]	@ (8001ebc <__aeabi_dsub+0x36c>)
 8001d24:	4311      	orrs	r1, r2
 8001d26:	468a      	mov	sl, r1
 8001d28:	18eb      	adds	r3, r5, r3
 8001d2a:	2900      	cmp	r1, #0
 8001d2c:	d028      	beq.n	8001d80 <__aeabi_dsub+0x230>
 8001d2e:	4566      	cmp	r6, ip
 8001d30:	d02c      	beq.n	8001d8c <__aeabi_dsub+0x23c>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d05b      	beq.n	8001dee <__aeabi_dsub+0x29e>
 8001d36:	2d00      	cmp	r5, #0
 8001d38:	d100      	bne.n	8001d3c <__aeabi_dsub+0x1ec>
 8001d3a:	e12c      	b.n	8001f96 <__aeabi_dsub+0x446>
 8001d3c:	465b      	mov	r3, fp
 8001d3e:	4666      	mov	r6, ip
 8001d40:	075f      	lsls	r7, r3, #29
 8001d42:	08d2      	lsrs	r2, r2, #3
 8001d44:	4317      	orrs	r7, r2
 8001d46:	08dd      	lsrs	r5, r3, #3
 8001d48:	003b      	movs	r3, r7
 8001d4a:	432b      	orrs	r3, r5
 8001d4c:	d100      	bne.n	8001d50 <__aeabi_dsub+0x200>
 8001d4e:	e0e2      	b.n	8001f16 <__aeabi_dsub+0x3c6>
 8001d50:	2480      	movs	r4, #128	@ 0x80
 8001d52:	0324      	lsls	r4, r4, #12
 8001d54:	432c      	orrs	r4, r5
 8001d56:	0324      	lsls	r4, r4, #12
 8001d58:	4d56      	ldr	r5, [pc, #344]	@ (8001eb4 <__aeabi_dsub+0x364>)
 8001d5a:	0b24      	lsrs	r4, r4, #12
 8001d5c:	e08c      	b.n	8001e78 <__aeabi_dsub+0x328>
 8001d5e:	4659      	mov	r1, fp
 8001d60:	4311      	orrs	r1, r2
 8001d62:	d100      	bne.n	8001d66 <__aeabi_dsub+0x216>
 8001d64:	e0d5      	b.n	8001f12 <__aeabi_dsub+0x3c2>
 8001d66:	1e59      	subs	r1, r3, #1
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_dsub+0x21e>
 8001d6c:	e1b9      	b.n	80020e2 <__aeabi_dsub+0x592>
 8001d6e:	42bb      	cmp	r3, r7
 8001d70:	d100      	bne.n	8001d74 <__aeabi_dsub+0x224>
 8001d72:	e1b1      	b.n	80020d8 <__aeabi_dsub+0x588>
 8001d74:	2701      	movs	r7, #1
 8001d76:	000b      	movs	r3, r1
 8001d78:	2938      	cmp	r1, #56	@ 0x38
 8001d7a:	dd00      	ble.n	8001d7e <__aeabi_dsub+0x22e>
 8001d7c:	e740      	b.n	8001c00 <__aeabi_dsub+0xb0>
 8001d7e:	e72a      	b.n	8001bd6 <__aeabi_dsub+0x86>
 8001d80:	4661      	mov	r1, ip
 8001d82:	2701      	movs	r7, #1
 8001d84:	4079      	eors	r1, r7
 8001d86:	468c      	mov	ip, r1
 8001d88:	4566      	cmp	r6, ip
 8001d8a:	d1d2      	bne.n	8001d32 <__aeabi_dsub+0x1e2>
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d100      	bne.n	8001d92 <__aeabi_dsub+0x242>
 8001d90:	e0c5      	b.n	8001f1e <__aeabi_dsub+0x3ce>
 8001d92:	2d00      	cmp	r5, #0
 8001d94:	d000      	beq.n	8001d98 <__aeabi_dsub+0x248>
 8001d96:	e155      	b.n	8002044 <__aeabi_dsub+0x4f4>
 8001d98:	464b      	mov	r3, r9
 8001d9a:	0025      	movs	r5, r4
 8001d9c:	4305      	orrs	r5, r0
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_dsub+0x252>
 8001da0:	e212      	b.n	80021c8 <__aeabi_dsub+0x678>
 8001da2:	1e59      	subs	r1, r3, #1
 8001da4:	468c      	mov	ip, r1
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d100      	bne.n	8001dac <__aeabi_dsub+0x25c>
 8001daa:	e249      	b.n	8002240 <__aeabi_dsub+0x6f0>
 8001dac:	4d41      	ldr	r5, [pc, #260]	@ (8001eb4 <__aeabi_dsub+0x364>)
 8001dae:	42ab      	cmp	r3, r5
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x264>
 8001db2:	e28f      	b.n	80022d4 <__aeabi_dsub+0x784>
 8001db4:	2701      	movs	r7, #1
 8001db6:	2938      	cmp	r1, #56	@ 0x38
 8001db8:	dc11      	bgt.n	8001dde <__aeabi_dsub+0x28e>
 8001dba:	4663      	mov	r3, ip
 8001dbc:	2b1f      	cmp	r3, #31
 8001dbe:	dd00      	ble.n	8001dc2 <__aeabi_dsub+0x272>
 8001dc0:	e25b      	b.n	800227a <__aeabi_dsub+0x72a>
 8001dc2:	4661      	mov	r1, ip
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	0027      	movs	r7, r4
 8001dc8:	1a5b      	subs	r3, r3, r1
 8001dca:	0005      	movs	r5, r0
 8001dcc:	4098      	lsls	r0, r3
 8001dce:	409f      	lsls	r7, r3
 8001dd0:	40cd      	lsrs	r5, r1
 8001dd2:	1e43      	subs	r3, r0, #1
 8001dd4:	4198      	sbcs	r0, r3
 8001dd6:	40cc      	lsrs	r4, r1
 8001dd8:	432f      	orrs	r7, r5
 8001dda:	4307      	orrs	r7, r0
 8001ddc:	44a3      	add	fp, r4
 8001dde:	18bf      	adds	r7, r7, r2
 8001de0:	4297      	cmp	r7, r2
 8001de2:	4192      	sbcs	r2, r2
 8001de4:	4252      	negs	r2, r2
 8001de6:	445a      	add	r2, fp
 8001de8:	0014      	movs	r4, r2
 8001dea:	464d      	mov	r5, r9
 8001dec:	e787      	b.n	8001cfe <__aeabi_dsub+0x1ae>
 8001dee:	4f34      	ldr	r7, [pc, #208]	@ (8001ec0 <__aeabi_dsub+0x370>)
 8001df0:	1c6b      	adds	r3, r5, #1
 8001df2:	423b      	tst	r3, r7
 8001df4:	d000      	beq.n	8001df8 <__aeabi_dsub+0x2a8>
 8001df6:	e0b6      	b.n	8001f66 <__aeabi_dsub+0x416>
 8001df8:	4659      	mov	r1, fp
 8001dfa:	0023      	movs	r3, r4
 8001dfc:	4311      	orrs	r1, r2
 8001dfe:	000f      	movs	r7, r1
 8001e00:	4303      	orrs	r3, r0
 8001e02:	2d00      	cmp	r5, #0
 8001e04:	d000      	beq.n	8001e08 <__aeabi_dsub+0x2b8>
 8001e06:	e126      	b.n	8002056 <__aeabi_dsub+0x506>
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_dsub+0x2be>
 8001e0c:	e1c0      	b.n	8002190 <__aeabi_dsub+0x640>
 8001e0e:	2900      	cmp	r1, #0
 8001e10:	d100      	bne.n	8001e14 <__aeabi_dsub+0x2c4>
 8001e12:	e0a1      	b.n	8001f58 <__aeabi_dsub+0x408>
 8001e14:	1a83      	subs	r3, r0, r2
 8001e16:	4698      	mov	r8, r3
 8001e18:	465b      	mov	r3, fp
 8001e1a:	4540      	cmp	r0, r8
 8001e1c:	41ad      	sbcs	r5, r5
 8001e1e:	1ae3      	subs	r3, r4, r3
 8001e20:	426d      	negs	r5, r5
 8001e22:	1b5b      	subs	r3, r3, r5
 8001e24:	2580      	movs	r5, #128	@ 0x80
 8001e26:	042d      	lsls	r5, r5, #16
 8001e28:	422b      	tst	r3, r5
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_dsub+0x2de>
 8001e2c:	e14b      	b.n	80020c6 <__aeabi_dsub+0x576>
 8001e2e:	465b      	mov	r3, fp
 8001e30:	1a10      	subs	r0, r2, r0
 8001e32:	4282      	cmp	r2, r0
 8001e34:	4192      	sbcs	r2, r2
 8001e36:	1b1c      	subs	r4, r3, r4
 8001e38:	0007      	movs	r7, r0
 8001e3a:	2601      	movs	r6, #1
 8001e3c:	4663      	mov	r3, ip
 8001e3e:	4252      	negs	r2, r2
 8001e40:	1aa4      	subs	r4, r4, r2
 8001e42:	4327      	orrs	r7, r4
 8001e44:	401e      	ands	r6, r3
 8001e46:	2f00      	cmp	r7, #0
 8001e48:	d100      	bne.n	8001e4c <__aeabi_dsub+0x2fc>
 8001e4a:	e142      	b.n	80020d2 <__aeabi_dsub+0x582>
 8001e4c:	422c      	tst	r4, r5
 8001e4e:	d100      	bne.n	8001e52 <__aeabi_dsub+0x302>
 8001e50:	e26d      	b.n	800232e <__aeabi_dsub+0x7de>
 8001e52:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <__aeabi_dsub+0x368>)
 8001e54:	2501      	movs	r5, #1
 8001e56:	401c      	ands	r4, r3
 8001e58:	e71b      	b.n	8001c92 <__aeabi_dsub+0x142>
 8001e5a:	42bd      	cmp	r5, r7
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x310>
 8001e5e:	e13b      	b.n	80020d8 <__aeabi_dsub+0x588>
 8001e60:	2701      	movs	r7, #1
 8001e62:	2b38      	cmp	r3, #56	@ 0x38
 8001e64:	dd00      	ble.n	8001e68 <__aeabi_dsub+0x318>
 8001e66:	e745      	b.n	8001cf4 <__aeabi_dsub+0x1a4>
 8001e68:	2780      	movs	r7, #128	@ 0x80
 8001e6a:	4659      	mov	r1, fp
 8001e6c:	043f      	lsls	r7, r7, #16
 8001e6e:	4339      	orrs	r1, r7
 8001e70:	468b      	mov	fp, r1
 8001e72:	e72a      	b.n	8001cca <__aeabi_dsub+0x17a>
 8001e74:	2400      	movs	r4, #0
 8001e76:	2700      	movs	r7, #0
 8001e78:	052d      	lsls	r5, r5, #20
 8001e7a:	4325      	orrs	r5, r4
 8001e7c:	07f6      	lsls	r6, r6, #31
 8001e7e:	4335      	orrs	r5, r6
 8001e80:	0038      	movs	r0, r7
 8001e82:	0029      	movs	r1, r5
 8001e84:	b003      	add	sp, #12
 8001e86:	bcf0      	pop	{r4, r5, r6, r7}
 8001e88:	46bb      	mov	fp, r7
 8001e8a:	46b2      	mov	sl, r6
 8001e8c:	46a9      	mov	r9, r5
 8001e8e:	46a0      	mov	r8, r4
 8001e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e92:	077b      	lsls	r3, r7, #29
 8001e94:	d004      	beq.n	8001ea0 <__aeabi_dsub+0x350>
 8001e96:	230f      	movs	r3, #15
 8001e98:	403b      	ands	r3, r7
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d000      	beq.n	8001ea0 <__aeabi_dsub+0x350>
 8001e9e:	e6e7      	b.n	8001c70 <__aeabi_dsub+0x120>
 8001ea0:	002b      	movs	r3, r5
 8001ea2:	08f8      	lsrs	r0, r7, #3
 8001ea4:	4a03      	ldr	r2, [pc, #12]	@ (8001eb4 <__aeabi_dsub+0x364>)
 8001ea6:	0767      	lsls	r7, r4, #29
 8001ea8:	4307      	orrs	r7, r0
 8001eaa:	08e5      	lsrs	r5, r4, #3
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0x362>
 8001eb0:	e74a      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 8001eb2:	e0a5      	b.n	8002000 <__aeabi_dsub+0x4b0>
 8001eb4:	000007ff 	.word	0x000007ff
 8001eb8:	ff7fffff 	.word	0xff7fffff
 8001ebc:	fffff801 	.word	0xfffff801
 8001ec0:	000007fe 	.word	0x000007fe
 8001ec4:	0038      	movs	r0, r7
 8001ec6:	f000 fb7f 	bl	80025c8 <__clzsi2>
 8001eca:	0003      	movs	r3, r0
 8001ecc:	3318      	adds	r3, #24
 8001ece:	2b1f      	cmp	r3, #31
 8001ed0:	dc00      	bgt.n	8001ed4 <__aeabi_dsub+0x384>
 8001ed2:	e6a7      	b.n	8001c24 <__aeabi_dsub+0xd4>
 8001ed4:	003a      	movs	r2, r7
 8001ed6:	3808      	subs	r0, #8
 8001ed8:	4082      	lsls	r2, r0
 8001eda:	429d      	cmp	r5, r3
 8001edc:	dd00      	ble.n	8001ee0 <__aeabi_dsub+0x390>
 8001ede:	e08a      	b.n	8001ff6 <__aeabi_dsub+0x4a6>
 8001ee0:	1b5b      	subs	r3, r3, r5
 8001ee2:	1c58      	adds	r0, r3, #1
 8001ee4:	281f      	cmp	r0, #31
 8001ee6:	dc00      	bgt.n	8001eea <__aeabi_dsub+0x39a>
 8001ee8:	e1d8      	b.n	800229c <__aeabi_dsub+0x74c>
 8001eea:	0017      	movs	r7, r2
 8001eec:	3b1f      	subs	r3, #31
 8001eee:	40df      	lsrs	r7, r3
 8001ef0:	2820      	cmp	r0, #32
 8001ef2:	d005      	beq.n	8001f00 <__aeabi_dsub+0x3b0>
 8001ef4:	2340      	movs	r3, #64	@ 0x40
 8001ef6:	1a1b      	subs	r3, r3, r0
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	1e53      	subs	r3, r2, #1
 8001efc:	419a      	sbcs	r2, r3
 8001efe:	4317      	orrs	r7, r2
 8001f00:	2500      	movs	r5, #0
 8001f02:	2f00      	cmp	r7, #0
 8001f04:	d100      	bne.n	8001f08 <__aeabi_dsub+0x3b8>
 8001f06:	e0e5      	b.n	80020d4 <__aeabi_dsub+0x584>
 8001f08:	077b      	lsls	r3, r7, #29
 8001f0a:	d000      	beq.n	8001f0e <__aeabi_dsub+0x3be>
 8001f0c:	e6ab      	b.n	8001c66 <__aeabi_dsub+0x116>
 8001f0e:	002c      	movs	r4, r5
 8001f10:	e7c6      	b.n	8001ea0 <__aeabi_dsub+0x350>
 8001f12:	08c0      	lsrs	r0, r0, #3
 8001f14:	e7c6      	b.n	8001ea4 <__aeabi_dsub+0x354>
 8001f16:	2700      	movs	r7, #0
 8001f18:	2400      	movs	r4, #0
 8001f1a:	4dd1      	ldr	r5, [pc, #836]	@ (8002260 <__aeabi_dsub+0x710>)
 8001f1c:	e7ac      	b.n	8001e78 <__aeabi_dsub+0x328>
 8001f1e:	4fd1      	ldr	r7, [pc, #836]	@ (8002264 <__aeabi_dsub+0x714>)
 8001f20:	1c6b      	adds	r3, r5, #1
 8001f22:	423b      	tst	r3, r7
 8001f24:	d171      	bne.n	800200a <__aeabi_dsub+0x4ba>
 8001f26:	0023      	movs	r3, r4
 8001f28:	4303      	orrs	r3, r0
 8001f2a:	2d00      	cmp	r5, #0
 8001f2c:	d000      	beq.n	8001f30 <__aeabi_dsub+0x3e0>
 8001f2e:	e14e      	b.n	80021ce <__aeabi_dsub+0x67e>
 8001f30:	4657      	mov	r7, sl
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d100      	bne.n	8001f38 <__aeabi_dsub+0x3e8>
 8001f36:	e1b5      	b.n	80022a4 <__aeabi_dsub+0x754>
 8001f38:	2f00      	cmp	r7, #0
 8001f3a:	d00d      	beq.n	8001f58 <__aeabi_dsub+0x408>
 8001f3c:	1883      	adds	r3, r0, r2
 8001f3e:	4283      	cmp	r3, r0
 8001f40:	4180      	sbcs	r0, r0
 8001f42:	445c      	add	r4, fp
 8001f44:	4240      	negs	r0, r0
 8001f46:	1824      	adds	r4, r4, r0
 8001f48:	0222      	lsls	r2, r4, #8
 8001f4a:	d500      	bpl.n	8001f4e <__aeabi_dsub+0x3fe>
 8001f4c:	e1c8      	b.n	80022e0 <__aeabi_dsub+0x790>
 8001f4e:	001f      	movs	r7, r3
 8001f50:	4698      	mov	r8, r3
 8001f52:	4327      	orrs	r7, r4
 8001f54:	d100      	bne.n	8001f58 <__aeabi_dsub+0x408>
 8001f56:	e0bc      	b.n	80020d2 <__aeabi_dsub+0x582>
 8001f58:	4643      	mov	r3, r8
 8001f5a:	0767      	lsls	r7, r4, #29
 8001f5c:	08db      	lsrs	r3, r3, #3
 8001f5e:	431f      	orrs	r7, r3
 8001f60:	08e5      	lsrs	r5, r4, #3
 8001f62:	2300      	movs	r3, #0
 8001f64:	e04c      	b.n	8002000 <__aeabi_dsub+0x4b0>
 8001f66:	1a83      	subs	r3, r0, r2
 8001f68:	4698      	mov	r8, r3
 8001f6a:	465b      	mov	r3, fp
 8001f6c:	4540      	cmp	r0, r8
 8001f6e:	41bf      	sbcs	r7, r7
 8001f70:	1ae3      	subs	r3, r4, r3
 8001f72:	427f      	negs	r7, r7
 8001f74:	1bdb      	subs	r3, r3, r7
 8001f76:	021f      	lsls	r7, r3, #8
 8001f78:	d47c      	bmi.n	8002074 <__aeabi_dsub+0x524>
 8001f7a:	4647      	mov	r7, r8
 8001f7c:	431f      	orrs	r7, r3
 8001f7e:	d100      	bne.n	8001f82 <__aeabi_dsub+0x432>
 8001f80:	e0a6      	b.n	80020d0 <__aeabi_dsub+0x580>
 8001f82:	001c      	movs	r4, r3
 8001f84:	4647      	mov	r7, r8
 8001f86:	e645      	b.n	8001c14 <__aeabi_dsub+0xc4>
 8001f88:	4cb7      	ldr	r4, [pc, #732]	@ (8002268 <__aeabi_dsub+0x718>)
 8001f8a:	1aed      	subs	r5, r5, r3
 8001f8c:	4014      	ands	r4, r2
 8001f8e:	077b      	lsls	r3, r7, #29
 8001f90:	d000      	beq.n	8001f94 <__aeabi_dsub+0x444>
 8001f92:	e780      	b.n	8001e96 <__aeabi_dsub+0x346>
 8001f94:	e784      	b.n	8001ea0 <__aeabi_dsub+0x350>
 8001f96:	464b      	mov	r3, r9
 8001f98:	0025      	movs	r5, r4
 8001f9a:	4305      	orrs	r5, r0
 8001f9c:	d066      	beq.n	800206c <__aeabi_dsub+0x51c>
 8001f9e:	1e5f      	subs	r7, r3, #1
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d100      	bne.n	8001fa6 <__aeabi_dsub+0x456>
 8001fa4:	e0fc      	b.n	80021a0 <__aeabi_dsub+0x650>
 8001fa6:	4dae      	ldr	r5, [pc, #696]	@ (8002260 <__aeabi_dsub+0x710>)
 8001fa8:	42ab      	cmp	r3, r5
 8001faa:	d100      	bne.n	8001fae <__aeabi_dsub+0x45e>
 8001fac:	e15e      	b.n	800226c <__aeabi_dsub+0x71c>
 8001fae:	4666      	mov	r6, ip
 8001fb0:	2f38      	cmp	r7, #56	@ 0x38
 8001fb2:	dc00      	bgt.n	8001fb6 <__aeabi_dsub+0x466>
 8001fb4:	e0b4      	b.n	8002120 <__aeabi_dsub+0x5d0>
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	1a17      	subs	r7, r2, r0
 8001fba:	42ba      	cmp	r2, r7
 8001fbc:	4192      	sbcs	r2, r2
 8001fbe:	465b      	mov	r3, fp
 8001fc0:	4252      	negs	r2, r2
 8001fc2:	464d      	mov	r5, r9
 8001fc4:	1a9c      	subs	r4, r3, r2
 8001fc6:	e620      	b.n	8001c0a <__aeabi_dsub+0xba>
 8001fc8:	0767      	lsls	r7, r4, #29
 8001fca:	08c0      	lsrs	r0, r0, #3
 8001fcc:	4307      	orrs	r7, r0
 8001fce:	08e5      	lsrs	r5, r4, #3
 8001fd0:	e6ba      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 8001fd2:	001f      	movs	r7, r3
 8001fd4:	4659      	mov	r1, fp
 8001fd6:	3f20      	subs	r7, #32
 8001fd8:	40f9      	lsrs	r1, r7
 8001fda:	000f      	movs	r7, r1
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d005      	beq.n	8001fec <__aeabi_dsub+0x49c>
 8001fe0:	2140      	movs	r1, #64	@ 0x40
 8001fe2:	1acb      	subs	r3, r1, r3
 8001fe4:	4659      	mov	r1, fp
 8001fe6:	4099      	lsls	r1, r3
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	4692      	mov	sl, r2
 8001fec:	4653      	mov	r3, sl
 8001fee:	1e5a      	subs	r2, r3, #1
 8001ff0:	4193      	sbcs	r3, r2
 8001ff2:	431f      	orrs	r7, r3
 8001ff4:	e604      	b.n	8001c00 <__aeabi_dsub+0xb0>
 8001ff6:	1aeb      	subs	r3, r5, r3
 8001ff8:	4d9b      	ldr	r5, [pc, #620]	@ (8002268 <__aeabi_dsub+0x718>)
 8001ffa:	4015      	ands	r5, r2
 8001ffc:	076f      	lsls	r7, r5, #29
 8001ffe:	08ed      	lsrs	r5, r5, #3
 8002000:	032c      	lsls	r4, r5, #12
 8002002:	055d      	lsls	r5, r3, #21
 8002004:	0b24      	lsrs	r4, r4, #12
 8002006:	0d6d      	lsrs	r5, r5, #21
 8002008:	e736      	b.n	8001e78 <__aeabi_dsub+0x328>
 800200a:	4d95      	ldr	r5, [pc, #596]	@ (8002260 <__aeabi_dsub+0x710>)
 800200c:	42ab      	cmp	r3, r5
 800200e:	d100      	bne.n	8002012 <__aeabi_dsub+0x4c2>
 8002010:	e0d6      	b.n	80021c0 <__aeabi_dsub+0x670>
 8002012:	1882      	adds	r2, r0, r2
 8002014:	0021      	movs	r1, r4
 8002016:	4282      	cmp	r2, r0
 8002018:	4180      	sbcs	r0, r0
 800201a:	4459      	add	r1, fp
 800201c:	4240      	negs	r0, r0
 800201e:	1808      	adds	r0, r1, r0
 8002020:	07c7      	lsls	r7, r0, #31
 8002022:	0852      	lsrs	r2, r2, #1
 8002024:	4317      	orrs	r7, r2
 8002026:	0844      	lsrs	r4, r0, #1
 8002028:	0752      	lsls	r2, r2, #29
 800202a:	d400      	bmi.n	800202e <__aeabi_dsub+0x4de>
 800202c:	e185      	b.n	800233a <__aeabi_dsub+0x7ea>
 800202e:	220f      	movs	r2, #15
 8002030:	001d      	movs	r5, r3
 8002032:	403a      	ands	r2, r7
 8002034:	2a04      	cmp	r2, #4
 8002036:	d000      	beq.n	800203a <__aeabi_dsub+0x4ea>
 8002038:	e61a      	b.n	8001c70 <__aeabi_dsub+0x120>
 800203a:	08ff      	lsrs	r7, r7, #3
 800203c:	0764      	lsls	r4, r4, #29
 800203e:	4327      	orrs	r7, r4
 8002040:	0905      	lsrs	r5, r0, #4
 8002042:	e7dd      	b.n	8002000 <__aeabi_dsub+0x4b0>
 8002044:	465b      	mov	r3, fp
 8002046:	08d2      	lsrs	r2, r2, #3
 8002048:	075f      	lsls	r7, r3, #29
 800204a:	4317      	orrs	r7, r2
 800204c:	08dd      	lsrs	r5, r3, #3
 800204e:	e67b      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 8002050:	2700      	movs	r7, #0
 8002052:	2400      	movs	r4, #0
 8002054:	e710      	b.n	8001e78 <__aeabi_dsub+0x328>
 8002056:	2b00      	cmp	r3, #0
 8002058:	d000      	beq.n	800205c <__aeabi_dsub+0x50c>
 800205a:	e0d6      	b.n	800220a <__aeabi_dsub+0x6ba>
 800205c:	2900      	cmp	r1, #0
 800205e:	d000      	beq.n	8002062 <__aeabi_dsub+0x512>
 8002060:	e12f      	b.n	80022c2 <__aeabi_dsub+0x772>
 8002062:	2480      	movs	r4, #128	@ 0x80
 8002064:	2600      	movs	r6, #0
 8002066:	4d7e      	ldr	r5, [pc, #504]	@ (8002260 <__aeabi_dsub+0x710>)
 8002068:	0324      	lsls	r4, r4, #12
 800206a:	e705      	b.n	8001e78 <__aeabi_dsub+0x328>
 800206c:	4666      	mov	r6, ip
 800206e:	465c      	mov	r4, fp
 8002070:	08d0      	lsrs	r0, r2, #3
 8002072:	e717      	b.n	8001ea4 <__aeabi_dsub+0x354>
 8002074:	465b      	mov	r3, fp
 8002076:	1a17      	subs	r7, r2, r0
 8002078:	42ba      	cmp	r2, r7
 800207a:	4192      	sbcs	r2, r2
 800207c:	1b1c      	subs	r4, r3, r4
 800207e:	2601      	movs	r6, #1
 8002080:	4663      	mov	r3, ip
 8002082:	4252      	negs	r2, r2
 8002084:	1aa4      	subs	r4, r4, r2
 8002086:	401e      	ands	r6, r3
 8002088:	e5c4      	b.n	8001c14 <__aeabi_dsub+0xc4>
 800208a:	1883      	adds	r3, r0, r2
 800208c:	4283      	cmp	r3, r0
 800208e:	4180      	sbcs	r0, r0
 8002090:	445c      	add	r4, fp
 8002092:	4240      	negs	r0, r0
 8002094:	1825      	adds	r5, r4, r0
 8002096:	022a      	lsls	r2, r5, #8
 8002098:	d400      	bmi.n	800209c <__aeabi_dsub+0x54c>
 800209a:	e0da      	b.n	8002252 <__aeabi_dsub+0x702>
 800209c:	4a72      	ldr	r2, [pc, #456]	@ (8002268 <__aeabi_dsub+0x718>)
 800209e:	085b      	lsrs	r3, r3, #1
 80020a0:	4015      	ands	r5, r2
 80020a2:	07ea      	lsls	r2, r5, #31
 80020a4:	431a      	orrs	r2, r3
 80020a6:	0869      	lsrs	r1, r5, #1
 80020a8:	075b      	lsls	r3, r3, #29
 80020aa:	d400      	bmi.n	80020ae <__aeabi_dsub+0x55e>
 80020ac:	e14a      	b.n	8002344 <__aeabi_dsub+0x7f4>
 80020ae:	230f      	movs	r3, #15
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	d100      	bne.n	80020b8 <__aeabi_dsub+0x568>
 80020b6:	e0fc      	b.n	80022b2 <__aeabi_dsub+0x762>
 80020b8:	1d17      	adds	r7, r2, #4
 80020ba:	4297      	cmp	r7, r2
 80020bc:	41a4      	sbcs	r4, r4
 80020be:	4264      	negs	r4, r4
 80020c0:	2502      	movs	r5, #2
 80020c2:	1864      	adds	r4, r4, r1
 80020c4:	e6ec      	b.n	8001ea0 <__aeabi_dsub+0x350>
 80020c6:	4647      	mov	r7, r8
 80020c8:	001c      	movs	r4, r3
 80020ca:	431f      	orrs	r7, r3
 80020cc:	d000      	beq.n	80020d0 <__aeabi_dsub+0x580>
 80020ce:	e743      	b.n	8001f58 <__aeabi_dsub+0x408>
 80020d0:	2600      	movs	r6, #0
 80020d2:	2500      	movs	r5, #0
 80020d4:	2400      	movs	r4, #0
 80020d6:	e6cf      	b.n	8001e78 <__aeabi_dsub+0x328>
 80020d8:	08c0      	lsrs	r0, r0, #3
 80020da:	0767      	lsls	r7, r4, #29
 80020dc:	4307      	orrs	r7, r0
 80020de:	08e5      	lsrs	r5, r4, #3
 80020e0:	e632      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 80020e2:	1a87      	subs	r7, r0, r2
 80020e4:	465b      	mov	r3, fp
 80020e6:	42b8      	cmp	r0, r7
 80020e8:	4180      	sbcs	r0, r0
 80020ea:	1ae4      	subs	r4, r4, r3
 80020ec:	4240      	negs	r0, r0
 80020ee:	1a24      	subs	r4, r4, r0
 80020f0:	0223      	lsls	r3, r4, #8
 80020f2:	d428      	bmi.n	8002146 <__aeabi_dsub+0x5f6>
 80020f4:	0763      	lsls	r3, r4, #29
 80020f6:	08ff      	lsrs	r7, r7, #3
 80020f8:	431f      	orrs	r7, r3
 80020fa:	08e5      	lsrs	r5, r4, #3
 80020fc:	2301      	movs	r3, #1
 80020fe:	e77f      	b.n	8002000 <__aeabi_dsub+0x4b0>
 8002100:	2b00      	cmp	r3, #0
 8002102:	d100      	bne.n	8002106 <__aeabi_dsub+0x5b6>
 8002104:	e673      	b.n	8001dee <__aeabi_dsub+0x29e>
 8002106:	464b      	mov	r3, r9
 8002108:	1b5f      	subs	r7, r3, r5
 800210a:	003b      	movs	r3, r7
 800210c:	2d00      	cmp	r5, #0
 800210e:	d100      	bne.n	8002112 <__aeabi_dsub+0x5c2>
 8002110:	e742      	b.n	8001f98 <__aeabi_dsub+0x448>
 8002112:	2f38      	cmp	r7, #56	@ 0x38
 8002114:	dd00      	ble.n	8002118 <__aeabi_dsub+0x5c8>
 8002116:	e0ec      	b.n	80022f2 <__aeabi_dsub+0x7a2>
 8002118:	2380      	movs	r3, #128	@ 0x80
 800211a:	000e      	movs	r6, r1
 800211c:	041b      	lsls	r3, r3, #16
 800211e:	431c      	orrs	r4, r3
 8002120:	2f1f      	cmp	r7, #31
 8002122:	dc25      	bgt.n	8002170 <__aeabi_dsub+0x620>
 8002124:	2520      	movs	r5, #32
 8002126:	0023      	movs	r3, r4
 8002128:	1bed      	subs	r5, r5, r7
 800212a:	0001      	movs	r1, r0
 800212c:	40a8      	lsls	r0, r5
 800212e:	40ab      	lsls	r3, r5
 8002130:	40f9      	lsrs	r1, r7
 8002132:	1e45      	subs	r5, r0, #1
 8002134:	41a8      	sbcs	r0, r5
 8002136:	430b      	orrs	r3, r1
 8002138:	40fc      	lsrs	r4, r7
 800213a:	4318      	orrs	r0, r3
 800213c:	465b      	mov	r3, fp
 800213e:	1b1b      	subs	r3, r3, r4
 8002140:	469b      	mov	fp, r3
 8002142:	e739      	b.n	8001fb8 <__aeabi_dsub+0x468>
 8002144:	4666      	mov	r6, ip
 8002146:	2501      	movs	r5, #1
 8002148:	e562      	b.n	8001c10 <__aeabi_dsub+0xc0>
 800214a:	001f      	movs	r7, r3
 800214c:	4659      	mov	r1, fp
 800214e:	3f20      	subs	r7, #32
 8002150:	40f9      	lsrs	r1, r7
 8002152:	468c      	mov	ip, r1
 8002154:	2b20      	cmp	r3, #32
 8002156:	d005      	beq.n	8002164 <__aeabi_dsub+0x614>
 8002158:	2740      	movs	r7, #64	@ 0x40
 800215a:	4659      	mov	r1, fp
 800215c:	1afb      	subs	r3, r7, r3
 800215e:	4099      	lsls	r1, r3
 8002160:	430a      	orrs	r2, r1
 8002162:	4692      	mov	sl, r2
 8002164:	4657      	mov	r7, sl
 8002166:	1e7b      	subs	r3, r7, #1
 8002168:	419f      	sbcs	r7, r3
 800216a:	4663      	mov	r3, ip
 800216c:	431f      	orrs	r7, r3
 800216e:	e5c1      	b.n	8001cf4 <__aeabi_dsub+0x1a4>
 8002170:	003b      	movs	r3, r7
 8002172:	0025      	movs	r5, r4
 8002174:	3b20      	subs	r3, #32
 8002176:	40dd      	lsrs	r5, r3
 8002178:	2f20      	cmp	r7, #32
 800217a:	d004      	beq.n	8002186 <__aeabi_dsub+0x636>
 800217c:	2340      	movs	r3, #64	@ 0x40
 800217e:	1bdb      	subs	r3, r3, r7
 8002180:	409c      	lsls	r4, r3
 8002182:	4320      	orrs	r0, r4
 8002184:	4680      	mov	r8, r0
 8002186:	4640      	mov	r0, r8
 8002188:	1e43      	subs	r3, r0, #1
 800218a:	4198      	sbcs	r0, r3
 800218c:	4328      	orrs	r0, r5
 800218e:	e713      	b.n	8001fb8 <__aeabi_dsub+0x468>
 8002190:	2900      	cmp	r1, #0
 8002192:	d09d      	beq.n	80020d0 <__aeabi_dsub+0x580>
 8002194:	2601      	movs	r6, #1
 8002196:	4663      	mov	r3, ip
 8002198:	465c      	mov	r4, fp
 800219a:	4690      	mov	r8, r2
 800219c:	401e      	ands	r6, r3
 800219e:	e6db      	b.n	8001f58 <__aeabi_dsub+0x408>
 80021a0:	1a17      	subs	r7, r2, r0
 80021a2:	465b      	mov	r3, fp
 80021a4:	42ba      	cmp	r2, r7
 80021a6:	4192      	sbcs	r2, r2
 80021a8:	1b1c      	subs	r4, r3, r4
 80021aa:	4252      	negs	r2, r2
 80021ac:	1aa4      	subs	r4, r4, r2
 80021ae:	0223      	lsls	r3, r4, #8
 80021b0:	d4c8      	bmi.n	8002144 <__aeabi_dsub+0x5f4>
 80021b2:	0763      	lsls	r3, r4, #29
 80021b4:	08ff      	lsrs	r7, r7, #3
 80021b6:	431f      	orrs	r7, r3
 80021b8:	4666      	mov	r6, ip
 80021ba:	2301      	movs	r3, #1
 80021bc:	08e5      	lsrs	r5, r4, #3
 80021be:	e71f      	b.n	8002000 <__aeabi_dsub+0x4b0>
 80021c0:	001d      	movs	r5, r3
 80021c2:	2400      	movs	r4, #0
 80021c4:	2700      	movs	r7, #0
 80021c6:	e657      	b.n	8001e78 <__aeabi_dsub+0x328>
 80021c8:	465c      	mov	r4, fp
 80021ca:	08d0      	lsrs	r0, r2, #3
 80021cc:	e66a      	b.n	8001ea4 <__aeabi_dsub+0x354>
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d100      	bne.n	80021d4 <__aeabi_dsub+0x684>
 80021d2:	e737      	b.n	8002044 <__aeabi_dsub+0x4f4>
 80021d4:	4653      	mov	r3, sl
 80021d6:	08c0      	lsrs	r0, r0, #3
 80021d8:	0767      	lsls	r7, r4, #29
 80021da:	4307      	orrs	r7, r0
 80021dc:	08e5      	lsrs	r5, r4, #3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d100      	bne.n	80021e4 <__aeabi_dsub+0x694>
 80021e2:	e5b1      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 80021e4:	2380      	movs	r3, #128	@ 0x80
 80021e6:	031b      	lsls	r3, r3, #12
 80021e8:	421d      	tst	r5, r3
 80021ea:	d008      	beq.n	80021fe <__aeabi_dsub+0x6ae>
 80021ec:	4659      	mov	r1, fp
 80021ee:	08c8      	lsrs	r0, r1, #3
 80021f0:	4218      	tst	r0, r3
 80021f2:	d104      	bne.n	80021fe <__aeabi_dsub+0x6ae>
 80021f4:	08d2      	lsrs	r2, r2, #3
 80021f6:	0749      	lsls	r1, r1, #29
 80021f8:	430a      	orrs	r2, r1
 80021fa:	0017      	movs	r7, r2
 80021fc:	0005      	movs	r5, r0
 80021fe:	0f7b      	lsrs	r3, r7, #29
 8002200:	00ff      	lsls	r7, r7, #3
 8002202:	08ff      	lsrs	r7, r7, #3
 8002204:	075b      	lsls	r3, r3, #29
 8002206:	431f      	orrs	r7, r3
 8002208:	e59e      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 800220a:	08c0      	lsrs	r0, r0, #3
 800220c:	0763      	lsls	r3, r4, #29
 800220e:	4318      	orrs	r0, r3
 8002210:	08e5      	lsrs	r5, r4, #3
 8002212:	2900      	cmp	r1, #0
 8002214:	d053      	beq.n	80022be <__aeabi_dsub+0x76e>
 8002216:	2380      	movs	r3, #128	@ 0x80
 8002218:	031b      	lsls	r3, r3, #12
 800221a:	421d      	tst	r5, r3
 800221c:	d00a      	beq.n	8002234 <__aeabi_dsub+0x6e4>
 800221e:	4659      	mov	r1, fp
 8002220:	08cc      	lsrs	r4, r1, #3
 8002222:	421c      	tst	r4, r3
 8002224:	d106      	bne.n	8002234 <__aeabi_dsub+0x6e4>
 8002226:	2601      	movs	r6, #1
 8002228:	4663      	mov	r3, ip
 800222a:	0025      	movs	r5, r4
 800222c:	08d0      	lsrs	r0, r2, #3
 800222e:	0749      	lsls	r1, r1, #29
 8002230:	4308      	orrs	r0, r1
 8002232:	401e      	ands	r6, r3
 8002234:	0f47      	lsrs	r7, r0, #29
 8002236:	00c0      	lsls	r0, r0, #3
 8002238:	08c0      	lsrs	r0, r0, #3
 800223a:	077f      	lsls	r7, r7, #29
 800223c:	4307      	orrs	r7, r0
 800223e:	e583      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 8002240:	1883      	adds	r3, r0, r2
 8002242:	4293      	cmp	r3, r2
 8002244:	4192      	sbcs	r2, r2
 8002246:	445c      	add	r4, fp
 8002248:	4252      	negs	r2, r2
 800224a:	18a5      	adds	r5, r4, r2
 800224c:	022a      	lsls	r2, r5, #8
 800224e:	d500      	bpl.n	8002252 <__aeabi_dsub+0x702>
 8002250:	e724      	b.n	800209c <__aeabi_dsub+0x54c>
 8002252:	076f      	lsls	r7, r5, #29
 8002254:	08db      	lsrs	r3, r3, #3
 8002256:	431f      	orrs	r7, r3
 8002258:	08ed      	lsrs	r5, r5, #3
 800225a:	2301      	movs	r3, #1
 800225c:	e6d0      	b.n	8002000 <__aeabi_dsub+0x4b0>
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	000007ff 	.word	0x000007ff
 8002264:	000007fe 	.word	0x000007fe
 8002268:	ff7fffff 	.word	0xff7fffff
 800226c:	465b      	mov	r3, fp
 800226e:	08d2      	lsrs	r2, r2, #3
 8002270:	075f      	lsls	r7, r3, #29
 8002272:	4666      	mov	r6, ip
 8002274:	4317      	orrs	r7, r2
 8002276:	08dd      	lsrs	r5, r3, #3
 8002278:	e566      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 800227a:	0025      	movs	r5, r4
 800227c:	3b20      	subs	r3, #32
 800227e:	40dd      	lsrs	r5, r3
 8002280:	4663      	mov	r3, ip
 8002282:	2b20      	cmp	r3, #32
 8002284:	d005      	beq.n	8002292 <__aeabi_dsub+0x742>
 8002286:	2340      	movs	r3, #64	@ 0x40
 8002288:	4661      	mov	r1, ip
 800228a:	1a5b      	subs	r3, r3, r1
 800228c:	409c      	lsls	r4, r3
 800228e:	4320      	orrs	r0, r4
 8002290:	4680      	mov	r8, r0
 8002292:	4647      	mov	r7, r8
 8002294:	1e7b      	subs	r3, r7, #1
 8002296:	419f      	sbcs	r7, r3
 8002298:	432f      	orrs	r7, r5
 800229a:	e5a0      	b.n	8001dde <__aeabi_dsub+0x28e>
 800229c:	2120      	movs	r1, #32
 800229e:	2700      	movs	r7, #0
 80022a0:	1a09      	subs	r1, r1, r0
 80022a2:	e4d2      	b.n	8001c4a <__aeabi_dsub+0xfa>
 80022a4:	2f00      	cmp	r7, #0
 80022a6:	d100      	bne.n	80022aa <__aeabi_dsub+0x75a>
 80022a8:	e713      	b.n	80020d2 <__aeabi_dsub+0x582>
 80022aa:	465c      	mov	r4, fp
 80022ac:	0017      	movs	r7, r2
 80022ae:	2500      	movs	r5, #0
 80022b0:	e5f6      	b.n	8001ea0 <__aeabi_dsub+0x350>
 80022b2:	08d7      	lsrs	r7, r2, #3
 80022b4:	0749      	lsls	r1, r1, #29
 80022b6:	2302      	movs	r3, #2
 80022b8:	430f      	orrs	r7, r1
 80022ba:	092d      	lsrs	r5, r5, #4
 80022bc:	e6a0      	b.n	8002000 <__aeabi_dsub+0x4b0>
 80022be:	0007      	movs	r7, r0
 80022c0:	e542      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 80022c2:	465b      	mov	r3, fp
 80022c4:	2601      	movs	r6, #1
 80022c6:	075f      	lsls	r7, r3, #29
 80022c8:	08dd      	lsrs	r5, r3, #3
 80022ca:	4663      	mov	r3, ip
 80022cc:	08d2      	lsrs	r2, r2, #3
 80022ce:	4317      	orrs	r7, r2
 80022d0:	401e      	ands	r6, r3
 80022d2:	e539      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 80022d4:	465b      	mov	r3, fp
 80022d6:	08d2      	lsrs	r2, r2, #3
 80022d8:	075f      	lsls	r7, r3, #29
 80022da:	4317      	orrs	r7, r2
 80022dc:	08dd      	lsrs	r5, r3, #3
 80022de:	e533      	b.n	8001d48 <__aeabi_dsub+0x1f8>
 80022e0:	4a1e      	ldr	r2, [pc, #120]	@ (800235c <__aeabi_dsub+0x80c>)
 80022e2:	08db      	lsrs	r3, r3, #3
 80022e4:	4022      	ands	r2, r4
 80022e6:	0757      	lsls	r7, r2, #29
 80022e8:	0252      	lsls	r2, r2, #9
 80022ea:	2501      	movs	r5, #1
 80022ec:	431f      	orrs	r7, r3
 80022ee:	0b14      	lsrs	r4, r2, #12
 80022f0:	e5c2      	b.n	8001e78 <__aeabi_dsub+0x328>
 80022f2:	000e      	movs	r6, r1
 80022f4:	2001      	movs	r0, #1
 80022f6:	e65f      	b.n	8001fb8 <__aeabi_dsub+0x468>
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00d      	beq.n	8002318 <__aeabi_dsub+0x7c8>
 80022fc:	464b      	mov	r3, r9
 80022fe:	1b5b      	subs	r3, r3, r5
 8002300:	469c      	mov	ip, r3
 8002302:	2d00      	cmp	r5, #0
 8002304:	d100      	bne.n	8002308 <__aeabi_dsub+0x7b8>
 8002306:	e548      	b.n	8001d9a <__aeabi_dsub+0x24a>
 8002308:	2701      	movs	r7, #1
 800230a:	2b38      	cmp	r3, #56	@ 0x38
 800230c:	dd00      	ble.n	8002310 <__aeabi_dsub+0x7c0>
 800230e:	e566      	b.n	8001dde <__aeabi_dsub+0x28e>
 8002310:	2380      	movs	r3, #128	@ 0x80
 8002312:	041b      	lsls	r3, r3, #16
 8002314:	431c      	orrs	r4, r3
 8002316:	e550      	b.n	8001dba <__aeabi_dsub+0x26a>
 8002318:	1c6b      	adds	r3, r5, #1
 800231a:	4d11      	ldr	r5, [pc, #68]	@ (8002360 <__aeabi_dsub+0x810>)
 800231c:	422b      	tst	r3, r5
 800231e:	d000      	beq.n	8002322 <__aeabi_dsub+0x7d2>
 8002320:	e673      	b.n	800200a <__aeabi_dsub+0x4ba>
 8002322:	4659      	mov	r1, fp
 8002324:	0023      	movs	r3, r4
 8002326:	4311      	orrs	r1, r2
 8002328:	468a      	mov	sl, r1
 800232a:	4303      	orrs	r3, r0
 800232c:	e600      	b.n	8001f30 <__aeabi_dsub+0x3e0>
 800232e:	0767      	lsls	r7, r4, #29
 8002330:	08c0      	lsrs	r0, r0, #3
 8002332:	2300      	movs	r3, #0
 8002334:	4307      	orrs	r7, r0
 8002336:	08e5      	lsrs	r5, r4, #3
 8002338:	e662      	b.n	8002000 <__aeabi_dsub+0x4b0>
 800233a:	0764      	lsls	r4, r4, #29
 800233c:	08ff      	lsrs	r7, r7, #3
 800233e:	4327      	orrs	r7, r4
 8002340:	0905      	lsrs	r5, r0, #4
 8002342:	e65d      	b.n	8002000 <__aeabi_dsub+0x4b0>
 8002344:	08d2      	lsrs	r2, r2, #3
 8002346:	0749      	lsls	r1, r1, #29
 8002348:	4311      	orrs	r1, r2
 800234a:	000f      	movs	r7, r1
 800234c:	2302      	movs	r3, #2
 800234e:	092d      	lsrs	r5, r5, #4
 8002350:	e656      	b.n	8002000 <__aeabi_dsub+0x4b0>
 8002352:	0007      	movs	r7, r0
 8002354:	e5a4      	b.n	8001ea0 <__aeabi_dsub+0x350>
 8002356:	0038      	movs	r0, r7
 8002358:	e48f      	b.n	8001c7a <__aeabi_dsub+0x12a>
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	ff7fffff 	.word	0xff7fffff
 8002360:	000007fe 	.word	0x000007fe

08002364 <__aeabi_dcmpun>:
 8002364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002366:	46c6      	mov	lr, r8
 8002368:	031e      	lsls	r6, r3, #12
 800236a:	0b36      	lsrs	r6, r6, #12
 800236c:	46b0      	mov	r8, r6
 800236e:	4e0d      	ldr	r6, [pc, #52]	@ (80023a4 <__aeabi_dcmpun+0x40>)
 8002370:	030c      	lsls	r4, r1, #12
 8002372:	004d      	lsls	r5, r1, #1
 8002374:	005f      	lsls	r7, r3, #1
 8002376:	b500      	push	{lr}
 8002378:	0b24      	lsrs	r4, r4, #12
 800237a:	0d6d      	lsrs	r5, r5, #21
 800237c:	0d7f      	lsrs	r7, r7, #21
 800237e:	42b5      	cmp	r5, r6
 8002380:	d00b      	beq.n	800239a <__aeabi_dcmpun+0x36>
 8002382:	4908      	ldr	r1, [pc, #32]	@ (80023a4 <__aeabi_dcmpun+0x40>)
 8002384:	2000      	movs	r0, #0
 8002386:	428f      	cmp	r7, r1
 8002388:	d104      	bne.n	8002394 <__aeabi_dcmpun+0x30>
 800238a:	4646      	mov	r6, r8
 800238c:	4316      	orrs	r6, r2
 800238e:	0030      	movs	r0, r6
 8002390:	1e43      	subs	r3, r0, #1
 8002392:	4198      	sbcs	r0, r3
 8002394:	bc80      	pop	{r7}
 8002396:	46b8      	mov	r8, r7
 8002398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800239a:	4304      	orrs	r4, r0
 800239c:	2001      	movs	r0, #1
 800239e:	2c00      	cmp	r4, #0
 80023a0:	d1f8      	bne.n	8002394 <__aeabi_dcmpun+0x30>
 80023a2:	e7ee      	b.n	8002382 <__aeabi_dcmpun+0x1e>
 80023a4:	000007ff 	.word	0x000007ff

080023a8 <__aeabi_d2iz>:
 80023a8:	000b      	movs	r3, r1
 80023aa:	0002      	movs	r2, r0
 80023ac:	b570      	push	{r4, r5, r6, lr}
 80023ae:	4d16      	ldr	r5, [pc, #88]	@ (8002408 <__aeabi_d2iz+0x60>)
 80023b0:	030c      	lsls	r4, r1, #12
 80023b2:	b082      	sub	sp, #8
 80023b4:	0049      	lsls	r1, r1, #1
 80023b6:	2000      	movs	r0, #0
 80023b8:	9200      	str	r2, [sp, #0]
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	0b24      	lsrs	r4, r4, #12
 80023be:	0d49      	lsrs	r1, r1, #21
 80023c0:	0fde      	lsrs	r6, r3, #31
 80023c2:	42a9      	cmp	r1, r5
 80023c4:	dd04      	ble.n	80023d0 <__aeabi_d2iz+0x28>
 80023c6:	4811      	ldr	r0, [pc, #68]	@ (800240c <__aeabi_d2iz+0x64>)
 80023c8:	4281      	cmp	r1, r0
 80023ca:	dd03      	ble.n	80023d4 <__aeabi_d2iz+0x2c>
 80023cc:	4b10      	ldr	r3, [pc, #64]	@ (8002410 <__aeabi_d2iz+0x68>)
 80023ce:	18f0      	adds	r0, r6, r3
 80023d0:	b002      	add	sp, #8
 80023d2:	bd70      	pop	{r4, r5, r6, pc}
 80023d4:	2080      	movs	r0, #128	@ 0x80
 80023d6:	0340      	lsls	r0, r0, #13
 80023d8:	4320      	orrs	r0, r4
 80023da:	4c0e      	ldr	r4, [pc, #56]	@ (8002414 <__aeabi_d2iz+0x6c>)
 80023dc:	1a64      	subs	r4, r4, r1
 80023de:	2c1f      	cmp	r4, #31
 80023e0:	dd08      	ble.n	80023f4 <__aeabi_d2iz+0x4c>
 80023e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002418 <__aeabi_d2iz+0x70>)
 80023e4:	1a5b      	subs	r3, r3, r1
 80023e6:	40d8      	lsrs	r0, r3
 80023e8:	0003      	movs	r3, r0
 80023ea:	4258      	negs	r0, r3
 80023ec:	2e00      	cmp	r6, #0
 80023ee:	d1ef      	bne.n	80023d0 <__aeabi_d2iz+0x28>
 80023f0:	0018      	movs	r0, r3
 80023f2:	e7ed      	b.n	80023d0 <__aeabi_d2iz+0x28>
 80023f4:	4b09      	ldr	r3, [pc, #36]	@ (800241c <__aeabi_d2iz+0x74>)
 80023f6:	9a00      	ldr	r2, [sp, #0]
 80023f8:	469c      	mov	ip, r3
 80023fa:	0003      	movs	r3, r0
 80023fc:	4461      	add	r1, ip
 80023fe:	408b      	lsls	r3, r1
 8002400:	40e2      	lsrs	r2, r4
 8002402:	4313      	orrs	r3, r2
 8002404:	e7f1      	b.n	80023ea <__aeabi_d2iz+0x42>
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	000003fe 	.word	0x000003fe
 800240c:	0000041d 	.word	0x0000041d
 8002410:	7fffffff 	.word	0x7fffffff
 8002414:	00000433 	.word	0x00000433
 8002418:	00000413 	.word	0x00000413
 800241c:	fffffbed 	.word	0xfffffbed

08002420 <__aeabi_i2d>:
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	2800      	cmp	r0, #0
 8002424:	d016      	beq.n	8002454 <__aeabi_i2d+0x34>
 8002426:	17c3      	asrs	r3, r0, #31
 8002428:	18c5      	adds	r5, r0, r3
 800242a:	405d      	eors	r5, r3
 800242c:	0fc4      	lsrs	r4, r0, #31
 800242e:	0028      	movs	r0, r5
 8002430:	f000 f8ca 	bl	80025c8 <__clzsi2>
 8002434:	4b10      	ldr	r3, [pc, #64]	@ (8002478 <__aeabi_i2d+0x58>)
 8002436:	1a1b      	subs	r3, r3, r0
 8002438:	055b      	lsls	r3, r3, #21
 800243a:	0d5b      	lsrs	r3, r3, #21
 800243c:	280a      	cmp	r0, #10
 800243e:	dc14      	bgt.n	800246a <__aeabi_i2d+0x4a>
 8002440:	0002      	movs	r2, r0
 8002442:	002e      	movs	r6, r5
 8002444:	3215      	adds	r2, #21
 8002446:	4096      	lsls	r6, r2
 8002448:	220b      	movs	r2, #11
 800244a:	1a12      	subs	r2, r2, r0
 800244c:	40d5      	lsrs	r5, r2
 800244e:	032d      	lsls	r5, r5, #12
 8002450:	0b2d      	lsrs	r5, r5, #12
 8002452:	e003      	b.n	800245c <__aeabi_i2d+0x3c>
 8002454:	2400      	movs	r4, #0
 8002456:	2300      	movs	r3, #0
 8002458:	2500      	movs	r5, #0
 800245a:	2600      	movs	r6, #0
 800245c:	051b      	lsls	r3, r3, #20
 800245e:	432b      	orrs	r3, r5
 8002460:	07e4      	lsls	r4, r4, #31
 8002462:	4323      	orrs	r3, r4
 8002464:	0030      	movs	r0, r6
 8002466:	0019      	movs	r1, r3
 8002468:	bd70      	pop	{r4, r5, r6, pc}
 800246a:	380b      	subs	r0, #11
 800246c:	4085      	lsls	r5, r0
 800246e:	032d      	lsls	r5, r5, #12
 8002470:	2600      	movs	r6, #0
 8002472:	0b2d      	lsrs	r5, r5, #12
 8002474:	e7f2      	b.n	800245c <__aeabi_i2d+0x3c>
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	0000041e 	.word	0x0000041e

0800247c <__aeabi_ui2d>:
 800247c:	b510      	push	{r4, lr}
 800247e:	1e04      	subs	r4, r0, #0
 8002480:	d010      	beq.n	80024a4 <__aeabi_ui2d+0x28>
 8002482:	f000 f8a1 	bl	80025c8 <__clzsi2>
 8002486:	4b0e      	ldr	r3, [pc, #56]	@ (80024c0 <__aeabi_ui2d+0x44>)
 8002488:	1a1b      	subs	r3, r3, r0
 800248a:	055b      	lsls	r3, r3, #21
 800248c:	0d5b      	lsrs	r3, r3, #21
 800248e:	280a      	cmp	r0, #10
 8002490:	dc0f      	bgt.n	80024b2 <__aeabi_ui2d+0x36>
 8002492:	220b      	movs	r2, #11
 8002494:	0021      	movs	r1, r4
 8002496:	1a12      	subs	r2, r2, r0
 8002498:	40d1      	lsrs	r1, r2
 800249a:	3015      	adds	r0, #21
 800249c:	030a      	lsls	r2, r1, #12
 800249e:	4084      	lsls	r4, r0
 80024a0:	0b12      	lsrs	r2, r2, #12
 80024a2:	e001      	b.n	80024a8 <__aeabi_ui2d+0x2c>
 80024a4:	2300      	movs	r3, #0
 80024a6:	2200      	movs	r2, #0
 80024a8:	051b      	lsls	r3, r3, #20
 80024aa:	4313      	orrs	r3, r2
 80024ac:	0020      	movs	r0, r4
 80024ae:	0019      	movs	r1, r3
 80024b0:	bd10      	pop	{r4, pc}
 80024b2:	0022      	movs	r2, r4
 80024b4:	380b      	subs	r0, #11
 80024b6:	4082      	lsls	r2, r0
 80024b8:	0312      	lsls	r2, r2, #12
 80024ba:	2400      	movs	r4, #0
 80024bc:	0b12      	lsrs	r2, r2, #12
 80024be:	e7f3      	b.n	80024a8 <__aeabi_ui2d+0x2c>
 80024c0:	0000041e 	.word	0x0000041e

080024c4 <__aeabi_d2f>:
 80024c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024c6:	004b      	lsls	r3, r1, #1
 80024c8:	030f      	lsls	r7, r1, #12
 80024ca:	0d5b      	lsrs	r3, r3, #21
 80024cc:	4c3a      	ldr	r4, [pc, #232]	@ (80025b8 <__aeabi_d2f+0xf4>)
 80024ce:	0f45      	lsrs	r5, r0, #29
 80024d0:	b083      	sub	sp, #12
 80024d2:	0a7f      	lsrs	r7, r7, #9
 80024d4:	1c5e      	adds	r6, r3, #1
 80024d6:	432f      	orrs	r7, r5
 80024d8:	9000      	str	r0, [sp, #0]
 80024da:	9101      	str	r1, [sp, #4]
 80024dc:	0fca      	lsrs	r2, r1, #31
 80024de:	00c5      	lsls	r5, r0, #3
 80024e0:	4226      	tst	r6, r4
 80024e2:	d00b      	beq.n	80024fc <__aeabi_d2f+0x38>
 80024e4:	4935      	ldr	r1, [pc, #212]	@ (80025bc <__aeabi_d2f+0xf8>)
 80024e6:	185c      	adds	r4, r3, r1
 80024e8:	2cfe      	cmp	r4, #254	@ 0xfe
 80024ea:	dd13      	ble.n	8002514 <__aeabi_d2f+0x50>
 80024ec:	20ff      	movs	r0, #255	@ 0xff
 80024ee:	2300      	movs	r3, #0
 80024f0:	05c0      	lsls	r0, r0, #23
 80024f2:	4318      	orrs	r0, r3
 80024f4:	07d2      	lsls	r2, r2, #31
 80024f6:	4310      	orrs	r0, r2
 80024f8:	b003      	add	sp, #12
 80024fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024fc:	433d      	orrs	r5, r7
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <__aeabi_d2f+0x42>
 8002502:	2000      	movs	r0, #0
 8002504:	e7f4      	b.n	80024f0 <__aeabi_d2f+0x2c>
 8002506:	2d00      	cmp	r5, #0
 8002508:	d0f0      	beq.n	80024ec <__aeabi_d2f+0x28>
 800250a:	2380      	movs	r3, #128	@ 0x80
 800250c:	03db      	lsls	r3, r3, #15
 800250e:	20ff      	movs	r0, #255	@ 0xff
 8002510:	433b      	orrs	r3, r7
 8002512:	e7ed      	b.n	80024f0 <__aeabi_d2f+0x2c>
 8002514:	2c00      	cmp	r4, #0
 8002516:	dd0c      	ble.n	8002532 <__aeabi_d2f+0x6e>
 8002518:	9b00      	ldr	r3, [sp, #0]
 800251a:	00ff      	lsls	r7, r7, #3
 800251c:	019b      	lsls	r3, r3, #6
 800251e:	1e58      	subs	r0, r3, #1
 8002520:	4183      	sbcs	r3, r0
 8002522:	0f69      	lsrs	r1, r5, #29
 8002524:	433b      	orrs	r3, r7
 8002526:	430b      	orrs	r3, r1
 8002528:	0759      	lsls	r1, r3, #29
 800252a:	d127      	bne.n	800257c <__aeabi_d2f+0xb8>
 800252c:	08db      	lsrs	r3, r3, #3
 800252e:	b2e0      	uxtb	r0, r4
 8002530:	e7de      	b.n	80024f0 <__aeabi_d2f+0x2c>
 8002532:	0021      	movs	r1, r4
 8002534:	3117      	adds	r1, #23
 8002536:	db31      	blt.n	800259c <__aeabi_d2f+0xd8>
 8002538:	2180      	movs	r1, #128	@ 0x80
 800253a:	201e      	movs	r0, #30
 800253c:	0409      	lsls	r1, r1, #16
 800253e:	4339      	orrs	r1, r7
 8002540:	1b00      	subs	r0, r0, r4
 8002542:	281f      	cmp	r0, #31
 8002544:	dd2d      	ble.n	80025a2 <__aeabi_d2f+0xde>
 8002546:	2602      	movs	r6, #2
 8002548:	4276      	negs	r6, r6
 800254a:	1b34      	subs	r4, r6, r4
 800254c:	000e      	movs	r6, r1
 800254e:	40e6      	lsrs	r6, r4
 8002550:	0034      	movs	r4, r6
 8002552:	2820      	cmp	r0, #32
 8002554:	d004      	beq.n	8002560 <__aeabi_d2f+0x9c>
 8002556:	481a      	ldr	r0, [pc, #104]	@ (80025c0 <__aeabi_d2f+0xfc>)
 8002558:	4684      	mov	ip, r0
 800255a:	4463      	add	r3, ip
 800255c:	4099      	lsls	r1, r3
 800255e:	430d      	orrs	r5, r1
 8002560:	002b      	movs	r3, r5
 8002562:	1e59      	subs	r1, r3, #1
 8002564:	418b      	sbcs	r3, r1
 8002566:	4323      	orrs	r3, r4
 8002568:	0759      	lsls	r1, r3, #29
 800256a:	d003      	beq.n	8002574 <__aeabi_d2f+0xb0>
 800256c:	210f      	movs	r1, #15
 800256e:	4019      	ands	r1, r3
 8002570:	2904      	cmp	r1, #4
 8002572:	d10b      	bne.n	800258c <__aeabi_d2f+0xc8>
 8002574:	019b      	lsls	r3, r3, #6
 8002576:	2000      	movs	r0, #0
 8002578:	0a5b      	lsrs	r3, r3, #9
 800257a:	e7b9      	b.n	80024f0 <__aeabi_d2f+0x2c>
 800257c:	210f      	movs	r1, #15
 800257e:	4019      	ands	r1, r3
 8002580:	2904      	cmp	r1, #4
 8002582:	d104      	bne.n	800258e <__aeabi_d2f+0xca>
 8002584:	019b      	lsls	r3, r3, #6
 8002586:	0a5b      	lsrs	r3, r3, #9
 8002588:	b2e0      	uxtb	r0, r4
 800258a:	e7b1      	b.n	80024f0 <__aeabi_d2f+0x2c>
 800258c:	2400      	movs	r4, #0
 800258e:	3304      	adds	r3, #4
 8002590:	0159      	lsls	r1, r3, #5
 8002592:	d5f7      	bpl.n	8002584 <__aeabi_d2f+0xc0>
 8002594:	3401      	adds	r4, #1
 8002596:	2300      	movs	r3, #0
 8002598:	b2e0      	uxtb	r0, r4
 800259a:	e7a9      	b.n	80024f0 <__aeabi_d2f+0x2c>
 800259c:	2000      	movs	r0, #0
 800259e:	2300      	movs	r3, #0
 80025a0:	e7a6      	b.n	80024f0 <__aeabi_d2f+0x2c>
 80025a2:	4c08      	ldr	r4, [pc, #32]	@ (80025c4 <__aeabi_d2f+0x100>)
 80025a4:	191c      	adds	r4, r3, r4
 80025a6:	002b      	movs	r3, r5
 80025a8:	40a5      	lsls	r5, r4
 80025aa:	40c3      	lsrs	r3, r0
 80025ac:	40a1      	lsls	r1, r4
 80025ae:	1e68      	subs	r0, r5, #1
 80025b0:	4185      	sbcs	r5, r0
 80025b2:	4329      	orrs	r1, r5
 80025b4:	430b      	orrs	r3, r1
 80025b6:	e7d7      	b.n	8002568 <__aeabi_d2f+0xa4>
 80025b8:	000007fe 	.word	0x000007fe
 80025bc:	fffffc80 	.word	0xfffffc80
 80025c0:	fffffca2 	.word	0xfffffca2
 80025c4:	fffffc82 	.word	0xfffffc82

080025c8 <__clzsi2>:
 80025c8:	211c      	movs	r1, #28
 80025ca:	2301      	movs	r3, #1
 80025cc:	041b      	lsls	r3, r3, #16
 80025ce:	4298      	cmp	r0, r3
 80025d0:	d301      	bcc.n	80025d6 <__clzsi2+0xe>
 80025d2:	0c00      	lsrs	r0, r0, #16
 80025d4:	3910      	subs	r1, #16
 80025d6:	0a1b      	lsrs	r3, r3, #8
 80025d8:	4298      	cmp	r0, r3
 80025da:	d301      	bcc.n	80025e0 <__clzsi2+0x18>
 80025dc:	0a00      	lsrs	r0, r0, #8
 80025de:	3908      	subs	r1, #8
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	4298      	cmp	r0, r3
 80025e4:	d301      	bcc.n	80025ea <__clzsi2+0x22>
 80025e6:	0900      	lsrs	r0, r0, #4
 80025e8:	3904      	subs	r1, #4
 80025ea:	a202      	add	r2, pc, #8	@ (adr r2, 80025f4 <__clzsi2+0x2c>)
 80025ec:	5c10      	ldrb	r0, [r2, r0]
 80025ee:	1840      	adds	r0, r0, r1
 80025f0:	4770      	bx	lr
 80025f2:	46c0      	nop			@ (mov r8, r8)
 80025f4:	02020304 	.word	0x02020304
 80025f8:	01010101 	.word	0x01010101
	...

08002604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b0a0      	sub	sp, #128	@ 0x80
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800260a:	f000 fbdd 	bl	8002dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800260e:	f000 f83d 	bl	800268c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002612:	f000 f90d 	bl	8002830 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002616:	f000 f89b 	bl	8002750 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800261a:	f000 f8d9 	bl	80027d0 <MX_USART2_UART_Init>

  // Start UART reception with interrupts


  char buffer[128];
  sendString("Enter a word:");
 800261e:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <main+0x6c>)
 8002620:	0018      	movs	r0, r3
 8002622:	f000 f997 	bl	8002954 <sendString>
  HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8002626:	4913      	ldr	r1, [pc, #76]	@ (8002674 <main+0x70>)
 8002628:	4b13      	ldr	r3, [pc, #76]	@ (8002678 <main+0x74>)
 800262a:	2201      	movs	r2, #1
 800262c:	0018      	movs	r0, r3
 800262e:	f001 fe76 	bl	800431e <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (RxCompleteFlag)
 8002632:	4b12      	ldr	r3, [pc, #72]	@ (800267c <main+0x78>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0fb      	beq.n	8002632 <main+0x2e>
	      {
	        // Send back the received data
	        HAL_UART_Transmit(&huart2, RxData, RxIndex, HAL_MAX_DELAY);
 800263a:	4b11      	ldr	r3, [pc, #68]	@ (8002680 <main+0x7c>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	001a      	movs	r2, r3
 8002640:	2301      	movs	r3, #1
 8002642:	425b      	negs	r3, r3
 8002644:	490f      	ldr	r1, [pc, #60]	@ (8002684 <main+0x80>)
 8002646:	480c      	ldr	r0, [pc, #48]	@ (8002678 <main+0x74>)
 8002648:	f001 fdca 	bl	80041e0 <HAL_UART_Transmit>
		  sendString("data recieved");
 800264c:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <main+0x84>)
 800264e:	0018      	movs	r0, r3
 8002650:	f000 f980 	bl	8002954 <sendString>
	        // Reset for next reception
	        RxIndex = 0;
 8002654:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <main+0x7c>)
 8002656:	2200      	movs	r2, #0
 8002658:	701a      	strb	r2, [r3, #0]
	        RxCompleteFlag = 0;
 800265a:	4b08      	ldr	r3, [pc, #32]	@ (800267c <main+0x78>)
 800265c:	2200      	movs	r2, #0
 800265e:	701a      	strb	r2, [r3, #0]

	        // Restart interrupt reception
	        HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 8002660:	4904      	ldr	r1, [pc, #16]	@ (8002674 <main+0x70>)
 8002662:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <main+0x74>)
 8002664:	2201      	movs	r2, #1
 8002666:	0018      	movs	r0, r3
 8002668:	f001 fe59 	bl	800431e <HAL_UART_Receive_IT>
	  if (RxCompleteFlag)
 800266c:	e7e1      	b.n	8002632 <main+0x2e>
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	08009e78 	.word	0x08009e78
 8002674:	200002cc 	.word	0x200002cc
 8002678:	20000244 	.word	0x20000244
 800267c:	20000acd 	.word	0x20000acd
 8002680:	20000acc 	.word	0x20000acc
 8002684:	200006cc 	.word	0x200006cc
 8002688:	08009e88 	.word	0x08009e88

0800268c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800268c:	b590      	push	{r4, r7, lr}
 800268e:	b095      	sub	sp, #84	@ 0x54
 8002690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002692:	2420      	movs	r4, #32
 8002694:	193b      	adds	r3, r7, r4
 8002696:	0018      	movs	r0, r3
 8002698:	2330      	movs	r3, #48	@ 0x30
 800269a:	001a      	movs	r2, r3
 800269c:	2100      	movs	r1, #0
 800269e:	f003 ffd7 	bl	8006650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026a2:	2310      	movs	r3, #16
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	0018      	movs	r0, r3
 80026a8:	2310      	movs	r3, #16
 80026aa:	001a      	movs	r2, r3
 80026ac:	2100      	movs	r1, #0
 80026ae:	f003 ffcf 	bl	8006650 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b2:	003b      	movs	r3, r7
 80026b4:	0018      	movs	r0, r3
 80026b6:	2310      	movs	r3, #16
 80026b8:	001a      	movs	r2, r3
 80026ba:	2100      	movs	r1, #0
 80026bc:	f003 ffc8 	bl	8006650 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026c0:	0021      	movs	r1, r4
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	2202      	movs	r2, #2
 80026c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	2201      	movs	r2, #1
 80026cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	2210      	movs	r2, #16
 80026d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	2202      	movs	r2, #2
 80026d8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026da:	187b      	adds	r3, r7, r1
 80026dc:	2200      	movs	r2, #0
 80026de:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80026e0:	187b      	adds	r3, r7, r1
 80026e2:	22a0      	movs	r2, #160	@ 0xa0
 80026e4:	0392      	lsls	r2, r2, #14
 80026e6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80026e8:	187b      	adds	r3, r7, r1
 80026ea:	2200      	movs	r2, #0
 80026ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ee:	187b      	adds	r3, r7, r1
 80026f0:	0018      	movs	r0, r3
 80026f2:	f000 fff5 	bl	80036e0 <HAL_RCC_OscConfig>
 80026f6:	1e03      	subs	r3, r0, #0
 80026f8:	d001      	beq.n	80026fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 80026fa:	f000 f985 	bl	8002a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026fe:	2110      	movs	r1, #16
 8002700:	187b      	adds	r3, r7, r1
 8002702:	2207      	movs	r2, #7
 8002704:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002706:	187b      	adds	r3, r7, r1
 8002708:	2202      	movs	r2, #2
 800270a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800270c:	187b      	adds	r3, r7, r1
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002712:	187b      	adds	r3, r7, r1
 8002714:	2200      	movs	r2, #0
 8002716:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002718:	187b      	adds	r3, r7, r1
 800271a:	2101      	movs	r1, #1
 800271c:	0018      	movs	r0, r3
 800271e:	f001 faf9 	bl	8003d14 <HAL_RCC_ClockConfig>
 8002722:	1e03      	subs	r3, r0, #0
 8002724:	d001      	beq.n	800272a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002726:	f000 f96f 	bl	8002a08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800272a:	003b      	movs	r3, r7
 800272c:	2220      	movs	r2, #32
 800272e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002730:	003b      	movs	r3, r7
 8002732:	2200      	movs	r2, #0
 8002734:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002736:	003b      	movs	r3, r7
 8002738:	0018      	movs	r0, r3
 800273a:	f001 fc2f 	bl	8003f9c <HAL_RCCEx_PeriphCLKConfig>
 800273e:	1e03      	subs	r3, r0, #0
 8002740:	d001      	beq.n	8002746 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8002742:	f000 f961 	bl	8002a08 <Error_Handler>
  }
}
 8002746:	46c0      	nop			@ (mov r8, r8)
 8002748:	46bd      	mov	sp, r7
 800274a:	b015      	add	sp, #84	@ 0x54
 800274c:	bd90      	pop	{r4, r7, pc}
	...

08002750 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002754:	4b1b      	ldr	r3, [pc, #108]	@ (80027c4 <MX_I2C1_Init+0x74>)
 8002756:	4a1c      	ldr	r2, [pc, #112]	@ (80027c8 <MX_I2C1_Init+0x78>)
 8002758:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800275a:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <MX_I2C1_Init+0x74>)
 800275c:	4a1b      	ldr	r2, [pc, #108]	@ (80027cc <MX_I2C1_Init+0x7c>)
 800275e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002760:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <MX_I2C1_Init+0x74>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002766:	4b17      	ldr	r3, [pc, #92]	@ (80027c4 <MX_I2C1_Init+0x74>)
 8002768:	2201      	movs	r2, #1
 800276a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800276c:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <MX_I2C1_Init+0x74>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002772:	4b14      	ldr	r3, [pc, #80]	@ (80027c4 <MX_I2C1_Init+0x74>)
 8002774:	2200      	movs	r2, #0
 8002776:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002778:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <MX_I2C1_Init+0x74>)
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800277e:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <MX_I2C1_Init+0x74>)
 8002780:	2200      	movs	r2, #0
 8002782:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002784:	4b0f      	ldr	r3, [pc, #60]	@ (80027c4 <MX_I2C1_Init+0x74>)
 8002786:	2200      	movs	r2, #0
 8002788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800278a:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <MX_I2C1_Init+0x74>)
 800278c:	0018      	movs	r0, r3
 800278e:	f000 fe69 	bl	8003464 <HAL_I2C_Init>
 8002792:	1e03      	subs	r3, r0, #0
 8002794:	d001      	beq.n	800279a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002796:	f000 f937 	bl	8002a08 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800279a:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <MX_I2C1_Init+0x74>)
 800279c:	2100      	movs	r1, #0
 800279e:	0018      	movs	r0, r3
 80027a0:	f000 ff06 	bl	80035b0 <HAL_I2CEx_ConfigAnalogFilter>
 80027a4:	1e03      	subs	r3, r0, #0
 80027a6:	d001      	beq.n	80027ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80027a8:	f000 f92e 	bl	8002a08 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80027ac:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <MX_I2C1_Init+0x74>)
 80027ae:	2100      	movs	r1, #0
 80027b0:	0018      	movs	r0, r3
 80027b2:	f000 ff49 	bl	8003648 <HAL_I2CEx_ConfigDigitalFilter>
 80027b6:	1e03      	subs	r3, r0, #0
 80027b8:	d001      	beq.n	80027be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80027ba:	f000 f925 	bl	8002a08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027be:	46c0      	nop			@ (mov r8, r8)
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	200001f0 	.word	0x200001f0
 80027c8:	40005400 	.word	0x40005400
 80027cc:	00201d2b 	.word	0x00201d2b

080027d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027d4:	4b14      	ldr	r3, [pc, #80]	@ (8002828 <MX_USART2_UART_Init+0x58>)
 80027d6:	4a15      	ldr	r2, [pc, #84]	@ (800282c <MX_USART2_UART_Init+0x5c>)
 80027d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80027da:	4b13      	ldr	r3, [pc, #76]	@ (8002828 <MX_USART2_UART_Init+0x58>)
 80027dc:	2296      	movs	r2, #150	@ 0x96
 80027de:	0212      	lsls	r2, r2, #8
 80027e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027e2:	4b11      	ldr	r3, [pc, #68]	@ (8002828 <MX_USART2_UART_Init+0x58>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002828 <MX_USART2_UART_Init+0x58>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002828 <MX_USART2_UART_Init+0x58>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80027f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002828 <MX_USART2_UART_Init+0x58>)
 80027f6:	220c      	movs	r2, #12
 80027f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002828 <MX_USART2_UART_Init+0x58>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002800:	4b09      	ldr	r3, [pc, #36]	@ (8002828 <MX_USART2_UART_Init+0x58>)
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002806:	4b08      	ldr	r3, [pc, #32]	@ (8002828 <MX_USART2_UART_Init+0x58>)
 8002808:	2200      	movs	r2, #0
 800280a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800280c:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <MX_USART2_UART_Init+0x58>)
 800280e:	2200      	movs	r2, #0
 8002810:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002812:	4b05      	ldr	r3, [pc, #20]	@ (8002828 <MX_USART2_UART_Init+0x58>)
 8002814:	0018      	movs	r0, r3
 8002816:	f001 fc8f 	bl	8004138 <HAL_UART_Init>
 800281a:	1e03      	subs	r3, r0, #0
 800281c:	d001      	beq.n	8002822 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800281e:	f000 f8f3 	bl	8002a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002822:	46c0      	nop			@ (mov r8, r8)
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000244 	.word	0x20000244
 800282c:	40004400 	.word	0x40004400

08002830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b08b      	sub	sp, #44	@ 0x2c
 8002834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002836:	2414      	movs	r4, #20
 8002838:	193b      	adds	r3, r7, r4
 800283a:	0018      	movs	r0, r3
 800283c:	2314      	movs	r3, #20
 800283e:	001a      	movs	r2, r3
 8002840:	2100      	movs	r1, #0
 8002842:	f003 ff05 	bl	8006650 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002846:	4b40      	ldr	r3, [pc, #256]	@ (8002948 <MX_GPIO_Init+0x118>)
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	4b3f      	ldr	r3, [pc, #252]	@ (8002948 <MX_GPIO_Init+0x118>)
 800284c:	2180      	movs	r1, #128	@ 0x80
 800284e:	0309      	lsls	r1, r1, #12
 8002850:	430a      	orrs	r2, r1
 8002852:	615a      	str	r2, [r3, #20]
 8002854:	4b3c      	ldr	r3, [pc, #240]	@ (8002948 <MX_GPIO_Init+0x118>)
 8002856:	695a      	ldr	r2, [r3, #20]
 8002858:	2380      	movs	r3, #128	@ 0x80
 800285a:	031b      	lsls	r3, r3, #12
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002862:	4b39      	ldr	r3, [pc, #228]	@ (8002948 <MX_GPIO_Init+0x118>)
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	4b38      	ldr	r3, [pc, #224]	@ (8002948 <MX_GPIO_Init+0x118>)
 8002868:	2180      	movs	r1, #128	@ 0x80
 800286a:	03c9      	lsls	r1, r1, #15
 800286c:	430a      	orrs	r2, r1
 800286e:	615a      	str	r2, [r3, #20]
 8002870:	4b35      	ldr	r3, [pc, #212]	@ (8002948 <MX_GPIO_Init+0x118>)
 8002872:	695a      	ldr	r2, [r3, #20]
 8002874:	2380      	movs	r3, #128	@ 0x80
 8002876:	03db      	lsls	r3, r3, #15
 8002878:	4013      	ands	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800287e:	4b32      	ldr	r3, [pc, #200]	@ (8002948 <MX_GPIO_Init+0x118>)
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	4b31      	ldr	r3, [pc, #196]	@ (8002948 <MX_GPIO_Init+0x118>)
 8002884:	2180      	movs	r1, #128	@ 0x80
 8002886:	0289      	lsls	r1, r1, #10
 8002888:	430a      	orrs	r2, r1
 800288a:	615a      	str	r2, [r3, #20]
 800288c:	4b2e      	ldr	r3, [pc, #184]	@ (8002948 <MX_GPIO_Init+0x118>)
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	2380      	movs	r3, #128	@ 0x80
 8002892:	029b      	lsls	r3, r3, #10
 8002894:	4013      	ands	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800289a:	4b2b      	ldr	r3, [pc, #172]	@ (8002948 <MX_GPIO_Init+0x118>)
 800289c:	695a      	ldr	r2, [r3, #20]
 800289e:	4b2a      	ldr	r3, [pc, #168]	@ (8002948 <MX_GPIO_Init+0x118>)
 80028a0:	2180      	movs	r1, #128	@ 0x80
 80028a2:	02c9      	lsls	r1, r1, #11
 80028a4:	430a      	orrs	r2, r1
 80028a6:	615a      	str	r2, [r3, #20]
 80028a8:	4b27      	ldr	r3, [pc, #156]	@ (8002948 <MX_GPIO_Init+0x118>)
 80028aa:	695a      	ldr	r2, [r3, #20]
 80028ac:	2380      	movs	r3, #128	@ 0x80
 80028ae:	02db      	lsls	r3, r3, #11
 80028b0:	4013      	ands	r3, r2
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80028b6:	2390      	movs	r3, #144	@ 0x90
 80028b8:	05db      	lsls	r3, r3, #23
 80028ba:	2200      	movs	r2, #0
 80028bc:	2120      	movs	r1, #32
 80028be:	0018      	movs	r0, r3
 80028c0:	f000 fdb2 	bl	8003428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80028c4:	4b21      	ldr	r3, [pc, #132]	@ (800294c <MX_GPIO_Init+0x11c>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	2120      	movs	r1, #32
 80028ca:	0018      	movs	r0, r3
 80028cc:	f000 fdac 	bl	8003428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80028d0:	193b      	adds	r3, r7, r4
 80028d2:	2280      	movs	r2, #128	@ 0x80
 80028d4:	0192      	lsls	r2, r2, #6
 80028d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028d8:	193b      	adds	r3, r7, r4
 80028da:	2284      	movs	r2, #132	@ 0x84
 80028dc:	0392      	lsls	r2, r2, #14
 80028de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	193b      	adds	r3, r7, r4
 80028e2:	2200      	movs	r2, #0
 80028e4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028e6:	193b      	adds	r3, r7, r4
 80028e8:	4a19      	ldr	r2, [pc, #100]	@ (8002950 <MX_GPIO_Init+0x120>)
 80028ea:	0019      	movs	r1, r3
 80028ec:	0010      	movs	r0, r2
 80028ee:	f000 fc2b 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80028f2:	193b      	adds	r3, r7, r4
 80028f4:	2220      	movs	r2, #32
 80028f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f8:	193b      	adds	r3, r7, r4
 80028fa:	2201      	movs	r2, #1
 80028fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	193b      	adds	r3, r7, r4
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	193b      	adds	r3, r7, r4
 8002906:	2200      	movs	r2, #0
 8002908:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800290a:	193a      	adds	r2, r7, r4
 800290c:	2390      	movs	r3, #144	@ 0x90
 800290e:	05db      	lsls	r3, r3, #23
 8002910:	0011      	movs	r1, r2
 8002912:	0018      	movs	r0, r3
 8002914:	f000 fc18 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002918:	0021      	movs	r1, r4
 800291a:	187b      	adds	r3, r7, r1
 800291c:	2220      	movs	r2, #32
 800291e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002920:	187b      	adds	r3, r7, r1
 8002922:	2201      	movs	r2, #1
 8002924:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002926:	187b      	adds	r3, r7, r1
 8002928:	2200      	movs	r2, #0
 800292a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292c:	187b      	adds	r3, r7, r1
 800292e:	2200      	movs	r2, #0
 8002930:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002932:	187b      	adds	r3, r7, r1
 8002934:	4a05      	ldr	r2, [pc, #20]	@ (800294c <MX_GPIO_Init+0x11c>)
 8002936:	0019      	movs	r1, r3
 8002938:	0010      	movs	r0, r2
 800293a:	f000 fc05 	bl	8003148 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	46bd      	mov	sp, r7
 8002942:	b00b      	add	sp, #44	@ 0x2c
 8002944:	bd90      	pop	{r4, r7, pc}
 8002946:	46c0      	nop			@ (mov r8, r8)
 8002948:	40021000 	.word	0x40021000
 800294c:	48000400 	.word	0x48000400
 8002950:	48000800 	.word	0x48000800

08002954 <sendString>:

/* USER CODE BEGIN 4 */
static void sendString(char *str)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	0018      	movs	r0, r3
 8002960:	f7fd fbd2 	bl	8000108 <strlen>
 8002964:	0003      	movs	r3, r0
 8002966:	b29a      	uxth	r2, r3
 8002968:	2301      	movs	r3, #1
 800296a:	425b      	negs	r3, r3
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4803      	ldr	r0, [pc, #12]	@ (800297c <sendString+0x28>)
 8002970:	f001 fc36 	bl	80041e0 <HAL_UART_Transmit>
}
 8002974:	46c0      	nop			@ (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	b002      	add	sp, #8
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20000244 	.word	0x20000244

08002980 <HAL_UART_RxCpltCallback>:
//    sendString("message recieved");
//    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);    // Blue LED
//}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a17      	ldr	r2, [pc, #92]	@ (80029ec <HAL_UART_RxCpltCallback+0x6c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d128      	bne.n	80029e4 <HAL_UART_RxCpltCallback+0x64>
    {
        // Check if we haven't filled the buffer
        if (RxIndex < RX_BUFFER_SIZE - 1)
        {
            // Store the received byte
            RxData[RxIndex++] = RxBuffer[0];
 8002992:	4b17      	ldr	r3, [pc, #92]	@ (80029f0 <HAL_UART_RxCpltCallback+0x70>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	b2d1      	uxtb	r1, r2
 800299a:	4a15      	ldr	r2, [pc, #84]	@ (80029f0 <HAL_UART_RxCpltCallback+0x70>)
 800299c:	7011      	strb	r1, [r2, #0]
 800299e:	001a      	movs	r2, r3
 80029a0:	4b14      	ldr	r3, [pc, #80]	@ (80029f4 <HAL_UART_RxCpltCallback+0x74>)
 80029a2:	7819      	ldrb	r1, [r3, #0]
 80029a4:	4b14      	ldr	r3, [pc, #80]	@ (80029f8 <HAL_UART_RxCpltCallback+0x78>)
 80029a6:	5499      	strb	r1, [r3, r2]

            // Check for end of message (newline or carriage return)
            if (RxBuffer[0] == '\r' || RxBuffer[0] == '\n')
 80029a8:	4b12      	ldr	r3, [pc, #72]	@ (80029f4 <HAL_UART_RxCpltCallback+0x74>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b0d      	cmp	r3, #13
 80029ae:	d003      	beq.n	80029b8 <HAL_UART_RxCpltCallback+0x38>
 80029b0:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <HAL_UART_RxCpltCallback+0x74>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b0a      	cmp	r3, #10
 80029b6:	d10f      	bne.n	80029d8 <HAL_UART_RxCpltCallback+0x58>
            {
                RxData[RxIndex] = '\0';  // Null-terminate the string
 80029b8:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <HAL_UART_RxCpltCallback+0x70>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	001a      	movs	r2, r3
 80029be:	4b0e      	ldr	r3, [pc, #56]	@ (80029f8 <HAL_UART_RxCpltCallback+0x78>)
 80029c0:	2100      	movs	r1, #0
 80029c2:	5499      	strb	r1, [r3, r2]
                RxCompleteFlag = 1;
 80029c4:	4b0d      	ldr	r3, [pc, #52]	@ (80029fc <HAL_UART_RxCpltCallback+0x7c>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	701a      	strb	r2, [r3, #0]

                // Turn on Blue LED
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80029ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002a00 <HAL_UART_RxCpltCallback+0x80>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	2120      	movs	r1, #32
 80029d0:	0018      	movs	r0, r3
 80029d2:	f000 fd29 	bl	8003428 <HAL_GPIO_WritePin>
            // Buffer full, reset
            RxIndex = 0;
            HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
        }
    }
}
 80029d6:	e005      	b.n	80029e4 <HAL_UART_RxCpltCallback+0x64>
                HAL_UART_Receive_IT(&huart2, RxBuffer, 1);
 80029d8:	4906      	ldr	r1, [pc, #24]	@ (80029f4 <HAL_UART_RxCpltCallback+0x74>)
 80029da:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <HAL_UART_RxCpltCallback+0x84>)
 80029dc:	2201      	movs	r2, #1
 80029de:	0018      	movs	r0, r3
 80029e0:	f001 fc9d 	bl	800431e <HAL_UART_Receive_IT>
}
 80029e4:	46c0      	nop			@ (mov r8, r8)
 80029e6:	46bd      	mov	sp, r7
 80029e8:	b002      	add	sp, #8
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40004400 	.word	0x40004400
 80029f0:	20000acc 	.word	0x20000acc
 80029f4:	200002cc 	.word	0x200002cc
 80029f8:	200006cc 	.word	0x200006cc
 80029fc:	20000acd 	.word	0x20000acd
 8002a00:	48000400 	.word	0x48000400
 8002a04:	20000244 	.word	0x20000244

08002a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a0c:	b672      	cpsid	i
}
 8002a0e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a10:	46c0      	nop			@ (mov r8, r8)
 8002a12:	e7fd      	b.n	8002a10 <Error_Handler+0x8>

08002a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a58 <HAL_MspInit+0x44>)
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <HAL_MspInit+0x44>)
 8002a20:	2101      	movs	r1, #1
 8002a22:	430a      	orrs	r2, r1
 8002a24:	619a      	str	r2, [r3, #24]
 8002a26:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <HAL_MspInit+0x44>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	607b      	str	r3, [r7, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <HAL_MspInit+0x44>)
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	4b08      	ldr	r3, [pc, #32]	@ (8002a58 <HAL_MspInit+0x44>)
 8002a38:	2180      	movs	r1, #128	@ 0x80
 8002a3a:	0549      	lsls	r1, r1, #21
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	61da      	str	r2, [r3, #28]
 8002a40:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <HAL_MspInit+0x44>)
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	2380      	movs	r3, #128	@ 0x80
 8002a46:	055b      	lsls	r3, r3, #21
 8002a48:	4013      	ands	r3, r2
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a4e:	46c0      	nop			@ (mov r8, r8)
 8002a50:	46bd      	mov	sp, r7
 8002a52:	b002      	add	sp, #8
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	40021000 	.word	0x40021000

08002a5c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b08b      	sub	sp, #44	@ 0x2c
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	2414      	movs	r4, #20
 8002a66:	193b      	adds	r3, r7, r4
 8002a68:	0018      	movs	r0, r3
 8002a6a:	2314      	movs	r3, #20
 8002a6c:	001a      	movs	r2, r3
 8002a6e:	2100      	movs	r1, #0
 8002a70:	f003 fdee 	bl	8006650 <memset>
  if(hi2c->Instance==I2C1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a1c      	ldr	r2, [pc, #112]	@ (8002aec <HAL_I2C_MspInit+0x90>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d132      	bne.n	8002ae4 <HAL_I2C_MspInit+0x88>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002af0 <HAL_I2C_MspInit+0x94>)
 8002a80:	695a      	ldr	r2, [r3, #20]
 8002a82:	4b1b      	ldr	r3, [pc, #108]	@ (8002af0 <HAL_I2C_MspInit+0x94>)
 8002a84:	2180      	movs	r1, #128	@ 0x80
 8002a86:	02c9      	lsls	r1, r1, #11
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	615a      	str	r2, [r3, #20]
 8002a8c:	4b18      	ldr	r3, [pc, #96]	@ (8002af0 <HAL_I2C_MspInit+0x94>)
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	2380      	movs	r3, #128	@ 0x80
 8002a92:	02db      	lsls	r3, r3, #11
 8002a94:	4013      	ands	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002a9a:	193b      	adds	r3, r7, r4
 8002a9c:	2290      	movs	r2, #144	@ 0x90
 8002a9e:	0092      	lsls	r2, r2, #2
 8002aa0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aa2:	0021      	movs	r1, r4
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	2212      	movs	r2, #18
 8002aa8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aaa:	187b      	adds	r3, r7, r1
 8002aac:	2200      	movs	r2, #0
 8002aae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab0:	187b      	adds	r3, r7, r1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002ab6:	187b      	adds	r3, r7, r1
 8002ab8:	2201      	movs	r2, #1
 8002aba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002abc:	187b      	adds	r3, r7, r1
 8002abe:	4a0d      	ldr	r2, [pc, #52]	@ (8002af4 <HAL_I2C_MspInit+0x98>)
 8002ac0:	0019      	movs	r1, r3
 8002ac2:	0010      	movs	r0, r2
 8002ac4:	f000 fb40 	bl	8003148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ac8:	4b09      	ldr	r3, [pc, #36]	@ (8002af0 <HAL_I2C_MspInit+0x94>)
 8002aca:	69da      	ldr	r2, [r3, #28]
 8002acc:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <HAL_I2C_MspInit+0x94>)
 8002ace:	2180      	movs	r1, #128	@ 0x80
 8002ad0:	0389      	lsls	r1, r1, #14
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	61da      	str	r2, [r3, #28]
 8002ad6:	4b06      	ldr	r3, [pc, #24]	@ (8002af0 <HAL_I2C_MspInit+0x94>)
 8002ad8:	69da      	ldr	r2, [r3, #28]
 8002ada:	2380      	movs	r3, #128	@ 0x80
 8002adc:	039b      	lsls	r3, r3, #14
 8002ade:	4013      	ands	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002ae4:	46c0      	nop			@ (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b00b      	add	sp, #44	@ 0x2c
 8002aea:	bd90      	pop	{r4, r7, pc}
 8002aec:	40005400 	.word	0x40005400
 8002af0:	40021000 	.word	0x40021000
 8002af4:	48000400 	.word	0x48000400

08002af8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002af8:	b590      	push	{r4, r7, lr}
 8002afa:	b08b      	sub	sp, #44	@ 0x2c
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	2414      	movs	r4, #20
 8002b02:	193b      	adds	r3, r7, r4
 8002b04:	0018      	movs	r0, r3
 8002b06:	2314      	movs	r3, #20
 8002b08:	001a      	movs	r2, r3
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	f003 fda0 	bl	8006650 <memset>
  if(huart->Instance==USART2)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a20      	ldr	r2, [pc, #128]	@ (8002b98 <HAL_UART_MspInit+0xa0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d13a      	bne.n	8002b90 <HAL_UART_MspInit+0x98>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b1a:	4b20      	ldr	r3, [pc, #128]	@ (8002b9c <HAL_UART_MspInit+0xa4>)
 8002b1c:	69da      	ldr	r2, [r3, #28]
 8002b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002b9c <HAL_UART_MspInit+0xa4>)
 8002b20:	2180      	movs	r1, #128	@ 0x80
 8002b22:	0289      	lsls	r1, r1, #10
 8002b24:	430a      	orrs	r2, r1
 8002b26:	61da      	str	r2, [r3, #28]
 8002b28:	4b1c      	ldr	r3, [pc, #112]	@ (8002b9c <HAL_UART_MspInit+0xa4>)
 8002b2a:	69da      	ldr	r2, [r3, #28]
 8002b2c:	2380      	movs	r3, #128	@ 0x80
 8002b2e:	029b      	lsls	r3, r3, #10
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b36:	4b19      	ldr	r3, [pc, #100]	@ (8002b9c <HAL_UART_MspInit+0xa4>)
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	4b18      	ldr	r3, [pc, #96]	@ (8002b9c <HAL_UART_MspInit+0xa4>)
 8002b3c:	2180      	movs	r1, #128	@ 0x80
 8002b3e:	0289      	lsls	r1, r1, #10
 8002b40:	430a      	orrs	r2, r1
 8002b42:	615a      	str	r2, [r3, #20]
 8002b44:	4b15      	ldr	r3, [pc, #84]	@ (8002b9c <HAL_UART_MspInit+0xa4>)
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	2380      	movs	r3, #128	@ 0x80
 8002b4a:	029b      	lsls	r3, r3, #10
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b52:	0021      	movs	r1, r4
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	220c      	movs	r2, #12
 8002b58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	187b      	adds	r3, r7, r1
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	187b      	adds	r3, r7, r1
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002b6c:	187b      	adds	r3, r7, r1
 8002b6e:	2201      	movs	r2, #1
 8002b70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b72:	187a      	adds	r2, r7, r1
 8002b74:	2390      	movs	r3, #144	@ 0x90
 8002b76:	05db      	lsls	r3, r3, #23
 8002b78:	0011      	movs	r1, r2
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f000 fae4 	bl	8003148 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b80:	2200      	movs	r2, #0
 8002b82:	2100      	movs	r1, #0
 8002b84:	201c      	movs	r0, #28
 8002b86:	f000 fa2f 	bl	8002fe8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b8a:	201c      	movs	r0, #28
 8002b8c:	f000 fa41 	bl	8003012 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002b90:	46c0      	nop			@ (mov r8, r8)
 8002b92:	46bd      	mov	sp, r7
 8002b94:	b00b      	add	sp, #44	@ 0x2c
 8002b96:	bd90      	pop	{r4, r7, pc}
 8002b98:	40004400 	.word	0x40004400
 8002b9c:	40021000 	.word	0x40021000

08002ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ba4:	46c0      	nop			@ (mov r8, r8)
 8002ba6:	e7fd      	b.n	8002ba4 <NMI_Handler+0x4>

08002ba8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bac:	46c0      	nop			@ (mov r8, r8)
 8002bae:	e7fd      	b.n	8002bac <HardFault_Handler+0x4>

08002bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002bb4:	46c0      	nop			@ (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bbe:	46c0      	nop			@ (mov r8, r8)
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bc8:	f000 f946 	bl	8002e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bcc:	46c0      	nop			@ (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bd8:	4b03      	ldr	r3, [pc, #12]	@ (8002be8 <USART2_IRQHandler+0x14>)
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f001 fbf6 	bl	80043cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002be0:	46c0      	nop			@ (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			@ (mov r8, r8)
 8002be8:	20000244 	.word	0x20000244

08002bec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  return 1;
 8002bf0:	2301      	movs	r3, #1
}
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <_kill>:

int _kill(int pid, int sig)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002c02:	f003 fd7f 	bl	8006704 <__errno>
 8002c06:	0003      	movs	r3, r0
 8002c08:	2216      	movs	r2, #22
 8002c0a:	601a      	str	r2, [r3, #0]
  return -1;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	425b      	negs	r3, r3
}
 8002c10:	0018      	movs	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	b002      	add	sp, #8
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <_exit>:

void _exit (int status)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c20:	2301      	movs	r3, #1
 8002c22:	425a      	negs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	0011      	movs	r1, r2
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7ff ffe5 	bl	8002bf8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c2e:	46c0      	nop			@ (mov r8, r8)
 8002c30:	e7fd      	b.n	8002c2e <_exit+0x16>

08002c32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
 8002c42:	e00a      	b.n	8002c5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c44:	e000      	b.n	8002c48 <_read+0x16>
 8002c46:	bf00      	nop
 8002c48:	0001      	movs	r1, r0
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	1c5a      	adds	r2, r3, #1
 8002c4e:	60ba      	str	r2, [r7, #8]
 8002c50:	b2ca      	uxtb	r2, r1
 8002c52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	3301      	adds	r3, #1
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	dbf0      	blt.n	8002c44 <_read+0x12>
  }

  return len;
 8002c62:	687b      	ldr	r3, [r7, #4]
}
 8002c64:	0018      	movs	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b006      	add	sp, #24
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	e009      	b.n	8002c92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	60ba      	str	r2, [r7, #8]
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	0018      	movs	r0, r3
 8002c88:	e000      	b.n	8002c8c <_write+0x20>
 8002c8a:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	3301      	adds	r3, #1
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	dbf1      	blt.n	8002c7e <_write+0x12>
  }
  return len;
 8002c9a:	687b      	ldr	r3, [r7, #4]
}
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b006      	add	sp, #24
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <_close>:

int _close(int file)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002cac:	2301      	movs	r3, #1
 8002cae:	425b      	negs	r3, r3
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	b002      	add	sp, #8
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2280      	movs	r2, #128	@ 0x80
 8002cc6:	0192      	lsls	r2, r2, #6
 8002cc8:	605a      	str	r2, [r3, #4]
  return 0;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	0018      	movs	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b002      	add	sp, #8
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <_isatty>:

int _isatty(int file)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cdc:	2301      	movs	r3, #1
}
 8002cde:	0018      	movs	r0, r3
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b002      	add	sp, #8
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b084      	sub	sp, #16
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b004      	add	sp, #16
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d04:	4a14      	ldr	r2, [pc, #80]	@ (8002d58 <_sbrk+0x5c>)
 8002d06:	4b15      	ldr	r3, [pc, #84]	@ (8002d5c <_sbrk+0x60>)
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d10:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <_sbrk+0x64>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d18:	4b11      	ldr	r3, [pc, #68]	@ (8002d60 <_sbrk+0x64>)
 8002d1a:	4a12      	ldr	r2, [pc, #72]	@ (8002d64 <_sbrk+0x68>)
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d1e:	4b10      	ldr	r3, [pc, #64]	@ (8002d60 <_sbrk+0x64>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	18d3      	adds	r3, r2, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d207      	bcs.n	8002d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d2c:	f003 fcea 	bl	8006704 <__errno>
 8002d30:	0003      	movs	r3, r0
 8002d32:	220c      	movs	r2, #12
 8002d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d36:	2301      	movs	r3, #1
 8002d38:	425b      	negs	r3, r3
 8002d3a:	e009      	b.n	8002d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d3c:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <_sbrk+0x64>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d42:	4b07      	ldr	r3, [pc, #28]	@ (8002d60 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	18d2      	adds	r2, r2, r3
 8002d4a:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <_sbrk+0x64>)
 8002d4c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b006      	add	sp, #24
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20002000 	.word	0x20002000
 8002d5c:	00000400 	.word	0x00000400
 8002d60:	20000ad0 	.word	0x20000ad0
 8002d64:	20000c28 	.word	0x20000c28

08002d68 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d6c:	46c0      	nop			@ (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d74:	480d      	ldr	r0, [pc, #52]	@ (8002dac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d76:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d78:	f7ff fff6 	bl	8002d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d7c:	480c      	ldr	r0, [pc, #48]	@ (8002db0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d7e:	490d      	ldr	r1, [pc, #52]	@ (8002db4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d80:	4a0d      	ldr	r2, [pc, #52]	@ (8002db8 <LoopForever+0xe>)
  movs r3, #0
 8002d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d84:	e002      	b.n	8002d8c <LoopCopyDataInit>

08002d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d8a:	3304      	adds	r3, #4

08002d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d90:	d3f9      	bcc.n	8002d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d92:	4a0a      	ldr	r2, [pc, #40]	@ (8002dbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d94:	4c0a      	ldr	r4, [pc, #40]	@ (8002dc0 <LoopForever+0x16>)
  movs r3, #0
 8002d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d98:	e001      	b.n	8002d9e <LoopFillZerobss>

08002d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d9c:	3204      	adds	r2, #4

08002d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002da0:	d3fb      	bcc.n	8002d9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002da2:	f003 fcb5 	bl	8006710 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002da6:	f7ff fc2d 	bl	8002604 <main>

08002daa <LoopForever>:

LoopForever:
    b LoopForever
 8002daa:	e7fe      	b.n	8002daa <LoopForever>
  ldr   r0, =_estack
 8002dac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002db4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002db8:	0800a354 	.word	0x0800a354
  ldr r2, =_sbss
 8002dbc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002dc0:	20000c24 	.word	0x20000c24

08002dc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dc4:	e7fe      	b.n	8002dc4 <ADC1_IRQHandler>
	...

08002dc8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dcc:	4b07      	ldr	r3, [pc, #28]	@ (8002dec <HAL_Init+0x24>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <HAL_Init+0x24>)
 8002dd2:	2110      	movs	r1, #16
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f000 f809 	bl	8002df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dde:	f7ff fe19 	bl	8002a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	0018      	movs	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	40022000 	.word	0x40022000

08002df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002df8:	4b14      	ldr	r3, [pc, #80]	@ (8002e4c <HAL_InitTick+0x5c>)
 8002dfa:	681c      	ldr	r4, [r3, #0]
 8002dfc:	4b14      	ldr	r3, [pc, #80]	@ (8002e50 <HAL_InitTick+0x60>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	0019      	movs	r1, r3
 8002e02:	23fa      	movs	r3, #250	@ 0xfa
 8002e04:	0098      	lsls	r0, r3, #2
 8002e06:	f7fd f99b 	bl	8000140 <__udivsi3>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	0020      	movs	r0, r4
 8002e10:	f7fd f996 	bl	8000140 <__udivsi3>
 8002e14:	0003      	movs	r3, r0
 8002e16:	0018      	movs	r0, r3
 8002e18:	f000 f90b 	bl	8003032 <HAL_SYSTICK_Config>
 8002e1c:	1e03      	subs	r3, r0, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e00f      	b.n	8002e44 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d80b      	bhi.n	8002e42 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	425b      	negs	r3, r3
 8002e30:	2200      	movs	r2, #0
 8002e32:	0018      	movs	r0, r3
 8002e34:	f000 f8d8 	bl	8002fe8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e38:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <HAL_InitTick+0x64>)
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e000      	b.n	8002e44 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
}
 8002e44:	0018      	movs	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b003      	add	sp, #12
 8002e4a:	bd90      	pop	{r4, r7, pc}
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	20000008 	.word	0x20000008
 8002e54:	20000004 	.word	0x20000004

08002e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e5c:	4b05      	ldr	r3, [pc, #20]	@ (8002e74 <HAL_IncTick+0x1c>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	001a      	movs	r2, r3
 8002e62:	4b05      	ldr	r3, [pc, #20]	@ (8002e78 <HAL_IncTick+0x20>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	18d2      	adds	r2, r2, r3
 8002e68:	4b03      	ldr	r3, [pc, #12]	@ (8002e78 <HAL_IncTick+0x20>)
 8002e6a:	601a      	str	r2, [r3, #0]
}
 8002e6c:	46c0      	nop			@ (mov r8, r8)
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	46c0      	nop			@ (mov r8, r8)
 8002e74:	20000008 	.word	0x20000008
 8002e78:	20000ad4 	.word	0x20000ad4

08002e7c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e80:	4b02      	ldr	r3, [pc, #8]	@ (8002e8c <HAL_GetTick+0x10>)
 8002e82:	681b      	ldr	r3, [r3, #0]
}
 8002e84:	0018      	movs	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	46c0      	nop			@ (mov r8, r8)
 8002e8c:	20000ad4 	.word	0x20000ad4

08002e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	0002      	movs	r2, r0
 8002e98:	1dfb      	adds	r3, r7, #7
 8002e9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e9c:	1dfb      	adds	r3, r7, #7
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ea2:	d809      	bhi.n	8002eb8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea4:	1dfb      	adds	r3, r7, #7
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	231f      	movs	r3, #31
 8002eac:	401a      	ands	r2, r3
 8002eae:	4b04      	ldr	r3, [pc, #16]	@ (8002ec0 <__NVIC_EnableIRQ+0x30>)
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	4091      	lsls	r1, r2
 8002eb4:	000a      	movs	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]
  }
}
 8002eb8:	46c0      	nop			@ (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b002      	add	sp, #8
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	e000e100 	.word	0xe000e100

08002ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	0002      	movs	r2, r0
 8002ecc:	6039      	str	r1, [r7, #0]
 8002ece:	1dfb      	adds	r3, r7, #7
 8002ed0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ed2:	1dfb      	adds	r3, r7, #7
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b7f      	cmp	r3, #127	@ 0x7f
 8002ed8:	d828      	bhi.n	8002f2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eda:	4a2f      	ldr	r2, [pc, #188]	@ (8002f98 <__NVIC_SetPriority+0xd4>)
 8002edc:	1dfb      	adds	r3, r7, #7
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	b25b      	sxtb	r3, r3
 8002ee2:	089b      	lsrs	r3, r3, #2
 8002ee4:	33c0      	adds	r3, #192	@ 0xc0
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	589b      	ldr	r3, [r3, r2]
 8002eea:	1dfa      	adds	r2, r7, #7
 8002eec:	7812      	ldrb	r2, [r2, #0]
 8002eee:	0011      	movs	r1, r2
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	400a      	ands	r2, r1
 8002ef4:	00d2      	lsls	r2, r2, #3
 8002ef6:	21ff      	movs	r1, #255	@ 0xff
 8002ef8:	4091      	lsls	r1, r2
 8002efa:	000a      	movs	r2, r1
 8002efc:	43d2      	mvns	r2, r2
 8002efe:	401a      	ands	r2, r3
 8002f00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	019b      	lsls	r3, r3, #6
 8002f06:	22ff      	movs	r2, #255	@ 0xff
 8002f08:	401a      	ands	r2, r3
 8002f0a:	1dfb      	adds	r3, r7, #7
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	2303      	movs	r3, #3
 8002f12:	4003      	ands	r3, r0
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f18:	481f      	ldr	r0, [pc, #124]	@ (8002f98 <__NVIC_SetPriority+0xd4>)
 8002f1a:	1dfb      	adds	r3, r7, #7
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	b25b      	sxtb	r3, r3
 8002f20:	089b      	lsrs	r3, r3, #2
 8002f22:	430a      	orrs	r2, r1
 8002f24:	33c0      	adds	r3, #192	@ 0xc0
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f2a:	e031      	b.n	8002f90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f2c:	4a1b      	ldr	r2, [pc, #108]	@ (8002f9c <__NVIC_SetPriority+0xd8>)
 8002f2e:	1dfb      	adds	r3, r7, #7
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	0019      	movs	r1, r3
 8002f34:	230f      	movs	r3, #15
 8002f36:	400b      	ands	r3, r1
 8002f38:	3b08      	subs	r3, #8
 8002f3a:	089b      	lsrs	r3, r3, #2
 8002f3c:	3306      	adds	r3, #6
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	18d3      	adds	r3, r2, r3
 8002f42:	3304      	adds	r3, #4
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	1dfa      	adds	r2, r7, #7
 8002f48:	7812      	ldrb	r2, [r2, #0]
 8002f4a:	0011      	movs	r1, r2
 8002f4c:	2203      	movs	r2, #3
 8002f4e:	400a      	ands	r2, r1
 8002f50:	00d2      	lsls	r2, r2, #3
 8002f52:	21ff      	movs	r1, #255	@ 0xff
 8002f54:	4091      	lsls	r1, r2
 8002f56:	000a      	movs	r2, r1
 8002f58:	43d2      	mvns	r2, r2
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	019b      	lsls	r3, r3, #6
 8002f62:	22ff      	movs	r2, #255	@ 0xff
 8002f64:	401a      	ands	r2, r3
 8002f66:	1dfb      	adds	r3, r7, #7
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	4003      	ands	r3, r0
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f74:	4809      	ldr	r0, [pc, #36]	@ (8002f9c <__NVIC_SetPriority+0xd8>)
 8002f76:	1dfb      	adds	r3, r7, #7
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	001c      	movs	r4, r3
 8002f7c:	230f      	movs	r3, #15
 8002f7e:	4023      	ands	r3, r4
 8002f80:	3b08      	subs	r3, #8
 8002f82:	089b      	lsrs	r3, r3, #2
 8002f84:	430a      	orrs	r2, r1
 8002f86:	3306      	adds	r3, #6
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	18c3      	adds	r3, r0, r3
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	601a      	str	r2, [r3, #0]
}
 8002f90:	46c0      	nop			@ (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b003      	add	sp, #12
 8002f96:	bd90      	pop	{r4, r7, pc}
 8002f98:	e000e100 	.word	0xe000e100
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	1e5a      	subs	r2, r3, #1
 8002fac:	2380      	movs	r3, #128	@ 0x80
 8002fae:	045b      	lsls	r3, r3, #17
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d301      	bcc.n	8002fb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e010      	b.n	8002fda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe4 <SysTick_Config+0x44>)
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	3a01      	subs	r2, #1
 8002fbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	425b      	negs	r3, r3
 8002fc4:	2103      	movs	r1, #3
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f7ff ff7c 	bl	8002ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fcc:	4b05      	ldr	r3, [pc, #20]	@ (8002fe4 <SysTick_Config+0x44>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fd2:	4b04      	ldr	r3, [pc, #16]	@ (8002fe4 <SysTick_Config+0x44>)
 8002fd4:	2207      	movs	r2, #7
 8002fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b002      	add	sp, #8
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	e000e010 	.word	0xe000e010

08002fe8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
 8002ff2:	210f      	movs	r1, #15
 8002ff4:	187b      	adds	r3, r7, r1
 8002ff6:	1c02      	adds	r2, r0, #0
 8002ff8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	187b      	adds	r3, r7, r1
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	b25b      	sxtb	r3, r3
 8003002:	0011      	movs	r1, r2
 8003004:	0018      	movs	r0, r3
 8003006:	f7ff ff5d 	bl	8002ec4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	b004      	add	sp, #16
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b082      	sub	sp, #8
 8003016:	af00      	add	r7, sp, #0
 8003018:	0002      	movs	r2, r0
 800301a:	1dfb      	adds	r3, r7, #7
 800301c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800301e:	1dfb      	adds	r3, r7, #7
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	b25b      	sxtb	r3, r3
 8003024:	0018      	movs	r0, r3
 8003026:	f7ff ff33 	bl	8002e90 <__NVIC_EnableIRQ>
}
 800302a:	46c0      	nop			@ (mov r8, r8)
 800302c:	46bd      	mov	sp, r7
 800302e:	b002      	add	sp, #8
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b082      	sub	sp, #8
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	0018      	movs	r0, r3
 800303e:	f7ff ffaf 	bl	8002fa0 <SysTick_Config>
 8003042:	0003      	movs	r3, r0
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	b002      	add	sp, #8
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2221      	movs	r2, #33	@ 0x21
 8003058:	5c9b      	ldrb	r3, [r3, r2]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d008      	beq.n	8003072 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2204      	movs	r2, #4
 8003064:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	2100      	movs	r1, #0
 800306c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e020      	b.n	80030b4 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	210e      	movs	r1, #14
 800307e:	438a      	bics	r2, r1
 8003080:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2101      	movs	r1, #1
 800308e:	438a      	bics	r2, r1
 8003090:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309a:	2101      	movs	r1, #1
 800309c:	4091      	lsls	r1, r2
 800309e:	000a      	movs	r2, r1
 80030a0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2221      	movs	r2, #33	@ 0x21
 80030a6:	2101      	movs	r1, #1
 80030a8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	2100      	movs	r1, #0
 80030b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b002      	add	sp, #8
 80030ba:	bd80      	pop	{r7, pc}

080030bc <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030c4:	210f      	movs	r1, #15
 80030c6:	187b      	adds	r3, r7, r1
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2221      	movs	r2, #33	@ 0x21
 80030d0:	5c9b      	ldrb	r3, [r3, r2]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d006      	beq.n	80030e6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2204      	movs	r2, #4
 80030dc:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	2201      	movs	r2, #1
 80030e2:	701a      	strb	r2, [r3, #0]
 80030e4:	e028      	b.n	8003138 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	210e      	movs	r1, #14
 80030f2:	438a      	bics	r2, r1
 80030f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2101      	movs	r1, #1
 8003102:	438a      	bics	r2, r1
 8003104:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800310e:	2101      	movs	r1, #1
 8003110:	4091      	lsls	r1, r2
 8003112:	000a      	movs	r2, r1
 8003114:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2221      	movs	r2, #33	@ 0x21
 800311a:	2101      	movs	r1, #1
 800311c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2220      	movs	r2, #32
 8003122:	2100      	movs	r1, #0
 8003124:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800312a:	2b00      	cmp	r3, #0
 800312c:	d004      	beq.n	8003138 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	0010      	movs	r0, r2
 8003136:	4798      	blx	r3
    }
  }
  return status;
 8003138:	230f      	movs	r3, #15
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	781b      	ldrb	r3, [r3, #0]
}
 800313e:	0018      	movs	r0, r3
 8003140:	46bd      	mov	sp, r7
 8003142:	b004      	add	sp, #16
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003156:	e14f      	b.n	80033f8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2101      	movs	r1, #1
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4091      	lsls	r1, r2
 8003162:	000a      	movs	r2, r1
 8003164:	4013      	ands	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d100      	bne.n	8003170 <HAL_GPIO_Init+0x28>
 800316e:	e140      	b.n	80033f2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2203      	movs	r2, #3
 8003176:	4013      	ands	r3, r2
 8003178:	2b01      	cmp	r3, #1
 800317a:	d005      	beq.n	8003188 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2203      	movs	r2, #3
 8003182:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003184:	2b02      	cmp	r3, #2
 8003186:	d130      	bne.n	80031ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	2203      	movs	r2, #3
 8003194:	409a      	lsls	r2, r3
 8003196:	0013      	movs	r3, r2
 8003198:	43da      	mvns	r2, r3
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	409a      	lsls	r2, r3
 80031aa:	0013      	movs	r3, r2
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031be:	2201      	movs	r2, #1
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	409a      	lsls	r2, r3
 80031c4:	0013      	movs	r3, r2
 80031c6:	43da      	mvns	r2, r3
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4013      	ands	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	091b      	lsrs	r3, r3, #4
 80031d4:	2201      	movs	r2, #1
 80031d6:	401a      	ands	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	409a      	lsls	r2, r3
 80031dc:	0013      	movs	r3, r2
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2203      	movs	r2, #3
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d017      	beq.n	8003226 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	409a      	lsls	r2, r3
 8003204:	0013      	movs	r3, r2
 8003206:	43da      	mvns	r2, r3
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	409a      	lsls	r2, r3
 8003218:	0013      	movs	r3, r2
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2203      	movs	r2, #3
 800322c:	4013      	ands	r3, r2
 800322e:	2b02      	cmp	r3, #2
 8003230:	d123      	bne.n	800327a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	08da      	lsrs	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3208      	adds	r2, #8
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	58d3      	ldr	r3, [r2, r3]
 800323e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2207      	movs	r2, #7
 8003244:	4013      	ands	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	220f      	movs	r2, #15
 800324a:	409a      	lsls	r2, r3
 800324c:	0013      	movs	r3, r2
 800324e:	43da      	mvns	r2, r3
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2107      	movs	r1, #7
 800325e:	400b      	ands	r3, r1
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	409a      	lsls	r2, r3
 8003264:	0013      	movs	r3, r2
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	08da      	lsrs	r2, r3, #3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3208      	adds	r2, #8
 8003274:	0092      	lsls	r2, r2, #2
 8003276:	6939      	ldr	r1, [r7, #16]
 8003278:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	2203      	movs	r2, #3
 8003286:	409a      	lsls	r2, r3
 8003288:	0013      	movs	r3, r2
 800328a:	43da      	mvns	r2, r3
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4013      	ands	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2203      	movs	r2, #3
 8003298:	401a      	ands	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	409a      	lsls	r2, r3
 80032a0:	0013      	movs	r3, r2
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	23c0      	movs	r3, #192	@ 0xc0
 80032b4:	029b      	lsls	r3, r3, #10
 80032b6:	4013      	ands	r3, r2
 80032b8:	d100      	bne.n	80032bc <HAL_GPIO_Init+0x174>
 80032ba:	e09a      	b.n	80033f2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032bc:	4b54      	ldr	r3, [pc, #336]	@ (8003410 <HAL_GPIO_Init+0x2c8>)
 80032be:	699a      	ldr	r2, [r3, #24]
 80032c0:	4b53      	ldr	r3, [pc, #332]	@ (8003410 <HAL_GPIO_Init+0x2c8>)
 80032c2:	2101      	movs	r1, #1
 80032c4:	430a      	orrs	r2, r1
 80032c6:	619a      	str	r2, [r3, #24]
 80032c8:	4b51      	ldr	r3, [pc, #324]	@ (8003410 <HAL_GPIO_Init+0x2c8>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2201      	movs	r2, #1
 80032ce:	4013      	ands	r3, r2
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80032d4:	4a4f      	ldr	r2, [pc, #316]	@ (8003414 <HAL_GPIO_Init+0x2cc>)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	089b      	lsrs	r3, r3, #2
 80032da:	3302      	adds	r3, #2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	589b      	ldr	r3, [r3, r2]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2203      	movs	r2, #3
 80032e6:	4013      	ands	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	220f      	movs	r2, #15
 80032ec:	409a      	lsls	r2, r3
 80032ee:	0013      	movs	r3, r2
 80032f0:	43da      	mvns	r2, r3
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	2390      	movs	r3, #144	@ 0x90
 80032fc:	05db      	lsls	r3, r3, #23
 80032fe:	429a      	cmp	r2, r3
 8003300:	d013      	beq.n	800332a <HAL_GPIO_Init+0x1e2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a44      	ldr	r2, [pc, #272]	@ (8003418 <HAL_GPIO_Init+0x2d0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00d      	beq.n	8003326 <HAL_GPIO_Init+0x1de>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a43      	ldr	r2, [pc, #268]	@ (800341c <HAL_GPIO_Init+0x2d4>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d007      	beq.n	8003322 <HAL_GPIO_Init+0x1da>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a42      	ldr	r2, [pc, #264]	@ (8003420 <HAL_GPIO_Init+0x2d8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d101      	bne.n	800331e <HAL_GPIO_Init+0x1d6>
 800331a:	2303      	movs	r3, #3
 800331c:	e006      	b.n	800332c <HAL_GPIO_Init+0x1e4>
 800331e:	2305      	movs	r3, #5
 8003320:	e004      	b.n	800332c <HAL_GPIO_Init+0x1e4>
 8003322:	2302      	movs	r3, #2
 8003324:	e002      	b.n	800332c <HAL_GPIO_Init+0x1e4>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <HAL_GPIO_Init+0x1e4>
 800332a:	2300      	movs	r3, #0
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	2103      	movs	r1, #3
 8003330:	400a      	ands	r2, r1
 8003332:	0092      	lsls	r2, r2, #2
 8003334:	4093      	lsls	r3, r2
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800333c:	4935      	ldr	r1, [pc, #212]	@ (8003414 <HAL_GPIO_Init+0x2cc>)
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	089b      	lsrs	r3, r3, #2
 8003342:	3302      	adds	r3, #2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800334a:	4b36      	ldr	r3, [pc, #216]	@ (8003424 <HAL_GPIO_Init+0x2dc>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	43da      	mvns	r2, r3
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4013      	ands	r3, r2
 8003358:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	2380      	movs	r3, #128	@ 0x80
 8003360:	035b      	lsls	r3, r3, #13
 8003362:	4013      	ands	r3, r2
 8003364:	d003      	beq.n	800336e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800336e:	4b2d      	ldr	r3, [pc, #180]	@ (8003424 <HAL_GPIO_Init+0x2dc>)
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003374:	4b2b      	ldr	r3, [pc, #172]	@ (8003424 <HAL_GPIO_Init+0x2dc>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	43da      	mvns	r2, r3
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	2380      	movs	r3, #128	@ 0x80
 800338a:	039b      	lsls	r3, r3, #14
 800338c:	4013      	ands	r3, r2
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003390:	693a      	ldr	r2, [r7, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003398:	4b22      	ldr	r3, [pc, #136]	@ (8003424 <HAL_GPIO_Init+0x2dc>)
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800339e:	4b21      	ldr	r3, [pc, #132]	@ (8003424 <HAL_GPIO_Init+0x2dc>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	43da      	mvns	r2, r3
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4013      	ands	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	2380      	movs	r3, #128	@ 0x80
 80033b4:	029b      	lsls	r3, r3, #10
 80033b6:	4013      	ands	r3, r2
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80033c2:	4b18      	ldr	r3, [pc, #96]	@ (8003424 <HAL_GPIO_Init+0x2dc>)
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80033c8:	4b16      	ldr	r3, [pc, #88]	@ (8003424 <HAL_GPIO_Init+0x2dc>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	43da      	mvns	r2, r3
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	4013      	ands	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	2380      	movs	r3, #128	@ 0x80
 80033de:	025b      	lsls	r3, r3, #9
 80033e0:	4013      	ands	r3, r2
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80033ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003424 <HAL_GPIO_Init+0x2dc>)
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	3301      	adds	r3, #1
 80033f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	40da      	lsrs	r2, r3
 8003400:	1e13      	subs	r3, r2, #0
 8003402:	d000      	beq.n	8003406 <HAL_GPIO_Init+0x2be>
 8003404:	e6a8      	b.n	8003158 <HAL_GPIO_Init+0x10>
  } 
}
 8003406:	46c0      	nop			@ (mov r8, r8)
 8003408:	46c0      	nop			@ (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b006      	add	sp, #24
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40021000 	.word	0x40021000
 8003414:	40010000 	.word	0x40010000
 8003418:	48000400 	.word	0x48000400
 800341c:	48000800 	.word	0x48000800
 8003420:	48000c00 	.word	0x48000c00
 8003424:	40010400 	.word	0x40010400

08003428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	0008      	movs	r0, r1
 8003432:	0011      	movs	r1, r2
 8003434:	1cbb      	adds	r3, r7, #2
 8003436:	1c02      	adds	r2, r0, #0
 8003438:	801a      	strh	r2, [r3, #0]
 800343a:	1c7b      	adds	r3, r7, #1
 800343c:	1c0a      	adds	r2, r1, #0
 800343e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003440:	1c7b      	adds	r3, r7, #1
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d004      	beq.n	8003452 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003448:	1cbb      	adds	r3, r7, #2
 800344a:	881a      	ldrh	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003450:	e003      	b.n	800345a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003452:	1cbb      	adds	r3, r7, #2
 8003454:	881a      	ldrh	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800345a:	46c0      	nop			@ (mov r8, r8)
 800345c:	46bd      	mov	sp, r7
 800345e:	b002      	add	sp, #8
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e08f      	b.n	8003596 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2241      	movs	r2, #65	@ 0x41
 800347a:	5c9b      	ldrb	r3, [r3, r2]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d107      	bne.n	8003492 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2240      	movs	r2, #64	@ 0x40
 8003486:	2100      	movs	r1, #0
 8003488:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	0018      	movs	r0, r3
 800348e:	f7ff fae5 	bl	8002a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2241      	movs	r2, #65	@ 0x41
 8003496:	2124      	movs	r1, #36	@ 0x24
 8003498:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2101      	movs	r1, #1
 80034a6:	438a      	bics	r2, r1
 80034a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	493b      	ldr	r1, [pc, #236]	@ (80035a0 <HAL_I2C_Init+0x13c>)
 80034b4:	400a      	ands	r2, r1
 80034b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4938      	ldr	r1, [pc, #224]	@ (80035a4 <HAL_I2C_Init+0x140>)
 80034c4:	400a      	ands	r2, r1
 80034c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d108      	bne.n	80034e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2180      	movs	r1, #128	@ 0x80
 80034da:	0209      	lsls	r1, r1, #8
 80034dc:	430a      	orrs	r2, r1
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	e007      	b.n	80034f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	689a      	ldr	r2, [r3, #8]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2184      	movs	r1, #132	@ 0x84
 80034ec:	0209      	lsls	r1, r1, #8
 80034ee:	430a      	orrs	r2, r1
 80034f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d109      	bne.n	800350e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685a      	ldr	r2, [r3, #4]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2180      	movs	r1, #128	@ 0x80
 8003506:	0109      	lsls	r1, r1, #4
 8003508:	430a      	orrs	r2, r1
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	e007      	b.n	800351e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4923      	ldr	r1, [pc, #140]	@ (80035a8 <HAL_I2C_Init+0x144>)
 800351a:	400a      	ands	r2, r1
 800351c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4920      	ldr	r1, [pc, #128]	@ (80035ac <HAL_I2C_Init+0x148>)
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	491a      	ldr	r1, [pc, #104]	@ (80035a4 <HAL_I2C_Init+0x140>)
 800353a:	400a      	ands	r2, r1
 800353c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	431a      	orrs	r2, r3
 8003548:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	430a      	orrs	r2, r1
 8003556:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	69d9      	ldr	r1, [r3, #28]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1a      	ldr	r2, [r3, #32]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2101      	movs	r1, #1
 8003574:	430a      	orrs	r2, r1
 8003576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2241      	movs	r2, #65	@ 0x41
 8003582:	2120      	movs	r1, #32
 8003584:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2242      	movs	r2, #66	@ 0x42
 8003590:	2100      	movs	r1, #0
 8003592:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b002      	add	sp, #8
 800359c:	bd80      	pop	{r7, pc}
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	f0ffffff 	.word	0xf0ffffff
 80035a4:	ffff7fff 	.word	0xffff7fff
 80035a8:	fffff7ff 	.word	0xfffff7ff
 80035ac:	02008000 	.word	0x02008000

080035b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2241      	movs	r2, #65	@ 0x41
 80035be:	5c9b      	ldrb	r3, [r3, r2]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d138      	bne.n	8003638 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2240      	movs	r2, #64	@ 0x40
 80035ca:	5c9b      	ldrb	r3, [r3, r2]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e032      	b.n	800363a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2240      	movs	r2, #64	@ 0x40
 80035d8:	2101      	movs	r1, #1
 80035da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2241      	movs	r2, #65	@ 0x41
 80035e0:	2124      	movs	r1, #36	@ 0x24
 80035e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2101      	movs	r1, #1
 80035f0:	438a      	bics	r2, r1
 80035f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4911      	ldr	r1, [pc, #68]	@ (8003644 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003600:	400a      	ands	r2, r1
 8003602:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6819      	ldr	r1, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2101      	movs	r1, #1
 8003620:	430a      	orrs	r2, r1
 8003622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2241      	movs	r2, #65	@ 0x41
 8003628:	2120      	movs	r1, #32
 800362a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2240      	movs	r2, #64	@ 0x40
 8003630:	2100      	movs	r1, #0
 8003632:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003634:	2300      	movs	r3, #0
 8003636:	e000      	b.n	800363a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003638:	2302      	movs	r3, #2
  }
}
 800363a:	0018      	movs	r0, r3
 800363c:	46bd      	mov	sp, r7
 800363e:	b002      	add	sp, #8
 8003640:	bd80      	pop	{r7, pc}
 8003642:	46c0      	nop			@ (mov r8, r8)
 8003644:	ffffefff 	.word	0xffffefff

08003648 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2241      	movs	r2, #65	@ 0x41
 8003656:	5c9b      	ldrb	r3, [r3, r2]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b20      	cmp	r3, #32
 800365c:	d139      	bne.n	80036d2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2240      	movs	r2, #64	@ 0x40
 8003662:	5c9b      	ldrb	r3, [r3, r2]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003668:	2302      	movs	r3, #2
 800366a:	e033      	b.n	80036d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2240      	movs	r2, #64	@ 0x40
 8003670:	2101      	movs	r1, #1
 8003672:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2241      	movs	r2, #65	@ 0x41
 8003678:	2124      	movs	r1, #36	@ 0x24
 800367a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2101      	movs	r1, #1
 8003688:	438a      	bics	r2, r1
 800368a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a11      	ldr	r2, [pc, #68]	@ (80036dc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003698:	4013      	ands	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	68fa      	ldr	r2, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2101      	movs	r1, #1
 80036ba:	430a      	orrs	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2241      	movs	r2, #65	@ 0x41
 80036c2:	2120      	movs	r1, #32
 80036c4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2240      	movs	r2, #64	@ 0x40
 80036ca:	2100      	movs	r1, #0
 80036cc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	e000      	b.n	80036d4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036d2:	2302      	movs	r3, #2
  }
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b004      	add	sp, #16
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	fffff0ff 	.word	0xfffff0ff

080036e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b088      	sub	sp, #32
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e301      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2201      	movs	r2, #1
 80036f8:	4013      	ands	r3, r2
 80036fa:	d100      	bne.n	80036fe <HAL_RCC_OscConfig+0x1e>
 80036fc:	e08d      	b.n	800381a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80036fe:	4bc3      	ldr	r3, [pc, #780]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	220c      	movs	r2, #12
 8003704:	4013      	ands	r3, r2
 8003706:	2b04      	cmp	r3, #4
 8003708:	d00e      	beq.n	8003728 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800370a:	4bc0      	ldr	r3, [pc, #768]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	220c      	movs	r2, #12
 8003710:	4013      	ands	r3, r2
 8003712:	2b08      	cmp	r3, #8
 8003714:	d116      	bne.n	8003744 <HAL_RCC_OscConfig+0x64>
 8003716:	4bbd      	ldr	r3, [pc, #756]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003718:	685a      	ldr	r2, [r3, #4]
 800371a:	2380      	movs	r3, #128	@ 0x80
 800371c:	025b      	lsls	r3, r3, #9
 800371e:	401a      	ands	r2, r3
 8003720:	2380      	movs	r3, #128	@ 0x80
 8003722:	025b      	lsls	r3, r3, #9
 8003724:	429a      	cmp	r2, r3
 8003726:	d10d      	bne.n	8003744 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003728:	4bb8      	ldr	r3, [pc, #736]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	2380      	movs	r3, #128	@ 0x80
 800372e:	029b      	lsls	r3, r3, #10
 8003730:	4013      	ands	r3, r2
 8003732:	d100      	bne.n	8003736 <HAL_RCC_OscConfig+0x56>
 8003734:	e070      	b.n	8003818 <HAL_RCC_OscConfig+0x138>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d000      	beq.n	8003740 <HAL_RCC_OscConfig+0x60>
 800373e:	e06b      	b.n	8003818 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e2d8      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d107      	bne.n	800375c <HAL_RCC_OscConfig+0x7c>
 800374c:	4baf      	ldr	r3, [pc, #700]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4bae      	ldr	r3, [pc, #696]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003752:	2180      	movs	r1, #128	@ 0x80
 8003754:	0249      	lsls	r1, r1, #9
 8003756:	430a      	orrs	r2, r1
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e02f      	b.n	80037bc <HAL_RCC_OscConfig+0xdc>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10c      	bne.n	800377e <HAL_RCC_OscConfig+0x9e>
 8003764:	4ba9      	ldr	r3, [pc, #676]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4ba8      	ldr	r3, [pc, #672]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 800376a:	49a9      	ldr	r1, [pc, #676]	@ (8003a10 <HAL_RCC_OscConfig+0x330>)
 800376c:	400a      	ands	r2, r1
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	4ba6      	ldr	r3, [pc, #664]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4ba5      	ldr	r3, [pc, #660]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003776:	49a7      	ldr	r1, [pc, #668]	@ (8003a14 <HAL_RCC_OscConfig+0x334>)
 8003778:	400a      	ands	r2, r1
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	e01e      	b.n	80037bc <HAL_RCC_OscConfig+0xdc>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b05      	cmp	r3, #5
 8003784:	d10e      	bne.n	80037a4 <HAL_RCC_OscConfig+0xc4>
 8003786:	4ba1      	ldr	r3, [pc, #644]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	4ba0      	ldr	r3, [pc, #640]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 800378c:	2180      	movs	r1, #128	@ 0x80
 800378e:	02c9      	lsls	r1, r1, #11
 8003790:	430a      	orrs	r2, r1
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	4b9d      	ldr	r3, [pc, #628]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	4b9c      	ldr	r3, [pc, #624]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 800379a:	2180      	movs	r1, #128	@ 0x80
 800379c:	0249      	lsls	r1, r1, #9
 800379e:	430a      	orrs	r2, r1
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	e00b      	b.n	80037bc <HAL_RCC_OscConfig+0xdc>
 80037a4:	4b99      	ldr	r3, [pc, #612]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b98      	ldr	r3, [pc, #608]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 80037aa:	4999      	ldr	r1, [pc, #612]	@ (8003a10 <HAL_RCC_OscConfig+0x330>)
 80037ac:	400a      	ands	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	4b96      	ldr	r3, [pc, #600]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	4b95      	ldr	r3, [pc, #596]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 80037b6:	4997      	ldr	r1, [pc, #604]	@ (8003a14 <HAL_RCC_OscConfig+0x334>)
 80037b8:	400a      	ands	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d014      	beq.n	80037ee <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c4:	f7ff fb5a 	bl	8002e7c <HAL_GetTick>
 80037c8:	0003      	movs	r3, r0
 80037ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ce:	f7ff fb55 	bl	8002e7c <HAL_GetTick>
 80037d2:	0002      	movs	r2, r0
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b64      	cmp	r3, #100	@ 0x64
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e28a      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e0:	4b8a      	ldr	r3, [pc, #552]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	2380      	movs	r3, #128	@ 0x80
 80037e6:	029b      	lsls	r3, r3, #10
 80037e8:	4013      	ands	r3, r2
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0xee>
 80037ec:	e015      	b.n	800381a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ee:	f7ff fb45 	bl	8002e7c <HAL_GetTick>
 80037f2:	0003      	movs	r3, r0
 80037f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037f8:	f7ff fb40 	bl	8002e7c <HAL_GetTick>
 80037fc:	0002      	movs	r2, r0
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	@ 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e275      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800380a:	4b80      	ldr	r3, [pc, #512]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	2380      	movs	r3, #128	@ 0x80
 8003810:	029b      	lsls	r3, r3, #10
 8003812:	4013      	ands	r3, r2
 8003814:	d1f0      	bne.n	80037f8 <HAL_RCC_OscConfig+0x118>
 8003816:	e000      	b.n	800381a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003818:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2202      	movs	r2, #2
 8003820:	4013      	ands	r3, r2
 8003822:	d100      	bne.n	8003826 <HAL_RCC_OscConfig+0x146>
 8003824:	e069      	b.n	80038fa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003826:	4b79      	ldr	r3, [pc, #484]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	220c      	movs	r2, #12
 800382c:	4013      	ands	r3, r2
 800382e:	d00b      	beq.n	8003848 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003830:	4b76      	ldr	r3, [pc, #472]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	220c      	movs	r2, #12
 8003836:	4013      	ands	r3, r2
 8003838:	2b08      	cmp	r3, #8
 800383a:	d11c      	bne.n	8003876 <HAL_RCC_OscConfig+0x196>
 800383c:	4b73      	ldr	r3, [pc, #460]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	2380      	movs	r3, #128	@ 0x80
 8003842:	025b      	lsls	r3, r3, #9
 8003844:	4013      	ands	r3, r2
 8003846:	d116      	bne.n	8003876 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003848:	4b70      	ldr	r3, [pc, #448]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2202      	movs	r2, #2
 800384e:	4013      	ands	r3, r2
 8003850:	d005      	beq.n	800385e <HAL_RCC_OscConfig+0x17e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d001      	beq.n	800385e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e24b      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385e:	4b6b      	ldr	r3, [pc, #428]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	22f8      	movs	r2, #248	@ 0xf8
 8003864:	4393      	bics	r3, r2
 8003866:	0019      	movs	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	00da      	lsls	r2, r3, #3
 800386e:	4b67      	ldr	r3, [pc, #412]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003870:	430a      	orrs	r2, r1
 8003872:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003874:	e041      	b.n	80038fa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d024      	beq.n	80038c8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800387e:	4b63      	ldr	r3, [pc, #396]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	4b62      	ldr	r3, [pc, #392]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003884:	2101      	movs	r1, #1
 8003886:	430a      	orrs	r2, r1
 8003888:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800388a:	f7ff faf7 	bl	8002e7c <HAL_GetTick>
 800388e:	0003      	movs	r3, r0
 8003890:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003894:	f7ff faf2 	bl	8002e7c <HAL_GetTick>
 8003898:	0002      	movs	r2, r0
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e227      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a6:	4b59      	ldr	r3, [pc, #356]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2202      	movs	r2, #2
 80038ac:	4013      	ands	r3, r2
 80038ae:	d0f1      	beq.n	8003894 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038b0:	4b56      	ldr	r3, [pc, #344]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	22f8      	movs	r2, #248	@ 0xf8
 80038b6:	4393      	bics	r3, r2
 80038b8:	0019      	movs	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	00da      	lsls	r2, r3, #3
 80038c0:	4b52      	ldr	r3, [pc, #328]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 80038c2:	430a      	orrs	r2, r1
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	e018      	b.n	80038fa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038c8:	4b50      	ldr	r3, [pc, #320]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b4f      	ldr	r3, [pc, #316]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 80038ce:	2101      	movs	r1, #1
 80038d0:	438a      	bics	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d4:	f7ff fad2 	bl	8002e7c <HAL_GetTick>
 80038d8:	0003      	movs	r3, r0
 80038da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038de:	f7ff facd 	bl	8002e7c <HAL_GetTick>
 80038e2:	0002      	movs	r2, r0
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e202      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f0:	4b46      	ldr	r3, [pc, #280]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2202      	movs	r2, #2
 80038f6:	4013      	ands	r3, r2
 80038f8:	d1f1      	bne.n	80038de <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2208      	movs	r2, #8
 8003900:	4013      	ands	r3, r2
 8003902:	d036      	beq.n	8003972 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	69db      	ldr	r3, [r3, #28]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d019      	beq.n	8003940 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800390c:	4b3f      	ldr	r3, [pc, #252]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 800390e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003910:	4b3e      	ldr	r3, [pc, #248]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003912:	2101      	movs	r1, #1
 8003914:	430a      	orrs	r2, r1
 8003916:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003918:	f7ff fab0 	bl	8002e7c <HAL_GetTick>
 800391c:	0003      	movs	r3, r0
 800391e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003920:	e008      	b.n	8003934 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003922:	f7ff faab 	bl	8002e7c <HAL_GetTick>
 8003926:	0002      	movs	r2, r0
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e1e0      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003934:	4b35      	ldr	r3, [pc, #212]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	2202      	movs	r2, #2
 800393a:	4013      	ands	r3, r2
 800393c:	d0f1      	beq.n	8003922 <HAL_RCC_OscConfig+0x242>
 800393e:	e018      	b.n	8003972 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003940:	4b32      	ldr	r3, [pc, #200]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003942:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003944:	4b31      	ldr	r3, [pc, #196]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003946:	2101      	movs	r1, #1
 8003948:	438a      	bics	r2, r1
 800394a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800394c:	f7ff fa96 	bl	8002e7c <HAL_GetTick>
 8003950:	0003      	movs	r3, r0
 8003952:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003954:	e008      	b.n	8003968 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003956:	f7ff fa91 	bl	8002e7c <HAL_GetTick>
 800395a:	0002      	movs	r2, r0
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e1c6      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003968:	4b28      	ldr	r3, [pc, #160]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 800396a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396c:	2202      	movs	r2, #2
 800396e:	4013      	ands	r3, r2
 8003970:	d1f1      	bne.n	8003956 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2204      	movs	r2, #4
 8003978:	4013      	ands	r3, r2
 800397a:	d100      	bne.n	800397e <HAL_RCC_OscConfig+0x29e>
 800397c:	e0b4      	b.n	8003ae8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800397e:	201f      	movs	r0, #31
 8003980:	183b      	adds	r3, r7, r0
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003986:	4b21      	ldr	r3, [pc, #132]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003988:	69da      	ldr	r2, [r3, #28]
 800398a:	2380      	movs	r3, #128	@ 0x80
 800398c:	055b      	lsls	r3, r3, #21
 800398e:	4013      	ands	r3, r2
 8003990:	d110      	bne.n	80039b4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003992:	4b1e      	ldr	r3, [pc, #120]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003994:	69da      	ldr	r2, [r3, #28]
 8003996:	4b1d      	ldr	r3, [pc, #116]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003998:	2180      	movs	r1, #128	@ 0x80
 800399a:	0549      	lsls	r1, r1, #21
 800399c:	430a      	orrs	r2, r1
 800399e:	61da      	str	r2, [r3, #28]
 80039a0:	4b1a      	ldr	r3, [pc, #104]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 80039a2:	69da      	ldr	r2, [r3, #28]
 80039a4:	2380      	movs	r3, #128	@ 0x80
 80039a6:	055b      	lsls	r3, r3, #21
 80039a8:	4013      	ands	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039ae:	183b      	adds	r3, r7, r0
 80039b0:	2201      	movs	r2, #1
 80039b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b4:	4b18      	ldr	r3, [pc, #96]	@ (8003a18 <HAL_RCC_OscConfig+0x338>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	2380      	movs	r3, #128	@ 0x80
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	4013      	ands	r3, r2
 80039be:	d11a      	bne.n	80039f6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039c0:	4b15      	ldr	r3, [pc, #84]	@ (8003a18 <HAL_RCC_OscConfig+0x338>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4b14      	ldr	r3, [pc, #80]	@ (8003a18 <HAL_RCC_OscConfig+0x338>)
 80039c6:	2180      	movs	r1, #128	@ 0x80
 80039c8:	0049      	lsls	r1, r1, #1
 80039ca:	430a      	orrs	r2, r1
 80039cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ce:	f7ff fa55 	bl	8002e7c <HAL_GetTick>
 80039d2:	0003      	movs	r3, r0
 80039d4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d6:	e008      	b.n	80039ea <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039d8:	f7ff fa50 	bl	8002e7c <HAL_GetTick>
 80039dc:	0002      	movs	r2, r0
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	2b64      	cmp	r3, #100	@ 0x64
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e185      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003a18 <HAL_RCC_OscConfig+0x338>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	2380      	movs	r3, #128	@ 0x80
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	4013      	ands	r3, r2
 80039f4:	d0f0      	beq.n	80039d8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d10e      	bne.n	8003a1c <HAL_RCC_OscConfig+0x33c>
 80039fe:	4b03      	ldr	r3, [pc, #12]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003a00:	6a1a      	ldr	r2, [r3, #32]
 8003a02:	4b02      	ldr	r3, [pc, #8]	@ (8003a0c <HAL_RCC_OscConfig+0x32c>)
 8003a04:	2101      	movs	r1, #1
 8003a06:	430a      	orrs	r2, r1
 8003a08:	621a      	str	r2, [r3, #32]
 8003a0a:	e035      	b.n	8003a78 <HAL_RCC_OscConfig+0x398>
 8003a0c:	40021000 	.word	0x40021000
 8003a10:	fffeffff 	.word	0xfffeffff
 8003a14:	fffbffff 	.word	0xfffbffff
 8003a18:	40007000 	.word	0x40007000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10c      	bne.n	8003a3e <HAL_RCC_OscConfig+0x35e>
 8003a24:	4bb6      	ldr	r3, [pc, #728]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003a26:	6a1a      	ldr	r2, [r3, #32]
 8003a28:	4bb5      	ldr	r3, [pc, #724]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	438a      	bics	r2, r1
 8003a2e:	621a      	str	r2, [r3, #32]
 8003a30:	4bb3      	ldr	r3, [pc, #716]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003a32:	6a1a      	ldr	r2, [r3, #32]
 8003a34:	4bb2      	ldr	r3, [pc, #712]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003a36:	2104      	movs	r1, #4
 8003a38:	438a      	bics	r2, r1
 8003a3a:	621a      	str	r2, [r3, #32]
 8003a3c:	e01c      	b.n	8003a78 <HAL_RCC_OscConfig+0x398>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b05      	cmp	r3, #5
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x380>
 8003a46:	4bae      	ldr	r3, [pc, #696]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003a48:	6a1a      	ldr	r2, [r3, #32]
 8003a4a:	4bad      	ldr	r3, [pc, #692]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003a4c:	2104      	movs	r1, #4
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	621a      	str	r2, [r3, #32]
 8003a52:	4bab      	ldr	r3, [pc, #684]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003a54:	6a1a      	ldr	r2, [r3, #32]
 8003a56:	4baa      	ldr	r3, [pc, #680]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003a58:	2101      	movs	r1, #1
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	621a      	str	r2, [r3, #32]
 8003a5e:	e00b      	b.n	8003a78 <HAL_RCC_OscConfig+0x398>
 8003a60:	4ba7      	ldr	r3, [pc, #668]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003a62:	6a1a      	ldr	r2, [r3, #32]
 8003a64:	4ba6      	ldr	r3, [pc, #664]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003a66:	2101      	movs	r1, #1
 8003a68:	438a      	bics	r2, r1
 8003a6a:	621a      	str	r2, [r3, #32]
 8003a6c:	4ba4      	ldr	r3, [pc, #656]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003a6e:	6a1a      	ldr	r2, [r3, #32]
 8003a70:	4ba3      	ldr	r3, [pc, #652]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003a72:	2104      	movs	r1, #4
 8003a74:	438a      	bics	r2, r1
 8003a76:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d014      	beq.n	8003aaa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a80:	f7ff f9fc 	bl	8002e7c <HAL_GetTick>
 8003a84:	0003      	movs	r3, r0
 8003a86:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a88:	e009      	b.n	8003a9e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8a:	f7ff f9f7 	bl	8002e7c <HAL_GetTick>
 8003a8e:	0002      	movs	r2, r0
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	4a9b      	ldr	r2, [pc, #620]	@ (8003d04 <HAL_RCC_OscConfig+0x624>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e12b      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9e:	4b98      	ldr	r3, [pc, #608]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x3aa>
 8003aa8:	e013      	b.n	8003ad2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aaa:	f7ff f9e7 	bl	8002e7c <HAL_GetTick>
 8003aae:	0003      	movs	r3, r0
 8003ab0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab2:	e009      	b.n	8003ac8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab4:	f7ff f9e2 	bl	8002e7c <HAL_GetTick>
 8003ab8:	0002      	movs	r2, r0
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	4a91      	ldr	r2, [pc, #580]	@ (8003d04 <HAL_RCC_OscConfig+0x624>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e116      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac8:	4b8d      	ldr	r3, [pc, #564]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	2202      	movs	r2, #2
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d1f0      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ad2:	231f      	movs	r3, #31
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d105      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003adc:	4b88      	ldr	r3, [pc, #544]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003ade:	69da      	ldr	r2, [r3, #28]
 8003ae0:	4b87      	ldr	r3, [pc, #540]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003ae2:	4989      	ldr	r1, [pc, #548]	@ (8003d08 <HAL_RCC_OscConfig+0x628>)
 8003ae4:	400a      	ands	r2, r1
 8003ae6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2210      	movs	r2, #16
 8003aee:	4013      	ands	r3, r2
 8003af0:	d063      	beq.n	8003bba <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	695b      	ldr	r3, [r3, #20]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d12a      	bne.n	8003b50 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003afa:	4b81      	ldr	r3, [pc, #516]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003afc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003afe:	4b80      	ldr	r3, [pc, #512]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003b00:	2104      	movs	r1, #4
 8003b02:	430a      	orrs	r2, r1
 8003b04:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003b06:	4b7e      	ldr	r3, [pc, #504]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003b08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b0a:	4b7d      	ldr	r3, [pc, #500]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b12:	f7ff f9b3 	bl	8002e7c <HAL_GetTick>
 8003b16:	0003      	movs	r3, r0
 8003b18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b1c:	f7ff f9ae 	bl	8002e7c <HAL_GetTick>
 8003b20:	0002      	movs	r2, r0
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e0e3      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003b2e:	4b74      	ldr	r3, [pc, #464]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b32:	2202      	movs	r2, #2
 8003b34:	4013      	ands	r3, r2
 8003b36:	d0f1      	beq.n	8003b1c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003b38:	4b71      	ldr	r3, [pc, #452]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3c:	22f8      	movs	r2, #248	@ 0xf8
 8003b3e:	4393      	bics	r3, r2
 8003b40:	0019      	movs	r1, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	00da      	lsls	r2, r3, #3
 8003b48:	4b6d      	ldr	r3, [pc, #436]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b4e:	e034      	b.n	8003bba <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	3305      	adds	r3, #5
 8003b56:	d111      	bne.n	8003b7c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003b58:	4b69      	ldr	r3, [pc, #420]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003b5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b5c:	4b68      	ldr	r3, [pc, #416]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003b5e:	2104      	movs	r1, #4
 8003b60:	438a      	bics	r2, r1
 8003b62:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003b64:	4b66      	ldr	r3, [pc, #408]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b68:	22f8      	movs	r2, #248	@ 0xf8
 8003b6a:	4393      	bics	r3, r2
 8003b6c:	0019      	movs	r1, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	00da      	lsls	r2, r3, #3
 8003b74:	4b62      	ldr	r3, [pc, #392]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003b76:	430a      	orrs	r2, r1
 8003b78:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b7a:	e01e      	b.n	8003bba <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003b7c:	4b60      	ldr	r3, [pc, #384]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003b7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b80:	4b5f      	ldr	r3, [pc, #380]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003b82:	2104      	movs	r1, #4
 8003b84:	430a      	orrs	r2, r1
 8003b86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003b88:	4b5d      	ldr	r3, [pc, #372]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003b8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b8c:	4b5c      	ldr	r3, [pc, #368]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003b8e:	2101      	movs	r1, #1
 8003b90:	438a      	bics	r2, r1
 8003b92:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b94:	f7ff f972 	bl	8002e7c <HAL_GetTick>
 8003b98:	0003      	movs	r3, r0
 8003b9a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003b9e:	f7ff f96d 	bl	8002e7c <HAL_GetTick>
 8003ba2:	0002      	movs	r2, r0
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e0a2      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003bb0:	4b53      	ldr	r3, [pc, #332]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003bb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d1f1      	bne.n	8003b9e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d100      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4e4>
 8003bc2:	e097      	b.n	8003cf4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bc4:	4b4e      	ldr	r3, [pc, #312]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	220c      	movs	r2, #12
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d100      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x4f2>
 8003bd0:	e06b      	b.n	8003caa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d14c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bda:	4b49      	ldr	r3, [pc, #292]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4b48      	ldr	r3, [pc, #288]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003be0:	494a      	ldr	r1, [pc, #296]	@ (8003d0c <HAL_RCC_OscConfig+0x62c>)
 8003be2:	400a      	ands	r2, r1
 8003be4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be6:	f7ff f949 	bl	8002e7c <HAL_GetTick>
 8003bea:	0003      	movs	r3, r0
 8003bec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf0:	f7ff f944 	bl	8002e7c <HAL_GetTick>
 8003bf4:	0002      	movs	r2, r0
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e079      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c02:	4b3f      	ldr	r3, [pc, #252]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	2380      	movs	r3, #128	@ 0x80
 8003c08:	049b      	lsls	r3, r3, #18
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c0e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c12:	220f      	movs	r2, #15
 8003c14:	4393      	bics	r3, r2
 8003c16:	0019      	movs	r1, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c1c:	4b38      	ldr	r3, [pc, #224]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c22:	4b37      	ldr	r3, [pc, #220]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	4a3a      	ldr	r2, [pc, #232]	@ (8003d10 <HAL_RCC_OscConfig+0x630>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	0019      	movs	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	431a      	orrs	r2, r3
 8003c36:	4b32      	ldr	r3, [pc, #200]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c3c:	4b30      	ldr	r3, [pc, #192]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4b2f      	ldr	r3, [pc, #188]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003c42:	2180      	movs	r1, #128	@ 0x80
 8003c44:	0449      	lsls	r1, r1, #17
 8003c46:	430a      	orrs	r2, r1
 8003c48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4a:	f7ff f917 	bl	8002e7c <HAL_GetTick>
 8003c4e:	0003      	movs	r3, r0
 8003c50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c54:	f7ff f912 	bl	8002e7c <HAL_GetTick>
 8003c58:	0002      	movs	r2, r0
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e047      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c66:	4b26      	ldr	r3, [pc, #152]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	2380      	movs	r3, #128	@ 0x80
 8003c6c:	049b      	lsls	r3, r3, #18
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0x574>
 8003c72:	e03f      	b.n	8003cf4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c74:	4b22      	ldr	r3, [pc, #136]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	4b21      	ldr	r3, [pc, #132]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003c7a:	4924      	ldr	r1, [pc, #144]	@ (8003d0c <HAL_RCC_OscConfig+0x62c>)
 8003c7c:	400a      	ands	r2, r1
 8003c7e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7ff f8fc 	bl	8002e7c <HAL_GetTick>
 8003c84:	0003      	movs	r3, r0
 8003c86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c8a:	f7ff f8f7 	bl	8002e7c <HAL_GetTick>
 8003c8e:	0002      	movs	r2, r0
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e02c      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c9c:	4b18      	ldr	r3, [pc, #96]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	2380      	movs	r3, #128	@ 0x80
 8003ca2:	049b      	lsls	r3, r3, #18
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d1f0      	bne.n	8003c8a <HAL_RCC_OscConfig+0x5aa>
 8003ca8:	e024      	b.n	8003cf4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e01f      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003cb6:	4b12      	ldr	r3, [pc, #72]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003cbc:	4b10      	ldr	r3, [pc, #64]	@ (8003d00 <HAL_RCC_OscConfig+0x620>)
 8003cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	2380      	movs	r3, #128	@ 0x80
 8003cc6:	025b      	lsls	r3, r3, #9
 8003cc8:	401a      	ands	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d10e      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	220f      	movs	r2, #15
 8003cd6:	401a      	ands	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d107      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	23f0      	movs	r3, #240	@ 0xf0
 8003ce4:	039b      	lsls	r3, r3, #14
 8003ce6:	401a      	ands	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b008      	add	sp, #32
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			@ (mov r8, r8)
 8003d00:	40021000 	.word	0x40021000
 8003d04:	00001388 	.word	0x00001388
 8003d08:	efffffff 	.word	0xefffffff
 8003d0c:	feffffff 	.word	0xfeffffff
 8003d10:	ffc2ffff 	.word	0xffc2ffff

08003d14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0b3      	b.n	8003e90 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d28:	4b5b      	ldr	r3, [pc, #364]	@ (8003e98 <HAL_RCC_ClockConfig+0x184>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	4013      	ands	r3, r2
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d911      	bls.n	8003d5a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b58      	ldr	r3, [pc, #352]	@ (8003e98 <HAL_RCC_ClockConfig+0x184>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	4393      	bics	r3, r2
 8003d3e:	0019      	movs	r1, r3
 8003d40:	4b55      	ldr	r3, [pc, #340]	@ (8003e98 <HAL_RCC_ClockConfig+0x184>)
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d48:	4b53      	ldr	r3, [pc, #332]	@ (8003e98 <HAL_RCC_ClockConfig+0x184>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	4013      	ands	r3, r2
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d001      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e09a      	b.n	8003e90 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	4013      	ands	r3, r2
 8003d62:	d015      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2204      	movs	r2, #4
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	d006      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003d6e:	4b4b      	ldr	r3, [pc, #300]	@ (8003e9c <HAL_RCC_ClockConfig+0x188>)
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	4b4a      	ldr	r3, [pc, #296]	@ (8003e9c <HAL_RCC_ClockConfig+0x188>)
 8003d74:	21e0      	movs	r1, #224	@ 0xe0
 8003d76:	00c9      	lsls	r1, r1, #3
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d7c:	4b47      	ldr	r3, [pc, #284]	@ (8003e9c <HAL_RCC_ClockConfig+0x188>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	22f0      	movs	r2, #240	@ 0xf0
 8003d82:	4393      	bics	r3, r2
 8003d84:	0019      	movs	r1, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	4b44      	ldr	r3, [pc, #272]	@ (8003e9c <HAL_RCC_ClockConfig+0x188>)
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2201      	movs	r2, #1
 8003d96:	4013      	ands	r3, r2
 8003d98:	d040      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d107      	bne.n	8003db2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da2:	4b3e      	ldr	r3, [pc, #248]	@ (8003e9c <HAL_RCC_ClockConfig+0x188>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	2380      	movs	r3, #128	@ 0x80
 8003da8:	029b      	lsls	r3, r3, #10
 8003daa:	4013      	ands	r3, r2
 8003dac:	d114      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e06e      	b.n	8003e90 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dba:	4b38      	ldr	r3, [pc, #224]	@ (8003e9c <HAL_RCC_ClockConfig+0x188>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	2380      	movs	r3, #128	@ 0x80
 8003dc0:	049b      	lsls	r3, r3, #18
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d108      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e062      	b.n	8003e90 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dca:	4b34      	ldr	r3, [pc, #208]	@ (8003e9c <HAL_RCC_ClockConfig+0x188>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d101      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e05b      	b.n	8003e90 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dd8:	4b30      	ldr	r3, [pc, #192]	@ (8003e9c <HAL_RCC_ClockConfig+0x188>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2203      	movs	r2, #3
 8003dde:	4393      	bics	r3, r2
 8003de0:	0019      	movs	r1, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	4b2d      	ldr	r3, [pc, #180]	@ (8003e9c <HAL_RCC_ClockConfig+0x188>)
 8003de8:	430a      	orrs	r2, r1
 8003dea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dec:	f7ff f846 	bl	8002e7c <HAL_GetTick>
 8003df0:	0003      	movs	r3, r0
 8003df2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df4:	e009      	b.n	8003e0a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df6:	f7ff f841 	bl	8002e7c <HAL_GetTick>
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	4a27      	ldr	r2, [pc, #156]	@ (8003ea0 <HAL_RCC_ClockConfig+0x18c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e042      	b.n	8003e90 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	4b24      	ldr	r3, [pc, #144]	@ (8003e9c <HAL_RCC_ClockConfig+0x188>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	220c      	movs	r2, #12
 8003e10:	401a      	ands	r2, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d1ec      	bne.n	8003df6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8003e98 <HAL_RCC_ClockConfig+0x184>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2201      	movs	r2, #1
 8003e22:	4013      	ands	r3, r2
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d211      	bcs.n	8003e4e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003e98 <HAL_RCC_ClockConfig+0x184>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	4393      	bics	r3, r2
 8003e32:	0019      	movs	r1, r3
 8003e34:	4b18      	ldr	r3, [pc, #96]	@ (8003e98 <HAL_RCC_ClockConfig+0x184>)
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3c:	4b16      	ldr	r3, [pc, #88]	@ (8003e98 <HAL_RCC_ClockConfig+0x184>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2201      	movs	r2, #1
 8003e42:	4013      	ands	r3, r2
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d001      	beq.n	8003e4e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e020      	b.n	8003e90 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2204      	movs	r2, #4
 8003e54:	4013      	ands	r3, r2
 8003e56:	d009      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003e58:	4b10      	ldr	r3, [pc, #64]	@ (8003e9c <HAL_RCC_ClockConfig+0x188>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4a11      	ldr	r2, [pc, #68]	@ (8003ea4 <HAL_RCC_ClockConfig+0x190>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	0019      	movs	r1, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	4b0d      	ldr	r3, [pc, #52]	@ (8003e9c <HAL_RCC_ClockConfig+0x188>)
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003e6c:	f000 f820 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 8003e70:	0001      	movs	r1, r0
 8003e72:	4b0a      	ldr	r3, [pc, #40]	@ (8003e9c <HAL_RCC_ClockConfig+0x188>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	091b      	lsrs	r3, r3, #4
 8003e78:	220f      	movs	r2, #15
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8003ea8 <HAL_RCC_ClockConfig+0x194>)
 8003e7e:	5cd3      	ldrb	r3, [r2, r3]
 8003e80:	000a      	movs	r2, r1
 8003e82:	40da      	lsrs	r2, r3
 8003e84:	4b09      	ldr	r3, [pc, #36]	@ (8003eac <HAL_RCC_ClockConfig+0x198>)
 8003e86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f7fe ffb1 	bl	8002df0 <HAL_InitTick>
  
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	0018      	movs	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b004      	add	sp, #16
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40022000 	.word	0x40022000
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	00001388 	.word	0x00001388
 8003ea4:	fffff8ff 	.word	0xfffff8ff
 8003ea8:	08009eec 	.word	0x08009eec
 8003eac:	20000000 	.word	0x20000000

08003eb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003eca:	4b20      	ldr	r3, [pc, #128]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	220c      	movs	r2, #12
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d002      	beq.n	8003ee0 <HAL_RCC_GetSysClockFreq+0x30>
 8003eda:	2b08      	cmp	r3, #8
 8003edc:	d003      	beq.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x36>
 8003ede:	e02c      	b.n	8003f3a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ee2:	613b      	str	r3, [r7, #16]
      break;
 8003ee4:	e02c      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	0c9b      	lsrs	r3, r3, #18
 8003eea:	220f      	movs	r2, #15
 8003eec:	4013      	ands	r3, r2
 8003eee:	4a19      	ldr	r2, [pc, #100]	@ (8003f54 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ef0:	5cd3      	ldrb	r3, [r2, r3]
 8003ef2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003ef4:	4b15      	ldr	r3, [pc, #84]	@ (8003f4c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef8:	220f      	movs	r2, #15
 8003efa:	4013      	ands	r3, r2
 8003efc:	4a16      	ldr	r2, [pc, #88]	@ (8003f58 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003efe:	5cd3      	ldrb	r3, [r2, r3]
 8003f00:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	2380      	movs	r3, #128	@ 0x80
 8003f06:	025b      	lsls	r3, r3, #9
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d009      	beq.n	8003f20 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	4810      	ldr	r0, [pc, #64]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f10:	f7fc f916 	bl	8000140 <__udivsi3>
 8003f14:	0003      	movs	r3, r0
 8003f16:	001a      	movs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4353      	muls	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	e009      	b.n	8003f34 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	000a      	movs	r2, r1
 8003f24:	0152      	lsls	r2, r2, #5
 8003f26:	1a52      	subs	r2, r2, r1
 8003f28:	0193      	lsls	r3, r2, #6
 8003f2a:	1a9b      	subs	r3, r3, r2
 8003f2c:	00db      	lsls	r3, r3, #3
 8003f2e:	185b      	adds	r3, r3, r1
 8003f30:	021b      	lsls	r3, r3, #8
 8003f32:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	613b      	str	r3, [r7, #16]
      break;
 8003f38:	e002      	b.n	8003f40 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f3a:	4b05      	ldr	r3, [pc, #20]	@ (8003f50 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f3c:	613b      	str	r3, [r7, #16]
      break;
 8003f3e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003f40:	693b      	ldr	r3, [r7, #16]
}
 8003f42:	0018      	movs	r0, r3
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b006      	add	sp, #24
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	007a1200 	.word	0x007a1200
 8003f54:	08009f04 	.word	0x08009f04
 8003f58:	08009f14 	.word	0x08009f14

08003f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f60:	4b02      	ldr	r3, [pc, #8]	@ (8003f6c <HAL_RCC_GetHCLKFreq+0x10>)
 8003f62:	681b      	ldr	r3, [r3, #0]
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			@ (mov r8, r8)
 8003f6c:	20000000 	.word	0x20000000

08003f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003f74:	f7ff fff2 	bl	8003f5c <HAL_RCC_GetHCLKFreq>
 8003f78:	0001      	movs	r1, r0
 8003f7a:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	0a1b      	lsrs	r3, r3, #8
 8003f80:	2207      	movs	r2, #7
 8003f82:	4013      	ands	r3, r2
 8003f84:	4a04      	ldr	r2, [pc, #16]	@ (8003f98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f86:	5cd3      	ldrb	r3, [r2, r3]
 8003f88:	40d9      	lsrs	r1, r3
 8003f8a:	000b      	movs	r3, r1
}    
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			@ (mov r8, r8)
 8003f94:	40021000 	.word	0x40021000
 8003f98:	08009efc 	.word	0x08009efc

08003f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	2380      	movs	r3, #128	@ 0x80
 8003fb2:	025b      	lsls	r3, r3, #9
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d100      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003fb8:	e08e      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003fba:	2017      	movs	r0, #23
 8003fbc:	183b      	adds	r3, r7, r0
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc2:	4b57      	ldr	r3, [pc, #348]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003fc4:	69da      	ldr	r2, [r3, #28]
 8003fc6:	2380      	movs	r3, #128	@ 0x80
 8003fc8:	055b      	lsls	r3, r3, #21
 8003fca:	4013      	ands	r3, r2
 8003fcc:	d110      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fce:	4b54      	ldr	r3, [pc, #336]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003fd0:	69da      	ldr	r2, [r3, #28]
 8003fd2:	4b53      	ldr	r3, [pc, #332]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003fd4:	2180      	movs	r1, #128	@ 0x80
 8003fd6:	0549      	lsls	r1, r1, #21
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	61da      	str	r2, [r3, #28]
 8003fdc:	4b50      	ldr	r3, [pc, #320]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003fde:	69da      	ldr	r2, [r3, #28]
 8003fe0:	2380      	movs	r3, #128	@ 0x80
 8003fe2:	055b      	lsls	r3, r3, #21
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60bb      	str	r3, [r7, #8]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fea:	183b      	adds	r3, r7, r0
 8003fec:	2201      	movs	r2, #1
 8003fee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff0:	4b4c      	ldr	r3, [pc, #304]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	2380      	movs	r3, #128	@ 0x80
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d11a      	bne.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ffc:	4b49      	ldr	r3, [pc, #292]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4b48      	ldr	r3, [pc, #288]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004002:	2180      	movs	r1, #128	@ 0x80
 8004004:	0049      	lsls	r1, r1, #1
 8004006:	430a      	orrs	r2, r1
 8004008:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400a:	f7fe ff37 	bl	8002e7c <HAL_GetTick>
 800400e:	0003      	movs	r3, r0
 8004010:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004012:	e008      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004014:	f7fe ff32 	bl	8002e7c <HAL_GetTick>
 8004018:	0002      	movs	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b64      	cmp	r3, #100	@ 0x64
 8004020:	d901      	bls.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e077      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004026:	4b3f      	ldr	r3, [pc, #252]	@ (8004124 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	2380      	movs	r3, #128	@ 0x80
 800402c:	005b      	lsls	r3, r3, #1
 800402e:	4013      	ands	r3, r2
 8004030:	d0f0      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004032:	4b3b      	ldr	r3, [pc, #236]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004034:	6a1a      	ldr	r2, [r3, #32]
 8004036:	23c0      	movs	r3, #192	@ 0xc0
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4013      	ands	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d034      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	23c0      	movs	r3, #192	@ 0xc0
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4013      	ands	r3, r2
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	429a      	cmp	r2, r3
 8004052:	d02c      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004054:	4b32      	ldr	r3, [pc, #200]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	4a33      	ldr	r2, [pc, #204]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800405a:	4013      	ands	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800405e:	4b30      	ldr	r3, [pc, #192]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004060:	6a1a      	ldr	r2, [r3, #32]
 8004062:	4b2f      	ldr	r3, [pc, #188]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004064:	2180      	movs	r1, #128	@ 0x80
 8004066:	0249      	lsls	r1, r1, #9
 8004068:	430a      	orrs	r2, r1
 800406a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800406c:	4b2c      	ldr	r3, [pc, #176]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800406e:	6a1a      	ldr	r2, [r3, #32]
 8004070:	4b2b      	ldr	r3, [pc, #172]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004072:	492e      	ldr	r1, [pc, #184]	@ (800412c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004074:	400a      	ands	r2, r1
 8004076:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004078:	4b29      	ldr	r3, [pc, #164]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	4013      	ands	r3, r2
 8004084:	d013      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004086:	f7fe fef9 	bl	8002e7c <HAL_GetTick>
 800408a:	0003      	movs	r3, r0
 800408c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800408e:	e009      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004090:	f7fe fef4 	bl	8002e7c <HAL_GetTick>
 8004094:	0002      	movs	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	4a25      	ldr	r2, [pc, #148]	@ (8004130 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d901      	bls.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e038      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	2202      	movs	r2, #2
 80040aa:	4013      	ands	r3, r2
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ae:	4b1c      	ldr	r3, [pc, #112]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004128 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	0019      	movs	r1, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	4b18      	ldr	r3, [pc, #96]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040be:	430a      	orrs	r2, r1
 80040c0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040c2:	2317      	movs	r3, #23
 80040c4:	18fb      	adds	r3, r7, r3
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d105      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040cc:	4b14      	ldr	r3, [pc, #80]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040ce:	69da      	ldr	r2, [r3, #28]
 80040d0:	4b13      	ldr	r3, [pc, #76]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040d2:	4918      	ldr	r1, [pc, #96]	@ (8004134 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80040d4:	400a      	ands	r2, r1
 80040d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2201      	movs	r2, #1
 80040de:	4013      	ands	r3, r2
 80040e0:	d009      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e6:	2203      	movs	r2, #3
 80040e8:	4393      	bics	r3, r2
 80040ea:	0019      	movs	r1, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80040f2:	430a      	orrs	r2, r1
 80040f4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2220      	movs	r2, #32
 80040fc:	4013      	ands	r3, r2
 80040fe:	d009      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004100:	4b07      	ldr	r3, [pc, #28]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004104:	2210      	movs	r2, #16
 8004106:	4393      	bics	r3, r2
 8004108:	0019      	movs	r1, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	4b04      	ldr	r3, [pc, #16]	@ (8004120 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004110:	430a      	orrs	r2, r1
 8004112:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	0018      	movs	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	b006      	add	sp, #24
 800411c:	bd80      	pop	{r7, pc}
 800411e:	46c0      	nop			@ (mov r8, r8)
 8004120:	40021000 	.word	0x40021000
 8004124:	40007000 	.word	0x40007000
 8004128:	fffffcff 	.word	0xfffffcff
 800412c:	fffeffff 	.word	0xfffeffff
 8004130:	00001388 	.word	0x00001388
 8004134:	efffffff 	.word	0xefffffff

08004138 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e044      	b.n	80041d4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d107      	bne.n	8004162 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2278      	movs	r2, #120	@ 0x78
 8004156:	2100      	movs	r1, #0
 8004158:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	0018      	movs	r0, r3
 800415e:	f7fe fccb 	bl	8002af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2224      	movs	r2, #36	@ 0x24
 8004166:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2101      	movs	r1, #1
 8004174:	438a      	bics	r2, r1
 8004176:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	0018      	movs	r0, r3
 8004184:	f000 fd46 	bl	8004c14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	0018      	movs	r0, r3
 800418c:	f000 fc02 	bl	8004994 <UART_SetConfig>
 8004190:	0003      	movs	r3, r0
 8004192:	2b01      	cmp	r3, #1
 8004194:	d101      	bne.n	800419a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e01c      	b.n	80041d4 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	490d      	ldr	r1, [pc, #52]	@ (80041dc <HAL_UART_Init+0xa4>)
 80041a6:	400a      	ands	r2, r1
 80041a8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2108      	movs	r1, #8
 80041b6:	438a      	bics	r2, r1
 80041b8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2101      	movs	r1, #1
 80041c6:	430a      	orrs	r2, r1
 80041c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	0018      	movs	r0, r3
 80041ce:	f000 fdd5 	bl	8004d7c <UART_CheckIdleState>
 80041d2:	0003      	movs	r3, r0
}
 80041d4:	0018      	movs	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b002      	add	sp, #8
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	fffff7ff 	.word	0xfffff7ff

080041e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	@ 0x28
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	1dbb      	adds	r3, r7, #6
 80041ee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	d000      	beq.n	80041fa <HAL_UART_Transmit+0x1a>
 80041f8:	e08c      	b.n	8004314 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_UART_Transmit+0x28>
 8004200:	1dbb      	adds	r3, r7, #6
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e084      	b.n	8004316 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	2380      	movs	r3, #128	@ 0x80
 8004212:	015b      	lsls	r3, r3, #5
 8004214:	429a      	cmp	r2, r3
 8004216:	d109      	bne.n	800422c <HAL_UART_Transmit+0x4c>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d105      	bne.n	800422c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	2201      	movs	r2, #1
 8004224:	4013      	ands	r3, r2
 8004226:	d001      	beq.n	800422c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e074      	b.n	8004316 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2284      	movs	r2, #132	@ 0x84
 8004230:	2100      	movs	r1, #0
 8004232:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2221      	movs	r2, #33	@ 0x21
 8004238:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800423a:	f7fe fe1f 	bl	8002e7c <HAL_GetTick>
 800423e:	0003      	movs	r3, r0
 8004240:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	1dba      	adds	r2, r7, #6
 8004246:	2150      	movs	r1, #80	@ 0x50
 8004248:	8812      	ldrh	r2, [r2, #0]
 800424a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	1dba      	adds	r2, r7, #6
 8004250:	2152      	movs	r1, #82	@ 0x52
 8004252:	8812      	ldrh	r2, [r2, #0]
 8004254:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	2380      	movs	r3, #128	@ 0x80
 800425c:	015b      	lsls	r3, r3, #5
 800425e:	429a      	cmp	r2, r3
 8004260:	d108      	bne.n	8004274 <HAL_UART_Transmit+0x94>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d104      	bne.n	8004274 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	e003      	b.n	800427c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004278:	2300      	movs	r3, #0
 800427a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800427c:	e02f      	b.n	80042de <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	0013      	movs	r3, r2
 8004288:	2200      	movs	r2, #0
 800428a:	2180      	movs	r1, #128	@ 0x80
 800428c:	f000 fe1e 	bl	8004ecc <UART_WaitOnFlagUntilTimeout>
 8004290:	1e03      	subs	r3, r0, #0
 8004292:	d004      	beq.n	800429e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2220      	movs	r2, #32
 8004298:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e03b      	b.n	8004316 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10b      	bne.n	80042bc <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	881a      	ldrh	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	05d2      	lsls	r2, r2, #23
 80042ae:	0dd2      	lsrs	r2, r2, #23
 80042b0:	b292      	uxth	r2, r2
 80042b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	3302      	adds	r3, #2
 80042b8:	61bb      	str	r3, [r7, #24]
 80042ba:	e007      	b.n	80042cc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	781a      	ldrb	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3301      	adds	r3, #1
 80042ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2252      	movs	r2, #82	@ 0x52
 80042d0:	5a9b      	ldrh	r3, [r3, r2]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b299      	uxth	r1, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2252      	movs	r2, #82	@ 0x52
 80042dc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2252      	movs	r2, #82	@ 0x52
 80042e2:	5a9b      	ldrh	r3, [r3, r2]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1c9      	bne.n	800427e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	0013      	movs	r3, r2
 80042f4:	2200      	movs	r2, #0
 80042f6:	2140      	movs	r1, #64	@ 0x40
 80042f8:	f000 fde8 	bl	8004ecc <UART_WaitOnFlagUntilTimeout>
 80042fc:	1e03      	subs	r3, r0, #0
 80042fe:	d004      	beq.n	800430a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e005      	b.n	8004316 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	e000      	b.n	8004316 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
  }
}
 8004316:	0018      	movs	r0, r3
 8004318:	46bd      	mov	sp, r7
 800431a:	b008      	add	sp, #32
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b088      	sub	sp, #32
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	1dbb      	adds	r3, r7, #6
 800432a:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2280      	movs	r2, #128	@ 0x80
 8004330:	589b      	ldr	r3, [r3, r2]
 8004332:	2b20      	cmp	r3, #32
 8004334:	d145      	bne.n	80043c2 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_UART_Receive_IT+0x26>
 800433c:	1dbb      	adds	r3, r7, #6
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e03d      	b.n	80043c4 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	2380      	movs	r3, #128	@ 0x80
 800434e:	015b      	lsls	r3, r3, #5
 8004350:	429a      	cmp	r2, r3
 8004352:	d109      	bne.n	8004368 <HAL_UART_Receive_IT+0x4a>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d105      	bne.n	8004368 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2201      	movs	r2, #1
 8004360:	4013      	ands	r3, r2
 8004362:	d001      	beq.n	8004368 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e02d      	b.n	80043c4 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	2380      	movs	r3, #128	@ 0x80
 8004376:	041b      	lsls	r3, r3, #16
 8004378:	4013      	ands	r3, r2
 800437a:	d019      	beq.n	80043b0 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800437c:	f3ef 8310 	mrs	r3, PRIMASK
 8004380:	613b      	str	r3, [r7, #16]
  return(result);
 8004382:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004384:	61fb      	str	r3, [r7, #28]
 8004386:	2301      	movs	r3, #1
 8004388:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f383 8810 	msr	PRIMASK, r3
}
 8004390:	46c0      	nop			@ (mov r8, r8)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2180      	movs	r1, #128	@ 0x80
 800439e:	04c9      	lsls	r1, r1, #19
 80043a0:	430a      	orrs	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	f383 8810 	msr	PRIMASK, r3
}
 80043ae:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043b0:	1dbb      	adds	r3, r7, #6
 80043b2:	881a      	ldrh	r2, [r3, #0]
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	0018      	movs	r0, r3
 80043ba:	f000 fdf7 	bl	8004fac <UART_Start_Receive_IT>
 80043be:	0003      	movs	r3, r0
 80043c0:	e000      	b.n	80043c4 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80043c2:	2302      	movs	r3, #2
  }
}
 80043c4:	0018      	movs	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b008      	add	sp, #32
 80043ca:	bd80      	pop	{r7, pc}

080043cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043cc:	b590      	push	{r4, r7, lr}
 80043ce:	b0ab      	sub	sp, #172	@ 0xac
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	22a4      	movs	r2, #164	@ 0xa4
 80043dc:	18b9      	adds	r1, r7, r2
 80043de:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	20a0      	movs	r0, #160	@ 0xa0
 80043e8:	1839      	adds	r1, r7, r0
 80043ea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	219c      	movs	r1, #156	@ 0x9c
 80043f4:	1879      	adds	r1, r7, r1
 80043f6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80043f8:	0011      	movs	r1, r2
 80043fa:	18bb      	adds	r3, r7, r2
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a99      	ldr	r2, [pc, #612]	@ (8004664 <HAL_UART_IRQHandler+0x298>)
 8004400:	4013      	ands	r3, r2
 8004402:	2298      	movs	r2, #152	@ 0x98
 8004404:	18bc      	adds	r4, r7, r2
 8004406:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004408:	18bb      	adds	r3, r7, r2
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d114      	bne.n	800443a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004410:	187b      	adds	r3, r7, r1
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2220      	movs	r2, #32
 8004416:	4013      	ands	r3, r2
 8004418:	d00f      	beq.n	800443a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800441a:	183b      	adds	r3, r7, r0
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2220      	movs	r2, #32
 8004420:	4013      	ands	r3, r2
 8004422:	d00a      	beq.n	800443a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004428:	2b00      	cmp	r3, #0
 800442a:	d100      	bne.n	800442e <HAL_UART_IRQHandler+0x62>
 800442c:	e286      	b.n	800493c <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	0010      	movs	r0, r2
 8004436:	4798      	blx	r3
      }
      return;
 8004438:	e280      	b.n	800493c <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800443a:	2398      	movs	r3, #152	@ 0x98
 800443c:	18fb      	adds	r3, r7, r3
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d100      	bne.n	8004446 <HAL_UART_IRQHandler+0x7a>
 8004444:	e114      	b.n	8004670 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004446:	239c      	movs	r3, #156	@ 0x9c
 8004448:	18fb      	adds	r3, r7, r3
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2201      	movs	r2, #1
 800444e:	4013      	ands	r3, r2
 8004450:	d106      	bne.n	8004460 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004452:	23a0      	movs	r3, #160	@ 0xa0
 8004454:	18fb      	adds	r3, r7, r3
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a83      	ldr	r2, [pc, #524]	@ (8004668 <HAL_UART_IRQHandler+0x29c>)
 800445a:	4013      	ands	r3, r2
 800445c:	d100      	bne.n	8004460 <HAL_UART_IRQHandler+0x94>
 800445e:	e107      	b.n	8004670 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004460:	23a4      	movs	r3, #164	@ 0xa4
 8004462:	18fb      	adds	r3, r7, r3
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2201      	movs	r2, #1
 8004468:	4013      	ands	r3, r2
 800446a:	d012      	beq.n	8004492 <HAL_UART_IRQHandler+0xc6>
 800446c:	23a0      	movs	r3, #160	@ 0xa0
 800446e:	18fb      	adds	r3, r7, r3
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	2380      	movs	r3, #128	@ 0x80
 8004474:	005b      	lsls	r3, r3, #1
 8004476:	4013      	ands	r3, r2
 8004478:	d00b      	beq.n	8004492 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2201      	movs	r2, #1
 8004480:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2284      	movs	r2, #132	@ 0x84
 8004486:	589b      	ldr	r3, [r3, r2]
 8004488:	2201      	movs	r2, #1
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2184      	movs	r1, #132	@ 0x84
 8004490:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004492:	23a4      	movs	r3, #164	@ 0xa4
 8004494:	18fb      	adds	r3, r7, r3
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2202      	movs	r2, #2
 800449a:	4013      	ands	r3, r2
 800449c:	d011      	beq.n	80044c2 <HAL_UART_IRQHandler+0xf6>
 800449e:	239c      	movs	r3, #156	@ 0x9c
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2201      	movs	r2, #1
 80044a6:	4013      	ands	r3, r2
 80044a8:	d00b      	beq.n	80044c2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2202      	movs	r2, #2
 80044b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2284      	movs	r2, #132	@ 0x84
 80044b6:	589b      	ldr	r3, [r3, r2]
 80044b8:	2204      	movs	r2, #4
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2184      	movs	r1, #132	@ 0x84
 80044c0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044c2:	23a4      	movs	r3, #164	@ 0xa4
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2204      	movs	r2, #4
 80044ca:	4013      	ands	r3, r2
 80044cc:	d011      	beq.n	80044f2 <HAL_UART_IRQHandler+0x126>
 80044ce:	239c      	movs	r3, #156	@ 0x9c
 80044d0:	18fb      	adds	r3, r7, r3
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2201      	movs	r2, #1
 80044d6:	4013      	ands	r3, r2
 80044d8:	d00b      	beq.n	80044f2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2204      	movs	r2, #4
 80044e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2284      	movs	r2, #132	@ 0x84
 80044e6:	589b      	ldr	r3, [r3, r2]
 80044e8:	2202      	movs	r2, #2
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2184      	movs	r1, #132	@ 0x84
 80044f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044f2:	23a4      	movs	r3, #164	@ 0xa4
 80044f4:	18fb      	adds	r3, r7, r3
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2208      	movs	r2, #8
 80044fa:	4013      	ands	r3, r2
 80044fc:	d017      	beq.n	800452e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80044fe:	23a0      	movs	r3, #160	@ 0xa0
 8004500:	18fb      	adds	r3, r7, r3
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2220      	movs	r2, #32
 8004506:	4013      	ands	r3, r2
 8004508:	d105      	bne.n	8004516 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800450a:	239c      	movs	r3, #156	@ 0x9c
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2201      	movs	r2, #1
 8004512:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004514:	d00b      	beq.n	800452e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2208      	movs	r2, #8
 800451c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2284      	movs	r2, #132	@ 0x84
 8004522:	589b      	ldr	r3, [r3, r2]
 8004524:	2208      	movs	r2, #8
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2184      	movs	r1, #132	@ 0x84
 800452c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800452e:	23a4      	movs	r3, #164	@ 0xa4
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	2380      	movs	r3, #128	@ 0x80
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	4013      	ands	r3, r2
 800453a:	d013      	beq.n	8004564 <HAL_UART_IRQHandler+0x198>
 800453c:	23a0      	movs	r3, #160	@ 0xa0
 800453e:	18fb      	adds	r3, r7, r3
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	2380      	movs	r3, #128	@ 0x80
 8004544:	04db      	lsls	r3, r3, #19
 8004546:	4013      	ands	r3, r2
 8004548:	d00c      	beq.n	8004564 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2280      	movs	r2, #128	@ 0x80
 8004550:	0112      	lsls	r2, r2, #4
 8004552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2284      	movs	r2, #132	@ 0x84
 8004558:	589b      	ldr	r3, [r3, r2]
 800455a:	2220      	movs	r2, #32
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2184      	movs	r1, #132	@ 0x84
 8004562:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2284      	movs	r2, #132	@ 0x84
 8004568:	589b      	ldr	r3, [r3, r2]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d100      	bne.n	8004570 <HAL_UART_IRQHandler+0x1a4>
 800456e:	e1e7      	b.n	8004940 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004570:	23a4      	movs	r3, #164	@ 0xa4
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2220      	movs	r2, #32
 8004578:	4013      	ands	r3, r2
 800457a:	d00e      	beq.n	800459a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800457c:	23a0      	movs	r3, #160	@ 0xa0
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2220      	movs	r2, #32
 8004584:	4013      	ands	r3, r2
 8004586:	d008      	beq.n	800459a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800458c:	2b00      	cmp	r3, #0
 800458e:	d004      	beq.n	800459a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	0010      	movs	r0, r2
 8004598:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2284      	movs	r2, #132	@ 0x84
 800459e:	589b      	ldr	r3, [r3, r2]
 80045a0:	2194      	movs	r1, #148	@ 0x94
 80045a2:	187a      	adds	r2, r7, r1
 80045a4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2240      	movs	r2, #64	@ 0x40
 80045ae:	4013      	ands	r3, r2
 80045b0:	2b40      	cmp	r3, #64	@ 0x40
 80045b2:	d004      	beq.n	80045be <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045b4:	187b      	adds	r3, r7, r1
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2228      	movs	r2, #40	@ 0x28
 80045ba:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045bc:	d047      	beq.n	800464e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	0018      	movs	r0, r3
 80045c2:	f000 fda9 	bl	8005118 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2240      	movs	r2, #64	@ 0x40
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b40      	cmp	r3, #64	@ 0x40
 80045d2:	d137      	bne.n	8004644 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d4:	f3ef 8310 	mrs	r3, PRIMASK
 80045d8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80045da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045dc:	2090      	movs	r0, #144	@ 0x90
 80045de:	183a      	adds	r2, r7, r0
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	2301      	movs	r3, #1
 80045e4:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045e8:	f383 8810 	msr	PRIMASK, r3
}
 80045ec:	46c0      	nop			@ (mov r8, r8)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2140      	movs	r1, #64	@ 0x40
 80045fa:	438a      	bics	r2, r1
 80045fc:	609a      	str	r2, [r3, #8]
 80045fe:	183b      	adds	r3, r7, r0
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004604:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004606:	f383 8810 	msr	PRIMASK, r3
}
 800460a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004610:	2b00      	cmp	r3, #0
 8004612:	d012      	beq.n	800463a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004618:	4a14      	ldr	r2, [pc, #80]	@ (800466c <HAL_UART_IRQHandler+0x2a0>)
 800461a:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004620:	0018      	movs	r0, r3
 8004622:	f7fe fd4b 	bl	80030bc <HAL_DMA_Abort_IT>
 8004626:	1e03      	subs	r3, r0, #0
 8004628:	d01a      	beq.n	8004660 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800462e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004634:	0018      	movs	r0, r3
 8004636:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004638:	e012      	b.n	8004660 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	0018      	movs	r0, r3
 800463e:	f000 f995 	bl	800496c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004642:	e00d      	b.n	8004660 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	0018      	movs	r0, r3
 8004648:	f000 f990 	bl	800496c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800464c:	e008      	b.n	8004660 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	0018      	movs	r0, r3
 8004652:	f000 f98b 	bl	800496c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2284      	movs	r2, #132	@ 0x84
 800465a:	2100      	movs	r1, #0
 800465c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800465e:	e16f      	b.n	8004940 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004660:	46c0      	nop			@ (mov r8, r8)
    return;
 8004662:	e16d      	b.n	8004940 <HAL_UART_IRQHandler+0x574>
 8004664:	0000080f 	.word	0x0000080f
 8004668:	04000120 	.word	0x04000120
 800466c:	080051e1 	.word	0x080051e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004674:	2b01      	cmp	r3, #1
 8004676:	d000      	beq.n	800467a <HAL_UART_IRQHandler+0x2ae>
 8004678:	e139      	b.n	80048ee <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800467a:	23a4      	movs	r3, #164	@ 0xa4
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2210      	movs	r2, #16
 8004682:	4013      	ands	r3, r2
 8004684:	d100      	bne.n	8004688 <HAL_UART_IRQHandler+0x2bc>
 8004686:	e132      	b.n	80048ee <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004688:	23a0      	movs	r3, #160	@ 0xa0
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2210      	movs	r2, #16
 8004690:	4013      	ands	r3, r2
 8004692:	d100      	bne.n	8004696 <HAL_UART_IRQHandler+0x2ca>
 8004694:	e12b      	b.n	80048ee <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2210      	movs	r2, #16
 800469c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2240      	movs	r2, #64	@ 0x40
 80046a6:	4013      	ands	r3, r2
 80046a8:	2b40      	cmp	r3, #64	@ 0x40
 80046aa:	d000      	beq.n	80046ae <HAL_UART_IRQHandler+0x2e2>
 80046ac:	e09f      	b.n	80047ee <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	217e      	movs	r1, #126	@ 0x7e
 80046b8:	187b      	adds	r3, r7, r1
 80046ba:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80046bc:	187b      	adds	r3, r7, r1
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d100      	bne.n	80046c6 <HAL_UART_IRQHandler+0x2fa>
 80046c4:	e13e      	b.n	8004944 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2258      	movs	r2, #88	@ 0x58
 80046ca:	5a9b      	ldrh	r3, [r3, r2]
 80046cc:	187a      	adds	r2, r7, r1
 80046ce:	8812      	ldrh	r2, [r2, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d300      	bcc.n	80046d6 <HAL_UART_IRQHandler+0x30a>
 80046d4:	e136      	b.n	8004944 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	187a      	adds	r2, r7, r1
 80046da:	215a      	movs	r1, #90	@ 0x5a
 80046dc:	8812      	ldrh	r2, [r2, #0]
 80046de:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	2b20      	cmp	r3, #32
 80046e8:	d06f      	beq.n	80047ca <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ea:	f3ef 8310 	mrs	r3, PRIMASK
 80046ee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80046f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046f4:	2301      	movs	r3, #1
 80046f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046fa:	f383 8810 	msr	PRIMASK, r3
}
 80046fe:	46c0      	nop			@ (mov r8, r8)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4992      	ldr	r1, [pc, #584]	@ (8004954 <HAL_UART_IRQHandler+0x588>)
 800470c:	400a      	ands	r2, r1
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004712:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004716:	f383 8810 	msr	PRIMASK, r3
}
 800471a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800471c:	f3ef 8310 	mrs	r3, PRIMASK
 8004720:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004722:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004724:	677b      	str	r3, [r7, #116]	@ 0x74
 8004726:	2301      	movs	r3, #1
 8004728:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800472a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800472c:	f383 8810 	msr	PRIMASK, r3
}
 8004730:	46c0      	nop			@ (mov r8, r8)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2101      	movs	r1, #1
 800473e:	438a      	bics	r2, r1
 8004740:	609a      	str	r2, [r3, #8]
 8004742:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004744:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004748:	f383 8810 	msr	PRIMASK, r3
}
 800474c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800474e:	f3ef 8310 	mrs	r3, PRIMASK
 8004752:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004754:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004756:	673b      	str	r3, [r7, #112]	@ 0x70
 8004758:	2301      	movs	r3, #1
 800475a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800475c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800475e:	f383 8810 	msr	PRIMASK, r3
}
 8004762:	46c0      	nop			@ (mov r8, r8)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2140      	movs	r1, #64	@ 0x40
 8004770:	438a      	bics	r2, r1
 8004772:	609a      	str	r2, [r3, #8]
 8004774:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004776:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800477a:	f383 8810 	msr	PRIMASK, r3
}
 800477e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2280      	movs	r2, #128	@ 0x80
 8004784:	2120      	movs	r1, #32
 8004786:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800478e:	f3ef 8310 	mrs	r3, PRIMASK
 8004792:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004796:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004798:	2301      	movs	r3, #1
 800479a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800479e:	f383 8810 	msr	PRIMASK, r3
}
 80047a2:	46c0      	nop			@ (mov r8, r8)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2110      	movs	r1, #16
 80047b0:	438a      	bics	r2, r1
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80047b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047ba:	f383 8810 	msr	PRIMASK, r3
}
 80047be:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047c4:	0018      	movs	r0, r3
 80047c6:	f7fe fc41 	bl	800304c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2202      	movs	r2, #2
 80047ce:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2258      	movs	r2, #88	@ 0x58
 80047d4:	5a9a      	ldrh	r2, [r3, r2]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	215a      	movs	r1, #90	@ 0x5a
 80047da:	5a5b      	ldrh	r3, [r3, r1]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	0011      	movs	r1, r2
 80047e6:	0018      	movs	r0, r3
 80047e8:	f000 f8c8 	bl	800497c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047ec:	e0aa      	b.n	8004944 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2258      	movs	r2, #88	@ 0x58
 80047f2:	5a99      	ldrh	r1, [r3, r2]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	225a      	movs	r2, #90	@ 0x5a
 80047f8:	5a9b      	ldrh	r3, [r3, r2]
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	208e      	movs	r0, #142	@ 0x8e
 80047fe:	183b      	adds	r3, r7, r0
 8004800:	1a8a      	subs	r2, r1, r2
 8004802:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	225a      	movs	r2, #90	@ 0x5a
 8004808:	5a9b      	ldrh	r3, [r3, r2]
 800480a:	b29b      	uxth	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d100      	bne.n	8004812 <HAL_UART_IRQHandler+0x446>
 8004810:	e09a      	b.n	8004948 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8004812:	183b      	adds	r3, r7, r0
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d100      	bne.n	800481c <HAL_UART_IRQHandler+0x450>
 800481a:	e095      	b.n	8004948 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800481c:	f3ef 8310 	mrs	r3, PRIMASK
 8004820:	60fb      	str	r3, [r7, #12]
  return(result);
 8004822:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004824:	2488      	movs	r4, #136	@ 0x88
 8004826:	193a      	adds	r2, r7, r4
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	2301      	movs	r3, #1
 800482c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	f383 8810 	msr	PRIMASK, r3
}
 8004834:	46c0      	nop			@ (mov r8, r8)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4945      	ldr	r1, [pc, #276]	@ (8004958 <HAL_UART_IRQHandler+0x58c>)
 8004842:	400a      	ands	r2, r1
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	193b      	adds	r3, r7, r4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f383 8810 	msr	PRIMASK, r3
}
 8004852:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004854:	f3ef 8310 	mrs	r3, PRIMASK
 8004858:	61bb      	str	r3, [r7, #24]
  return(result);
 800485a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485c:	2484      	movs	r4, #132	@ 0x84
 800485e:	193a      	adds	r2, r7, r4
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	2301      	movs	r3, #1
 8004864:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f383 8810 	msr	PRIMASK, r3
}
 800486c:	46c0      	nop			@ (mov r8, r8)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2101      	movs	r1, #1
 800487a:	438a      	bics	r2, r1
 800487c:	609a      	str	r2, [r3, #8]
 800487e:	193b      	adds	r3, r7, r4
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	f383 8810 	msr	PRIMASK, r3
}
 800488a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2280      	movs	r2, #128	@ 0x80
 8004890:	2120      	movs	r1, #32
 8004892:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048a0:	f3ef 8310 	mrs	r3, PRIMASK
 80048a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a8:	2480      	movs	r4, #128	@ 0x80
 80048aa:	193a      	adds	r2, r7, r4
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	2301      	movs	r3, #1
 80048b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b4:	f383 8810 	msr	PRIMASK, r3
}
 80048b8:	46c0      	nop			@ (mov r8, r8)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2110      	movs	r1, #16
 80048c6:	438a      	bics	r2, r1
 80048c8:	601a      	str	r2, [r3, #0]
 80048ca:	193b      	adds	r3, r7, r4
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048d2:	f383 8810 	msr	PRIMASK, r3
}
 80048d6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048de:	183b      	adds	r3, r7, r0
 80048e0:	881a      	ldrh	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	0011      	movs	r1, r2
 80048e6:	0018      	movs	r0, r3
 80048e8:	f000 f848 	bl	800497c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048ec:	e02c      	b.n	8004948 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80048ee:	23a4      	movs	r3, #164	@ 0xa4
 80048f0:	18fb      	adds	r3, r7, r3
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2280      	movs	r2, #128	@ 0x80
 80048f6:	4013      	ands	r3, r2
 80048f8:	d00f      	beq.n	800491a <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80048fa:	23a0      	movs	r3, #160	@ 0xa0
 80048fc:	18fb      	adds	r3, r7, r3
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2280      	movs	r2, #128	@ 0x80
 8004902:	4013      	ands	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800490a:	2b00      	cmp	r3, #0
 800490c:	d01e      	beq.n	800494c <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	0010      	movs	r0, r2
 8004916:	4798      	blx	r3
    }
    return;
 8004918:	e018      	b.n	800494c <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800491a:	23a4      	movs	r3, #164	@ 0xa4
 800491c:	18fb      	adds	r3, r7, r3
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2240      	movs	r2, #64	@ 0x40
 8004922:	4013      	ands	r3, r2
 8004924:	d013      	beq.n	800494e <HAL_UART_IRQHandler+0x582>
 8004926:	23a0      	movs	r3, #160	@ 0xa0
 8004928:	18fb      	adds	r3, r7, r3
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2240      	movs	r2, #64	@ 0x40
 800492e:	4013      	ands	r3, r2
 8004930:	d00d      	beq.n	800494e <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	0018      	movs	r0, r3
 8004936:	f000 fc6a 	bl	800520e <UART_EndTransmit_IT>
    return;
 800493a:	e008      	b.n	800494e <HAL_UART_IRQHandler+0x582>
      return;
 800493c:	46c0      	nop			@ (mov r8, r8)
 800493e:	e006      	b.n	800494e <HAL_UART_IRQHandler+0x582>
    return;
 8004940:	46c0      	nop			@ (mov r8, r8)
 8004942:	e004      	b.n	800494e <HAL_UART_IRQHandler+0x582>
      return;
 8004944:	46c0      	nop			@ (mov r8, r8)
 8004946:	e002      	b.n	800494e <HAL_UART_IRQHandler+0x582>
      return;
 8004948:	46c0      	nop			@ (mov r8, r8)
 800494a:	e000      	b.n	800494e <HAL_UART_IRQHandler+0x582>
    return;
 800494c:	46c0      	nop			@ (mov r8, r8)
  }

}
 800494e:	46bd      	mov	sp, r7
 8004950:	b02b      	add	sp, #172	@ 0xac
 8004952:	bd90      	pop	{r4, r7, pc}
 8004954:	fffffeff 	.word	0xfffffeff
 8004958:	fffffedf 	.word	0xfffffedf

0800495c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004964:	46c0      	nop			@ (mov r8, r8)
 8004966:	46bd      	mov	sp, r7
 8004968:	b002      	add	sp, #8
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004974:	46c0      	nop			@ (mov r8, r8)
 8004976:	46bd      	mov	sp, r7
 8004978:	b002      	add	sp, #8
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	000a      	movs	r2, r1
 8004986:	1cbb      	adds	r3, r7, #2
 8004988:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800498a:	46c0      	nop			@ (mov r8, r8)
 800498c:	46bd      	mov	sp, r7
 800498e:	b002      	add	sp, #8
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b088      	sub	sp, #32
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800499c:	231e      	movs	r3, #30
 800499e:	18fb      	adds	r3, r7, r3
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	431a      	orrs	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a8d      	ldr	r2, [pc, #564]	@ (8004bf8 <UART_SetConfig+0x264>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	0019      	movs	r1, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	430a      	orrs	r2, r1
 80049d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	4a88      	ldr	r2, [pc, #544]	@ (8004bfc <UART_SetConfig+0x268>)
 80049da:	4013      	ands	r3, r2
 80049dc:	0019      	movs	r1, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	4a7f      	ldr	r2, [pc, #508]	@ (8004c00 <UART_SetConfig+0x26c>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	0019      	movs	r1, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a7b      	ldr	r2, [pc, #492]	@ (8004c04 <UART_SetConfig+0x270>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d127      	bne.n	8004a6a <UART_SetConfig+0xd6>
 8004a1a:	4b7b      	ldr	r3, [pc, #492]	@ (8004c08 <UART_SetConfig+0x274>)
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1e:	2203      	movs	r2, #3
 8004a20:	4013      	ands	r3, r2
 8004a22:	2b03      	cmp	r3, #3
 8004a24:	d00d      	beq.n	8004a42 <UART_SetConfig+0xae>
 8004a26:	d81b      	bhi.n	8004a60 <UART_SetConfig+0xcc>
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d014      	beq.n	8004a56 <UART_SetConfig+0xc2>
 8004a2c:	d818      	bhi.n	8004a60 <UART_SetConfig+0xcc>
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <UART_SetConfig+0xa4>
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d00a      	beq.n	8004a4c <UART_SetConfig+0xb8>
 8004a36:	e013      	b.n	8004a60 <UART_SetConfig+0xcc>
 8004a38:	231f      	movs	r3, #31
 8004a3a:	18fb      	adds	r3, r7, r3
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	e021      	b.n	8004a86 <UART_SetConfig+0xf2>
 8004a42:	231f      	movs	r3, #31
 8004a44:	18fb      	adds	r3, r7, r3
 8004a46:	2202      	movs	r2, #2
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	e01c      	b.n	8004a86 <UART_SetConfig+0xf2>
 8004a4c:	231f      	movs	r3, #31
 8004a4e:	18fb      	adds	r3, r7, r3
 8004a50:	2204      	movs	r2, #4
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	e017      	b.n	8004a86 <UART_SetConfig+0xf2>
 8004a56:	231f      	movs	r3, #31
 8004a58:	18fb      	adds	r3, r7, r3
 8004a5a:	2208      	movs	r2, #8
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	e012      	b.n	8004a86 <UART_SetConfig+0xf2>
 8004a60:	231f      	movs	r3, #31
 8004a62:	18fb      	adds	r3, r7, r3
 8004a64:	2210      	movs	r2, #16
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	e00d      	b.n	8004a86 <UART_SetConfig+0xf2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a67      	ldr	r2, [pc, #412]	@ (8004c0c <UART_SetConfig+0x278>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d104      	bne.n	8004a7e <UART_SetConfig+0xea>
 8004a74:	231f      	movs	r3, #31
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	2200      	movs	r2, #0
 8004a7a:	701a      	strb	r2, [r3, #0]
 8004a7c:	e003      	b.n	8004a86 <UART_SetConfig+0xf2>
 8004a7e:	231f      	movs	r3, #31
 8004a80:	18fb      	adds	r3, r7, r3
 8004a82:	2210      	movs	r2, #16
 8004a84:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	69da      	ldr	r2, [r3, #28]
 8004a8a:	2380      	movs	r3, #128	@ 0x80
 8004a8c:	021b      	lsls	r3, r3, #8
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d15c      	bne.n	8004b4c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004a92:	231f      	movs	r3, #31
 8004a94:	18fb      	adds	r3, r7, r3
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d015      	beq.n	8004ac8 <UART_SetConfig+0x134>
 8004a9c:	dc18      	bgt.n	8004ad0 <UART_SetConfig+0x13c>
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d00d      	beq.n	8004abe <UART_SetConfig+0x12a>
 8004aa2:	dc15      	bgt.n	8004ad0 <UART_SetConfig+0x13c>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <UART_SetConfig+0x11a>
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d005      	beq.n	8004ab8 <UART_SetConfig+0x124>
 8004aac:	e010      	b.n	8004ad0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aae:	f7ff fa5f 	bl	8003f70 <HAL_RCC_GetPCLK1Freq>
 8004ab2:	0003      	movs	r3, r0
 8004ab4:	61bb      	str	r3, [r7, #24]
        break;
 8004ab6:	e012      	b.n	8004ade <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ab8:	4b55      	ldr	r3, [pc, #340]	@ (8004c10 <UART_SetConfig+0x27c>)
 8004aba:	61bb      	str	r3, [r7, #24]
        break;
 8004abc:	e00f      	b.n	8004ade <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004abe:	f7ff f9f7 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	61bb      	str	r3, [r7, #24]
        break;
 8004ac6:	e00a      	b.n	8004ade <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ac8:	2380      	movs	r3, #128	@ 0x80
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	61bb      	str	r3, [r7, #24]
        break;
 8004ace:	e006      	b.n	8004ade <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ad4:	231e      	movs	r3, #30
 8004ad6:	18fb      	adds	r3, r7, r3
 8004ad8:	2201      	movs	r2, #1
 8004ada:	701a      	strb	r2, [r3, #0]
        break;
 8004adc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d100      	bne.n	8004ae6 <UART_SetConfig+0x152>
 8004ae4:	e07a      	b.n	8004bdc <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	005a      	lsls	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	085b      	lsrs	r3, r3, #1
 8004af0:	18d2      	adds	r2, r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	0019      	movs	r1, r3
 8004af8:	0010      	movs	r0, r2
 8004afa:	f7fb fb21 	bl	8000140 <__udivsi3>
 8004afe:	0003      	movs	r3, r0
 8004b00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b0f      	cmp	r3, #15
 8004b06:	d91c      	bls.n	8004b42 <UART_SetConfig+0x1ae>
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	2380      	movs	r3, #128	@ 0x80
 8004b0c:	025b      	lsls	r3, r3, #9
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d217      	bcs.n	8004b42 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	200e      	movs	r0, #14
 8004b18:	183b      	adds	r3, r7, r0
 8004b1a:	210f      	movs	r1, #15
 8004b1c:	438a      	bics	r2, r1
 8004b1e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	085b      	lsrs	r3, r3, #1
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	2207      	movs	r2, #7
 8004b28:	4013      	ands	r3, r2
 8004b2a:	b299      	uxth	r1, r3
 8004b2c:	183b      	adds	r3, r7, r0
 8004b2e:	183a      	adds	r2, r7, r0
 8004b30:	8812      	ldrh	r2, [r2, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	183a      	adds	r2, r7, r0
 8004b3c:	8812      	ldrh	r2, [r2, #0]
 8004b3e:	60da      	str	r2, [r3, #12]
 8004b40:	e04c      	b.n	8004bdc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004b42:	231e      	movs	r3, #30
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	2201      	movs	r2, #1
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	e047      	b.n	8004bdc <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b4c:	231f      	movs	r3, #31
 8004b4e:	18fb      	adds	r3, r7, r3
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b08      	cmp	r3, #8
 8004b54:	d015      	beq.n	8004b82 <UART_SetConfig+0x1ee>
 8004b56:	dc18      	bgt.n	8004b8a <UART_SetConfig+0x1f6>
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d00d      	beq.n	8004b78 <UART_SetConfig+0x1e4>
 8004b5c:	dc15      	bgt.n	8004b8a <UART_SetConfig+0x1f6>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <UART_SetConfig+0x1d4>
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d005      	beq.n	8004b72 <UART_SetConfig+0x1de>
 8004b66:	e010      	b.n	8004b8a <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b68:	f7ff fa02 	bl	8003f70 <HAL_RCC_GetPCLK1Freq>
 8004b6c:	0003      	movs	r3, r0
 8004b6e:	61bb      	str	r3, [r7, #24]
        break;
 8004b70:	e012      	b.n	8004b98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b72:	4b27      	ldr	r3, [pc, #156]	@ (8004c10 <UART_SetConfig+0x27c>)
 8004b74:	61bb      	str	r3, [r7, #24]
        break;
 8004b76:	e00f      	b.n	8004b98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b78:	f7ff f99a 	bl	8003eb0 <HAL_RCC_GetSysClockFreq>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	61bb      	str	r3, [r7, #24]
        break;
 8004b80:	e00a      	b.n	8004b98 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b82:	2380      	movs	r3, #128	@ 0x80
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	61bb      	str	r3, [r7, #24]
        break;
 8004b88:	e006      	b.n	8004b98 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b8e:	231e      	movs	r3, #30
 8004b90:	18fb      	adds	r3, r7, r3
 8004b92:	2201      	movs	r2, #1
 8004b94:	701a      	strb	r2, [r3, #0]
        break;
 8004b96:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d01e      	beq.n	8004bdc <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	085a      	lsrs	r2, r3, #1
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	18d2      	adds	r2, r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	0019      	movs	r1, r3
 8004bae:	0010      	movs	r0, r2
 8004bb0:	f7fb fac6 	bl	8000140 <__udivsi3>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2b0f      	cmp	r3, #15
 8004bbc:	d90a      	bls.n	8004bd4 <UART_SetConfig+0x240>
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	2380      	movs	r3, #128	@ 0x80
 8004bc2:	025b      	lsls	r3, r3, #9
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d205      	bcs.n	8004bd4 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	60da      	str	r2, [r3, #12]
 8004bd2:	e003      	b.n	8004bdc <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004bd4:	231e      	movs	r3, #30
 8004bd6:	18fb      	adds	r3, r7, r3
 8004bd8:	2201      	movs	r2, #1
 8004bda:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004be8:	231e      	movs	r3, #30
 8004bea:	18fb      	adds	r3, r7, r3
 8004bec:	781b      	ldrb	r3, [r3, #0]
}
 8004bee:	0018      	movs	r0, r3
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	b008      	add	sp, #32
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			@ (mov r8, r8)
 8004bf8:	ffff69f3 	.word	0xffff69f3
 8004bfc:	ffffcfff 	.word	0xffffcfff
 8004c00:	fffff4ff 	.word	0xfffff4ff
 8004c04:	40013800 	.word	0x40013800
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	40004400 	.word	0x40004400
 8004c10:	007a1200 	.word	0x007a1200

08004c14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c20:	2208      	movs	r2, #8
 8004c22:	4013      	ands	r3, r2
 8004c24:	d00b      	beq.n	8004c3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a4a      	ldr	r2, [pc, #296]	@ (8004d58 <UART_AdvFeatureConfig+0x144>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	0019      	movs	r1, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c42:	2201      	movs	r2, #1
 8004c44:	4013      	ands	r3, r2
 8004c46:	d00b      	beq.n	8004c60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	4a43      	ldr	r2, [pc, #268]	@ (8004d5c <UART_AdvFeatureConfig+0x148>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	0019      	movs	r1, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c64:	2202      	movs	r2, #2
 8004c66:	4013      	ands	r3, r2
 8004c68:	d00b      	beq.n	8004c82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	4a3b      	ldr	r2, [pc, #236]	@ (8004d60 <UART_AdvFeatureConfig+0x14c>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	0019      	movs	r1, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c86:	2204      	movs	r2, #4
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d00b      	beq.n	8004ca4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	4a34      	ldr	r2, [pc, #208]	@ (8004d64 <UART_AdvFeatureConfig+0x150>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	0019      	movs	r1, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	2210      	movs	r2, #16
 8004caa:	4013      	ands	r3, r2
 8004cac:	d00b      	beq.n	8004cc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	4a2c      	ldr	r2, [pc, #176]	@ (8004d68 <UART_AdvFeatureConfig+0x154>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	0019      	movs	r1, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cca:	2220      	movs	r2, #32
 8004ccc:	4013      	ands	r3, r2
 8004cce:	d00b      	beq.n	8004ce8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	4a25      	ldr	r2, [pc, #148]	@ (8004d6c <UART_AdvFeatureConfig+0x158>)
 8004cd8:	4013      	ands	r3, r2
 8004cda:	0019      	movs	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cec:	2240      	movs	r2, #64	@ 0x40
 8004cee:	4013      	ands	r3, r2
 8004cf0:	d01d      	beq.n	8004d2e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d70 <UART_AdvFeatureConfig+0x15c>)
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	0019      	movs	r1, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	430a      	orrs	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d0e:	2380      	movs	r3, #128	@ 0x80
 8004d10:	035b      	lsls	r3, r3, #13
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d10b      	bne.n	8004d2e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	4a15      	ldr	r2, [pc, #84]	@ (8004d74 <UART_AdvFeatureConfig+0x160>)
 8004d1e:	4013      	ands	r3, r2
 8004d20:	0019      	movs	r1, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d32:	2280      	movs	r2, #128	@ 0x80
 8004d34:	4013      	ands	r3, r2
 8004d36:	d00b      	beq.n	8004d50 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d78 <UART_AdvFeatureConfig+0x164>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	0019      	movs	r1, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	605a      	str	r2, [r3, #4]
  }
}
 8004d50:	46c0      	nop			@ (mov r8, r8)
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b002      	add	sp, #8
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	ffff7fff 	.word	0xffff7fff
 8004d5c:	fffdffff 	.word	0xfffdffff
 8004d60:	fffeffff 	.word	0xfffeffff
 8004d64:	fffbffff 	.word	0xfffbffff
 8004d68:	ffffefff 	.word	0xffffefff
 8004d6c:	ffffdfff 	.word	0xffffdfff
 8004d70:	ffefffff 	.word	0xffefffff
 8004d74:	ff9fffff 	.word	0xff9fffff
 8004d78:	fff7ffff 	.word	0xfff7ffff

08004d7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b092      	sub	sp, #72	@ 0x48
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2284      	movs	r2, #132	@ 0x84
 8004d88:	2100      	movs	r1, #0
 8004d8a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d8c:	f7fe f876 	bl	8002e7c <HAL_GetTick>
 8004d90:	0003      	movs	r3, r0
 8004d92:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2208      	movs	r2, #8
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d12c      	bne.n	8004dfc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da4:	2280      	movs	r2, #128	@ 0x80
 8004da6:	0391      	lsls	r1, r2, #14
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	4a46      	ldr	r2, [pc, #280]	@ (8004ec4 <UART_CheckIdleState+0x148>)
 8004dac:	9200      	str	r2, [sp, #0]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f000 f88c 	bl	8004ecc <UART_WaitOnFlagUntilTimeout>
 8004db4:	1e03      	subs	r3, r0, #0
 8004db6:	d021      	beq.n	8004dfc <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004dc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc8:	f383 8810 	msr	PRIMASK, r3
}
 8004dcc:	46c0      	nop			@ (mov r8, r8)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2180      	movs	r1, #128	@ 0x80
 8004dda:	438a      	bics	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de4:	f383 8810 	msr	PRIMASK, r3
}
 8004de8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2278      	movs	r2, #120	@ 0x78
 8004df4:	2100      	movs	r1, #0
 8004df6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e05f      	b.n	8004ebc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2204      	movs	r2, #4
 8004e04:	4013      	ands	r3, r2
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d146      	bne.n	8004e98 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e0c:	2280      	movs	r2, #128	@ 0x80
 8004e0e:	03d1      	lsls	r1, r2, #15
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	4a2c      	ldr	r2, [pc, #176]	@ (8004ec4 <UART_CheckIdleState+0x148>)
 8004e14:	9200      	str	r2, [sp, #0]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f000 f858 	bl	8004ecc <UART_WaitOnFlagUntilTimeout>
 8004e1c:	1e03      	subs	r3, r0, #0
 8004e1e:	d03b      	beq.n	8004e98 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e20:	f3ef 8310 	mrs	r3, PRIMASK
 8004e24:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e26:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f383 8810 	msr	PRIMASK, r3
}
 8004e34:	46c0      	nop			@ (mov r8, r8)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4921      	ldr	r1, [pc, #132]	@ (8004ec8 <UART_CheckIdleState+0x14c>)
 8004e42:	400a      	ands	r2, r1
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f383 8810 	msr	PRIMASK, r3
}
 8004e50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e52:	f3ef 8310 	mrs	r3, PRIMASK
 8004e56:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e58:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f383 8810 	msr	PRIMASK, r3
}
 8004e66:	46c0      	nop			@ (mov r8, r8)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2101      	movs	r1, #1
 8004e74:	438a      	bics	r2, r1
 8004e76:	609a      	str	r2, [r3, #8]
 8004e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	f383 8810 	msr	PRIMASK, r3
}
 8004e82:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2280      	movs	r2, #128	@ 0x80
 8004e88:	2120      	movs	r1, #32
 8004e8a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2278      	movs	r2, #120	@ 0x78
 8004e90:	2100      	movs	r1, #0
 8004e92:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e011      	b.n	8004ebc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2280      	movs	r2, #128	@ 0x80
 8004ea2:	2120      	movs	r1, #32
 8004ea4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2278      	movs	r2, #120	@ 0x78
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b010      	add	sp, #64	@ 0x40
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	01ffffff 	.word	0x01ffffff
 8004ec8:	fffffedf 	.word	0xfffffedf

08004ecc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	603b      	str	r3, [r7, #0]
 8004ed8:	1dfb      	adds	r3, r7, #7
 8004eda:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004edc:	e051      	b.n	8004f82 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	d04e      	beq.n	8004f82 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ee4:	f7fd ffca 	bl	8002e7c <HAL_GetTick>
 8004ee8:	0002      	movs	r2, r0
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d302      	bcc.n	8004efa <UART_WaitOnFlagUntilTimeout+0x2e>
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e051      	b.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2204      	movs	r2, #4
 8004f06:	4013      	ands	r3, r2
 8004f08:	d03b      	beq.n	8004f82 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b80      	cmp	r3, #128	@ 0x80
 8004f0e:	d038      	beq.n	8004f82 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2b40      	cmp	r3, #64	@ 0x40
 8004f14:	d035      	beq.n	8004f82 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	4013      	ands	r3, r2
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d111      	bne.n	8004f48 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2208      	movs	r2, #8
 8004f2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	0018      	movs	r0, r3
 8004f30:	f000 f8f2 	bl	8005118 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2284      	movs	r2, #132	@ 0x84
 8004f38:	2108      	movs	r1, #8
 8004f3a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2278      	movs	r2, #120	@ 0x78
 8004f40:	2100      	movs	r1, #0
 8004f42:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e02c      	b.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	69da      	ldr	r2, [r3, #28]
 8004f4e:	2380      	movs	r3, #128	@ 0x80
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	401a      	ands	r2, r3
 8004f54:	2380      	movs	r3, #128	@ 0x80
 8004f56:	011b      	lsls	r3, r3, #4
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d112      	bne.n	8004f82 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2280      	movs	r2, #128	@ 0x80
 8004f62:	0112      	lsls	r2, r2, #4
 8004f64:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	0018      	movs	r0, r3
 8004f6a:	f000 f8d5 	bl	8005118 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2284      	movs	r2, #132	@ 0x84
 8004f72:	2120      	movs	r1, #32
 8004f74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2278      	movs	r2, #120	@ 0x78
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e00f      	b.n	8004fa2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69db      	ldr	r3, [r3, #28]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	425a      	negs	r2, r3
 8004f92:	4153      	adcs	r3, r2
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	001a      	movs	r2, r3
 8004f98:	1dfb      	adds	r3, r7, #7
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d09e      	beq.n	8004ede <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	b004      	add	sp, #16
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b090      	sub	sp, #64	@ 0x40
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	1dbb      	adds	r3, r7, #6
 8004fb8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	1dba      	adds	r2, r7, #6
 8004fc4:	2158      	movs	r1, #88	@ 0x58
 8004fc6:	8812      	ldrh	r2, [r2, #0]
 8004fc8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1dba      	adds	r2, r7, #6
 8004fce:	215a      	movs	r1, #90	@ 0x5a
 8004fd0:	8812      	ldrh	r2, [r2, #0]
 8004fd2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	2380      	movs	r3, #128	@ 0x80
 8004fe0:	015b      	lsls	r3, r3, #5
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d10d      	bne.n	8005002 <UART_Start_Receive_IT+0x56>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d104      	bne.n	8004ff8 <UART_Start_Receive_IT+0x4c>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	225c      	movs	r2, #92	@ 0x5c
 8004ff2:	4946      	ldr	r1, [pc, #280]	@ (800510c <UART_Start_Receive_IT+0x160>)
 8004ff4:	5299      	strh	r1, [r3, r2]
 8004ff6:	e01a      	b.n	800502e <UART_Start_Receive_IT+0x82>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	225c      	movs	r2, #92	@ 0x5c
 8004ffc:	21ff      	movs	r1, #255	@ 0xff
 8004ffe:	5299      	strh	r1, [r3, r2]
 8005000:	e015      	b.n	800502e <UART_Start_Receive_IT+0x82>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10d      	bne.n	8005026 <UART_Start_Receive_IT+0x7a>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d104      	bne.n	800501c <UART_Start_Receive_IT+0x70>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	225c      	movs	r2, #92	@ 0x5c
 8005016:	21ff      	movs	r1, #255	@ 0xff
 8005018:	5299      	strh	r1, [r3, r2]
 800501a:	e008      	b.n	800502e <UART_Start_Receive_IT+0x82>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	225c      	movs	r2, #92	@ 0x5c
 8005020:	217f      	movs	r1, #127	@ 0x7f
 8005022:	5299      	strh	r1, [r3, r2]
 8005024:	e003      	b.n	800502e <UART_Start_Receive_IT+0x82>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	225c      	movs	r2, #92	@ 0x5c
 800502a:	2100      	movs	r1, #0
 800502c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2284      	movs	r2, #132	@ 0x84
 8005032:	2100      	movs	r1, #0
 8005034:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2280      	movs	r2, #128	@ 0x80
 800503a:	2122      	movs	r1, #34	@ 0x22
 800503c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800503e:	f3ef 8310 	mrs	r3, PRIMASK
 8005042:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005044:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005046:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005048:	2301      	movs	r3, #1
 800504a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800504c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800504e:	f383 8810 	msr	PRIMASK, r3
}
 8005052:	46c0      	nop			@ (mov r8, r8)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2101      	movs	r1, #1
 8005060:	430a      	orrs	r2, r1
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005066:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506a:	f383 8810 	msr	PRIMASK, r3
}
 800506e:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	2380      	movs	r3, #128	@ 0x80
 8005076:	015b      	lsls	r3, r3, #5
 8005078:	429a      	cmp	r2, r3
 800507a:	d107      	bne.n	800508c <UART_Start_Receive_IT+0xe0>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d103      	bne.n	800508c <UART_Start_Receive_IT+0xe0>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4a22      	ldr	r2, [pc, #136]	@ (8005110 <UART_Start_Receive_IT+0x164>)
 8005088:	669a      	str	r2, [r3, #104]	@ 0x68
 800508a:	e002      	b.n	8005092 <UART_Start_Receive_IT+0xe6>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4a21      	ldr	r2, [pc, #132]	@ (8005114 <UART_Start_Receive_IT+0x168>)
 8005090:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d019      	beq.n	80050ce <UART_Start_Receive_IT+0x122>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800509a:	f3ef 8310 	mrs	r3, PRIMASK
 800509e:	61fb      	str	r3, [r7, #28]
  return(result);
 80050a0:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80050a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80050a4:	2301      	movs	r3, #1
 80050a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	f383 8810 	msr	PRIMASK, r3
}
 80050ae:	46c0      	nop			@ (mov r8, r8)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2190      	movs	r1, #144	@ 0x90
 80050bc:	0049      	lsls	r1, r1, #1
 80050be:	430a      	orrs	r2, r1
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	f383 8810 	msr	PRIMASK, r3
}
 80050cc:	e018      	b.n	8005100 <UART_Start_Receive_IT+0x154>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050ce:	f3ef 8310 	mrs	r3, PRIMASK
 80050d2:	613b      	str	r3, [r7, #16]
  return(result);
 80050d4:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80050d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050d8:	2301      	movs	r3, #1
 80050da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f383 8810 	msr	PRIMASK, r3
}
 80050e2:	46c0      	nop			@ (mov r8, r8)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2120      	movs	r1, #32
 80050f0:	430a      	orrs	r2, r1
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f383 8810 	msr	PRIMASK, r3
}
 80050fe:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	0018      	movs	r0, r3
 8005104:	46bd      	mov	sp, r7
 8005106:	b010      	add	sp, #64	@ 0x40
 8005108:	bd80      	pop	{r7, pc}
 800510a:	46c0      	nop			@ (mov r8, r8)
 800510c:	000001ff 	.word	0x000001ff
 8005110:	0800541d 	.word	0x0800541d
 8005114:	08005265 	.word	0x08005265

08005118 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b08e      	sub	sp, #56	@ 0x38
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005120:	f3ef 8310 	mrs	r3, PRIMASK
 8005124:	617b      	str	r3, [r7, #20]
  return(result);
 8005126:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005128:	637b      	str	r3, [r7, #52]	@ 0x34
 800512a:	2301      	movs	r3, #1
 800512c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	f383 8810 	msr	PRIMASK, r3
}
 8005134:	46c0      	nop			@ (mov r8, r8)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4926      	ldr	r1, [pc, #152]	@ (80051dc <UART_EndRxTransfer+0xc4>)
 8005142:	400a      	ands	r2, r1
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005148:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	f383 8810 	msr	PRIMASK, r3
}
 8005150:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005152:	f3ef 8310 	mrs	r3, PRIMASK
 8005156:	623b      	str	r3, [r7, #32]
  return(result);
 8005158:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515a:	633b      	str	r3, [r7, #48]	@ 0x30
 800515c:	2301      	movs	r3, #1
 800515e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	f383 8810 	msr	PRIMASK, r3
}
 8005166:	46c0      	nop			@ (mov r8, r8)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2101      	movs	r1, #1
 8005174:	438a      	bics	r2, r1
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800517c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800517e:	f383 8810 	msr	PRIMASK, r3
}
 8005182:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005188:	2b01      	cmp	r3, #1
 800518a:	d118      	bne.n	80051be <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800518c:	f3ef 8310 	mrs	r3, PRIMASK
 8005190:	60bb      	str	r3, [r7, #8]
  return(result);
 8005192:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005196:	2301      	movs	r3, #1
 8005198:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f383 8810 	msr	PRIMASK, r3
}
 80051a0:	46c0      	nop			@ (mov r8, r8)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2110      	movs	r1, #16
 80051ae:	438a      	bics	r2, r1
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f383 8810 	msr	PRIMASK, r3
}
 80051bc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2280      	movs	r2, #128	@ 0x80
 80051c2:	2120      	movs	r1, #32
 80051c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80051d2:	46c0      	nop			@ (mov r8, r8)
 80051d4:	46bd      	mov	sp, r7
 80051d6:	b00e      	add	sp, #56	@ 0x38
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	46c0      	nop			@ (mov r8, r8)
 80051dc:	fffffedf 	.word	0xfffffedf

080051e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	225a      	movs	r2, #90	@ 0x5a
 80051f2:	2100      	movs	r1, #0
 80051f4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2252      	movs	r2, #82	@ 0x52
 80051fa:	2100      	movs	r1, #0
 80051fc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	0018      	movs	r0, r3
 8005202:	f7ff fbb3 	bl	800496c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005206:	46c0      	nop			@ (mov r8, r8)
 8005208:	46bd      	mov	sp, r7
 800520a:	b004      	add	sp, #16
 800520c:	bd80      	pop	{r7, pc}

0800520e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b086      	sub	sp, #24
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005216:	f3ef 8310 	mrs	r3, PRIMASK
 800521a:	60bb      	str	r3, [r7, #8]
  return(result);
 800521c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	2301      	movs	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f383 8810 	msr	PRIMASK, r3
}
 800522a:	46c0      	nop			@ (mov r8, r8)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2140      	movs	r1, #64	@ 0x40
 8005238:	438a      	bics	r2, r1
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f383 8810 	msr	PRIMASK, r3
}
 8005246:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2220      	movs	r2, #32
 800524c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	0018      	movs	r0, r3
 8005258:	f7ff fb80 	bl	800495c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800525c:	46c0      	nop			@ (mov r8, r8)
 800525e:	46bd      	mov	sp, r7
 8005260:	b006      	add	sp, #24
 8005262:	bd80      	pop	{r7, pc}

08005264 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b094      	sub	sp, #80	@ 0x50
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800526c:	204e      	movs	r0, #78	@ 0x4e
 800526e:	183b      	adds	r3, r7, r0
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	215c      	movs	r1, #92	@ 0x5c
 8005274:	5a52      	ldrh	r2, [r2, r1]
 8005276:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2280      	movs	r2, #128	@ 0x80
 800527c:	589b      	ldr	r3, [r3, r2]
 800527e:	2b22      	cmp	r3, #34	@ 0x22
 8005280:	d000      	beq.n	8005284 <UART_RxISR_8BIT+0x20>
 8005282:	e0ba      	b.n	80053fa <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	214c      	movs	r1, #76	@ 0x4c
 800528a:	187b      	adds	r3, r7, r1
 800528c:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 800528e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005290:	187b      	adds	r3, r7, r1
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	b2da      	uxtb	r2, r3
 8005296:	183b      	adds	r3, r7, r0
 8005298:	881b      	ldrh	r3, [r3, #0]
 800529a:	b2d9      	uxtb	r1, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052a0:	400a      	ands	r2, r1
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052aa:	1c5a      	adds	r2, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	225a      	movs	r2, #90	@ 0x5a
 80052b4:	5a9b      	ldrh	r3, [r3, r2]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b299      	uxth	r1, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	225a      	movs	r2, #90	@ 0x5a
 80052c0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	225a      	movs	r2, #90	@ 0x5a
 80052c6:	5a9b      	ldrh	r3, [r3, r2]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d000      	beq.n	80052d0 <UART_RxISR_8BIT+0x6c>
 80052ce:	e09c      	b.n	800540a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d0:	f3ef 8310 	mrs	r3, PRIMASK
 80052d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052da:	2301      	movs	r3, #1
 80052dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e0:	f383 8810 	msr	PRIMASK, r3
}
 80052e4:	46c0      	nop			@ (mov r8, r8)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4948      	ldr	r1, [pc, #288]	@ (8005414 <UART_RxISR_8BIT+0x1b0>)
 80052f2:	400a      	ands	r2, r1
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052fc:	f383 8810 	msr	PRIMASK, r3
}
 8005300:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005302:	f3ef 8310 	mrs	r3, PRIMASK
 8005306:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530a:	647b      	str	r3, [r7, #68]	@ 0x44
 800530c:	2301      	movs	r3, #1
 800530e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005312:	f383 8810 	msr	PRIMASK, r3
}
 8005316:	46c0      	nop			@ (mov r8, r8)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2101      	movs	r1, #1
 8005324:	438a      	bics	r2, r1
 8005326:	609a      	str	r2, [r3, #8]
 8005328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800532a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532e:	f383 8810 	msr	PRIMASK, r3
}
 8005332:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2280      	movs	r2, #128	@ 0x80
 8005338:	2120      	movs	r1, #32
 800533a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	2380      	movs	r3, #128	@ 0x80
 8005350:	041b      	lsls	r3, r3, #16
 8005352:	4013      	ands	r3, r2
 8005354:	d018      	beq.n	8005388 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005356:	f3ef 8310 	mrs	r3, PRIMASK
 800535a:	61bb      	str	r3, [r7, #24]
  return(result);
 800535c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800535e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005360:	2301      	movs	r3, #1
 8005362:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	f383 8810 	msr	PRIMASK, r3
}
 800536a:	46c0      	nop			@ (mov r8, r8)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4928      	ldr	r1, [pc, #160]	@ (8005418 <UART_RxISR_8BIT+0x1b4>)
 8005378:	400a      	ands	r2, r1
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800537e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	f383 8810 	msr	PRIMASK, r3
}
 8005386:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800538c:	2b01      	cmp	r3, #1
 800538e:	d12f      	bne.n	80053f0 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005396:	f3ef 8310 	mrs	r3, PRIMASK
 800539a:	60fb      	str	r3, [r7, #12]
  return(result);
 800539c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800539e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053a0:	2301      	movs	r3, #1
 80053a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f383 8810 	msr	PRIMASK, r3
}
 80053aa:	46c0      	nop			@ (mov r8, r8)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2110      	movs	r1, #16
 80053b8:	438a      	bics	r2, r1
 80053ba:	601a      	str	r2, [r3, #0]
 80053bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f383 8810 	msr	PRIMASK, r3
}
 80053c6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	69db      	ldr	r3, [r3, #28]
 80053ce:	2210      	movs	r2, #16
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b10      	cmp	r3, #16
 80053d4:	d103      	bne.n	80053de <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2210      	movs	r2, #16
 80053dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2258      	movs	r2, #88	@ 0x58
 80053e2:	5a9a      	ldrh	r2, [r3, r2]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	0011      	movs	r1, r2
 80053e8:	0018      	movs	r0, r3
 80053ea:	f7ff fac7 	bl	800497c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80053ee:	e00c      	b.n	800540a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	0018      	movs	r0, r3
 80053f4:	f7fd fac4 	bl	8002980 <HAL_UART_RxCpltCallback>
}
 80053f8:	e007      	b.n	800540a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699a      	ldr	r2, [r3, #24]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2108      	movs	r1, #8
 8005406:	430a      	orrs	r2, r1
 8005408:	619a      	str	r2, [r3, #24]
}
 800540a:	46c0      	nop			@ (mov r8, r8)
 800540c:	46bd      	mov	sp, r7
 800540e:	b014      	add	sp, #80	@ 0x50
 8005410:	bd80      	pop	{r7, pc}
 8005412:	46c0      	nop			@ (mov r8, r8)
 8005414:	fffffedf 	.word	0xfffffedf
 8005418:	fbffffff 	.word	0xfbffffff

0800541c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b094      	sub	sp, #80	@ 0x50
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005424:	204e      	movs	r0, #78	@ 0x4e
 8005426:	183b      	adds	r3, r7, r0
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	215c      	movs	r1, #92	@ 0x5c
 800542c:	5a52      	ldrh	r2, [r2, r1]
 800542e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2280      	movs	r2, #128	@ 0x80
 8005434:	589b      	ldr	r3, [r3, r2]
 8005436:	2b22      	cmp	r3, #34	@ 0x22
 8005438:	d000      	beq.n	800543c <UART_RxISR_16BIT+0x20>
 800543a:	e0ba      	b.n	80055b2 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	214c      	movs	r1, #76	@ 0x4c
 8005442:	187b      	adds	r3, r7, r1
 8005444:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8005446:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800544c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800544e:	187b      	adds	r3, r7, r1
 8005450:	183a      	adds	r2, r7, r0
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	8812      	ldrh	r2, [r2, #0]
 8005456:	4013      	ands	r3, r2
 8005458:	b29a      	uxth	r2, r3
 800545a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800545c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005462:	1c9a      	adds	r2, r3, #2
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	225a      	movs	r2, #90	@ 0x5a
 800546c:	5a9b      	ldrh	r3, [r3, r2]
 800546e:	b29b      	uxth	r3, r3
 8005470:	3b01      	subs	r3, #1
 8005472:	b299      	uxth	r1, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	225a      	movs	r2, #90	@ 0x5a
 8005478:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	225a      	movs	r2, #90	@ 0x5a
 800547e:	5a9b      	ldrh	r3, [r3, r2]
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d000      	beq.n	8005488 <UART_RxISR_16BIT+0x6c>
 8005486:	e09c      	b.n	80055c2 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005488:	f3ef 8310 	mrs	r3, PRIMASK
 800548c:	623b      	str	r3, [r7, #32]
  return(result);
 800548e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005490:	647b      	str	r3, [r7, #68]	@ 0x44
 8005492:	2301      	movs	r3, #1
 8005494:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	f383 8810 	msr	PRIMASK, r3
}
 800549c:	46c0      	nop			@ (mov r8, r8)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4948      	ldr	r1, [pc, #288]	@ (80055cc <UART_RxISR_16BIT+0x1b0>)
 80054aa:	400a      	ands	r2, r1
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b4:	f383 8810 	msr	PRIMASK, r3
}
 80054b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ba:	f3ef 8310 	mrs	r3, PRIMASK
 80054be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80054c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80054c4:	2301      	movs	r3, #1
 80054c6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ca:	f383 8810 	msr	PRIMASK, r3
}
 80054ce:	46c0      	nop			@ (mov r8, r8)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2101      	movs	r1, #1
 80054dc:	438a      	bics	r2, r1
 80054de:	609a      	str	r2, [r3, #8]
 80054e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054e2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e6:	f383 8810 	msr	PRIMASK, r3
}
 80054ea:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2280      	movs	r2, #128	@ 0x80
 80054f0:	2120      	movs	r1, #32
 80054f2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	2380      	movs	r3, #128	@ 0x80
 8005508:	041b      	lsls	r3, r3, #16
 800550a:	4013      	ands	r3, r2
 800550c:	d018      	beq.n	8005540 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800550e:	f3ef 8310 	mrs	r3, PRIMASK
 8005512:	617b      	str	r3, [r7, #20]
  return(result);
 8005514:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005518:	2301      	movs	r3, #1
 800551a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	f383 8810 	msr	PRIMASK, r3
}
 8005522:	46c0      	nop			@ (mov r8, r8)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4928      	ldr	r1, [pc, #160]	@ (80055d0 <UART_RxISR_16BIT+0x1b4>)
 8005530:	400a      	ands	r2, r1
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005536:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f383 8810 	msr	PRIMASK, r3
}
 800553e:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005544:	2b01      	cmp	r3, #1
 8005546:	d12f      	bne.n	80055a8 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800554e:	f3ef 8310 	mrs	r3, PRIMASK
 8005552:	60bb      	str	r3, [r7, #8]
  return(result);
 8005554:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005556:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005558:	2301      	movs	r3, #1
 800555a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f383 8810 	msr	PRIMASK, r3
}
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2110      	movs	r1, #16
 8005570:	438a      	bics	r2, r1
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005576:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f383 8810 	msr	PRIMASK, r3
}
 800557e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	2210      	movs	r2, #16
 8005588:	4013      	ands	r3, r2
 800558a:	2b10      	cmp	r3, #16
 800558c:	d103      	bne.n	8005596 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2210      	movs	r2, #16
 8005594:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2258      	movs	r2, #88	@ 0x58
 800559a:	5a9a      	ldrh	r2, [r3, r2]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	0011      	movs	r1, r2
 80055a0:	0018      	movs	r0, r3
 80055a2:	f7ff f9eb 	bl	800497c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055a6:	e00c      	b.n	80055c2 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	0018      	movs	r0, r3
 80055ac:	f7fd f9e8 	bl	8002980 <HAL_UART_RxCpltCallback>
}
 80055b0:	e007      	b.n	80055c2 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699a      	ldr	r2, [r3, #24]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2108      	movs	r1, #8
 80055be:	430a      	orrs	r2, r1
 80055c0:	619a      	str	r2, [r3, #24]
}
 80055c2:	46c0      	nop			@ (mov r8, r8)
 80055c4:	46bd      	mov	sp, r7
 80055c6:	b014      	add	sp, #80	@ 0x50
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	46c0      	nop			@ (mov r8, r8)
 80055cc:	fffffedf 	.word	0xfffffedf
 80055d0:	fbffffff 	.word	0xfbffffff

080055d4 <__cvt>:
 80055d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d6:	001f      	movs	r7, r3
 80055d8:	2300      	movs	r3, #0
 80055da:	0016      	movs	r6, r2
 80055dc:	b08b      	sub	sp, #44	@ 0x2c
 80055de:	429f      	cmp	r7, r3
 80055e0:	da04      	bge.n	80055ec <__cvt+0x18>
 80055e2:	2180      	movs	r1, #128	@ 0x80
 80055e4:	0609      	lsls	r1, r1, #24
 80055e6:	187b      	adds	r3, r7, r1
 80055e8:	001f      	movs	r7, r3
 80055ea:	232d      	movs	r3, #45	@ 0x2d
 80055ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80055ee:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80055f0:	7013      	strb	r3, [r2, #0]
 80055f2:	2320      	movs	r3, #32
 80055f4:	2203      	movs	r2, #3
 80055f6:	439d      	bics	r5, r3
 80055f8:	2d46      	cmp	r5, #70	@ 0x46
 80055fa:	d007      	beq.n	800560c <__cvt+0x38>
 80055fc:	002b      	movs	r3, r5
 80055fe:	3b45      	subs	r3, #69	@ 0x45
 8005600:	4259      	negs	r1, r3
 8005602:	414b      	adcs	r3, r1
 8005604:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8005606:	3a01      	subs	r2, #1
 8005608:	18cb      	adds	r3, r1, r3
 800560a:	9310      	str	r3, [sp, #64]	@ 0x40
 800560c:	ab09      	add	r3, sp, #36	@ 0x24
 800560e:	9304      	str	r3, [sp, #16]
 8005610:	ab08      	add	r3, sp, #32
 8005612:	9303      	str	r3, [sp, #12]
 8005614:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005616:	9200      	str	r2, [sp, #0]
 8005618:	9302      	str	r3, [sp, #8]
 800561a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800561c:	0032      	movs	r2, r6
 800561e:	9301      	str	r3, [sp, #4]
 8005620:	003b      	movs	r3, r7
 8005622:	f001 f931 	bl	8006888 <_dtoa_r>
 8005626:	0004      	movs	r4, r0
 8005628:	2d47      	cmp	r5, #71	@ 0x47
 800562a:	d11b      	bne.n	8005664 <__cvt+0x90>
 800562c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800562e:	07db      	lsls	r3, r3, #31
 8005630:	d511      	bpl.n	8005656 <__cvt+0x82>
 8005632:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005634:	18c3      	adds	r3, r0, r3
 8005636:	9307      	str	r3, [sp, #28]
 8005638:	2200      	movs	r2, #0
 800563a:	2300      	movs	r3, #0
 800563c:	0030      	movs	r0, r6
 800563e:	0039      	movs	r1, r7
 8005640:	f7fa ff04 	bl	800044c <__aeabi_dcmpeq>
 8005644:	2800      	cmp	r0, #0
 8005646:	d001      	beq.n	800564c <__cvt+0x78>
 8005648:	9b07      	ldr	r3, [sp, #28]
 800564a:	9309      	str	r3, [sp, #36]	@ 0x24
 800564c:	2230      	movs	r2, #48	@ 0x30
 800564e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005650:	9907      	ldr	r1, [sp, #28]
 8005652:	428b      	cmp	r3, r1
 8005654:	d320      	bcc.n	8005698 <__cvt+0xc4>
 8005656:	0020      	movs	r0, r4
 8005658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800565a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800565c:	1b1b      	subs	r3, r3, r4
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	b00b      	add	sp, #44	@ 0x2c
 8005662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005664:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005666:	18c3      	adds	r3, r0, r3
 8005668:	9307      	str	r3, [sp, #28]
 800566a:	2d46      	cmp	r5, #70	@ 0x46
 800566c:	d1e4      	bne.n	8005638 <__cvt+0x64>
 800566e:	7803      	ldrb	r3, [r0, #0]
 8005670:	2b30      	cmp	r3, #48	@ 0x30
 8005672:	d10c      	bne.n	800568e <__cvt+0xba>
 8005674:	2200      	movs	r2, #0
 8005676:	2300      	movs	r3, #0
 8005678:	0030      	movs	r0, r6
 800567a:	0039      	movs	r1, r7
 800567c:	f7fa fee6 	bl	800044c <__aeabi_dcmpeq>
 8005680:	2800      	cmp	r0, #0
 8005682:	d104      	bne.n	800568e <__cvt+0xba>
 8005684:	2301      	movs	r3, #1
 8005686:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8005688:	1a9b      	subs	r3, r3, r2
 800568a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005690:	9a07      	ldr	r2, [sp, #28]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	18d3      	adds	r3, r2, r3
 8005696:	e7ce      	b.n	8005636 <__cvt+0x62>
 8005698:	1c59      	adds	r1, r3, #1
 800569a:	9109      	str	r1, [sp, #36]	@ 0x24
 800569c:	701a      	strb	r2, [r3, #0]
 800569e:	e7d6      	b.n	800564e <__cvt+0x7a>

080056a0 <__exponent>:
 80056a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056a2:	232b      	movs	r3, #43	@ 0x2b
 80056a4:	b085      	sub	sp, #20
 80056a6:	0005      	movs	r5, r0
 80056a8:	1e0c      	subs	r4, r1, #0
 80056aa:	7002      	strb	r2, [r0, #0]
 80056ac:	da01      	bge.n	80056b2 <__exponent+0x12>
 80056ae:	424c      	negs	r4, r1
 80056b0:	3302      	adds	r3, #2
 80056b2:	706b      	strb	r3, [r5, #1]
 80056b4:	2c09      	cmp	r4, #9
 80056b6:	dd2c      	ble.n	8005712 <__exponent+0x72>
 80056b8:	ab02      	add	r3, sp, #8
 80056ba:	1dde      	adds	r6, r3, #7
 80056bc:	0020      	movs	r0, r4
 80056be:	210a      	movs	r1, #10
 80056c0:	f7fa feae 	bl	8000420 <__aeabi_idivmod>
 80056c4:	0037      	movs	r7, r6
 80056c6:	3130      	adds	r1, #48	@ 0x30
 80056c8:	3e01      	subs	r6, #1
 80056ca:	0020      	movs	r0, r4
 80056cc:	7031      	strb	r1, [r6, #0]
 80056ce:	210a      	movs	r1, #10
 80056d0:	9401      	str	r4, [sp, #4]
 80056d2:	f7fa fdbf 	bl	8000254 <__divsi3>
 80056d6:	9b01      	ldr	r3, [sp, #4]
 80056d8:	0004      	movs	r4, r0
 80056da:	2b63      	cmp	r3, #99	@ 0x63
 80056dc:	dcee      	bgt.n	80056bc <__exponent+0x1c>
 80056de:	1eba      	subs	r2, r7, #2
 80056e0:	1ca8      	adds	r0, r5, #2
 80056e2:	0001      	movs	r1, r0
 80056e4:	0013      	movs	r3, r2
 80056e6:	3430      	adds	r4, #48	@ 0x30
 80056e8:	7014      	strb	r4, [r2, #0]
 80056ea:	ac02      	add	r4, sp, #8
 80056ec:	3407      	adds	r4, #7
 80056ee:	429c      	cmp	r4, r3
 80056f0:	d80a      	bhi.n	8005708 <__exponent+0x68>
 80056f2:	2300      	movs	r3, #0
 80056f4:	4294      	cmp	r4, r2
 80056f6:	d303      	bcc.n	8005700 <__exponent+0x60>
 80056f8:	3309      	adds	r3, #9
 80056fa:	aa02      	add	r2, sp, #8
 80056fc:	189b      	adds	r3, r3, r2
 80056fe:	1bdb      	subs	r3, r3, r7
 8005700:	18c0      	adds	r0, r0, r3
 8005702:	1b40      	subs	r0, r0, r5
 8005704:	b005      	add	sp, #20
 8005706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005708:	781c      	ldrb	r4, [r3, #0]
 800570a:	3301      	adds	r3, #1
 800570c:	700c      	strb	r4, [r1, #0]
 800570e:	3101      	adds	r1, #1
 8005710:	e7eb      	b.n	80056ea <__exponent+0x4a>
 8005712:	2330      	movs	r3, #48	@ 0x30
 8005714:	18e4      	adds	r4, r4, r3
 8005716:	70ab      	strb	r3, [r5, #2]
 8005718:	1d28      	adds	r0, r5, #4
 800571a:	70ec      	strb	r4, [r5, #3]
 800571c:	e7f1      	b.n	8005702 <__exponent+0x62>
	...

08005720 <_printf_float>:
 8005720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005722:	b097      	sub	sp, #92	@ 0x5c
 8005724:	000d      	movs	r5, r1
 8005726:	920a      	str	r2, [sp, #40]	@ 0x28
 8005728:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800572a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800572c:	9009      	str	r0, [sp, #36]	@ 0x24
 800572e:	f000 ff97 	bl	8006660 <_localeconv_r>
 8005732:	6803      	ldr	r3, [r0, #0]
 8005734:	0018      	movs	r0, r3
 8005736:	930d      	str	r3, [sp, #52]	@ 0x34
 8005738:	f7fa fce6 	bl	8000108 <strlen>
 800573c:	2300      	movs	r3, #0
 800573e:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005740:	9314      	str	r3, [sp, #80]	@ 0x50
 8005742:	7e2b      	ldrb	r3, [r5, #24]
 8005744:	2207      	movs	r2, #7
 8005746:	930c      	str	r3, [sp, #48]	@ 0x30
 8005748:	682b      	ldr	r3, [r5, #0]
 800574a:	930e      	str	r3, [sp, #56]	@ 0x38
 800574c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	05c9      	lsls	r1, r1, #23
 8005752:	d545      	bpl.n	80057e0 <_printf_float+0xc0>
 8005754:	189b      	adds	r3, r3, r2
 8005756:	4393      	bics	r3, r2
 8005758:	001a      	movs	r2, r3
 800575a:	3208      	adds	r2, #8
 800575c:	6022      	str	r2, [r4, #0]
 800575e:	2201      	movs	r2, #1
 8005760:	681e      	ldr	r6, [r3, #0]
 8005762:	685f      	ldr	r7, [r3, #4]
 8005764:	007b      	lsls	r3, r7, #1
 8005766:	085b      	lsrs	r3, r3, #1
 8005768:	9311      	str	r3, [sp, #68]	@ 0x44
 800576a:	9610      	str	r6, [sp, #64]	@ 0x40
 800576c:	64ae      	str	r6, [r5, #72]	@ 0x48
 800576e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8005770:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005772:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005774:	4ba7      	ldr	r3, [pc, #668]	@ (8005a14 <_printf_float+0x2f4>)
 8005776:	4252      	negs	r2, r2
 8005778:	f7fc fdf4 	bl	8002364 <__aeabi_dcmpun>
 800577c:	2800      	cmp	r0, #0
 800577e:	d131      	bne.n	80057e4 <_printf_float+0xc4>
 8005780:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005782:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8005784:	2201      	movs	r2, #1
 8005786:	4ba3      	ldr	r3, [pc, #652]	@ (8005a14 <_printf_float+0x2f4>)
 8005788:	4252      	negs	r2, r2
 800578a:	f7fa fe6f 	bl	800046c <__aeabi_dcmple>
 800578e:	2800      	cmp	r0, #0
 8005790:	d128      	bne.n	80057e4 <_printf_float+0xc4>
 8005792:	2200      	movs	r2, #0
 8005794:	2300      	movs	r3, #0
 8005796:	0030      	movs	r0, r6
 8005798:	0039      	movs	r1, r7
 800579a:	f7fa fe5d 	bl	8000458 <__aeabi_dcmplt>
 800579e:	2800      	cmp	r0, #0
 80057a0:	d003      	beq.n	80057aa <_printf_float+0x8a>
 80057a2:	002b      	movs	r3, r5
 80057a4:	222d      	movs	r2, #45	@ 0x2d
 80057a6:	3343      	adds	r3, #67	@ 0x43
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80057ac:	4f9a      	ldr	r7, [pc, #616]	@ (8005a18 <_printf_float+0x2f8>)
 80057ae:	2b47      	cmp	r3, #71	@ 0x47
 80057b0:	d800      	bhi.n	80057b4 <_printf_float+0x94>
 80057b2:	4f9a      	ldr	r7, [pc, #616]	@ (8005a1c <_printf_float+0x2fc>)
 80057b4:	2303      	movs	r3, #3
 80057b6:	2400      	movs	r4, #0
 80057b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80057ba:	612b      	str	r3, [r5, #16]
 80057bc:	3301      	adds	r3, #1
 80057be:	439a      	bics	r2, r3
 80057c0:	602a      	str	r2, [r5, #0]
 80057c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057c4:	0029      	movs	r1, r5
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057cc:	aa15      	add	r2, sp, #84	@ 0x54
 80057ce:	f000 f9e5 	bl	8005b9c <_printf_common>
 80057d2:	3001      	adds	r0, #1
 80057d4:	d000      	beq.n	80057d8 <_printf_float+0xb8>
 80057d6:	e09e      	b.n	8005916 <_printf_float+0x1f6>
 80057d8:	2001      	movs	r0, #1
 80057da:	4240      	negs	r0, r0
 80057dc:	b017      	add	sp, #92	@ 0x5c
 80057de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057e0:	3307      	adds	r3, #7
 80057e2:	e7b8      	b.n	8005756 <_printf_float+0x36>
 80057e4:	0032      	movs	r2, r6
 80057e6:	003b      	movs	r3, r7
 80057e8:	0030      	movs	r0, r6
 80057ea:	0039      	movs	r1, r7
 80057ec:	f7fc fdba 	bl	8002364 <__aeabi_dcmpun>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d00b      	beq.n	800580c <_printf_float+0xec>
 80057f4:	2f00      	cmp	r7, #0
 80057f6:	da03      	bge.n	8005800 <_printf_float+0xe0>
 80057f8:	002b      	movs	r3, r5
 80057fa:	222d      	movs	r2, #45	@ 0x2d
 80057fc:	3343      	adds	r3, #67	@ 0x43
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005802:	4f87      	ldr	r7, [pc, #540]	@ (8005a20 <_printf_float+0x300>)
 8005804:	2b47      	cmp	r3, #71	@ 0x47
 8005806:	d8d5      	bhi.n	80057b4 <_printf_float+0x94>
 8005808:	4f86      	ldr	r7, [pc, #536]	@ (8005a24 <_printf_float+0x304>)
 800580a:	e7d3      	b.n	80057b4 <_printf_float+0x94>
 800580c:	2220      	movs	r2, #32
 800580e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8005810:	686b      	ldr	r3, [r5, #4]
 8005812:	4394      	bics	r4, r2
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	d146      	bne.n	80058a6 <_printf_float+0x186>
 8005818:	3307      	adds	r3, #7
 800581a:	606b      	str	r3, [r5, #4]
 800581c:	2380      	movs	r3, #128	@ 0x80
 800581e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005820:	00db      	lsls	r3, r3, #3
 8005822:	4313      	orrs	r3, r2
 8005824:	2200      	movs	r2, #0
 8005826:	602b      	str	r3, [r5, #0]
 8005828:	9206      	str	r2, [sp, #24]
 800582a:	aa14      	add	r2, sp, #80	@ 0x50
 800582c:	9205      	str	r2, [sp, #20]
 800582e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005830:	a90a      	add	r1, sp, #40	@ 0x28
 8005832:	9204      	str	r2, [sp, #16]
 8005834:	aa13      	add	r2, sp, #76	@ 0x4c
 8005836:	9203      	str	r2, [sp, #12]
 8005838:	2223      	movs	r2, #35	@ 0x23
 800583a:	1852      	adds	r2, r2, r1
 800583c:	9202      	str	r2, [sp, #8]
 800583e:	9301      	str	r3, [sp, #4]
 8005840:	686b      	ldr	r3, [r5, #4]
 8005842:	0032      	movs	r2, r6
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005848:	003b      	movs	r3, r7
 800584a:	f7ff fec3 	bl	80055d4 <__cvt>
 800584e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005850:	0007      	movs	r7, r0
 8005852:	2c47      	cmp	r4, #71	@ 0x47
 8005854:	d12d      	bne.n	80058b2 <_printf_float+0x192>
 8005856:	1cd3      	adds	r3, r2, #3
 8005858:	db02      	blt.n	8005860 <_printf_float+0x140>
 800585a:	686b      	ldr	r3, [r5, #4]
 800585c:	429a      	cmp	r2, r3
 800585e:	dd47      	ble.n	80058f0 <_printf_float+0x1d0>
 8005860:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005862:	3b02      	subs	r3, #2
 8005864:	b2db      	uxtb	r3, r3
 8005866:	930c      	str	r3, [sp, #48]	@ 0x30
 8005868:	0028      	movs	r0, r5
 800586a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800586c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800586e:	3901      	subs	r1, #1
 8005870:	3050      	adds	r0, #80	@ 0x50
 8005872:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005874:	f7ff ff14 	bl	80056a0 <__exponent>
 8005878:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800587a:	0004      	movs	r4, r0
 800587c:	1813      	adds	r3, r2, r0
 800587e:	612b      	str	r3, [r5, #16]
 8005880:	2a01      	cmp	r2, #1
 8005882:	dc02      	bgt.n	800588a <_printf_float+0x16a>
 8005884:	682a      	ldr	r2, [r5, #0]
 8005886:	07d2      	lsls	r2, r2, #31
 8005888:	d501      	bpl.n	800588e <_printf_float+0x16e>
 800588a:	3301      	adds	r3, #1
 800588c:	612b      	str	r3, [r5, #16]
 800588e:	2323      	movs	r3, #35	@ 0x23
 8005890:	aa0a      	add	r2, sp, #40	@ 0x28
 8005892:	189b      	adds	r3, r3, r2
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d100      	bne.n	800589c <_printf_float+0x17c>
 800589a:	e792      	b.n	80057c2 <_printf_float+0xa2>
 800589c:	002b      	movs	r3, r5
 800589e:	222d      	movs	r2, #45	@ 0x2d
 80058a0:	3343      	adds	r3, #67	@ 0x43
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	e78d      	b.n	80057c2 <_printf_float+0xa2>
 80058a6:	2c47      	cmp	r4, #71	@ 0x47
 80058a8:	d1b8      	bne.n	800581c <_printf_float+0xfc>
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1b6      	bne.n	800581c <_printf_float+0xfc>
 80058ae:	3301      	adds	r3, #1
 80058b0:	e7b3      	b.n	800581a <_printf_float+0xfa>
 80058b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058b4:	2b65      	cmp	r3, #101	@ 0x65
 80058b6:	d9d7      	bls.n	8005868 <_printf_float+0x148>
 80058b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80058ba:	2b66      	cmp	r3, #102	@ 0x66
 80058bc:	d11a      	bne.n	80058f4 <_printf_float+0x1d4>
 80058be:	686b      	ldr	r3, [r5, #4]
 80058c0:	2a00      	cmp	r2, #0
 80058c2:	dd09      	ble.n	80058d8 <_printf_float+0x1b8>
 80058c4:	612a      	str	r2, [r5, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d102      	bne.n	80058d0 <_printf_float+0x1b0>
 80058ca:	6829      	ldr	r1, [r5, #0]
 80058cc:	07c9      	lsls	r1, r1, #31
 80058ce:	d50b      	bpl.n	80058e8 <_printf_float+0x1c8>
 80058d0:	3301      	adds	r3, #1
 80058d2:	189b      	adds	r3, r3, r2
 80058d4:	612b      	str	r3, [r5, #16]
 80058d6:	e007      	b.n	80058e8 <_printf_float+0x1c8>
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d103      	bne.n	80058e4 <_printf_float+0x1c4>
 80058dc:	2201      	movs	r2, #1
 80058de:	6829      	ldr	r1, [r5, #0]
 80058e0:	4211      	tst	r1, r2
 80058e2:	d000      	beq.n	80058e6 <_printf_float+0x1c6>
 80058e4:	1c9a      	adds	r2, r3, #2
 80058e6:	612a      	str	r2, [r5, #16]
 80058e8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80058ea:	2400      	movs	r4, #0
 80058ec:	65ab      	str	r3, [r5, #88]	@ 0x58
 80058ee:	e7ce      	b.n	800588e <_printf_float+0x16e>
 80058f0:	2367      	movs	r3, #103	@ 0x67
 80058f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80058f4:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80058f6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80058f8:	4299      	cmp	r1, r3
 80058fa:	db06      	blt.n	800590a <_printf_float+0x1ea>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	6129      	str	r1, [r5, #16]
 8005900:	07db      	lsls	r3, r3, #31
 8005902:	d5f1      	bpl.n	80058e8 <_printf_float+0x1c8>
 8005904:	3101      	adds	r1, #1
 8005906:	6129      	str	r1, [r5, #16]
 8005908:	e7ee      	b.n	80058e8 <_printf_float+0x1c8>
 800590a:	2201      	movs	r2, #1
 800590c:	2900      	cmp	r1, #0
 800590e:	dce0      	bgt.n	80058d2 <_printf_float+0x1b2>
 8005910:	1892      	adds	r2, r2, r2
 8005912:	1a52      	subs	r2, r2, r1
 8005914:	e7dd      	b.n	80058d2 <_printf_float+0x1b2>
 8005916:	682a      	ldr	r2, [r5, #0]
 8005918:	0553      	lsls	r3, r2, #21
 800591a:	d408      	bmi.n	800592e <_printf_float+0x20e>
 800591c:	692b      	ldr	r3, [r5, #16]
 800591e:	003a      	movs	r2, r7
 8005920:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005924:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005926:	47a0      	blx	r4
 8005928:	3001      	adds	r0, #1
 800592a:	d129      	bne.n	8005980 <_printf_float+0x260>
 800592c:	e754      	b.n	80057d8 <_printf_float+0xb8>
 800592e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005930:	2b65      	cmp	r3, #101	@ 0x65
 8005932:	d800      	bhi.n	8005936 <_printf_float+0x216>
 8005934:	e0db      	b.n	8005aee <_printf_float+0x3ce>
 8005936:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005938:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800593a:	2200      	movs	r2, #0
 800593c:	2300      	movs	r3, #0
 800593e:	f7fa fd85 	bl	800044c <__aeabi_dcmpeq>
 8005942:	2800      	cmp	r0, #0
 8005944:	d033      	beq.n	80059ae <_printf_float+0x28e>
 8005946:	2301      	movs	r3, #1
 8005948:	4a37      	ldr	r2, [pc, #220]	@ (8005a28 <_printf_float+0x308>)
 800594a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800594c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800594e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005950:	47a0      	blx	r4
 8005952:	3001      	adds	r0, #1
 8005954:	d100      	bne.n	8005958 <_printf_float+0x238>
 8005956:	e73f      	b.n	80057d8 <_printf_float+0xb8>
 8005958:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800595a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800595c:	42b3      	cmp	r3, r6
 800595e:	db02      	blt.n	8005966 <_printf_float+0x246>
 8005960:	682b      	ldr	r3, [r5, #0]
 8005962:	07db      	lsls	r3, r3, #31
 8005964:	d50c      	bpl.n	8005980 <_printf_float+0x260>
 8005966:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005968:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800596a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800596c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800596e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005970:	47a0      	blx	r4
 8005972:	2400      	movs	r4, #0
 8005974:	3001      	adds	r0, #1
 8005976:	d100      	bne.n	800597a <_printf_float+0x25a>
 8005978:	e72e      	b.n	80057d8 <_printf_float+0xb8>
 800597a:	1e73      	subs	r3, r6, #1
 800597c:	42a3      	cmp	r3, r4
 800597e:	dc0a      	bgt.n	8005996 <_printf_float+0x276>
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	079b      	lsls	r3, r3, #30
 8005984:	d500      	bpl.n	8005988 <_printf_float+0x268>
 8005986:	e106      	b.n	8005b96 <_printf_float+0x476>
 8005988:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800598a:	68e8      	ldr	r0, [r5, #12]
 800598c:	4298      	cmp	r0, r3
 800598e:	db00      	blt.n	8005992 <_printf_float+0x272>
 8005990:	e724      	b.n	80057dc <_printf_float+0xbc>
 8005992:	0018      	movs	r0, r3
 8005994:	e722      	b.n	80057dc <_printf_float+0xbc>
 8005996:	002a      	movs	r2, r5
 8005998:	2301      	movs	r3, #1
 800599a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800599c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800599e:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80059a0:	321a      	adds	r2, #26
 80059a2:	47b8      	blx	r7
 80059a4:	3001      	adds	r0, #1
 80059a6:	d100      	bne.n	80059aa <_printf_float+0x28a>
 80059a8:	e716      	b.n	80057d8 <_printf_float+0xb8>
 80059aa:	3401      	adds	r4, #1
 80059ac:	e7e5      	b.n	800597a <_printf_float+0x25a>
 80059ae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	dc3b      	bgt.n	8005a2c <_printf_float+0x30c>
 80059b4:	2301      	movs	r3, #1
 80059b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005a28 <_printf_float+0x308>)
 80059b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059bc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80059be:	47a0      	blx	r4
 80059c0:	3001      	adds	r0, #1
 80059c2:	d100      	bne.n	80059c6 <_printf_float+0x2a6>
 80059c4:	e708      	b.n	80057d8 <_printf_float+0xb8>
 80059c6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80059c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80059ca:	4333      	orrs	r3, r6
 80059cc:	d102      	bne.n	80059d4 <_printf_float+0x2b4>
 80059ce:	682b      	ldr	r3, [r5, #0]
 80059d0:	07db      	lsls	r3, r3, #31
 80059d2:	d5d5      	bpl.n	8005980 <_printf_float+0x260>
 80059d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80059d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059dc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80059de:	47a0      	blx	r4
 80059e0:	2300      	movs	r3, #0
 80059e2:	3001      	adds	r0, #1
 80059e4:	d100      	bne.n	80059e8 <_printf_float+0x2c8>
 80059e6:	e6f7      	b.n	80057d8 <_printf_float+0xb8>
 80059e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80059ea:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80059ec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80059ee:	425b      	negs	r3, r3
 80059f0:	4293      	cmp	r3, r2
 80059f2:	dc01      	bgt.n	80059f8 <_printf_float+0x2d8>
 80059f4:	0033      	movs	r3, r6
 80059f6:	e792      	b.n	800591e <_printf_float+0x1fe>
 80059f8:	002a      	movs	r2, r5
 80059fa:	2301      	movs	r3, #1
 80059fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80059fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a00:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005a02:	321a      	adds	r2, #26
 8005a04:	47a0      	blx	r4
 8005a06:	3001      	adds	r0, #1
 8005a08:	d100      	bne.n	8005a0c <_printf_float+0x2ec>
 8005a0a:	e6e5      	b.n	80057d8 <_printf_float+0xb8>
 8005a0c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a0e:	3301      	adds	r3, #1
 8005a10:	e7ea      	b.n	80059e8 <_printf_float+0x2c8>
 8005a12:	46c0      	nop			@ (mov r8, r8)
 8005a14:	7fefffff 	.word	0x7fefffff
 8005a18:	08009f28 	.word	0x08009f28
 8005a1c:	08009f24 	.word	0x08009f24
 8005a20:	08009f30 	.word	0x08009f30
 8005a24:	08009f2c 	.word	0x08009f2c
 8005a28:	08009f34 	.word	0x08009f34
 8005a2c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005a2e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8005a30:	930c      	str	r3, [sp, #48]	@ 0x30
 8005a32:	429e      	cmp	r6, r3
 8005a34:	dd00      	ble.n	8005a38 <_printf_float+0x318>
 8005a36:	001e      	movs	r6, r3
 8005a38:	2e00      	cmp	r6, #0
 8005a3a:	dc31      	bgt.n	8005aa0 <_printf_float+0x380>
 8005a3c:	43f3      	mvns	r3, r6
 8005a3e:	2400      	movs	r4, #0
 8005a40:	17db      	asrs	r3, r3, #31
 8005a42:	4033      	ands	r3, r6
 8005a44:	930e      	str	r3, [sp, #56]	@ 0x38
 8005a46:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8005a48:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a4a:	1af3      	subs	r3, r6, r3
 8005a4c:	42a3      	cmp	r3, r4
 8005a4e:	dc30      	bgt.n	8005ab2 <_printf_float+0x392>
 8005a50:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005a52:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005a54:	429a      	cmp	r2, r3
 8005a56:	dc38      	bgt.n	8005aca <_printf_float+0x3aa>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	07db      	lsls	r3, r3, #31
 8005a5c:	d435      	bmi.n	8005aca <_printf_float+0x3aa>
 8005a5e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8005a60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a62:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005a64:	1b9b      	subs	r3, r3, r6
 8005a66:	1b14      	subs	r4, r2, r4
 8005a68:	429c      	cmp	r4, r3
 8005a6a:	dd00      	ble.n	8005a6e <_printf_float+0x34e>
 8005a6c:	001c      	movs	r4, r3
 8005a6e:	2c00      	cmp	r4, #0
 8005a70:	dc34      	bgt.n	8005adc <_printf_float+0x3bc>
 8005a72:	43e3      	mvns	r3, r4
 8005a74:	2600      	movs	r6, #0
 8005a76:	17db      	asrs	r3, r3, #31
 8005a78:	401c      	ands	r4, r3
 8005a7a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005a7c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	1b1b      	subs	r3, r3, r4
 8005a82:	42b3      	cmp	r3, r6
 8005a84:	dc00      	bgt.n	8005a88 <_printf_float+0x368>
 8005a86:	e77b      	b.n	8005980 <_printf_float+0x260>
 8005a88:	002a      	movs	r2, r5
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005a8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a90:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005a92:	321a      	adds	r2, #26
 8005a94:	47b8      	blx	r7
 8005a96:	3001      	adds	r0, #1
 8005a98:	d100      	bne.n	8005a9c <_printf_float+0x37c>
 8005a9a:	e69d      	b.n	80057d8 <_printf_float+0xb8>
 8005a9c:	3601      	adds	r6, #1
 8005a9e:	e7ec      	b.n	8005a7a <_printf_float+0x35a>
 8005aa0:	0033      	movs	r3, r6
 8005aa2:	003a      	movs	r2, r7
 8005aa4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005aa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005aa8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005aaa:	47a0      	blx	r4
 8005aac:	3001      	adds	r0, #1
 8005aae:	d1c5      	bne.n	8005a3c <_printf_float+0x31c>
 8005ab0:	e692      	b.n	80057d8 <_printf_float+0xb8>
 8005ab2:	002a      	movs	r2, r5
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ab8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005aba:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005abc:	321a      	adds	r2, #26
 8005abe:	47b0      	blx	r6
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d100      	bne.n	8005ac6 <_printf_float+0x3a6>
 8005ac4:	e688      	b.n	80057d8 <_printf_float+0xb8>
 8005ac6:	3401      	adds	r4, #1
 8005ac8:	e7bd      	b.n	8005a46 <_printf_float+0x326>
 8005aca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005acc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005ace:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ad0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ad2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8005ad4:	47a0      	blx	r4
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	d1c1      	bne.n	8005a5e <_printf_float+0x33e>
 8005ada:	e67d      	b.n	80057d8 <_printf_float+0xb8>
 8005adc:	19ba      	adds	r2, r7, r6
 8005ade:	0023      	movs	r3, r4
 8005ae0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005ae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ae4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005ae6:	47b0      	blx	r6
 8005ae8:	3001      	adds	r0, #1
 8005aea:	d1c2      	bne.n	8005a72 <_printf_float+0x352>
 8005aec:	e674      	b.n	80057d8 <_printf_float+0xb8>
 8005aee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005af0:	930c      	str	r3, [sp, #48]	@ 0x30
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	dc02      	bgt.n	8005afc <_printf_float+0x3dc>
 8005af6:	2301      	movs	r3, #1
 8005af8:	421a      	tst	r2, r3
 8005afa:	d039      	beq.n	8005b70 <_printf_float+0x450>
 8005afc:	2301      	movs	r3, #1
 8005afe:	003a      	movs	r2, r7
 8005b00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b04:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005b06:	47b0      	blx	r6
 8005b08:	3001      	adds	r0, #1
 8005b0a:	d100      	bne.n	8005b0e <_printf_float+0x3ee>
 8005b0c:	e664      	b.n	80057d8 <_printf_float+0xb8>
 8005b0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005b12:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b14:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b16:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005b18:	47b0      	blx	r6
 8005b1a:	3001      	adds	r0, #1
 8005b1c:	d100      	bne.n	8005b20 <_printf_float+0x400>
 8005b1e:	e65b      	b.n	80057d8 <_printf_float+0xb8>
 8005b20:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8005b22:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8005b24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b26:	2200      	movs	r2, #0
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f7fa fc8d 	bl	800044c <__aeabi_dcmpeq>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	d11a      	bne.n	8005b6c <_printf_float+0x44c>
 8005b36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b38:	1c7a      	adds	r2, r7, #1
 8005b3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b3c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b3e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005b40:	47b0      	blx	r6
 8005b42:	3001      	adds	r0, #1
 8005b44:	d10e      	bne.n	8005b64 <_printf_float+0x444>
 8005b46:	e647      	b.n	80057d8 <_printf_float+0xb8>
 8005b48:	002a      	movs	r2, r5
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b50:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8005b52:	321a      	adds	r2, #26
 8005b54:	47b8      	blx	r7
 8005b56:	3001      	adds	r0, #1
 8005b58:	d100      	bne.n	8005b5c <_printf_float+0x43c>
 8005b5a:	e63d      	b.n	80057d8 <_printf_float+0xb8>
 8005b5c:	3601      	adds	r6, #1
 8005b5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b60:	429e      	cmp	r6, r3
 8005b62:	dbf1      	blt.n	8005b48 <_printf_float+0x428>
 8005b64:	002a      	movs	r2, r5
 8005b66:	0023      	movs	r3, r4
 8005b68:	3250      	adds	r2, #80	@ 0x50
 8005b6a:	e6d9      	b.n	8005920 <_printf_float+0x200>
 8005b6c:	2600      	movs	r6, #0
 8005b6e:	e7f6      	b.n	8005b5e <_printf_float+0x43e>
 8005b70:	003a      	movs	r2, r7
 8005b72:	e7e2      	b.n	8005b3a <_printf_float+0x41a>
 8005b74:	002a      	movs	r2, r5
 8005b76:	2301      	movs	r3, #1
 8005b78:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005b7c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005b7e:	3219      	adds	r2, #25
 8005b80:	47b0      	blx	r6
 8005b82:	3001      	adds	r0, #1
 8005b84:	d100      	bne.n	8005b88 <_printf_float+0x468>
 8005b86:	e627      	b.n	80057d8 <_printf_float+0xb8>
 8005b88:	3401      	adds	r4, #1
 8005b8a:	68eb      	ldr	r3, [r5, #12]
 8005b8c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005b8e:	1a9b      	subs	r3, r3, r2
 8005b90:	42a3      	cmp	r3, r4
 8005b92:	dcef      	bgt.n	8005b74 <_printf_float+0x454>
 8005b94:	e6f8      	b.n	8005988 <_printf_float+0x268>
 8005b96:	2400      	movs	r4, #0
 8005b98:	e7f7      	b.n	8005b8a <_printf_float+0x46a>
 8005b9a:	46c0      	nop			@ (mov r8, r8)

08005b9c <_printf_common>:
 8005b9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b9e:	0016      	movs	r6, r2
 8005ba0:	9301      	str	r3, [sp, #4]
 8005ba2:	688a      	ldr	r2, [r1, #8]
 8005ba4:	690b      	ldr	r3, [r1, #16]
 8005ba6:	000c      	movs	r4, r1
 8005ba8:	9000      	str	r0, [sp, #0]
 8005baa:	4293      	cmp	r3, r2
 8005bac:	da00      	bge.n	8005bb0 <_printf_common+0x14>
 8005bae:	0013      	movs	r3, r2
 8005bb0:	0022      	movs	r2, r4
 8005bb2:	6033      	str	r3, [r6, #0]
 8005bb4:	3243      	adds	r2, #67	@ 0x43
 8005bb6:	7812      	ldrb	r2, [r2, #0]
 8005bb8:	2a00      	cmp	r2, #0
 8005bba:	d001      	beq.n	8005bc0 <_printf_common+0x24>
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	6033      	str	r3, [r6, #0]
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	069b      	lsls	r3, r3, #26
 8005bc4:	d502      	bpl.n	8005bcc <_printf_common+0x30>
 8005bc6:	6833      	ldr	r3, [r6, #0]
 8005bc8:	3302      	adds	r3, #2
 8005bca:	6033      	str	r3, [r6, #0]
 8005bcc:	6822      	ldr	r2, [r4, #0]
 8005bce:	2306      	movs	r3, #6
 8005bd0:	0015      	movs	r5, r2
 8005bd2:	401d      	ands	r5, r3
 8005bd4:	421a      	tst	r2, r3
 8005bd6:	d027      	beq.n	8005c28 <_printf_common+0x8c>
 8005bd8:	0023      	movs	r3, r4
 8005bda:	3343      	adds	r3, #67	@ 0x43
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	1e5a      	subs	r2, r3, #1
 8005be0:	4193      	sbcs	r3, r2
 8005be2:	6822      	ldr	r2, [r4, #0]
 8005be4:	0692      	lsls	r2, r2, #26
 8005be6:	d430      	bmi.n	8005c4a <_printf_common+0xae>
 8005be8:	0022      	movs	r2, r4
 8005bea:	9901      	ldr	r1, [sp, #4]
 8005bec:	9800      	ldr	r0, [sp, #0]
 8005bee:	9d08      	ldr	r5, [sp, #32]
 8005bf0:	3243      	adds	r2, #67	@ 0x43
 8005bf2:	47a8      	blx	r5
 8005bf4:	3001      	adds	r0, #1
 8005bf6:	d025      	beq.n	8005c44 <_printf_common+0xa8>
 8005bf8:	2206      	movs	r2, #6
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	2500      	movs	r5, #0
 8005bfe:	4013      	ands	r3, r2
 8005c00:	2b04      	cmp	r3, #4
 8005c02:	d105      	bne.n	8005c10 <_printf_common+0x74>
 8005c04:	6833      	ldr	r3, [r6, #0]
 8005c06:	68e5      	ldr	r5, [r4, #12]
 8005c08:	1aed      	subs	r5, r5, r3
 8005c0a:	43eb      	mvns	r3, r5
 8005c0c:	17db      	asrs	r3, r3, #31
 8005c0e:	401d      	ands	r5, r3
 8005c10:	68a3      	ldr	r3, [r4, #8]
 8005c12:	6922      	ldr	r2, [r4, #16]
 8005c14:	4293      	cmp	r3, r2
 8005c16:	dd01      	ble.n	8005c1c <_printf_common+0x80>
 8005c18:	1a9b      	subs	r3, r3, r2
 8005c1a:	18ed      	adds	r5, r5, r3
 8005c1c:	2600      	movs	r6, #0
 8005c1e:	42b5      	cmp	r5, r6
 8005c20:	d120      	bne.n	8005c64 <_printf_common+0xc8>
 8005c22:	2000      	movs	r0, #0
 8005c24:	e010      	b.n	8005c48 <_printf_common+0xac>
 8005c26:	3501      	adds	r5, #1
 8005c28:	68e3      	ldr	r3, [r4, #12]
 8005c2a:	6832      	ldr	r2, [r6, #0]
 8005c2c:	1a9b      	subs	r3, r3, r2
 8005c2e:	42ab      	cmp	r3, r5
 8005c30:	ddd2      	ble.n	8005bd8 <_printf_common+0x3c>
 8005c32:	0022      	movs	r2, r4
 8005c34:	2301      	movs	r3, #1
 8005c36:	9901      	ldr	r1, [sp, #4]
 8005c38:	9800      	ldr	r0, [sp, #0]
 8005c3a:	9f08      	ldr	r7, [sp, #32]
 8005c3c:	3219      	adds	r2, #25
 8005c3e:	47b8      	blx	r7
 8005c40:	3001      	adds	r0, #1
 8005c42:	d1f0      	bne.n	8005c26 <_printf_common+0x8a>
 8005c44:	2001      	movs	r0, #1
 8005c46:	4240      	negs	r0, r0
 8005c48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c4a:	2030      	movs	r0, #48	@ 0x30
 8005c4c:	18e1      	adds	r1, r4, r3
 8005c4e:	3143      	adds	r1, #67	@ 0x43
 8005c50:	7008      	strb	r0, [r1, #0]
 8005c52:	0021      	movs	r1, r4
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	3145      	adds	r1, #69	@ 0x45
 8005c58:	7809      	ldrb	r1, [r1, #0]
 8005c5a:	18a2      	adds	r2, r4, r2
 8005c5c:	3243      	adds	r2, #67	@ 0x43
 8005c5e:	3302      	adds	r3, #2
 8005c60:	7011      	strb	r1, [r2, #0]
 8005c62:	e7c1      	b.n	8005be8 <_printf_common+0x4c>
 8005c64:	0022      	movs	r2, r4
 8005c66:	2301      	movs	r3, #1
 8005c68:	9901      	ldr	r1, [sp, #4]
 8005c6a:	9800      	ldr	r0, [sp, #0]
 8005c6c:	9f08      	ldr	r7, [sp, #32]
 8005c6e:	321a      	adds	r2, #26
 8005c70:	47b8      	blx	r7
 8005c72:	3001      	adds	r0, #1
 8005c74:	d0e6      	beq.n	8005c44 <_printf_common+0xa8>
 8005c76:	3601      	adds	r6, #1
 8005c78:	e7d1      	b.n	8005c1e <_printf_common+0x82>
	...

08005c7c <_printf_i>:
 8005c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c7e:	b08b      	sub	sp, #44	@ 0x2c
 8005c80:	9206      	str	r2, [sp, #24]
 8005c82:	000a      	movs	r2, r1
 8005c84:	3243      	adds	r2, #67	@ 0x43
 8005c86:	9307      	str	r3, [sp, #28]
 8005c88:	9005      	str	r0, [sp, #20]
 8005c8a:	9203      	str	r2, [sp, #12]
 8005c8c:	7e0a      	ldrb	r2, [r1, #24]
 8005c8e:	000c      	movs	r4, r1
 8005c90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c92:	2a78      	cmp	r2, #120	@ 0x78
 8005c94:	d809      	bhi.n	8005caa <_printf_i+0x2e>
 8005c96:	2a62      	cmp	r2, #98	@ 0x62
 8005c98:	d80b      	bhi.n	8005cb2 <_printf_i+0x36>
 8005c9a:	2a00      	cmp	r2, #0
 8005c9c:	d100      	bne.n	8005ca0 <_printf_i+0x24>
 8005c9e:	e0ba      	b.n	8005e16 <_printf_i+0x19a>
 8005ca0:	497a      	ldr	r1, [pc, #488]	@ (8005e8c <_printf_i+0x210>)
 8005ca2:	9104      	str	r1, [sp, #16]
 8005ca4:	2a58      	cmp	r2, #88	@ 0x58
 8005ca6:	d100      	bne.n	8005caa <_printf_i+0x2e>
 8005ca8:	e08e      	b.n	8005dc8 <_printf_i+0x14c>
 8005caa:	0025      	movs	r5, r4
 8005cac:	3542      	adds	r5, #66	@ 0x42
 8005cae:	702a      	strb	r2, [r5, #0]
 8005cb0:	e022      	b.n	8005cf8 <_printf_i+0x7c>
 8005cb2:	0010      	movs	r0, r2
 8005cb4:	3863      	subs	r0, #99	@ 0x63
 8005cb6:	2815      	cmp	r0, #21
 8005cb8:	d8f7      	bhi.n	8005caa <_printf_i+0x2e>
 8005cba:	f7fa fa37 	bl	800012c <__gnu_thumb1_case_shi>
 8005cbe:	0016      	.short	0x0016
 8005cc0:	fff6001f 	.word	0xfff6001f
 8005cc4:	fff6fff6 	.word	0xfff6fff6
 8005cc8:	001ffff6 	.word	0x001ffff6
 8005ccc:	fff6fff6 	.word	0xfff6fff6
 8005cd0:	fff6fff6 	.word	0xfff6fff6
 8005cd4:	0036009f 	.word	0x0036009f
 8005cd8:	fff6007e 	.word	0xfff6007e
 8005cdc:	00b0fff6 	.word	0x00b0fff6
 8005ce0:	0036fff6 	.word	0x0036fff6
 8005ce4:	fff6fff6 	.word	0xfff6fff6
 8005ce8:	0082      	.short	0x0082
 8005cea:	0025      	movs	r5, r4
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	3542      	adds	r5, #66	@ 0x42
 8005cf0:	1d11      	adds	r1, r2, #4
 8005cf2:	6019      	str	r1, [r3, #0]
 8005cf4:	6813      	ldr	r3, [r2, #0]
 8005cf6:	702b      	strb	r3, [r5, #0]
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e09e      	b.n	8005e3a <_printf_i+0x1be>
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	6809      	ldr	r1, [r1, #0]
 8005d00:	1d02      	adds	r2, r0, #4
 8005d02:	060d      	lsls	r5, r1, #24
 8005d04:	d50b      	bpl.n	8005d1e <_printf_i+0xa2>
 8005d06:	6806      	ldr	r6, [r0, #0]
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	2e00      	cmp	r6, #0
 8005d0c:	da03      	bge.n	8005d16 <_printf_i+0x9a>
 8005d0e:	232d      	movs	r3, #45	@ 0x2d
 8005d10:	9a03      	ldr	r2, [sp, #12]
 8005d12:	4276      	negs	r6, r6
 8005d14:	7013      	strb	r3, [r2, #0]
 8005d16:	4b5d      	ldr	r3, [pc, #372]	@ (8005e8c <_printf_i+0x210>)
 8005d18:	270a      	movs	r7, #10
 8005d1a:	9304      	str	r3, [sp, #16]
 8005d1c:	e018      	b.n	8005d50 <_printf_i+0xd4>
 8005d1e:	6806      	ldr	r6, [r0, #0]
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	0649      	lsls	r1, r1, #25
 8005d24:	d5f1      	bpl.n	8005d0a <_printf_i+0x8e>
 8005d26:	b236      	sxth	r6, r6
 8005d28:	e7ef      	b.n	8005d0a <_printf_i+0x8e>
 8005d2a:	6808      	ldr	r0, [r1, #0]
 8005d2c:	6819      	ldr	r1, [r3, #0]
 8005d2e:	c940      	ldmia	r1!, {r6}
 8005d30:	0605      	lsls	r5, r0, #24
 8005d32:	d402      	bmi.n	8005d3a <_printf_i+0xbe>
 8005d34:	0640      	lsls	r0, r0, #25
 8005d36:	d500      	bpl.n	8005d3a <_printf_i+0xbe>
 8005d38:	b2b6      	uxth	r6, r6
 8005d3a:	6019      	str	r1, [r3, #0]
 8005d3c:	4b53      	ldr	r3, [pc, #332]	@ (8005e8c <_printf_i+0x210>)
 8005d3e:	270a      	movs	r7, #10
 8005d40:	9304      	str	r3, [sp, #16]
 8005d42:	2a6f      	cmp	r2, #111	@ 0x6f
 8005d44:	d100      	bne.n	8005d48 <_printf_i+0xcc>
 8005d46:	3f02      	subs	r7, #2
 8005d48:	0023      	movs	r3, r4
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	3343      	adds	r3, #67	@ 0x43
 8005d4e:	701a      	strb	r2, [r3, #0]
 8005d50:	6863      	ldr	r3, [r4, #4]
 8005d52:	60a3      	str	r3, [r4, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	db06      	blt.n	8005d66 <_printf_i+0xea>
 8005d58:	2104      	movs	r1, #4
 8005d5a:	6822      	ldr	r2, [r4, #0]
 8005d5c:	9d03      	ldr	r5, [sp, #12]
 8005d5e:	438a      	bics	r2, r1
 8005d60:	6022      	str	r2, [r4, #0]
 8005d62:	4333      	orrs	r3, r6
 8005d64:	d00c      	beq.n	8005d80 <_printf_i+0x104>
 8005d66:	9d03      	ldr	r5, [sp, #12]
 8005d68:	0030      	movs	r0, r6
 8005d6a:	0039      	movs	r1, r7
 8005d6c:	f7fa fa6e 	bl	800024c <__aeabi_uidivmod>
 8005d70:	9b04      	ldr	r3, [sp, #16]
 8005d72:	3d01      	subs	r5, #1
 8005d74:	5c5b      	ldrb	r3, [r3, r1]
 8005d76:	702b      	strb	r3, [r5, #0]
 8005d78:	0033      	movs	r3, r6
 8005d7a:	0006      	movs	r6, r0
 8005d7c:	429f      	cmp	r7, r3
 8005d7e:	d9f3      	bls.n	8005d68 <_printf_i+0xec>
 8005d80:	2f08      	cmp	r7, #8
 8005d82:	d109      	bne.n	8005d98 <_printf_i+0x11c>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	07db      	lsls	r3, r3, #31
 8005d88:	d506      	bpl.n	8005d98 <_printf_i+0x11c>
 8005d8a:	6862      	ldr	r2, [r4, #4]
 8005d8c:	6923      	ldr	r3, [r4, #16]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	dc02      	bgt.n	8005d98 <_printf_i+0x11c>
 8005d92:	2330      	movs	r3, #48	@ 0x30
 8005d94:	3d01      	subs	r5, #1
 8005d96:	702b      	strb	r3, [r5, #0]
 8005d98:	9b03      	ldr	r3, [sp, #12]
 8005d9a:	1b5b      	subs	r3, r3, r5
 8005d9c:	6123      	str	r3, [r4, #16]
 8005d9e:	9b07      	ldr	r3, [sp, #28]
 8005da0:	0021      	movs	r1, r4
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	9805      	ldr	r0, [sp, #20]
 8005da6:	9b06      	ldr	r3, [sp, #24]
 8005da8:	aa09      	add	r2, sp, #36	@ 0x24
 8005daa:	f7ff fef7 	bl	8005b9c <_printf_common>
 8005dae:	3001      	adds	r0, #1
 8005db0:	d148      	bne.n	8005e44 <_printf_i+0x1c8>
 8005db2:	2001      	movs	r0, #1
 8005db4:	4240      	negs	r0, r0
 8005db6:	b00b      	add	sp, #44	@ 0x2c
 8005db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dba:	2220      	movs	r2, #32
 8005dbc:	6809      	ldr	r1, [r1, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	6022      	str	r2, [r4, #0]
 8005dc2:	2278      	movs	r2, #120	@ 0x78
 8005dc4:	4932      	ldr	r1, [pc, #200]	@ (8005e90 <_printf_i+0x214>)
 8005dc6:	9104      	str	r1, [sp, #16]
 8005dc8:	0021      	movs	r1, r4
 8005dca:	3145      	adds	r1, #69	@ 0x45
 8005dcc:	700a      	strb	r2, [r1, #0]
 8005dce:	6819      	ldr	r1, [r3, #0]
 8005dd0:	6822      	ldr	r2, [r4, #0]
 8005dd2:	c940      	ldmia	r1!, {r6}
 8005dd4:	0610      	lsls	r0, r2, #24
 8005dd6:	d402      	bmi.n	8005dde <_printf_i+0x162>
 8005dd8:	0650      	lsls	r0, r2, #25
 8005dda:	d500      	bpl.n	8005dde <_printf_i+0x162>
 8005ddc:	b2b6      	uxth	r6, r6
 8005dde:	6019      	str	r1, [r3, #0]
 8005de0:	07d3      	lsls	r3, r2, #31
 8005de2:	d502      	bpl.n	8005dea <_printf_i+0x16e>
 8005de4:	2320      	movs	r3, #32
 8005de6:	4313      	orrs	r3, r2
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	2e00      	cmp	r6, #0
 8005dec:	d001      	beq.n	8005df2 <_printf_i+0x176>
 8005dee:	2710      	movs	r7, #16
 8005df0:	e7aa      	b.n	8005d48 <_printf_i+0xcc>
 8005df2:	2220      	movs	r2, #32
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	4393      	bics	r3, r2
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	e7f8      	b.n	8005dee <_printf_i+0x172>
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	680d      	ldr	r5, [r1, #0]
 8005e00:	1d10      	adds	r0, r2, #4
 8005e02:	6949      	ldr	r1, [r1, #20]
 8005e04:	6018      	str	r0, [r3, #0]
 8005e06:	6813      	ldr	r3, [r2, #0]
 8005e08:	062e      	lsls	r6, r5, #24
 8005e0a:	d501      	bpl.n	8005e10 <_printf_i+0x194>
 8005e0c:	6019      	str	r1, [r3, #0]
 8005e0e:	e002      	b.n	8005e16 <_printf_i+0x19a>
 8005e10:	066d      	lsls	r5, r5, #25
 8005e12:	d5fb      	bpl.n	8005e0c <_printf_i+0x190>
 8005e14:	8019      	strh	r1, [r3, #0]
 8005e16:	2300      	movs	r3, #0
 8005e18:	9d03      	ldr	r5, [sp, #12]
 8005e1a:	6123      	str	r3, [r4, #16]
 8005e1c:	e7bf      	b.n	8005d9e <_printf_i+0x122>
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	1d11      	adds	r1, r2, #4
 8005e22:	6019      	str	r1, [r3, #0]
 8005e24:	6815      	ldr	r5, [r2, #0]
 8005e26:	2100      	movs	r1, #0
 8005e28:	0028      	movs	r0, r5
 8005e2a:	6862      	ldr	r2, [r4, #4]
 8005e2c:	f000 fc97 	bl	800675e <memchr>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	d001      	beq.n	8005e38 <_printf_i+0x1bc>
 8005e34:	1b40      	subs	r0, r0, r5
 8005e36:	6060      	str	r0, [r4, #4]
 8005e38:	6863      	ldr	r3, [r4, #4]
 8005e3a:	6123      	str	r3, [r4, #16]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	9a03      	ldr	r2, [sp, #12]
 8005e40:	7013      	strb	r3, [r2, #0]
 8005e42:	e7ac      	b.n	8005d9e <_printf_i+0x122>
 8005e44:	002a      	movs	r2, r5
 8005e46:	6923      	ldr	r3, [r4, #16]
 8005e48:	9906      	ldr	r1, [sp, #24]
 8005e4a:	9805      	ldr	r0, [sp, #20]
 8005e4c:	9d07      	ldr	r5, [sp, #28]
 8005e4e:	47a8      	blx	r5
 8005e50:	3001      	adds	r0, #1
 8005e52:	d0ae      	beq.n	8005db2 <_printf_i+0x136>
 8005e54:	6823      	ldr	r3, [r4, #0]
 8005e56:	079b      	lsls	r3, r3, #30
 8005e58:	d415      	bmi.n	8005e86 <_printf_i+0x20a>
 8005e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e5c:	68e0      	ldr	r0, [r4, #12]
 8005e5e:	4298      	cmp	r0, r3
 8005e60:	daa9      	bge.n	8005db6 <_printf_i+0x13a>
 8005e62:	0018      	movs	r0, r3
 8005e64:	e7a7      	b.n	8005db6 <_printf_i+0x13a>
 8005e66:	0022      	movs	r2, r4
 8005e68:	2301      	movs	r3, #1
 8005e6a:	9906      	ldr	r1, [sp, #24]
 8005e6c:	9805      	ldr	r0, [sp, #20]
 8005e6e:	9e07      	ldr	r6, [sp, #28]
 8005e70:	3219      	adds	r2, #25
 8005e72:	47b0      	blx	r6
 8005e74:	3001      	adds	r0, #1
 8005e76:	d09c      	beq.n	8005db2 <_printf_i+0x136>
 8005e78:	3501      	adds	r5, #1
 8005e7a:	68e3      	ldr	r3, [r4, #12]
 8005e7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e7e:	1a9b      	subs	r3, r3, r2
 8005e80:	42ab      	cmp	r3, r5
 8005e82:	dcf0      	bgt.n	8005e66 <_printf_i+0x1ea>
 8005e84:	e7e9      	b.n	8005e5a <_printf_i+0x1de>
 8005e86:	2500      	movs	r5, #0
 8005e88:	e7f7      	b.n	8005e7a <_printf_i+0x1fe>
 8005e8a:	46c0      	nop			@ (mov r8, r8)
 8005e8c:	08009f36 	.word	0x08009f36
 8005e90:	08009f47 	.word	0x08009f47

08005e94 <_scanf_float>:
 8005e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e96:	b08b      	sub	sp, #44	@ 0x2c
 8005e98:	0016      	movs	r6, r2
 8005e9a:	9003      	str	r0, [sp, #12]
 8005e9c:	22ae      	movs	r2, #174	@ 0xae
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	9307      	str	r3, [sp, #28]
 8005ea2:	688b      	ldr	r3, [r1, #8]
 8005ea4:	000c      	movs	r4, r1
 8005ea6:	1e59      	subs	r1, r3, #1
 8005ea8:	0052      	lsls	r2, r2, #1
 8005eaa:	9006      	str	r0, [sp, #24]
 8005eac:	4291      	cmp	r1, r2
 8005eae:	d905      	bls.n	8005ebc <_scanf_float+0x28>
 8005eb0:	3b5e      	subs	r3, #94	@ 0x5e
 8005eb2:	3bff      	subs	r3, #255	@ 0xff
 8005eb4:	9306      	str	r3, [sp, #24]
 8005eb6:	235e      	movs	r3, #94	@ 0x5e
 8005eb8:	33ff      	adds	r3, #255	@ 0xff
 8005eba:	60a3      	str	r3, [r4, #8]
 8005ebc:	23f0      	movs	r3, #240	@ 0xf0
 8005ebe:	6822      	ldr	r2, [r4, #0]
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	0023      	movs	r3, r4
 8005ec8:	2500      	movs	r5, #0
 8005eca:	331c      	adds	r3, #28
 8005ecc:	001f      	movs	r7, r3
 8005ece:	9304      	str	r3, [sp, #16]
 8005ed0:	9502      	str	r5, [sp, #8]
 8005ed2:	9509      	str	r5, [sp, #36]	@ 0x24
 8005ed4:	9508      	str	r5, [sp, #32]
 8005ed6:	9501      	str	r5, [sp, #4]
 8005ed8:	9505      	str	r5, [sp, #20]
 8005eda:	68a2      	ldr	r2, [r4, #8]
 8005edc:	2a00      	cmp	r2, #0
 8005ede:	d00a      	beq.n	8005ef6 <_scanf_float+0x62>
 8005ee0:	6833      	ldr	r3, [r6, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b4e      	cmp	r3, #78	@ 0x4e
 8005ee6:	d844      	bhi.n	8005f72 <_scanf_float+0xde>
 8005ee8:	0018      	movs	r0, r3
 8005eea:	2b40      	cmp	r3, #64	@ 0x40
 8005eec:	d82c      	bhi.n	8005f48 <_scanf_float+0xb4>
 8005eee:	382b      	subs	r0, #43	@ 0x2b
 8005ef0:	b2c1      	uxtb	r1, r0
 8005ef2:	290e      	cmp	r1, #14
 8005ef4:	d92a      	bls.n	8005f4c <_scanf_float+0xb8>
 8005ef6:	9b01      	ldr	r3, [sp, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <_scanf_float+0x70>
 8005efc:	6823      	ldr	r3, [r4, #0]
 8005efe:	4aa6      	ldr	r2, [pc, #664]	@ (8006198 <_scanf_float+0x304>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	6023      	str	r3, [r4, #0]
 8005f04:	9b02      	ldr	r3, [sp, #8]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d900      	bls.n	8005f0e <_scanf_float+0x7a>
 8005f0c:	e0fe      	b.n	800610c <_scanf_float+0x278>
 8005f0e:	25be      	movs	r5, #190	@ 0xbe
 8005f10:	006d      	lsls	r5, r5, #1
 8005f12:	9b04      	ldr	r3, [sp, #16]
 8005f14:	429f      	cmp	r7, r3
 8005f16:	d900      	bls.n	8005f1a <_scanf_float+0x86>
 8005f18:	e0ee      	b.n	80060f8 <_scanf_float+0x264>
 8005f1a:	2001      	movs	r0, #1
 8005f1c:	b00b      	add	sp, #44	@ 0x2c
 8005f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f20:	0018      	movs	r0, r3
 8005f22:	3861      	subs	r0, #97	@ 0x61
 8005f24:	280d      	cmp	r0, #13
 8005f26:	d8e6      	bhi.n	8005ef6 <_scanf_float+0x62>
 8005f28:	f7fa f900 	bl	800012c <__gnu_thumb1_case_shi>
 8005f2c:	ffe50089 	.word	0xffe50089
 8005f30:	ffe5ffe5 	.word	0xffe5ffe5
 8005f34:	00a700bb 	.word	0x00a700bb
 8005f38:	ffe5ffe5 	.word	0xffe5ffe5
 8005f3c:	ffe5008f 	.word	0xffe5008f
 8005f40:	ffe5ffe5 	.word	0xffe5ffe5
 8005f44:	006bffe5 	.word	0x006bffe5
 8005f48:	3841      	subs	r0, #65	@ 0x41
 8005f4a:	e7eb      	b.n	8005f24 <_scanf_float+0x90>
 8005f4c:	280e      	cmp	r0, #14
 8005f4e:	d8d2      	bhi.n	8005ef6 <_scanf_float+0x62>
 8005f50:	f7fa f8ec 	bl	800012c <__gnu_thumb1_case_shi>
 8005f54:	ffd1004f 	.word	0xffd1004f
 8005f58:	009d004f 	.word	0x009d004f
 8005f5c:	0021ffd1 	.word	0x0021ffd1
 8005f60:	00410041 	.word	0x00410041
 8005f64:	00410041 	.word	0x00410041
 8005f68:	00410041 	.word	0x00410041
 8005f6c:	00410041 	.word	0x00410041
 8005f70:	0041      	.short	0x0041
 8005f72:	2b6e      	cmp	r3, #110	@ 0x6e
 8005f74:	d80a      	bhi.n	8005f8c <_scanf_float+0xf8>
 8005f76:	2b60      	cmp	r3, #96	@ 0x60
 8005f78:	d8d2      	bhi.n	8005f20 <_scanf_float+0x8c>
 8005f7a:	2b54      	cmp	r3, #84	@ 0x54
 8005f7c:	d100      	bne.n	8005f80 <_scanf_float+0xec>
 8005f7e:	e081      	b.n	8006084 <_scanf_float+0x1f0>
 8005f80:	2b59      	cmp	r3, #89	@ 0x59
 8005f82:	d1b8      	bne.n	8005ef6 <_scanf_float+0x62>
 8005f84:	2d07      	cmp	r5, #7
 8005f86:	d1b6      	bne.n	8005ef6 <_scanf_float+0x62>
 8005f88:	2508      	movs	r5, #8
 8005f8a:	e02f      	b.n	8005fec <_scanf_float+0x158>
 8005f8c:	2b74      	cmp	r3, #116	@ 0x74
 8005f8e:	d079      	beq.n	8006084 <_scanf_float+0x1f0>
 8005f90:	2b79      	cmp	r3, #121	@ 0x79
 8005f92:	d0f7      	beq.n	8005f84 <_scanf_float+0xf0>
 8005f94:	e7af      	b.n	8005ef6 <_scanf_float+0x62>
 8005f96:	6821      	ldr	r1, [r4, #0]
 8005f98:	05c8      	lsls	r0, r1, #23
 8005f9a:	d51c      	bpl.n	8005fd6 <_scanf_float+0x142>
 8005f9c:	2380      	movs	r3, #128	@ 0x80
 8005f9e:	4399      	bics	r1, r3
 8005fa0:	9b01      	ldr	r3, [sp, #4]
 8005fa2:	6021      	str	r1, [r4, #0]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	9301      	str	r3, [sp, #4]
 8005fa8:	9b06      	ldr	r3, [sp, #24]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <_scanf_float+0x122>
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	3201      	adds	r2, #1
 8005fb2:	9306      	str	r3, [sp, #24]
 8005fb4:	60a2      	str	r2, [r4, #8]
 8005fb6:	68a3      	ldr	r3, [r4, #8]
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	60a3      	str	r3, [r4, #8]
 8005fbc:	6923      	ldr	r3, [r4, #16]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	6123      	str	r3, [r4, #16]
 8005fc2:	6873      	ldr	r3, [r6, #4]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	6073      	str	r3, [r6, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	dc00      	bgt.n	8005fce <_scanf_float+0x13a>
 8005fcc:	e08a      	b.n	80060e4 <_scanf_float+0x250>
 8005fce:	6833      	ldr	r3, [r6, #0]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	6033      	str	r3, [r6, #0]
 8005fd4:	e781      	b.n	8005eda <_scanf_float+0x46>
 8005fd6:	9a02      	ldr	r2, [sp, #8]
 8005fd8:	1951      	adds	r1, r2, r5
 8005fda:	2900      	cmp	r1, #0
 8005fdc:	d000      	beq.n	8005fe0 <_scanf_float+0x14c>
 8005fde:	e78a      	b.n	8005ef6 <_scanf_float+0x62>
 8005fe0:	000d      	movs	r5, r1
 8005fe2:	6822      	ldr	r2, [r4, #0]
 8005fe4:	486d      	ldr	r0, [pc, #436]	@ (800619c <_scanf_float+0x308>)
 8005fe6:	9102      	str	r1, [sp, #8]
 8005fe8:	4002      	ands	r2, r0
 8005fea:	6022      	str	r2, [r4, #0]
 8005fec:	703b      	strb	r3, [r7, #0]
 8005fee:	3701      	adds	r7, #1
 8005ff0:	e7e1      	b.n	8005fb6 <_scanf_float+0x122>
 8005ff2:	2180      	movs	r1, #128	@ 0x80
 8005ff4:	6822      	ldr	r2, [r4, #0]
 8005ff6:	420a      	tst	r2, r1
 8005ff8:	d100      	bne.n	8005ffc <_scanf_float+0x168>
 8005ffa:	e77c      	b.n	8005ef6 <_scanf_float+0x62>
 8005ffc:	438a      	bics	r2, r1
 8005ffe:	6022      	str	r2, [r4, #0]
 8006000:	e7f4      	b.n	8005fec <_scanf_float+0x158>
 8006002:	9a02      	ldr	r2, [sp, #8]
 8006004:	2a00      	cmp	r2, #0
 8006006:	d10f      	bne.n	8006028 <_scanf_float+0x194>
 8006008:	9a01      	ldr	r2, [sp, #4]
 800600a:	2a00      	cmp	r2, #0
 800600c:	d10f      	bne.n	800602e <_scanf_float+0x19a>
 800600e:	6822      	ldr	r2, [r4, #0]
 8006010:	21e0      	movs	r1, #224	@ 0xe0
 8006012:	0010      	movs	r0, r2
 8006014:	00c9      	lsls	r1, r1, #3
 8006016:	4008      	ands	r0, r1
 8006018:	4288      	cmp	r0, r1
 800601a:	d108      	bne.n	800602e <_scanf_float+0x19a>
 800601c:	4960      	ldr	r1, [pc, #384]	@ (80061a0 <_scanf_float+0x30c>)
 800601e:	400a      	ands	r2, r1
 8006020:	6022      	str	r2, [r4, #0]
 8006022:	2201      	movs	r2, #1
 8006024:	9202      	str	r2, [sp, #8]
 8006026:	e7e1      	b.n	8005fec <_scanf_float+0x158>
 8006028:	9a02      	ldr	r2, [sp, #8]
 800602a:	2a02      	cmp	r2, #2
 800602c:	d058      	beq.n	80060e0 <_scanf_float+0x24c>
 800602e:	2d01      	cmp	r5, #1
 8006030:	d002      	beq.n	8006038 <_scanf_float+0x1a4>
 8006032:	2d04      	cmp	r5, #4
 8006034:	d000      	beq.n	8006038 <_scanf_float+0x1a4>
 8006036:	e75e      	b.n	8005ef6 <_scanf_float+0x62>
 8006038:	3501      	adds	r5, #1
 800603a:	b2ed      	uxtb	r5, r5
 800603c:	e7d6      	b.n	8005fec <_scanf_float+0x158>
 800603e:	9a02      	ldr	r2, [sp, #8]
 8006040:	2a01      	cmp	r2, #1
 8006042:	d000      	beq.n	8006046 <_scanf_float+0x1b2>
 8006044:	e757      	b.n	8005ef6 <_scanf_float+0x62>
 8006046:	2202      	movs	r2, #2
 8006048:	e7ec      	b.n	8006024 <_scanf_float+0x190>
 800604a:	2d00      	cmp	r5, #0
 800604c:	d110      	bne.n	8006070 <_scanf_float+0x1dc>
 800604e:	9a01      	ldr	r2, [sp, #4]
 8006050:	2a00      	cmp	r2, #0
 8006052:	d000      	beq.n	8006056 <_scanf_float+0x1c2>
 8006054:	e752      	b.n	8005efc <_scanf_float+0x68>
 8006056:	6822      	ldr	r2, [r4, #0]
 8006058:	21e0      	movs	r1, #224	@ 0xe0
 800605a:	0010      	movs	r0, r2
 800605c:	00c9      	lsls	r1, r1, #3
 800605e:	4008      	ands	r0, r1
 8006060:	4288      	cmp	r0, r1
 8006062:	d000      	beq.n	8006066 <_scanf_float+0x1d2>
 8006064:	e11b      	b.n	800629e <_scanf_float+0x40a>
 8006066:	494e      	ldr	r1, [pc, #312]	@ (80061a0 <_scanf_float+0x30c>)
 8006068:	3501      	adds	r5, #1
 800606a:	400a      	ands	r2, r1
 800606c:	6022      	str	r2, [r4, #0]
 800606e:	e7bd      	b.n	8005fec <_scanf_float+0x158>
 8006070:	21fd      	movs	r1, #253	@ 0xfd
 8006072:	1eea      	subs	r2, r5, #3
 8006074:	420a      	tst	r2, r1
 8006076:	d0df      	beq.n	8006038 <_scanf_float+0x1a4>
 8006078:	e73d      	b.n	8005ef6 <_scanf_float+0x62>
 800607a:	2d02      	cmp	r5, #2
 800607c:	d000      	beq.n	8006080 <_scanf_float+0x1ec>
 800607e:	e73a      	b.n	8005ef6 <_scanf_float+0x62>
 8006080:	2503      	movs	r5, #3
 8006082:	e7b3      	b.n	8005fec <_scanf_float+0x158>
 8006084:	2d06      	cmp	r5, #6
 8006086:	d000      	beq.n	800608a <_scanf_float+0x1f6>
 8006088:	e735      	b.n	8005ef6 <_scanf_float+0x62>
 800608a:	2507      	movs	r5, #7
 800608c:	e7ae      	b.n	8005fec <_scanf_float+0x158>
 800608e:	6822      	ldr	r2, [r4, #0]
 8006090:	0591      	lsls	r1, r2, #22
 8006092:	d400      	bmi.n	8006096 <_scanf_float+0x202>
 8006094:	e72f      	b.n	8005ef6 <_scanf_float+0x62>
 8006096:	4943      	ldr	r1, [pc, #268]	@ (80061a4 <_scanf_float+0x310>)
 8006098:	400a      	ands	r2, r1
 800609a:	6022      	str	r2, [r4, #0]
 800609c:	9a01      	ldr	r2, [sp, #4]
 800609e:	9205      	str	r2, [sp, #20]
 80060a0:	e7a4      	b.n	8005fec <_scanf_float+0x158>
 80060a2:	21a0      	movs	r1, #160	@ 0xa0
 80060a4:	2080      	movs	r0, #128	@ 0x80
 80060a6:	6822      	ldr	r2, [r4, #0]
 80060a8:	00c9      	lsls	r1, r1, #3
 80060aa:	4011      	ands	r1, r2
 80060ac:	00c0      	lsls	r0, r0, #3
 80060ae:	4281      	cmp	r1, r0
 80060b0:	d006      	beq.n	80060c0 <_scanf_float+0x22c>
 80060b2:	4202      	tst	r2, r0
 80060b4:	d100      	bne.n	80060b8 <_scanf_float+0x224>
 80060b6:	e71e      	b.n	8005ef6 <_scanf_float+0x62>
 80060b8:	9901      	ldr	r1, [sp, #4]
 80060ba:	2900      	cmp	r1, #0
 80060bc:	d100      	bne.n	80060c0 <_scanf_float+0x22c>
 80060be:	e0ee      	b.n	800629e <_scanf_float+0x40a>
 80060c0:	0591      	lsls	r1, r2, #22
 80060c2:	d404      	bmi.n	80060ce <_scanf_float+0x23a>
 80060c4:	9901      	ldr	r1, [sp, #4]
 80060c6:	9805      	ldr	r0, [sp, #20]
 80060c8:	9709      	str	r7, [sp, #36]	@ 0x24
 80060ca:	1a09      	subs	r1, r1, r0
 80060cc:	9108      	str	r1, [sp, #32]
 80060ce:	4934      	ldr	r1, [pc, #208]	@ (80061a0 <_scanf_float+0x30c>)
 80060d0:	400a      	ands	r2, r1
 80060d2:	21c0      	movs	r1, #192	@ 0xc0
 80060d4:	0049      	lsls	r1, r1, #1
 80060d6:	430a      	orrs	r2, r1
 80060d8:	6022      	str	r2, [r4, #0]
 80060da:	2200      	movs	r2, #0
 80060dc:	9201      	str	r2, [sp, #4]
 80060de:	e785      	b.n	8005fec <_scanf_float+0x158>
 80060e0:	2203      	movs	r2, #3
 80060e2:	e79f      	b.n	8006024 <_scanf_float+0x190>
 80060e4:	23c0      	movs	r3, #192	@ 0xc0
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	0031      	movs	r1, r6
 80060ea:	58e3      	ldr	r3, [r4, r3]
 80060ec:	9803      	ldr	r0, [sp, #12]
 80060ee:	4798      	blx	r3
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d100      	bne.n	80060f6 <_scanf_float+0x262>
 80060f4:	e6f1      	b.n	8005eda <_scanf_float+0x46>
 80060f6:	e6fe      	b.n	8005ef6 <_scanf_float+0x62>
 80060f8:	3f01      	subs	r7, #1
 80060fa:	5963      	ldr	r3, [r4, r5]
 80060fc:	0032      	movs	r2, r6
 80060fe:	7839      	ldrb	r1, [r7, #0]
 8006100:	9803      	ldr	r0, [sp, #12]
 8006102:	4798      	blx	r3
 8006104:	6923      	ldr	r3, [r4, #16]
 8006106:	3b01      	subs	r3, #1
 8006108:	6123      	str	r3, [r4, #16]
 800610a:	e702      	b.n	8005f12 <_scanf_float+0x7e>
 800610c:	1e6b      	subs	r3, r5, #1
 800610e:	2b06      	cmp	r3, #6
 8006110:	d80e      	bhi.n	8006130 <_scanf_float+0x29c>
 8006112:	9702      	str	r7, [sp, #8]
 8006114:	2d02      	cmp	r5, #2
 8006116:	d920      	bls.n	800615a <_scanf_float+0x2c6>
 8006118:	1beb      	subs	r3, r5, r7
 800611a:	b2db      	uxtb	r3, r3
 800611c:	9306      	str	r3, [sp, #24]
 800611e:	9b02      	ldr	r3, [sp, #8]
 8006120:	9a06      	ldr	r2, [sp, #24]
 8006122:	189b      	adds	r3, r3, r2
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b03      	cmp	r3, #3
 8006128:	d127      	bne.n	800617a <_scanf_float+0x2e6>
 800612a:	3d03      	subs	r5, #3
 800612c:	b2ed      	uxtb	r5, r5
 800612e:	1b7f      	subs	r7, r7, r5
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	05da      	lsls	r2, r3, #23
 8006134:	d553      	bpl.n	80061de <_scanf_float+0x34a>
 8006136:	055b      	lsls	r3, r3, #21
 8006138:	d536      	bpl.n	80061a8 <_scanf_float+0x314>
 800613a:	25be      	movs	r5, #190	@ 0xbe
 800613c:	006d      	lsls	r5, r5, #1
 800613e:	9b04      	ldr	r3, [sp, #16]
 8006140:	429f      	cmp	r7, r3
 8006142:	d800      	bhi.n	8006146 <_scanf_float+0x2b2>
 8006144:	e6e9      	b.n	8005f1a <_scanf_float+0x86>
 8006146:	3f01      	subs	r7, #1
 8006148:	5963      	ldr	r3, [r4, r5]
 800614a:	0032      	movs	r2, r6
 800614c:	7839      	ldrb	r1, [r7, #0]
 800614e:	9803      	ldr	r0, [sp, #12]
 8006150:	4798      	blx	r3
 8006152:	6923      	ldr	r3, [r4, #16]
 8006154:	3b01      	subs	r3, #1
 8006156:	6123      	str	r3, [r4, #16]
 8006158:	e7f1      	b.n	800613e <_scanf_float+0x2aa>
 800615a:	25be      	movs	r5, #190	@ 0xbe
 800615c:	006d      	lsls	r5, r5, #1
 800615e:	9b04      	ldr	r3, [sp, #16]
 8006160:	429f      	cmp	r7, r3
 8006162:	d800      	bhi.n	8006166 <_scanf_float+0x2d2>
 8006164:	e6d9      	b.n	8005f1a <_scanf_float+0x86>
 8006166:	3f01      	subs	r7, #1
 8006168:	5963      	ldr	r3, [r4, r5]
 800616a:	0032      	movs	r2, r6
 800616c:	7839      	ldrb	r1, [r7, #0]
 800616e:	9803      	ldr	r0, [sp, #12]
 8006170:	4798      	blx	r3
 8006172:	6923      	ldr	r3, [r4, #16]
 8006174:	3b01      	subs	r3, #1
 8006176:	6123      	str	r3, [r4, #16]
 8006178:	e7f1      	b.n	800615e <_scanf_float+0x2ca>
 800617a:	9b02      	ldr	r3, [sp, #8]
 800617c:	0032      	movs	r2, r6
 800617e:	3b01      	subs	r3, #1
 8006180:	7819      	ldrb	r1, [r3, #0]
 8006182:	9302      	str	r3, [sp, #8]
 8006184:	23be      	movs	r3, #190	@ 0xbe
 8006186:	005b      	lsls	r3, r3, #1
 8006188:	58e3      	ldr	r3, [r4, r3]
 800618a:	9803      	ldr	r0, [sp, #12]
 800618c:	4798      	blx	r3
 800618e:	6923      	ldr	r3, [r4, #16]
 8006190:	3b01      	subs	r3, #1
 8006192:	6123      	str	r3, [r4, #16]
 8006194:	e7c3      	b.n	800611e <_scanf_float+0x28a>
 8006196:	46c0      	nop			@ (mov r8, r8)
 8006198:	fffffeff 	.word	0xfffffeff
 800619c:	fffffe7f 	.word	0xfffffe7f
 80061a0:	fffff87f 	.word	0xfffff87f
 80061a4:	fffffd7f 	.word	0xfffffd7f
 80061a8:	6923      	ldr	r3, [r4, #16]
 80061aa:	1e7d      	subs	r5, r7, #1
 80061ac:	7829      	ldrb	r1, [r5, #0]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	6123      	str	r3, [r4, #16]
 80061b2:	2965      	cmp	r1, #101	@ 0x65
 80061b4:	d00c      	beq.n	80061d0 <_scanf_float+0x33c>
 80061b6:	2945      	cmp	r1, #69	@ 0x45
 80061b8:	d00a      	beq.n	80061d0 <_scanf_float+0x33c>
 80061ba:	23be      	movs	r3, #190	@ 0xbe
 80061bc:	005b      	lsls	r3, r3, #1
 80061be:	58e3      	ldr	r3, [r4, r3]
 80061c0:	0032      	movs	r2, r6
 80061c2:	9803      	ldr	r0, [sp, #12]
 80061c4:	4798      	blx	r3
 80061c6:	6923      	ldr	r3, [r4, #16]
 80061c8:	1ebd      	subs	r5, r7, #2
 80061ca:	3b01      	subs	r3, #1
 80061cc:	7829      	ldrb	r1, [r5, #0]
 80061ce:	6123      	str	r3, [r4, #16]
 80061d0:	23be      	movs	r3, #190	@ 0xbe
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	0032      	movs	r2, r6
 80061d6:	58e3      	ldr	r3, [r4, r3]
 80061d8:	9803      	ldr	r0, [sp, #12]
 80061da:	4798      	blx	r3
 80061dc:	002f      	movs	r7, r5
 80061de:	6821      	ldr	r1, [r4, #0]
 80061e0:	2310      	movs	r3, #16
 80061e2:	000a      	movs	r2, r1
 80061e4:	401a      	ands	r2, r3
 80061e6:	4219      	tst	r1, r3
 80061e8:	d001      	beq.n	80061ee <_scanf_float+0x35a>
 80061ea:	2000      	movs	r0, #0
 80061ec:	e696      	b.n	8005f1c <_scanf_float+0x88>
 80061ee:	21c0      	movs	r1, #192	@ 0xc0
 80061f0:	703a      	strb	r2, [r7, #0]
 80061f2:	6823      	ldr	r3, [r4, #0]
 80061f4:	00c9      	lsls	r1, r1, #3
 80061f6:	400b      	ands	r3, r1
 80061f8:	2180      	movs	r1, #128	@ 0x80
 80061fa:	00c9      	lsls	r1, r1, #3
 80061fc:	428b      	cmp	r3, r1
 80061fe:	d126      	bne.n	800624e <_scanf_float+0x3ba>
 8006200:	9b05      	ldr	r3, [sp, #20]
 8006202:	9a01      	ldr	r2, [sp, #4]
 8006204:	4293      	cmp	r3, r2
 8006206:	d00c      	beq.n	8006222 <_scanf_float+0x38e>
 8006208:	1a9a      	subs	r2, r3, r2
 800620a:	0023      	movs	r3, r4
 800620c:	3370      	adds	r3, #112	@ 0x70
 800620e:	33ff      	adds	r3, #255	@ 0xff
 8006210:	429f      	cmp	r7, r3
 8006212:	d302      	bcc.n	800621a <_scanf_float+0x386>
 8006214:	0027      	movs	r7, r4
 8006216:	376f      	adds	r7, #111	@ 0x6f
 8006218:	37ff      	adds	r7, #255	@ 0xff
 800621a:	0038      	movs	r0, r7
 800621c:	4921      	ldr	r1, [pc, #132]	@ (80062a4 <_scanf_float+0x410>)
 800621e:	f000 f909 	bl	8006434 <siprintf>
 8006222:	2200      	movs	r2, #0
 8006224:	9904      	ldr	r1, [sp, #16]
 8006226:	9803      	ldr	r0, [sp, #12]
 8006228:	f002 fcfc 	bl	8008c24 <_strtod_r>
 800622c:	9b07      	ldr	r3, [sp, #28]
 800622e:	6822      	ldr	r2, [r4, #0]
 8006230:	0006      	movs	r6, r0
 8006232:	000f      	movs	r7, r1
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	0791      	lsls	r1, r2, #30
 8006238:	d516      	bpl.n	8006268 <_scanf_float+0x3d4>
 800623a:	9907      	ldr	r1, [sp, #28]
 800623c:	1d1a      	adds	r2, r3, #4
 800623e:	600a      	str	r2, [r1, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	601e      	str	r6, [r3, #0]
 8006244:	605f      	str	r7, [r3, #4]
 8006246:	68e3      	ldr	r3, [r4, #12]
 8006248:	3301      	adds	r3, #1
 800624a:	60e3      	str	r3, [r4, #12]
 800624c:	e7cd      	b.n	80061ea <_scanf_float+0x356>
 800624e:	9b08      	ldr	r3, [sp, #32]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d0e6      	beq.n	8006222 <_scanf_float+0x38e>
 8006254:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006256:	9803      	ldr	r0, [sp, #12]
 8006258:	1c59      	adds	r1, r3, #1
 800625a:	230a      	movs	r3, #10
 800625c:	f002 fd74 	bl	8008d48 <_strtol_r>
 8006260:	9b08      	ldr	r3, [sp, #32]
 8006262:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8006264:	1ac2      	subs	r2, r0, r3
 8006266:	e7d0      	b.n	800620a <_scanf_float+0x376>
 8006268:	1d19      	adds	r1, r3, #4
 800626a:	0752      	lsls	r2, r2, #29
 800626c:	d502      	bpl.n	8006274 <_scanf_float+0x3e0>
 800626e:	9a07      	ldr	r2, [sp, #28]
 8006270:	6011      	str	r1, [r2, #0]
 8006272:	e7e5      	b.n	8006240 <_scanf_float+0x3ac>
 8006274:	9a07      	ldr	r2, [sp, #28]
 8006276:	0030      	movs	r0, r6
 8006278:	6011      	str	r1, [r2, #0]
 800627a:	681d      	ldr	r5, [r3, #0]
 800627c:	0032      	movs	r2, r6
 800627e:	003b      	movs	r3, r7
 8006280:	0039      	movs	r1, r7
 8006282:	f7fc f86f 	bl	8002364 <__aeabi_dcmpun>
 8006286:	2800      	cmp	r0, #0
 8006288:	d004      	beq.n	8006294 <_scanf_float+0x400>
 800628a:	4807      	ldr	r0, [pc, #28]	@ (80062a8 <_scanf_float+0x414>)
 800628c:	f000 fa72 	bl	8006774 <nanf>
 8006290:	6028      	str	r0, [r5, #0]
 8006292:	e7d8      	b.n	8006246 <_scanf_float+0x3b2>
 8006294:	0030      	movs	r0, r6
 8006296:	0039      	movs	r1, r7
 8006298:	f7fc f914 	bl	80024c4 <__aeabi_d2f>
 800629c:	e7f8      	b.n	8006290 <_scanf_float+0x3fc>
 800629e:	2300      	movs	r3, #0
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	e62f      	b.n	8005f04 <_scanf_float+0x70>
 80062a4:	08009f58 	.word	0x08009f58
 80062a8:	0800a099 	.word	0x0800a099

080062ac <std>:
 80062ac:	2300      	movs	r3, #0
 80062ae:	b510      	push	{r4, lr}
 80062b0:	0004      	movs	r4, r0
 80062b2:	6003      	str	r3, [r0, #0]
 80062b4:	6043      	str	r3, [r0, #4]
 80062b6:	6083      	str	r3, [r0, #8]
 80062b8:	8181      	strh	r1, [r0, #12]
 80062ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80062bc:	81c2      	strh	r2, [r0, #14]
 80062be:	6103      	str	r3, [r0, #16]
 80062c0:	6143      	str	r3, [r0, #20]
 80062c2:	6183      	str	r3, [r0, #24]
 80062c4:	0019      	movs	r1, r3
 80062c6:	2208      	movs	r2, #8
 80062c8:	305c      	adds	r0, #92	@ 0x5c
 80062ca:	f000 f9c1 	bl	8006650 <memset>
 80062ce:	4b0b      	ldr	r3, [pc, #44]	@ (80062fc <std+0x50>)
 80062d0:	6224      	str	r4, [r4, #32]
 80062d2:	6263      	str	r3, [r4, #36]	@ 0x24
 80062d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006300 <std+0x54>)
 80062d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006304 <std+0x58>)
 80062da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006308 <std+0x5c>)
 80062de:	6323      	str	r3, [r4, #48]	@ 0x30
 80062e0:	4b0a      	ldr	r3, [pc, #40]	@ (800630c <std+0x60>)
 80062e2:	429c      	cmp	r4, r3
 80062e4:	d005      	beq.n	80062f2 <std+0x46>
 80062e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006310 <std+0x64>)
 80062e8:	429c      	cmp	r4, r3
 80062ea:	d002      	beq.n	80062f2 <std+0x46>
 80062ec:	4b09      	ldr	r3, [pc, #36]	@ (8006314 <std+0x68>)
 80062ee:	429c      	cmp	r4, r3
 80062f0:	d103      	bne.n	80062fa <std+0x4e>
 80062f2:	0020      	movs	r0, r4
 80062f4:	3058      	adds	r0, #88	@ 0x58
 80062f6:	f000 fa2f 	bl	8006758 <__retarget_lock_init_recursive>
 80062fa:	bd10      	pop	{r4, pc}
 80062fc:	08006479 	.word	0x08006479
 8006300:	080064a1 	.word	0x080064a1
 8006304:	080064d9 	.word	0x080064d9
 8006308:	08006505 	.word	0x08006505
 800630c:	20000ad8 	.word	0x20000ad8
 8006310:	20000b40 	.word	0x20000b40
 8006314:	20000ba8 	.word	0x20000ba8

08006318 <stdio_exit_handler>:
 8006318:	b510      	push	{r4, lr}
 800631a:	4a03      	ldr	r2, [pc, #12]	@ (8006328 <stdio_exit_handler+0x10>)
 800631c:	4903      	ldr	r1, [pc, #12]	@ (800632c <stdio_exit_handler+0x14>)
 800631e:	4804      	ldr	r0, [pc, #16]	@ (8006330 <stdio_exit_handler+0x18>)
 8006320:	f000 f86c 	bl	80063fc <_fwalk_sglue>
 8006324:	bd10      	pop	{r4, pc}
 8006326:	46c0      	nop			@ (mov r8, r8)
 8006328:	2000000c 	.word	0x2000000c
 800632c:	08009119 	.word	0x08009119
 8006330:	2000001c 	.word	0x2000001c

08006334 <cleanup_stdio>:
 8006334:	6841      	ldr	r1, [r0, #4]
 8006336:	4b0b      	ldr	r3, [pc, #44]	@ (8006364 <cleanup_stdio+0x30>)
 8006338:	b510      	push	{r4, lr}
 800633a:	0004      	movs	r4, r0
 800633c:	4299      	cmp	r1, r3
 800633e:	d001      	beq.n	8006344 <cleanup_stdio+0x10>
 8006340:	f002 feea 	bl	8009118 <_fflush_r>
 8006344:	68a1      	ldr	r1, [r4, #8]
 8006346:	4b08      	ldr	r3, [pc, #32]	@ (8006368 <cleanup_stdio+0x34>)
 8006348:	4299      	cmp	r1, r3
 800634a:	d002      	beq.n	8006352 <cleanup_stdio+0x1e>
 800634c:	0020      	movs	r0, r4
 800634e:	f002 fee3 	bl	8009118 <_fflush_r>
 8006352:	68e1      	ldr	r1, [r4, #12]
 8006354:	4b05      	ldr	r3, [pc, #20]	@ (800636c <cleanup_stdio+0x38>)
 8006356:	4299      	cmp	r1, r3
 8006358:	d002      	beq.n	8006360 <cleanup_stdio+0x2c>
 800635a:	0020      	movs	r0, r4
 800635c:	f002 fedc 	bl	8009118 <_fflush_r>
 8006360:	bd10      	pop	{r4, pc}
 8006362:	46c0      	nop			@ (mov r8, r8)
 8006364:	20000ad8 	.word	0x20000ad8
 8006368:	20000b40 	.word	0x20000b40
 800636c:	20000ba8 	.word	0x20000ba8

08006370 <global_stdio_init.part.0>:
 8006370:	b510      	push	{r4, lr}
 8006372:	4b09      	ldr	r3, [pc, #36]	@ (8006398 <global_stdio_init.part.0+0x28>)
 8006374:	4a09      	ldr	r2, [pc, #36]	@ (800639c <global_stdio_init.part.0+0x2c>)
 8006376:	2104      	movs	r1, #4
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	4809      	ldr	r0, [pc, #36]	@ (80063a0 <global_stdio_init.part.0+0x30>)
 800637c:	2200      	movs	r2, #0
 800637e:	f7ff ff95 	bl	80062ac <std>
 8006382:	2201      	movs	r2, #1
 8006384:	2109      	movs	r1, #9
 8006386:	4807      	ldr	r0, [pc, #28]	@ (80063a4 <global_stdio_init.part.0+0x34>)
 8006388:	f7ff ff90 	bl	80062ac <std>
 800638c:	2202      	movs	r2, #2
 800638e:	2112      	movs	r1, #18
 8006390:	4805      	ldr	r0, [pc, #20]	@ (80063a8 <global_stdio_init.part.0+0x38>)
 8006392:	f7ff ff8b 	bl	80062ac <std>
 8006396:	bd10      	pop	{r4, pc}
 8006398:	20000c10 	.word	0x20000c10
 800639c:	08006319 	.word	0x08006319
 80063a0:	20000ad8 	.word	0x20000ad8
 80063a4:	20000b40 	.word	0x20000b40
 80063a8:	20000ba8 	.word	0x20000ba8

080063ac <__sfp_lock_acquire>:
 80063ac:	b510      	push	{r4, lr}
 80063ae:	4802      	ldr	r0, [pc, #8]	@ (80063b8 <__sfp_lock_acquire+0xc>)
 80063b0:	f000 f9d3 	bl	800675a <__retarget_lock_acquire_recursive>
 80063b4:	bd10      	pop	{r4, pc}
 80063b6:	46c0      	nop			@ (mov r8, r8)
 80063b8:	20000c19 	.word	0x20000c19

080063bc <__sfp_lock_release>:
 80063bc:	b510      	push	{r4, lr}
 80063be:	4802      	ldr	r0, [pc, #8]	@ (80063c8 <__sfp_lock_release+0xc>)
 80063c0:	f000 f9cc 	bl	800675c <__retarget_lock_release_recursive>
 80063c4:	bd10      	pop	{r4, pc}
 80063c6:	46c0      	nop			@ (mov r8, r8)
 80063c8:	20000c19 	.word	0x20000c19

080063cc <__sinit>:
 80063cc:	b510      	push	{r4, lr}
 80063ce:	0004      	movs	r4, r0
 80063d0:	f7ff ffec 	bl	80063ac <__sfp_lock_acquire>
 80063d4:	6a23      	ldr	r3, [r4, #32]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <__sinit+0x14>
 80063da:	f7ff ffef 	bl	80063bc <__sfp_lock_release>
 80063de:	bd10      	pop	{r4, pc}
 80063e0:	4b04      	ldr	r3, [pc, #16]	@ (80063f4 <__sinit+0x28>)
 80063e2:	6223      	str	r3, [r4, #32]
 80063e4:	4b04      	ldr	r3, [pc, #16]	@ (80063f8 <__sinit+0x2c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d1f6      	bne.n	80063da <__sinit+0xe>
 80063ec:	f7ff ffc0 	bl	8006370 <global_stdio_init.part.0>
 80063f0:	e7f3      	b.n	80063da <__sinit+0xe>
 80063f2:	46c0      	nop			@ (mov r8, r8)
 80063f4:	08006335 	.word	0x08006335
 80063f8:	20000c10 	.word	0x20000c10

080063fc <_fwalk_sglue>:
 80063fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063fe:	0014      	movs	r4, r2
 8006400:	2600      	movs	r6, #0
 8006402:	9000      	str	r0, [sp, #0]
 8006404:	9101      	str	r1, [sp, #4]
 8006406:	68a5      	ldr	r5, [r4, #8]
 8006408:	6867      	ldr	r7, [r4, #4]
 800640a:	3f01      	subs	r7, #1
 800640c:	d504      	bpl.n	8006418 <_fwalk_sglue+0x1c>
 800640e:	6824      	ldr	r4, [r4, #0]
 8006410:	2c00      	cmp	r4, #0
 8006412:	d1f8      	bne.n	8006406 <_fwalk_sglue+0xa>
 8006414:	0030      	movs	r0, r6
 8006416:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006418:	89ab      	ldrh	r3, [r5, #12]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d908      	bls.n	8006430 <_fwalk_sglue+0x34>
 800641e:	220e      	movs	r2, #14
 8006420:	5eab      	ldrsh	r3, [r5, r2]
 8006422:	3301      	adds	r3, #1
 8006424:	d004      	beq.n	8006430 <_fwalk_sglue+0x34>
 8006426:	0029      	movs	r1, r5
 8006428:	9800      	ldr	r0, [sp, #0]
 800642a:	9b01      	ldr	r3, [sp, #4]
 800642c:	4798      	blx	r3
 800642e:	4306      	orrs	r6, r0
 8006430:	3568      	adds	r5, #104	@ 0x68
 8006432:	e7ea      	b.n	800640a <_fwalk_sglue+0xe>

08006434 <siprintf>:
 8006434:	b40e      	push	{r1, r2, r3}
 8006436:	b510      	push	{r4, lr}
 8006438:	2400      	movs	r4, #0
 800643a:	490c      	ldr	r1, [pc, #48]	@ (800646c <siprintf+0x38>)
 800643c:	b09d      	sub	sp, #116	@ 0x74
 800643e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006440:	9002      	str	r0, [sp, #8]
 8006442:	9006      	str	r0, [sp, #24]
 8006444:	9107      	str	r1, [sp, #28]
 8006446:	9104      	str	r1, [sp, #16]
 8006448:	4809      	ldr	r0, [pc, #36]	@ (8006470 <siprintf+0x3c>)
 800644a:	490a      	ldr	r1, [pc, #40]	@ (8006474 <siprintf+0x40>)
 800644c:	cb04      	ldmia	r3!, {r2}
 800644e:	9105      	str	r1, [sp, #20]
 8006450:	6800      	ldr	r0, [r0, #0]
 8006452:	a902      	add	r1, sp, #8
 8006454:	9301      	str	r3, [sp, #4]
 8006456:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006458:	f002 fcda 	bl	8008e10 <_svfiprintf_r>
 800645c:	9b02      	ldr	r3, [sp, #8]
 800645e:	701c      	strb	r4, [r3, #0]
 8006460:	b01d      	add	sp, #116	@ 0x74
 8006462:	bc10      	pop	{r4}
 8006464:	bc08      	pop	{r3}
 8006466:	b003      	add	sp, #12
 8006468:	4718      	bx	r3
 800646a:	46c0      	nop			@ (mov r8, r8)
 800646c:	7fffffff 	.word	0x7fffffff
 8006470:	20000018 	.word	0x20000018
 8006474:	ffff0208 	.word	0xffff0208

08006478 <__sread>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	000c      	movs	r4, r1
 800647c:	250e      	movs	r5, #14
 800647e:	5f49      	ldrsh	r1, [r1, r5]
 8006480:	f000 f918 	bl	80066b4 <_read_r>
 8006484:	2800      	cmp	r0, #0
 8006486:	db03      	blt.n	8006490 <__sread+0x18>
 8006488:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800648a:	181b      	adds	r3, r3, r0
 800648c:	6563      	str	r3, [r4, #84]	@ 0x54
 800648e:	bd70      	pop	{r4, r5, r6, pc}
 8006490:	89a3      	ldrh	r3, [r4, #12]
 8006492:	4a02      	ldr	r2, [pc, #8]	@ (800649c <__sread+0x24>)
 8006494:	4013      	ands	r3, r2
 8006496:	81a3      	strh	r3, [r4, #12]
 8006498:	e7f9      	b.n	800648e <__sread+0x16>
 800649a:	46c0      	nop			@ (mov r8, r8)
 800649c:	ffffefff 	.word	0xffffefff

080064a0 <__swrite>:
 80064a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064a2:	001f      	movs	r7, r3
 80064a4:	898b      	ldrh	r3, [r1, #12]
 80064a6:	0005      	movs	r5, r0
 80064a8:	000c      	movs	r4, r1
 80064aa:	0016      	movs	r6, r2
 80064ac:	05db      	lsls	r3, r3, #23
 80064ae:	d505      	bpl.n	80064bc <__swrite+0x1c>
 80064b0:	230e      	movs	r3, #14
 80064b2:	5ec9      	ldrsh	r1, [r1, r3]
 80064b4:	2200      	movs	r2, #0
 80064b6:	2302      	movs	r3, #2
 80064b8:	f000 f8e8 	bl	800668c <_lseek_r>
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	4a05      	ldr	r2, [pc, #20]	@ (80064d4 <__swrite+0x34>)
 80064c0:	0028      	movs	r0, r5
 80064c2:	4013      	ands	r3, r2
 80064c4:	81a3      	strh	r3, [r4, #12]
 80064c6:	0032      	movs	r2, r6
 80064c8:	230e      	movs	r3, #14
 80064ca:	5ee1      	ldrsh	r1, [r4, r3]
 80064cc:	003b      	movs	r3, r7
 80064ce:	f000 f905 	bl	80066dc <_write_r>
 80064d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064d4:	ffffefff 	.word	0xffffefff

080064d8 <__sseek>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	000c      	movs	r4, r1
 80064dc:	250e      	movs	r5, #14
 80064de:	5f49      	ldrsh	r1, [r1, r5]
 80064e0:	f000 f8d4 	bl	800668c <_lseek_r>
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	1c42      	adds	r2, r0, #1
 80064e8:	d103      	bne.n	80064f2 <__sseek+0x1a>
 80064ea:	4a05      	ldr	r2, [pc, #20]	@ (8006500 <__sseek+0x28>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	81a3      	strh	r3, [r4, #12]
 80064f0:	bd70      	pop	{r4, r5, r6, pc}
 80064f2:	2280      	movs	r2, #128	@ 0x80
 80064f4:	0152      	lsls	r2, r2, #5
 80064f6:	4313      	orrs	r3, r2
 80064f8:	81a3      	strh	r3, [r4, #12]
 80064fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80064fc:	e7f8      	b.n	80064f0 <__sseek+0x18>
 80064fe:	46c0      	nop			@ (mov r8, r8)
 8006500:	ffffefff 	.word	0xffffefff

08006504 <__sclose>:
 8006504:	b510      	push	{r4, lr}
 8006506:	230e      	movs	r3, #14
 8006508:	5ec9      	ldrsh	r1, [r1, r3]
 800650a:	f000 f8ad 	bl	8006668 <_close_r>
 800650e:	bd10      	pop	{r4, pc}

08006510 <__swbuf_r>:
 8006510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006512:	0006      	movs	r6, r0
 8006514:	000d      	movs	r5, r1
 8006516:	0014      	movs	r4, r2
 8006518:	2800      	cmp	r0, #0
 800651a:	d004      	beq.n	8006526 <__swbuf_r+0x16>
 800651c:	6a03      	ldr	r3, [r0, #32]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <__swbuf_r+0x16>
 8006522:	f7ff ff53 	bl	80063cc <__sinit>
 8006526:	69a3      	ldr	r3, [r4, #24]
 8006528:	60a3      	str	r3, [r4, #8]
 800652a:	89a3      	ldrh	r3, [r4, #12]
 800652c:	071b      	lsls	r3, r3, #28
 800652e:	d502      	bpl.n	8006536 <__swbuf_r+0x26>
 8006530:	6923      	ldr	r3, [r4, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d109      	bne.n	800654a <__swbuf_r+0x3a>
 8006536:	0021      	movs	r1, r4
 8006538:	0030      	movs	r0, r6
 800653a:	f000 f82b 	bl	8006594 <__swsetup_r>
 800653e:	2800      	cmp	r0, #0
 8006540:	d003      	beq.n	800654a <__swbuf_r+0x3a>
 8006542:	2501      	movs	r5, #1
 8006544:	426d      	negs	r5, r5
 8006546:	0028      	movs	r0, r5
 8006548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800654a:	6923      	ldr	r3, [r4, #16]
 800654c:	6820      	ldr	r0, [r4, #0]
 800654e:	b2ef      	uxtb	r7, r5
 8006550:	1ac0      	subs	r0, r0, r3
 8006552:	6963      	ldr	r3, [r4, #20]
 8006554:	b2ed      	uxtb	r5, r5
 8006556:	4283      	cmp	r3, r0
 8006558:	dc05      	bgt.n	8006566 <__swbuf_r+0x56>
 800655a:	0021      	movs	r1, r4
 800655c:	0030      	movs	r0, r6
 800655e:	f002 fddb 	bl	8009118 <_fflush_r>
 8006562:	2800      	cmp	r0, #0
 8006564:	d1ed      	bne.n	8006542 <__swbuf_r+0x32>
 8006566:	68a3      	ldr	r3, [r4, #8]
 8006568:	3001      	adds	r0, #1
 800656a:	3b01      	subs	r3, #1
 800656c:	60a3      	str	r3, [r4, #8]
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	6022      	str	r2, [r4, #0]
 8006574:	701f      	strb	r7, [r3, #0]
 8006576:	6963      	ldr	r3, [r4, #20]
 8006578:	4283      	cmp	r3, r0
 800657a:	d004      	beq.n	8006586 <__swbuf_r+0x76>
 800657c:	89a3      	ldrh	r3, [r4, #12]
 800657e:	07db      	lsls	r3, r3, #31
 8006580:	d5e1      	bpl.n	8006546 <__swbuf_r+0x36>
 8006582:	2d0a      	cmp	r5, #10
 8006584:	d1df      	bne.n	8006546 <__swbuf_r+0x36>
 8006586:	0021      	movs	r1, r4
 8006588:	0030      	movs	r0, r6
 800658a:	f002 fdc5 	bl	8009118 <_fflush_r>
 800658e:	2800      	cmp	r0, #0
 8006590:	d0d9      	beq.n	8006546 <__swbuf_r+0x36>
 8006592:	e7d6      	b.n	8006542 <__swbuf_r+0x32>

08006594 <__swsetup_r>:
 8006594:	4b2d      	ldr	r3, [pc, #180]	@ (800664c <__swsetup_r+0xb8>)
 8006596:	b570      	push	{r4, r5, r6, lr}
 8006598:	0005      	movs	r5, r0
 800659a:	6818      	ldr	r0, [r3, #0]
 800659c:	000c      	movs	r4, r1
 800659e:	2800      	cmp	r0, #0
 80065a0:	d004      	beq.n	80065ac <__swsetup_r+0x18>
 80065a2:	6a03      	ldr	r3, [r0, #32]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <__swsetup_r+0x18>
 80065a8:	f7ff ff10 	bl	80063cc <__sinit>
 80065ac:	220c      	movs	r2, #12
 80065ae:	5ea3      	ldrsh	r3, [r4, r2]
 80065b0:	071a      	lsls	r2, r3, #28
 80065b2:	d423      	bmi.n	80065fc <__swsetup_r+0x68>
 80065b4:	06da      	lsls	r2, r3, #27
 80065b6:	d407      	bmi.n	80065c8 <__swsetup_r+0x34>
 80065b8:	2209      	movs	r2, #9
 80065ba:	602a      	str	r2, [r5, #0]
 80065bc:	2240      	movs	r2, #64	@ 0x40
 80065be:	2001      	movs	r0, #1
 80065c0:	4313      	orrs	r3, r2
 80065c2:	81a3      	strh	r3, [r4, #12]
 80065c4:	4240      	negs	r0, r0
 80065c6:	e03a      	b.n	800663e <__swsetup_r+0xaa>
 80065c8:	075b      	lsls	r3, r3, #29
 80065ca:	d513      	bpl.n	80065f4 <__swsetup_r+0x60>
 80065cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065ce:	2900      	cmp	r1, #0
 80065d0:	d008      	beq.n	80065e4 <__swsetup_r+0x50>
 80065d2:	0023      	movs	r3, r4
 80065d4:	3344      	adds	r3, #68	@ 0x44
 80065d6:	4299      	cmp	r1, r3
 80065d8:	d002      	beq.n	80065e0 <__swsetup_r+0x4c>
 80065da:	0028      	movs	r0, r5
 80065dc:	f000 ff44 	bl	8007468 <_free_r>
 80065e0:	2300      	movs	r3, #0
 80065e2:	6363      	str	r3, [r4, #52]	@ 0x34
 80065e4:	2224      	movs	r2, #36	@ 0x24
 80065e6:	89a3      	ldrh	r3, [r4, #12]
 80065e8:	4393      	bics	r3, r2
 80065ea:	81a3      	strh	r3, [r4, #12]
 80065ec:	2300      	movs	r3, #0
 80065ee:	6063      	str	r3, [r4, #4]
 80065f0:	6923      	ldr	r3, [r4, #16]
 80065f2:	6023      	str	r3, [r4, #0]
 80065f4:	2308      	movs	r3, #8
 80065f6:	89a2      	ldrh	r2, [r4, #12]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	81a3      	strh	r3, [r4, #12]
 80065fc:	6923      	ldr	r3, [r4, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10b      	bne.n	800661a <__swsetup_r+0x86>
 8006602:	21a0      	movs	r1, #160	@ 0xa0
 8006604:	2280      	movs	r2, #128	@ 0x80
 8006606:	89a3      	ldrh	r3, [r4, #12]
 8006608:	0089      	lsls	r1, r1, #2
 800660a:	0092      	lsls	r2, r2, #2
 800660c:	400b      	ands	r3, r1
 800660e:	4293      	cmp	r3, r2
 8006610:	d003      	beq.n	800661a <__swsetup_r+0x86>
 8006612:	0021      	movs	r1, r4
 8006614:	0028      	movs	r0, r5
 8006616:	f002 fdd5 	bl	80091c4 <__smakebuf_r>
 800661a:	220c      	movs	r2, #12
 800661c:	5ea3      	ldrsh	r3, [r4, r2]
 800661e:	2101      	movs	r1, #1
 8006620:	001a      	movs	r2, r3
 8006622:	400a      	ands	r2, r1
 8006624:	420b      	tst	r3, r1
 8006626:	d00b      	beq.n	8006640 <__swsetup_r+0xac>
 8006628:	2200      	movs	r2, #0
 800662a:	60a2      	str	r2, [r4, #8]
 800662c:	6962      	ldr	r2, [r4, #20]
 800662e:	4252      	negs	r2, r2
 8006630:	61a2      	str	r2, [r4, #24]
 8006632:	2000      	movs	r0, #0
 8006634:	6922      	ldr	r2, [r4, #16]
 8006636:	4282      	cmp	r2, r0
 8006638:	d101      	bne.n	800663e <__swsetup_r+0xaa>
 800663a:	061a      	lsls	r2, r3, #24
 800663c:	d4be      	bmi.n	80065bc <__swsetup_r+0x28>
 800663e:	bd70      	pop	{r4, r5, r6, pc}
 8006640:	0799      	lsls	r1, r3, #30
 8006642:	d400      	bmi.n	8006646 <__swsetup_r+0xb2>
 8006644:	6962      	ldr	r2, [r4, #20]
 8006646:	60a2      	str	r2, [r4, #8]
 8006648:	e7f3      	b.n	8006632 <__swsetup_r+0x9e>
 800664a:	46c0      	nop			@ (mov r8, r8)
 800664c:	20000018 	.word	0x20000018

08006650 <memset>:
 8006650:	0003      	movs	r3, r0
 8006652:	1882      	adds	r2, r0, r2
 8006654:	4293      	cmp	r3, r2
 8006656:	d100      	bne.n	800665a <memset+0xa>
 8006658:	4770      	bx	lr
 800665a:	7019      	strb	r1, [r3, #0]
 800665c:	3301      	adds	r3, #1
 800665e:	e7f9      	b.n	8006654 <memset+0x4>

08006660 <_localeconv_r>:
 8006660:	4800      	ldr	r0, [pc, #0]	@ (8006664 <_localeconv_r+0x4>)
 8006662:	4770      	bx	lr
 8006664:	20000158 	.word	0x20000158

08006668 <_close_r>:
 8006668:	2300      	movs	r3, #0
 800666a:	b570      	push	{r4, r5, r6, lr}
 800666c:	4d06      	ldr	r5, [pc, #24]	@ (8006688 <_close_r+0x20>)
 800666e:	0004      	movs	r4, r0
 8006670:	0008      	movs	r0, r1
 8006672:	602b      	str	r3, [r5, #0]
 8006674:	f7fc fb16 	bl	8002ca4 <_close>
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	d103      	bne.n	8006684 <_close_r+0x1c>
 800667c:	682b      	ldr	r3, [r5, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d000      	beq.n	8006684 <_close_r+0x1c>
 8006682:	6023      	str	r3, [r4, #0]
 8006684:	bd70      	pop	{r4, r5, r6, pc}
 8006686:	46c0      	nop			@ (mov r8, r8)
 8006688:	20000c14 	.word	0x20000c14

0800668c <_lseek_r>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	0004      	movs	r4, r0
 8006690:	0008      	movs	r0, r1
 8006692:	0011      	movs	r1, r2
 8006694:	001a      	movs	r2, r3
 8006696:	2300      	movs	r3, #0
 8006698:	4d05      	ldr	r5, [pc, #20]	@ (80066b0 <_lseek_r+0x24>)
 800669a:	602b      	str	r3, [r5, #0]
 800669c:	f7fc fb23 	bl	8002ce6 <_lseek>
 80066a0:	1c43      	adds	r3, r0, #1
 80066a2:	d103      	bne.n	80066ac <_lseek_r+0x20>
 80066a4:	682b      	ldr	r3, [r5, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d000      	beq.n	80066ac <_lseek_r+0x20>
 80066aa:	6023      	str	r3, [r4, #0]
 80066ac:	bd70      	pop	{r4, r5, r6, pc}
 80066ae:	46c0      	nop			@ (mov r8, r8)
 80066b0:	20000c14 	.word	0x20000c14

080066b4 <_read_r>:
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	0004      	movs	r4, r0
 80066b8:	0008      	movs	r0, r1
 80066ba:	0011      	movs	r1, r2
 80066bc:	001a      	movs	r2, r3
 80066be:	2300      	movs	r3, #0
 80066c0:	4d05      	ldr	r5, [pc, #20]	@ (80066d8 <_read_r+0x24>)
 80066c2:	602b      	str	r3, [r5, #0]
 80066c4:	f7fc fab5 	bl	8002c32 <_read>
 80066c8:	1c43      	adds	r3, r0, #1
 80066ca:	d103      	bne.n	80066d4 <_read_r+0x20>
 80066cc:	682b      	ldr	r3, [r5, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d000      	beq.n	80066d4 <_read_r+0x20>
 80066d2:	6023      	str	r3, [r4, #0]
 80066d4:	bd70      	pop	{r4, r5, r6, pc}
 80066d6:	46c0      	nop			@ (mov r8, r8)
 80066d8:	20000c14 	.word	0x20000c14

080066dc <_write_r>:
 80066dc:	b570      	push	{r4, r5, r6, lr}
 80066de:	0004      	movs	r4, r0
 80066e0:	0008      	movs	r0, r1
 80066e2:	0011      	movs	r1, r2
 80066e4:	001a      	movs	r2, r3
 80066e6:	2300      	movs	r3, #0
 80066e8:	4d05      	ldr	r5, [pc, #20]	@ (8006700 <_write_r+0x24>)
 80066ea:	602b      	str	r3, [r5, #0]
 80066ec:	f7fc fabe 	bl	8002c6c <_write>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d103      	bne.n	80066fc <_write_r+0x20>
 80066f4:	682b      	ldr	r3, [r5, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d000      	beq.n	80066fc <_write_r+0x20>
 80066fa:	6023      	str	r3, [r4, #0]
 80066fc:	bd70      	pop	{r4, r5, r6, pc}
 80066fe:	46c0      	nop			@ (mov r8, r8)
 8006700:	20000c14 	.word	0x20000c14

08006704 <__errno>:
 8006704:	4b01      	ldr	r3, [pc, #4]	@ (800670c <__errno+0x8>)
 8006706:	6818      	ldr	r0, [r3, #0]
 8006708:	4770      	bx	lr
 800670a:	46c0      	nop			@ (mov r8, r8)
 800670c:	20000018 	.word	0x20000018

08006710 <__libc_init_array>:
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	2600      	movs	r6, #0
 8006714:	4c0c      	ldr	r4, [pc, #48]	@ (8006748 <__libc_init_array+0x38>)
 8006716:	4d0d      	ldr	r5, [pc, #52]	@ (800674c <__libc_init_array+0x3c>)
 8006718:	1b64      	subs	r4, r4, r5
 800671a:	10a4      	asrs	r4, r4, #2
 800671c:	42a6      	cmp	r6, r4
 800671e:	d109      	bne.n	8006734 <__libc_init_array+0x24>
 8006720:	2600      	movs	r6, #0
 8006722:	f003 fb9b 	bl	8009e5c <_init>
 8006726:	4c0a      	ldr	r4, [pc, #40]	@ (8006750 <__libc_init_array+0x40>)
 8006728:	4d0a      	ldr	r5, [pc, #40]	@ (8006754 <__libc_init_array+0x44>)
 800672a:	1b64      	subs	r4, r4, r5
 800672c:	10a4      	asrs	r4, r4, #2
 800672e:	42a6      	cmp	r6, r4
 8006730:	d105      	bne.n	800673e <__libc_init_array+0x2e>
 8006732:	bd70      	pop	{r4, r5, r6, pc}
 8006734:	00b3      	lsls	r3, r6, #2
 8006736:	58eb      	ldr	r3, [r5, r3]
 8006738:	4798      	blx	r3
 800673a:	3601      	adds	r6, #1
 800673c:	e7ee      	b.n	800671c <__libc_init_array+0xc>
 800673e:	00b3      	lsls	r3, r6, #2
 8006740:	58eb      	ldr	r3, [r5, r3]
 8006742:	4798      	blx	r3
 8006744:	3601      	adds	r6, #1
 8006746:	e7f2      	b.n	800672e <__libc_init_array+0x1e>
 8006748:	0800a34c 	.word	0x0800a34c
 800674c:	0800a34c 	.word	0x0800a34c
 8006750:	0800a350 	.word	0x0800a350
 8006754:	0800a34c 	.word	0x0800a34c

08006758 <__retarget_lock_init_recursive>:
 8006758:	4770      	bx	lr

0800675a <__retarget_lock_acquire_recursive>:
 800675a:	4770      	bx	lr

0800675c <__retarget_lock_release_recursive>:
 800675c:	4770      	bx	lr

0800675e <memchr>:
 800675e:	b2c9      	uxtb	r1, r1
 8006760:	1882      	adds	r2, r0, r2
 8006762:	4290      	cmp	r0, r2
 8006764:	d101      	bne.n	800676a <memchr+0xc>
 8006766:	2000      	movs	r0, #0
 8006768:	4770      	bx	lr
 800676a:	7803      	ldrb	r3, [r0, #0]
 800676c:	428b      	cmp	r3, r1
 800676e:	d0fb      	beq.n	8006768 <memchr+0xa>
 8006770:	3001      	adds	r0, #1
 8006772:	e7f6      	b.n	8006762 <memchr+0x4>

08006774 <nanf>:
 8006774:	4800      	ldr	r0, [pc, #0]	@ (8006778 <nanf+0x4>)
 8006776:	4770      	bx	lr
 8006778:	7fc00000 	.word	0x7fc00000

0800677c <quorem>:
 800677c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800677e:	6903      	ldr	r3, [r0, #16]
 8006780:	690c      	ldr	r4, [r1, #16]
 8006782:	b089      	sub	sp, #36	@ 0x24
 8006784:	9003      	str	r0, [sp, #12]
 8006786:	9106      	str	r1, [sp, #24]
 8006788:	2000      	movs	r0, #0
 800678a:	42a3      	cmp	r3, r4
 800678c:	db63      	blt.n	8006856 <quorem+0xda>
 800678e:	000b      	movs	r3, r1
 8006790:	3c01      	subs	r4, #1
 8006792:	3314      	adds	r3, #20
 8006794:	00a5      	lsls	r5, r4, #2
 8006796:	9304      	str	r3, [sp, #16]
 8006798:	195b      	adds	r3, r3, r5
 800679a:	9305      	str	r3, [sp, #20]
 800679c:	9b03      	ldr	r3, [sp, #12]
 800679e:	3314      	adds	r3, #20
 80067a0:	9301      	str	r3, [sp, #4]
 80067a2:	195d      	adds	r5, r3, r5
 80067a4:	9b05      	ldr	r3, [sp, #20]
 80067a6:	682f      	ldr	r7, [r5, #0]
 80067a8:	681e      	ldr	r6, [r3, #0]
 80067aa:	0038      	movs	r0, r7
 80067ac:	3601      	adds	r6, #1
 80067ae:	0031      	movs	r1, r6
 80067b0:	f7f9 fcc6 	bl	8000140 <__udivsi3>
 80067b4:	9002      	str	r0, [sp, #8]
 80067b6:	42b7      	cmp	r7, r6
 80067b8:	d327      	bcc.n	800680a <quorem+0x8e>
 80067ba:	9b04      	ldr	r3, [sp, #16]
 80067bc:	2700      	movs	r7, #0
 80067be:	469c      	mov	ip, r3
 80067c0:	9e01      	ldr	r6, [sp, #4]
 80067c2:	9707      	str	r7, [sp, #28]
 80067c4:	4662      	mov	r2, ip
 80067c6:	ca08      	ldmia	r2!, {r3}
 80067c8:	6830      	ldr	r0, [r6, #0]
 80067ca:	4694      	mov	ip, r2
 80067cc:	9a02      	ldr	r2, [sp, #8]
 80067ce:	b299      	uxth	r1, r3
 80067d0:	4351      	muls	r1, r2
 80067d2:	0c1b      	lsrs	r3, r3, #16
 80067d4:	4353      	muls	r3, r2
 80067d6:	19c9      	adds	r1, r1, r7
 80067d8:	0c0a      	lsrs	r2, r1, #16
 80067da:	189b      	adds	r3, r3, r2
 80067dc:	b289      	uxth	r1, r1
 80067de:	b282      	uxth	r2, r0
 80067e0:	1a52      	subs	r2, r2, r1
 80067e2:	9907      	ldr	r1, [sp, #28]
 80067e4:	0c1f      	lsrs	r7, r3, #16
 80067e6:	1852      	adds	r2, r2, r1
 80067e8:	0c00      	lsrs	r0, r0, #16
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	1411      	asrs	r1, r2, #16
 80067ee:	1ac3      	subs	r3, r0, r3
 80067f0:	185b      	adds	r3, r3, r1
 80067f2:	1419      	asrs	r1, r3, #16
 80067f4:	b292      	uxth	r2, r2
 80067f6:	041b      	lsls	r3, r3, #16
 80067f8:	431a      	orrs	r2, r3
 80067fa:	9b05      	ldr	r3, [sp, #20]
 80067fc:	9107      	str	r1, [sp, #28]
 80067fe:	c604      	stmia	r6!, {r2}
 8006800:	4563      	cmp	r3, ip
 8006802:	d2df      	bcs.n	80067c4 <quorem+0x48>
 8006804:	682b      	ldr	r3, [r5, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d02b      	beq.n	8006862 <quorem+0xe6>
 800680a:	9906      	ldr	r1, [sp, #24]
 800680c:	9803      	ldr	r0, [sp, #12]
 800680e:	f001 fa03 	bl	8007c18 <__mcmp>
 8006812:	2800      	cmp	r0, #0
 8006814:	db1e      	blt.n	8006854 <quorem+0xd8>
 8006816:	2600      	movs	r6, #0
 8006818:	9d01      	ldr	r5, [sp, #4]
 800681a:	9904      	ldr	r1, [sp, #16]
 800681c:	c901      	ldmia	r1!, {r0}
 800681e:	682b      	ldr	r3, [r5, #0]
 8006820:	b287      	uxth	r7, r0
 8006822:	b29a      	uxth	r2, r3
 8006824:	1bd2      	subs	r2, r2, r7
 8006826:	1992      	adds	r2, r2, r6
 8006828:	0c00      	lsrs	r0, r0, #16
 800682a:	0c1b      	lsrs	r3, r3, #16
 800682c:	1a1b      	subs	r3, r3, r0
 800682e:	1410      	asrs	r0, r2, #16
 8006830:	181b      	adds	r3, r3, r0
 8006832:	141e      	asrs	r6, r3, #16
 8006834:	b292      	uxth	r2, r2
 8006836:	041b      	lsls	r3, r3, #16
 8006838:	431a      	orrs	r2, r3
 800683a:	9b05      	ldr	r3, [sp, #20]
 800683c:	c504      	stmia	r5!, {r2}
 800683e:	428b      	cmp	r3, r1
 8006840:	d2ec      	bcs.n	800681c <quorem+0xa0>
 8006842:	9a01      	ldr	r2, [sp, #4]
 8006844:	00a3      	lsls	r3, r4, #2
 8006846:	18d3      	adds	r3, r2, r3
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	2a00      	cmp	r2, #0
 800684c:	d014      	beq.n	8006878 <quorem+0xfc>
 800684e:	9b02      	ldr	r3, [sp, #8]
 8006850:	3301      	adds	r3, #1
 8006852:	9302      	str	r3, [sp, #8]
 8006854:	9802      	ldr	r0, [sp, #8]
 8006856:	b009      	add	sp, #36	@ 0x24
 8006858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800685a:	682b      	ldr	r3, [r5, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d104      	bne.n	800686a <quorem+0xee>
 8006860:	3c01      	subs	r4, #1
 8006862:	9b01      	ldr	r3, [sp, #4]
 8006864:	3d04      	subs	r5, #4
 8006866:	42ab      	cmp	r3, r5
 8006868:	d3f7      	bcc.n	800685a <quorem+0xde>
 800686a:	9b03      	ldr	r3, [sp, #12]
 800686c:	611c      	str	r4, [r3, #16]
 800686e:	e7cc      	b.n	800680a <quorem+0x8e>
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	2a00      	cmp	r2, #0
 8006874:	d104      	bne.n	8006880 <quorem+0x104>
 8006876:	3c01      	subs	r4, #1
 8006878:	9a01      	ldr	r2, [sp, #4]
 800687a:	3b04      	subs	r3, #4
 800687c:	429a      	cmp	r2, r3
 800687e:	d3f7      	bcc.n	8006870 <quorem+0xf4>
 8006880:	9b03      	ldr	r3, [sp, #12]
 8006882:	611c      	str	r4, [r3, #16]
 8006884:	e7e3      	b.n	800684e <quorem+0xd2>
	...

08006888 <_dtoa_r>:
 8006888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800688a:	0014      	movs	r4, r2
 800688c:	001d      	movs	r5, r3
 800688e:	69c6      	ldr	r6, [r0, #28]
 8006890:	b09d      	sub	sp, #116	@ 0x74
 8006892:	940a      	str	r4, [sp, #40]	@ 0x28
 8006894:	950b      	str	r5, [sp, #44]	@ 0x2c
 8006896:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8006898:	9003      	str	r0, [sp, #12]
 800689a:	2e00      	cmp	r6, #0
 800689c:	d10f      	bne.n	80068be <_dtoa_r+0x36>
 800689e:	2010      	movs	r0, #16
 80068a0:	f000 fe2c 	bl	80074fc <malloc>
 80068a4:	9b03      	ldr	r3, [sp, #12]
 80068a6:	1e02      	subs	r2, r0, #0
 80068a8:	61d8      	str	r0, [r3, #28]
 80068aa:	d104      	bne.n	80068b6 <_dtoa_r+0x2e>
 80068ac:	21ef      	movs	r1, #239	@ 0xef
 80068ae:	4bc7      	ldr	r3, [pc, #796]	@ (8006bcc <_dtoa_r+0x344>)
 80068b0:	48c7      	ldr	r0, [pc, #796]	@ (8006bd0 <_dtoa_r+0x348>)
 80068b2:	f002 fd31 	bl	8009318 <__assert_func>
 80068b6:	6046      	str	r6, [r0, #4]
 80068b8:	6086      	str	r6, [r0, #8]
 80068ba:	6006      	str	r6, [r0, #0]
 80068bc:	60c6      	str	r6, [r0, #12]
 80068be:	9b03      	ldr	r3, [sp, #12]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	6819      	ldr	r1, [r3, #0]
 80068c4:	2900      	cmp	r1, #0
 80068c6:	d00b      	beq.n	80068e0 <_dtoa_r+0x58>
 80068c8:	685a      	ldr	r2, [r3, #4]
 80068ca:	2301      	movs	r3, #1
 80068cc:	4093      	lsls	r3, r2
 80068ce:	604a      	str	r2, [r1, #4]
 80068d0:	608b      	str	r3, [r1, #8]
 80068d2:	9803      	ldr	r0, [sp, #12]
 80068d4:	f000 ff12 	bl	80076fc <_Bfree>
 80068d8:	2200      	movs	r2, #0
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	2d00      	cmp	r5, #0
 80068e2:	da1e      	bge.n	8006922 <_dtoa_r+0x9a>
 80068e4:	2301      	movs	r3, #1
 80068e6:	603b      	str	r3, [r7, #0]
 80068e8:	006b      	lsls	r3, r5, #1
 80068ea:	085b      	lsrs	r3, r3, #1
 80068ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068ee:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80068f0:	4bb8      	ldr	r3, [pc, #736]	@ (8006bd4 <_dtoa_r+0x34c>)
 80068f2:	4ab8      	ldr	r2, [pc, #736]	@ (8006bd4 <_dtoa_r+0x34c>)
 80068f4:	403b      	ands	r3, r7
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d116      	bne.n	8006928 <_dtoa_r+0xa0>
 80068fa:	4bb7      	ldr	r3, [pc, #732]	@ (8006bd8 <_dtoa_r+0x350>)
 80068fc:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	033b      	lsls	r3, r7, #12
 8006902:	0b1b      	lsrs	r3, r3, #12
 8006904:	4323      	orrs	r3, r4
 8006906:	d101      	bne.n	800690c <_dtoa_r+0x84>
 8006908:	f000 fd80 	bl	800740c <_dtoa_r+0xb84>
 800690c:	4bb3      	ldr	r3, [pc, #716]	@ (8006bdc <_dtoa_r+0x354>)
 800690e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006910:	9308      	str	r3, [sp, #32]
 8006912:	2a00      	cmp	r2, #0
 8006914:	d002      	beq.n	800691c <_dtoa_r+0x94>
 8006916:	4bb2      	ldr	r3, [pc, #712]	@ (8006be0 <_dtoa_r+0x358>)
 8006918:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800691a:	6013      	str	r3, [r2, #0]
 800691c:	9808      	ldr	r0, [sp, #32]
 800691e:	b01d      	add	sp, #116	@ 0x74
 8006920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006922:	2300      	movs	r3, #0
 8006924:	603b      	str	r3, [r7, #0]
 8006926:	e7e2      	b.n	80068ee <_dtoa_r+0x66>
 8006928:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800692a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800692c:	9212      	str	r2, [sp, #72]	@ 0x48
 800692e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006930:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006932:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006934:	2200      	movs	r2, #0
 8006936:	2300      	movs	r3, #0
 8006938:	f7f9 fd88 	bl	800044c <__aeabi_dcmpeq>
 800693c:	1e06      	subs	r6, r0, #0
 800693e:	d00b      	beq.n	8006958 <_dtoa_r+0xd0>
 8006940:	2301      	movs	r3, #1
 8006942:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006948:	2b00      	cmp	r3, #0
 800694a:	d002      	beq.n	8006952 <_dtoa_r+0xca>
 800694c:	4ba5      	ldr	r3, [pc, #660]	@ (8006be4 <_dtoa_r+0x35c>)
 800694e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8006950:	6013      	str	r3, [r2, #0]
 8006952:	4ba5      	ldr	r3, [pc, #660]	@ (8006be8 <_dtoa_r+0x360>)
 8006954:	9308      	str	r3, [sp, #32]
 8006956:	e7e1      	b.n	800691c <_dtoa_r+0x94>
 8006958:	ab1a      	add	r3, sp, #104	@ 0x68
 800695a:	9301      	str	r3, [sp, #4]
 800695c:	ab1b      	add	r3, sp, #108	@ 0x6c
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	9803      	ldr	r0, [sp, #12]
 8006962:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006964:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006966:	f001 fa79 	bl	8007e5c <__d2b>
 800696a:	007a      	lsls	r2, r7, #1
 800696c:	9005      	str	r0, [sp, #20]
 800696e:	0d52      	lsrs	r2, r2, #21
 8006970:	d100      	bne.n	8006974 <_dtoa_r+0xec>
 8006972:	e07b      	b.n	8006a6c <_dtoa_r+0x1e4>
 8006974:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006976:	9618      	str	r6, [sp, #96]	@ 0x60
 8006978:	0319      	lsls	r1, r3, #12
 800697a:	4b9c      	ldr	r3, [pc, #624]	@ (8006bec <_dtoa_r+0x364>)
 800697c:	0b09      	lsrs	r1, r1, #12
 800697e:	430b      	orrs	r3, r1
 8006980:	499b      	ldr	r1, [pc, #620]	@ (8006bf0 <_dtoa_r+0x368>)
 8006982:	1857      	adds	r7, r2, r1
 8006984:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006986:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006988:	0019      	movs	r1, r3
 800698a:	2200      	movs	r2, #0
 800698c:	4b99      	ldr	r3, [pc, #612]	@ (8006bf4 <_dtoa_r+0x36c>)
 800698e:	f7fb f8df 	bl	8001b50 <__aeabi_dsub>
 8006992:	4a99      	ldr	r2, [pc, #612]	@ (8006bf8 <_dtoa_r+0x370>)
 8006994:	4b99      	ldr	r3, [pc, #612]	@ (8006bfc <_dtoa_r+0x374>)
 8006996:	f7fa fdf5 	bl	8001584 <__aeabi_dmul>
 800699a:	4a99      	ldr	r2, [pc, #612]	@ (8006c00 <_dtoa_r+0x378>)
 800699c:	4b99      	ldr	r3, [pc, #612]	@ (8006c04 <_dtoa_r+0x37c>)
 800699e:	f7f9 fdf1 	bl	8000584 <__aeabi_dadd>
 80069a2:	0004      	movs	r4, r0
 80069a4:	0038      	movs	r0, r7
 80069a6:	000d      	movs	r5, r1
 80069a8:	f7fb fd3a 	bl	8002420 <__aeabi_i2d>
 80069ac:	4a96      	ldr	r2, [pc, #600]	@ (8006c08 <_dtoa_r+0x380>)
 80069ae:	4b97      	ldr	r3, [pc, #604]	@ (8006c0c <_dtoa_r+0x384>)
 80069b0:	f7fa fde8 	bl	8001584 <__aeabi_dmul>
 80069b4:	0002      	movs	r2, r0
 80069b6:	000b      	movs	r3, r1
 80069b8:	0020      	movs	r0, r4
 80069ba:	0029      	movs	r1, r5
 80069bc:	f7f9 fde2 	bl	8000584 <__aeabi_dadd>
 80069c0:	0004      	movs	r4, r0
 80069c2:	000d      	movs	r5, r1
 80069c4:	f7fb fcf0 	bl	80023a8 <__aeabi_d2iz>
 80069c8:	2200      	movs	r2, #0
 80069ca:	9004      	str	r0, [sp, #16]
 80069cc:	2300      	movs	r3, #0
 80069ce:	0020      	movs	r0, r4
 80069d0:	0029      	movs	r1, r5
 80069d2:	f7f9 fd41 	bl	8000458 <__aeabi_dcmplt>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d00b      	beq.n	80069f2 <_dtoa_r+0x16a>
 80069da:	9804      	ldr	r0, [sp, #16]
 80069dc:	f7fb fd20 	bl	8002420 <__aeabi_i2d>
 80069e0:	002b      	movs	r3, r5
 80069e2:	0022      	movs	r2, r4
 80069e4:	f7f9 fd32 	bl	800044c <__aeabi_dcmpeq>
 80069e8:	4243      	negs	r3, r0
 80069ea:	4158      	adcs	r0, r3
 80069ec:	9b04      	ldr	r3, [sp, #16]
 80069ee:	1a1b      	subs	r3, r3, r0
 80069f0:	9304      	str	r3, [sp, #16]
 80069f2:	2301      	movs	r3, #1
 80069f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80069f6:	9b04      	ldr	r3, [sp, #16]
 80069f8:	2b16      	cmp	r3, #22
 80069fa:	d810      	bhi.n	8006a1e <_dtoa_r+0x196>
 80069fc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80069fe:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006a00:	9a04      	ldr	r2, [sp, #16]
 8006a02:	4b83      	ldr	r3, [pc, #524]	@ (8006c10 <_dtoa_r+0x388>)
 8006a04:	00d2      	lsls	r2, r2, #3
 8006a06:	189b      	adds	r3, r3, r2
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	f7f9 fd24 	bl	8000458 <__aeabi_dcmplt>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d047      	beq.n	8006aa4 <_dtoa_r+0x21c>
 8006a14:	9b04      	ldr	r3, [sp, #16]
 8006a16:	3b01      	subs	r3, #1
 8006a18:	9304      	str	r3, [sp, #16]
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006a1e:	2200      	movs	r2, #0
 8006a20:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006a22:	9206      	str	r2, [sp, #24]
 8006a24:	1bdb      	subs	r3, r3, r7
 8006a26:	1e5a      	subs	r2, r3, #1
 8006a28:	d53e      	bpl.n	8006aa8 <_dtoa_r+0x220>
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	9306      	str	r3, [sp, #24]
 8006a30:	2300      	movs	r3, #0
 8006a32:	930d      	str	r3, [sp, #52]	@ 0x34
 8006a34:	9b04      	ldr	r3, [sp, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	db38      	blt.n	8006aac <_dtoa_r+0x224>
 8006a3a:	9a04      	ldr	r2, [sp, #16]
 8006a3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a3e:	4694      	mov	ip, r2
 8006a40:	4463      	add	r3, ip
 8006a42:	930d      	str	r3, [sp, #52]	@ 0x34
 8006a44:	2300      	movs	r3, #0
 8006a46:	9214      	str	r2, [sp, #80]	@ 0x50
 8006a48:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a4a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006a4c:	2401      	movs	r4, #1
 8006a4e:	2b09      	cmp	r3, #9
 8006a50:	d862      	bhi.n	8006b18 <_dtoa_r+0x290>
 8006a52:	2b05      	cmp	r3, #5
 8006a54:	dd02      	ble.n	8006a5c <_dtoa_r+0x1d4>
 8006a56:	2400      	movs	r4, #0
 8006a58:	3b04      	subs	r3, #4
 8006a5a:	9322      	str	r3, [sp, #136]	@ 0x88
 8006a5c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006a5e:	1e98      	subs	r0, r3, #2
 8006a60:	2803      	cmp	r0, #3
 8006a62:	d863      	bhi.n	8006b2c <_dtoa_r+0x2a4>
 8006a64:	f7f9 fb58 	bl	8000118 <__gnu_thumb1_case_uqi>
 8006a68:	2b385654 	.word	0x2b385654
 8006a6c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006a6e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8006a70:	18f6      	adds	r6, r6, r3
 8006a72:	4b68      	ldr	r3, [pc, #416]	@ (8006c14 <_dtoa_r+0x38c>)
 8006a74:	18f2      	adds	r2, r6, r3
 8006a76:	2a20      	cmp	r2, #32
 8006a78:	dd0f      	ble.n	8006a9a <_dtoa_r+0x212>
 8006a7a:	2340      	movs	r3, #64	@ 0x40
 8006a7c:	1a9b      	subs	r3, r3, r2
 8006a7e:	409f      	lsls	r7, r3
 8006a80:	4b65      	ldr	r3, [pc, #404]	@ (8006c18 <_dtoa_r+0x390>)
 8006a82:	0038      	movs	r0, r7
 8006a84:	18f3      	adds	r3, r6, r3
 8006a86:	40dc      	lsrs	r4, r3
 8006a88:	4320      	orrs	r0, r4
 8006a8a:	f7fb fcf7 	bl	800247c <__aeabi_ui2d>
 8006a8e:	2201      	movs	r2, #1
 8006a90:	4b62      	ldr	r3, [pc, #392]	@ (8006c1c <_dtoa_r+0x394>)
 8006a92:	1e77      	subs	r7, r6, #1
 8006a94:	18cb      	adds	r3, r1, r3
 8006a96:	9218      	str	r2, [sp, #96]	@ 0x60
 8006a98:	e776      	b.n	8006988 <_dtoa_r+0x100>
 8006a9a:	2320      	movs	r3, #32
 8006a9c:	0020      	movs	r0, r4
 8006a9e:	1a9b      	subs	r3, r3, r2
 8006aa0:	4098      	lsls	r0, r3
 8006aa2:	e7f2      	b.n	8006a8a <_dtoa_r+0x202>
 8006aa4:	9015      	str	r0, [sp, #84]	@ 0x54
 8006aa6:	e7ba      	b.n	8006a1e <_dtoa_r+0x196>
 8006aa8:	920d      	str	r2, [sp, #52]	@ 0x34
 8006aaa:	e7c3      	b.n	8006a34 <_dtoa_r+0x1ac>
 8006aac:	9b06      	ldr	r3, [sp, #24]
 8006aae:	9a04      	ldr	r2, [sp, #16]
 8006ab0:	1a9b      	subs	r3, r3, r2
 8006ab2:	9306      	str	r3, [sp, #24]
 8006ab4:	4253      	negs	r3, r2
 8006ab6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006ab8:	2300      	movs	r3, #0
 8006aba:	9314      	str	r3, [sp, #80]	@ 0x50
 8006abc:	e7c5      	b.n	8006a4a <_dtoa_r+0x1c2>
 8006abe:	2301      	movs	r3, #1
 8006ac0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ac2:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ac4:	4694      	mov	ip, r2
 8006ac6:	9b04      	ldr	r3, [sp, #16]
 8006ac8:	4463      	add	r3, ip
 8006aca:	930e      	str	r3, [sp, #56]	@ 0x38
 8006acc:	3301      	adds	r3, #1
 8006ace:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	dc08      	bgt.n	8006ae6 <_dtoa_r+0x25e>
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e006      	b.n	8006ae6 <_dtoa_r+0x25e>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	9310      	str	r3, [sp, #64]	@ 0x40
 8006adc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	dd28      	ble.n	8006b34 <_dtoa_r+0x2ac>
 8006ae2:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ae6:	9a03      	ldr	r2, [sp, #12]
 8006ae8:	2100      	movs	r1, #0
 8006aea:	69d0      	ldr	r0, [r2, #28]
 8006aec:	2204      	movs	r2, #4
 8006aee:	0015      	movs	r5, r2
 8006af0:	3514      	adds	r5, #20
 8006af2:	429d      	cmp	r5, r3
 8006af4:	d923      	bls.n	8006b3e <_dtoa_r+0x2b6>
 8006af6:	6041      	str	r1, [r0, #4]
 8006af8:	9803      	ldr	r0, [sp, #12]
 8006afa:	f000 fdbb 	bl	8007674 <_Balloc>
 8006afe:	9008      	str	r0, [sp, #32]
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d11f      	bne.n	8006b44 <_dtoa_r+0x2bc>
 8006b04:	21b0      	movs	r1, #176	@ 0xb0
 8006b06:	4b46      	ldr	r3, [pc, #280]	@ (8006c20 <_dtoa_r+0x398>)
 8006b08:	4831      	ldr	r0, [pc, #196]	@ (8006bd0 <_dtoa_r+0x348>)
 8006b0a:	9a08      	ldr	r2, [sp, #32]
 8006b0c:	31ff      	adds	r1, #255	@ 0xff
 8006b0e:	e6d0      	b.n	80068b2 <_dtoa_r+0x2a>
 8006b10:	2300      	movs	r3, #0
 8006b12:	e7e2      	b.n	8006ada <_dtoa_r+0x252>
 8006b14:	2300      	movs	r3, #0
 8006b16:	e7d3      	b.n	8006ac0 <_dtoa_r+0x238>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	9410      	str	r4, [sp, #64]	@ 0x40
 8006b1c:	9322      	str	r3, [sp, #136]	@ 0x88
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	2200      	movs	r2, #0
 8006b22:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b24:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b26:	3313      	adds	r3, #19
 8006b28:	9223      	str	r2, [sp, #140]	@ 0x8c
 8006b2a:	e7dc      	b.n	8006ae6 <_dtoa_r+0x25e>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006b30:	3b02      	subs	r3, #2
 8006b32:	e7f5      	b.n	8006b20 <_dtoa_r+0x298>
 8006b34:	2301      	movs	r3, #1
 8006b36:	001a      	movs	r2, r3
 8006b38:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b3c:	e7f4      	b.n	8006b28 <_dtoa_r+0x2a0>
 8006b3e:	3101      	adds	r1, #1
 8006b40:	0052      	lsls	r2, r2, #1
 8006b42:	e7d4      	b.n	8006aee <_dtoa_r+0x266>
 8006b44:	9b03      	ldr	r3, [sp, #12]
 8006b46:	9a08      	ldr	r2, [sp, #32]
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b4e:	2b0e      	cmp	r3, #14
 8006b50:	d900      	bls.n	8006b54 <_dtoa_r+0x2cc>
 8006b52:	e0d6      	b.n	8006d02 <_dtoa_r+0x47a>
 8006b54:	2c00      	cmp	r4, #0
 8006b56:	d100      	bne.n	8006b5a <_dtoa_r+0x2d2>
 8006b58:	e0d3      	b.n	8006d02 <_dtoa_r+0x47a>
 8006b5a:	9b04      	ldr	r3, [sp, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	dd63      	ble.n	8006c28 <_dtoa_r+0x3a0>
 8006b60:	210f      	movs	r1, #15
 8006b62:	9a04      	ldr	r2, [sp, #16]
 8006b64:	4b2a      	ldr	r3, [pc, #168]	@ (8006c10 <_dtoa_r+0x388>)
 8006b66:	400a      	ands	r2, r1
 8006b68:	00d2      	lsls	r2, r2, #3
 8006b6a:	189b      	adds	r3, r3, r2
 8006b6c:	681e      	ldr	r6, [r3, #0]
 8006b6e:	685f      	ldr	r7, [r3, #4]
 8006b70:	9b04      	ldr	r3, [sp, #16]
 8006b72:	2402      	movs	r4, #2
 8006b74:	111d      	asrs	r5, r3, #4
 8006b76:	05db      	lsls	r3, r3, #23
 8006b78:	d50a      	bpl.n	8006b90 <_dtoa_r+0x308>
 8006b7a:	4b2a      	ldr	r3, [pc, #168]	@ (8006c24 <_dtoa_r+0x39c>)
 8006b7c:	400d      	ands	r5, r1
 8006b7e:	6a1a      	ldr	r2, [r3, #32]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b82:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006b84:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006b86:	f7fa f8c3 	bl	8000d10 <__aeabi_ddiv>
 8006b8a:	900a      	str	r0, [sp, #40]	@ 0x28
 8006b8c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006b8e:	3401      	adds	r4, #1
 8006b90:	4b24      	ldr	r3, [pc, #144]	@ (8006c24 <_dtoa_r+0x39c>)
 8006b92:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b94:	2d00      	cmp	r5, #0
 8006b96:	d108      	bne.n	8006baa <_dtoa_r+0x322>
 8006b98:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006b9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b9c:	0032      	movs	r2, r6
 8006b9e:	003b      	movs	r3, r7
 8006ba0:	f7fa f8b6 	bl	8000d10 <__aeabi_ddiv>
 8006ba4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ba6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006ba8:	e059      	b.n	8006c5e <_dtoa_r+0x3d6>
 8006baa:	2301      	movs	r3, #1
 8006bac:	421d      	tst	r5, r3
 8006bae:	d009      	beq.n	8006bc4 <_dtoa_r+0x33c>
 8006bb0:	18e4      	adds	r4, r4, r3
 8006bb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006bb4:	0030      	movs	r0, r6
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	0039      	movs	r1, r7
 8006bbc:	f7fa fce2 	bl	8001584 <__aeabi_dmul>
 8006bc0:	0006      	movs	r6, r0
 8006bc2:	000f      	movs	r7, r1
 8006bc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006bc6:	106d      	asrs	r5, r5, #1
 8006bc8:	3308      	adds	r3, #8
 8006bca:	e7e2      	b.n	8006b92 <_dtoa_r+0x30a>
 8006bcc:	08009f6a 	.word	0x08009f6a
 8006bd0:	08009f81 	.word	0x08009f81
 8006bd4:	7ff00000 	.word	0x7ff00000
 8006bd8:	0000270f 	.word	0x0000270f
 8006bdc:	08009f66 	.word	0x08009f66
 8006be0:	08009f69 	.word	0x08009f69
 8006be4:	08009f35 	.word	0x08009f35
 8006be8:	08009f34 	.word	0x08009f34
 8006bec:	3ff00000 	.word	0x3ff00000
 8006bf0:	fffffc01 	.word	0xfffffc01
 8006bf4:	3ff80000 	.word	0x3ff80000
 8006bf8:	636f4361 	.word	0x636f4361
 8006bfc:	3fd287a7 	.word	0x3fd287a7
 8006c00:	8b60c8b3 	.word	0x8b60c8b3
 8006c04:	3fc68a28 	.word	0x3fc68a28
 8006c08:	509f79fb 	.word	0x509f79fb
 8006c0c:	3fd34413 	.word	0x3fd34413
 8006c10:	0800a130 	.word	0x0800a130
 8006c14:	00000432 	.word	0x00000432
 8006c18:	00000412 	.word	0x00000412
 8006c1c:	fe100000 	.word	0xfe100000
 8006c20:	08009fd9 	.word	0x08009fd9
 8006c24:	0800a108 	.word	0x0800a108
 8006c28:	9b04      	ldr	r3, [sp, #16]
 8006c2a:	2402      	movs	r4, #2
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d016      	beq.n	8006c5e <_dtoa_r+0x3d6>
 8006c30:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8006c32:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006c34:	220f      	movs	r2, #15
 8006c36:	425d      	negs	r5, r3
 8006c38:	402a      	ands	r2, r5
 8006c3a:	4bd5      	ldr	r3, [pc, #852]	@ (8006f90 <_dtoa_r+0x708>)
 8006c3c:	00d2      	lsls	r2, r2, #3
 8006c3e:	189b      	adds	r3, r3, r2
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f7fa fc9e 	bl	8001584 <__aeabi_dmul>
 8006c48:	2701      	movs	r7, #1
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006c4e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006c50:	4ed0      	ldr	r6, [pc, #832]	@ (8006f94 <_dtoa_r+0x70c>)
 8006c52:	112d      	asrs	r5, r5, #4
 8006c54:	2d00      	cmp	r5, #0
 8006c56:	d000      	beq.n	8006c5a <_dtoa_r+0x3d2>
 8006c58:	e095      	b.n	8006d86 <_dtoa_r+0x4fe>
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1a2      	bne.n	8006ba4 <_dtoa_r+0x31c>
 8006c5e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006c60:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006c62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d100      	bne.n	8006c6a <_dtoa_r+0x3e2>
 8006c68:	e098      	b.n	8006d9c <_dtoa_r+0x514>
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	0030      	movs	r0, r6
 8006c6e:	0039      	movs	r1, r7
 8006c70:	4bc9      	ldr	r3, [pc, #804]	@ (8006f98 <_dtoa_r+0x710>)
 8006c72:	f7f9 fbf1 	bl	8000458 <__aeabi_dcmplt>
 8006c76:	2800      	cmp	r0, #0
 8006c78:	d100      	bne.n	8006c7c <_dtoa_r+0x3f4>
 8006c7a:	e08f      	b.n	8006d9c <_dtoa_r+0x514>
 8006c7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d100      	bne.n	8006c84 <_dtoa_r+0x3fc>
 8006c82:	e08b      	b.n	8006d9c <_dtoa_r+0x514>
 8006c84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	dd37      	ble.n	8006cfa <_dtoa_r+0x472>
 8006c8a:	9b04      	ldr	r3, [sp, #16]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c92:	0030      	movs	r0, r6
 8006c94:	4bc1      	ldr	r3, [pc, #772]	@ (8006f9c <_dtoa_r+0x714>)
 8006c96:	0039      	movs	r1, r7
 8006c98:	f7fa fc74 	bl	8001584 <__aeabi_dmul>
 8006c9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006c9e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006ca0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ca2:	3401      	adds	r4, #1
 8006ca4:	0020      	movs	r0, r4
 8006ca6:	9311      	str	r3, [sp, #68]	@ 0x44
 8006ca8:	f7fb fbba 	bl	8002420 <__aeabi_i2d>
 8006cac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006cae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cb0:	f7fa fc68 	bl	8001584 <__aeabi_dmul>
 8006cb4:	4bba      	ldr	r3, [pc, #744]	@ (8006fa0 <_dtoa_r+0x718>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f7f9 fc64 	bl	8000584 <__aeabi_dadd>
 8006cbc:	4bb9      	ldr	r3, [pc, #740]	@ (8006fa4 <_dtoa_r+0x71c>)
 8006cbe:	0006      	movs	r6, r0
 8006cc0:	18cf      	adds	r7, r1, r3
 8006cc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d16d      	bne.n	8006da4 <_dtoa_r+0x51c>
 8006cc8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006cca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4bb6      	ldr	r3, [pc, #728]	@ (8006fa8 <_dtoa_r+0x720>)
 8006cd0:	f7fa ff3e 	bl	8001b50 <__aeabi_dsub>
 8006cd4:	0032      	movs	r2, r6
 8006cd6:	003b      	movs	r3, r7
 8006cd8:	0004      	movs	r4, r0
 8006cda:	000d      	movs	r5, r1
 8006cdc:	f7f9 fbd0 	bl	8000480 <__aeabi_dcmpgt>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	d000      	beq.n	8006ce6 <_dtoa_r+0x45e>
 8006ce4:	e2b6      	b.n	8007254 <_dtoa_r+0x9cc>
 8006ce6:	2180      	movs	r1, #128	@ 0x80
 8006ce8:	0609      	lsls	r1, r1, #24
 8006cea:	187b      	adds	r3, r7, r1
 8006cec:	0032      	movs	r2, r6
 8006cee:	0020      	movs	r0, r4
 8006cf0:	0029      	movs	r1, r5
 8006cf2:	f7f9 fbb1 	bl	8000458 <__aeabi_dcmplt>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d128      	bne.n	8006d4c <_dtoa_r+0x4c4>
 8006cfa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006cfc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006cfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d00:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006d02:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	da00      	bge.n	8006d0a <_dtoa_r+0x482>
 8006d08:	e174      	b.n	8006ff4 <_dtoa_r+0x76c>
 8006d0a:	9a04      	ldr	r2, [sp, #16]
 8006d0c:	2a0e      	cmp	r2, #14
 8006d0e:	dd00      	ble.n	8006d12 <_dtoa_r+0x48a>
 8006d10:	e170      	b.n	8006ff4 <_dtoa_r+0x76c>
 8006d12:	4b9f      	ldr	r3, [pc, #636]	@ (8006f90 <_dtoa_r+0x708>)
 8006d14:	00d2      	lsls	r2, r2, #3
 8006d16:	189b      	adds	r3, r3, r2
 8006d18:	685c      	ldr	r4, [r3, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	9306      	str	r3, [sp, #24]
 8006d1e:	9407      	str	r4, [sp, #28]
 8006d20:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	db00      	blt.n	8006d28 <_dtoa_r+0x4a0>
 8006d26:	e0e7      	b.n	8006ef8 <_dtoa_r+0x670>
 8006d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	dd00      	ble.n	8006d30 <_dtoa_r+0x4a8>
 8006d2e:	e0e3      	b.n	8006ef8 <_dtoa_r+0x670>
 8006d30:	d10c      	bne.n	8006d4c <_dtoa_r+0x4c4>
 8006d32:	9806      	ldr	r0, [sp, #24]
 8006d34:	9907      	ldr	r1, [sp, #28]
 8006d36:	2200      	movs	r2, #0
 8006d38:	4b9b      	ldr	r3, [pc, #620]	@ (8006fa8 <_dtoa_r+0x720>)
 8006d3a:	f7fa fc23 	bl	8001584 <__aeabi_dmul>
 8006d3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d42:	f7f9 fba7 	bl	8000494 <__aeabi_dcmpge>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d100      	bne.n	8006d4c <_dtoa_r+0x4c4>
 8006d4a:	e286      	b.n	800725a <_dtoa_r+0x9d2>
 8006d4c:	2600      	movs	r6, #0
 8006d4e:	0037      	movs	r7, r6
 8006d50:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d52:	9c08      	ldr	r4, [sp, #32]
 8006d54:	43db      	mvns	r3, r3
 8006d56:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d58:	9704      	str	r7, [sp, #16]
 8006d5a:	2700      	movs	r7, #0
 8006d5c:	0031      	movs	r1, r6
 8006d5e:	9803      	ldr	r0, [sp, #12]
 8006d60:	f000 fccc 	bl	80076fc <_Bfree>
 8006d64:	9b04      	ldr	r3, [sp, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d100      	bne.n	8006d6c <_dtoa_r+0x4e4>
 8006d6a:	e0bb      	b.n	8006ee4 <_dtoa_r+0x65c>
 8006d6c:	2f00      	cmp	r7, #0
 8006d6e:	d005      	beq.n	8006d7c <_dtoa_r+0x4f4>
 8006d70:	429f      	cmp	r7, r3
 8006d72:	d003      	beq.n	8006d7c <_dtoa_r+0x4f4>
 8006d74:	0039      	movs	r1, r7
 8006d76:	9803      	ldr	r0, [sp, #12]
 8006d78:	f000 fcc0 	bl	80076fc <_Bfree>
 8006d7c:	9904      	ldr	r1, [sp, #16]
 8006d7e:	9803      	ldr	r0, [sp, #12]
 8006d80:	f000 fcbc 	bl	80076fc <_Bfree>
 8006d84:	e0ae      	b.n	8006ee4 <_dtoa_r+0x65c>
 8006d86:	423d      	tst	r5, r7
 8006d88:	d005      	beq.n	8006d96 <_dtoa_r+0x50e>
 8006d8a:	6832      	ldr	r2, [r6, #0]
 8006d8c:	6873      	ldr	r3, [r6, #4]
 8006d8e:	f7fa fbf9 	bl	8001584 <__aeabi_dmul>
 8006d92:	003b      	movs	r3, r7
 8006d94:	3401      	adds	r4, #1
 8006d96:	106d      	asrs	r5, r5, #1
 8006d98:	3608      	adds	r6, #8
 8006d9a:	e75b      	b.n	8006c54 <_dtoa_r+0x3cc>
 8006d9c:	9b04      	ldr	r3, [sp, #16]
 8006d9e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006da2:	e77f      	b.n	8006ca4 <_dtoa_r+0x41c>
 8006da4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006da6:	4b7a      	ldr	r3, [pc, #488]	@ (8006f90 <_dtoa_r+0x708>)
 8006da8:	3a01      	subs	r2, #1
 8006daa:	00d2      	lsls	r2, r2, #3
 8006dac:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8006dae:	189b      	adds	r3, r3, r2
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	2900      	cmp	r1, #0
 8006db6:	d04c      	beq.n	8006e52 <_dtoa_r+0x5ca>
 8006db8:	2000      	movs	r0, #0
 8006dba:	497c      	ldr	r1, [pc, #496]	@ (8006fac <_dtoa_r+0x724>)
 8006dbc:	f7f9 ffa8 	bl	8000d10 <__aeabi_ddiv>
 8006dc0:	0032      	movs	r2, r6
 8006dc2:	003b      	movs	r3, r7
 8006dc4:	f7fa fec4 	bl	8001b50 <__aeabi_dsub>
 8006dc8:	9a08      	ldr	r2, [sp, #32]
 8006dca:	0006      	movs	r6, r0
 8006dcc:	4694      	mov	ip, r2
 8006dce:	000f      	movs	r7, r1
 8006dd0:	9b08      	ldr	r3, [sp, #32]
 8006dd2:	9316      	str	r3, [sp, #88]	@ 0x58
 8006dd4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006dd6:	4463      	add	r3, ip
 8006dd8:	9311      	str	r3, [sp, #68]	@ 0x44
 8006dda:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006ddc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006dde:	f7fb fae3 	bl	80023a8 <__aeabi_d2iz>
 8006de2:	0005      	movs	r5, r0
 8006de4:	f7fb fb1c 	bl	8002420 <__aeabi_i2d>
 8006de8:	0002      	movs	r2, r0
 8006dea:	000b      	movs	r3, r1
 8006dec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006dee:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006df0:	f7fa feae 	bl	8001b50 <__aeabi_dsub>
 8006df4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006df6:	3530      	adds	r5, #48	@ 0x30
 8006df8:	1c5c      	adds	r4, r3, #1
 8006dfa:	701d      	strb	r5, [r3, #0]
 8006dfc:	0032      	movs	r2, r6
 8006dfe:	003b      	movs	r3, r7
 8006e00:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e02:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006e04:	f7f9 fb28 	bl	8000458 <__aeabi_dcmplt>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	d16b      	bne.n	8006ee4 <_dtoa_r+0x65c>
 8006e0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e10:	2000      	movs	r0, #0
 8006e12:	4961      	ldr	r1, [pc, #388]	@ (8006f98 <_dtoa_r+0x710>)
 8006e14:	f7fa fe9c 	bl	8001b50 <__aeabi_dsub>
 8006e18:	0032      	movs	r2, r6
 8006e1a:	003b      	movs	r3, r7
 8006e1c:	f7f9 fb1c 	bl	8000458 <__aeabi_dcmplt>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	d000      	beq.n	8006e26 <_dtoa_r+0x59e>
 8006e24:	e0c6      	b.n	8006fb4 <_dtoa_r+0x72c>
 8006e26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e28:	42a3      	cmp	r3, r4
 8006e2a:	d100      	bne.n	8006e2e <_dtoa_r+0x5a6>
 8006e2c:	e765      	b.n	8006cfa <_dtoa_r+0x472>
 8006e2e:	2200      	movs	r2, #0
 8006e30:	0030      	movs	r0, r6
 8006e32:	0039      	movs	r1, r7
 8006e34:	4b59      	ldr	r3, [pc, #356]	@ (8006f9c <_dtoa_r+0x714>)
 8006e36:	f7fa fba5 	bl	8001584 <__aeabi_dmul>
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	0006      	movs	r6, r0
 8006e3e:	000f      	movs	r7, r1
 8006e40:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006e42:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e44:	4b55      	ldr	r3, [pc, #340]	@ (8006f9c <_dtoa_r+0x714>)
 8006e46:	f7fa fb9d 	bl	8001584 <__aeabi_dmul>
 8006e4a:	9416      	str	r4, [sp, #88]	@ 0x58
 8006e4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e4e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006e50:	e7c3      	b.n	8006dda <_dtoa_r+0x552>
 8006e52:	0030      	movs	r0, r6
 8006e54:	0039      	movs	r1, r7
 8006e56:	f7fa fb95 	bl	8001584 <__aeabi_dmul>
 8006e5a:	9d08      	ldr	r5, [sp, #32]
 8006e5c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006e5e:	002b      	movs	r3, r5
 8006e60:	4694      	mov	ip, r2
 8006e62:	9016      	str	r0, [sp, #88]	@ 0x58
 8006e64:	9117      	str	r1, [sp, #92]	@ 0x5c
 8006e66:	4463      	add	r3, ip
 8006e68:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e6a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006e6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e6e:	f7fb fa9b 	bl	80023a8 <__aeabi_d2iz>
 8006e72:	0004      	movs	r4, r0
 8006e74:	f7fb fad4 	bl	8002420 <__aeabi_i2d>
 8006e78:	000b      	movs	r3, r1
 8006e7a:	0002      	movs	r2, r0
 8006e7c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006e7e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006e80:	f7fa fe66 	bl	8001b50 <__aeabi_dsub>
 8006e84:	3430      	adds	r4, #48	@ 0x30
 8006e86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e88:	702c      	strb	r4, [r5, #0]
 8006e8a:	3501      	adds	r5, #1
 8006e8c:	0006      	movs	r6, r0
 8006e8e:	000f      	movs	r7, r1
 8006e90:	42ab      	cmp	r3, r5
 8006e92:	d12a      	bne.n	8006eea <_dtoa_r+0x662>
 8006e94:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8006e96:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8006e98:	9b08      	ldr	r3, [sp, #32]
 8006e9a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8006e9c:	469c      	mov	ip, r3
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	4b42      	ldr	r3, [pc, #264]	@ (8006fac <_dtoa_r+0x724>)
 8006ea2:	4464      	add	r4, ip
 8006ea4:	f7f9 fb6e 	bl	8000584 <__aeabi_dadd>
 8006ea8:	0002      	movs	r2, r0
 8006eaa:	000b      	movs	r3, r1
 8006eac:	0030      	movs	r0, r6
 8006eae:	0039      	movs	r1, r7
 8006eb0:	f7f9 fae6 	bl	8000480 <__aeabi_dcmpgt>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d000      	beq.n	8006eba <_dtoa_r+0x632>
 8006eb8:	e07c      	b.n	8006fb4 <_dtoa_r+0x72c>
 8006eba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006ebc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	493a      	ldr	r1, [pc, #232]	@ (8006fac <_dtoa_r+0x724>)
 8006ec2:	f7fa fe45 	bl	8001b50 <__aeabi_dsub>
 8006ec6:	0002      	movs	r2, r0
 8006ec8:	000b      	movs	r3, r1
 8006eca:	0030      	movs	r0, r6
 8006ecc:	0039      	movs	r1, r7
 8006ece:	f7f9 fac3 	bl	8000458 <__aeabi_dcmplt>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d100      	bne.n	8006ed8 <_dtoa_r+0x650>
 8006ed6:	e710      	b.n	8006cfa <_dtoa_r+0x472>
 8006ed8:	0023      	movs	r3, r4
 8006eda:	3c01      	subs	r4, #1
 8006edc:	7822      	ldrb	r2, [r4, #0]
 8006ede:	2a30      	cmp	r2, #48	@ 0x30
 8006ee0:	d0fa      	beq.n	8006ed8 <_dtoa_r+0x650>
 8006ee2:	001c      	movs	r4, r3
 8006ee4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ee6:	9304      	str	r3, [sp, #16]
 8006ee8:	e042      	b.n	8006f70 <_dtoa_r+0x6e8>
 8006eea:	2200      	movs	r2, #0
 8006eec:	4b2b      	ldr	r3, [pc, #172]	@ (8006f9c <_dtoa_r+0x714>)
 8006eee:	f7fa fb49 	bl	8001584 <__aeabi_dmul>
 8006ef2:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ef4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006ef6:	e7b8      	b.n	8006e6a <_dtoa_r+0x5e2>
 8006ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006efa:	9d08      	ldr	r5, [sp, #32]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	195b      	adds	r3, r3, r5
 8006f00:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006f02:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006f04:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f06:	9a06      	ldr	r2, [sp, #24]
 8006f08:	9b07      	ldr	r3, [sp, #28]
 8006f0a:	0030      	movs	r0, r6
 8006f0c:	0039      	movs	r1, r7
 8006f0e:	f7f9 feff 	bl	8000d10 <__aeabi_ddiv>
 8006f12:	f7fb fa49 	bl	80023a8 <__aeabi_d2iz>
 8006f16:	9009      	str	r0, [sp, #36]	@ 0x24
 8006f18:	f7fb fa82 	bl	8002420 <__aeabi_i2d>
 8006f1c:	9a06      	ldr	r2, [sp, #24]
 8006f1e:	9b07      	ldr	r3, [sp, #28]
 8006f20:	f7fa fb30 	bl	8001584 <__aeabi_dmul>
 8006f24:	0002      	movs	r2, r0
 8006f26:	000b      	movs	r3, r1
 8006f28:	0030      	movs	r0, r6
 8006f2a:	0039      	movs	r1, r7
 8006f2c:	f7fa fe10 	bl	8001b50 <__aeabi_dsub>
 8006f30:	002b      	movs	r3, r5
 8006f32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f34:	3501      	adds	r5, #1
 8006f36:	3230      	adds	r2, #48	@ 0x30
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f3c:	002c      	movs	r4, r5
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d14b      	bne.n	8006fda <_dtoa_r+0x752>
 8006f42:	0002      	movs	r2, r0
 8006f44:	000b      	movs	r3, r1
 8006f46:	f7f9 fb1d 	bl	8000584 <__aeabi_dadd>
 8006f4a:	9a06      	ldr	r2, [sp, #24]
 8006f4c:	9b07      	ldr	r3, [sp, #28]
 8006f4e:	0006      	movs	r6, r0
 8006f50:	000f      	movs	r7, r1
 8006f52:	f7f9 fa95 	bl	8000480 <__aeabi_dcmpgt>
 8006f56:	2800      	cmp	r0, #0
 8006f58:	d12a      	bne.n	8006fb0 <_dtoa_r+0x728>
 8006f5a:	9a06      	ldr	r2, [sp, #24]
 8006f5c:	9b07      	ldr	r3, [sp, #28]
 8006f5e:	0030      	movs	r0, r6
 8006f60:	0039      	movs	r1, r7
 8006f62:	f7f9 fa73 	bl	800044c <__aeabi_dcmpeq>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d002      	beq.n	8006f70 <_dtoa_r+0x6e8>
 8006f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f6c:	07dd      	lsls	r5, r3, #31
 8006f6e:	d41f      	bmi.n	8006fb0 <_dtoa_r+0x728>
 8006f70:	9905      	ldr	r1, [sp, #20]
 8006f72:	9803      	ldr	r0, [sp, #12]
 8006f74:	f000 fbc2 	bl	80076fc <_Bfree>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	7023      	strb	r3, [r4, #0]
 8006f7c:	9b04      	ldr	r3, [sp, #16]
 8006f7e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006f80:	3301      	adds	r3, #1
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d100      	bne.n	8006f8c <_dtoa_r+0x704>
 8006f8a:	e4c7      	b.n	800691c <_dtoa_r+0x94>
 8006f8c:	601c      	str	r4, [r3, #0]
 8006f8e:	e4c5      	b.n	800691c <_dtoa_r+0x94>
 8006f90:	0800a130 	.word	0x0800a130
 8006f94:	0800a108 	.word	0x0800a108
 8006f98:	3ff00000 	.word	0x3ff00000
 8006f9c:	40240000 	.word	0x40240000
 8006fa0:	401c0000 	.word	0x401c0000
 8006fa4:	fcc00000 	.word	0xfcc00000
 8006fa8:	40140000 	.word	0x40140000
 8006fac:	3fe00000 	.word	0x3fe00000
 8006fb0:	9b04      	ldr	r3, [sp, #16]
 8006fb2:	930c      	str	r3, [sp, #48]	@ 0x30
 8006fb4:	0023      	movs	r3, r4
 8006fb6:	001c      	movs	r4, r3
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	781a      	ldrb	r2, [r3, #0]
 8006fbc:	2a39      	cmp	r2, #57	@ 0x39
 8006fbe:	d108      	bne.n	8006fd2 <_dtoa_r+0x74a>
 8006fc0:	9a08      	ldr	r2, [sp, #32]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d1f7      	bne.n	8006fb6 <_dtoa_r+0x72e>
 8006fc6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006fc8:	9908      	ldr	r1, [sp, #32]
 8006fca:	3201      	adds	r2, #1
 8006fcc:	920c      	str	r2, [sp, #48]	@ 0x30
 8006fce:	2230      	movs	r2, #48	@ 0x30
 8006fd0:	700a      	strb	r2, [r1, #0]
 8006fd2:	781a      	ldrb	r2, [r3, #0]
 8006fd4:	3201      	adds	r2, #1
 8006fd6:	701a      	strb	r2, [r3, #0]
 8006fd8:	e784      	b.n	8006ee4 <_dtoa_r+0x65c>
 8006fda:	2200      	movs	r2, #0
 8006fdc:	4bc6      	ldr	r3, [pc, #792]	@ (80072f8 <_dtoa_r+0xa70>)
 8006fde:	f7fa fad1 	bl	8001584 <__aeabi_dmul>
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	0006      	movs	r6, r0
 8006fe8:	000f      	movs	r7, r1
 8006fea:	f7f9 fa2f 	bl	800044c <__aeabi_dcmpeq>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d089      	beq.n	8006f06 <_dtoa_r+0x67e>
 8006ff2:	e7bd      	b.n	8006f70 <_dtoa_r+0x6e8>
 8006ff4:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8006ff6:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8006ff8:	9c06      	ldr	r4, [sp, #24]
 8006ffa:	2f00      	cmp	r7, #0
 8006ffc:	d014      	beq.n	8007028 <_dtoa_r+0x7a0>
 8006ffe:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007000:	2a01      	cmp	r2, #1
 8007002:	dd00      	ble.n	8007006 <_dtoa_r+0x77e>
 8007004:	e0e4      	b.n	80071d0 <_dtoa_r+0x948>
 8007006:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007008:	2a00      	cmp	r2, #0
 800700a:	d100      	bne.n	800700e <_dtoa_r+0x786>
 800700c:	e0da      	b.n	80071c4 <_dtoa_r+0x93c>
 800700e:	4abb      	ldr	r2, [pc, #748]	@ (80072fc <_dtoa_r+0xa74>)
 8007010:	189b      	adds	r3, r3, r2
 8007012:	9a06      	ldr	r2, [sp, #24]
 8007014:	2101      	movs	r1, #1
 8007016:	18d2      	adds	r2, r2, r3
 8007018:	9206      	str	r2, [sp, #24]
 800701a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800701c:	9803      	ldr	r0, [sp, #12]
 800701e:	18d3      	adds	r3, r2, r3
 8007020:	930d      	str	r3, [sp, #52]	@ 0x34
 8007022:	f000 fc6f 	bl	8007904 <__i2b>
 8007026:	0007      	movs	r7, r0
 8007028:	2c00      	cmp	r4, #0
 800702a:	d00e      	beq.n	800704a <_dtoa_r+0x7c2>
 800702c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800702e:	2b00      	cmp	r3, #0
 8007030:	dd0b      	ble.n	800704a <_dtoa_r+0x7c2>
 8007032:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007034:	0023      	movs	r3, r4
 8007036:	4294      	cmp	r4, r2
 8007038:	dd00      	ble.n	800703c <_dtoa_r+0x7b4>
 800703a:	0013      	movs	r3, r2
 800703c:	9a06      	ldr	r2, [sp, #24]
 800703e:	1ae4      	subs	r4, r4, r3
 8007040:	1ad2      	subs	r2, r2, r3
 8007042:	9206      	str	r2, [sp, #24]
 8007044:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	930d      	str	r3, [sp, #52]	@ 0x34
 800704a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800704c:	2b00      	cmp	r3, #0
 800704e:	d021      	beq.n	8007094 <_dtoa_r+0x80c>
 8007050:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007052:	2b00      	cmp	r3, #0
 8007054:	d100      	bne.n	8007058 <_dtoa_r+0x7d0>
 8007056:	e0d3      	b.n	8007200 <_dtoa_r+0x978>
 8007058:	9e05      	ldr	r6, [sp, #20]
 800705a:	2d00      	cmp	r5, #0
 800705c:	d014      	beq.n	8007088 <_dtoa_r+0x800>
 800705e:	0039      	movs	r1, r7
 8007060:	002a      	movs	r2, r5
 8007062:	9803      	ldr	r0, [sp, #12]
 8007064:	f000 fd10 	bl	8007a88 <__pow5mult>
 8007068:	9a05      	ldr	r2, [sp, #20]
 800706a:	0001      	movs	r1, r0
 800706c:	0007      	movs	r7, r0
 800706e:	9803      	ldr	r0, [sp, #12]
 8007070:	f000 fc60 	bl	8007934 <__multiply>
 8007074:	0006      	movs	r6, r0
 8007076:	9905      	ldr	r1, [sp, #20]
 8007078:	9803      	ldr	r0, [sp, #12]
 800707a:	f000 fb3f 	bl	80076fc <_Bfree>
 800707e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007080:	9605      	str	r6, [sp, #20]
 8007082:	1b5b      	subs	r3, r3, r5
 8007084:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007086:	d005      	beq.n	8007094 <_dtoa_r+0x80c>
 8007088:	0031      	movs	r1, r6
 800708a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800708c:	9803      	ldr	r0, [sp, #12]
 800708e:	f000 fcfb 	bl	8007a88 <__pow5mult>
 8007092:	9005      	str	r0, [sp, #20]
 8007094:	2101      	movs	r1, #1
 8007096:	9803      	ldr	r0, [sp, #12]
 8007098:	f000 fc34 	bl	8007904 <__i2b>
 800709c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800709e:	0006      	movs	r6, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d100      	bne.n	80070a6 <_dtoa_r+0x81e>
 80070a4:	e1bc      	b.n	8007420 <_dtoa_r+0xb98>
 80070a6:	001a      	movs	r2, r3
 80070a8:	0001      	movs	r1, r0
 80070aa:	9803      	ldr	r0, [sp, #12]
 80070ac:	f000 fcec 	bl	8007a88 <__pow5mult>
 80070b0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80070b2:	0006      	movs	r6, r0
 80070b4:	2500      	movs	r5, #0
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	dc16      	bgt.n	80070e8 <_dtoa_r+0x860>
 80070ba:	2500      	movs	r5, #0
 80070bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070be:	42ab      	cmp	r3, r5
 80070c0:	d10e      	bne.n	80070e0 <_dtoa_r+0x858>
 80070c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070c4:	031b      	lsls	r3, r3, #12
 80070c6:	42ab      	cmp	r3, r5
 80070c8:	d10a      	bne.n	80070e0 <_dtoa_r+0x858>
 80070ca:	4b8d      	ldr	r3, [pc, #564]	@ (8007300 <_dtoa_r+0xa78>)
 80070cc:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80070ce:	4213      	tst	r3, r2
 80070d0:	d006      	beq.n	80070e0 <_dtoa_r+0x858>
 80070d2:	9b06      	ldr	r3, [sp, #24]
 80070d4:	3501      	adds	r5, #1
 80070d6:	3301      	adds	r3, #1
 80070d8:	9306      	str	r3, [sp, #24]
 80070da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070dc:	3301      	adds	r3, #1
 80070de:	930d      	str	r3, [sp, #52]	@ 0x34
 80070e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80070e2:	2001      	movs	r0, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d008      	beq.n	80070fa <_dtoa_r+0x872>
 80070e8:	6933      	ldr	r3, [r6, #16]
 80070ea:	3303      	adds	r3, #3
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	18f3      	adds	r3, r6, r3
 80070f0:	6858      	ldr	r0, [r3, #4]
 80070f2:	f000 fbb7 	bl	8007864 <__hi0bits>
 80070f6:	2320      	movs	r3, #32
 80070f8:	1a18      	subs	r0, r3, r0
 80070fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070fc:	1818      	adds	r0, r3, r0
 80070fe:	0002      	movs	r2, r0
 8007100:	231f      	movs	r3, #31
 8007102:	401a      	ands	r2, r3
 8007104:	4218      	tst	r0, r3
 8007106:	d100      	bne.n	800710a <_dtoa_r+0x882>
 8007108:	e081      	b.n	800720e <_dtoa_r+0x986>
 800710a:	3301      	adds	r3, #1
 800710c:	1a9b      	subs	r3, r3, r2
 800710e:	2b04      	cmp	r3, #4
 8007110:	dd79      	ble.n	8007206 <_dtoa_r+0x97e>
 8007112:	231c      	movs	r3, #28
 8007114:	1a9b      	subs	r3, r3, r2
 8007116:	9a06      	ldr	r2, [sp, #24]
 8007118:	18e4      	adds	r4, r4, r3
 800711a:	18d2      	adds	r2, r2, r3
 800711c:	9206      	str	r2, [sp, #24]
 800711e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007120:	18d3      	adds	r3, r2, r3
 8007122:	930d      	str	r3, [sp, #52]	@ 0x34
 8007124:	9b06      	ldr	r3, [sp, #24]
 8007126:	2b00      	cmp	r3, #0
 8007128:	dd05      	ble.n	8007136 <_dtoa_r+0x8ae>
 800712a:	001a      	movs	r2, r3
 800712c:	9905      	ldr	r1, [sp, #20]
 800712e:	9803      	ldr	r0, [sp, #12]
 8007130:	f000 fd06 	bl	8007b40 <__lshift>
 8007134:	9005      	str	r0, [sp, #20]
 8007136:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007138:	2b00      	cmp	r3, #0
 800713a:	dd05      	ble.n	8007148 <_dtoa_r+0x8c0>
 800713c:	0031      	movs	r1, r6
 800713e:	001a      	movs	r2, r3
 8007140:	9803      	ldr	r0, [sp, #12]
 8007142:	f000 fcfd 	bl	8007b40 <__lshift>
 8007146:	0006      	movs	r6, r0
 8007148:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800714a:	2b00      	cmp	r3, #0
 800714c:	d061      	beq.n	8007212 <_dtoa_r+0x98a>
 800714e:	0031      	movs	r1, r6
 8007150:	9805      	ldr	r0, [sp, #20]
 8007152:	f000 fd61 	bl	8007c18 <__mcmp>
 8007156:	2800      	cmp	r0, #0
 8007158:	da5b      	bge.n	8007212 <_dtoa_r+0x98a>
 800715a:	9b04      	ldr	r3, [sp, #16]
 800715c:	220a      	movs	r2, #10
 800715e:	3b01      	subs	r3, #1
 8007160:	930c      	str	r3, [sp, #48]	@ 0x30
 8007162:	9905      	ldr	r1, [sp, #20]
 8007164:	2300      	movs	r3, #0
 8007166:	9803      	ldr	r0, [sp, #12]
 8007168:	f000 faec 	bl	8007744 <__multadd>
 800716c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800716e:	9005      	str	r0, [sp, #20]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d100      	bne.n	8007176 <_dtoa_r+0x8ee>
 8007174:	e15b      	b.n	800742e <_dtoa_r+0xba6>
 8007176:	2300      	movs	r3, #0
 8007178:	0039      	movs	r1, r7
 800717a:	220a      	movs	r2, #10
 800717c:	9803      	ldr	r0, [sp, #12]
 800717e:	f000 fae1 	bl	8007744 <__multadd>
 8007182:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007184:	0007      	movs	r7, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	dc4d      	bgt.n	8007226 <_dtoa_r+0x99e>
 800718a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800718c:	2b02      	cmp	r3, #2
 800718e:	dd46      	ble.n	800721e <_dtoa_r+0x996>
 8007190:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007192:	2b00      	cmp	r3, #0
 8007194:	d000      	beq.n	8007198 <_dtoa_r+0x910>
 8007196:	e5db      	b.n	8006d50 <_dtoa_r+0x4c8>
 8007198:	0031      	movs	r1, r6
 800719a:	2205      	movs	r2, #5
 800719c:	9803      	ldr	r0, [sp, #12]
 800719e:	f000 fad1 	bl	8007744 <__multadd>
 80071a2:	0006      	movs	r6, r0
 80071a4:	0001      	movs	r1, r0
 80071a6:	9805      	ldr	r0, [sp, #20]
 80071a8:	f000 fd36 	bl	8007c18 <__mcmp>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	dc00      	bgt.n	80071b2 <_dtoa_r+0x92a>
 80071b0:	e5ce      	b.n	8006d50 <_dtoa_r+0x4c8>
 80071b2:	9b08      	ldr	r3, [sp, #32]
 80071b4:	9a08      	ldr	r2, [sp, #32]
 80071b6:	1c5c      	adds	r4, r3, #1
 80071b8:	2331      	movs	r3, #49	@ 0x31
 80071ba:	7013      	strb	r3, [r2, #0]
 80071bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80071be:	3301      	adds	r3, #1
 80071c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80071c2:	e5c9      	b.n	8006d58 <_dtoa_r+0x4d0>
 80071c4:	2336      	movs	r3, #54	@ 0x36
 80071c6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80071c8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80071ca:	1a9b      	subs	r3, r3, r2
 80071cc:	9c06      	ldr	r4, [sp, #24]
 80071ce:	e720      	b.n	8007012 <_dtoa_r+0x78a>
 80071d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d2:	1e5d      	subs	r5, r3, #1
 80071d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071d6:	42ab      	cmp	r3, r5
 80071d8:	db08      	blt.n	80071ec <_dtoa_r+0x964>
 80071da:	1b5d      	subs	r5, r3, r5
 80071dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071de:	2b00      	cmp	r3, #0
 80071e0:	daf4      	bge.n	80071cc <_dtoa_r+0x944>
 80071e2:	9b06      	ldr	r3, [sp, #24]
 80071e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071e6:	1a9c      	subs	r4, r3, r2
 80071e8:	2300      	movs	r3, #0
 80071ea:	e712      	b.n	8007012 <_dtoa_r+0x78a>
 80071ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80071f0:	1aeb      	subs	r3, r5, r3
 80071f2:	18d3      	adds	r3, r2, r3
 80071f4:	9314      	str	r3, [sp, #80]	@ 0x50
 80071f6:	950f      	str	r5, [sp, #60]	@ 0x3c
 80071f8:	9c06      	ldr	r4, [sp, #24]
 80071fa:	2500      	movs	r5, #0
 80071fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071fe:	e708      	b.n	8007012 <_dtoa_r+0x78a>
 8007200:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007202:	9905      	ldr	r1, [sp, #20]
 8007204:	e742      	b.n	800708c <_dtoa_r+0x804>
 8007206:	2b04      	cmp	r3, #4
 8007208:	d08c      	beq.n	8007124 <_dtoa_r+0x89c>
 800720a:	331c      	adds	r3, #28
 800720c:	e783      	b.n	8007116 <_dtoa_r+0x88e>
 800720e:	0013      	movs	r3, r2
 8007210:	e7fb      	b.n	800720a <_dtoa_r+0x982>
 8007212:	9b04      	ldr	r3, [sp, #16]
 8007214:	930c      	str	r3, [sp, #48]	@ 0x30
 8007216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007218:	930e      	str	r3, [sp, #56]	@ 0x38
 800721a:	2b00      	cmp	r3, #0
 800721c:	ddb5      	ble.n	800718a <_dtoa_r+0x902>
 800721e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007220:	2b00      	cmp	r3, #0
 8007222:	d100      	bne.n	8007226 <_dtoa_r+0x99e>
 8007224:	e107      	b.n	8007436 <_dtoa_r+0xbae>
 8007226:	2c00      	cmp	r4, #0
 8007228:	dd05      	ble.n	8007236 <_dtoa_r+0x9ae>
 800722a:	0039      	movs	r1, r7
 800722c:	0022      	movs	r2, r4
 800722e:	9803      	ldr	r0, [sp, #12]
 8007230:	f000 fc86 	bl	8007b40 <__lshift>
 8007234:	0007      	movs	r7, r0
 8007236:	9704      	str	r7, [sp, #16]
 8007238:	2d00      	cmp	r5, #0
 800723a:	d020      	beq.n	800727e <_dtoa_r+0x9f6>
 800723c:	6879      	ldr	r1, [r7, #4]
 800723e:	9803      	ldr	r0, [sp, #12]
 8007240:	f000 fa18 	bl	8007674 <_Balloc>
 8007244:	1e04      	subs	r4, r0, #0
 8007246:	d10c      	bne.n	8007262 <_dtoa_r+0x9da>
 8007248:	0022      	movs	r2, r4
 800724a:	4b2e      	ldr	r3, [pc, #184]	@ (8007304 <_dtoa_r+0xa7c>)
 800724c:	482e      	ldr	r0, [pc, #184]	@ (8007308 <_dtoa_r+0xa80>)
 800724e:	492f      	ldr	r1, [pc, #188]	@ (800730c <_dtoa_r+0xa84>)
 8007250:	f7ff fb2f 	bl	80068b2 <_dtoa_r+0x2a>
 8007254:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8007256:	0037      	movs	r7, r6
 8007258:	e7ab      	b.n	80071b2 <_dtoa_r+0x92a>
 800725a:	9b04      	ldr	r3, [sp, #16]
 800725c:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800725e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007260:	e7f9      	b.n	8007256 <_dtoa_r+0x9ce>
 8007262:	0039      	movs	r1, r7
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	310c      	adds	r1, #12
 8007268:	3202      	adds	r2, #2
 800726a:	0092      	lsls	r2, r2, #2
 800726c:	300c      	adds	r0, #12
 800726e:	f002 f843 	bl	80092f8 <memcpy>
 8007272:	2201      	movs	r2, #1
 8007274:	0021      	movs	r1, r4
 8007276:	9803      	ldr	r0, [sp, #12]
 8007278:	f000 fc62 	bl	8007b40 <__lshift>
 800727c:	9004      	str	r0, [sp, #16]
 800727e:	9b08      	ldr	r3, [sp, #32]
 8007280:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007282:	9306      	str	r3, [sp, #24]
 8007284:	3b01      	subs	r3, #1
 8007286:	189b      	adds	r3, r3, r2
 8007288:	2201      	movs	r2, #1
 800728a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800728c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800728e:	4013      	ands	r3, r2
 8007290:	930e      	str	r3, [sp, #56]	@ 0x38
 8007292:	0031      	movs	r1, r6
 8007294:	9805      	ldr	r0, [sp, #20]
 8007296:	f7ff fa71 	bl	800677c <quorem>
 800729a:	0039      	movs	r1, r7
 800729c:	0005      	movs	r5, r0
 800729e:	900a      	str	r0, [sp, #40]	@ 0x28
 80072a0:	9805      	ldr	r0, [sp, #20]
 80072a2:	f000 fcb9 	bl	8007c18 <__mcmp>
 80072a6:	9a04      	ldr	r2, [sp, #16]
 80072a8:	900d      	str	r0, [sp, #52]	@ 0x34
 80072aa:	0031      	movs	r1, r6
 80072ac:	9803      	ldr	r0, [sp, #12]
 80072ae:	f000 fccf 	bl	8007c50 <__mdiff>
 80072b2:	2201      	movs	r2, #1
 80072b4:	68c3      	ldr	r3, [r0, #12]
 80072b6:	0004      	movs	r4, r0
 80072b8:	3530      	adds	r5, #48	@ 0x30
 80072ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d104      	bne.n	80072ca <_dtoa_r+0xa42>
 80072c0:	0001      	movs	r1, r0
 80072c2:	9805      	ldr	r0, [sp, #20]
 80072c4:	f000 fca8 	bl	8007c18 <__mcmp>
 80072c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80072ca:	0021      	movs	r1, r4
 80072cc:	9803      	ldr	r0, [sp, #12]
 80072ce:	f000 fa15 	bl	80076fc <_Bfree>
 80072d2:	9b06      	ldr	r3, [sp, #24]
 80072d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80072d6:	1c5c      	adds	r4, r3, #1
 80072d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072da:	4313      	orrs	r3, r2
 80072dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80072de:	4313      	orrs	r3, r2
 80072e0:	d116      	bne.n	8007310 <_dtoa_r+0xa88>
 80072e2:	2d39      	cmp	r5, #57	@ 0x39
 80072e4:	d02f      	beq.n	8007346 <_dtoa_r+0xabe>
 80072e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	dd01      	ble.n	80072f0 <_dtoa_r+0xa68>
 80072ec:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80072ee:	3531      	adds	r5, #49	@ 0x31
 80072f0:	9b06      	ldr	r3, [sp, #24]
 80072f2:	701d      	strb	r5, [r3, #0]
 80072f4:	e532      	b.n	8006d5c <_dtoa_r+0x4d4>
 80072f6:	46c0      	nop			@ (mov r8, r8)
 80072f8:	40240000 	.word	0x40240000
 80072fc:	00000433 	.word	0x00000433
 8007300:	7ff00000 	.word	0x7ff00000
 8007304:	08009fd9 	.word	0x08009fd9
 8007308:	08009f81 	.word	0x08009f81
 800730c:	000002ef 	.word	0x000002ef
 8007310:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007312:	2b00      	cmp	r3, #0
 8007314:	db04      	blt.n	8007320 <_dtoa_r+0xa98>
 8007316:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007318:	4313      	orrs	r3, r2
 800731a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800731c:	4313      	orrs	r3, r2
 800731e:	d11e      	bne.n	800735e <_dtoa_r+0xad6>
 8007320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007322:	2b00      	cmp	r3, #0
 8007324:	dde4      	ble.n	80072f0 <_dtoa_r+0xa68>
 8007326:	9905      	ldr	r1, [sp, #20]
 8007328:	2201      	movs	r2, #1
 800732a:	9803      	ldr	r0, [sp, #12]
 800732c:	f000 fc08 	bl	8007b40 <__lshift>
 8007330:	0031      	movs	r1, r6
 8007332:	9005      	str	r0, [sp, #20]
 8007334:	f000 fc70 	bl	8007c18 <__mcmp>
 8007338:	2800      	cmp	r0, #0
 800733a:	dc02      	bgt.n	8007342 <_dtoa_r+0xaba>
 800733c:	d1d8      	bne.n	80072f0 <_dtoa_r+0xa68>
 800733e:	07eb      	lsls	r3, r5, #31
 8007340:	d5d6      	bpl.n	80072f0 <_dtoa_r+0xa68>
 8007342:	2d39      	cmp	r5, #57	@ 0x39
 8007344:	d1d2      	bne.n	80072ec <_dtoa_r+0xa64>
 8007346:	2339      	movs	r3, #57	@ 0x39
 8007348:	9a06      	ldr	r2, [sp, #24]
 800734a:	7013      	strb	r3, [r2, #0]
 800734c:	0023      	movs	r3, r4
 800734e:	001c      	movs	r4, r3
 8007350:	3b01      	subs	r3, #1
 8007352:	781a      	ldrb	r2, [r3, #0]
 8007354:	2a39      	cmp	r2, #57	@ 0x39
 8007356:	d050      	beq.n	80073fa <_dtoa_r+0xb72>
 8007358:	3201      	adds	r2, #1
 800735a:	701a      	strb	r2, [r3, #0]
 800735c:	e4fe      	b.n	8006d5c <_dtoa_r+0x4d4>
 800735e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007360:	2b00      	cmp	r3, #0
 8007362:	dd03      	ble.n	800736c <_dtoa_r+0xae4>
 8007364:	2d39      	cmp	r5, #57	@ 0x39
 8007366:	d0ee      	beq.n	8007346 <_dtoa_r+0xabe>
 8007368:	3501      	adds	r5, #1
 800736a:	e7c1      	b.n	80072f0 <_dtoa_r+0xa68>
 800736c:	9b06      	ldr	r3, [sp, #24]
 800736e:	9a06      	ldr	r2, [sp, #24]
 8007370:	701d      	strb	r5, [r3, #0]
 8007372:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007374:	4293      	cmp	r3, r2
 8007376:	d02b      	beq.n	80073d0 <_dtoa_r+0xb48>
 8007378:	2300      	movs	r3, #0
 800737a:	220a      	movs	r2, #10
 800737c:	9905      	ldr	r1, [sp, #20]
 800737e:	9803      	ldr	r0, [sp, #12]
 8007380:	f000 f9e0 	bl	8007744 <__multadd>
 8007384:	9b04      	ldr	r3, [sp, #16]
 8007386:	9005      	str	r0, [sp, #20]
 8007388:	429f      	cmp	r7, r3
 800738a:	d109      	bne.n	80073a0 <_dtoa_r+0xb18>
 800738c:	0039      	movs	r1, r7
 800738e:	2300      	movs	r3, #0
 8007390:	220a      	movs	r2, #10
 8007392:	9803      	ldr	r0, [sp, #12]
 8007394:	f000 f9d6 	bl	8007744 <__multadd>
 8007398:	0007      	movs	r7, r0
 800739a:	9004      	str	r0, [sp, #16]
 800739c:	9406      	str	r4, [sp, #24]
 800739e:	e778      	b.n	8007292 <_dtoa_r+0xa0a>
 80073a0:	0039      	movs	r1, r7
 80073a2:	2300      	movs	r3, #0
 80073a4:	220a      	movs	r2, #10
 80073a6:	9803      	ldr	r0, [sp, #12]
 80073a8:	f000 f9cc 	bl	8007744 <__multadd>
 80073ac:	2300      	movs	r3, #0
 80073ae:	0007      	movs	r7, r0
 80073b0:	220a      	movs	r2, #10
 80073b2:	9904      	ldr	r1, [sp, #16]
 80073b4:	9803      	ldr	r0, [sp, #12]
 80073b6:	f000 f9c5 	bl	8007744 <__multadd>
 80073ba:	9004      	str	r0, [sp, #16]
 80073bc:	e7ee      	b.n	800739c <_dtoa_r+0xb14>
 80073be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073c0:	2401      	movs	r4, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	dd00      	ble.n	80073c8 <_dtoa_r+0xb40>
 80073c6:	001c      	movs	r4, r3
 80073c8:	9704      	str	r7, [sp, #16]
 80073ca:	2700      	movs	r7, #0
 80073cc:	9b08      	ldr	r3, [sp, #32]
 80073ce:	191c      	adds	r4, r3, r4
 80073d0:	9905      	ldr	r1, [sp, #20]
 80073d2:	2201      	movs	r2, #1
 80073d4:	9803      	ldr	r0, [sp, #12]
 80073d6:	f000 fbb3 	bl	8007b40 <__lshift>
 80073da:	0031      	movs	r1, r6
 80073dc:	9005      	str	r0, [sp, #20]
 80073de:	f000 fc1b 	bl	8007c18 <__mcmp>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	dcb2      	bgt.n	800734c <_dtoa_r+0xac4>
 80073e6:	d101      	bne.n	80073ec <_dtoa_r+0xb64>
 80073e8:	07ed      	lsls	r5, r5, #31
 80073ea:	d4af      	bmi.n	800734c <_dtoa_r+0xac4>
 80073ec:	0023      	movs	r3, r4
 80073ee:	001c      	movs	r4, r3
 80073f0:	3b01      	subs	r3, #1
 80073f2:	781a      	ldrb	r2, [r3, #0]
 80073f4:	2a30      	cmp	r2, #48	@ 0x30
 80073f6:	d0fa      	beq.n	80073ee <_dtoa_r+0xb66>
 80073f8:	e4b0      	b.n	8006d5c <_dtoa_r+0x4d4>
 80073fa:	9a08      	ldr	r2, [sp, #32]
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d1a6      	bne.n	800734e <_dtoa_r+0xac6>
 8007400:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007402:	3301      	adds	r3, #1
 8007404:	930c      	str	r3, [sp, #48]	@ 0x30
 8007406:	2331      	movs	r3, #49	@ 0x31
 8007408:	7013      	strb	r3, [r2, #0]
 800740a:	e4a7      	b.n	8006d5c <_dtoa_r+0x4d4>
 800740c:	4b14      	ldr	r3, [pc, #80]	@ (8007460 <_dtoa_r+0xbd8>)
 800740e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007410:	9308      	str	r3, [sp, #32]
 8007412:	4b14      	ldr	r3, [pc, #80]	@ (8007464 <_dtoa_r+0xbdc>)
 8007414:	2a00      	cmp	r2, #0
 8007416:	d001      	beq.n	800741c <_dtoa_r+0xb94>
 8007418:	f7ff fa7e 	bl	8006918 <_dtoa_r+0x90>
 800741c:	f7ff fa7e 	bl	800691c <_dtoa_r+0x94>
 8007420:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007422:	2b01      	cmp	r3, #1
 8007424:	dc00      	bgt.n	8007428 <_dtoa_r+0xba0>
 8007426:	e648      	b.n	80070ba <_dtoa_r+0x832>
 8007428:	2001      	movs	r0, #1
 800742a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800742c:	e665      	b.n	80070fa <_dtoa_r+0x872>
 800742e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007430:	2b00      	cmp	r3, #0
 8007432:	dc00      	bgt.n	8007436 <_dtoa_r+0xbae>
 8007434:	e6a9      	b.n	800718a <_dtoa_r+0x902>
 8007436:	2400      	movs	r4, #0
 8007438:	0031      	movs	r1, r6
 800743a:	9805      	ldr	r0, [sp, #20]
 800743c:	f7ff f99e 	bl	800677c <quorem>
 8007440:	9b08      	ldr	r3, [sp, #32]
 8007442:	3030      	adds	r0, #48	@ 0x30
 8007444:	5518      	strb	r0, [r3, r4]
 8007446:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007448:	3401      	adds	r4, #1
 800744a:	0005      	movs	r5, r0
 800744c:	42a3      	cmp	r3, r4
 800744e:	ddb6      	ble.n	80073be <_dtoa_r+0xb36>
 8007450:	2300      	movs	r3, #0
 8007452:	220a      	movs	r2, #10
 8007454:	9905      	ldr	r1, [sp, #20]
 8007456:	9803      	ldr	r0, [sp, #12]
 8007458:	f000 f974 	bl	8007744 <__multadd>
 800745c:	9005      	str	r0, [sp, #20]
 800745e:	e7eb      	b.n	8007438 <_dtoa_r+0xbb0>
 8007460:	08009f5d 	.word	0x08009f5d
 8007464:	08009f65 	.word	0x08009f65

08007468 <_free_r>:
 8007468:	b570      	push	{r4, r5, r6, lr}
 800746a:	0005      	movs	r5, r0
 800746c:	1e0c      	subs	r4, r1, #0
 800746e:	d010      	beq.n	8007492 <_free_r+0x2a>
 8007470:	3c04      	subs	r4, #4
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	da00      	bge.n	800747a <_free_r+0x12>
 8007478:	18e4      	adds	r4, r4, r3
 800747a:	0028      	movs	r0, r5
 800747c:	f000 f8ea 	bl	8007654 <__malloc_lock>
 8007480:	4a1d      	ldr	r2, [pc, #116]	@ (80074f8 <_free_r+0x90>)
 8007482:	6813      	ldr	r3, [r2, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d105      	bne.n	8007494 <_free_r+0x2c>
 8007488:	6063      	str	r3, [r4, #4]
 800748a:	6014      	str	r4, [r2, #0]
 800748c:	0028      	movs	r0, r5
 800748e:	f000 f8e9 	bl	8007664 <__malloc_unlock>
 8007492:	bd70      	pop	{r4, r5, r6, pc}
 8007494:	42a3      	cmp	r3, r4
 8007496:	d908      	bls.n	80074aa <_free_r+0x42>
 8007498:	6820      	ldr	r0, [r4, #0]
 800749a:	1821      	adds	r1, r4, r0
 800749c:	428b      	cmp	r3, r1
 800749e:	d1f3      	bne.n	8007488 <_free_r+0x20>
 80074a0:	6819      	ldr	r1, [r3, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	1809      	adds	r1, r1, r0
 80074a6:	6021      	str	r1, [r4, #0]
 80074a8:	e7ee      	b.n	8007488 <_free_r+0x20>
 80074aa:	001a      	movs	r2, r3
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d001      	beq.n	80074b6 <_free_r+0x4e>
 80074b2:	42a3      	cmp	r3, r4
 80074b4:	d9f9      	bls.n	80074aa <_free_r+0x42>
 80074b6:	6811      	ldr	r1, [r2, #0]
 80074b8:	1850      	adds	r0, r2, r1
 80074ba:	42a0      	cmp	r0, r4
 80074bc:	d10b      	bne.n	80074d6 <_free_r+0x6e>
 80074be:	6820      	ldr	r0, [r4, #0]
 80074c0:	1809      	adds	r1, r1, r0
 80074c2:	1850      	adds	r0, r2, r1
 80074c4:	6011      	str	r1, [r2, #0]
 80074c6:	4283      	cmp	r3, r0
 80074c8:	d1e0      	bne.n	800748c <_free_r+0x24>
 80074ca:	6818      	ldr	r0, [r3, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	1841      	adds	r1, r0, r1
 80074d0:	6011      	str	r1, [r2, #0]
 80074d2:	6053      	str	r3, [r2, #4]
 80074d4:	e7da      	b.n	800748c <_free_r+0x24>
 80074d6:	42a0      	cmp	r0, r4
 80074d8:	d902      	bls.n	80074e0 <_free_r+0x78>
 80074da:	230c      	movs	r3, #12
 80074dc:	602b      	str	r3, [r5, #0]
 80074de:	e7d5      	b.n	800748c <_free_r+0x24>
 80074e0:	6820      	ldr	r0, [r4, #0]
 80074e2:	1821      	adds	r1, r4, r0
 80074e4:	428b      	cmp	r3, r1
 80074e6:	d103      	bne.n	80074f0 <_free_r+0x88>
 80074e8:	6819      	ldr	r1, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	1809      	adds	r1, r1, r0
 80074ee:	6021      	str	r1, [r4, #0]
 80074f0:	6063      	str	r3, [r4, #4]
 80074f2:	6054      	str	r4, [r2, #4]
 80074f4:	e7ca      	b.n	800748c <_free_r+0x24>
 80074f6:	46c0      	nop			@ (mov r8, r8)
 80074f8:	20000c20 	.word	0x20000c20

080074fc <malloc>:
 80074fc:	b510      	push	{r4, lr}
 80074fe:	4b03      	ldr	r3, [pc, #12]	@ (800750c <malloc+0x10>)
 8007500:	0001      	movs	r1, r0
 8007502:	6818      	ldr	r0, [r3, #0]
 8007504:	f000 f826 	bl	8007554 <_malloc_r>
 8007508:	bd10      	pop	{r4, pc}
 800750a:	46c0      	nop			@ (mov r8, r8)
 800750c:	20000018 	.word	0x20000018

08007510 <sbrk_aligned>:
 8007510:	b570      	push	{r4, r5, r6, lr}
 8007512:	4e0f      	ldr	r6, [pc, #60]	@ (8007550 <sbrk_aligned+0x40>)
 8007514:	000d      	movs	r5, r1
 8007516:	6831      	ldr	r1, [r6, #0]
 8007518:	0004      	movs	r4, r0
 800751a:	2900      	cmp	r1, #0
 800751c:	d102      	bne.n	8007524 <sbrk_aligned+0x14>
 800751e:	f001 fed9 	bl	80092d4 <_sbrk_r>
 8007522:	6030      	str	r0, [r6, #0]
 8007524:	0029      	movs	r1, r5
 8007526:	0020      	movs	r0, r4
 8007528:	f001 fed4 	bl	80092d4 <_sbrk_r>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d103      	bne.n	8007538 <sbrk_aligned+0x28>
 8007530:	2501      	movs	r5, #1
 8007532:	426d      	negs	r5, r5
 8007534:	0028      	movs	r0, r5
 8007536:	bd70      	pop	{r4, r5, r6, pc}
 8007538:	2303      	movs	r3, #3
 800753a:	1cc5      	adds	r5, r0, #3
 800753c:	439d      	bics	r5, r3
 800753e:	42a8      	cmp	r0, r5
 8007540:	d0f8      	beq.n	8007534 <sbrk_aligned+0x24>
 8007542:	1a29      	subs	r1, r5, r0
 8007544:	0020      	movs	r0, r4
 8007546:	f001 fec5 	bl	80092d4 <_sbrk_r>
 800754a:	3001      	adds	r0, #1
 800754c:	d1f2      	bne.n	8007534 <sbrk_aligned+0x24>
 800754e:	e7ef      	b.n	8007530 <sbrk_aligned+0x20>
 8007550:	20000c1c 	.word	0x20000c1c

08007554 <_malloc_r>:
 8007554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007556:	2203      	movs	r2, #3
 8007558:	1ccb      	adds	r3, r1, #3
 800755a:	4393      	bics	r3, r2
 800755c:	3308      	adds	r3, #8
 800755e:	0005      	movs	r5, r0
 8007560:	001f      	movs	r7, r3
 8007562:	2b0c      	cmp	r3, #12
 8007564:	d234      	bcs.n	80075d0 <_malloc_r+0x7c>
 8007566:	270c      	movs	r7, #12
 8007568:	42b9      	cmp	r1, r7
 800756a:	d833      	bhi.n	80075d4 <_malloc_r+0x80>
 800756c:	0028      	movs	r0, r5
 800756e:	f000 f871 	bl	8007654 <__malloc_lock>
 8007572:	4e37      	ldr	r6, [pc, #220]	@ (8007650 <_malloc_r+0xfc>)
 8007574:	6833      	ldr	r3, [r6, #0]
 8007576:	001c      	movs	r4, r3
 8007578:	2c00      	cmp	r4, #0
 800757a:	d12f      	bne.n	80075dc <_malloc_r+0x88>
 800757c:	0039      	movs	r1, r7
 800757e:	0028      	movs	r0, r5
 8007580:	f7ff ffc6 	bl	8007510 <sbrk_aligned>
 8007584:	0004      	movs	r4, r0
 8007586:	1c43      	adds	r3, r0, #1
 8007588:	d15f      	bne.n	800764a <_malloc_r+0xf6>
 800758a:	6834      	ldr	r4, [r6, #0]
 800758c:	9400      	str	r4, [sp, #0]
 800758e:	9b00      	ldr	r3, [sp, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d14a      	bne.n	800762a <_malloc_r+0xd6>
 8007594:	2c00      	cmp	r4, #0
 8007596:	d052      	beq.n	800763e <_malloc_r+0xea>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	0028      	movs	r0, r5
 800759c:	18e3      	adds	r3, r4, r3
 800759e:	9900      	ldr	r1, [sp, #0]
 80075a0:	9301      	str	r3, [sp, #4]
 80075a2:	f001 fe97 	bl	80092d4 <_sbrk_r>
 80075a6:	9b01      	ldr	r3, [sp, #4]
 80075a8:	4283      	cmp	r3, r0
 80075aa:	d148      	bne.n	800763e <_malloc_r+0xea>
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	0028      	movs	r0, r5
 80075b0:	1aff      	subs	r7, r7, r3
 80075b2:	0039      	movs	r1, r7
 80075b4:	f7ff ffac 	bl	8007510 <sbrk_aligned>
 80075b8:	3001      	adds	r0, #1
 80075ba:	d040      	beq.n	800763e <_malloc_r+0xea>
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	19db      	adds	r3, r3, r7
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	6833      	ldr	r3, [r6, #0]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	2a00      	cmp	r2, #0
 80075c8:	d133      	bne.n	8007632 <_malloc_r+0xde>
 80075ca:	9b00      	ldr	r3, [sp, #0]
 80075cc:	6033      	str	r3, [r6, #0]
 80075ce:	e019      	b.n	8007604 <_malloc_r+0xb0>
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	dac9      	bge.n	8007568 <_malloc_r+0x14>
 80075d4:	230c      	movs	r3, #12
 80075d6:	602b      	str	r3, [r5, #0]
 80075d8:	2000      	movs	r0, #0
 80075da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075dc:	6821      	ldr	r1, [r4, #0]
 80075de:	1bc9      	subs	r1, r1, r7
 80075e0:	d420      	bmi.n	8007624 <_malloc_r+0xd0>
 80075e2:	290b      	cmp	r1, #11
 80075e4:	d90a      	bls.n	80075fc <_malloc_r+0xa8>
 80075e6:	19e2      	adds	r2, r4, r7
 80075e8:	6027      	str	r7, [r4, #0]
 80075ea:	42a3      	cmp	r3, r4
 80075ec:	d104      	bne.n	80075f8 <_malloc_r+0xa4>
 80075ee:	6032      	str	r2, [r6, #0]
 80075f0:	6863      	ldr	r3, [r4, #4]
 80075f2:	6011      	str	r1, [r2, #0]
 80075f4:	6053      	str	r3, [r2, #4]
 80075f6:	e005      	b.n	8007604 <_malloc_r+0xb0>
 80075f8:	605a      	str	r2, [r3, #4]
 80075fa:	e7f9      	b.n	80075f0 <_malloc_r+0x9c>
 80075fc:	6862      	ldr	r2, [r4, #4]
 80075fe:	42a3      	cmp	r3, r4
 8007600:	d10e      	bne.n	8007620 <_malloc_r+0xcc>
 8007602:	6032      	str	r2, [r6, #0]
 8007604:	0028      	movs	r0, r5
 8007606:	f000 f82d 	bl	8007664 <__malloc_unlock>
 800760a:	0020      	movs	r0, r4
 800760c:	2207      	movs	r2, #7
 800760e:	300b      	adds	r0, #11
 8007610:	1d23      	adds	r3, r4, #4
 8007612:	4390      	bics	r0, r2
 8007614:	1ac2      	subs	r2, r0, r3
 8007616:	4298      	cmp	r0, r3
 8007618:	d0df      	beq.n	80075da <_malloc_r+0x86>
 800761a:	1a1b      	subs	r3, r3, r0
 800761c:	50a3      	str	r3, [r4, r2]
 800761e:	e7dc      	b.n	80075da <_malloc_r+0x86>
 8007620:	605a      	str	r2, [r3, #4]
 8007622:	e7ef      	b.n	8007604 <_malloc_r+0xb0>
 8007624:	0023      	movs	r3, r4
 8007626:	6864      	ldr	r4, [r4, #4]
 8007628:	e7a6      	b.n	8007578 <_malloc_r+0x24>
 800762a:	9c00      	ldr	r4, [sp, #0]
 800762c:	6863      	ldr	r3, [r4, #4]
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	e7ad      	b.n	800758e <_malloc_r+0x3a>
 8007632:	001a      	movs	r2, r3
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	42a3      	cmp	r3, r4
 8007638:	d1fb      	bne.n	8007632 <_malloc_r+0xde>
 800763a:	2300      	movs	r3, #0
 800763c:	e7da      	b.n	80075f4 <_malloc_r+0xa0>
 800763e:	230c      	movs	r3, #12
 8007640:	0028      	movs	r0, r5
 8007642:	602b      	str	r3, [r5, #0]
 8007644:	f000 f80e 	bl	8007664 <__malloc_unlock>
 8007648:	e7c6      	b.n	80075d8 <_malloc_r+0x84>
 800764a:	6007      	str	r7, [r0, #0]
 800764c:	e7da      	b.n	8007604 <_malloc_r+0xb0>
 800764e:	46c0      	nop			@ (mov r8, r8)
 8007650:	20000c20 	.word	0x20000c20

08007654 <__malloc_lock>:
 8007654:	b510      	push	{r4, lr}
 8007656:	4802      	ldr	r0, [pc, #8]	@ (8007660 <__malloc_lock+0xc>)
 8007658:	f7ff f87f 	bl	800675a <__retarget_lock_acquire_recursive>
 800765c:	bd10      	pop	{r4, pc}
 800765e:	46c0      	nop			@ (mov r8, r8)
 8007660:	20000c18 	.word	0x20000c18

08007664 <__malloc_unlock>:
 8007664:	b510      	push	{r4, lr}
 8007666:	4802      	ldr	r0, [pc, #8]	@ (8007670 <__malloc_unlock+0xc>)
 8007668:	f7ff f878 	bl	800675c <__retarget_lock_release_recursive>
 800766c:	bd10      	pop	{r4, pc}
 800766e:	46c0      	nop			@ (mov r8, r8)
 8007670:	20000c18 	.word	0x20000c18

08007674 <_Balloc>:
 8007674:	b570      	push	{r4, r5, r6, lr}
 8007676:	69c5      	ldr	r5, [r0, #28]
 8007678:	0006      	movs	r6, r0
 800767a:	000c      	movs	r4, r1
 800767c:	2d00      	cmp	r5, #0
 800767e:	d10e      	bne.n	800769e <_Balloc+0x2a>
 8007680:	2010      	movs	r0, #16
 8007682:	f7ff ff3b 	bl	80074fc <malloc>
 8007686:	1e02      	subs	r2, r0, #0
 8007688:	61f0      	str	r0, [r6, #28]
 800768a:	d104      	bne.n	8007696 <_Balloc+0x22>
 800768c:	216b      	movs	r1, #107	@ 0x6b
 800768e:	4b19      	ldr	r3, [pc, #100]	@ (80076f4 <_Balloc+0x80>)
 8007690:	4819      	ldr	r0, [pc, #100]	@ (80076f8 <_Balloc+0x84>)
 8007692:	f001 fe41 	bl	8009318 <__assert_func>
 8007696:	6045      	str	r5, [r0, #4]
 8007698:	6085      	str	r5, [r0, #8]
 800769a:	6005      	str	r5, [r0, #0]
 800769c:	60c5      	str	r5, [r0, #12]
 800769e:	69f5      	ldr	r5, [r6, #28]
 80076a0:	68eb      	ldr	r3, [r5, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d013      	beq.n	80076ce <_Balloc+0x5a>
 80076a6:	69f3      	ldr	r3, [r6, #28]
 80076a8:	00a2      	lsls	r2, r4, #2
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	189b      	adds	r3, r3, r2
 80076ae:	6818      	ldr	r0, [r3, #0]
 80076b0:	2800      	cmp	r0, #0
 80076b2:	d118      	bne.n	80076e6 <_Balloc+0x72>
 80076b4:	2101      	movs	r1, #1
 80076b6:	000d      	movs	r5, r1
 80076b8:	40a5      	lsls	r5, r4
 80076ba:	1d6a      	adds	r2, r5, #5
 80076bc:	0030      	movs	r0, r6
 80076be:	0092      	lsls	r2, r2, #2
 80076c0:	f001 fe48 	bl	8009354 <_calloc_r>
 80076c4:	2800      	cmp	r0, #0
 80076c6:	d00c      	beq.n	80076e2 <_Balloc+0x6e>
 80076c8:	6044      	str	r4, [r0, #4]
 80076ca:	6085      	str	r5, [r0, #8]
 80076cc:	e00d      	b.n	80076ea <_Balloc+0x76>
 80076ce:	2221      	movs	r2, #33	@ 0x21
 80076d0:	2104      	movs	r1, #4
 80076d2:	0030      	movs	r0, r6
 80076d4:	f001 fe3e 	bl	8009354 <_calloc_r>
 80076d8:	69f3      	ldr	r3, [r6, #28]
 80076da:	60e8      	str	r0, [r5, #12]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e1      	bne.n	80076a6 <_Balloc+0x32>
 80076e2:	2000      	movs	r0, #0
 80076e4:	bd70      	pop	{r4, r5, r6, pc}
 80076e6:	6802      	ldr	r2, [r0, #0]
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	2300      	movs	r3, #0
 80076ec:	6103      	str	r3, [r0, #16]
 80076ee:	60c3      	str	r3, [r0, #12]
 80076f0:	e7f8      	b.n	80076e4 <_Balloc+0x70>
 80076f2:	46c0      	nop			@ (mov r8, r8)
 80076f4:	08009f6a 	.word	0x08009f6a
 80076f8:	08009fea 	.word	0x08009fea

080076fc <_Bfree>:
 80076fc:	b570      	push	{r4, r5, r6, lr}
 80076fe:	69c6      	ldr	r6, [r0, #28]
 8007700:	0005      	movs	r5, r0
 8007702:	000c      	movs	r4, r1
 8007704:	2e00      	cmp	r6, #0
 8007706:	d10e      	bne.n	8007726 <_Bfree+0x2a>
 8007708:	2010      	movs	r0, #16
 800770a:	f7ff fef7 	bl	80074fc <malloc>
 800770e:	1e02      	subs	r2, r0, #0
 8007710:	61e8      	str	r0, [r5, #28]
 8007712:	d104      	bne.n	800771e <_Bfree+0x22>
 8007714:	218f      	movs	r1, #143	@ 0x8f
 8007716:	4b09      	ldr	r3, [pc, #36]	@ (800773c <_Bfree+0x40>)
 8007718:	4809      	ldr	r0, [pc, #36]	@ (8007740 <_Bfree+0x44>)
 800771a:	f001 fdfd 	bl	8009318 <__assert_func>
 800771e:	6046      	str	r6, [r0, #4]
 8007720:	6086      	str	r6, [r0, #8]
 8007722:	6006      	str	r6, [r0, #0]
 8007724:	60c6      	str	r6, [r0, #12]
 8007726:	2c00      	cmp	r4, #0
 8007728:	d007      	beq.n	800773a <_Bfree+0x3e>
 800772a:	69eb      	ldr	r3, [r5, #28]
 800772c:	6862      	ldr	r2, [r4, #4]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	0092      	lsls	r2, r2, #2
 8007732:	189b      	adds	r3, r3, r2
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	6022      	str	r2, [r4, #0]
 8007738:	601c      	str	r4, [r3, #0]
 800773a:	bd70      	pop	{r4, r5, r6, pc}
 800773c:	08009f6a 	.word	0x08009f6a
 8007740:	08009fea 	.word	0x08009fea

08007744 <__multadd>:
 8007744:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007746:	000f      	movs	r7, r1
 8007748:	9001      	str	r0, [sp, #4]
 800774a:	000c      	movs	r4, r1
 800774c:	001e      	movs	r6, r3
 800774e:	2000      	movs	r0, #0
 8007750:	690d      	ldr	r5, [r1, #16]
 8007752:	3714      	adds	r7, #20
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	3001      	adds	r0, #1
 8007758:	b299      	uxth	r1, r3
 800775a:	4351      	muls	r1, r2
 800775c:	0c1b      	lsrs	r3, r3, #16
 800775e:	4353      	muls	r3, r2
 8007760:	1989      	adds	r1, r1, r6
 8007762:	0c0e      	lsrs	r6, r1, #16
 8007764:	199b      	adds	r3, r3, r6
 8007766:	0c1e      	lsrs	r6, r3, #16
 8007768:	b289      	uxth	r1, r1
 800776a:	041b      	lsls	r3, r3, #16
 800776c:	185b      	adds	r3, r3, r1
 800776e:	c708      	stmia	r7!, {r3}
 8007770:	4285      	cmp	r5, r0
 8007772:	dcef      	bgt.n	8007754 <__multadd+0x10>
 8007774:	2e00      	cmp	r6, #0
 8007776:	d022      	beq.n	80077be <__multadd+0x7a>
 8007778:	68a3      	ldr	r3, [r4, #8]
 800777a:	42ab      	cmp	r3, r5
 800777c:	dc19      	bgt.n	80077b2 <__multadd+0x6e>
 800777e:	6861      	ldr	r1, [r4, #4]
 8007780:	9801      	ldr	r0, [sp, #4]
 8007782:	3101      	adds	r1, #1
 8007784:	f7ff ff76 	bl	8007674 <_Balloc>
 8007788:	1e07      	subs	r7, r0, #0
 800778a:	d105      	bne.n	8007798 <__multadd+0x54>
 800778c:	003a      	movs	r2, r7
 800778e:	21ba      	movs	r1, #186	@ 0xba
 8007790:	4b0c      	ldr	r3, [pc, #48]	@ (80077c4 <__multadd+0x80>)
 8007792:	480d      	ldr	r0, [pc, #52]	@ (80077c8 <__multadd+0x84>)
 8007794:	f001 fdc0 	bl	8009318 <__assert_func>
 8007798:	0021      	movs	r1, r4
 800779a:	6922      	ldr	r2, [r4, #16]
 800779c:	310c      	adds	r1, #12
 800779e:	3202      	adds	r2, #2
 80077a0:	0092      	lsls	r2, r2, #2
 80077a2:	300c      	adds	r0, #12
 80077a4:	f001 fda8 	bl	80092f8 <memcpy>
 80077a8:	0021      	movs	r1, r4
 80077aa:	9801      	ldr	r0, [sp, #4]
 80077ac:	f7ff ffa6 	bl	80076fc <_Bfree>
 80077b0:	003c      	movs	r4, r7
 80077b2:	1d2b      	adds	r3, r5, #4
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	18e3      	adds	r3, r4, r3
 80077b8:	3501      	adds	r5, #1
 80077ba:	605e      	str	r6, [r3, #4]
 80077bc:	6125      	str	r5, [r4, #16]
 80077be:	0020      	movs	r0, r4
 80077c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80077c2:	46c0      	nop			@ (mov r8, r8)
 80077c4:	08009fd9 	.word	0x08009fd9
 80077c8:	08009fea 	.word	0x08009fea

080077cc <__s2b>:
 80077cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ce:	0007      	movs	r7, r0
 80077d0:	0018      	movs	r0, r3
 80077d2:	000c      	movs	r4, r1
 80077d4:	3008      	adds	r0, #8
 80077d6:	2109      	movs	r1, #9
 80077d8:	9301      	str	r3, [sp, #4]
 80077da:	0015      	movs	r5, r2
 80077dc:	f7f8 fd3a 	bl	8000254 <__divsi3>
 80077e0:	2301      	movs	r3, #1
 80077e2:	2100      	movs	r1, #0
 80077e4:	4283      	cmp	r3, r0
 80077e6:	db0a      	blt.n	80077fe <__s2b+0x32>
 80077e8:	0038      	movs	r0, r7
 80077ea:	f7ff ff43 	bl	8007674 <_Balloc>
 80077ee:	1e01      	subs	r1, r0, #0
 80077f0:	d108      	bne.n	8007804 <__s2b+0x38>
 80077f2:	000a      	movs	r2, r1
 80077f4:	4b19      	ldr	r3, [pc, #100]	@ (800785c <__s2b+0x90>)
 80077f6:	481a      	ldr	r0, [pc, #104]	@ (8007860 <__s2b+0x94>)
 80077f8:	31d3      	adds	r1, #211	@ 0xd3
 80077fa:	f001 fd8d 	bl	8009318 <__assert_func>
 80077fe:	005b      	lsls	r3, r3, #1
 8007800:	3101      	adds	r1, #1
 8007802:	e7ef      	b.n	80077e4 <__s2b+0x18>
 8007804:	9b08      	ldr	r3, [sp, #32]
 8007806:	6143      	str	r3, [r0, #20]
 8007808:	2301      	movs	r3, #1
 800780a:	6103      	str	r3, [r0, #16]
 800780c:	2d09      	cmp	r5, #9
 800780e:	dd18      	ble.n	8007842 <__s2b+0x76>
 8007810:	0023      	movs	r3, r4
 8007812:	3309      	adds	r3, #9
 8007814:	001e      	movs	r6, r3
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	1964      	adds	r4, r4, r5
 800781a:	7833      	ldrb	r3, [r6, #0]
 800781c:	220a      	movs	r2, #10
 800781e:	0038      	movs	r0, r7
 8007820:	3b30      	subs	r3, #48	@ 0x30
 8007822:	f7ff ff8f 	bl	8007744 <__multadd>
 8007826:	3601      	adds	r6, #1
 8007828:	0001      	movs	r1, r0
 800782a:	42a6      	cmp	r6, r4
 800782c:	d1f5      	bne.n	800781a <__s2b+0x4e>
 800782e:	002c      	movs	r4, r5
 8007830:	9b00      	ldr	r3, [sp, #0]
 8007832:	3c08      	subs	r4, #8
 8007834:	191c      	adds	r4, r3, r4
 8007836:	002e      	movs	r6, r5
 8007838:	9b01      	ldr	r3, [sp, #4]
 800783a:	429e      	cmp	r6, r3
 800783c:	db04      	blt.n	8007848 <__s2b+0x7c>
 800783e:	0008      	movs	r0, r1
 8007840:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007842:	2509      	movs	r5, #9
 8007844:	340a      	adds	r4, #10
 8007846:	e7f6      	b.n	8007836 <__s2b+0x6a>
 8007848:	1b63      	subs	r3, r4, r5
 800784a:	5d9b      	ldrb	r3, [r3, r6]
 800784c:	220a      	movs	r2, #10
 800784e:	0038      	movs	r0, r7
 8007850:	3b30      	subs	r3, #48	@ 0x30
 8007852:	f7ff ff77 	bl	8007744 <__multadd>
 8007856:	3601      	adds	r6, #1
 8007858:	0001      	movs	r1, r0
 800785a:	e7ed      	b.n	8007838 <__s2b+0x6c>
 800785c:	08009fd9 	.word	0x08009fd9
 8007860:	08009fea 	.word	0x08009fea

08007864 <__hi0bits>:
 8007864:	2280      	movs	r2, #128	@ 0x80
 8007866:	0003      	movs	r3, r0
 8007868:	0252      	lsls	r2, r2, #9
 800786a:	2000      	movs	r0, #0
 800786c:	4293      	cmp	r3, r2
 800786e:	d201      	bcs.n	8007874 <__hi0bits+0x10>
 8007870:	041b      	lsls	r3, r3, #16
 8007872:	3010      	adds	r0, #16
 8007874:	2280      	movs	r2, #128	@ 0x80
 8007876:	0452      	lsls	r2, r2, #17
 8007878:	4293      	cmp	r3, r2
 800787a:	d201      	bcs.n	8007880 <__hi0bits+0x1c>
 800787c:	3008      	adds	r0, #8
 800787e:	021b      	lsls	r3, r3, #8
 8007880:	2280      	movs	r2, #128	@ 0x80
 8007882:	0552      	lsls	r2, r2, #21
 8007884:	4293      	cmp	r3, r2
 8007886:	d201      	bcs.n	800788c <__hi0bits+0x28>
 8007888:	3004      	adds	r0, #4
 800788a:	011b      	lsls	r3, r3, #4
 800788c:	2280      	movs	r2, #128	@ 0x80
 800788e:	05d2      	lsls	r2, r2, #23
 8007890:	4293      	cmp	r3, r2
 8007892:	d201      	bcs.n	8007898 <__hi0bits+0x34>
 8007894:	3002      	adds	r0, #2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	db03      	blt.n	80078a4 <__hi0bits+0x40>
 800789c:	3001      	adds	r0, #1
 800789e:	4213      	tst	r3, r2
 80078a0:	d100      	bne.n	80078a4 <__hi0bits+0x40>
 80078a2:	2020      	movs	r0, #32
 80078a4:	4770      	bx	lr

080078a6 <__lo0bits>:
 80078a6:	6803      	ldr	r3, [r0, #0]
 80078a8:	0001      	movs	r1, r0
 80078aa:	2207      	movs	r2, #7
 80078ac:	0018      	movs	r0, r3
 80078ae:	4010      	ands	r0, r2
 80078b0:	4213      	tst	r3, r2
 80078b2:	d00d      	beq.n	80078d0 <__lo0bits+0x2a>
 80078b4:	3a06      	subs	r2, #6
 80078b6:	2000      	movs	r0, #0
 80078b8:	4213      	tst	r3, r2
 80078ba:	d105      	bne.n	80078c8 <__lo0bits+0x22>
 80078bc:	3002      	adds	r0, #2
 80078be:	4203      	tst	r3, r0
 80078c0:	d003      	beq.n	80078ca <__lo0bits+0x24>
 80078c2:	40d3      	lsrs	r3, r2
 80078c4:	0010      	movs	r0, r2
 80078c6:	600b      	str	r3, [r1, #0]
 80078c8:	4770      	bx	lr
 80078ca:	089b      	lsrs	r3, r3, #2
 80078cc:	600b      	str	r3, [r1, #0]
 80078ce:	e7fb      	b.n	80078c8 <__lo0bits+0x22>
 80078d0:	b29a      	uxth	r2, r3
 80078d2:	2a00      	cmp	r2, #0
 80078d4:	d101      	bne.n	80078da <__lo0bits+0x34>
 80078d6:	2010      	movs	r0, #16
 80078d8:	0c1b      	lsrs	r3, r3, #16
 80078da:	b2da      	uxtb	r2, r3
 80078dc:	2a00      	cmp	r2, #0
 80078de:	d101      	bne.n	80078e4 <__lo0bits+0x3e>
 80078e0:	3008      	adds	r0, #8
 80078e2:	0a1b      	lsrs	r3, r3, #8
 80078e4:	071a      	lsls	r2, r3, #28
 80078e6:	d101      	bne.n	80078ec <__lo0bits+0x46>
 80078e8:	3004      	adds	r0, #4
 80078ea:	091b      	lsrs	r3, r3, #4
 80078ec:	079a      	lsls	r2, r3, #30
 80078ee:	d101      	bne.n	80078f4 <__lo0bits+0x4e>
 80078f0:	3002      	adds	r0, #2
 80078f2:	089b      	lsrs	r3, r3, #2
 80078f4:	07da      	lsls	r2, r3, #31
 80078f6:	d4e9      	bmi.n	80078cc <__lo0bits+0x26>
 80078f8:	3001      	adds	r0, #1
 80078fa:	085b      	lsrs	r3, r3, #1
 80078fc:	d1e6      	bne.n	80078cc <__lo0bits+0x26>
 80078fe:	2020      	movs	r0, #32
 8007900:	e7e2      	b.n	80078c8 <__lo0bits+0x22>
	...

08007904 <__i2b>:
 8007904:	b510      	push	{r4, lr}
 8007906:	000c      	movs	r4, r1
 8007908:	2101      	movs	r1, #1
 800790a:	f7ff feb3 	bl	8007674 <_Balloc>
 800790e:	2800      	cmp	r0, #0
 8007910:	d107      	bne.n	8007922 <__i2b+0x1e>
 8007912:	2146      	movs	r1, #70	@ 0x46
 8007914:	4c05      	ldr	r4, [pc, #20]	@ (800792c <__i2b+0x28>)
 8007916:	0002      	movs	r2, r0
 8007918:	4b05      	ldr	r3, [pc, #20]	@ (8007930 <__i2b+0x2c>)
 800791a:	0020      	movs	r0, r4
 800791c:	31ff      	adds	r1, #255	@ 0xff
 800791e:	f001 fcfb 	bl	8009318 <__assert_func>
 8007922:	2301      	movs	r3, #1
 8007924:	6144      	str	r4, [r0, #20]
 8007926:	6103      	str	r3, [r0, #16]
 8007928:	bd10      	pop	{r4, pc}
 800792a:	46c0      	nop			@ (mov r8, r8)
 800792c:	08009fea 	.word	0x08009fea
 8007930:	08009fd9 	.word	0x08009fd9

08007934 <__multiply>:
 8007934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007936:	0014      	movs	r4, r2
 8007938:	690a      	ldr	r2, [r1, #16]
 800793a:	6923      	ldr	r3, [r4, #16]
 800793c:	000d      	movs	r5, r1
 800793e:	b089      	sub	sp, #36	@ 0x24
 8007940:	429a      	cmp	r2, r3
 8007942:	db02      	blt.n	800794a <__multiply+0x16>
 8007944:	0023      	movs	r3, r4
 8007946:	000c      	movs	r4, r1
 8007948:	001d      	movs	r5, r3
 800794a:	6927      	ldr	r7, [r4, #16]
 800794c:	692e      	ldr	r6, [r5, #16]
 800794e:	6861      	ldr	r1, [r4, #4]
 8007950:	19bb      	adds	r3, r7, r6
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	68a3      	ldr	r3, [r4, #8]
 8007956:	19ba      	adds	r2, r7, r6
 8007958:	4293      	cmp	r3, r2
 800795a:	da00      	bge.n	800795e <__multiply+0x2a>
 800795c:	3101      	adds	r1, #1
 800795e:	f7ff fe89 	bl	8007674 <_Balloc>
 8007962:	4684      	mov	ip, r0
 8007964:	2800      	cmp	r0, #0
 8007966:	d106      	bne.n	8007976 <__multiply+0x42>
 8007968:	21b1      	movs	r1, #177	@ 0xb1
 800796a:	4662      	mov	r2, ip
 800796c:	4b44      	ldr	r3, [pc, #272]	@ (8007a80 <__multiply+0x14c>)
 800796e:	4845      	ldr	r0, [pc, #276]	@ (8007a84 <__multiply+0x150>)
 8007970:	0049      	lsls	r1, r1, #1
 8007972:	f001 fcd1 	bl	8009318 <__assert_func>
 8007976:	0002      	movs	r2, r0
 8007978:	19bb      	adds	r3, r7, r6
 800797a:	3214      	adds	r2, #20
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	18d3      	adds	r3, r2, r3
 8007980:	9301      	str	r3, [sp, #4]
 8007982:	2100      	movs	r1, #0
 8007984:	0013      	movs	r3, r2
 8007986:	9801      	ldr	r0, [sp, #4]
 8007988:	4283      	cmp	r3, r0
 800798a:	d328      	bcc.n	80079de <__multiply+0xaa>
 800798c:	0023      	movs	r3, r4
 800798e:	00bf      	lsls	r7, r7, #2
 8007990:	3314      	adds	r3, #20
 8007992:	9304      	str	r3, [sp, #16]
 8007994:	3514      	adds	r5, #20
 8007996:	19db      	adds	r3, r3, r7
 8007998:	00b6      	lsls	r6, r6, #2
 800799a:	9302      	str	r3, [sp, #8]
 800799c:	19ab      	adds	r3, r5, r6
 800799e:	9307      	str	r3, [sp, #28]
 80079a0:	2304      	movs	r3, #4
 80079a2:	9305      	str	r3, [sp, #20]
 80079a4:	0023      	movs	r3, r4
 80079a6:	9902      	ldr	r1, [sp, #8]
 80079a8:	3315      	adds	r3, #21
 80079aa:	4299      	cmp	r1, r3
 80079ac:	d305      	bcc.n	80079ba <__multiply+0x86>
 80079ae:	1b0c      	subs	r4, r1, r4
 80079b0:	3c15      	subs	r4, #21
 80079b2:	08a4      	lsrs	r4, r4, #2
 80079b4:	3401      	adds	r4, #1
 80079b6:	00a3      	lsls	r3, r4, #2
 80079b8:	9305      	str	r3, [sp, #20]
 80079ba:	9b07      	ldr	r3, [sp, #28]
 80079bc:	429d      	cmp	r5, r3
 80079be:	d310      	bcc.n	80079e2 <__multiply+0xae>
 80079c0:	9b00      	ldr	r3, [sp, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	dd05      	ble.n	80079d2 <__multiply+0x9e>
 80079c6:	9b01      	ldr	r3, [sp, #4]
 80079c8:	3b04      	subs	r3, #4
 80079ca:	9301      	str	r3, [sp, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d052      	beq.n	8007a78 <__multiply+0x144>
 80079d2:	4663      	mov	r3, ip
 80079d4:	4660      	mov	r0, ip
 80079d6:	9a00      	ldr	r2, [sp, #0]
 80079d8:	611a      	str	r2, [r3, #16]
 80079da:	b009      	add	sp, #36	@ 0x24
 80079dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079de:	c302      	stmia	r3!, {r1}
 80079e0:	e7d1      	b.n	8007986 <__multiply+0x52>
 80079e2:	682c      	ldr	r4, [r5, #0]
 80079e4:	b2a4      	uxth	r4, r4
 80079e6:	2c00      	cmp	r4, #0
 80079e8:	d01f      	beq.n	8007a2a <__multiply+0xf6>
 80079ea:	2300      	movs	r3, #0
 80079ec:	0017      	movs	r7, r2
 80079ee:	9e04      	ldr	r6, [sp, #16]
 80079f0:	9303      	str	r3, [sp, #12]
 80079f2:	ce08      	ldmia	r6!, {r3}
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	9306      	str	r3, [sp, #24]
 80079f8:	466b      	mov	r3, sp
 80079fa:	8b1b      	ldrh	r3, [r3, #24]
 80079fc:	b288      	uxth	r0, r1
 80079fe:	4363      	muls	r3, r4
 8007a00:	181b      	adds	r3, r3, r0
 8007a02:	9803      	ldr	r0, [sp, #12]
 8007a04:	0c09      	lsrs	r1, r1, #16
 8007a06:	181b      	adds	r3, r3, r0
 8007a08:	9806      	ldr	r0, [sp, #24]
 8007a0a:	0c00      	lsrs	r0, r0, #16
 8007a0c:	4360      	muls	r0, r4
 8007a0e:	1840      	adds	r0, r0, r1
 8007a10:	0c19      	lsrs	r1, r3, #16
 8007a12:	1841      	adds	r1, r0, r1
 8007a14:	0c08      	lsrs	r0, r1, #16
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	0409      	lsls	r1, r1, #16
 8007a1a:	4319      	orrs	r1, r3
 8007a1c:	9b02      	ldr	r3, [sp, #8]
 8007a1e:	9003      	str	r0, [sp, #12]
 8007a20:	c702      	stmia	r7!, {r1}
 8007a22:	42b3      	cmp	r3, r6
 8007a24:	d8e5      	bhi.n	80079f2 <__multiply+0xbe>
 8007a26:	9b05      	ldr	r3, [sp, #20]
 8007a28:	50d0      	str	r0, [r2, r3]
 8007a2a:	682c      	ldr	r4, [r5, #0]
 8007a2c:	0c24      	lsrs	r4, r4, #16
 8007a2e:	d020      	beq.n	8007a72 <__multiply+0x13e>
 8007a30:	2100      	movs	r1, #0
 8007a32:	0010      	movs	r0, r2
 8007a34:	6813      	ldr	r3, [r2, #0]
 8007a36:	9e04      	ldr	r6, [sp, #16]
 8007a38:	9103      	str	r1, [sp, #12]
 8007a3a:	6831      	ldr	r1, [r6, #0]
 8007a3c:	6807      	ldr	r7, [r0, #0]
 8007a3e:	b289      	uxth	r1, r1
 8007a40:	4361      	muls	r1, r4
 8007a42:	0c3f      	lsrs	r7, r7, #16
 8007a44:	19c9      	adds	r1, r1, r7
 8007a46:	9f03      	ldr	r7, [sp, #12]
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	19c9      	adds	r1, r1, r7
 8007a4c:	040f      	lsls	r7, r1, #16
 8007a4e:	431f      	orrs	r7, r3
 8007a50:	6007      	str	r7, [r0, #0]
 8007a52:	ce80      	ldmia	r6!, {r7}
 8007a54:	6843      	ldr	r3, [r0, #4]
 8007a56:	0c3f      	lsrs	r7, r7, #16
 8007a58:	4367      	muls	r7, r4
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	0c09      	lsrs	r1, r1, #16
 8007a5e:	18fb      	adds	r3, r7, r3
 8007a60:	185b      	adds	r3, r3, r1
 8007a62:	0c19      	lsrs	r1, r3, #16
 8007a64:	9103      	str	r1, [sp, #12]
 8007a66:	9902      	ldr	r1, [sp, #8]
 8007a68:	3004      	adds	r0, #4
 8007a6a:	42b1      	cmp	r1, r6
 8007a6c:	d8e5      	bhi.n	8007a3a <__multiply+0x106>
 8007a6e:	9905      	ldr	r1, [sp, #20]
 8007a70:	5053      	str	r3, [r2, r1]
 8007a72:	3504      	adds	r5, #4
 8007a74:	3204      	adds	r2, #4
 8007a76:	e7a0      	b.n	80079ba <__multiply+0x86>
 8007a78:	9b00      	ldr	r3, [sp, #0]
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	9300      	str	r3, [sp, #0]
 8007a7e:	e79f      	b.n	80079c0 <__multiply+0x8c>
 8007a80:	08009fd9 	.word	0x08009fd9
 8007a84:	08009fea 	.word	0x08009fea

08007a88 <__pow5mult>:
 8007a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	0015      	movs	r5, r2
 8007a8e:	0007      	movs	r7, r0
 8007a90:	000e      	movs	r6, r1
 8007a92:	401a      	ands	r2, r3
 8007a94:	421d      	tst	r5, r3
 8007a96:	d008      	beq.n	8007aaa <__pow5mult+0x22>
 8007a98:	4925      	ldr	r1, [pc, #148]	@ (8007b30 <__pow5mult+0xa8>)
 8007a9a:	3a01      	subs	r2, #1
 8007a9c:	0092      	lsls	r2, r2, #2
 8007a9e:	5852      	ldr	r2, [r2, r1]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	0031      	movs	r1, r6
 8007aa4:	f7ff fe4e 	bl	8007744 <__multadd>
 8007aa8:	0006      	movs	r6, r0
 8007aaa:	10ad      	asrs	r5, r5, #2
 8007aac:	d03d      	beq.n	8007b2a <__pow5mult+0xa2>
 8007aae:	69fc      	ldr	r4, [r7, #28]
 8007ab0:	2c00      	cmp	r4, #0
 8007ab2:	d10f      	bne.n	8007ad4 <__pow5mult+0x4c>
 8007ab4:	2010      	movs	r0, #16
 8007ab6:	f7ff fd21 	bl	80074fc <malloc>
 8007aba:	1e02      	subs	r2, r0, #0
 8007abc:	61f8      	str	r0, [r7, #28]
 8007abe:	d105      	bne.n	8007acc <__pow5mult+0x44>
 8007ac0:	21b4      	movs	r1, #180	@ 0xb4
 8007ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8007b34 <__pow5mult+0xac>)
 8007ac4:	481c      	ldr	r0, [pc, #112]	@ (8007b38 <__pow5mult+0xb0>)
 8007ac6:	31ff      	adds	r1, #255	@ 0xff
 8007ac8:	f001 fc26 	bl	8009318 <__assert_func>
 8007acc:	6044      	str	r4, [r0, #4]
 8007ace:	6084      	str	r4, [r0, #8]
 8007ad0:	6004      	str	r4, [r0, #0]
 8007ad2:	60c4      	str	r4, [r0, #12]
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	689c      	ldr	r4, [r3, #8]
 8007ad8:	9301      	str	r3, [sp, #4]
 8007ada:	2c00      	cmp	r4, #0
 8007adc:	d108      	bne.n	8007af0 <__pow5mult+0x68>
 8007ade:	0038      	movs	r0, r7
 8007ae0:	4916      	ldr	r1, [pc, #88]	@ (8007b3c <__pow5mult+0xb4>)
 8007ae2:	f7ff ff0f 	bl	8007904 <__i2b>
 8007ae6:	9b01      	ldr	r3, [sp, #4]
 8007ae8:	0004      	movs	r4, r0
 8007aea:	6098      	str	r0, [r3, #8]
 8007aec:	2300      	movs	r3, #0
 8007aee:	6003      	str	r3, [r0, #0]
 8007af0:	2301      	movs	r3, #1
 8007af2:	421d      	tst	r5, r3
 8007af4:	d00a      	beq.n	8007b0c <__pow5mult+0x84>
 8007af6:	0031      	movs	r1, r6
 8007af8:	0022      	movs	r2, r4
 8007afa:	0038      	movs	r0, r7
 8007afc:	f7ff ff1a 	bl	8007934 <__multiply>
 8007b00:	0031      	movs	r1, r6
 8007b02:	9001      	str	r0, [sp, #4]
 8007b04:	0038      	movs	r0, r7
 8007b06:	f7ff fdf9 	bl	80076fc <_Bfree>
 8007b0a:	9e01      	ldr	r6, [sp, #4]
 8007b0c:	106d      	asrs	r5, r5, #1
 8007b0e:	d00c      	beq.n	8007b2a <__pow5mult+0xa2>
 8007b10:	6820      	ldr	r0, [r4, #0]
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d107      	bne.n	8007b26 <__pow5mult+0x9e>
 8007b16:	0022      	movs	r2, r4
 8007b18:	0021      	movs	r1, r4
 8007b1a:	0038      	movs	r0, r7
 8007b1c:	f7ff ff0a 	bl	8007934 <__multiply>
 8007b20:	2300      	movs	r3, #0
 8007b22:	6020      	str	r0, [r4, #0]
 8007b24:	6003      	str	r3, [r0, #0]
 8007b26:	0004      	movs	r4, r0
 8007b28:	e7e2      	b.n	8007af0 <__pow5mult+0x68>
 8007b2a:	0030      	movs	r0, r6
 8007b2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b2e:	46c0      	nop			@ (mov r8, r8)
 8007b30:	0800a0fc 	.word	0x0800a0fc
 8007b34:	08009f6a 	.word	0x08009f6a
 8007b38:	08009fea 	.word	0x08009fea
 8007b3c:	00000271 	.word	0x00000271

08007b40 <__lshift>:
 8007b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b42:	000c      	movs	r4, r1
 8007b44:	0016      	movs	r6, r2
 8007b46:	6923      	ldr	r3, [r4, #16]
 8007b48:	1157      	asrs	r7, r2, #5
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	18fb      	adds	r3, r7, r3
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	3301      	adds	r3, #1
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	6849      	ldr	r1, [r1, #4]
 8007b56:	68a3      	ldr	r3, [r4, #8]
 8007b58:	9002      	str	r0, [sp, #8]
 8007b5a:	9a00      	ldr	r2, [sp, #0]
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	db10      	blt.n	8007b82 <__lshift+0x42>
 8007b60:	9802      	ldr	r0, [sp, #8]
 8007b62:	f7ff fd87 	bl	8007674 <_Balloc>
 8007b66:	2300      	movs	r3, #0
 8007b68:	0001      	movs	r1, r0
 8007b6a:	0005      	movs	r5, r0
 8007b6c:	001a      	movs	r2, r3
 8007b6e:	3114      	adds	r1, #20
 8007b70:	4298      	cmp	r0, r3
 8007b72:	d10c      	bne.n	8007b8e <__lshift+0x4e>
 8007b74:	21ef      	movs	r1, #239	@ 0xef
 8007b76:	002a      	movs	r2, r5
 8007b78:	4b25      	ldr	r3, [pc, #148]	@ (8007c10 <__lshift+0xd0>)
 8007b7a:	4826      	ldr	r0, [pc, #152]	@ (8007c14 <__lshift+0xd4>)
 8007b7c:	0049      	lsls	r1, r1, #1
 8007b7e:	f001 fbcb 	bl	8009318 <__assert_func>
 8007b82:	3101      	adds	r1, #1
 8007b84:	005b      	lsls	r3, r3, #1
 8007b86:	e7e8      	b.n	8007b5a <__lshift+0x1a>
 8007b88:	0098      	lsls	r0, r3, #2
 8007b8a:	500a      	str	r2, [r1, r0]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	42bb      	cmp	r3, r7
 8007b90:	dbfa      	blt.n	8007b88 <__lshift+0x48>
 8007b92:	43fb      	mvns	r3, r7
 8007b94:	17db      	asrs	r3, r3, #31
 8007b96:	401f      	ands	r7, r3
 8007b98:	00bf      	lsls	r7, r7, #2
 8007b9a:	0023      	movs	r3, r4
 8007b9c:	201f      	movs	r0, #31
 8007b9e:	19c9      	adds	r1, r1, r7
 8007ba0:	0037      	movs	r7, r6
 8007ba2:	6922      	ldr	r2, [r4, #16]
 8007ba4:	3314      	adds	r3, #20
 8007ba6:	0092      	lsls	r2, r2, #2
 8007ba8:	189a      	adds	r2, r3, r2
 8007baa:	4007      	ands	r7, r0
 8007bac:	4206      	tst	r6, r0
 8007bae:	d029      	beq.n	8007c04 <__lshift+0xc4>
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	1bc0      	subs	r0, r0, r7
 8007bb4:	9003      	str	r0, [sp, #12]
 8007bb6:	468c      	mov	ip, r1
 8007bb8:	2000      	movs	r0, #0
 8007bba:	681e      	ldr	r6, [r3, #0]
 8007bbc:	40be      	lsls	r6, r7
 8007bbe:	4306      	orrs	r6, r0
 8007bc0:	4660      	mov	r0, ip
 8007bc2:	c040      	stmia	r0!, {r6}
 8007bc4:	4684      	mov	ip, r0
 8007bc6:	9e03      	ldr	r6, [sp, #12]
 8007bc8:	cb01      	ldmia	r3!, {r0}
 8007bca:	40f0      	lsrs	r0, r6
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d8f4      	bhi.n	8007bba <__lshift+0x7a>
 8007bd0:	0026      	movs	r6, r4
 8007bd2:	3615      	adds	r6, #21
 8007bd4:	2304      	movs	r3, #4
 8007bd6:	42b2      	cmp	r2, r6
 8007bd8:	d304      	bcc.n	8007be4 <__lshift+0xa4>
 8007bda:	1b13      	subs	r3, r2, r4
 8007bdc:	3b15      	subs	r3, #21
 8007bde:	089b      	lsrs	r3, r3, #2
 8007be0:	3301      	adds	r3, #1
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	50c8      	str	r0, [r1, r3]
 8007be6:	2800      	cmp	r0, #0
 8007be8:	d002      	beq.n	8007bf0 <__lshift+0xb0>
 8007bea:	9b01      	ldr	r3, [sp, #4]
 8007bec:	3302      	adds	r3, #2
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	9b00      	ldr	r3, [sp, #0]
 8007bf2:	9802      	ldr	r0, [sp, #8]
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	0021      	movs	r1, r4
 8007bf8:	612b      	str	r3, [r5, #16]
 8007bfa:	f7ff fd7f 	bl	80076fc <_Bfree>
 8007bfe:	0028      	movs	r0, r5
 8007c00:	b005      	add	sp, #20
 8007c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c04:	cb01      	ldmia	r3!, {r0}
 8007c06:	c101      	stmia	r1!, {r0}
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d8fb      	bhi.n	8007c04 <__lshift+0xc4>
 8007c0c:	e7f0      	b.n	8007bf0 <__lshift+0xb0>
 8007c0e:	46c0      	nop			@ (mov r8, r8)
 8007c10:	08009fd9 	.word	0x08009fd9
 8007c14:	08009fea 	.word	0x08009fea

08007c18 <__mcmp>:
 8007c18:	b530      	push	{r4, r5, lr}
 8007c1a:	690b      	ldr	r3, [r1, #16]
 8007c1c:	6904      	ldr	r4, [r0, #16]
 8007c1e:	0002      	movs	r2, r0
 8007c20:	1ae0      	subs	r0, r4, r3
 8007c22:	429c      	cmp	r4, r3
 8007c24:	d10f      	bne.n	8007c46 <__mcmp+0x2e>
 8007c26:	3214      	adds	r2, #20
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	3114      	adds	r1, #20
 8007c2c:	0014      	movs	r4, r2
 8007c2e:	18c9      	adds	r1, r1, r3
 8007c30:	18d2      	adds	r2, r2, r3
 8007c32:	3a04      	subs	r2, #4
 8007c34:	3904      	subs	r1, #4
 8007c36:	6815      	ldr	r5, [r2, #0]
 8007c38:	680b      	ldr	r3, [r1, #0]
 8007c3a:	429d      	cmp	r5, r3
 8007c3c:	d004      	beq.n	8007c48 <__mcmp+0x30>
 8007c3e:	2001      	movs	r0, #1
 8007c40:	429d      	cmp	r5, r3
 8007c42:	d200      	bcs.n	8007c46 <__mcmp+0x2e>
 8007c44:	3802      	subs	r0, #2
 8007c46:	bd30      	pop	{r4, r5, pc}
 8007c48:	4294      	cmp	r4, r2
 8007c4a:	d3f2      	bcc.n	8007c32 <__mcmp+0x1a>
 8007c4c:	e7fb      	b.n	8007c46 <__mcmp+0x2e>
	...

08007c50 <__mdiff>:
 8007c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c52:	000c      	movs	r4, r1
 8007c54:	b087      	sub	sp, #28
 8007c56:	9000      	str	r0, [sp, #0]
 8007c58:	0011      	movs	r1, r2
 8007c5a:	0020      	movs	r0, r4
 8007c5c:	0017      	movs	r7, r2
 8007c5e:	f7ff ffdb 	bl	8007c18 <__mcmp>
 8007c62:	1e05      	subs	r5, r0, #0
 8007c64:	d110      	bne.n	8007c88 <__mdiff+0x38>
 8007c66:	0001      	movs	r1, r0
 8007c68:	9800      	ldr	r0, [sp, #0]
 8007c6a:	f7ff fd03 	bl	8007674 <_Balloc>
 8007c6e:	1e02      	subs	r2, r0, #0
 8007c70:	d104      	bne.n	8007c7c <__mdiff+0x2c>
 8007c72:	4b40      	ldr	r3, [pc, #256]	@ (8007d74 <__mdiff+0x124>)
 8007c74:	4840      	ldr	r0, [pc, #256]	@ (8007d78 <__mdiff+0x128>)
 8007c76:	4941      	ldr	r1, [pc, #260]	@ (8007d7c <__mdiff+0x12c>)
 8007c78:	f001 fb4e 	bl	8009318 <__assert_func>
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	6145      	str	r5, [r0, #20]
 8007c80:	6103      	str	r3, [r0, #16]
 8007c82:	0010      	movs	r0, r2
 8007c84:	b007      	add	sp, #28
 8007c86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c88:	2600      	movs	r6, #0
 8007c8a:	42b0      	cmp	r0, r6
 8007c8c:	da03      	bge.n	8007c96 <__mdiff+0x46>
 8007c8e:	0023      	movs	r3, r4
 8007c90:	003c      	movs	r4, r7
 8007c92:	001f      	movs	r7, r3
 8007c94:	3601      	adds	r6, #1
 8007c96:	6861      	ldr	r1, [r4, #4]
 8007c98:	9800      	ldr	r0, [sp, #0]
 8007c9a:	f7ff fceb 	bl	8007674 <_Balloc>
 8007c9e:	1e02      	subs	r2, r0, #0
 8007ca0:	d103      	bne.n	8007caa <__mdiff+0x5a>
 8007ca2:	4b34      	ldr	r3, [pc, #208]	@ (8007d74 <__mdiff+0x124>)
 8007ca4:	4834      	ldr	r0, [pc, #208]	@ (8007d78 <__mdiff+0x128>)
 8007ca6:	4936      	ldr	r1, [pc, #216]	@ (8007d80 <__mdiff+0x130>)
 8007ca8:	e7e6      	b.n	8007c78 <__mdiff+0x28>
 8007caa:	6923      	ldr	r3, [r4, #16]
 8007cac:	3414      	adds	r4, #20
 8007cae:	9300      	str	r3, [sp, #0]
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	18e3      	adds	r3, r4, r3
 8007cb4:	0021      	movs	r1, r4
 8007cb6:	9401      	str	r4, [sp, #4]
 8007cb8:	003c      	movs	r4, r7
 8007cba:	9302      	str	r3, [sp, #8]
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	3414      	adds	r4, #20
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	18e3      	adds	r3, r4, r3
 8007cc4:	9303      	str	r3, [sp, #12]
 8007cc6:	0003      	movs	r3, r0
 8007cc8:	60c6      	str	r6, [r0, #12]
 8007cca:	468c      	mov	ip, r1
 8007ccc:	2000      	movs	r0, #0
 8007cce:	3314      	adds	r3, #20
 8007cd0:	9304      	str	r3, [sp, #16]
 8007cd2:	9305      	str	r3, [sp, #20]
 8007cd4:	4663      	mov	r3, ip
 8007cd6:	cb20      	ldmia	r3!, {r5}
 8007cd8:	b2a9      	uxth	r1, r5
 8007cda:	000e      	movs	r6, r1
 8007cdc:	469c      	mov	ip, r3
 8007cde:	cc08      	ldmia	r4!, {r3}
 8007ce0:	0c2d      	lsrs	r5, r5, #16
 8007ce2:	b299      	uxth	r1, r3
 8007ce4:	1a71      	subs	r1, r6, r1
 8007ce6:	1809      	adds	r1, r1, r0
 8007ce8:	0c1b      	lsrs	r3, r3, #16
 8007cea:	1408      	asrs	r0, r1, #16
 8007cec:	1aeb      	subs	r3, r5, r3
 8007cee:	181b      	adds	r3, r3, r0
 8007cf0:	1418      	asrs	r0, r3, #16
 8007cf2:	b289      	uxth	r1, r1
 8007cf4:	041b      	lsls	r3, r3, #16
 8007cf6:	4319      	orrs	r1, r3
 8007cf8:	9b05      	ldr	r3, [sp, #20]
 8007cfa:	c302      	stmia	r3!, {r1}
 8007cfc:	9305      	str	r3, [sp, #20]
 8007cfe:	9b03      	ldr	r3, [sp, #12]
 8007d00:	42a3      	cmp	r3, r4
 8007d02:	d8e7      	bhi.n	8007cd4 <__mdiff+0x84>
 8007d04:	0039      	movs	r1, r7
 8007d06:	9c03      	ldr	r4, [sp, #12]
 8007d08:	3115      	adds	r1, #21
 8007d0a:	2304      	movs	r3, #4
 8007d0c:	428c      	cmp	r4, r1
 8007d0e:	d304      	bcc.n	8007d1a <__mdiff+0xca>
 8007d10:	1be3      	subs	r3, r4, r7
 8007d12:	3b15      	subs	r3, #21
 8007d14:	089b      	lsrs	r3, r3, #2
 8007d16:	3301      	adds	r3, #1
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	9901      	ldr	r1, [sp, #4]
 8007d1c:	18cd      	adds	r5, r1, r3
 8007d1e:	9904      	ldr	r1, [sp, #16]
 8007d20:	002e      	movs	r6, r5
 8007d22:	18cb      	adds	r3, r1, r3
 8007d24:	001f      	movs	r7, r3
 8007d26:	9902      	ldr	r1, [sp, #8]
 8007d28:	428e      	cmp	r6, r1
 8007d2a:	d311      	bcc.n	8007d50 <__mdiff+0x100>
 8007d2c:	9c02      	ldr	r4, [sp, #8]
 8007d2e:	1ee9      	subs	r1, r5, #3
 8007d30:	2000      	movs	r0, #0
 8007d32:	428c      	cmp	r4, r1
 8007d34:	d304      	bcc.n	8007d40 <__mdiff+0xf0>
 8007d36:	0021      	movs	r1, r4
 8007d38:	3103      	adds	r1, #3
 8007d3a:	1b49      	subs	r1, r1, r5
 8007d3c:	0889      	lsrs	r1, r1, #2
 8007d3e:	0088      	lsls	r0, r1, #2
 8007d40:	181b      	adds	r3, r3, r0
 8007d42:	3b04      	subs	r3, #4
 8007d44:	6819      	ldr	r1, [r3, #0]
 8007d46:	2900      	cmp	r1, #0
 8007d48:	d010      	beq.n	8007d6c <__mdiff+0x11c>
 8007d4a:	9b00      	ldr	r3, [sp, #0]
 8007d4c:	6113      	str	r3, [r2, #16]
 8007d4e:	e798      	b.n	8007c82 <__mdiff+0x32>
 8007d50:	4684      	mov	ip, r0
 8007d52:	ce02      	ldmia	r6!, {r1}
 8007d54:	b288      	uxth	r0, r1
 8007d56:	4460      	add	r0, ip
 8007d58:	1400      	asrs	r0, r0, #16
 8007d5a:	0c0c      	lsrs	r4, r1, #16
 8007d5c:	1904      	adds	r4, r0, r4
 8007d5e:	4461      	add	r1, ip
 8007d60:	1420      	asrs	r0, r4, #16
 8007d62:	b289      	uxth	r1, r1
 8007d64:	0424      	lsls	r4, r4, #16
 8007d66:	4321      	orrs	r1, r4
 8007d68:	c702      	stmia	r7!, {r1}
 8007d6a:	e7dc      	b.n	8007d26 <__mdiff+0xd6>
 8007d6c:	9900      	ldr	r1, [sp, #0]
 8007d6e:	3901      	subs	r1, #1
 8007d70:	9100      	str	r1, [sp, #0]
 8007d72:	e7e6      	b.n	8007d42 <__mdiff+0xf2>
 8007d74:	08009fd9 	.word	0x08009fd9
 8007d78:	08009fea 	.word	0x08009fea
 8007d7c:	00000237 	.word	0x00000237
 8007d80:	00000245 	.word	0x00000245

08007d84 <__ulp>:
 8007d84:	b510      	push	{r4, lr}
 8007d86:	2400      	movs	r4, #0
 8007d88:	4b0c      	ldr	r3, [pc, #48]	@ (8007dbc <__ulp+0x38>)
 8007d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8007dc0 <__ulp+0x3c>)
 8007d8c:	400b      	ands	r3, r1
 8007d8e:	189b      	adds	r3, r3, r2
 8007d90:	42a3      	cmp	r3, r4
 8007d92:	dc06      	bgt.n	8007da2 <__ulp+0x1e>
 8007d94:	425b      	negs	r3, r3
 8007d96:	151a      	asrs	r2, r3, #20
 8007d98:	2a13      	cmp	r2, #19
 8007d9a:	dc05      	bgt.n	8007da8 <__ulp+0x24>
 8007d9c:	2380      	movs	r3, #128	@ 0x80
 8007d9e:	031b      	lsls	r3, r3, #12
 8007da0:	4113      	asrs	r3, r2
 8007da2:	0019      	movs	r1, r3
 8007da4:	0020      	movs	r0, r4
 8007da6:	bd10      	pop	{r4, pc}
 8007da8:	3a14      	subs	r2, #20
 8007daa:	2401      	movs	r4, #1
 8007dac:	2a1e      	cmp	r2, #30
 8007dae:	dc02      	bgt.n	8007db6 <__ulp+0x32>
 8007db0:	2480      	movs	r4, #128	@ 0x80
 8007db2:	0624      	lsls	r4, r4, #24
 8007db4:	40d4      	lsrs	r4, r2
 8007db6:	2300      	movs	r3, #0
 8007db8:	e7f3      	b.n	8007da2 <__ulp+0x1e>
 8007dba:	46c0      	nop			@ (mov r8, r8)
 8007dbc:	7ff00000 	.word	0x7ff00000
 8007dc0:	fcc00000 	.word	0xfcc00000

08007dc4 <__b2d>:
 8007dc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dc6:	0006      	movs	r6, r0
 8007dc8:	6903      	ldr	r3, [r0, #16]
 8007dca:	3614      	adds	r6, #20
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	18f3      	adds	r3, r6, r3
 8007dd0:	1f1d      	subs	r5, r3, #4
 8007dd2:	682c      	ldr	r4, [r5, #0]
 8007dd4:	000f      	movs	r7, r1
 8007dd6:	0020      	movs	r0, r4
 8007dd8:	9301      	str	r3, [sp, #4]
 8007dda:	f7ff fd43 	bl	8007864 <__hi0bits>
 8007dde:	2220      	movs	r2, #32
 8007de0:	1a12      	subs	r2, r2, r0
 8007de2:	603a      	str	r2, [r7, #0]
 8007de4:	0003      	movs	r3, r0
 8007de6:	4a1c      	ldr	r2, [pc, #112]	@ (8007e58 <__b2d+0x94>)
 8007de8:	280a      	cmp	r0, #10
 8007dea:	dc15      	bgt.n	8007e18 <__b2d+0x54>
 8007dec:	210b      	movs	r1, #11
 8007dee:	0027      	movs	r7, r4
 8007df0:	1a09      	subs	r1, r1, r0
 8007df2:	40cf      	lsrs	r7, r1
 8007df4:	433a      	orrs	r2, r7
 8007df6:	468c      	mov	ip, r1
 8007df8:	0011      	movs	r1, r2
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	42ae      	cmp	r6, r5
 8007dfe:	d202      	bcs.n	8007e06 <__b2d+0x42>
 8007e00:	9a01      	ldr	r2, [sp, #4]
 8007e02:	3a08      	subs	r2, #8
 8007e04:	6812      	ldr	r2, [r2, #0]
 8007e06:	3315      	adds	r3, #21
 8007e08:	409c      	lsls	r4, r3
 8007e0a:	4663      	mov	r3, ip
 8007e0c:	0027      	movs	r7, r4
 8007e0e:	40da      	lsrs	r2, r3
 8007e10:	4317      	orrs	r7, r2
 8007e12:	0038      	movs	r0, r7
 8007e14:	b003      	add	sp, #12
 8007e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e18:	2700      	movs	r7, #0
 8007e1a:	42ae      	cmp	r6, r5
 8007e1c:	d202      	bcs.n	8007e24 <__b2d+0x60>
 8007e1e:	9d01      	ldr	r5, [sp, #4]
 8007e20:	3d08      	subs	r5, #8
 8007e22:	682f      	ldr	r7, [r5, #0]
 8007e24:	210b      	movs	r1, #11
 8007e26:	4249      	negs	r1, r1
 8007e28:	468c      	mov	ip, r1
 8007e2a:	449c      	add	ip, r3
 8007e2c:	2b0b      	cmp	r3, #11
 8007e2e:	d010      	beq.n	8007e52 <__b2d+0x8e>
 8007e30:	4661      	mov	r1, ip
 8007e32:	2320      	movs	r3, #32
 8007e34:	408c      	lsls	r4, r1
 8007e36:	1a5b      	subs	r3, r3, r1
 8007e38:	0039      	movs	r1, r7
 8007e3a:	40d9      	lsrs	r1, r3
 8007e3c:	430c      	orrs	r4, r1
 8007e3e:	4322      	orrs	r2, r4
 8007e40:	0011      	movs	r1, r2
 8007e42:	2200      	movs	r2, #0
 8007e44:	42b5      	cmp	r5, r6
 8007e46:	d901      	bls.n	8007e4c <__b2d+0x88>
 8007e48:	3d04      	subs	r5, #4
 8007e4a:	682a      	ldr	r2, [r5, #0]
 8007e4c:	4664      	mov	r4, ip
 8007e4e:	40a7      	lsls	r7, r4
 8007e50:	e7dd      	b.n	8007e0e <__b2d+0x4a>
 8007e52:	4322      	orrs	r2, r4
 8007e54:	0011      	movs	r1, r2
 8007e56:	e7dc      	b.n	8007e12 <__b2d+0x4e>
 8007e58:	3ff00000 	.word	0x3ff00000

08007e5c <__d2b>:
 8007e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e5e:	2101      	movs	r1, #1
 8007e60:	0016      	movs	r6, r2
 8007e62:	001f      	movs	r7, r3
 8007e64:	f7ff fc06 	bl	8007674 <_Balloc>
 8007e68:	1e04      	subs	r4, r0, #0
 8007e6a:	d105      	bne.n	8007e78 <__d2b+0x1c>
 8007e6c:	0022      	movs	r2, r4
 8007e6e:	4b25      	ldr	r3, [pc, #148]	@ (8007f04 <__d2b+0xa8>)
 8007e70:	4825      	ldr	r0, [pc, #148]	@ (8007f08 <__d2b+0xac>)
 8007e72:	4926      	ldr	r1, [pc, #152]	@ (8007f0c <__d2b+0xb0>)
 8007e74:	f001 fa50 	bl	8009318 <__assert_func>
 8007e78:	033b      	lsls	r3, r7, #12
 8007e7a:	007d      	lsls	r5, r7, #1
 8007e7c:	0b1b      	lsrs	r3, r3, #12
 8007e7e:	0d6d      	lsrs	r5, r5, #21
 8007e80:	d002      	beq.n	8007e88 <__d2b+0x2c>
 8007e82:	2280      	movs	r2, #128	@ 0x80
 8007e84:	0352      	lsls	r2, r2, #13
 8007e86:	4313      	orrs	r3, r2
 8007e88:	9301      	str	r3, [sp, #4]
 8007e8a:	2e00      	cmp	r6, #0
 8007e8c:	d025      	beq.n	8007eda <__d2b+0x7e>
 8007e8e:	4668      	mov	r0, sp
 8007e90:	9600      	str	r6, [sp, #0]
 8007e92:	f7ff fd08 	bl	80078a6 <__lo0bits>
 8007e96:	9b01      	ldr	r3, [sp, #4]
 8007e98:	9900      	ldr	r1, [sp, #0]
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d01b      	beq.n	8007ed6 <__d2b+0x7a>
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	001e      	movs	r6, r3
 8007ea2:	1a12      	subs	r2, r2, r0
 8007ea4:	4096      	lsls	r6, r2
 8007ea6:	0032      	movs	r2, r6
 8007ea8:	40c3      	lsrs	r3, r0
 8007eaa:	430a      	orrs	r2, r1
 8007eac:	6162      	str	r2, [r4, #20]
 8007eae:	9301      	str	r3, [sp, #4]
 8007eb0:	9e01      	ldr	r6, [sp, #4]
 8007eb2:	61a6      	str	r6, [r4, #24]
 8007eb4:	1e73      	subs	r3, r6, #1
 8007eb6:	419e      	sbcs	r6, r3
 8007eb8:	3601      	adds	r6, #1
 8007eba:	6126      	str	r6, [r4, #16]
 8007ebc:	2d00      	cmp	r5, #0
 8007ebe:	d014      	beq.n	8007eea <__d2b+0x8e>
 8007ec0:	2635      	movs	r6, #53	@ 0x35
 8007ec2:	4b13      	ldr	r3, [pc, #76]	@ (8007f10 <__d2b+0xb4>)
 8007ec4:	18ed      	adds	r5, r5, r3
 8007ec6:	9b08      	ldr	r3, [sp, #32]
 8007ec8:	182d      	adds	r5, r5, r0
 8007eca:	601d      	str	r5, [r3, #0]
 8007ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ece:	1a36      	subs	r6, r6, r0
 8007ed0:	601e      	str	r6, [r3, #0]
 8007ed2:	0020      	movs	r0, r4
 8007ed4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ed6:	6161      	str	r1, [r4, #20]
 8007ed8:	e7ea      	b.n	8007eb0 <__d2b+0x54>
 8007eda:	a801      	add	r0, sp, #4
 8007edc:	f7ff fce3 	bl	80078a6 <__lo0bits>
 8007ee0:	9b01      	ldr	r3, [sp, #4]
 8007ee2:	2601      	movs	r6, #1
 8007ee4:	6163      	str	r3, [r4, #20]
 8007ee6:	3020      	adds	r0, #32
 8007ee8:	e7e7      	b.n	8007eba <__d2b+0x5e>
 8007eea:	4b0a      	ldr	r3, [pc, #40]	@ (8007f14 <__d2b+0xb8>)
 8007eec:	18c0      	adds	r0, r0, r3
 8007eee:	9b08      	ldr	r3, [sp, #32]
 8007ef0:	6018      	str	r0, [r3, #0]
 8007ef2:	4b09      	ldr	r3, [pc, #36]	@ (8007f18 <__d2b+0xbc>)
 8007ef4:	18f3      	adds	r3, r6, r3
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	18e3      	adds	r3, r4, r3
 8007efa:	6958      	ldr	r0, [r3, #20]
 8007efc:	f7ff fcb2 	bl	8007864 <__hi0bits>
 8007f00:	0176      	lsls	r6, r6, #5
 8007f02:	e7e3      	b.n	8007ecc <__d2b+0x70>
 8007f04:	08009fd9 	.word	0x08009fd9
 8007f08:	08009fea 	.word	0x08009fea
 8007f0c:	0000030f 	.word	0x0000030f
 8007f10:	fffffbcd 	.word	0xfffffbcd
 8007f14:	fffffbce 	.word	0xfffffbce
 8007f18:	3fffffff 	.word	0x3fffffff

08007f1c <__ratio>:
 8007f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	000f      	movs	r7, r1
 8007f22:	a904      	add	r1, sp, #16
 8007f24:	0006      	movs	r6, r0
 8007f26:	f7ff ff4d 	bl	8007dc4 <__b2d>
 8007f2a:	9000      	str	r0, [sp, #0]
 8007f2c:	9101      	str	r1, [sp, #4]
 8007f2e:	9b00      	ldr	r3, [sp, #0]
 8007f30:	9c01      	ldr	r4, [sp, #4]
 8007f32:	0038      	movs	r0, r7
 8007f34:	a905      	add	r1, sp, #20
 8007f36:	9302      	str	r3, [sp, #8]
 8007f38:	9403      	str	r4, [sp, #12]
 8007f3a:	f7ff ff43 	bl	8007dc4 <__b2d>
 8007f3e:	000d      	movs	r5, r1
 8007f40:	0002      	movs	r2, r0
 8007f42:	000b      	movs	r3, r1
 8007f44:	6930      	ldr	r0, [r6, #16]
 8007f46:	6939      	ldr	r1, [r7, #16]
 8007f48:	9e04      	ldr	r6, [sp, #16]
 8007f4a:	1a40      	subs	r0, r0, r1
 8007f4c:	9905      	ldr	r1, [sp, #20]
 8007f4e:	0140      	lsls	r0, r0, #5
 8007f50:	1a71      	subs	r1, r6, r1
 8007f52:	1841      	adds	r1, r0, r1
 8007f54:	0508      	lsls	r0, r1, #20
 8007f56:	2900      	cmp	r1, #0
 8007f58:	dd08      	ble.n	8007f6c <__ratio+0x50>
 8007f5a:	9901      	ldr	r1, [sp, #4]
 8007f5c:	1841      	adds	r1, r0, r1
 8007f5e:	9103      	str	r1, [sp, #12]
 8007f60:	9802      	ldr	r0, [sp, #8]
 8007f62:	9903      	ldr	r1, [sp, #12]
 8007f64:	f7f8 fed4 	bl	8000d10 <__aeabi_ddiv>
 8007f68:	b007      	add	sp, #28
 8007f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f6c:	1a2b      	subs	r3, r5, r0
 8007f6e:	e7f7      	b.n	8007f60 <__ratio+0x44>

08007f70 <__copybits>:
 8007f70:	b570      	push	{r4, r5, r6, lr}
 8007f72:	0014      	movs	r4, r2
 8007f74:	0005      	movs	r5, r0
 8007f76:	3901      	subs	r1, #1
 8007f78:	6913      	ldr	r3, [r2, #16]
 8007f7a:	1149      	asrs	r1, r1, #5
 8007f7c:	3101      	adds	r1, #1
 8007f7e:	0089      	lsls	r1, r1, #2
 8007f80:	3414      	adds	r4, #20
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	1841      	adds	r1, r0, r1
 8007f86:	18e3      	adds	r3, r4, r3
 8007f88:	42a3      	cmp	r3, r4
 8007f8a:	d80d      	bhi.n	8007fa8 <__copybits+0x38>
 8007f8c:	0014      	movs	r4, r2
 8007f8e:	3411      	adds	r4, #17
 8007f90:	2500      	movs	r5, #0
 8007f92:	42a3      	cmp	r3, r4
 8007f94:	d303      	bcc.n	8007f9e <__copybits+0x2e>
 8007f96:	1a9b      	subs	r3, r3, r2
 8007f98:	3b11      	subs	r3, #17
 8007f9a:	089b      	lsrs	r3, r3, #2
 8007f9c:	009d      	lsls	r5, r3, #2
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	1940      	adds	r0, r0, r5
 8007fa2:	4281      	cmp	r1, r0
 8007fa4:	d803      	bhi.n	8007fae <__copybits+0x3e>
 8007fa6:	bd70      	pop	{r4, r5, r6, pc}
 8007fa8:	cc40      	ldmia	r4!, {r6}
 8007faa:	c540      	stmia	r5!, {r6}
 8007fac:	e7ec      	b.n	8007f88 <__copybits+0x18>
 8007fae:	c008      	stmia	r0!, {r3}
 8007fb0:	e7f7      	b.n	8007fa2 <__copybits+0x32>

08007fb2 <__any_on>:
 8007fb2:	0002      	movs	r2, r0
 8007fb4:	6900      	ldr	r0, [r0, #16]
 8007fb6:	b510      	push	{r4, lr}
 8007fb8:	3214      	adds	r2, #20
 8007fba:	114b      	asrs	r3, r1, #5
 8007fbc:	4298      	cmp	r0, r3
 8007fbe:	db13      	blt.n	8007fe8 <__any_on+0x36>
 8007fc0:	dd0c      	ble.n	8007fdc <__any_on+0x2a>
 8007fc2:	241f      	movs	r4, #31
 8007fc4:	0008      	movs	r0, r1
 8007fc6:	4020      	ands	r0, r4
 8007fc8:	4221      	tst	r1, r4
 8007fca:	d007      	beq.n	8007fdc <__any_on+0x2a>
 8007fcc:	0099      	lsls	r1, r3, #2
 8007fce:	588c      	ldr	r4, [r1, r2]
 8007fd0:	0021      	movs	r1, r4
 8007fd2:	40c1      	lsrs	r1, r0
 8007fd4:	4081      	lsls	r1, r0
 8007fd6:	2001      	movs	r0, #1
 8007fd8:	428c      	cmp	r4, r1
 8007fda:	d104      	bne.n	8007fe6 <__any_on+0x34>
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	18d3      	adds	r3, r2, r3
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d803      	bhi.n	8007fec <__any_on+0x3a>
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	bd10      	pop	{r4, pc}
 8007fe8:	0003      	movs	r3, r0
 8007fea:	e7f7      	b.n	8007fdc <__any_on+0x2a>
 8007fec:	3b04      	subs	r3, #4
 8007fee:	6819      	ldr	r1, [r3, #0]
 8007ff0:	2900      	cmp	r1, #0
 8007ff2:	d0f5      	beq.n	8007fe0 <__any_on+0x2e>
 8007ff4:	2001      	movs	r0, #1
 8007ff6:	e7f6      	b.n	8007fe6 <__any_on+0x34>

08007ff8 <sulp>:
 8007ff8:	b570      	push	{r4, r5, r6, lr}
 8007ffa:	0016      	movs	r6, r2
 8007ffc:	000d      	movs	r5, r1
 8007ffe:	f7ff fec1 	bl	8007d84 <__ulp>
 8008002:	2e00      	cmp	r6, #0
 8008004:	d00d      	beq.n	8008022 <sulp+0x2a>
 8008006:	236b      	movs	r3, #107	@ 0x6b
 8008008:	006a      	lsls	r2, r5, #1
 800800a:	0d52      	lsrs	r2, r2, #21
 800800c:	1a9b      	subs	r3, r3, r2
 800800e:	2b00      	cmp	r3, #0
 8008010:	dd07      	ble.n	8008022 <sulp+0x2a>
 8008012:	2400      	movs	r4, #0
 8008014:	4a03      	ldr	r2, [pc, #12]	@ (8008024 <sulp+0x2c>)
 8008016:	051b      	lsls	r3, r3, #20
 8008018:	189d      	adds	r5, r3, r2
 800801a:	002b      	movs	r3, r5
 800801c:	0022      	movs	r2, r4
 800801e:	f7f9 fab1 	bl	8001584 <__aeabi_dmul>
 8008022:	bd70      	pop	{r4, r5, r6, pc}
 8008024:	3ff00000 	.word	0x3ff00000

08008028 <_strtod_l>:
 8008028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800802a:	b0a3      	sub	sp, #140	@ 0x8c
 800802c:	921b      	str	r2, [sp, #108]	@ 0x6c
 800802e:	2200      	movs	r2, #0
 8008030:	2600      	movs	r6, #0
 8008032:	2700      	movs	r7, #0
 8008034:	9005      	str	r0, [sp, #20]
 8008036:	9109      	str	r1, [sp, #36]	@ 0x24
 8008038:	921e      	str	r2, [sp, #120]	@ 0x78
 800803a:	911d      	str	r1, [sp, #116]	@ 0x74
 800803c:	780a      	ldrb	r2, [r1, #0]
 800803e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008040:	d053      	beq.n	80080ea <_strtod_l+0xc2>
 8008042:	d83f      	bhi.n	80080c4 <_strtod_l+0x9c>
 8008044:	2a0d      	cmp	r2, #13
 8008046:	d839      	bhi.n	80080bc <_strtod_l+0x94>
 8008048:	2a08      	cmp	r2, #8
 800804a:	d839      	bhi.n	80080c0 <_strtod_l+0x98>
 800804c:	2a00      	cmp	r2, #0
 800804e:	d042      	beq.n	80080d6 <_strtod_l+0xae>
 8008050:	2200      	movs	r2, #0
 8008052:	9212      	str	r2, [sp, #72]	@ 0x48
 8008054:	2100      	movs	r1, #0
 8008056:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8008058:	910c      	str	r1, [sp, #48]	@ 0x30
 800805a:	782a      	ldrb	r2, [r5, #0]
 800805c:	2a30      	cmp	r2, #48	@ 0x30
 800805e:	d000      	beq.n	8008062 <_strtod_l+0x3a>
 8008060:	e083      	b.n	800816a <_strtod_l+0x142>
 8008062:	786a      	ldrb	r2, [r5, #1]
 8008064:	3120      	adds	r1, #32
 8008066:	438a      	bics	r2, r1
 8008068:	2a58      	cmp	r2, #88	@ 0x58
 800806a:	d000      	beq.n	800806e <_strtod_l+0x46>
 800806c:	e073      	b.n	8008156 <_strtod_l+0x12e>
 800806e:	9302      	str	r3, [sp, #8]
 8008070:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008072:	4a9b      	ldr	r2, [pc, #620]	@ (80082e0 <_strtod_l+0x2b8>)
 8008074:	9301      	str	r3, [sp, #4]
 8008076:	ab1e      	add	r3, sp, #120	@ 0x78
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	9805      	ldr	r0, [sp, #20]
 800807c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800807e:	a91d      	add	r1, sp, #116	@ 0x74
 8008080:	f001 f9fe 	bl	8009480 <__gethex>
 8008084:	230f      	movs	r3, #15
 8008086:	0002      	movs	r2, r0
 8008088:	401a      	ands	r2, r3
 800808a:	0004      	movs	r4, r0
 800808c:	9206      	str	r2, [sp, #24]
 800808e:	4218      	tst	r0, r3
 8008090:	d005      	beq.n	800809e <_strtod_l+0x76>
 8008092:	2a06      	cmp	r2, #6
 8008094:	d12b      	bne.n	80080ee <_strtod_l+0xc6>
 8008096:	2300      	movs	r3, #0
 8008098:	3501      	adds	r5, #1
 800809a:	951d      	str	r5, [sp, #116]	@ 0x74
 800809c:	9312      	str	r3, [sp, #72]	@ 0x48
 800809e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <_strtod_l+0x82>
 80080a4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80080a6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d019      	beq.n	80080e4 <_strtod_l+0xbc>
 80080b0:	2380      	movs	r3, #128	@ 0x80
 80080b2:	0030      	movs	r0, r6
 80080b4:	061b      	lsls	r3, r3, #24
 80080b6:	18f9      	adds	r1, r7, r3
 80080b8:	b023      	add	sp, #140	@ 0x8c
 80080ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080bc:	2a20      	cmp	r2, #32
 80080be:	d1c7      	bne.n	8008050 <_strtod_l+0x28>
 80080c0:	3101      	adds	r1, #1
 80080c2:	e7ba      	b.n	800803a <_strtod_l+0x12>
 80080c4:	2a2d      	cmp	r2, #45	@ 0x2d
 80080c6:	d1c3      	bne.n	8008050 <_strtod_l+0x28>
 80080c8:	3a2c      	subs	r2, #44	@ 0x2c
 80080ca:	9212      	str	r2, [sp, #72]	@ 0x48
 80080cc:	1c4a      	adds	r2, r1, #1
 80080ce:	921d      	str	r2, [sp, #116]	@ 0x74
 80080d0:	784a      	ldrb	r2, [r1, #1]
 80080d2:	2a00      	cmp	r2, #0
 80080d4:	d1be      	bne.n	8008054 <_strtod_l+0x2c>
 80080d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d8:	931d      	str	r3, [sp, #116]	@ 0x74
 80080da:	2300      	movs	r3, #0
 80080dc:	9312      	str	r3, [sp, #72]	@ 0x48
 80080de:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1df      	bne.n	80080a4 <_strtod_l+0x7c>
 80080e4:	0030      	movs	r0, r6
 80080e6:	0039      	movs	r1, r7
 80080e8:	e7e6      	b.n	80080b8 <_strtod_l+0x90>
 80080ea:	2200      	movs	r2, #0
 80080ec:	e7ed      	b.n	80080ca <_strtod_l+0xa2>
 80080ee:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80080f0:	2a00      	cmp	r2, #0
 80080f2:	d007      	beq.n	8008104 <_strtod_l+0xdc>
 80080f4:	2135      	movs	r1, #53	@ 0x35
 80080f6:	a820      	add	r0, sp, #128	@ 0x80
 80080f8:	f7ff ff3a 	bl	8007f70 <__copybits>
 80080fc:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80080fe:	9805      	ldr	r0, [sp, #20]
 8008100:	f7ff fafc 	bl	80076fc <_Bfree>
 8008104:	9806      	ldr	r0, [sp, #24]
 8008106:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008108:	3801      	subs	r0, #1
 800810a:	2804      	cmp	r0, #4
 800810c:	d806      	bhi.n	800811c <_strtod_l+0xf4>
 800810e:	f7f8 f803 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008112:	0312      	.short	0x0312
 8008114:	1e1c      	.short	0x1e1c
 8008116:	12          	.byte	0x12
 8008117:	00          	.byte	0x00
 8008118:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800811a:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 800811c:	05e4      	lsls	r4, r4, #23
 800811e:	d502      	bpl.n	8008126 <_strtod_l+0xfe>
 8008120:	2380      	movs	r3, #128	@ 0x80
 8008122:	061b      	lsls	r3, r3, #24
 8008124:	431f      	orrs	r7, r3
 8008126:	4b6f      	ldr	r3, [pc, #444]	@ (80082e4 <_strtod_l+0x2bc>)
 8008128:	423b      	tst	r3, r7
 800812a:	d1b8      	bne.n	800809e <_strtod_l+0x76>
 800812c:	f7fe faea 	bl	8006704 <__errno>
 8008130:	2322      	movs	r3, #34	@ 0x22
 8008132:	6003      	str	r3, [r0, #0]
 8008134:	e7b3      	b.n	800809e <_strtod_l+0x76>
 8008136:	496c      	ldr	r1, [pc, #432]	@ (80082e8 <_strtod_l+0x2c0>)
 8008138:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800813a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800813c:	400a      	ands	r2, r1
 800813e:	496b      	ldr	r1, [pc, #428]	@ (80082ec <_strtod_l+0x2c4>)
 8008140:	185b      	adds	r3, r3, r1
 8008142:	051b      	lsls	r3, r3, #20
 8008144:	431a      	orrs	r2, r3
 8008146:	0017      	movs	r7, r2
 8008148:	e7e8      	b.n	800811c <_strtod_l+0xf4>
 800814a:	4f66      	ldr	r7, [pc, #408]	@ (80082e4 <_strtod_l+0x2bc>)
 800814c:	e7e6      	b.n	800811c <_strtod_l+0xf4>
 800814e:	2601      	movs	r6, #1
 8008150:	4f67      	ldr	r7, [pc, #412]	@ (80082f0 <_strtod_l+0x2c8>)
 8008152:	4276      	negs	r6, r6
 8008154:	e7e2      	b.n	800811c <_strtod_l+0xf4>
 8008156:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008158:	1c5a      	adds	r2, r3, #1
 800815a:	921d      	str	r2, [sp, #116]	@ 0x74
 800815c:	785b      	ldrb	r3, [r3, #1]
 800815e:	2b30      	cmp	r3, #48	@ 0x30
 8008160:	d0f9      	beq.n	8008156 <_strtod_l+0x12e>
 8008162:	2b00      	cmp	r3, #0
 8008164:	d09b      	beq.n	800809e <_strtod_l+0x76>
 8008166:	2301      	movs	r3, #1
 8008168:	930c      	str	r3, [sp, #48]	@ 0x30
 800816a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800816c:	220a      	movs	r2, #10
 800816e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008170:	2300      	movs	r3, #0
 8008172:	9310      	str	r3, [sp, #64]	@ 0x40
 8008174:	930d      	str	r3, [sp, #52]	@ 0x34
 8008176:	9308      	str	r3, [sp, #32]
 8008178:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800817a:	7804      	ldrb	r4, [r0, #0]
 800817c:	0023      	movs	r3, r4
 800817e:	3b30      	subs	r3, #48	@ 0x30
 8008180:	b2d9      	uxtb	r1, r3
 8008182:	2909      	cmp	r1, #9
 8008184:	d927      	bls.n	80081d6 <_strtod_l+0x1ae>
 8008186:	2201      	movs	r2, #1
 8008188:	495a      	ldr	r1, [pc, #360]	@ (80082f4 <_strtod_l+0x2cc>)
 800818a:	f001 f86e 	bl	800926a <strncmp>
 800818e:	2800      	cmp	r0, #0
 8008190:	d033      	beq.n	80081fa <_strtod_l+0x1d2>
 8008192:	2000      	movs	r0, #0
 8008194:	0023      	movs	r3, r4
 8008196:	4684      	mov	ip, r0
 8008198:	9a08      	ldr	r2, [sp, #32]
 800819a:	900e      	str	r0, [sp, #56]	@ 0x38
 800819c:	9206      	str	r2, [sp, #24]
 800819e:	2220      	movs	r2, #32
 80081a0:	0019      	movs	r1, r3
 80081a2:	4391      	bics	r1, r2
 80081a4:	000a      	movs	r2, r1
 80081a6:	2100      	movs	r1, #0
 80081a8:	9107      	str	r1, [sp, #28]
 80081aa:	2a45      	cmp	r2, #69	@ 0x45
 80081ac:	d000      	beq.n	80081b0 <_strtod_l+0x188>
 80081ae:	e0cb      	b.n	8008348 <_strtod_l+0x320>
 80081b0:	9b06      	ldr	r3, [sp, #24]
 80081b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80081b4:	4303      	orrs	r3, r0
 80081b6:	4313      	orrs	r3, r2
 80081b8:	428b      	cmp	r3, r1
 80081ba:	d08c      	beq.n	80080d6 <_strtod_l+0xae>
 80081bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80081be:	9309      	str	r3, [sp, #36]	@ 0x24
 80081c0:	3301      	adds	r3, #1
 80081c2:	931d      	str	r3, [sp, #116]	@ 0x74
 80081c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	2b2b      	cmp	r3, #43	@ 0x2b
 80081ca:	d07b      	beq.n	80082c4 <_strtod_l+0x29c>
 80081cc:	000c      	movs	r4, r1
 80081ce:	2b2d      	cmp	r3, #45	@ 0x2d
 80081d0:	d17e      	bne.n	80082d0 <_strtod_l+0x2a8>
 80081d2:	2401      	movs	r4, #1
 80081d4:	e077      	b.n	80082c6 <_strtod_l+0x29e>
 80081d6:	9908      	ldr	r1, [sp, #32]
 80081d8:	2908      	cmp	r1, #8
 80081da:	dc09      	bgt.n	80081f0 <_strtod_l+0x1c8>
 80081dc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80081de:	4351      	muls	r1, r2
 80081e0:	185b      	adds	r3, r3, r1
 80081e2:	930d      	str	r3, [sp, #52]	@ 0x34
 80081e4:	9b08      	ldr	r3, [sp, #32]
 80081e6:	3001      	adds	r0, #1
 80081e8:	3301      	adds	r3, #1
 80081ea:	9308      	str	r3, [sp, #32]
 80081ec:	901d      	str	r0, [sp, #116]	@ 0x74
 80081ee:	e7c3      	b.n	8008178 <_strtod_l+0x150>
 80081f0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80081f2:	4355      	muls	r5, r2
 80081f4:	195b      	adds	r3, r3, r5
 80081f6:	9310      	str	r3, [sp, #64]	@ 0x40
 80081f8:	e7f4      	b.n	80081e4 <_strtod_l+0x1bc>
 80081fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80081fc:	1c5a      	adds	r2, r3, #1
 80081fe:	921d      	str	r2, [sp, #116]	@ 0x74
 8008200:	9a08      	ldr	r2, [sp, #32]
 8008202:	785b      	ldrb	r3, [r3, #1]
 8008204:	2a00      	cmp	r2, #0
 8008206:	d03e      	beq.n	8008286 <_strtod_l+0x25e>
 8008208:	900e      	str	r0, [sp, #56]	@ 0x38
 800820a:	9206      	str	r2, [sp, #24]
 800820c:	001a      	movs	r2, r3
 800820e:	3a30      	subs	r2, #48	@ 0x30
 8008210:	2a09      	cmp	r2, #9
 8008212:	d912      	bls.n	800823a <_strtod_l+0x212>
 8008214:	2201      	movs	r2, #1
 8008216:	4694      	mov	ip, r2
 8008218:	e7c1      	b.n	800819e <_strtod_l+0x176>
 800821a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800821c:	3001      	adds	r0, #1
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	921d      	str	r2, [sp, #116]	@ 0x74
 8008222:	785b      	ldrb	r3, [r3, #1]
 8008224:	2b30      	cmp	r3, #48	@ 0x30
 8008226:	d0f8      	beq.n	800821a <_strtod_l+0x1f2>
 8008228:	001a      	movs	r2, r3
 800822a:	3a31      	subs	r2, #49	@ 0x31
 800822c:	2a08      	cmp	r2, #8
 800822e:	d844      	bhi.n	80082ba <_strtod_l+0x292>
 8008230:	900e      	str	r0, [sp, #56]	@ 0x38
 8008232:	2000      	movs	r0, #0
 8008234:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8008236:	9006      	str	r0, [sp, #24]
 8008238:	9213      	str	r2, [sp, #76]	@ 0x4c
 800823a:	001c      	movs	r4, r3
 800823c:	1c42      	adds	r2, r0, #1
 800823e:	3c30      	subs	r4, #48	@ 0x30
 8008240:	2b30      	cmp	r3, #48	@ 0x30
 8008242:	d01a      	beq.n	800827a <_strtod_l+0x252>
 8008244:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008246:	9906      	ldr	r1, [sp, #24]
 8008248:	189b      	adds	r3, r3, r2
 800824a:	930e      	str	r3, [sp, #56]	@ 0x38
 800824c:	230a      	movs	r3, #10
 800824e:	469c      	mov	ip, r3
 8008250:	9d06      	ldr	r5, [sp, #24]
 8008252:	1c4b      	adds	r3, r1, #1
 8008254:	1b5d      	subs	r5, r3, r5
 8008256:	42aa      	cmp	r2, r5
 8008258:	dc17      	bgt.n	800828a <_strtod_l+0x262>
 800825a:	43c3      	mvns	r3, r0
 800825c:	9a06      	ldr	r2, [sp, #24]
 800825e:	17db      	asrs	r3, r3, #31
 8008260:	4003      	ands	r3, r0
 8008262:	18d1      	adds	r1, r2, r3
 8008264:	3201      	adds	r2, #1
 8008266:	18d3      	adds	r3, r2, r3
 8008268:	9306      	str	r3, [sp, #24]
 800826a:	2908      	cmp	r1, #8
 800826c:	dc1c      	bgt.n	80082a8 <_strtod_l+0x280>
 800826e:	230a      	movs	r3, #10
 8008270:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008272:	4353      	muls	r3, r2
 8008274:	2200      	movs	r2, #0
 8008276:	18e3      	adds	r3, r4, r3
 8008278:	930d      	str	r3, [sp, #52]	@ 0x34
 800827a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800827c:	0010      	movs	r0, r2
 800827e:	1c59      	adds	r1, r3, #1
 8008280:	911d      	str	r1, [sp, #116]	@ 0x74
 8008282:	785b      	ldrb	r3, [r3, #1]
 8008284:	e7c2      	b.n	800820c <_strtod_l+0x1e4>
 8008286:	9808      	ldr	r0, [sp, #32]
 8008288:	e7cc      	b.n	8008224 <_strtod_l+0x1fc>
 800828a:	2908      	cmp	r1, #8
 800828c:	dc05      	bgt.n	800829a <_strtod_l+0x272>
 800828e:	4665      	mov	r5, ip
 8008290:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008292:	4369      	muls	r1, r5
 8008294:	910d      	str	r1, [sp, #52]	@ 0x34
 8008296:	0019      	movs	r1, r3
 8008298:	e7da      	b.n	8008250 <_strtod_l+0x228>
 800829a:	2b10      	cmp	r3, #16
 800829c:	dcfb      	bgt.n	8008296 <_strtod_l+0x26e>
 800829e:	4661      	mov	r1, ip
 80082a0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80082a2:	434d      	muls	r5, r1
 80082a4:	9510      	str	r5, [sp, #64]	@ 0x40
 80082a6:	e7f6      	b.n	8008296 <_strtod_l+0x26e>
 80082a8:	2200      	movs	r2, #0
 80082aa:	290f      	cmp	r1, #15
 80082ac:	dce5      	bgt.n	800827a <_strtod_l+0x252>
 80082ae:	230a      	movs	r3, #10
 80082b0:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80082b2:	435d      	muls	r5, r3
 80082b4:	1963      	adds	r3, r4, r5
 80082b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80082b8:	e7df      	b.n	800827a <_strtod_l+0x252>
 80082ba:	2200      	movs	r2, #0
 80082bc:	920e      	str	r2, [sp, #56]	@ 0x38
 80082be:	9206      	str	r2, [sp, #24]
 80082c0:	3201      	adds	r2, #1
 80082c2:	e7a8      	b.n	8008216 <_strtod_l+0x1ee>
 80082c4:	2400      	movs	r4, #0
 80082c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c8:	3302      	adds	r3, #2
 80082ca:	931d      	str	r3, [sp, #116]	@ 0x74
 80082cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082ce:	789b      	ldrb	r3, [r3, #2]
 80082d0:	001a      	movs	r2, r3
 80082d2:	3a30      	subs	r2, #48	@ 0x30
 80082d4:	2a09      	cmp	r2, #9
 80082d6:	d913      	bls.n	8008300 <_strtod_l+0x2d8>
 80082d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082da:	921d      	str	r2, [sp, #116]	@ 0x74
 80082dc:	2200      	movs	r2, #0
 80082de:	e032      	b.n	8008346 <_strtod_l+0x31e>
 80082e0:	0800a20c 	.word	0x0800a20c
 80082e4:	7ff00000 	.word	0x7ff00000
 80082e8:	ffefffff 	.word	0xffefffff
 80082ec:	00000433 	.word	0x00000433
 80082f0:	7fffffff 	.word	0x7fffffff
 80082f4:	0800a043 	.word	0x0800a043
 80082f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80082fa:	1c5a      	adds	r2, r3, #1
 80082fc:	921d      	str	r2, [sp, #116]	@ 0x74
 80082fe:	785b      	ldrb	r3, [r3, #1]
 8008300:	2b30      	cmp	r3, #48	@ 0x30
 8008302:	d0f9      	beq.n	80082f8 <_strtod_l+0x2d0>
 8008304:	2200      	movs	r2, #0
 8008306:	9207      	str	r2, [sp, #28]
 8008308:	001a      	movs	r2, r3
 800830a:	3a31      	subs	r2, #49	@ 0x31
 800830c:	2a08      	cmp	r2, #8
 800830e:	d81b      	bhi.n	8008348 <_strtod_l+0x320>
 8008310:	3b30      	subs	r3, #48	@ 0x30
 8008312:	001a      	movs	r2, r3
 8008314:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008316:	9307      	str	r3, [sp, #28]
 8008318:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800831a:	1c59      	adds	r1, r3, #1
 800831c:	911d      	str	r1, [sp, #116]	@ 0x74
 800831e:	785b      	ldrb	r3, [r3, #1]
 8008320:	001d      	movs	r5, r3
 8008322:	3d30      	subs	r5, #48	@ 0x30
 8008324:	2d09      	cmp	r5, #9
 8008326:	d93a      	bls.n	800839e <_strtod_l+0x376>
 8008328:	9d07      	ldr	r5, [sp, #28]
 800832a:	1b49      	subs	r1, r1, r5
 800832c:	000d      	movs	r5, r1
 800832e:	49b3      	ldr	r1, [pc, #716]	@ (80085fc <_strtod_l+0x5d4>)
 8008330:	9107      	str	r1, [sp, #28]
 8008332:	2d08      	cmp	r5, #8
 8008334:	dc03      	bgt.n	800833e <_strtod_l+0x316>
 8008336:	9207      	str	r2, [sp, #28]
 8008338:	428a      	cmp	r2, r1
 800833a:	dd00      	ble.n	800833e <_strtod_l+0x316>
 800833c:	9107      	str	r1, [sp, #28]
 800833e:	2c00      	cmp	r4, #0
 8008340:	d002      	beq.n	8008348 <_strtod_l+0x320>
 8008342:	9a07      	ldr	r2, [sp, #28]
 8008344:	4252      	negs	r2, r2
 8008346:	9207      	str	r2, [sp, #28]
 8008348:	9a06      	ldr	r2, [sp, #24]
 800834a:	2a00      	cmp	r2, #0
 800834c:	d14b      	bne.n	80083e6 <_strtod_l+0x3be>
 800834e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008350:	4310      	orrs	r0, r2
 8008352:	d000      	beq.n	8008356 <_strtod_l+0x32e>
 8008354:	e6a3      	b.n	800809e <_strtod_l+0x76>
 8008356:	4662      	mov	r2, ip
 8008358:	2a00      	cmp	r2, #0
 800835a:	d000      	beq.n	800835e <_strtod_l+0x336>
 800835c:	e6bb      	b.n	80080d6 <_strtod_l+0xae>
 800835e:	2b69      	cmp	r3, #105	@ 0x69
 8008360:	d025      	beq.n	80083ae <_strtod_l+0x386>
 8008362:	dc21      	bgt.n	80083a8 <_strtod_l+0x380>
 8008364:	2b49      	cmp	r3, #73	@ 0x49
 8008366:	d022      	beq.n	80083ae <_strtod_l+0x386>
 8008368:	2b4e      	cmp	r3, #78	@ 0x4e
 800836a:	d000      	beq.n	800836e <_strtod_l+0x346>
 800836c:	e6b3      	b.n	80080d6 <_strtod_l+0xae>
 800836e:	49a4      	ldr	r1, [pc, #656]	@ (8008600 <_strtod_l+0x5d8>)
 8008370:	a81d      	add	r0, sp, #116	@ 0x74
 8008372:	f001 fabb 	bl	80098ec <__match>
 8008376:	2800      	cmp	r0, #0
 8008378:	d100      	bne.n	800837c <_strtod_l+0x354>
 800837a:	e6ac      	b.n	80080d6 <_strtod_l+0xae>
 800837c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	2b28      	cmp	r3, #40	@ 0x28
 8008382:	d12a      	bne.n	80083da <_strtod_l+0x3b2>
 8008384:	499f      	ldr	r1, [pc, #636]	@ (8008604 <_strtod_l+0x5dc>)
 8008386:	aa20      	add	r2, sp, #128	@ 0x80
 8008388:	a81d      	add	r0, sp, #116	@ 0x74
 800838a:	f001 fac3 	bl	8009914 <__hexnan>
 800838e:	2805      	cmp	r0, #5
 8008390:	d123      	bne.n	80083da <_strtod_l+0x3b2>
 8008392:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008394:	4a9c      	ldr	r2, [pc, #624]	@ (8008608 <_strtod_l+0x5e0>)
 8008396:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008398:	431a      	orrs	r2, r3
 800839a:	0017      	movs	r7, r2
 800839c:	e67f      	b.n	800809e <_strtod_l+0x76>
 800839e:	210a      	movs	r1, #10
 80083a0:	434a      	muls	r2, r1
 80083a2:	18d2      	adds	r2, r2, r3
 80083a4:	3a30      	subs	r2, #48	@ 0x30
 80083a6:	e7b7      	b.n	8008318 <_strtod_l+0x2f0>
 80083a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80083aa:	d0e0      	beq.n	800836e <_strtod_l+0x346>
 80083ac:	e693      	b.n	80080d6 <_strtod_l+0xae>
 80083ae:	4997      	ldr	r1, [pc, #604]	@ (800860c <_strtod_l+0x5e4>)
 80083b0:	a81d      	add	r0, sp, #116	@ 0x74
 80083b2:	f001 fa9b 	bl	80098ec <__match>
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d100      	bne.n	80083bc <_strtod_l+0x394>
 80083ba:	e68c      	b.n	80080d6 <_strtod_l+0xae>
 80083bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80083be:	4994      	ldr	r1, [pc, #592]	@ (8008610 <_strtod_l+0x5e8>)
 80083c0:	3b01      	subs	r3, #1
 80083c2:	a81d      	add	r0, sp, #116	@ 0x74
 80083c4:	931d      	str	r3, [sp, #116]	@ 0x74
 80083c6:	f001 fa91 	bl	80098ec <__match>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	d102      	bne.n	80083d4 <_strtod_l+0x3ac>
 80083ce:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80083d0:	3301      	adds	r3, #1
 80083d2:	931d      	str	r3, [sp, #116]	@ 0x74
 80083d4:	2600      	movs	r6, #0
 80083d6:	4f8c      	ldr	r7, [pc, #560]	@ (8008608 <_strtod_l+0x5e0>)
 80083d8:	e661      	b.n	800809e <_strtod_l+0x76>
 80083da:	488e      	ldr	r0, [pc, #568]	@ (8008614 <_strtod_l+0x5ec>)
 80083dc:	f000 ff96 	bl	800930c <nan>
 80083e0:	0006      	movs	r6, r0
 80083e2:	000f      	movs	r7, r1
 80083e4:	e65b      	b.n	800809e <_strtod_l+0x76>
 80083e6:	9b07      	ldr	r3, [sp, #28]
 80083e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083ea:	1a9b      	subs	r3, r3, r2
 80083ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80083ee:	9b08      	ldr	r3, [sp, #32]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <_strtod_l+0x3d0>
 80083f4:	9b06      	ldr	r3, [sp, #24]
 80083f6:	9308      	str	r3, [sp, #32]
 80083f8:	9c06      	ldr	r4, [sp, #24]
 80083fa:	2c10      	cmp	r4, #16
 80083fc:	dd00      	ble.n	8008400 <_strtod_l+0x3d8>
 80083fe:	2410      	movs	r4, #16
 8008400:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008402:	f7fa f83b 	bl	800247c <__aeabi_ui2d>
 8008406:	9b06      	ldr	r3, [sp, #24]
 8008408:	0006      	movs	r6, r0
 800840a:	000f      	movs	r7, r1
 800840c:	2b09      	cmp	r3, #9
 800840e:	dc13      	bgt.n	8008438 <_strtod_l+0x410>
 8008410:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008412:	2b00      	cmp	r3, #0
 8008414:	d100      	bne.n	8008418 <_strtod_l+0x3f0>
 8008416:	e642      	b.n	800809e <_strtod_l+0x76>
 8008418:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800841a:	2b00      	cmp	r3, #0
 800841c:	dc00      	bgt.n	8008420 <_strtod_l+0x3f8>
 800841e:	e07e      	b.n	800851e <_strtod_l+0x4f6>
 8008420:	2b16      	cmp	r3, #22
 8008422:	dc63      	bgt.n	80084ec <_strtod_l+0x4c4>
 8008424:	497c      	ldr	r1, [pc, #496]	@ (8008618 <_strtod_l+0x5f0>)
 8008426:	00db      	lsls	r3, r3, #3
 8008428:	18c9      	adds	r1, r1, r3
 800842a:	0032      	movs	r2, r6
 800842c:	6808      	ldr	r0, [r1, #0]
 800842e:	6849      	ldr	r1, [r1, #4]
 8008430:	003b      	movs	r3, r7
 8008432:	f7f9 f8a7 	bl	8001584 <__aeabi_dmul>
 8008436:	e7d3      	b.n	80083e0 <_strtod_l+0x3b8>
 8008438:	0022      	movs	r2, r4
 800843a:	4b77      	ldr	r3, [pc, #476]	@ (8008618 <_strtod_l+0x5f0>)
 800843c:	3a09      	subs	r2, #9
 800843e:	00d2      	lsls	r2, r2, #3
 8008440:	189b      	adds	r3, r3, r2
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	f7f9 f89d 	bl	8001584 <__aeabi_dmul>
 800844a:	0006      	movs	r6, r0
 800844c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800844e:	000f      	movs	r7, r1
 8008450:	f7fa f814 	bl	800247c <__aeabi_ui2d>
 8008454:	000b      	movs	r3, r1
 8008456:	0002      	movs	r2, r0
 8008458:	0039      	movs	r1, r7
 800845a:	0030      	movs	r0, r6
 800845c:	f7f8 f892 	bl	8000584 <__aeabi_dadd>
 8008460:	9b06      	ldr	r3, [sp, #24]
 8008462:	0006      	movs	r6, r0
 8008464:	000f      	movs	r7, r1
 8008466:	2b0f      	cmp	r3, #15
 8008468:	ddd2      	ble.n	8008410 <_strtod_l+0x3e8>
 800846a:	9b06      	ldr	r3, [sp, #24]
 800846c:	1b1c      	subs	r4, r3, r4
 800846e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008470:	18e4      	adds	r4, r4, r3
 8008472:	2c00      	cmp	r4, #0
 8008474:	dc00      	bgt.n	8008478 <_strtod_l+0x450>
 8008476:	e09b      	b.n	80085b0 <_strtod_l+0x588>
 8008478:	220f      	movs	r2, #15
 800847a:	0023      	movs	r3, r4
 800847c:	4013      	ands	r3, r2
 800847e:	4214      	tst	r4, r2
 8008480:	d00a      	beq.n	8008498 <_strtod_l+0x470>
 8008482:	4965      	ldr	r1, [pc, #404]	@ (8008618 <_strtod_l+0x5f0>)
 8008484:	00db      	lsls	r3, r3, #3
 8008486:	18c9      	adds	r1, r1, r3
 8008488:	0032      	movs	r2, r6
 800848a:	6808      	ldr	r0, [r1, #0]
 800848c:	6849      	ldr	r1, [r1, #4]
 800848e:	003b      	movs	r3, r7
 8008490:	f7f9 f878 	bl	8001584 <__aeabi_dmul>
 8008494:	0006      	movs	r6, r0
 8008496:	000f      	movs	r7, r1
 8008498:	230f      	movs	r3, #15
 800849a:	439c      	bics	r4, r3
 800849c:	d073      	beq.n	8008586 <_strtod_l+0x55e>
 800849e:	3326      	adds	r3, #38	@ 0x26
 80084a0:	33ff      	adds	r3, #255	@ 0xff
 80084a2:	429c      	cmp	r4, r3
 80084a4:	dd4b      	ble.n	800853e <_strtod_l+0x516>
 80084a6:	2300      	movs	r3, #0
 80084a8:	9306      	str	r3, [sp, #24]
 80084aa:	9307      	str	r3, [sp, #28]
 80084ac:	930d      	str	r3, [sp, #52]	@ 0x34
 80084ae:	9308      	str	r3, [sp, #32]
 80084b0:	2322      	movs	r3, #34	@ 0x22
 80084b2:	2600      	movs	r6, #0
 80084b4:	9a05      	ldr	r2, [sp, #20]
 80084b6:	4f54      	ldr	r7, [pc, #336]	@ (8008608 <_strtod_l+0x5e0>)
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084bc:	42b3      	cmp	r3, r6
 80084be:	d100      	bne.n	80084c2 <_strtod_l+0x49a>
 80084c0:	e5ed      	b.n	800809e <_strtod_l+0x76>
 80084c2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80084c4:	9805      	ldr	r0, [sp, #20]
 80084c6:	f7ff f919 	bl	80076fc <_Bfree>
 80084ca:	9908      	ldr	r1, [sp, #32]
 80084cc:	9805      	ldr	r0, [sp, #20]
 80084ce:	f7ff f915 	bl	80076fc <_Bfree>
 80084d2:	9907      	ldr	r1, [sp, #28]
 80084d4:	9805      	ldr	r0, [sp, #20]
 80084d6:	f7ff f911 	bl	80076fc <_Bfree>
 80084da:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80084dc:	9805      	ldr	r0, [sp, #20]
 80084de:	f7ff f90d 	bl	80076fc <_Bfree>
 80084e2:	9906      	ldr	r1, [sp, #24]
 80084e4:	9805      	ldr	r0, [sp, #20]
 80084e6:	f7ff f909 	bl	80076fc <_Bfree>
 80084ea:	e5d8      	b.n	800809e <_strtod_l+0x76>
 80084ec:	2325      	movs	r3, #37	@ 0x25
 80084ee:	9a06      	ldr	r2, [sp, #24]
 80084f0:	1a9b      	subs	r3, r3, r2
 80084f2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80084f4:	4293      	cmp	r3, r2
 80084f6:	dbb8      	blt.n	800846a <_strtod_l+0x442>
 80084f8:	240f      	movs	r4, #15
 80084fa:	9b06      	ldr	r3, [sp, #24]
 80084fc:	4d46      	ldr	r5, [pc, #280]	@ (8008618 <_strtod_l+0x5f0>)
 80084fe:	1ae4      	subs	r4, r4, r3
 8008500:	00e1      	lsls	r1, r4, #3
 8008502:	1869      	adds	r1, r5, r1
 8008504:	0032      	movs	r2, r6
 8008506:	6808      	ldr	r0, [r1, #0]
 8008508:	6849      	ldr	r1, [r1, #4]
 800850a:	003b      	movs	r3, r7
 800850c:	f7f9 f83a 	bl	8001584 <__aeabi_dmul>
 8008510:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008512:	1b1c      	subs	r4, r3, r4
 8008514:	00e4      	lsls	r4, r4, #3
 8008516:	192d      	adds	r5, r5, r4
 8008518:	682a      	ldr	r2, [r5, #0]
 800851a:	686b      	ldr	r3, [r5, #4]
 800851c:	e789      	b.n	8008432 <_strtod_l+0x40a>
 800851e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008520:	3316      	adds	r3, #22
 8008522:	dba2      	blt.n	800846a <_strtod_l+0x442>
 8008524:	9907      	ldr	r1, [sp, #28]
 8008526:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008528:	4b3b      	ldr	r3, [pc, #236]	@ (8008618 <_strtod_l+0x5f0>)
 800852a:	1a52      	subs	r2, r2, r1
 800852c:	00d2      	lsls	r2, r2, #3
 800852e:	189b      	adds	r3, r3, r2
 8008530:	0030      	movs	r0, r6
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	0039      	movs	r1, r7
 8008538:	f7f8 fbea 	bl	8000d10 <__aeabi_ddiv>
 800853c:	e750      	b.n	80083e0 <_strtod_l+0x3b8>
 800853e:	2300      	movs	r3, #0
 8008540:	0030      	movs	r0, r6
 8008542:	0039      	movs	r1, r7
 8008544:	4d35      	ldr	r5, [pc, #212]	@ (800861c <_strtod_l+0x5f4>)
 8008546:	1124      	asrs	r4, r4, #4
 8008548:	9309      	str	r3, [sp, #36]	@ 0x24
 800854a:	2c01      	cmp	r4, #1
 800854c:	dc1e      	bgt.n	800858c <_strtod_l+0x564>
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <_strtod_l+0x52e>
 8008552:	0006      	movs	r6, r0
 8008554:	000f      	movs	r7, r1
 8008556:	4b32      	ldr	r3, [pc, #200]	@ (8008620 <_strtod_l+0x5f8>)
 8008558:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800855a:	18ff      	adds	r7, r7, r3
 800855c:	4b2f      	ldr	r3, [pc, #188]	@ (800861c <_strtod_l+0x5f4>)
 800855e:	00d5      	lsls	r5, r2, #3
 8008560:	195d      	adds	r5, r3, r5
 8008562:	0032      	movs	r2, r6
 8008564:	6828      	ldr	r0, [r5, #0]
 8008566:	6869      	ldr	r1, [r5, #4]
 8008568:	003b      	movs	r3, r7
 800856a:	f7f9 f80b 	bl	8001584 <__aeabi_dmul>
 800856e:	4b26      	ldr	r3, [pc, #152]	@ (8008608 <_strtod_l+0x5e0>)
 8008570:	4a2c      	ldr	r2, [pc, #176]	@ (8008624 <_strtod_l+0x5fc>)
 8008572:	0006      	movs	r6, r0
 8008574:	400b      	ands	r3, r1
 8008576:	4293      	cmp	r3, r2
 8008578:	d895      	bhi.n	80084a6 <_strtod_l+0x47e>
 800857a:	4a2b      	ldr	r2, [pc, #172]	@ (8008628 <_strtod_l+0x600>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d913      	bls.n	80085a8 <_strtod_l+0x580>
 8008580:	2601      	movs	r6, #1
 8008582:	4f2a      	ldr	r7, [pc, #168]	@ (800862c <_strtod_l+0x604>)
 8008584:	4276      	negs	r6, r6
 8008586:	2300      	movs	r3, #0
 8008588:	9309      	str	r3, [sp, #36]	@ 0x24
 800858a:	e086      	b.n	800869a <_strtod_l+0x672>
 800858c:	2201      	movs	r2, #1
 800858e:	4214      	tst	r4, r2
 8008590:	d004      	beq.n	800859c <_strtod_l+0x574>
 8008592:	682a      	ldr	r2, [r5, #0]
 8008594:	686b      	ldr	r3, [r5, #4]
 8008596:	f7f8 fff5 	bl	8001584 <__aeabi_dmul>
 800859a:	2301      	movs	r3, #1
 800859c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800859e:	1064      	asrs	r4, r4, #1
 80085a0:	3201      	adds	r2, #1
 80085a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80085a4:	3508      	adds	r5, #8
 80085a6:	e7d0      	b.n	800854a <_strtod_l+0x522>
 80085a8:	23d4      	movs	r3, #212	@ 0xd4
 80085aa:	049b      	lsls	r3, r3, #18
 80085ac:	18cf      	adds	r7, r1, r3
 80085ae:	e7ea      	b.n	8008586 <_strtod_l+0x55e>
 80085b0:	2c00      	cmp	r4, #0
 80085b2:	d0e8      	beq.n	8008586 <_strtod_l+0x55e>
 80085b4:	4264      	negs	r4, r4
 80085b6:	230f      	movs	r3, #15
 80085b8:	0022      	movs	r2, r4
 80085ba:	401a      	ands	r2, r3
 80085bc:	421c      	tst	r4, r3
 80085be:	d00a      	beq.n	80085d6 <_strtod_l+0x5ae>
 80085c0:	4b15      	ldr	r3, [pc, #84]	@ (8008618 <_strtod_l+0x5f0>)
 80085c2:	00d2      	lsls	r2, r2, #3
 80085c4:	189b      	adds	r3, r3, r2
 80085c6:	0030      	movs	r0, r6
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	0039      	movs	r1, r7
 80085ce:	f7f8 fb9f 	bl	8000d10 <__aeabi_ddiv>
 80085d2:	0006      	movs	r6, r0
 80085d4:	000f      	movs	r7, r1
 80085d6:	1124      	asrs	r4, r4, #4
 80085d8:	d0d5      	beq.n	8008586 <_strtod_l+0x55e>
 80085da:	2c1f      	cmp	r4, #31
 80085dc:	dd28      	ble.n	8008630 <_strtod_l+0x608>
 80085de:	2300      	movs	r3, #0
 80085e0:	9306      	str	r3, [sp, #24]
 80085e2:	9307      	str	r3, [sp, #28]
 80085e4:	930d      	str	r3, [sp, #52]	@ 0x34
 80085e6:	9308      	str	r3, [sp, #32]
 80085e8:	2322      	movs	r3, #34	@ 0x22
 80085ea:	9a05      	ldr	r2, [sp, #20]
 80085ec:	2600      	movs	r6, #0
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085f2:	2700      	movs	r7, #0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d000      	beq.n	80085fa <_strtod_l+0x5d2>
 80085f8:	e763      	b.n	80084c2 <_strtod_l+0x49a>
 80085fa:	e550      	b.n	800809e <_strtod_l+0x76>
 80085fc:	00004e1f 	.word	0x00004e1f
 8008600:	08009f31 	.word	0x08009f31
 8008604:	0800a1f8 	.word	0x0800a1f8
 8008608:	7ff00000 	.word	0x7ff00000
 800860c:	08009f29 	.word	0x08009f29
 8008610:	08009f60 	.word	0x08009f60
 8008614:	0800a099 	.word	0x0800a099
 8008618:	0800a130 	.word	0x0800a130
 800861c:	0800a108 	.word	0x0800a108
 8008620:	fcb00000 	.word	0xfcb00000
 8008624:	7ca00000 	.word	0x7ca00000
 8008628:	7c900000 	.word	0x7c900000
 800862c:	7fefffff 	.word	0x7fefffff
 8008630:	2310      	movs	r3, #16
 8008632:	0022      	movs	r2, r4
 8008634:	401a      	ands	r2, r3
 8008636:	9209      	str	r2, [sp, #36]	@ 0x24
 8008638:	421c      	tst	r4, r3
 800863a:	d001      	beq.n	8008640 <_strtod_l+0x618>
 800863c:	335a      	adds	r3, #90	@ 0x5a
 800863e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008640:	0030      	movs	r0, r6
 8008642:	0039      	movs	r1, r7
 8008644:	2300      	movs	r3, #0
 8008646:	4dc0      	ldr	r5, [pc, #768]	@ (8008948 <_strtod_l+0x920>)
 8008648:	2201      	movs	r2, #1
 800864a:	4214      	tst	r4, r2
 800864c:	d004      	beq.n	8008658 <_strtod_l+0x630>
 800864e:	682a      	ldr	r2, [r5, #0]
 8008650:	686b      	ldr	r3, [r5, #4]
 8008652:	f7f8 ff97 	bl	8001584 <__aeabi_dmul>
 8008656:	2301      	movs	r3, #1
 8008658:	1064      	asrs	r4, r4, #1
 800865a:	3508      	adds	r5, #8
 800865c:	2c00      	cmp	r4, #0
 800865e:	d1f3      	bne.n	8008648 <_strtod_l+0x620>
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <_strtod_l+0x640>
 8008664:	0006      	movs	r6, r0
 8008666:	000f      	movs	r7, r1
 8008668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00d      	beq.n	800868a <_strtod_l+0x662>
 800866e:	236b      	movs	r3, #107	@ 0x6b
 8008670:	007a      	lsls	r2, r7, #1
 8008672:	0d52      	lsrs	r2, r2, #21
 8008674:	0039      	movs	r1, r7
 8008676:	1a9b      	subs	r3, r3, r2
 8008678:	2b00      	cmp	r3, #0
 800867a:	dd06      	ble.n	800868a <_strtod_l+0x662>
 800867c:	2b1f      	cmp	r3, #31
 800867e:	dd5c      	ble.n	800873a <_strtod_l+0x712>
 8008680:	2600      	movs	r6, #0
 8008682:	2b34      	cmp	r3, #52	@ 0x34
 8008684:	dd52      	ble.n	800872c <_strtod_l+0x704>
 8008686:	27dc      	movs	r7, #220	@ 0xdc
 8008688:	04bf      	lsls	r7, r7, #18
 800868a:	2200      	movs	r2, #0
 800868c:	2300      	movs	r3, #0
 800868e:	0030      	movs	r0, r6
 8008690:	0039      	movs	r1, r7
 8008692:	f7f7 fedb 	bl	800044c <__aeabi_dcmpeq>
 8008696:	2800      	cmp	r0, #0
 8008698:	d1a1      	bne.n	80085de <_strtod_l+0x5b6>
 800869a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800869c:	9a08      	ldr	r2, [sp, #32]
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80086a2:	9b06      	ldr	r3, [sp, #24]
 80086a4:	9805      	ldr	r0, [sp, #20]
 80086a6:	f7ff f891 	bl	80077cc <__s2b>
 80086aa:	900d      	str	r0, [sp, #52]	@ 0x34
 80086ac:	2800      	cmp	r0, #0
 80086ae:	d100      	bne.n	80086b2 <_strtod_l+0x68a>
 80086b0:	e6f9      	b.n	80084a6 <_strtod_l+0x47e>
 80086b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086b4:	9907      	ldr	r1, [sp, #28]
 80086b6:	43db      	mvns	r3, r3
 80086b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086ba:	17db      	asrs	r3, r3, #31
 80086bc:	1a52      	subs	r2, r2, r1
 80086be:	9214      	str	r2, [sp, #80]	@ 0x50
 80086c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80086c2:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80086c4:	17d2      	asrs	r2, r2, #31
 80086c6:	4011      	ands	r1, r2
 80086c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80086ca:	9114      	str	r1, [sp, #80]	@ 0x50
 80086cc:	401a      	ands	r2, r3
 80086ce:	2300      	movs	r3, #0
 80086d0:	921a      	str	r2, [sp, #104]	@ 0x68
 80086d2:	9306      	str	r3, [sp, #24]
 80086d4:	9307      	str	r3, [sp, #28]
 80086d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086d8:	9805      	ldr	r0, [sp, #20]
 80086da:	6859      	ldr	r1, [r3, #4]
 80086dc:	f7fe ffca 	bl	8007674 <_Balloc>
 80086e0:	9008      	str	r0, [sp, #32]
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d100      	bne.n	80086e8 <_strtod_l+0x6c0>
 80086e6:	e6e3      	b.n	80084b0 <_strtod_l+0x488>
 80086e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086ea:	300c      	adds	r0, #12
 80086ec:	0019      	movs	r1, r3
 80086ee:	691a      	ldr	r2, [r3, #16]
 80086f0:	310c      	adds	r1, #12
 80086f2:	3202      	adds	r2, #2
 80086f4:	0092      	lsls	r2, r2, #2
 80086f6:	f000 fdff 	bl	80092f8 <memcpy>
 80086fa:	ab20      	add	r3, sp, #128	@ 0x80
 80086fc:	9301      	str	r3, [sp, #4]
 80086fe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	0032      	movs	r2, r6
 8008704:	003b      	movs	r3, r7
 8008706:	9805      	ldr	r0, [sp, #20]
 8008708:	9610      	str	r6, [sp, #64]	@ 0x40
 800870a:	9711      	str	r7, [sp, #68]	@ 0x44
 800870c:	f7ff fba6 	bl	8007e5c <__d2b>
 8008710:	901e      	str	r0, [sp, #120]	@ 0x78
 8008712:	2800      	cmp	r0, #0
 8008714:	d100      	bne.n	8008718 <_strtod_l+0x6f0>
 8008716:	e6cb      	b.n	80084b0 <_strtod_l+0x488>
 8008718:	2101      	movs	r1, #1
 800871a:	9805      	ldr	r0, [sp, #20]
 800871c:	f7ff f8f2 	bl	8007904 <__i2b>
 8008720:	9007      	str	r0, [sp, #28]
 8008722:	2800      	cmp	r0, #0
 8008724:	d10e      	bne.n	8008744 <_strtod_l+0x71c>
 8008726:	2300      	movs	r3, #0
 8008728:	9307      	str	r3, [sp, #28]
 800872a:	e6c1      	b.n	80084b0 <_strtod_l+0x488>
 800872c:	234b      	movs	r3, #75	@ 0x4b
 800872e:	1a9a      	subs	r2, r3, r2
 8008730:	3b4c      	subs	r3, #76	@ 0x4c
 8008732:	4093      	lsls	r3, r2
 8008734:	4019      	ands	r1, r3
 8008736:	000f      	movs	r7, r1
 8008738:	e7a7      	b.n	800868a <_strtod_l+0x662>
 800873a:	2201      	movs	r2, #1
 800873c:	4252      	negs	r2, r2
 800873e:	409a      	lsls	r2, r3
 8008740:	4016      	ands	r6, r2
 8008742:	e7a2      	b.n	800868a <_strtod_l+0x662>
 8008744:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008746:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008748:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800874a:	1ad4      	subs	r4, r2, r3
 800874c:	2b00      	cmp	r3, #0
 800874e:	db01      	blt.n	8008754 <_strtod_l+0x72c>
 8008750:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8008752:	195d      	adds	r5, r3, r5
 8008754:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008756:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008758:	1a5b      	subs	r3, r3, r1
 800875a:	2136      	movs	r1, #54	@ 0x36
 800875c:	189b      	adds	r3, r3, r2
 800875e:	1a8a      	subs	r2, r1, r2
 8008760:	497a      	ldr	r1, [pc, #488]	@ (800894c <_strtod_l+0x924>)
 8008762:	2001      	movs	r0, #1
 8008764:	468c      	mov	ip, r1
 8008766:	2100      	movs	r1, #0
 8008768:	3b01      	subs	r3, #1
 800876a:	9115      	str	r1, [sp, #84]	@ 0x54
 800876c:	9016      	str	r0, [sp, #88]	@ 0x58
 800876e:	4563      	cmp	r3, ip
 8008770:	da06      	bge.n	8008780 <_strtod_l+0x758>
 8008772:	4661      	mov	r1, ip
 8008774:	1ac9      	subs	r1, r1, r3
 8008776:	1a52      	subs	r2, r2, r1
 8008778:	291f      	cmp	r1, #31
 800877a:	dc3f      	bgt.n	80087fc <_strtod_l+0x7d4>
 800877c:	4088      	lsls	r0, r1
 800877e:	9016      	str	r0, [sp, #88]	@ 0x58
 8008780:	18ab      	adds	r3, r5, r2
 8008782:	930e      	str	r3, [sp, #56]	@ 0x38
 8008784:	18a4      	adds	r4, r4, r2
 8008786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008788:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800878a:	191c      	adds	r4, r3, r4
 800878c:	002b      	movs	r3, r5
 800878e:	4295      	cmp	r5, r2
 8008790:	dd00      	ble.n	8008794 <_strtod_l+0x76c>
 8008792:	0013      	movs	r3, r2
 8008794:	42a3      	cmp	r3, r4
 8008796:	dd00      	ble.n	800879a <_strtod_l+0x772>
 8008798:	0023      	movs	r3, r4
 800879a:	2b00      	cmp	r3, #0
 800879c:	dd04      	ble.n	80087a8 <_strtod_l+0x780>
 800879e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087a0:	1ae4      	subs	r4, r4, r3
 80087a2:	1ad2      	subs	r2, r2, r3
 80087a4:	920e      	str	r2, [sp, #56]	@ 0x38
 80087a6:	1aed      	subs	r5, r5, r3
 80087a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	dd16      	ble.n	80087dc <_strtod_l+0x7b4>
 80087ae:	001a      	movs	r2, r3
 80087b0:	9907      	ldr	r1, [sp, #28]
 80087b2:	9805      	ldr	r0, [sp, #20]
 80087b4:	f7ff f968 	bl	8007a88 <__pow5mult>
 80087b8:	9007      	str	r0, [sp, #28]
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d0b3      	beq.n	8008726 <_strtod_l+0x6fe>
 80087be:	0001      	movs	r1, r0
 80087c0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80087c2:	9805      	ldr	r0, [sp, #20]
 80087c4:	f7ff f8b6 	bl	8007934 <__multiply>
 80087c8:	9013      	str	r0, [sp, #76]	@ 0x4c
 80087ca:	2800      	cmp	r0, #0
 80087cc:	d100      	bne.n	80087d0 <_strtod_l+0x7a8>
 80087ce:	e66f      	b.n	80084b0 <_strtod_l+0x488>
 80087d0:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80087d2:	9805      	ldr	r0, [sp, #20]
 80087d4:	f7fe ff92 	bl	80076fc <_Bfree>
 80087d8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80087da:	931e      	str	r3, [sp, #120]	@ 0x78
 80087dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087de:	2b00      	cmp	r3, #0
 80087e0:	dc12      	bgt.n	8008808 <_strtod_l+0x7e0>
 80087e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	dd18      	ble.n	800881a <_strtod_l+0x7f2>
 80087e8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80087ea:	9908      	ldr	r1, [sp, #32]
 80087ec:	9805      	ldr	r0, [sp, #20]
 80087ee:	f7ff f94b 	bl	8007a88 <__pow5mult>
 80087f2:	9008      	str	r0, [sp, #32]
 80087f4:	2800      	cmp	r0, #0
 80087f6:	d110      	bne.n	800881a <_strtod_l+0x7f2>
 80087f8:	2300      	movs	r3, #0
 80087fa:	e658      	b.n	80084ae <_strtod_l+0x486>
 80087fc:	4954      	ldr	r1, [pc, #336]	@ (8008950 <_strtod_l+0x928>)
 80087fe:	1acb      	subs	r3, r1, r3
 8008800:	0001      	movs	r1, r0
 8008802:	4099      	lsls	r1, r3
 8008804:	9115      	str	r1, [sp, #84]	@ 0x54
 8008806:	e7ba      	b.n	800877e <_strtod_l+0x756>
 8008808:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800880a:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800880c:	9805      	ldr	r0, [sp, #20]
 800880e:	f7ff f997 	bl	8007b40 <__lshift>
 8008812:	901e      	str	r0, [sp, #120]	@ 0x78
 8008814:	2800      	cmp	r0, #0
 8008816:	d1e4      	bne.n	80087e2 <_strtod_l+0x7ba>
 8008818:	e64a      	b.n	80084b0 <_strtod_l+0x488>
 800881a:	2c00      	cmp	r4, #0
 800881c:	dd07      	ble.n	800882e <_strtod_l+0x806>
 800881e:	0022      	movs	r2, r4
 8008820:	9908      	ldr	r1, [sp, #32]
 8008822:	9805      	ldr	r0, [sp, #20]
 8008824:	f7ff f98c 	bl	8007b40 <__lshift>
 8008828:	9008      	str	r0, [sp, #32]
 800882a:	2800      	cmp	r0, #0
 800882c:	d0e4      	beq.n	80087f8 <_strtod_l+0x7d0>
 800882e:	2d00      	cmp	r5, #0
 8008830:	dd08      	ble.n	8008844 <_strtod_l+0x81c>
 8008832:	002a      	movs	r2, r5
 8008834:	9907      	ldr	r1, [sp, #28]
 8008836:	9805      	ldr	r0, [sp, #20]
 8008838:	f7ff f982 	bl	8007b40 <__lshift>
 800883c:	9007      	str	r0, [sp, #28]
 800883e:	2800      	cmp	r0, #0
 8008840:	d100      	bne.n	8008844 <_strtod_l+0x81c>
 8008842:	e635      	b.n	80084b0 <_strtod_l+0x488>
 8008844:	9a08      	ldr	r2, [sp, #32]
 8008846:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008848:	9805      	ldr	r0, [sp, #20]
 800884a:	f7ff fa01 	bl	8007c50 <__mdiff>
 800884e:	9006      	str	r0, [sp, #24]
 8008850:	2800      	cmp	r0, #0
 8008852:	d100      	bne.n	8008856 <_strtod_l+0x82e>
 8008854:	e62c      	b.n	80084b0 <_strtod_l+0x488>
 8008856:	68c3      	ldr	r3, [r0, #12]
 8008858:	9907      	ldr	r1, [sp, #28]
 800885a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800885c:	2300      	movs	r3, #0
 800885e:	60c3      	str	r3, [r0, #12]
 8008860:	f7ff f9da 	bl	8007c18 <__mcmp>
 8008864:	2800      	cmp	r0, #0
 8008866:	da3b      	bge.n	80088e0 <_strtod_l+0x8b8>
 8008868:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800886a:	4333      	orrs	r3, r6
 800886c:	d167      	bne.n	800893e <_strtod_l+0x916>
 800886e:	033b      	lsls	r3, r7, #12
 8008870:	d165      	bne.n	800893e <_strtod_l+0x916>
 8008872:	22d6      	movs	r2, #214	@ 0xd6
 8008874:	4b37      	ldr	r3, [pc, #220]	@ (8008954 <_strtod_l+0x92c>)
 8008876:	04d2      	lsls	r2, r2, #19
 8008878:	403b      	ands	r3, r7
 800887a:	4293      	cmp	r3, r2
 800887c:	d95f      	bls.n	800893e <_strtod_l+0x916>
 800887e:	9b06      	ldr	r3, [sp, #24]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d103      	bne.n	800888e <_strtod_l+0x866>
 8008886:	9b06      	ldr	r3, [sp, #24]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	2b01      	cmp	r3, #1
 800888c:	dd57      	ble.n	800893e <_strtod_l+0x916>
 800888e:	9906      	ldr	r1, [sp, #24]
 8008890:	2201      	movs	r2, #1
 8008892:	9805      	ldr	r0, [sp, #20]
 8008894:	f7ff f954 	bl	8007b40 <__lshift>
 8008898:	9907      	ldr	r1, [sp, #28]
 800889a:	9006      	str	r0, [sp, #24]
 800889c:	f7ff f9bc 	bl	8007c18 <__mcmp>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	dd4c      	ble.n	800893e <_strtod_l+0x916>
 80088a4:	4b2b      	ldr	r3, [pc, #172]	@ (8008954 <_strtod_l+0x92c>)
 80088a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088a8:	403b      	ands	r3, r7
 80088aa:	2a00      	cmp	r2, #0
 80088ac:	d074      	beq.n	8008998 <_strtod_l+0x970>
 80088ae:	22d6      	movs	r2, #214	@ 0xd6
 80088b0:	04d2      	lsls	r2, r2, #19
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d870      	bhi.n	8008998 <_strtod_l+0x970>
 80088b6:	22dc      	movs	r2, #220	@ 0xdc
 80088b8:	0492      	lsls	r2, r2, #18
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d800      	bhi.n	80088c0 <_strtod_l+0x898>
 80088be:	e693      	b.n	80085e8 <_strtod_l+0x5c0>
 80088c0:	0030      	movs	r0, r6
 80088c2:	0039      	movs	r1, r7
 80088c4:	4b24      	ldr	r3, [pc, #144]	@ (8008958 <_strtod_l+0x930>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	f7f8 fe5c 	bl	8001584 <__aeabi_dmul>
 80088cc:	4b21      	ldr	r3, [pc, #132]	@ (8008954 <_strtod_l+0x92c>)
 80088ce:	0006      	movs	r6, r0
 80088d0:	000f      	movs	r7, r1
 80088d2:	420b      	tst	r3, r1
 80088d4:	d000      	beq.n	80088d8 <_strtod_l+0x8b0>
 80088d6:	e5f4      	b.n	80084c2 <_strtod_l+0x49a>
 80088d8:	2322      	movs	r3, #34	@ 0x22
 80088da:	9a05      	ldr	r2, [sp, #20]
 80088dc:	6013      	str	r3, [r2, #0]
 80088de:	e5f0      	b.n	80084c2 <_strtod_l+0x49a>
 80088e0:	970e      	str	r7, [sp, #56]	@ 0x38
 80088e2:	2800      	cmp	r0, #0
 80088e4:	d175      	bne.n	80089d2 <_strtod_l+0x9aa>
 80088e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088e8:	033b      	lsls	r3, r7, #12
 80088ea:	0b1b      	lsrs	r3, r3, #12
 80088ec:	2a00      	cmp	r2, #0
 80088ee:	d039      	beq.n	8008964 <_strtod_l+0x93c>
 80088f0:	4a1a      	ldr	r2, [pc, #104]	@ (800895c <_strtod_l+0x934>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d138      	bne.n	8008968 <_strtod_l+0x940>
 80088f6:	2101      	movs	r1, #1
 80088f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088fa:	4249      	negs	r1, r1
 80088fc:	0032      	movs	r2, r6
 80088fe:	0008      	movs	r0, r1
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00b      	beq.n	800891c <_strtod_l+0x8f4>
 8008904:	24d4      	movs	r4, #212	@ 0xd4
 8008906:	4b13      	ldr	r3, [pc, #76]	@ (8008954 <_strtod_l+0x92c>)
 8008908:	0008      	movs	r0, r1
 800890a:	403b      	ands	r3, r7
 800890c:	04e4      	lsls	r4, r4, #19
 800890e:	42a3      	cmp	r3, r4
 8008910:	d804      	bhi.n	800891c <_strtod_l+0x8f4>
 8008912:	306c      	adds	r0, #108	@ 0x6c
 8008914:	0d1b      	lsrs	r3, r3, #20
 8008916:	1ac3      	subs	r3, r0, r3
 8008918:	4099      	lsls	r1, r3
 800891a:	0008      	movs	r0, r1
 800891c:	4282      	cmp	r2, r0
 800891e:	d123      	bne.n	8008968 <_strtod_l+0x940>
 8008920:	4b0f      	ldr	r3, [pc, #60]	@ (8008960 <_strtod_l+0x938>)
 8008922:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008924:	4299      	cmp	r1, r3
 8008926:	d102      	bne.n	800892e <_strtod_l+0x906>
 8008928:	3201      	adds	r2, #1
 800892a:	d100      	bne.n	800892e <_strtod_l+0x906>
 800892c:	e5c0      	b.n	80084b0 <_strtod_l+0x488>
 800892e:	4b09      	ldr	r3, [pc, #36]	@ (8008954 <_strtod_l+0x92c>)
 8008930:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008932:	2600      	movs	r6, #0
 8008934:	401a      	ands	r2, r3
 8008936:	0013      	movs	r3, r2
 8008938:	2280      	movs	r2, #128	@ 0x80
 800893a:	0352      	lsls	r2, r2, #13
 800893c:	189f      	adds	r7, r3, r2
 800893e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008940:	2b00      	cmp	r3, #0
 8008942:	d1bd      	bne.n	80088c0 <_strtod_l+0x898>
 8008944:	e5bd      	b.n	80084c2 <_strtod_l+0x49a>
 8008946:	46c0      	nop			@ (mov r8, r8)
 8008948:	0800a220 	.word	0x0800a220
 800894c:	fffffc02 	.word	0xfffffc02
 8008950:	fffffbe2 	.word	0xfffffbe2
 8008954:	7ff00000 	.word	0x7ff00000
 8008958:	39500000 	.word	0x39500000
 800895c:	000fffff 	.word	0x000fffff
 8008960:	7fefffff 	.word	0x7fefffff
 8008964:	4333      	orrs	r3, r6
 8008966:	d09d      	beq.n	80088a4 <_strtod_l+0x87c>
 8008968:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800896a:	2b00      	cmp	r3, #0
 800896c:	d01c      	beq.n	80089a8 <_strtod_l+0x980>
 800896e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008970:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008972:	4213      	tst	r3, r2
 8008974:	d0e3      	beq.n	800893e <_strtod_l+0x916>
 8008976:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008978:	0030      	movs	r0, r6
 800897a:	0039      	movs	r1, r7
 800897c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800897e:	2b00      	cmp	r3, #0
 8008980:	d016      	beq.n	80089b0 <_strtod_l+0x988>
 8008982:	f7ff fb39 	bl	8007ff8 <sulp>
 8008986:	0002      	movs	r2, r0
 8008988:	000b      	movs	r3, r1
 800898a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800898c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800898e:	f7f7 fdf9 	bl	8000584 <__aeabi_dadd>
 8008992:	0006      	movs	r6, r0
 8008994:	000f      	movs	r7, r1
 8008996:	e7d2      	b.n	800893e <_strtod_l+0x916>
 8008998:	2601      	movs	r6, #1
 800899a:	4a92      	ldr	r2, [pc, #584]	@ (8008be4 <_strtod_l+0xbbc>)
 800899c:	4276      	negs	r6, r6
 800899e:	189b      	adds	r3, r3, r2
 80089a0:	4a91      	ldr	r2, [pc, #580]	@ (8008be8 <_strtod_l+0xbc0>)
 80089a2:	431a      	orrs	r2, r3
 80089a4:	0017      	movs	r7, r2
 80089a6:	e7ca      	b.n	800893e <_strtod_l+0x916>
 80089a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80089aa:	4233      	tst	r3, r6
 80089ac:	d0c7      	beq.n	800893e <_strtod_l+0x916>
 80089ae:	e7e2      	b.n	8008976 <_strtod_l+0x94e>
 80089b0:	f7ff fb22 	bl	8007ff8 <sulp>
 80089b4:	0002      	movs	r2, r0
 80089b6:	000b      	movs	r3, r1
 80089b8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 80089ba:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80089bc:	f7f9 f8c8 	bl	8001b50 <__aeabi_dsub>
 80089c0:	2200      	movs	r2, #0
 80089c2:	2300      	movs	r3, #0
 80089c4:	0006      	movs	r6, r0
 80089c6:	000f      	movs	r7, r1
 80089c8:	f7f7 fd40 	bl	800044c <__aeabi_dcmpeq>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d0b6      	beq.n	800893e <_strtod_l+0x916>
 80089d0:	e60a      	b.n	80085e8 <_strtod_l+0x5c0>
 80089d2:	9907      	ldr	r1, [sp, #28]
 80089d4:	9806      	ldr	r0, [sp, #24]
 80089d6:	f7ff faa1 	bl	8007f1c <__ratio>
 80089da:	2380      	movs	r3, #128	@ 0x80
 80089dc:	2200      	movs	r2, #0
 80089de:	05db      	lsls	r3, r3, #23
 80089e0:	0004      	movs	r4, r0
 80089e2:	000d      	movs	r5, r1
 80089e4:	f7f7 fd42 	bl	800046c <__aeabi_dcmple>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d06c      	beq.n	8008ac6 <_strtod_l+0xa9e>
 80089ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d177      	bne.n	8008ae2 <_strtod_l+0xaba>
 80089f2:	2e00      	cmp	r6, #0
 80089f4:	d157      	bne.n	8008aa6 <_strtod_l+0xa7e>
 80089f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089f8:	031b      	lsls	r3, r3, #12
 80089fa:	d15a      	bne.n	8008ab2 <_strtod_l+0xa8a>
 80089fc:	2200      	movs	r2, #0
 80089fe:	0020      	movs	r0, r4
 8008a00:	0029      	movs	r1, r5
 8008a02:	4b7a      	ldr	r3, [pc, #488]	@ (8008bec <_strtod_l+0xbc4>)
 8008a04:	f7f7 fd28 	bl	8000458 <__aeabi_dcmplt>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d159      	bne.n	8008ac0 <_strtod_l+0xa98>
 8008a0c:	0020      	movs	r0, r4
 8008a0e:	0029      	movs	r1, r5
 8008a10:	2200      	movs	r2, #0
 8008a12:	4b77      	ldr	r3, [pc, #476]	@ (8008bf0 <_strtod_l+0xbc8>)
 8008a14:	f7f8 fdb6 	bl	8001584 <__aeabi_dmul>
 8008a18:	0004      	movs	r4, r0
 8008a1a:	000d      	movs	r5, r1
 8008a1c:	2380      	movs	r3, #128	@ 0x80
 8008a1e:	061b      	lsls	r3, r3, #24
 8008a20:	18eb      	adds	r3, r5, r3
 8008a22:	940a      	str	r4, [sp, #40]	@ 0x28
 8008a24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a2a:	9216      	str	r2, [sp, #88]	@ 0x58
 8008a2c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8008a2e:	4a71      	ldr	r2, [pc, #452]	@ (8008bf4 <_strtod_l+0xbcc>)
 8008a30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a32:	4013      	ands	r3, r2
 8008a34:	9315      	str	r3, [sp, #84]	@ 0x54
 8008a36:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008a38:	4b6f      	ldr	r3, [pc, #444]	@ (8008bf8 <_strtod_l+0xbd0>)
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d000      	beq.n	8008a40 <_strtod_l+0xa18>
 8008a3e:	e087      	b.n	8008b50 <_strtod_l+0xb28>
 8008a40:	4a6e      	ldr	r2, [pc, #440]	@ (8008bfc <_strtod_l+0xbd4>)
 8008a42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a44:	4694      	mov	ip, r2
 8008a46:	4463      	add	r3, ip
 8008a48:	001f      	movs	r7, r3
 8008a4a:	0030      	movs	r0, r6
 8008a4c:	0019      	movs	r1, r3
 8008a4e:	f7ff f999 	bl	8007d84 <__ulp>
 8008a52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a56:	f7f8 fd95 	bl	8001584 <__aeabi_dmul>
 8008a5a:	0032      	movs	r2, r6
 8008a5c:	003b      	movs	r3, r7
 8008a5e:	f7f7 fd91 	bl	8000584 <__aeabi_dadd>
 8008a62:	4a64      	ldr	r2, [pc, #400]	@ (8008bf4 <_strtod_l+0xbcc>)
 8008a64:	4b66      	ldr	r3, [pc, #408]	@ (8008c00 <_strtod_l+0xbd8>)
 8008a66:	0006      	movs	r6, r0
 8008a68:	400a      	ands	r2, r1
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d940      	bls.n	8008af0 <_strtod_l+0xac8>
 8008a6e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008a70:	4a64      	ldr	r2, [pc, #400]	@ (8008c04 <_strtod_l+0xbdc>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d103      	bne.n	8008a7e <_strtod_l+0xa56>
 8008a76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008a78:	3301      	adds	r3, #1
 8008a7a:	d100      	bne.n	8008a7e <_strtod_l+0xa56>
 8008a7c:	e518      	b.n	80084b0 <_strtod_l+0x488>
 8008a7e:	2601      	movs	r6, #1
 8008a80:	4f60      	ldr	r7, [pc, #384]	@ (8008c04 <_strtod_l+0xbdc>)
 8008a82:	4276      	negs	r6, r6
 8008a84:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8008a86:	9805      	ldr	r0, [sp, #20]
 8008a88:	f7fe fe38 	bl	80076fc <_Bfree>
 8008a8c:	9908      	ldr	r1, [sp, #32]
 8008a8e:	9805      	ldr	r0, [sp, #20]
 8008a90:	f7fe fe34 	bl	80076fc <_Bfree>
 8008a94:	9907      	ldr	r1, [sp, #28]
 8008a96:	9805      	ldr	r0, [sp, #20]
 8008a98:	f7fe fe30 	bl	80076fc <_Bfree>
 8008a9c:	9906      	ldr	r1, [sp, #24]
 8008a9e:	9805      	ldr	r0, [sp, #20]
 8008aa0:	f7fe fe2c 	bl	80076fc <_Bfree>
 8008aa4:	e617      	b.n	80086d6 <_strtod_l+0x6ae>
 8008aa6:	2e01      	cmp	r6, #1
 8008aa8:	d103      	bne.n	8008ab2 <_strtod_l+0xa8a>
 8008aaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d100      	bne.n	8008ab2 <_strtod_l+0xa8a>
 8008ab0:	e59a      	b.n	80085e8 <_strtod_l+0x5c0>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	4c54      	ldr	r4, [pc, #336]	@ (8008c08 <_strtod_l+0xbe0>)
 8008ab6:	4d4d      	ldr	r5, [pc, #308]	@ (8008bec <_strtod_l+0xbc4>)
 8008ab8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008aba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008abc:	2400      	movs	r4, #0
 8008abe:	e7b2      	b.n	8008a26 <_strtod_l+0x9fe>
 8008ac0:	2400      	movs	r4, #0
 8008ac2:	4d4b      	ldr	r5, [pc, #300]	@ (8008bf0 <_strtod_l+0xbc8>)
 8008ac4:	e7aa      	b.n	8008a1c <_strtod_l+0x9f4>
 8008ac6:	0020      	movs	r0, r4
 8008ac8:	0029      	movs	r1, r5
 8008aca:	4b49      	ldr	r3, [pc, #292]	@ (8008bf0 <_strtod_l+0xbc8>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	f7f8 fd59 	bl	8001584 <__aeabi_dmul>
 8008ad2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ad4:	0004      	movs	r4, r0
 8008ad6:	000d      	movs	r5, r1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d09f      	beq.n	8008a1c <_strtod_l+0x9f4>
 8008adc:	940a      	str	r4, [sp, #40]	@ 0x28
 8008ade:	950b      	str	r5, [sp, #44]	@ 0x2c
 8008ae0:	e7a1      	b.n	8008a26 <_strtod_l+0x9fe>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	4c41      	ldr	r4, [pc, #260]	@ (8008bec <_strtod_l+0xbc4>)
 8008ae6:	0025      	movs	r5, r4
 8008ae8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008aea:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008aec:	001c      	movs	r4, r3
 8008aee:	e79a      	b.n	8008a26 <_strtod_l+0x9fe>
 8008af0:	23d4      	movs	r3, #212	@ 0xd4
 8008af2:	049b      	lsls	r3, r3, #18
 8008af4:	18cf      	adds	r7, r1, r3
 8008af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008af8:	9710      	str	r7, [sp, #64]	@ 0x40
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1c2      	bne.n	8008a84 <_strtod_l+0xa5c>
 8008afe:	4b3d      	ldr	r3, [pc, #244]	@ (8008bf4 <_strtod_l+0xbcc>)
 8008b00:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008b02:	403b      	ands	r3, r7
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d1bd      	bne.n	8008a84 <_strtod_l+0xa5c>
 8008b08:	0020      	movs	r0, r4
 8008b0a:	0029      	movs	r1, r5
 8008b0c:	f7f7 fcea 	bl	80004e4 <__aeabi_d2lz>
 8008b10:	f7f7 fd22 	bl	8000558 <__aeabi_l2d>
 8008b14:	0002      	movs	r2, r0
 8008b16:	000b      	movs	r3, r1
 8008b18:	0020      	movs	r0, r4
 8008b1a:	0029      	movs	r1, r5
 8008b1c:	f7f9 f818 	bl	8001b50 <__aeabi_dsub>
 8008b20:	033c      	lsls	r4, r7, #12
 8008b22:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b24:	0b24      	lsrs	r4, r4, #12
 8008b26:	4334      	orrs	r4, r6
 8008b28:	900e      	str	r0, [sp, #56]	@ 0x38
 8008b2a:	910f      	str	r1, [sp, #60]	@ 0x3c
 8008b2c:	4a37      	ldr	r2, [pc, #220]	@ (8008c0c <_strtod_l+0xbe4>)
 8008b2e:	431c      	orrs	r4, r3
 8008b30:	d052      	beq.n	8008bd8 <_strtod_l+0xbb0>
 8008b32:	4b37      	ldr	r3, [pc, #220]	@ (8008c10 <_strtod_l+0xbe8>)
 8008b34:	f7f7 fc90 	bl	8000458 <__aeabi_dcmplt>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d000      	beq.n	8008b3e <_strtod_l+0xb16>
 8008b3c:	e4c1      	b.n	80084c2 <_strtod_l+0x49a>
 8008b3e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8008b40:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008b42:	4a34      	ldr	r2, [pc, #208]	@ (8008c14 <_strtod_l+0xbec>)
 8008b44:	4b2a      	ldr	r3, [pc, #168]	@ (8008bf0 <_strtod_l+0xbc8>)
 8008b46:	f7f7 fc9b 	bl	8000480 <__aeabi_dcmpgt>
 8008b4a:	2800      	cmp	r0, #0
 8008b4c:	d09a      	beq.n	8008a84 <_strtod_l+0xa5c>
 8008b4e:	e4b8      	b.n	80084c2 <_strtod_l+0x49a>
 8008b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d02a      	beq.n	8008bac <_strtod_l+0xb84>
 8008b56:	23d4      	movs	r3, #212	@ 0xd4
 8008b58:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008b5a:	04db      	lsls	r3, r3, #19
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d825      	bhi.n	8008bac <_strtod_l+0xb84>
 8008b60:	0020      	movs	r0, r4
 8008b62:	0029      	movs	r1, r5
 8008b64:	4a2c      	ldr	r2, [pc, #176]	@ (8008c18 <_strtod_l+0xbf0>)
 8008b66:	4b2d      	ldr	r3, [pc, #180]	@ (8008c1c <_strtod_l+0xbf4>)
 8008b68:	f7f7 fc80 	bl	800046c <__aeabi_dcmple>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d016      	beq.n	8008b9e <_strtod_l+0xb76>
 8008b70:	0020      	movs	r0, r4
 8008b72:	0029      	movs	r1, r5
 8008b74:	f7f7 fc98 	bl	80004a8 <__aeabi_d2uiz>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d100      	bne.n	8008b7e <_strtod_l+0xb56>
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	f7f9 fc7d 	bl	800247c <__aeabi_ui2d>
 8008b82:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b84:	0004      	movs	r4, r0
 8008b86:	000d      	movs	r5, r1
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d122      	bne.n	8008bd2 <_strtod_l+0xbaa>
 8008b8c:	2380      	movs	r3, #128	@ 0x80
 8008b8e:	061b      	lsls	r3, r3, #24
 8008b90:	18cb      	adds	r3, r1, r3
 8008b92:	9018      	str	r0, [sp, #96]	@ 0x60
 8008b94:	9319      	str	r3, [sp, #100]	@ 0x64
 8008b96:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008b98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b9a:	9216      	str	r2, [sp, #88]	@ 0x58
 8008b9c:	9317      	str	r3, [sp, #92]	@ 0x5c
 8008b9e:	22d6      	movs	r2, #214	@ 0xd6
 8008ba0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ba2:	04d2      	lsls	r2, r2, #19
 8008ba4:	189b      	adds	r3, r3, r2
 8008ba6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008ba8:	1a9b      	subs	r3, r3, r2
 8008baa:	9317      	str	r3, [sp, #92]	@ 0x5c
 8008bac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8008bae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008bb0:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8008bb2:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8008bb4:	f7ff f8e6 	bl	8007d84 <__ulp>
 8008bb8:	0002      	movs	r2, r0
 8008bba:	000b      	movs	r3, r1
 8008bbc:	0030      	movs	r0, r6
 8008bbe:	0039      	movs	r1, r7
 8008bc0:	f7f8 fce0 	bl	8001584 <__aeabi_dmul>
 8008bc4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008bc6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008bc8:	f7f7 fcdc 	bl	8000584 <__aeabi_dadd>
 8008bcc:	0006      	movs	r6, r0
 8008bce:	000f      	movs	r7, r1
 8008bd0:	e791      	b.n	8008af6 <_strtod_l+0xace>
 8008bd2:	9418      	str	r4, [sp, #96]	@ 0x60
 8008bd4:	9519      	str	r5, [sp, #100]	@ 0x64
 8008bd6:	e7de      	b.n	8008b96 <_strtod_l+0xb6e>
 8008bd8:	4b11      	ldr	r3, [pc, #68]	@ (8008c20 <_strtod_l+0xbf8>)
 8008bda:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8008bdc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008bde:	f7f7 fc3b 	bl	8000458 <__aeabi_dcmplt>
 8008be2:	e7b2      	b.n	8008b4a <_strtod_l+0xb22>
 8008be4:	fff00000 	.word	0xfff00000
 8008be8:	000fffff 	.word	0x000fffff
 8008bec:	3ff00000 	.word	0x3ff00000
 8008bf0:	3fe00000 	.word	0x3fe00000
 8008bf4:	7ff00000 	.word	0x7ff00000
 8008bf8:	7fe00000 	.word	0x7fe00000
 8008bfc:	fcb00000 	.word	0xfcb00000
 8008c00:	7c9fffff 	.word	0x7c9fffff
 8008c04:	7fefffff 	.word	0x7fefffff
 8008c08:	bff00000 	.word	0xbff00000
 8008c0c:	94a03595 	.word	0x94a03595
 8008c10:	3fdfffff 	.word	0x3fdfffff
 8008c14:	35afe535 	.word	0x35afe535
 8008c18:	ffc00000 	.word	0xffc00000
 8008c1c:	41dfffff 	.word	0x41dfffff
 8008c20:	3fcfffff 	.word	0x3fcfffff

08008c24 <_strtod_r>:
 8008c24:	b510      	push	{r4, lr}
 8008c26:	4b02      	ldr	r3, [pc, #8]	@ (8008c30 <_strtod_r+0xc>)
 8008c28:	f7ff f9fe 	bl	8008028 <_strtod_l>
 8008c2c:	bd10      	pop	{r4, pc}
 8008c2e:	46c0      	nop			@ (mov r8, r8)
 8008c30:	20000068 	.word	0x20000068

08008c34 <_strtol_l.isra.0>:
 8008c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c36:	b085      	sub	sp, #20
 8008c38:	0017      	movs	r7, r2
 8008c3a:	001e      	movs	r6, r3
 8008c3c:	9003      	str	r0, [sp, #12]
 8008c3e:	9101      	str	r1, [sp, #4]
 8008c40:	2b24      	cmp	r3, #36	@ 0x24
 8008c42:	d823      	bhi.n	8008c8c <_strtol_l.isra.0+0x58>
 8008c44:	000c      	movs	r4, r1
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d020      	beq.n	8008c8c <_strtol_l.isra.0+0x58>
 8008c4a:	4b3d      	ldr	r3, [pc, #244]	@ (8008d40 <_strtol_l.isra.0+0x10c>)
 8008c4c:	2208      	movs	r2, #8
 8008c4e:	469c      	mov	ip, r3
 8008c50:	0023      	movs	r3, r4
 8008c52:	4661      	mov	r1, ip
 8008c54:	781d      	ldrb	r5, [r3, #0]
 8008c56:	3401      	adds	r4, #1
 8008c58:	5d48      	ldrb	r0, [r1, r5]
 8008c5a:	0001      	movs	r1, r0
 8008c5c:	4011      	ands	r1, r2
 8008c5e:	4210      	tst	r0, r2
 8008c60:	d1f6      	bne.n	8008c50 <_strtol_l.isra.0+0x1c>
 8008c62:	2d2d      	cmp	r5, #45	@ 0x2d
 8008c64:	d119      	bne.n	8008c9a <_strtol_l.isra.0+0x66>
 8008c66:	7825      	ldrb	r5, [r4, #0]
 8008c68:	1c9c      	adds	r4, r3, #2
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	2210      	movs	r2, #16
 8008c70:	0033      	movs	r3, r6
 8008c72:	4393      	bics	r3, r2
 8008c74:	d11d      	bne.n	8008cb2 <_strtol_l.isra.0+0x7e>
 8008c76:	2d30      	cmp	r5, #48	@ 0x30
 8008c78:	d115      	bne.n	8008ca6 <_strtol_l.isra.0+0x72>
 8008c7a:	2120      	movs	r1, #32
 8008c7c:	7823      	ldrb	r3, [r4, #0]
 8008c7e:	438b      	bics	r3, r1
 8008c80:	2b58      	cmp	r3, #88	@ 0x58
 8008c82:	d110      	bne.n	8008ca6 <_strtol_l.isra.0+0x72>
 8008c84:	7865      	ldrb	r5, [r4, #1]
 8008c86:	3402      	adds	r4, #2
 8008c88:	2610      	movs	r6, #16
 8008c8a:	e012      	b.n	8008cb2 <_strtol_l.isra.0+0x7e>
 8008c8c:	f7fd fd3a 	bl	8006704 <__errno>
 8008c90:	2316      	movs	r3, #22
 8008c92:	6003      	str	r3, [r0, #0]
 8008c94:	2000      	movs	r0, #0
 8008c96:	b005      	add	sp, #20
 8008c98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c9a:	9100      	str	r1, [sp, #0]
 8008c9c:	2d2b      	cmp	r5, #43	@ 0x2b
 8008c9e:	d1e6      	bne.n	8008c6e <_strtol_l.isra.0+0x3a>
 8008ca0:	7825      	ldrb	r5, [r4, #0]
 8008ca2:	1c9c      	adds	r4, r3, #2
 8008ca4:	e7e3      	b.n	8008c6e <_strtol_l.isra.0+0x3a>
 8008ca6:	2e00      	cmp	r6, #0
 8008ca8:	d1ee      	bne.n	8008c88 <_strtol_l.isra.0+0x54>
 8008caa:	360a      	adds	r6, #10
 8008cac:	2d30      	cmp	r5, #48	@ 0x30
 8008cae:	d100      	bne.n	8008cb2 <_strtol_l.isra.0+0x7e>
 8008cb0:	3e02      	subs	r6, #2
 8008cb2:	4a24      	ldr	r2, [pc, #144]	@ (8008d44 <_strtol_l.isra.0+0x110>)
 8008cb4:	9b00      	ldr	r3, [sp, #0]
 8008cb6:	4694      	mov	ip, r2
 8008cb8:	4463      	add	r3, ip
 8008cba:	0031      	movs	r1, r6
 8008cbc:	0018      	movs	r0, r3
 8008cbe:	9302      	str	r3, [sp, #8]
 8008cc0:	f7f7 fac4 	bl	800024c <__aeabi_uidivmod>
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	4684      	mov	ip, r0
 8008cc8:	0010      	movs	r0, r2
 8008cca:	002b      	movs	r3, r5
 8008ccc:	3b30      	subs	r3, #48	@ 0x30
 8008cce:	2b09      	cmp	r3, #9
 8008cd0:	d811      	bhi.n	8008cf6 <_strtol_l.isra.0+0xc2>
 8008cd2:	001d      	movs	r5, r3
 8008cd4:	42ae      	cmp	r6, r5
 8008cd6:	dd1d      	ble.n	8008d14 <_strtol_l.isra.0+0xe0>
 8008cd8:	1c53      	adds	r3, r2, #1
 8008cda:	d009      	beq.n	8008cf0 <_strtol_l.isra.0+0xbc>
 8008cdc:	2201      	movs	r2, #1
 8008cde:	4252      	negs	r2, r2
 8008ce0:	4584      	cmp	ip, r0
 8008ce2:	d305      	bcc.n	8008cf0 <_strtol_l.isra.0+0xbc>
 8008ce4:	d101      	bne.n	8008cea <_strtol_l.isra.0+0xb6>
 8008ce6:	42a9      	cmp	r1, r5
 8008ce8:	db11      	blt.n	8008d0e <_strtol_l.isra.0+0xda>
 8008cea:	2201      	movs	r2, #1
 8008cec:	4370      	muls	r0, r6
 8008cee:	1828      	adds	r0, r5, r0
 8008cf0:	7825      	ldrb	r5, [r4, #0]
 8008cf2:	3401      	adds	r4, #1
 8008cf4:	e7e9      	b.n	8008cca <_strtol_l.isra.0+0x96>
 8008cf6:	002b      	movs	r3, r5
 8008cf8:	3b41      	subs	r3, #65	@ 0x41
 8008cfa:	2b19      	cmp	r3, #25
 8008cfc:	d801      	bhi.n	8008d02 <_strtol_l.isra.0+0xce>
 8008cfe:	3d37      	subs	r5, #55	@ 0x37
 8008d00:	e7e8      	b.n	8008cd4 <_strtol_l.isra.0+0xa0>
 8008d02:	002b      	movs	r3, r5
 8008d04:	3b61      	subs	r3, #97	@ 0x61
 8008d06:	2b19      	cmp	r3, #25
 8008d08:	d804      	bhi.n	8008d14 <_strtol_l.isra.0+0xe0>
 8008d0a:	3d57      	subs	r5, #87	@ 0x57
 8008d0c:	e7e2      	b.n	8008cd4 <_strtol_l.isra.0+0xa0>
 8008d0e:	2201      	movs	r2, #1
 8008d10:	4252      	negs	r2, r2
 8008d12:	e7ed      	b.n	8008cf0 <_strtol_l.isra.0+0xbc>
 8008d14:	1c53      	adds	r3, r2, #1
 8008d16:	d108      	bne.n	8008d2a <_strtol_l.isra.0+0xf6>
 8008d18:	2322      	movs	r3, #34	@ 0x22
 8008d1a:	9a03      	ldr	r2, [sp, #12]
 8008d1c:	9802      	ldr	r0, [sp, #8]
 8008d1e:	6013      	str	r3, [r2, #0]
 8008d20:	2f00      	cmp	r7, #0
 8008d22:	d0b8      	beq.n	8008c96 <_strtol_l.isra.0+0x62>
 8008d24:	1e63      	subs	r3, r4, #1
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	e007      	b.n	8008d3a <_strtol_l.isra.0+0x106>
 8008d2a:	9b00      	ldr	r3, [sp, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d000      	beq.n	8008d32 <_strtol_l.isra.0+0xfe>
 8008d30:	4240      	negs	r0, r0
 8008d32:	2f00      	cmp	r7, #0
 8008d34:	d0af      	beq.n	8008c96 <_strtol_l.isra.0+0x62>
 8008d36:	2a00      	cmp	r2, #0
 8008d38:	d1f4      	bne.n	8008d24 <_strtol_l.isra.0+0xf0>
 8008d3a:	9b01      	ldr	r3, [sp, #4]
 8008d3c:	603b      	str	r3, [r7, #0]
 8008d3e:	e7aa      	b.n	8008c96 <_strtol_l.isra.0+0x62>
 8008d40:	0800a249 	.word	0x0800a249
 8008d44:	7fffffff 	.word	0x7fffffff

08008d48 <_strtol_r>:
 8008d48:	b510      	push	{r4, lr}
 8008d4a:	f7ff ff73 	bl	8008c34 <_strtol_l.isra.0>
 8008d4e:	bd10      	pop	{r4, pc}

08008d50 <__ssputs_r>:
 8008d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d52:	688e      	ldr	r6, [r1, #8]
 8008d54:	b085      	sub	sp, #20
 8008d56:	001f      	movs	r7, r3
 8008d58:	000c      	movs	r4, r1
 8008d5a:	680b      	ldr	r3, [r1, #0]
 8008d5c:	9002      	str	r0, [sp, #8]
 8008d5e:	9203      	str	r2, [sp, #12]
 8008d60:	42be      	cmp	r6, r7
 8008d62:	d830      	bhi.n	8008dc6 <__ssputs_r+0x76>
 8008d64:	210c      	movs	r1, #12
 8008d66:	5e62      	ldrsh	r2, [r4, r1]
 8008d68:	2190      	movs	r1, #144	@ 0x90
 8008d6a:	00c9      	lsls	r1, r1, #3
 8008d6c:	420a      	tst	r2, r1
 8008d6e:	d028      	beq.n	8008dc2 <__ssputs_r+0x72>
 8008d70:	2003      	movs	r0, #3
 8008d72:	6921      	ldr	r1, [r4, #16]
 8008d74:	1a5b      	subs	r3, r3, r1
 8008d76:	9301      	str	r3, [sp, #4]
 8008d78:	6963      	ldr	r3, [r4, #20]
 8008d7a:	4343      	muls	r3, r0
 8008d7c:	9801      	ldr	r0, [sp, #4]
 8008d7e:	0fdd      	lsrs	r5, r3, #31
 8008d80:	18ed      	adds	r5, r5, r3
 8008d82:	1c7b      	adds	r3, r7, #1
 8008d84:	181b      	adds	r3, r3, r0
 8008d86:	106d      	asrs	r5, r5, #1
 8008d88:	42ab      	cmp	r3, r5
 8008d8a:	d900      	bls.n	8008d8e <__ssputs_r+0x3e>
 8008d8c:	001d      	movs	r5, r3
 8008d8e:	0552      	lsls	r2, r2, #21
 8008d90:	d528      	bpl.n	8008de4 <__ssputs_r+0x94>
 8008d92:	0029      	movs	r1, r5
 8008d94:	9802      	ldr	r0, [sp, #8]
 8008d96:	f7fe fbdd 	bl	8007554 <_malloc_r>
 8008d9a:	1e06      	subs	r6, r0, #0
 8008d9c:	d02c      	beq.n	8008df8 <__ssputs_r+0xa8>
 8008d9e:	9a01      	ldr	r2, [sp, #4]
 8008da0:	6921      	ldr	r1, [r4, #16]
 8008da2:	f000 faa9 	bl	80092f8 <memcpy>
 8008da6:	89a2      	ldrh	r2, [r4, #12]
 8008da8:	4b18      	ldr	r3, [pc, #96]	@ (8008e0c <__ssputs_r+0xbc>)
 8008daa:	401a      	ands	r2, r3
 8008dac:	2380      	movs	r3, #128	@ 0x80
 8008dae:	4313      	orrs	r3, r2
 8008db0:	81a3      	strh	r3, [r4, #12]
 8008db2:	9b01      	ldr	r3, [sp, #4]
 8008db4:	6126      	str	r6, [r4, #16]
 8008db6:	18f6      	adds	r6, r6, r3
 8008db8:	6026      	str	r6, [r4, #0]
 8008dba:	003e      	movs	r6, r7
 8008dbc:	6165      	str	r5, [r4, #20]
 8008dbe:	1aed      	subs	r5, r5, r3
 8008dc0:	60a5      	str	r5, [r4, #8]
 8008dc2:	42be      	cmp	r6, r7
 8008dc4:	d900      	bls.n	8008dc8 <__ssputs_r+0x78>
 8008dc6:	003e      	movs	r6, r7
 8008dc8:	0032      	movs	r2, r6
 8008dca:	9903      	ldr	r1, [sp, #12]
 8008dcc:	6820      	ldr	r0, [r4, #0]
 8008dce:	f000 fa3a 	bl	8009246 <memmove>
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	68a3      	ldr	r3, [r4, #8]
 8008dd6:	1b9b      	subs	r3, r3, r6
 8008dd8:	60a3      	str	r3, [r4, #8]
 8008dda:	6823      	ldr	r3, [r4, #0]
 8008ddc:	199b      	adds	r3, r3, r6
 8008dde:	6023      	str	r3, [r4, #0]
 8008de0:	b005      	add	sp, #20
 8008de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008de4:	002a      	movs	r2, r5
 8008de6:	9802      	ldr	r0, [sp, #8]
 8008de8:	f000 fe4e 	bl	8009a88 <_realloc_r>
 8008dec:	1e06      	subs	r6, r0, #0
 8008dee:	d1e0      	bne.n	8008db2 <__ssputs_r+0x62>
 8008df0:	6921      	ldr	r1, [r4, #16]
 8008df2:	9802      	ldr	r0, [sp, #8]
 8008df4:	f7fe fb38 	bl	8007468 <_free_r>
 8008df8:	230c      	movs	r3, #12
 8008dfa:	2001      	movs	r0, #1
 8008dfc:	9a02      	ldr	r2, [sp, #8]
 8008dfe:	4240      	negs	r0, r0
 8008e00:	6013      	str	r3, [r2, #0]
 8008e02:	89a2      	ldrh	r2, [r4, #12]
 8008e04:	3334      	adds	r3, #52	@ 0x34
 8008e06:	4313      	orrs	r3, r2
 8008e08:	81a3      	strh	r3, [r4, #12]
 8008e0a:	e7e9      	b.n	8008de0 <__ssputs_r+0x90>
 8008e0c:	fffffb7f 	.word	0xfffffb7f

08008e10 <_svfiprintf_r>:
 8008e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e12:	b0a1      	sub	sp, #132	@ 0x84
 8008e14:	9003      	str	r0, [sp, #12]
 8008e16:	001d      	movs	r5, r3
 8008e18:	898b      	ldrh	r3, [r1, #12]
 8008e1a:	000f      	movs	r7, r1
 8008e1c:	0016      	movs	r6, r2
 8008e1e:	061b      	lsls	r3, r3, #24
 8008e20:	d511      	bpl.n	8008e46 <_svfiprintf_r+0x36>
 8008e22:	690b      	ldr	r3, [r1, #16]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10e      	bne.n	8008e46 <_svfiprintf_r+0x36>
 8008e28:	2140      	movs	r1, #64	@ 0x40
 8008e2a:	f7fe fb93 	bl	8007554 <_malloc_r>
 8008e2e:	6038      	str	r0, [r7, #0]
 8008e30:	6138      	str	r0, [r7, #16]
 8008e32:	2800      	cmp	r0, #0
 8008e34:	d105      	bne.n	8008e42 <_svfiprintf_r+0x32>
 8008e36:	230c      	movs	r3, #12
 8008e38:	9a03      	ldr	r2, [sp, #12]
 8008e3a:	6013      	str	r3, [r2, #0]
 8008e3c:	2001      	movs	r0, #1
 8008e3e:	4240      	negs	r0, r0
 8008e40:	e0cf      	b.n	8008fe2 <_svfiprintf_r+0x1d2>
 8008e42:	2340      	movs	r3, #64	@ 0x40
 8008e44:	617b      	str	r3, [r7, #20]
 8008e46:	2300      	movs	r3, #0
 8008e48:	ac08      	add	r4, sp, #32
 8008e4a:	6163      	str	r3, [r4, #20]
 8008e4c:	3320      	adds	r3, #32
 8008e4e:	7663      	strb	r3, [r4, #25]
 8008e50:	3310      	adds	r3, #16
 8008e52:	76a3      	strb	r3, [r4, #26]
 8008e54:	9507      	str	r5, [sp, #28]
 8008e56:	0035      	movs	r5, r6
 8008e58:	782b      	ldrb	r3, [r5, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <_svfiprintf_r+0x52>
 8008e5e:	2b25      	cmp	r3, #37	@ 0x25
 8008e60:	d148      	bne.n	8008ef4 <_svfiprintf_r+0xe4>
 8008e62:	1bab      	subs	r3, r5, r6
 8008e64:	9305      	str	r3, [sp, #20]
 8008e66:	42b5      	cmp	r5, r6
 8008e68:	d00b      	beq.n	8008e82 <_svfiprintf_r+0x72>
 8008e6a:	0032      	movs	r2, r6
 8008e6c:	0039      	movs	r1, r7
 8008e6e:	9803      	ldr	r0, [sp, #12]
 8008e70:	f7ff ff6e 	bl	8008d50 <__ssputs_r>
 8008e74:	3001      	adds	r0, #1
 8008e76:	d100      	bne.n	8008e7a <_svfiprintf_r+0x6a>
 8008e78:	e0ae      	b.n	8008fd8 <_svfiprintf_r+0x1c8>
 8008e7a:	6963      	ldr	r3, [r4, #20]
 8008e7c:	9a05      	ldr	r2, [sp, #20]
 8008e7e:	189b      	adds	r3, r3, r2
 8008e80:	6163      	str	r3, [r4, #20]
 8008e82:	782b      	ldrb	r3, [r5, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d100      	bne.n	8008e8a <_svfiprintf_r+0x7a>
 8008e88:	e0a6      	b.n	8008fd8 <_svfiprintf_r+0x1c8>
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	4252      	negs	r2, r2
 8008e90:	6062      	str	r2, [r4, #4]
 8008e92:	a904      	add	r1, sp, #16
 8008e94:	3254      	adds	r2, #84	@ 0x54
 8008e96:	1852      	adds	r2, r2, r1
 8008e98:	1c6e      	adds	r6, r5, #1
 8008e9a:	6023      	str	r3, [r4, #0]
 8008e9c:	60e3      	str	r3, [r4, #12]
 8008e9e:	60a3      	str	r3, [r4, #8]
 8008ea0:	7013      	strb	r3, [r2, #0]
 8008ea2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008ea4:	4b54      	ldr	r3, [pc, #336]	@ (8008ff8 <_svfiprintf_r+0x1e8>)
 8008ea6:	2205      	movs	r2, #5
 8008ea8:	0018      	movs	r0, r3
 8008eaa:	7831      	ldrb	r1, [r6, #0]
 8008eac:	9305      	str	r3, [sp, #20]
 8008eae:	f7fd fc56 	bl	800675e <memchr>
 8008eb2:	1c75      	adds	r5, r6, #1
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d11f      	bne.n	8008ef8 <_svfiprintf_r+0xe8>
 8008eb8:	6822      	ldr	r2, [r4, #0]
 8008eba:	06d3      	lsls	r3, r2, #27
 8008ebc:	d504      	bpl.n	8008ec8 <_svfiprintf_r+0xb8>
 8008ebe:	2353      	movs	r3, #83	@ 0x53
 8008ec0:	a904      	add	r1, sp, #16
 8008ec2:	185b      	adds	r3, r3, r1
 8008ec4:	2120      	movs	r1, #32
 8008ec6:	7019      	strb	r1, [r3, #0]
 8008ec8:	0713      	lsls	r3, r2, #28
 8008eca:	d504      	bpl.n	8008ed6 <_svfiprintf_r+0xc6>
 8008ecc:	2353      	movs	r3, #83	@ 0x53
 8008ece:	a904      	add	r1, sp, #16
 8008ed0:	185b      	adds	r3, r3, r1
 8008ed2:	212b      	movs	r1, #43	@ 0x2b
 8008ed4:	7019      	strb	r1, [r3, #0]
 8008ed6:	7833      	ldrb	r3, [r6, #0]
 8008ed8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eda:	d016      	beq.n	8008f0a <_svfiprintf_r+0xfa>
 8008edc:	0035      	movs	r5, r6
 8008ede:	2100      	movs	r1, #0
 8008ee0:	200a      	movs	r0, #10
 8008ee2:	68e3      	ldr	r3, [r4, #12]
 8008ee4:	782a      	ldrb	r2, [r5, #0]
 8008ee6:	1c6e      	adds	r6, r5, #1
 8008ee8:	3a30      	subs	r2, #48	@ 0x30
 8008eea:	2a09      	cmp	r2, #9
 8008eec:	d950      	bls.n	8008f90 <_svfiprintf_r+0x180>
 8008eee:	2900      	cmp	r1, #0
 8008ef0:	d111      	bne.n	8008f16 <_svfiprintf_r+0x106>
 8008ef2:	e017      	b.n	8008f24 <_svfiprintf_r+0x114>
 8008ef4:	3501      	adds	r5, #1
 8008ef6:	e7af      	b.n	8008e58 <_svfiprintf_r+0x48>
 8008ef8:	9b05      	ldr	r3, [sp, #20]
 8008efa:	6822      	ldr	r2, [r4, #0]
 8008efc:	1ac0      	subs	r0, r0, r3
 8008efe:	2301      	movs	r3, #1
 8008f00:	4083      	lsls	r3, r0
 8008f02:	4313      	orrs	r3, r2
 8008f04:	002e      	movs	r6, r5
 8008f06:	6023      	str	r3, [r4, #0]
 8008f08:	e7cc      	b.n	8008ea4 <_svfiprintf_r+0x94>
 8008f0a:	9b07      	ldr	r3, [sp, #28]
 8008f0c:	1d19      	adds	r1, r3, #4
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	9107      	str	r1, [sp, #28]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	db01      	blt.n	8008f1a <_svfiprintf_r+0x10a>
 8008f16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f18:	e004      	b.n	8008f24 <_svfiprintf_r+0x114>
 8008f1a:	425b      	negs	r3, r3
 8008f1c:	60e3      	str	r3, [r4, #12]
 8008f1e:	2302      	movs	r3, #2
 8008f20:	4313      	orrs	r3, r2
 8008f22:	6023      	str	r3, [r4, #0]
 8008f24:	782b      	ldrb	r3, [r5, #0]
 8008f26:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f28:	d10c      	bne.n	8008f44 <_svfiprintf_r+0x134>
 8008f2a:	786b      	ldrb	r3, [r5, #1]
 8008f2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f2e:	d134      	bne.n	8008f9a <_svfiprintf_r+0x18a>
 8008f30:	9b07      	ldr	r3, [sp, #28]
 8008f32:	3502      	adds	r5, #2
 8008f34:	1d1a      	adds	r2, r3, #4
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	9207      	str	r2, [sp, #28]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	da01      	bge.n	8008f42 <_svfiprintf_r+0x132>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	425b      	negs	r3, r3
 8008f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f44:	4e2d      	ldr	r6, [pc, #180]	@ (8008ffc <_svfiprintf_r+0x1ec>)
 8008f46:	2203      	movs	r2, #3
 8008f48:	0030      	movs	r0, r6
 8008f4a:	7829      	ldrb	r1, [r5, #0]
 8008f4c:	f7fd fc07 	bl	800675e <memchr>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d006      	beq.n	8008f62 <_svfiprintf_r+0x152>
 8008f54:	2340      	movs	r3, #64	@ 0x40
 8008f56:	1b80      	subs	r0, r0, r6
 8008f58:	4083      	lsls	r3, r0
 8008f5a:	6822      	ldr	r2, [r4, #0]
 8008f5c:	3501      	adds	r5, #1
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	6023      	str	r3, [r4, #0]
 8008f62:	7829      	ldrb	r1, [r5, #0]
 8008f64:	2206      	movs	r2, #6
 8008f66:	4826      	ldr	r0, [pc, #152]	@ (8009000 <_svfiprintf_r+0x1f0>)
 8008f68:	1c6e      	adds	r6, r5, #1
 8008f6a:	7621      	strb	r1, [r4, #24]
 8008f6c:	f7fd fbf7 	bl	800675e <memchr>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	d038      	beq.n	8008fe6 <_svfiprintf_r+0x1d6>
 8008f74:	4b23      	ldr	r3, [pc, #140]	@ (8009004 <_svfiprintf_r+0x1f4>)
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d122      	bne.n	8008fc0 <_svfiprintf_r+0x1b0>
 8008f7a:	2207      	movs	r2, #7
 8008f7c:	9b07      	ldr	r3, [sp, #28]
 8008f7e:	3307      	adds	r3, #7
 8008f80:	4393      	bics	r3, r2
 8008f82:	3308      	adds	r3, #8
 8008f84:	9307      	str	r3, [sp, #28]
 8008f86:	6963      	ldr	r3, [r4, #20]
 8008f88:	9a04      	ldr	r2, [sp, #16]
 8008f8a:	189b      	adds	r3, r3, r2
 8008f8c:	6163      	str	r3, [r4, #20]
 8008f8e:	e762      	b.n	8008e56 <_svfiprintf_r+0x46>
 8008f90:	4343      	muls	r3, r0
 8008f92:	0035      	movs	r5, r6
 8008f94:	2101      	movs	r1, #1
 8008f96:	189b      	adds	r3, r3, r2
 8008f98:	e7a4      	b.n	8008ee4 <_svfiprintf_r+0xd4>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	200a      	movs	r0, #10
 8008f9e:	0019      	movs	r1, r3
 8008fa0:	3501      	adds	r5, #1
 8008fa2:	6063      	str	r3, [r4, #4]
 8008fa4:	782a      	ldrb	r2, [r5, #0]
 8008fa6:	1c6e      	adds	r6, r5, #1
 8008fa8:	3a30      	subs	r2, #48	@ 0x30
 8008faa:	2a09      	cmp	r2, #9
 8008fac:	d903      	bls.n	8008fb6 <_svfiprintf_r+0x1a6>
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0c8      	beq.n	8008f44 <_svfiprintf_r+0x134>
 8008fb2:	9109      	str	r1, [sp, #36]	@ 0x24
 8008fb4:	e7c6      	b.n	8008f44 <_svfiprintf_r+0x134>
 8008fb6:	4341      	muls	r1, r0
 8008fb8:	0035      	movs	r5, r6
 8008fba:	2301      	movs	r3, #1
 8008fbc:	1889      	adds	r1, r1, r2
 8008fbe:	e7f1      	b.n	8008fa4 <_svfiprintf_r+0x194>
 8008fc0:	aa07      	add	r2, sp, #28
 8008fc2:	9200      	str	r2, [sp, #0]
 8008fc4:	0021      	movs	r1, r4
 8008fc6:	003a      	movs	r2, r7
 8008fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8009008 <_svfiprintf_r+0x1f8>)
 8008fca:	9803      	ldr	r0, [sp, #12]
 8008fcc:	f7fc fba8 	bl	8005720 <_printf_float>
 8008fd0:	9004      	str	r0, [sp, #16]
 8008fd2:	9b04      	ldr	r3, [sp, #16]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	d1d6      	bne.n	8008f86 <_svfiprintf_r+0x176>
 8008fd8:	89bb      	ldrh	r3, [r7, #12]
 8008fda:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008fdc:	065b      	lsls	r3, r3, #25
 8008fde:	d500      	bpl.n	8008fe2 <_svfiprintf_r+0x1d2>
 8008fe0:	e72c      	b.n	8008e3c <_svfiprintf_r+0x2c>
 8008fe2:	b021      	add	sp, #132	@ 0x84
 8008fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fe6:	aa07      	add	r2, sp, #28
 8008fe8:	9200      	str	r2, [sp, #0]
 8008fea:	0021      	movs	r1, r4
 8008fec:	003a      	movs	r2, r7
 8008fee:	4b06      	ldr	r3, [pc, #24]	@ (8009008 <_svfiprintf_r+0x1f8>)
 8008ff0:	9803      	ldr	r0, [sp, #12]
 8008ff2:	f7fc fe43 	bl	8005c7c <_printf_i>
 8008ff6:	e7eb      	b.n	8008fd0 <_svfiprintf_r+0x1c0>
 8008ff8:	0800a045 	.word	0x0800a045
 8008ffc:	0800a04b 	.word	0x0800a04b
 8009000:	0800a04f 	.word	0x0800a04f
 8009004:	08005721 	.word	0x08005721
 8009008:	08008d51 	.word	0x08008d51

0800900c <__sflush_r>:
 800900c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800900e:	220c      	movs	r2, #12
 8009010:	5e8b      	ldrsh	r3, [r1, r2]
 8009012:	0005      	movs	r5, r0
 8009014:	000c      	movs	r4, r1
 8009016:	071a      	lsls	r2, r3, #28
 8009018:	d456      	bmi.n	80090c8 <__sflush_r+0xbc>
 800901a:	684a      	ldr	r2, [r1, #4]
 800901c:	2a00      	cmp	r2, #0
 800901e:	dc02      	bgt.n	8009026 <__sflush_r+0x1a>
 8009020:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8009022:	2a00      	cmp	r2, #0
 8009024:	dd4e      	ble.n	80090c4 <__sflush_r+0xb8>
 8009026:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009028:	2f00      	cmp	r7, #0
 800902a:	d04b      	beq.n	80090c4 <__sflush_r+0xb8>
 800902c:	2200      	movs	r2, #0
 800902e:	2080      	movs	r0, #128	@ 0x80
 8009030:	682e      	ldr	r6, [r5, #0]
 8009032:	602a      	str	r2, [r5, #0]
 8009034:	001a      	movs	r2, r3
 8009036:	0140      	lsls	r0, r0, #5
 8009038:	6a21      	ldr	r1, [r4, #32]
 800903a:	4002      	ands	r2, r0
 800903c:	4203      	tst	r3, r0
 800903e:	d033      	beq.n	80090a8 <__sflush_r+0x9c>
 8009040:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009042:	89a3      	ldrh	r3, [r4, #12]
 8009044:	075b      	lsls	r3, r3, #29
 8009046:	d506      	bpl.n	8009056 <__sflush_r+0x4a>
 8009048:	6863      	ldr	r3, [r4, #4]
 800904a:	1ad2      	subs	r2, r2, r3
 800904c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <__sflush_r+0x4a>
 8009052:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009054:	1ad2      	subs	r2, r2, r3
 8009056:	2300      	movs	r3, #0
 8009058:	0028      	movs	r0, r5
 800905a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800905c:	6a21      	ldr	r1, [r4, #32]
 800905e:	47b8      	blx	r7
 8009060:	89a2      	ldrh	r2, [r4, #12]
 8009062:	1c43      	adds	r3, r0, #1
 8009064:	d106      	bne.n	8009074 <__sflush_r+0x68>
 8009066:	6829      	ldr	r1, [r5, #0]
 8009068:	291d      	cmp	r1, #29
 800906a:	d846      	bhi.n	80090fa <__sflush_r+0xee>
 800906c:	4b29      	ldr	r3, [pc, #164]	@ (8009114 <__sflush_r+0x108>)
 800906e:	40cb      	lsrs	r3, r1
 8009070:	07db      	lsls	r3, r3, #31
 8009072:	d542      	bpl.n	80090fa <__sflush_r+0xee>
 8009074:	2300      	movs	r3, #0
 8009076:	6063      	str	r3, [r4, #4]
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	6023      	str	r3, [r4, #0]
 800907c:	04d2      	lsls	r2, r2, #19
 800907e:	d505      	bpl.n	800908c <__sflush_r+0x80>
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	d102      	bne.n	800908a <__sflush_r+0x7e>
 8009084:	682b      	ldr	r3, [r5, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d100      	bne.n	800908c <__sflush_r+0x80>
 800908a:	6560      	str	r0, [r4, #84]	@ 0x54
 800908c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800908e:	602e      	str	r6, [r5, #0]
 8009090:	2900      	cmp	r1, #0
 8009092:	d017      	beq.n	80090c4 <__sflush_r+0xb8>
 8009094:	0023      	movs	r3, r4
 8009096:	3344      	adds	r3, #68	@ 0x44
 8009098:	4299      	cmp	r1, r3
 800909a:	d002      	beq.n	80090a2 <__sflush_r+0x96>
 800909c:	0028      	movs	r0, r5
 800909e:	f7fe f9e3 	bl	8007468 <_free_r>
 80090a2:	2300      	movs	r3, #0
 80090a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80090a6:	e00d      	b.n	80090c4 <__sflush_r+0xb8>
 80090a8:	2301      	movs	r3, #1
 80090aa:	0028      	movs	r0, r5
 80090ac:	47b8      	blx	r7
 80090ae:	0002      	movs	r2, r0
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	d1c6      	bne.n	8009042 <__sflush_r+0x36>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d0c3      	beq.n	8009042 <__sflush_r+0x36>
 80090ba:	2b1d      	cmp	r3, #29
 80090bc:	d001      	beq.n	80090c2 <__sflush_r+0xb6>
 80090be:	2b16      	cmp	r3, #22
 80090c0:	d11a      	bne.n	80090f8 <__sflush_r+0xec>
 80090c2:	602e      	str	r6, [r5, #0]
 80090c4:	2000      	movs	r0, #0
 80090c6:	e01e      	b.n	8009106 <__sflush_r+0xfa>
 80090c8:	690e      	ldr	r6, [r1, #16]
 80090ca:	2e00      	cmp	r6, #0
 80090cc:	d0fa      	beq.n	80090c4 <__sflush_r+0xb8>
 80090ce:	680f      	ldr	r7, [r1, #0]
 80090d0:	600e      	str	r6, [r1, #0]
 80090d2:	1bba      	subs	r2, r7, r6
 80090d4:	9201      	str	r2, [sp, #4]
 80090d6:	2200      	movs	r2, #0
 80090d8:	079b      	lsls	r3, r3, #30
 80090da:	d100      	bne.n	80090de <__sflush_r+0xd2>
 80090dc:	694a      	ldr	r2, [r1, #20]
 80090de:	60a2      	str	r2, [r4, #8]
 80090e0:	9b01      	ldr	r3, [sp, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	ddee      	ble.n	80090c4 <__sflush_r+0xb8>
 80090e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80090e8:	0032      	movs	r2, r6
 80090ea:	001f      	movs	r7, r3
 80090ec:	0028      	movs	r0, r5
 80090ee:	9b01      	ldr	r3, [sp, #4]
 80090f0:	6a21      	ldr	r1, [r4, #32]
 80090f2:	47b8      	blx	r7
 80090f4:	2800      	cmp	r0, #0
 80090f6:	dc07      	bgt.n	8009108 <__sflush_r+0xfc>
 80090f8:	89a2      	ldrh	r2, [r4, #12]
 80090fa:	2340      	movs	r3, #64	@ 0x40
 80090fc:	2001      	movs	r0, #1
 80090fe:	4313      	orrs	r3, r2
 8009100:	b21b      	sxth	r3, r3
 8009102:	81a3      	strh	r3, [r4, #12]
 8009104:	4240      	negs	r0, r0
 8009106:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009108:	9b01      	ldr	r3, [sp, #4]
 800910a:	1836      	adds	r6, r6, r0
 800910c:	1a1b      	subs	r3, r3, r0
 800910e:	9301      	str	r3, [sp, #4]
 8009110:	e7e6      	b.n	80090e0 <__sflush_r+0xd4>
 8009112:	46c0      	nop			@ (mov r8, r8)
 8009114:	20400001 	.word	0x20400001

08009118 <_fflush_r>:
 8009118:	690b      	ldr	r3, [r1, #16]
 800911a:	b570      	push	{r4, r5, r6, lr}
 800911c:	0005      	movs	r5, r0
 800911e:	000c      	movs	r4, r1
 8009120:	2b00      	cmp	r3, #0
 8009122:	d102      	bne.n	800912a <_fflush_r+0x12>
 8009124:	2500      	movs	r5, #0
 8009126:	0028      	movs	r0, r5
 8009128:	bd70      	pop	{r4, r5, r6, pc}
 800912a:	2800      	cmp	r0, #0
 800912c:	d004      	beq.n	8009138 <_fflush_r+0x20>
 800912e:	6a03      	ldr	r3, [r0, #32]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d101      	bne.n	8009138 <_fflush_r+0x20>
 8009134:	f7fd f94a 	bl	80063cc <__sinit>
 8009138:	220c      	movs	r2, #12
 800913a:	5ea3      	ldrsh	r3, [r4, r2]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d0f1      	beq.n	8009124 <_fflush_r+0xc>
 8009140:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009142:	07d2      	lsls	r2, r2, #31
 8009144:	d404      	bmi.n	8009150 <_fflush_r+0x38>
 8009146:	059b      	lsls	r3, r3, #22
 8009148:	d402      	bmi.n	8009150 <_fflush_r+0x38>
 800914a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800914c:	f7fd fb05 	bl	800675a <__retarget_lock_acquire_recursive>
 8009150:	0028      	movs	r0, r5
 8009152:	0021      	movs	r1, r4
 8009154:	f7ff ff5a 	bl	800900c <__sflush_r>
 8009158:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800915a:	0005      	movs	r5, r0
 800915c:	07db      	lsls	r3, r3, #31
 800915e:	d4e2      	bmi.n	8009126 <_fflush_r+0xe>
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	059b      	lsls	r3, r3, #22
 8009164:	d4df      	bmi.n	8009126 <_fflush_r+0xe>
 8009166:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009168:	f7fd faf8 	bl	800675c <__retarget_lock_release_recursive>
 800916c:	e7db      	b.n	8009126 <_fflush_r+0xe>
	...

08009170 <__swhatbuf_r>:
 8009170:	b570      	push	{r4, r5, r6, lr}
 8009172:	000e      	movs	r6, r1
 8009174:	001d      	movs	r5, r3
 8009176:	230e      	movs	r3, #14
 8009178:	5ec9      	ldrsh	r1, [r1, r3]
 800917a:	0014      	movs	r4, r2
 800917c:	b096      	sub	sp, #88	@ 0x58
 800917e:	2900      	cmp	r1, #0
 8009180:	da0c      	bge.n	800919c <__swhatbuf_r+0x2c>
 8009182:	89b2      	ldrh	r2, [r6, #12]
 8009184:	2380      	movs	r3, #128	@ 0x80
 8009186:	0011      	movs	r1, r2
 8009188:	4019      	ands	r1, r3
 800918a:	421a      	tst	r2, r3
 800918c:	d114      	bne.n	80091b8 <__swhatbuf_r+0x48>
 800918e:	2380      	movs	r3, #128	@ 0x80
 8009190:	00db      	lsls	r3, r3, #3
 8009192:	2000      	movs	r0, #0
 8009194:	6029      	str	r1, [r5, #0]
 8009196:	6023      	str	r3, [r4, #0]
 8009198:	b016      	add	sp, #88	@ 0x58
 800919a:	bd70      	pop	{r4, r5, r6, pc}
 800919c:	466a      	mov	r2, sp
 800919e:	f000 f875 	bl	800928c <_fstat_r>
 80091a2:	2800      	cmp	r0, #0
 80091a4:	dbed      	blt.n	8009182 <__swhatbuf_r+0x12>
 80091a6:	23f0      	movs	r3, #240	@ 0xf0
 80091a8:	9901      	ldr	r1, [sp, #4]
 80091aa:	021b      	lsls	r3, r3, #8
 80091ac:	4019      	ands	r1, r3
 80091ae:	4b04      	ldr	r3, [pc, #16]	@ (80091c0 <__swhatbuf_r+0x50>)
 80091b0:	18c9      	adds	r1, r1, r3
 80091b2:	424b      	negs	r3, r1
 80091b4:	4159      	adcs	r1, r3
 80091b6:	e7ea      	b.n	800918e <__swhatbuf_r+0x1e>
 80091b8:	2100      	movs	r1, #0
 80091ba:	2340      	movs	r3, #64	@ 0x40
 80091bc:	e7e9      	b.n	8009192 <__swhatbuf_r+0x22>
 80091be:	46c0      	nop			@ (mov r8, r8)
 80091c0:	ffffe000 	.word	0xffffe000

080091c4 <__smakebuf_r>:
 80091c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091c6:	2602      	movs	r6, #2
 80091c8:	898b      	ldrh	r3, [r1, #12]
 80091ca:	0005      	movs	r5, r0
 80091cc:	000c      	movs	r4, r1
 80091ce:	b085      	sub	sp, #20
 80091d0:	4233      	tst	r3, r6
 80091d2:	d007      	beq.n	80091e4 <__smakebuf_r+0x20>
 80091d4:	0023      	movs	r3, r4
 80091d6:	3347      	adds	r3, #71	@ 0x47
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	6123      	str	r3, [r4, #16]
 80091dc:	2301      	movs	r3, #1
 80091de:	6163      	str	r3, [r4, #20]
 80091e0:	b005      	add	sp, #20
 80091e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e4:	ab03      	add	r3, sp, #12
 80091e6:	aa02      	add	r2, sp, #8
 80091e8:	f7ff ffc2 	bl	8009170 <__swhatbuf_r>
 80091ec:	9f02      	ldr	r7, [sp, #8]
 80091ee:	9001      	str	r0, [sp, #4]
 80091f0:	0039      	movs	r1, r7
 80091f2:	0028      	movs	r0, r5
 80091f4:	f7fe f9ae 	bl	8007554 <_malloc_r>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	d108      	bne.n	800920e <__smakebuf_r+0x4a>
 80091fc:	220c      	movs	r2, #12
 80091fe:	5ea3      	ldrsh	r3, [r4, r2]
 8009200:	059a      	lsls	r2, r3, #22
 8009202:	d4ed      	bmi.n	80091e0 <__smakebuf_r+0x1c>
 8009204:	2203      	movs	r2, #3
 8009206:	4393      	bics	r3, r2
 8009208:	431e      	orrs	r6, r3
 800920a:	81a6      	strh	r6, [r4, #12]
 800920c:	e7e2      	b.n	80091d4 <__smakebuf_r+0x10>
 800920e:	2380      	movs	r3, #128	@ 0x80
 8009210:	89a2      	ldrh	r2, [r4, #12]
 8009212:	6020      	str	r0, [r4, #0]
 8009214:	4313      	orrs	r3, r2
 8009216:	81a3      	strh	r3, [r4, #12]
 8009218:	9b03      	ldr	r3, [sp, #12]
 800921a:	6120      	str	r0, [r4, #16]
 800921c:	6167      	str	r7, [r4, #20]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00c      	beq.n	800923c <__smakebuf_r+0x78>
 8009222:	0028      	movs	r0, r5
 8009224:	230e      	movs	r3, #14
 8009226:	5ee1      	ldrsh	r1, [r4, r3]
 8009228:	f000 f842 	bl	80092b0 <_isatty_r>
 800922c:	2800      	cmp	r0, #0
 800922e:	d005      	beq.n	800923c <__smakebuf_r+0x78>
 8009230:	2303      	movs	r3, #3
 8009232:	89a2      	ldrh	r2, [r4, #12]
 8009234:	439a      	bics	r2, r3
 8009236:	3b02      	subs	r3, #2
 8009238:	4313      	orrs	r3, r2
 800923a:	81a3      	strh	r3, [r4, #12]
 800923c:	89a3      	ldrh	r3, [r4, #12]
 800923e:	9a01      	ldr	r2, [sp, #4]
 8009240:	4313      	orrs	r3, r2
 8009242:	81a3      	strh	r3, [r4, #12]
 8009244:	e7cc      	b.n	80091e0 <__smakebuf_r+0x1c>

08009246 <memmove>:
 8009246:	b510      	push	{r4, lr}
 8009248:	4288      	cmp	r0, r1
 800924a:	d902      	bls.n	8009252 <memmove+0xc>
 800924c:	188b      	adds	r3, r1, r2
 800924e:	4298      	cmp	r0, r3
 8009250:	d308      	bcc.n	8009264 <memmove+0x1e>
 8009252:	2300      	movs	r3, #0
 8009254:	429a      	cmp	r2, r3
 8009256:	d007      	beq.n	8009268 <memmove+0x22>
 8009258:	5ccc      	ldrb	r4, [r1, r3]
 800925a:	54c4      	strb	r4, [r0, r3]
 800925c:	3301      	adds	r3, #1
 800925e:	e7f9      	b.n	8009254 <memmove+0xe>
 8009260:	5c8b      	ldrb	r3, [r1, r2]
 8009262:	5483      	strb	r3, [r0, r2]
 8009264:	3a01      	subs	r2, #1
 8009266:	d2fb      	bcs.n	8009260 <memmove+0x1a>
 8009268:	bd10      	pop	{r4, pc}

0800926a <strncmp>:
 800926a:	b530      	push	{r4, r5, lr}
 800926c:	0005      	movs	r5, r0
 800926e:	1e10      	subs	r0, r2, #0
 8009270:	d00b      	beq.n	800928a <strncmp+0x20>
 8009272:	2400      	movs	r4, #0
 8009274:	3a01      	subs	r2, #1
 8009276:	5d2b      	ldrb	r3, [r5, r4]
 8009278:	5d08      	ldrb	r0, [r1, r4]
 800927a:	4283      	cmp	r3, r0
 800927c:	d104      	bne.n	8009288 <strncmp+0x1e>
 800927e:	4294      	cmp	r4, r2
 8009280:	d002      	beq.n	8009288 <strncmp+0x1e>
 8009282:	3401      	adds	r4, #1
 8009284:	2b00      	cmp	r3, #0
 8009286:	d1f6      	bne.n	8009276 <strncmp+0xc>
 8009288:	1a18      	subs	r0, r3, r0
 800928a:	bd30      	pop	{r4, r5, pc}

0800928c <_fstat_r>:
 800928c:	2300      	movs	r3, #0
 800928e:	b570      	push	{r4, r5, r6, lr}
 8009290:	4d06      	ldr	r5, [pc, #24]	@ (80092ac <_fstat_r+0x20>)
 8009292:	0004      	movs	r4, r0
 8009294:	0008      	movs	r0, r1
 8009296:	0011      	movs	r1, r2
 8009298:	602b      	str	r3, [r5, #0]
 800929a:	f7f9 fd0d 	bl	8002cb8 <_fstat>
 800929e:	1c43      	adds	r3, r0, #1
 80092a0:	d103      	bne.n	80092aa <_fstat_r+0x1e>
 80092a2:	682b      	ldr	r3, [r5, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d000      	beq.n	80092aa <_fstat_r+0x1e>
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	bd70      	pop	{r4, r5, r6, pc}
 80092ac:	20000c14 	.word	0x20000c14

080092b0 <_isatty_r>:
 80092b0:	2300      	movs	r3, #0
 80092b2:	b570      	push	{r4, r5, r6, lr}
 80092b4:	4d06      	ldr	r5, [pc, #24]	@ (80092d0 <_isatty_r+0x20>)
 80092b6:	0004      	movs	r4, r0
 80092b8:	0008      	movs	r0, r1
 80092ba:	602b      	str	r3, [r5, #0]
 80092bc:	f7f9 fd0a 	bl	8002cd4 <_isatty>
 80092c0:	1c43      	adds	r3, r0, #1
 80092c2:	d103      	bne.n	80092cc <_isatty_r+0x1c>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d000      	beq.n	80092cc <_isatty_r+0x1c>
 80092ca:	6023      	str	r3, [r4, #0]
 80092cc:	bd70      	pop	{r4, r5, r6, pc}
 80092ce:	46c0      	nop			@ (mov r8, r8)
 80092d0:	20000c14 	.word	0x20000c14

080092d4 <_sbrk_r>:
 80092d4:	2300      	movs	r3, #0
 80092d6:	b570      	push	{r4, r5, r6, lr}
 80092d8:	4d06      	ldr	r5, [pc, #24]	@ (80092f4 <_sbrk_r+0x20>)
 80092da:	0004      	movs	r4, r0
 80092dc:	0008      	movs	r0, r1
 80092de:	602b      	str	r3, [r5, #0]
 80092e0:	f7f9 fd0c 	bl	8002cfc <_sbrk>
 80092e4:	1c43      	adds	r3, r0, #1
 80092e6:	d103      	bne.n	80092f0 <_sbrk_r+0x1c>
 80092e8:	682b      	ldr	r3, [r5, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d000      	beq.n	80092f0 <_sbrk_r+0x1c>
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	bd70      	pop	{r4, r5, r6, pc}
 80092f2:	46c0      	nop			@ (mov r8, r8)
 80092f4:	20000c14 	.word	0x20000c14

080092f8 <memcpy>:
 80092f8:	2300      	movs	r3, #0
 80092fa:	b510      	push	{r4, lr}
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d100      	bne.n	8009302 <memcpy+0xa>
 8009300:	bd10      	pop	{r4, pc}
 8009302:	5ccc      	ldrb	r4, [r1, r3]
 8009304:	54c4      	strb	r4, [r0, r3]
 8009306:	3301      	adds	r3, #1
 8009308:	e7f8      	b.n	80092fc <memcpy+0x4>
	...

0800930c <nan>:
 800930c:	2000      	movs	r0, #0
 800930e:	4901      	ldr	r1, [pc, #4]	@ (8009314 <nan+0x8>)
 8009310:	4770      	bx	lr
 8009312:	46c0      	nop			@ (mov r8, r8)
 8009314:	7ff80000 	.word	0x7ff80000

08009318 <__assert_func>:
 8009318:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800931a:	0014      	movs	r4, r2
 800931c:	001a      	movs	r2, r3
 800931e:	4b09      	ldr	r3, [pc, #36]	@ (8009344 <__assert_func+0x2c>)
 8009320:	0005      	movs	r5, r0
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	000e      	movs	r6, r1
 8009326:	68d8      	ldr	r0, [r3, #12]
 8009328:	4b07      	ldr	r3, [pc, #28]	@ (8009348 <__assert_func+0x30>)
 800932a:	2c00      	cmp	r4, #0
 800932c:	d101      	bne.n	8009332 <__assert_func+0x1a>
 800932e:	4b07      	ldr	r3, [pc, #28]	@ (800934c <__assert_func+0x34>)
 8009330:	001c      	movs	r4, r3
 8009332:	4907      	ldr	r1, [pc, #28]	@ (8009350 <__assert_func+0x38>)
 8009334:	9301      	str	r3, [sp, #4]
 8009336:	9402      	str	r4, [sp, #8]
 8009338:	002b      	movs	r3, r5
 800933a:	9600      	str	r6, [sp, #0]
 800933c:	f000 fbe2 	bl	8009b04 <fiprintf>
 8009340:	f000 fbf0 	bl	8009b24 <abort>
 8009344:	20000018 	.word	0x20000018
 8009348:	0800a05e 	.word	0x0800a05e
 800934c:	0800a099 	.word	0x0800a099
 8009350:	0800a06b 	.word	0x0800a06b

08009354 <_calloc_r>:
 8009354:	b570      	push	{r4, r5, r6, lr}
 8009356:	0c0b      	lsrs	r3, r1, #16
 8009358:	0c15      	lsrs	r5, r2, #16
 800935a:	2b00      	cmp	r3, #0
 800935c:	d11e      	bne.n	800939c <_calloc_r+0x48>
 800935e:	2d00      	cmp	r5, #0
 8009360:	d10c      	bne.n	800937c <_calloc_r+0x28>
 8009362:	b289      	uxth	r1, r1
 8009364:	b294      	uxth	r4, r2
 8009366:	434c      	muls	r4, r1
 8009368:	0021      	movs	r1, r4
 800936a:	f7fe f8f3 	bl	8007554 <_malloc_r>
 800936e:	1e05      	subs	r5, r0, #0
 8009370:	d01b      	beq.n	80093aa <_calloc_r+0x56>
 8009372:	0022      	movs	r2, r4
 8009374:	2100      	movs	r1, #0
 8009376:	f7fd f96b 	bl	8006650 <memset>
 800937a:	e016      	b.n	80093aa <_calloc_r+0x56>
 800937c:	1c2b      	adds	r3, r5, #0
 800937e:	1c0c      	adds	r4, r1, #0
 8009380:	b289      	uxth	r1, r1
 8009382:	b292      	uxth	r2, r2
 8009384:	434a      	muls	r2, r1
 8009386:	b29b      	uxth	r3, r3
 8009388:	b2a1      	uxth	r1, r4
 800938a:	4359      	muls	r1, r3
 800938c:	0c14      	lsrs	r4, r2, #16
 800938e:	190c      	adds	r4, r1, r4
 8009390:	0c23      	lsrs	r3, r4, #16
 8009392:	d107      	bne.n	80093a4 <_calloc_r+0x50>
 8009394:	0424      	lsls	r4, r4, #16
 8009396:	b292      	uxth	r2, r2
 8009398:	4314      	orrs	r4, r2
 800939a:	e7e5      	b.n	8009368 <_calloc_r+0x14>
 800939c:	2d00      	cmp	r5, #0
 800939e:	d101      	bne.n	80093a4 <_calloc_r+0x50>
 80093a0:	1c14      	adds	r4, r2, #0
 80093a2:	e7ed      	b.n	8009380 <_calloc_r+0x2c>
 80093a4:	230c      	movs	r3, #12
 80093a6:	2500      	movs	r5, #0
 80093a8:	6003      	str	r3, [r0, #0]
 80093aa:	0028      	movs	r0, r5
 80093ac:	bd70      	pop	{r4, r5, r6, pc}

080093ae <rshift>:
 80093ae:	0002      	movs	r2, r0
 80093b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093b2:	6904      	ldr	r4, [r0, #16]
 80093b4:	b085      	sub	sp, #20
 80093b6:	3214      	adds	r2, #20
 80093b8:	114b      	asrs	r3, r1, #5
 80093ba:	0016      	movs	r6, r2
 80093bc:	9302      	str	r3, [sp, #8]
 80093be:	429c      	cmp	r4, r3
 80093c0:	dd31      	ble.n	8009426 <rshift+0x78>
 80093c2:	261f      	movs	r6, #31
 80093c4:	000f      	movs	r7, r1
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	00a5      	lsls	r5, r4, #2
 80093ca:	18d3      	adds	r3, r2, r3
 80093cc:	4037      	ands	r7, r6
 80093ce:	1955      	adds	r5, r2, r5
 80093d0:	9300      	str	r3, [sp, #0]
 80093d2:	9701      	str	r7, [sp, #4]
 80093d4:	4231      	tst	r1, r6
 80093d6:	d10d      	bne.n	80093f4 <rshift+0x46>
 80093d8:	0016      	movs	r6, r2
 80093da:	0019      	movs	r1, r3
 80093dc:	428d      	cmp	r5, r1
 80093de:	d836      	bhi.n	800944e <rshift+0xa0>
 80093e0:	9b00      	ldr	r3, [sp, #0]
 80093e2:	2600      	movs	r6, #0
 80093e4:	3b03      	subs	r3, #3
 80093e6:	429d      	cmp	r5, r3
 80093e8:	d302      	bcc.n	80093f0 <rshift+0x42>
 80093ea:	9b02      	ldr	r3, [sp, #8]
 80093ec:	1ae4      	subs	r4, r4, r3
 80093ee:	00a6      	lsls	r6, r4, #2
 80093f0:	1996      	adds	r6, r2, r6
 80093f2:	e018      	b.n	8009426 <rshift+0x78>
 80093f4:	2120      	movs	r1, #32
 80093f6:	9e01      	ldr	r6, [sp, #4]
 80093f8:	9f01      	ldr	r7, [sp, #4]
 80093fa:	1b89      	subs	r1, r1, r6
 80093fc:	9e00      	ldr	r6, [sp, #0]
 80093fe:	9103      	str	r1, [sp, #12]
 8009400:	ce02      	ldmia	r6!, {r1}
 8009402:	4694      	mov	ip, r2
 8009404:	40f9      	lsrs	r1, r7
 8009406:	42b5      	cmp	r5, r6
 8009408:	d816      	bhi.n	8009438 <rshift+0x8a>
 800940a:	9b00      	ldr	r3, [sp, #0]
 800940c:	2600      	movs	r6, #0
 800940e:	3301      	adds	r3, #1
 8009410:	429d      	cmp	r5, r3
 8009412:	d303      	bcc.n	800941c <rshift+0x6e>
 8009414:	9b02      	ldr	r3, [sp, #8]
 8009416:	1ae4      	subs	r4, r4, r3
 8009418:	00a6      	lsls	r6, r4, #2
 800941a:	3e04      	subs	r6, #4
 800941c:	1996      	adds	r6, r2, r6
 800941e:	6031      	str	r1, [r6, #0]
 8009420:	2900      	cmp	r1, #0
 8009422:	d000      	beq.n	8009426 <rshift+0x78>
 8009424:	3604      	adds	r6, #4
 8009426:	1ab1      	subs	r1, r6, r2
 8009428:	1089      	asrs	r1, r1, #2
 800942a:	6101      	str	r1, [r0, #16]
 800942c:	4296      	cmp	r6, r2
 800942e:	d101      	bne.n	8009434 <rshift+0x86>
 8009430:	2300      	movs	r3, #0
 8009432:	6143      	str	r3, [r0, #20]
 8009434:	b005      	add	sp, #20
 8009436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009438:	6837      	ldr	r7, [r6, #0]
 800943a:	9b03      	ldr	r3, [sp, #12]
 800943c:	409f      	lsls	r7, r3
 800943e:	430f      	orrs	r7, r1
 8009440:	4661      	mov	r1, ip
 8009442:	c180      	stmia	r1!, {r7}
 8009444:	468c      	mov	ip, r1
 8009446:	9b01      	ldr	r3, [sp, #4]
 8009448:	ce02      	ldmia	r6!, {r1}
 800944a:	40d9      	lsrs	r1, r3
 800944c:	e7db      	b.n	8009406 <rshift+0x58>
 800944e:	c980      	ldmia	r1!, {r7}
 8009450:	c680      	stmia	r6!, {r7}
 8009452:	e7c3      	b.n	80093dc <rshift+0x2e>

08009454 <__hexdig_fun>:
 8009454:	0002      	movs	r2, r0
 8009456:	3a30      	subs	r2, #48	@ 0x30
 8009458:	0003      	movs	r3, r0
 800945a:	2a09      	cmp	r2, #9
 800945c:	d802      	bhi.n	8009464 <__hexdig_fun+0x10>
 800945e:	3b20      	subs	r3, #32
 8009460:	b2d8      	uxtb	r0, r3
 8009462:	4770      	bx	lr
 8009464:	0002      	movs	r2, r0
 8009466:	3a61      	subs	r2, #97	@ 0x61
 8009468:	2a05      	cmp	r2, #5
 800946a:	d801      	bhi.n	8009470 <__hexdig_fun+0x1c>
 800946c:	3b47      	subs	r3, #71	@ 0x47
 800946e:	e7f7      	b.n	8009460 <__hexdig_fun+0xc>
 8009470:	001a      	movs	r2, r3
 8009472:	3a41      	subs	r2, #65	@ 0x41
 8009474:	2000      	movs	r0, #0
 8009476:	2a05      	cmp	r2, #5
 8009478:	d8f3      	bhi.n	8009462 <__hexdig_fun+0xe>
 800947a:	3b27      	subs	r3, #39	@ 0x27
 800947c:	e7f0      	b.n	8009460 <__hexdig_fun+0xc>
	...

08009480 <__gethex>:
 8009480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009482:	b089      	sub	sp, #36	@ 0x24
 8009484:	9307      	str	r3, [sp, #28]
 8009486:	680b      	ldr	r3, [r1, #0]
 8009488:	9201      	str	r2, [sp, #4]
 800948a:	9003      	str	r0, [sp, #12]
 800948c:	9106      	str	r1, [sp, #24]
 800948e:	1c9a      	adds	r2, r3, #2
 8009490:	0011      	movs	r1, r2
 8009492:	3201      	adds	r2, #1
 8009494:	1e50      	subs	r0, r2, #1
 8009496:	7800      	ldrb	r0, [r0, #0]
 8009498:	2830      	cmp	r0, #48	@ 0x30
 800949a:	d0f9      	beq.n	8009490 <__gethex+0x10>
 800949c:	1acb      	subs	r3, r1, r3
 800949e:	3b02      	subs	r3, #2
 80094a0:	9305      	str	r3, [sp, #20]
 80094a2:	9100      	str	r1, [sp, #0]
 80094a4:	f7ff ffd6 	bl	8009454 <__hexdig_fun>
 80094a8:	2300      	movs	r3, #0
 80094aa:	001d      	movs	r5, r3
 80094ac:	9302      	str	r3, [sp, #8]
 80094ae:	4298      	cmp	r0, r3
 80094b0:	d11e      	bne.n	80094f0 <__gethex+0x70>
 80094b2:	2201      	movs	r2, #1
 80094b4:	49a6      	ldr	r1, [pc, #664]	@ (8009750 <__gethex+0x2d0>)
 80094b6:	9800      	ldr	r0, [sp, #0]
 80094b8:	f7ff fed7 	bl	800926a <strncmp>
 80094bc:	0007      	movs	r7, r0
 80094be:	42a8      	cmp	r0, r5
 80094c0:	d000      	beq.n	80094c4 <__gethex+0x44>
 80094c2:	e06a      	b.n	800959a <__gethex+0x11a>
 80094c4:	9b00      	ldr	r3, [sp, #0]
 80094c6:	7858      	ldrb	r0, [r3, #1]
 80094c8:	1c5c      	adds	r4, r3, #1
 80094ca:	f7ff ffc3 	bl	8009454 <__hexdig_fun>
 80094ce:	2301      	movs	r3, #1
 80094d0:	9302      	str	r3, [sp, #8]
 80094d2:	42a8      	cmp	r0, r5
 80094d4:	d02f      	beq.n	8009536 <__gethex+0xb6>
 80094d6:	9400      	str	r4, [sp, #0]
 80094d8:	9b00      	ldr	r3, [sp, #0]
 80094da:	7818      	ldrb	r0, [r3, #0]
 80094dc:	2830      	cmp	r0, #48	@ 0x30
 80094de:	d009      	beq.n	80094f4 <__gethex+0x74>
 80094e0:	f7ff ffb8 	bl	8009454 <__hexdig_fun>
 80094e4:	4242      	negs	r2, r0
 80094e6:	4142      	adcs	r2, r0
 80094e8:	2301      	movs	r3, #1
 80094ea:	0025      	movs	r5, r4
 80094ec:	9202      	str	r2, [sp, #8]
 80094ee:	9305      	str	r3, [sp, #20]
 80094f0:	9c00      	ldr	r4, [sp, #0]
 80094f2:	e004      	b.n	80094fe <__gethex+0x7e>
 80094f4:	9b00      	ldr	r3, [sp, #0]
 80094f6:	3301      	adds	r3, #1
 80094f8:	9300      	str	r3, [sp, #0]
 80094fa:	e7ed      	b.n	80094d8 <__gethex+0x58>
 80094fc:	3401      	adds	r4, #1
 80094fe:	7820      	ldrb	r0, [r4, #0]
 8009500:	f7ff ffa8 	bl	8009454 <__hexdig_fun>
 8009504:	1e07      	subs	r7, r0, #0
 8009506:	d1f9      	bne.n	80094fc <__gethex+0x7c>
 8009508:	2201      	movs	r2, #1
 800950a:	0020      	movs	r0, r4
 800950c:	4990      	ldr	r1, [pc, #576]	@ (8009750 <__gethex+0x2d0>)
 800950e:	f7ff feac 	bl	800926a <strncmp>
 8009512:	2800      	cmp	r0, #0
 8009514:	d10d      	bne.n	8009532 <__gethex+0xb2>
 8009516:	2d00      	cmp	r5, #0
 8009518:	d106      	bne.n	8009528 <__gethex+0xa8>
 800951a:	3401      	adds	r4, #1
 800951c:	0025      	movs	r5, r4
 800951e:	7820      	ldrb	r0, [r4, #0]
 8009520:	f7ff ff98 	bl	8009454 <__hexdig_fun>
 8009524:	2800      	cmp	r0, #0
 8009526:	d102      	bne.n	800952e <__gethex+0xae>
 8009528:	1b2d      	subs	r5, r5, r4
 800952a:	00af      	lsls	r7, r5, #2
 800952c:	e003      	b.n	8009536 <__gethex+0xb6>
 800952e:	3401      	adds	r4, #1
 8009530:	e7f5      	b.n	800951e <__gethex+0x9e>
 8009532:	2d00      	cmp	r5, #0
 8009534:	d1f8      	bne.n	8009528 <__gethex+0xa8>
 8009536:	2220      	movs	r2, #32
 8009538:	7823      	ldrb	r3, [r4, #0]
 800953a:	0026      	movs	r6, r4
 800953c:	4393      	bics	r3, r2
 800953e:	2b50      	cmp	r3, #80	@ 0x50
 8009540:	d11d      	bne.n	800957e <__gethex+0xfe>
 8009542:	7863      	ldrb	r3, [r4, #1]
 8009544:	2b2b      	cmp	r3, #43	@ 0x2b
 8009546:	d02d      	beq.n	80095a4 <__gethex+0x124>
 8009548:	2b2d      	cmp	r3, #45	@ 0x2d
 800954a:	d02f      	beq.n	80095ac <__gethex+0x12c>
 800954c:	2300      	movs	r3, #0
 800954e:	1c66      	adds	r6, r4, #1
 8009550:	9304      	str	r3, [sp, #16]
 8009552:	7830      	ldrb	r0, [r6, #0]
 8009554:	f7ff ff7e 	bl	8009454 <__hexdig_fun>
 8009558:	1e43      	subs	r3, r0, #1
 800955a:	b2db      	uxtb	r3, r3
 800955c:	0005      	movs	r5, r0
 800955e:	2b18      	cmp	r3, #24
 8009560:	d82a      	bhi.n	80095b8 <__gethex+0x138>
 8009562:	7870      	ldrb	r0, [r6, #1]
 8009564:	f7ff ff76 	bl	8009454 <__hexdig_fun>
 8009568:	1e43      	subs	r3, r0, #1
 800956a:	b2db      	uxtb	r3, r3
 800956c:	3601      	adds	r6, #1
 800956e:	3d10      	subs	r5, #16
 8009570:	2b18      	cmp	r3, #24
 8009572:	d91d      	bls.n	80095b0 <__gethex+0x130>
 8009574:	9b04      	ldr	r3, [sp, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d000      	beq.n	800957c <__gethex+0xfc>
 800957a:	426d      	negs	r5, r5
 800957c:	197f      	adds	r7, r7, r5
 800957e:	9b06      	ldr	r3, [sp, #24]
 8009580:	601e      	str	r6, [r3, #0]
 8009582:	9b02      	ldr	r3, [sp, #8]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d019      	beq.n	80095bc <__gethex+0x13c>
 8009588:	9b05      	ldr	r3, [sp, #20]
 800958a:	2606      	movs	r6, #6
 800958c:	425a      	negs	r2, r3
 800958e:	4153      	adcs	r3, r2
 8009590:	425b      	negs	r3, r3
 8009592:	401e      	ands	r6, r3
 8009594:	0030      	movs	r0, r6
 8009596:	b009      	add	sp, #36	@ 0x24
 8009598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800959a:	2301      	movs	r3, #1
 800959c:	2700      	movs	r7, #0
 800959e:	9c00      	ldr	r4, [sp, #0]
 80095a0:	9302      	str	r3, [sp, #8]
 80095a2:	e7c8      	b.n	8009536 <__gethex+0xb6>
 80095a4:	2300      	movs	r3, #0
 80095a6:	9304      	str	r3, [sp, #16]
 80095a8:	1ca6      	adds	r6, r4, #2
 80095aa:	e7d2      	b.n	8009552 <__gethex+0xd2>
 80095ac:	2301      	movs	r3, #1
 80095ae:	e7fa      	b.n	80095a6 <__gethex+0x126>
 80095b0:	230a      	movs	r3, #10
 80095b2:	435d      	muls	r5, r3
 80095b4:	182d      	adds	r5, r5, r0
 80095b6:	e7d4      	b.n	8009562 <__gethex+0xe2>
 80095b8:	0026      	movs	r6, r4
 80095ba:	e7e0      	b.n	800957e <__gethex+0xfe>
 80095bc:	9b00      	ldr	r3, [sp, #0]
 80095be:	9902      	ldr	r1, [sp, #8]
 80095c0:	1ae3      	subs	r3, r4, r3
 80095c2:	3b01      	subs	r3, #1
 80095c4:	2b07      	cmp	r3, #7
 80095c6:	dc0a      	bgt.n	80095de <__gethex+0x15e>
 80095c8:	9803      	ldr	r0, [sp, #12]
 80095ca:	f7fe f853 	bl	8007674 <_Balloc>
 80095ce:	1e05      	subs	r5, r0, #0
 80095d0:	d108      	bne.n	80095e4 <__gethex+0x164>
 80095d2:	002a      	movs	r2, r5
 80095d4:	21e4      	movs	r1, #228	@ 0xe4
 80095d6:	4b5f      	ldr	r3, [pc, #380]	@ (8009754 <__gethex+0x2d4>)
 80095d8:	485f      	ldr	r0, [pc, #380]	@ (8009758 <__gethex+0x2d8>)
 80095da:	f7ff fe9d 	bl	8009318 <__assert_func>
 80095de:	3101      	adds	r1, #1
 80095e0:	105b      	asrs	r3, r3, #1
 80095e2:	e7ef      	b.n	80095c4 <__gethex+0x144>
 80095e4:	0003      	movs	r3, r0
 80095e6:	3314      	adds	r3, #20
 80095e8:	9302      	str	r3, [sp, #8]
 80095ea:	9305      	str	r3, [sp, #20]
 80095ec:	2300      	movs	r3, #0
 80095ee:	001e      	movs	r6, r3
 80095f0:	9304      	str	r3, [sp, #16]
 80095f2:	9b00      	ldr	r3, [sp, #0]
 80095f4:	42a3      	cmp	r3, r4
 80095f6:	d338      	bcc.n	800966a <__gethex+0x1ea>
 80095f8:	9c05      	ldr	r4, [sp, #20]
 80095fa:	9b02      	ldr	r3, [sp, #8]
 80095fc:	c440      	stmia	r4!, {r6}
 80095fe:	1ae4      	subs	r4, r4, r3
 8009600:	10a4      	asrs	r4, r4, #2
 8009602:	0030      	movs	r0, r6
 8009604:	612c      	str	r4, [r5, #16]
 8009606:	f7fe f92d 	bl	8007864 <__hi0bits>
 800960a:	9b01      	ldr	r3, [sp, #4]
 800960c:	0164      	lsls	r4, r4, #5
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	1a26      	subs	r6, r4, r0
 8009612:	9300      	str	r3, [sp, #0]
 8009614:	429e      	cmp	r6, r3
 8009616:	dd52      	ble.n	80096be <__gethex+0x23e>
 8009618:	1af6      	subs	r6, r6, r3
 800961a:	0031      	movs	r1, r6
 800961c:	0028      	movs	r0, r5
 800961e:	f7fe fcc8 	bl	8007fb2 <__any_on>
 8009622:	1e04      	subs	r4, r0, #0
 8009624:	d00f      	beq.n	8009646 <__gethex+0x1c6>
 8009626:	2401      	movs	r4, #1
 8009628:	211f      	movs	r1, #31
 800962a:	0020      	movs	r0, r4
 800962c:	1e73      	subs	r3, r6, #1
 800962e:	4019      	ands	r1, r3
 8009630:	4088      	lsls	r0, r1
 8009632:	0001      	movs	r1, r0
 8009634:	115a      	asrs	r2, r3, #5
 8009636:	9802      	ldr	r0, [sp, #8]
 8009638:	0092      	lsls	r2, r2, #2
 800963a:	5812      	ldr	r2, [r2, r0]
 800963c:	420a      	tst	r2, r1
 800963e:	d002      	beq.n	8009646 <__gethex+0x1c6>
 8009640:	42a3      	cmp	r3, r4
 8009642:	dc34      	bgt.n	80096ae <__gethex+0x22e>
 8009644:	2402      	movs	r4, #2
 8009646:	0031      	movs	r1, r6
 8009648:	0028      	movs	r0, r5
 800964a:	f7ff feb0 	bl	80093ae <rshift>
 800964e:	19bf      	adds	r7, r7, r6
 8009650:	9b01      	ldr	r3, [sp, #4]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	42bb      	cmp	r3, r7
 8009656:	da42      	bge.n	80096de <__gethex+0x25e>
 8009658:	0029      	movs	r1, r5
 800965a:	9803      	ldr	r0, [sp, #12]
 800965c:	f7fe f84e 	bl	80076fc <_Bfree>
 8009660:	2300      	movs	r3, #0
 8009662:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009664:	26a3      	movs	r6, #163	@ 0xa3
 8009666:	6013      	str	r3, [r2, #0]
 8009668:	e794      	b.n	8009594 <__gethex+0x114>
 800966a:	3c01      	subs	r4, #1
 800966c:	7823      	ldrb	r3, [r4, #0]
 800966e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009670:	d012      	beq.n	8009698 <__gethex+0x218>
 8009672:	9b04      	ldr	r3, [sp, #16]
 8009674:	2b20      	cmp	r3, #32
 8009676:	d104      	bne.n	8009682 <__gethex+0x202>
 8009678:	9b05      	ldr	r3, [sp, #20]
 800967a:	c340      	stmia	r3!, {r6}
 800967c:	2600      	movs	r6, #0
 800967e:	9305      	str	r3, [sp, #20]
 8009680:	9604      	str	r6, [sp, #16]
 8009682:	7820      	ldrb	r0, [r4, #0]
 8009684:	f7ff fee6 	bl	8009454 <__hexdig_fun>
 8009688:	230f      	movs	r3, #15
 800968a:	4018      	ands	r0, r3
 800968c:	9b04      	ldr	r3, [sp, #16]
 800968e:	4098      	lsls	r0, r3
 8009690:	3304      	adds	r3, #4
 8009692:	4306      	orrs	r6, r0
 8009694:	9304      	str	r3, [sp, #16]
 8009696:	e7ac      	b.n	80095f2 <__gethex+0x172>
 8009698:	9b00      	ldr	r3, [sp, #0]
 800969a:	42a3      	cmp	r3, r4
 800969c:	d8e9      	bhi.n	8009672 <__gethex+0x1f2>
 800969e:	2201      	movs	r2, #1
 80096a0:	0020      	movs	r0, r4
 80096a2:	492b      	ldr	r1, [pc, #172]	@ (8009750 <__gethex+0x2d0>)
 80096a4:	f7ff fde1 	bl	800926a <strncmp>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d1e2      	bne.n	8009672 <__gethex+0x1f2>
 80096ac:	e7a1      	b.n	80095f2 <__gethex+0x172>
 80096ae:	0028      	movs	r0, r5
 80096b0:	1eb1      	subs	r1, r6, #2
 80096b2:	f7fe fc7e 	bl	8007fb2 <__any_on>
 80096b6:	2800      	cmp	r0, #0
 80096b8:	d0c4      	beq.n	8009644 <__gethex+0x1c4>
 80096ba:	2403      	movs	r4, #3
 80096bc:	e7c3      	b.n	8009646 <__gethex+0x1c6>
 80096be:	9b00      	ldr	r3, [sp, #0]
 80096c0:	2400      	movs	r4, #0
 80096c2:	429e      	cmp	r6, r3
 80096c4:	dac4      	bge.n	8009650 <__gethex+0x1d0>
 80096c6:	1b9e      	subs	r6, r3, r6
 80096c8:	0029      	movs	r1, r5
 80096ca:	0032      	movs	r2, r6
 80096cc:	9803      	ldr	r0, [sp, #12]
 80096ce:	f7fe fa37 	bl	8007b40 <__lshift>
 80096d2:	0003      	movs	r3, r0
 80096d4:	3314      	adds	r3, #20
 80096d6:	0005      	movs	r5, r0
 80096d8:	1bbf      	subs	r7, r7, r6
 80096da:	9302      	str	r3, [sp, #8]
 80096dc:	e7b8      	b.n	8009650 <__gethex+0x1d0>
 80096de:	9b01      	ldr	r3, [sp, #4]
 80096e0:	685e      	ldr	r6, [r3, #4]
 80096e2:	42be      	cmp	r6, r7
 80096e4:	dd6f      	ble.n	80097c6 <__gethex+0x346>
 80096e6:	9b00      	ldr	r3, [sp, #0]
 80096e8:	1bf6      	subs	r6, r6, r7
 80096ea:	42b3      	cmp	r3, r6
 80096ec:	dc36      	bgt.n	800975c <__gethex+0x2dc>
 80096ee:	9b01      	ldr	r3, [sp, #4]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d024      	beq.n	8009740 <__gethex+0x2c0>
 80096f6:	2b03      	cmp	r3, #3
 80096f8:	d026      	beq.n	8009748 <__gethex+0x2c8>
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d117      	bne.n	800972e <__gethex+0x2ae>
 80096fe:	9b00      	ldr	r3, [sp, #0]
 8009700:	42b3      	cmp	r3, r6
 8009702:	d114      	bne.n	800972e <__gethex+0x2ae>
 8009704:	2b01      	cmp	r3, #1
 8009706:	d10b      	bne.n	8009720 <__gethex+0x2a0>
 8009708:	9b01      	ldr	r3, [sp, #4]
 800970a:	9a07      	ldr	r2, [sp, #28]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	2662      	movs	r6, #98	@ 0x62
 8009710:	6013      	str	r3, [r2, #0]
 8009712:	2301      	movs	r3, #1
 8009714:	9a02      	ldr	r2, [sp, #8]
 8009716:	612b      	str	r3, [r5, #16]
 8009718:	6013      	str	r3, [r2, #0]
 800971a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800971c:	601d      	str	r5, [r3, #0]
 800971e:	e739      	b.n	8009594 <__gethex+0x114>
 8009720:	9900      	ldr	r1, [sp, #0]
 8009722:	0028      	movs	r0, r5
 8009724:	3901      	subs	r1, #1
 8009726:	f7fe fc44 	bl	8007fb2 <__any_on>
 800972a:	2800      	cmp	r0, #0
 800972c:	d1ec      	bne.n	8009708 <__gethex+0x288>
 800972e:	0029      	movs	r1, r5
 8009730:	9803      	ldr	r0, [sp, #12]
 8009732:	f7fd ffe3 	bl	80076fc <_Bfree>
 8009736:	2300      	movs	r3, #0
 8009738:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800973a:	2650      	movs	r6, #80	@ 0x50
 800973c:	6013      	str	r3, [r2, #0]
 800973e:	e729      	b.n	8009594 <__gethex+0x114>
 8009740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1f3      	bne.n	800972e <__gethex+0x2ae>
 8009746:	e7df      	b.n	8009708 <__gethex+0x288>
 8009748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1dc      	bne.n	8009708 <__gethex+0x288>
 800974e:	e7ee      	b.n	800972e <__gethex+0x2ae>
 8009750:	0800a043 	.word	0x0800a043
 8009754:	08009fd9 	.word	0x08009fd9
 8009758:	0800a09a 	.word	0x0800a09a
 800975c:	1e77      	subs	r7, r6, #1
 800975e:	2c00      	cmp	r4, #0
 8009760:	d12f      	bne.n	80097c2 <__gethex+0x342>
 8009762:	2f00      	cmp	r7, #0
 8009764:	d004      	beq.n	8009770 <__gethex+0x2f0>
 8009766:	0039      	movs	r1, r7
 8009768:	0028      	movs	r0, r5
 800976a:	f7fe fc22 	bl	8007fb2 <__any_on>
 800976e:	0004      	movs	r4, r0
 8009770:	231f      	movs	r3, #31
 8009772:	117a      	asrs	r2, r7, #5
 8009774:	401f      	ands	r7, r3
 8009776:	3b1e      	subs	r3, #30
 8009778:	40bb      	lsls	r3, r7
 800977a:	9902      	ldr	r1, [sp, #8]
 800977c:	0092      	lsls	r2, r2, #2
 800977e:	5852      	ldr	r2, [r2, r1]
 8009780:	421a      	tst	r2, r3
 8009782:	d001      	beq.n	8009788 <__gethex+0x308>
 8009784:	2302      	movs	r3, #2
 8009786:	431c      	orrs	r4, r3
 8009788:	9b00      	ldr	r3, [sp, #0]
 800978a:	0031      	movs	r1, r6
 800978c:	1b9b      	subs	r3, r3, r6
 800978e:	2602      	movs	r6, #2
 8009790:	0028      	movs	r0, r5
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	f7ff fe0b 	bl	80093ae <rshift>
 8009798:	9b01      	ldr	r3, [sp, #4]
 800979a:	685f      	ldr	r7, [r3, #4]
 800979c:	2c00      	cmp	r4, #0
 800979e:	d03f      	beq.n	8009820 <__gethex+0x3a0>
 80097a0:	9b01      	ldr	r3, [sp, #4]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d010      	beq.n	80097ca <__gethex+0x34a>
 80097a8:	2b03      	cmp	r3, #3
 80097aa:	d012      	beq.n	80097d2 <__gethex+0x352>
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d106      	bne.n	80097be <__gethex+0x33e>
 80097b0:	07a2      	lsls	r2, r4, #30
 80097b2:	d504      	bpl.n	80097be <__gethex+0x33e>
 80097b4:	9a02      	ldr	r2, [sp, #8]
 80097b6:	6812      	ldr	r2, [r2, #0]
 80097b8:	4314      	orrs	r4, r2
 80097ba:	421c      	tst	r4, r3
 80097bc:	d10c      	bne.n	80097d8 <__gethex+0x358>
 80097be:	2310      	movs	r3, #16
 80097c0:	e02d      	b.n	800981e <__gethex+0x39e>
 80097c2:	2401      	movs	r4, #1
 80097c4:	e7d4      	b.n	8009770 <__gethex+0x2f0>
 80097c6:	2601      	movs	r6, #1
 80097c8:	e7e8      	b.n	800979c <__gethex+0x31c>
 80097ca:	2301      	movs	r3, #1
 80097cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80097ce:	1a9b      	subs	r3, r3, r2
 80097d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80097d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d0f2      	beq.n	80097be <__gethex+0x33e>
 80097d8:	692b      	ldr	r3, [r5, #16]
 80097da:	2000      	movs	r0, #0
 80097dc:	9302      	str	r3, [sp, #8]
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	9304      	str	r3, [sp, #16]
 80097e2:	002b      	movs	r3, r5
 80097e4:	9a04      	ldr	r2, [sp, #16]
 80097e6:	3314      	adds	r3, #20
 80097e8:	1899      	adds	r1, r3, r2
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	1c54      	adds	r4, r2, #1
 80097ee:	d01c      	beq.n	800982a <__gethex+0x3aa>
 80097f0:	3201      	adds	r2, #1
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	002b      	movs	r3, r5
 80097f6:	3314      	adds	r3, #20
 80097f8:	2e02      	cmp	r6, #2
 80097fa:	d13f      	bne.n	800987c <__gethex+0x3fc>
 80097fc:	9a01      	ldr	r2, [sp, #4]
 80097fe:	9900      	ldr	r1, [sp, #0]
 8009800:	6812      	ldr	r2, [r2, #0]
 8009802:	3a01      	subs	r2, #1
 8009804:	428a      	cmp	r2, r1
 8009806:	d109      	bne.n	800981c <__gethex+0x39c>
 8009808:	000a      	movs	r2, r1
 800980a:	201f      	movs	r0, #31
 800980c:	4010      	ands	r0, r2
 800980e:	2201      	movs	r2, #1
 8009810:	4082      	lsls	r2, r0
 8009812:	1149      	asrs	r1, r1, #5
 8009814:	0089      	lsls	r1, r1, #2
 8009816:	58cb      	ldr	r3, [r1, r3]
 8009818:	4213      	tst	r3, r2
 800981a:	d13d      	bne.n	8009898 <__gethex+0x418>
 800981c:	2320      	movs	r3, #32
 800981e:	431e      	orrs	r6, r3
 8009820:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009822:	601d      	str	r5, [r3, #0]
 8009824:	9b07      	ldr	r3, [sp, #28]
 8009826:	601f      	str	r7, [r3, #0]
 8009828:	e6b4      	b.n	8009594 <__gethex+0x114>
 800982a:	c301      	stmia	r3!, {r0}
 800982c:	4299      	cmp	r1, r3
 800982e:	d8dc      	bhi.n	80097ea <__gethex+0x36a>
 8009830:	68ab      	ldr	r3, [r5, #8]
 8009832:	9a02      	ldr	r2, [sp, #8]
 8009834:	429a      	cmp	r2, r3
 8009836:	db18      	blt.n	800986a <__gethex+0x3ea>
 8009838:	6869      	ldr	r1, [r5, #4]
 800983a:	9803      	ldr	r0, [sp, #12]
 800983c:	3101      	adds	r1, #1
 800983e:	f7fd ff19 	bl	8007674 <_Balloc>
 8009842:	1e04      	subs	r4, r0, #0
 8009844:	d104      	bne.n	8009850 <__gethex+0x3d0>
 8009846:	0022      	movs	r2, r4
 8009848:	2184      	movs	r1, #132	@ 0x84
 800984a:	4b1d      	ldr	r3, [pc, #116]	@ (80098c0 <__gethex+0x440>)
 800984c:	481d      	ldr	r0, [pc, #116]	@ (80098c4 <__gethex+0x444>)
 800984e:	e6c4      	b.n	80095da <__gethex+0x15a>
 8009850:	0029      	movs	r1, r5
 8009852:	692a      	ldr	r2, [r5, #16]
 8009854:	310c      	adds	r1, #12
 8009856:	3202      	adds	r2, #2
 8009858:	0092      	lsls	r2, r2, #2
 800985a:	300c      	adds	r0, #12
 800985c:	f7ff fd4c 	bl	80092f8 <memcpy>
 8009860:	0029      	movs	r1, r5
 8009862:	9803      	ldr	r0, [sp, #12]
 8009864:	f7fd ff4a 	bl	80076fc <_Bfree>
 8009868:	0025      	movs	r5, r4
 800986a:	692b      	ldr	r3, [r5, #16]
 800986c:	1c5a      	adds	r2, r3, #1
 800986e:	612a      	str	r2, [r5, #16]
 8009870:	2201      	movs	r2, #1
 8009872:	3304      	adds	r3, #4
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	18eb      	adds	r3, r5, r3
 8009878:	605a      	str	r2, [r3, #4]
 800987a:	e7bb      	b.n	80097f4 <__gethex+0x374>
 800987c:	692a      	ldr	r2, [r5, #16]
 800987e:	9902      	ldr	r1, [sp, #8]
 8009880:	428a      	cmp	r2, r1
 8009882:	dd0b      	ble.n	800989c <__gethex+0x41c>
 8009884:	2101      	movs	r1, #1
 8009886:	0028      	movs	r0, r5
 8009888:	f7ff fd91 	bl	80093ae <rshift>
 800988c:	9b01      	ldr	r3, [sp, #4]
 800988e:	3701      	adds	r7, #1
 8009890:	689b      	ldr	r3, [r3, #8]
 8009892:	42bb      	cmp	r3, r7
 8009894:	da00      	bge.n	8009898 <__gethex+0x418>
 8009896:	e6df      	b.n	8009658 <__gethex+0x1d8>
 8009898:	2601      	movs	r6, #1
 800989a:	e7bf      	b.n	800981c <__gethex+0x39c>
 800989c:	221f      	movs	r2, #31
 800989e:	9c00      	ldr	r4, [sp, #0]
 80098a0:	9900      	ldr	r1, [sp, #0]
 80098a2:	4014      	ands	r4, r2
 80098a4:	4211      	tst	r1, r2
 80098a6:	d0f7      	beq.n	8009898 <__gethex+0x418>
 80098a8:	9a04      	ldr	r2, [sp, #16]
 80098aa:	189b      	adds	r3, r3, r2
 80098ac:	3b04      	subs	r3, #4
 80098ae:	6818      	ldr	r0, [r3, #0]
 80098b0:	f7fd ffd8 	bl	8007864 <__hi0bits>
 80098b4:	2320      	movs	r3, #32
 80098b6:	1b1b      	subs	r3, r3, r4
 80098b8:	4298      	cmp	r0, r3
 80098ba:	dbe3      	blt.n	8009884 <__gethex+0x404>
 80098bc:	e7ec      	b.n	8009898 <__gethex+0x418>
 80098be:	46c0      	nop			@ (mov r8, r8)
 80098c0:	08009fd9 	.word	0x08009fd9
 80098c4:	0800a09a 	.word	0x0800a09a

080098c8 <L_shift>:
 80098c8:	2308      	movs	r3, #8
 80098ca:	b570      	push	{r4, r5, r6, lr}
 80098cc:	2520      	movs	r5, #32
 80098ce:	1a9a      	subs	r2, r3, r2
 80098d0:	0092      	lsls	r2, r2, #2
 80098d2:	1aad      	subs	r5, r5, r2
 80098d4:	6843      	ldr	r3, [r0, #4]
 80098d6:	6804      	ldr	r4, [r0, #0]
 80098d8:	001e      	movs	r6, r3
 80098da:	40ae      	lsls	r6, r5
 80098dc:	40d3      	lsrs	r3, r2
 80098de:	4334      	orrs	r4, r6
 80098e0:	6004      	str	r4, [r0, #0]
 80098e2:	6043      	str	r3, [r0, #4]
 80098e4:	3004      	adds	r0, #4
 80098e6:	4288      	cmp	r0, r1
 80098e8:	d3f4      	bcc.n	80098d4 <L_shift+0xc>
 80098ea:	bd70      	pop	{r4, r5, r6, pc}

080098ec <__match>:
 80098ec:	b530      	push	{r4, r5, lr}
 80098ee:	6803      	ldr	r3, [r0, #0]
 80098f0:	780c      	ldrb	r4, [r1, #0]
 80098f2:	3301      	adds	r3, #1
 80098f4:	2c00      	cmp	r4, #0
 80098f6:	d102      	bne.n	80098fe <__match+0x12>
 80098f8:	6003      	str	r3, [r0, #0]
 80098fa:	2001      	movs	r0, #1
 80098fc:	bd30      	pop	{r4, r5, pc}
 80098fe:	781a      	ldrb	r2, [r3, #0]
 8009900:	0015      	movs	r5, r2
 8009902:	3d41      	subs	r5, #65	@ 0x41
 8009904:	2d19      	cmp	r5, #25
 8009906:	d800      	bhi.n	800990a <__match+0x1e>
 8009908:	3220      	adds	r2, #32
 800990a:	3101      	adds	r1, #1
 800990c:	42a2      	cmp	r2, r4
 800990e:	d0ef      	beq.n	80098f0 <__match+0x4>
 8009910:	2000      	movs	r0, #0
 8009912:	e7f3      	b.n	80098fc <__match+0x10>

08009914 <__hexnan>:
 8009914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009916:	680b      	ldr	r3, [r1, #0]
 8009918:	b08b      	sub	sp, #44	@ 0x2c
 800991a:	9201      	str	r2, [sp, #4]
 800991c:	9901      	ldr	r1, [sp, #4]
 800991e:	115a      	asrs	r2, r3, #5
 8009920:	0092      	lsls	r2, r2, #2
 8009922:	188a      	adds	r2, r1, r2
 8009924:	9202      	str	r2, [sp, #8]
 8009926:	0019      	movs	r1, r3
 8009928:	221f      	movs	r2, #31
 800992a:	4011      	ands	r1, r2
 800992c:	9008      	str	r0, [sp, #32]
 800992e:	9106      	str	r1, [sp, #24]
 8009930:	4213      	tst	r3, r2
 8009932:	d002      	beq.n	800993a <__hexnan+0x26>
 8009934:	9b02      	ldr	r3, [sp, #8]
 8009936:	3304      	adds	r3, #4
 8009938:	9302      	str	r3, [sp, #8]
 800993a:	9b02      	ldr	r3, [sp, #8]
 800993c:	2500      	movs	r5, #0
 800993e:	1f1f      	subs	r7, r3, #4
 8009940:	003e      	movs	r6, r7
 8009942:	003c      	movs	r4, r7
 8009944:	9b08      	ldr	r3, [sp, #32]
 8009946:	603d      	str	r5, [r7, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	9507      	str	r5, [sp, #28]
 800994c:	9305      	str	r3, [sp, #20]
 800994e:	9503      	str	r5, [sp, #12]
 8009950:	9b05      	ldr	r3, [sp, #20]
 8009952:	3301      	adds	r3, #1
 8009954:	9309      	str	r3, [sp, #36]	@ 0x24
 8009956:	9b05      	ldr	r3, [sp, #20]
 8009958:	785b      	ldrb	r3, [r3, #1]
 800995a:	9304      	str	r3, [sp, #16]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d028      	beq.n	80099b2 <__hexnan+0x9e>
 8009960:	9804      	ldr	r0, [sp, #16]
 8009962:	f7ff fd77 	bl	8009454 <__hexdig_fun>
 8009966:	2800      	cmp	r0, #0
 8009968:	d155      	bne.n	8009a16 <__hexnan+0x102>
 800996a:	9b04      	ldr	r3, [sp, #16]
 800996c:	2b20      	cmp	r3, #32
 800996e:	d819      	bhi.n	80099a4 <__hexnan+0x90>
 8009970:	9b03      	ldr	r3, [sp, #12]
 8009972:	9a07      	ldr	r2, [sp, #28]
 8009974:	4293      	cmp	r3, r2
 8009976:	dd12      	ble.n	800999e <__hexnan+0x8a>
 8009978:	42b4      	cmp	r4, r6
 800997a:	d206      	bcs.n	800998a <__hexnan+0x76>
 800997c:	2d07      	cmp	r5, #7
 800997e:	dc04      	bgt.n	800998a <__hexnan+0x76>
 8009980:	002a      	movs	r2, r5
 8009982:	0031      	movs	r1, r6
 8009984:	0020      	movs	r0, r4
 8009986:	f7ff ff9f 	bl	80098c8 <L_shift>
 800998a:	9b01      	ldr	r3, [sp, #4]
 800998c:	2508      	movs	r5, #8
 800998e:	429c      	cmp	r4, r3
 8009990:	d905      	bls.n	800999e <__hexnan+0x8a>
 8009992:	1f26      	subs	r6, r4, #4
 8009994:	2500      	movs	r5, #0
 8009996:	0034      	movs	r4, r6
 8009998:	9b03      	ldr	r3, [sp, #12]
 800999a:	6035      	str	r5, [r6, #0]
 800999c:	9307      	str	r3, [sp, #28]
 800999e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099a0:	9305      	str	r3, [sp, #20]
 80099a2:	e7d5      	b.n	8009950 <__hexnan+0x3c>
 80099a4:	9b04      	ldr	r3, [sp, #16]
 80099a6:	2b29      	cmp	r3, #41	@ 0x29
 80099a8:	d15a      	bne.n	8009a60 <__hexnan+0x14c>
 80099aa:	9b05      	ldr	r3, [sp, #20]
 80099ac:	9a08      	ldr	r2, [sp, #32]
 80099ae:	3302      	adds	r3, #2
 80099b0:	6013      	str	r3, [r2, #0]
 80099b2:	9b03      	ldr	r3, [sp, #12]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d053      	beq.n	8009a60 <__hexnan+0x14c>
 80099b8:	42b4      	cmp	r4, r6
 80099ba:	d206      	bcs.n	80099ca <__hexnan+0xb6>
 80099bc:	2d07      	cmp	r5, #7
 80099be:	dc04      	bgt.n	80099ca <__hexnan+0xb6>
 80099c0:	002a      	movs	r2, r5
 80099c2:	0031      	movs	r1, r6
 80099c4:	0020      	movs	r0, r4
 80099c6:	f7ff ff7f 	bl	80098c8 <L_shift>
 80099ca:	9b01      	ldr	r3, [sp, #4]
 80099cc:	429c      	cmp	r4, r3
 80099ce:	d936      	bls.n	8009a3e <__hexnan+0x12a>
 80099d0:	001a      	movs	r2, r3
 80099d2:	0023      	movs	r3, r4
 80099d4:	cb02      	ldmia	r3!, {r1}
 80099d6:	c202      	stmia	r2!, {r1}
 80099d8:	429f      	cmp	r7, r3
 80099da:	d2fb      	bcs.n	80099d4 <__hexnan+0xc0>
 80099dc:	9b02      	ldr	r3, [sp, #8]
 80099de:	1c62      	adds	r2, r4, #1
 80099e0:	1ed9      	subs	r1, r3, #3
 80099e2:	2304      	movs	r3, #4
 80099e4:	4291      	cmp	r1, r2
 80099e6:	d305      	bcc.n	80099f4 <__hexnan+0xe0>
 80099e8:	9b02      	ldr	r3, [sp, #8]
 80099ea:	3b04      	subs	r3, #4
 80099ec:	1b1b      	subs	r3, r3, r4
 80099ee:	089b      	lsrs	r3, r3, #2
 80099f0:	3301      	adds	r3, #1
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	9a01      	ldr	r2, [sp, #4]
 80099f6:	18d3      	adds	r3, r2, r3
 80099f8:	2200      	movs	r2, #0
 80099fa:	c304      	stmia	r3!, {r2}
 80099fc:	429f      	cmp	r7, r3
 80099fe:	d2fc      	bcs.n	80099fa <__hexnan+0xe6>
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d104      	bne.n	8009a10 <__hexnan+0xfc>
 8009a06:	9b01      	ldr	r3, [sp, #4]
 8009a08:	429f      	cmp	r7, r3
 8009a0a:	d127      	bne.n	8009a5c <__hexnan+0x148>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	603b      	str	r3, [r7, #0]
 8009a10:	2005      	movs	r0, #5
 8009a12:	b00b      	add	sp, #44	@ 0x2c
 8009a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a16:	9b03      	ldr	r3, [sp, #12]
 8009a18:	3501      	adds	r5, #1
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	9303      	str	r3, [sp, #12]
 8009a1e:	2d08      	cmp	r5, #8
 8009a20:	dd06      	ble.n	8009a30 <__hexnan+0x11c>
 8009a22:	9b01      	ldr	r3, [sp, #4]
 8009a24:	429c      	cmp	r4, r3
 8009a26:	d9ba      	bls.n	800999e <__hexnan+0x8a>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	2501      	movs	r5, #1
 8009a2c:	3c04      	subs	r4, #4
 8009a2e:	6023      	str	r3, [r4, #0]
 8009a30:	220f      	movs	r2, #15
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	4010      	ands	r0, r2
 8009a36:	011b      	lsls	r3, r3, #4
 8009a38:	4303      	orrs	r3, r0
 8009a3a:	6023      	str	r3, [r4, #0]
 8009a3c:	e7af      	b.n	800999e <__hexnan+0x8a>
 8009a3e:	9b06      	ldr	r3, [sp, #24]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d0dd      	beq.n	8009a00 <__hexnan+0xec>
 8009a44:	2320      	movs	r3, #32
 8009a46:	9a06      	ldr	r2, [sp, #24]
 8009a48:	9902      	ldr	r1, [sp, #8]
 8009a4a:	1a9b      	subs	r3, r3, r2
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	4252      	negs	r2, r2
 8009a50:	40da      	lsrs	r2, r3
 8009a52:	3904      	subs	r1, #4
 8009a54:	680b      	ldr	r3, [r1, #0]
 8009a56:	4013      	ands	r3, r2
 8009a58:	600b      	str	r3, [r1, #0]
 8009a5a:	e7d1      	b.n	8009a00 <__hexnan+0xec>
 8009a5c:	3f04      	subs	r7, #4
 8009a5e:	e7cf      	b.n	8009a00 <__hexnan+0xec>
 8009a60:	2004      	movs	r0, #4
 8009a62:	e7d6      	b.n	8009a12 <__hexnan+0xfe>

08009a64 <__ascii_mbtowc>:
 8009a64:	b082      	sub	sp, #8
 8009a66:	2900      	cmp	r1, #0
 8009a68:	d100      	bne.n	8009a6c <__ascii_mbtowc+0x8>
 8009a6a:	a901      	add	r1, sp, #4
 8009a6c:	1e10      	subs	r0, r2, #0
 8009a6e:	d006      	beq.n	8009a7e <__ascii_mbtowc+0x1a>
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d006      	beq.n	8009a82 <__ascii_mbtowc+0x1e>
 8009a74:	7813      	ldrb	r3, [r2, #0]
 8009a76:	600b      	str	r3, [r1, #0]
 8009a78:	7810      	ldrb	r0, [r2, #0]
 8009a7a:	1e43      	subs	r3, r0, #1
 8009a7c:	4198      	sbcs	r0, r3
 8009a7e:	b002      	add	sp, #8
 8009a80:	4770      	bx	lr
 8009a82:	2002      	movs	r0, #2
 8009a84:	4240      	negs	r0, r0
 8009a86:	e7fa      	b.n	8009a7e <__ascii_mbtowc+0x1a>

08009a88 <_realloc_r>:
 8009a88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a8a:	0006      	movs	r6, r0
 8009a8c:	000c      	movs	r4, r1
 8009a8e:	0015      	movs	r5, r2
 8009a90:	2900      	cmp	r1, #0
 8009a92:	d105      	bne.n	8009aa0 <_realloc_r+0x18>
 8009a94:	0011      	movs	r1, r2
 8009a96:	f7fd fd5d 	bl	8007554 <_malloc_r>
 8009a9a:	0004      	movs	r4, r0
 8009a9c:	0020      	movs	r0, r4
 8009a9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009aa0:	2a00      	cmp	r2, #0
 8009aa2:	d103      	bne.n	8009aac <_realloc_r+0x24>
 8009aa4:	f7fd fce0 	bl	8007468 <_free_r>
 8009aa8:	002c      	movs	r4, r5
 8009aaa:	e7f7      	b.n	8009a9c <_realloc_r+0x14>
 8009aac:	f000 f841 	bl	8009b32 <_malloc_usable_size_r>
 8009ab0:	0007      	movs	r7, r0
 8009ab2:	4285      	cmp	r5, r0
 8009ab4:	d802      	bhi.n	8009abc <_realloc_r+0x34>
 8009ab6:	0843      	lsrs	r3, r0, #1
 8009ab8:	42ab      	cmp	r3, r5
 8009aba:	d3ef      	bcc.n	8009a9c <_realloc_r+0x14>
 8009abc:	0029      	movs	r1, r5
 8009abe:	0030      	movs	r0, r6
 8009ac0:	f7fd fd48 	bl	8007554 <_malloc_r>
 8009ac4:	9001      	str	r0, [sp, #4]
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d101      	bne.n	8009ace <_realloc_r+0x46>
 8009aca:	9c01      	ldr	r4, [sp, #4]
 8009acc:	e7e6      	b.n	8009a9c <_realloc_r+0x14>
 8009ace:	002a      	movs	r2, r5
 8009ad0:	42bd      	cmp	r5, r7
 8009ad2:	d900      	bls.n	8009ad6 <_realloc_r+0x4e>
 8009ad4:	003a      	movs	r2, r7
 8009ad6:	0021      	movs	r1, r4
 8009ad8:	9801      	ldr	r0, [sp, #4]
 8009ada:	f7ff fc0d 	bl	80092f8 <memcpy>
 8009ade:	0021      	movs	r1, r4
 8009ae0:	0030      	movs	r0, r6
 8009ae2:	f7fd fcc1 	bl	8007468 <_free_r>
 8009ae6:	e7f0      	b.n	8009aca <_realloc_r+0x42>

08009ae8 <__ascii_wctomb>:
 8009ae8:	0003      	movs	r3, r0
 8009aea:	1e08      	subs	r0, r1, #0
 8009aec:	d005      	beq.n	8009afa <__ascii_wctomb+0x12>
 8009aee:	2aff      	cmp	r2, #255	@ 0xff
 8009af0:	d904      	bls.n	8009afc <__ascii_wctomb+0x14>
 8009af2:	228a      	movs	r2, #138	@ 0x8a
 8009af4:	2001      	movs	r0, #1
 8009af6:	601a      	str	r2, [r3, #0]
 8009af8:	4240      	negs	r0, r0
 8009afa:	4770      	bx	lr
 8009afc:	2001      	movs	r0, #1
 8009afe:	700a      	strb	r2, [r1, #0]
 8009b00:	e7fb      	b.n	8009afa <__ascii_wctomb+0x12>
	...

08009b04 <fiprintf>:
 8009b04:	b40e      	push	{r1, r2, r3}
 8009b06:	b517      	push	{r0, r1, r2, r4, lr}
 8009b08:	4c05      	ldr	r4, [pc, #20]	@ (8009b20 <fiprintf+0x1c>)
 8009b0a:	ab05      	add	r3, sp, #20
 8009b0c:	cb04      	ldmia	r3!, {r2}
 8009b0e:	0001      	movs	r1, r0
 8009b10:	6820      	ldr	r0, [r4, #0]
 8009b12:	9301      	str	r3, [sp, #4]
 8009b14:	f000 f83c 	bl	8009b90 <_vfiprintf_r>
 8009b18:	bc1e      	pop	{r1, r2, r3, r4}
 8009b1a:	bc08      	pop	{r3}
 8009b1c:	b003      	add	sp, #12
 8009b1e:	4718      	bx	r3
 8009b20:	20000018 	.word	0x20000018

08009b24 <abort>:
 8009b24:	2006      	movs	r0, #6
 8009b26:	b510      	push	{r4, lr}
 8009b28:	f000 f978 	bl	8009e1c <raise>
 8009b2c:	2001      	movs	r0, #1
 8009b2e:	f7f9 f873 	bl	8002c18 <_exit>

08009b32 <_malloc_usable_size_r>:
 8009b32:	1f0b      	subs	r3, r1, #4
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	1f18      	subs	r0, r3, #4
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	da01      	bge.n	8009b40 <_malloc_usable_size_r+0xe>
 8009b3c:	580b      	ldr	r3, [r1, r0]
 8009b3e:	18c0      	adds	r0, r0, r3
 8009b40:	4770      	bx	lr

08009b42 <__sfputc_r>:
 8009b42:	6893      	ldr	r3, [r2, #8]
 8009b44:	b510      	push	{r4, lr}
 8009b46:	3b01      	subs	r3, #1
 8009b48:	6093      	str	r3, [r2, #8]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	da04      	bge.n	8009b58 <__sfputc_r+0x16>
 8009b4e:	6994      	ldr	r4, [r2, #24]
 8009b50:	42a3      	cmp	r3, r4
 8009b52:	db07      	blt.n	8009b64 <__sfputc_r+0x22>
 8009b54:	290a      	cmp	r1, #10
 8009b56:	d005      	beq.n	8009b64 <__sfputc_r+0x22>
 8009b58:	6813      	ldr	r3, [r2, #0]
 8009b5a:	1c58      	adds	r0, r3, #1
 8009b5c:	6010      	str	r0, [r2, #0]
 8009b5e:	7019      	strb	r1, [r3, #0]
 8009b60:	0008      	movs	r0, r1
 8009b62:	bd10      	pop	{r4, pc}
 8009b64:	f7fc fcd4 	bl	8006510 <__swbuf_r>
 8009b68:	0001      	movs	r1, r0
 8009b6a:	e7f9      	b.n	8009b60 <__sfputc_r+0x1e>

08009b6c <__sfputs_r>:
 8009b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6e:	0006      	movs	r6, r0
 8009b70:	000f      	movs	r7, r1
 8009b72:	0014      	movs	r4, r2
 8009b74:	18d5      	adds	r5, r2, r3
 8009b76:	42ac      	cmp	r4, r5
 8009b78:	d101      	bne.n	8009b7e <__sfputs_r+0x12>
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	e007      	b.n	8009b8e <__sfputs_r+0x22>
 8009b7e:	7821      	ldrb	r1, [r4, #0]
 8009b80:	003a      	movs	r2, r7
 8009b82:	0030      	movs	r0, r6
 8009b84:	f7ff ffdd 	bl	8009b42 <__sfputc_r>
 8009b88:	3401      	adds	r4, #1
 8009b8a:	1c43      	adds	r3, r0, #1
 8009b8c:	d1f3      	bne.n	8009b76 <__sfputs_r+0xa>
 8009b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b90 <_vfiprintf_r>:
 8009b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b92:	b0a1      	sub	sp, #132	@ 0x84
 8009b94:	000f      	movs	r7, r1
 8009b96:	0015      	movs	r5, r2
 8009b98:	001e      	movs	r6, r3
 8009b9a:	9003      	str	r0, [sp, #12]
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d004      	beq.n	8009baa <_vfiprintf_r+0x1a>
 8009ba0:	6a03      	ldr	r3, [r0, #32]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d101      	bne.n	8009baa <_vfiprintf_r+0x1a>
 8009ba6:	f7fc fc11 	bl	80063cc <__sinit>
 8009baa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bac:	07db      	lsls	r3, r3, #31
 8009bae:	d405      	bmi.n	8009bbc <_vfiprintf_r+0x2c>
 8009bb0:	89bb      	ldrh	r3, [r7, #12]
 8009bb2:	059b      	lsls	r3, r3, #22
 8009bb4:	d402      	bmi.n	8009bbc <_vfiprintf_r+0x2c>
 8009bb6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009bb8:	f7fc fdcf 	bl	800675a <__retarget_lock_acquire_recursive>
 8009bbc:	89bb      	ldrh	r3, [r7, #12]
 8009bbe:	071b      	lsls	r3, r3, #28
 8009bc0:	d502      	bpl.n	8009bc8 <_vfiprintf_r+0x38>
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d113      	bne.n	8009bf0 <_vfiprintf_r+0x60>
 8009bc8:	0039      	movs	r1, r7
 8009bca:	9803      	ldr	r0, [sp, #12]
 8009bcc:	f7fc fce2 	bl	8006594 <__swsetup_r>
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	d00d      	beq.n	8009bf0 <_vfiprintf_r+0x60>
 8009bd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bd6:	07db      	lsls	r3, r3, #31
 8009bd8:	d503      	bpl.n	8009be2 <_vfiprintf_r+0x52>
 8009bda:	2001      	movs	r0, #1
 8009bdc:	4240      	negs	r0, r0
 8009bde:	b021      	add	sp, #132	@ 0x84
 8009be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009be2:	89bb      	ldrh	r3, [r7, #12]
 8009be4:	059b      	lsls	r3, r3, #22
 8009be6:	d4f8      	bmi.n	8009bda <_vfiprintf_r+0x4a>
 8009be8:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009bea:	f7fc fdb7 	bl	800675c <__retarget_lock_release_recursive>
 8009bee:	e7f4      	b.n	8009bda <_vfiprintf_r+0x4a>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	ac08      	add	r4, sp, #32
 8009bf4:	6163      	str	r3, [r4, #20]
 8009bf6:	3320      	adds	r3, #32
 8009bf8:	7663      	strb	r3, [r4, #25]
 8009bfa:	3310      	adds	r3, #16
 8009bfc:	76a3      	strb	r3, [r4, #26]
 8009bfe:	9607      	str	r6, [sp, #28]
 8009c00:	002e      	movs	r6, r5
 8009c02:	7833      	ldrb	r3, [r6, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d001      	beq.n	8009c0c <_vfiprintf_r+0x7c>
 8009c08:	2b25      	cmp	r3, #37	@ 0x25
 8009c0a:	d148      	bne.n	8009c9e <_vfiprintf_r+0x10e>
 8009c0c:	1b73      	subs	r3, r6, r5
 8009c0e:	9305      	str	r3, [sp, #20]
 8009c10:	42ae      	cmp	r6, r5
 8009c12:	d00b      	beq.n	8009c2c <_vfiprintf_r+0x9c>
 8009c14:	002a      	movs	r2, r5
 8009c16:	0039      	movs	r1, r7
 8009c18:	9803      	ldr	r0, [sp, #12]
 8009c1a:	f7ff ffa7 	bl	8009b6c <__sfputs_r>
 8009c1e:	3001      	adds	r0, #1
 8009c20:	d100      	bne.n	8009c24 <_vfiprintf_r+0x94>
 8009c22:	e0ae      	b.n	8009d82 <_vfiprintf_r+0x1f2>
 8009c24:	6963      	ldr	r3, [r4, #20]
 8009c26:	9a05      	ldr	r2, [sp, #20]
 8009c28:	189b      	adds	r3, r3, r2
 8009c2a:	6163      	str	r3, [r4, #20]
 8009c2c:	7833      	ldrb	r3, [r6, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d100      	bne.n	8009c34 <_vfiprintf_r+0xa4>
 8009c32:	e0a6      	b.n	8009d82 <_vfiprintf_r+0x1f2>
 8009c34:	2201      	movs	r2, #1
 8009c36:	2300      	movs	r3, #0
 8009c38:	4252      	negs	r2, r2
 8009c3a:	6062      	str	r2, [r4, #4]
 8009c3c:	a904      	add	r1, sp, #16
 8009c3e:	3254      	adds	r2, #84	@ 0x54
 8009c40:	1852      	adds	r2, r2, r1
 8009c42:	1c75      	adds	r5, r6, #1
 8009c44:	6023      	str	r3, [r4, #0]
 8009c46:	60e3      	str	r3, [r4, #12]
 8009c48:	60a3      	str	r3, [r4, #8]
 8009c4a:	7013      	strb	r3, [r2, #0]
 8009c4c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009c4e:	4b59      	ldr	r3, [pc, #356]	@ (8009db4 <_vfiprintf_r+0x224>)
 8009c50:	2205      	movs	r2, #5
 8009c52:	0018      	movs	r0, r3
 8009c54:	7829      	ldrb	r1, [r5, #0]
 8009c56:	9305      	str	r3, [sp, #20]
 8009c58:	f7fc fd81 	bl	800675e <memchr>
 8009c5c:	1c6e      	adds	r6, r5, #1
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d11f      	bne.n	8009ca2 <_vfiprintf_r+0x112>
 8009c62:	6822      	ldr	r2, [r4, #0]
 8009c64:	06d3      	lsls	r3, r2, #27
 8009c66:	d504      	bpl.n	8009c72 <_vfiprintf_r+0xe2>
 8009c68:	2353      	movs	r3, #83	@ 0x53
 8009c6a:	a904      	add	r1, sp, #16
 8009c6c:	185b      	adds	r3, r3, r1
 8009c6e:	2120      	movs	r1, #32
 8009c70:	7019      	strb	r1, [r3, #0]
 8009c72:	0713      	lsls	r3, r2, #28
 8009c74:	d504      	bpl.n	8009c80 <_vfiprintf_r+0xf0>
 8009c76:	2353      	movs	r3, #83	@ 0x53
 8009c78:	a904      	add	r1, sp, #16
 8009c7a:	185b      	adds	r3, r3, r1
 8009c7c:	212b      	movs	r1, #43	@ 0x2b
 8009c7e:	7019      	strb	r1, [r3, #0]
 8009c80:	782b      	ldrb	r3, [r5, #0]
 8009c82:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c84:	d016      	beq.n	8009cb4 <_vfiprintf_r+0x124>
 8009c86:	002e      	movs	r6, r5
 8009c88:	2100      	movs	r1, #0
 8009c8a:	200a      	movs	r0, #10
 8009c8c:	68e3      	ldr	r3, [r4, #12]
 8009c8e:	7832      	ldrb	r2, [r6, #0]
 8009c90:	1c75      	adds	r5, r6, #1
 8009c92:	3a30      	subs	r2, #48	@ 0x30
 8009c94:	2a09      	cmp	r2, #9
 8009c96:	d950      	bls.n	8009d3a <_vfiprintf_r+0x1aa>
 8009c98:	2900      	cmp	r1, #0
 8009c9a:	d111      	bne.n	8009cc0 <_vfiprintf_r+0x130>
 8009c9c:	e017      	b.n	8009cce <_vfiprintf_r+0x13e>
 8009c9e:	3601      	adds	r6, #1
 8009ca0:	e7af      	b.n	8009c02 <_vfiprintf_r+0x72>
 8009ca2:	9b05      	ldr	r3, [sp, #20]
 8009ca4:	6822      	ldr	r2, [r4, #0]
 8009ca6:	1ac0      	subs	r0, r0, r3
 8009ca8:	2301      	movs	r3, #1
 8009caa:	4083      	lsls	r3, r0
 8009cac:	4313      	orrs	r3, r2
 8009cae:	0035      	movs	r5, r6
 8009cb0:	6023      	str	r3, [r4, #0]
 8009cb2:	e7cc      	b.n	8009c4e <_vfiprintf_r+0xbe>
 8009cb4:	9b07      	ldr	r3, [sp, #28]
 8009cb6:	1d19      	adds	r1, r3, #4
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	9107      	str	r1, [sp, #28]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	db01      	blt.n	8009cc4 <_vfiprintf_r+0x134>
 8009cc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cc2:	e004      	b.n	8009cce <_vfiprintf_r+0x13e>
 8009cc4:	425b      	negs	r3, r3
 8009cc6:	60e3      	str	r3, [r4, #12]
 8009cc8:	2302      	movs	r3, #2
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	6023      	str	r3, [r4, #0]
 8009cce:	7833      	ldrb	r3, [r6, #0]
 8009cd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009cd2:	d10c      	bne.n	8009cee <_vfiprintf_r+0x15e>
 8009cd4:	7873      	ldrb	r3, [r6, #1]
 8009cd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009cd8:	d134      	bne.n	8009d44 <_vfiprintf_r+0x1b4>
 8009cda:	9b07      	ldr	r3, [sp, #28]
 8009cdc:	3602      	adds	r6, #2
 8009cde:	1d1a      	adds	r2, r3, #4
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	9207      	str	r2, [sp, #28]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	da01      	bge.n	8009cec <_vfiprintf_r+0x15c>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	425b      	negs	r3, r3
 8009cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cee:	4d32      	ldr	r5, [pc, #200]	@ (8009db8 <_vfiprintf_r+0x228>)
 8009cf0:	2203      	movs	r2, #3
 8009cf2:	0028      	movs	r0, r5
 8009cf4:	7831      	ldrb	r1, [r6, #0]
 8009cf6:	f7fc fd32 	bl	800675e <memchr>
 8009cfa:	2800      	cmp	r0, #0
 8009cfc:	d006      	beq.n	8009d0c <_vfiprintf_r+0x17c>
 8009cfe:	2340      	movs	r3, #64	@ 0x40
 8009d00:	1b40      	subs	r0, r0, r5
 8009d02:	4083      	lsls	r3, r0
 8009d04:	6822      	ldr	r2, [r4, #0]
 8009d06:	3601      	adds	r6, #1
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	6023      	str	r3, [r4, #0]
 8009d0c:	7831      	ldrb	r1, [r6, #0]
 8009d0e:	2206      	movs	r2, #6
 8009d10:	482a      	ldr	r0, [pc, #168]	@ (8009dbc <_vfiprintf_r+0x22c>)
 8009d12:	1c75      	adds	r5, r6, #1
 8009d14:	7621      	strb	r1, [r4, #24]
 8009d16:	f7fc fd22 	bl	800675e <memchr>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	d040      	beq.n	8009da0 <_vfiprintf_r+0x210>
 8009d1e:	4b28      	ldr	r3, [pc, #160]	@ (8009dc0 <_vfiprintf_r+0x230>)
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d122      	bne.n	8009d6a <_vfiprintf_r+0x1da>
 8009d24:	2207      	movs	r2, #7
 8009d26:	9b07      	ldr	r3, [sp, #28]
 8009d28:	3307      	adds	r3, #7
 8009d2a:	4393      	bics	r3, r2
 8009d2c:	3308      	adds	r3, #8
 8009d2e:	9307      	str	r3, [sp, #28]
 8009d30:	6963      	ldr	r3, [r4, #20]
 8009d32:	9a04      	ldr	r2, [sp, #16]
 8009d34:	189b      	adds	r3, r3, r2
 8009d36:	6163      	str	r3, [r4, #20]
 8009d38:	e762      	b.n	8009c00 <_vfiprintf_r+0x70>
 8009d3a:	4343      	muls	r3, r0
 8009d3c:	002e      	movs	r6, r5
 8009d3e:	2101      	movs	r1, #1
 8009d40:	189b      	adds	r3, r3, r2
 8009d42:	e7a4      	b.n	8009c8e <_vfiprintf_r+0xfe>
 8009d44:	2300      	movs	r3, #0
 8009d46:	200a      	movs	r0, #10
 8009d48:	0019      	movs	r1, r3
 8009d4a:	3601      	adds	r6, #1
 8009d4c:	6063      	str	r3, [r4, #4]
 8009d4e:	7832      	ldrb	r2, [r6, #0]
 8009d50:	1c75      	adds	r5, r6, #1
 8009d52:	3a30      	subs	r2, #48	@ 0x30
 8009d54:	2a09      	cmp	r2, #9
 8009d56:	d903      	bls.n	8009d60 <_vfiprintf_r+0x1d0>
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d0c8      	beq.n	8009cee <_vfiprintf_r+0x15e>
 8009d5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009d5e:	e7c6      	b.n	8009cee <_vfiprintf_r+0x15e>
 8009d60:	4341      	muls	r1, r0
 8009d62:	002e      	movs	r6, r5
 8009d64:	2301      	movs	r3, #1
 8009d66:	1889      	adds	r1, r1, r2
 8009d68:	e7f1      	b.n	8009d4e <_vfiprintf_r+0x1be>
 8009d6a:	aa07      	add	r2, sp, #28
 8009d6c:	9200      	str	r2, [sp, #0]
 8009d6e:	0021      	movs	r1, r4
 8009d70:	003a      	movs	r2, r7
 8009d72:	4b14      	ldr	r3, [pc, #80]	@ (8009dc4 <_vfiprintf_r+0x234>)
 8009d74:	9803      	ldr	r0, [sp, #12]
 8009d76:	f7fb fcd3 	bl	8005720 <_printf_float>
 8009d7a:	9004      	str	r0, [sp, #16]
 8009d7c:	9b04      	ldr	r3, [sp, #16]
 8009d7e:	3301      	adds	r3, #1
 8009d80:	d1d6      	bne.n	8009d30 <_vfiprintf_r+0x1a0>
 8009d82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d84:	07db      	lsls	r3, r3, #31
 8009d86:	d405      	bmi.n	8009d94 <_vfiprintf_r+0x204>
 8009d88:	89bb      	ldrh	r3, [r7, #12]
 8009d8a:	059b      	lsls	r3, r3, #22
 8009d8c:	d402      	bmi.n	8009d94 <_vfiprintf_r+0x204>
 8009d8e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009d90:	f7fc fce4 	bl	800675c <__retarget_lock_release_recursive>
 8009d94:	89bb      	ldrh	r3, [r7, #12]
 8009d96:	065b      	lsls	r3, r3, #25
 8009d98:	d500      	bpl.n	8009d9c <_vfiprintf_r+0x20c>
 8009d9a:	e71e      	b.n	8009bda <_vfiprintf_r+0x4a>
 8009d9c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009d9e:	e71e      	b.n	8009bde <_vfiprintf_r+0x4e>
 8009da0:	aa07      	add	r2, sp, #28
 8009da2:	9200      	str	r2, [sp, #0]
 8009da4:	0021      	movs	r1, r4
 8009da6:	003a      	movs	r2, r7
 8009da8:	4b06      	ldr	r3, [pc, #24]	@ (8009dc4 <_vfiprintf_r+0x234>)
 8009daa:	9803      	ldr	r0, [sp, #12]
 8009dac:	f7fb ff66 	bl	8005c7c <_printf_i>
 8009db0:	e7e3      	b.n	8009d7a <_vfiprintf_r+0x1ea>
 8009db2:	46c0      	nop			@ (mov r8, r8)
 8009db4:	0800a045 	.word	0x0800a045
 8009db8:	0800a04b 	.word	0x0800a04b
 8009dbc:	0800a04f 	.word	0x0800a04f
 8009dc0:	08005721 	.word	0x08005721
 8009dc4:	08009b6d 	.word	0x08009b6d

08009dc8 <_raise_r>:
 8009dc8:	b570      	push	{r4, r5, r6, lr}
 8009dca:	0004      	movs	r4, r0
 8009dcc:	000d      	movs	r5, r1
 8009dce:	291f      	cmp	r1, #31
 8009dd0:	d904      	bls.n	8009ddc <_raise_r+0x14>
 8009dd2:	2316      	movs	r3, #22
 8009dd4:	6003      	str	r3, [r0, #0]
 8009dd6:	2001      	movs	r0, #1
 8009dd8:	4240      	negs	r0, r0
 8009dda:	bd70      	pop	{r4, r5, r6, pc}
 8009ddc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d004      	beq.n	8009dec <_raise_r+0x24>
 8009de2:	008a      	lsls	r2, r1, #2
 8009de4:	189b      	adds	r3, r3, r2
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	2a00      	cmp	r2, #0
 8009dea:	d108      	bne.n	8009dfe <_raise_r+0x36>
 8009dec:	0020      	movs	r0, r4
 8009dee:	f000 f831 	bl	8009e54 <_getpid_r>
 8009df2:	002a      	movs	r2, r5
 8009df4:	0001      	movs	r1, r0
 8009df6:	0020      	movs	r0, r4
 8009df8:	f000 f81a 	bl	8009e30 <_kill_r>
 8009dfc:	e7ed      	b.n	8009dda <_raise_r+0x12>
 8009dfe:	2a01      	cmp	r2, #1
 8009e00:	d009      	beq.n	8009e16 <_raise_r+0x4e>
 8009e02:	1c51      	adds	r1, r2, #1
 8009e04:	d103      	bne.n	8009e0e <_raise_r+0x46>
 8009e06:	2316      	movs	r3, #22
 8009e08:	6003      	str	r3, [r0, #0]
 8009e0a:	2001      	movs	r0, #1
 8009e0c:	e7e5      	b.n	8009dda <_raise_r+0x12>
 8009e0e:	2100      	movs	r1, #0
 8009e10:	0028      	movs	r0, r5
 8009e12:	6019      	str	r1, [r3, #0]
 8009e14:	4790      	blx	r2
 8009e16:	2000      	movs	r0, #0
 8009e18:	e7df      	b.n	8009dda <_raise_r+0x12>
	...

08009e1c <raise>:
 8009e1c:	b510      	push	{r4, lr}
 8009e1e:	4b03      	ldr	r3, [pc, #12]	@ (8009e2c <raise+0x10>)
 8009e20:	0001      	movs	r1, r0
 8009e22:	6818      	ldr	r0, [r3, #0]
 8009e24:	f7ff ffd0 	bl	8009dc8 <_raise_r>
 8009e28:	bd10      	pop	{r4, pc}
 8009e2a:	46c0      	nop			@ (mov r8, r8)
 8009e2c:	20000018 	.word	0x20000018

08009e30 <_kill_r>:
 8009e30:	2300      	movs	r3, #0
 8009e32:	b570      	push	{r4, r5, r6, lr}
 8009e34:	4d06      	ldr	r5, [pc, #24]	@ (8009e50 <_kill_r+0x20>)
 8009e36:	0004      	movs	r4, r0
 8009e38:	0008      	movs	r0, r1
 8009e3a:	0011      	movs	r1, r2
 8009e3c:	602b      	str	r3, [r5, #0]
 8009e3e:	f7f8 fedb 	bl	8002bf8 <_kill>
 8009e42:	1c43      	adds	r3, r0, #1
 8009e44:	d103      	bne.n	8009e4e <_kill_r+0x1e>
 8009e46:	682b      	ldr	r3, [r5, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d000      	beq.n	8009e4e <_kill_r+0x1e>
 8009e4c:	6023      	str	r3, [r4, #0]
 8009e4e:	bd70      	pop	{r4, r5, r6, pc}
 8009e50:	20000c14 	.word	0x20000c14

08009e54 <_getpid_r>:
 8009e54:	b510      	push	{r4, lr}
 8009e56:	f7f8 fec9 	bl	8002bec <_getpid>
 8009e5a:	bd10      	pop	{r4, pc}

08009e5c <_init>:
 8009e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5e:	46c0      	nop			@ (mov r8, r8)
 8009e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e62:	bc08      	pop	{r3}
 8009e64:	469e      	mov	lr, r3
 8009e66:	4770      	bx	lr

08009e68 <_fini>:
 8009e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e6a:	46c0      	nop			@ (mov r8, r8)
 8009e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e6e:	bc08      	pop	{r3}
 8009e70:	469e      	mov	lr, r3
 8009e72:	4770      	bx	lr
